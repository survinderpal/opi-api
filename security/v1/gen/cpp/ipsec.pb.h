// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipsec.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ipsec_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ipsec_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ipsec_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ipsec_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[41]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ipsec_2eproto;
namespace opi_api {
namespace security {
namespace v1 {
class Addrs;
struct AddrsDefaultTypeInternal;
extern AddrsDefaultTypeInternal _Addrs_default_instance_;
class CaCerts;
struct CaCertsDefaultTypeInternal;
extern CaCertsDefaultTypeInternal _CaCerts_default_instance_;
class CertPolicy;
struct CertPolicyDefaultTypeInternal;
extern CertPolicyDefaultTypeInternal _CertPolicy_default_instance_;
class Certs;
struct CertsDefaultTypeInternal;
extern CertsDefaultTypeInternal _Certs_default_instance_;
class Child;
struct ChildDefaultTypeInternal;
extern ChildDefaultTypeInternal _Child_default_instance_;
class Connection;
struct ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
class Groups;
struct GroupsDefaultTypeInternal;
extern GroupsDefaultTypeInternal _Groups_default_instance_;
class IPsecInitiateReq;
struct IPsecInitiateReqDefaultTypeInternal;
extern IPsecInitiateReqDefaultTypeInternal _IPsecInitiateReq_default_instance_;
class IPsecInitiateResp;
struct IPsecInitiateRespDefaultTypeInternal;
extern IPsecInitiateRespDefaultTypeInternal _IPsecInitiateResp_default_instance_;
class IPsecListCertsReq;
struct IPsecListCertsReqDefaultTypeInternal;
extern IPsecListCertsReqDefaultTypeInternal _IPsecListCertsReq_default_instance_;
class IPsecListCertsResp;
struct IPsecListCertsRespDefaultTypeInternal;
extern IPsecListCertsRespDefaultTypeInternal _IPsecListCertsResp_default_instance_;
class IPsecListConnsReq;
struct IPsecListConnsReqDefaultTypeInternal;
extern IPsecListConnsReqDefaultTypeInternal _IPsecListConnsReq_default_instance_;
class IPsecListConnsResp;
struct IPsecListConnsRespDefaultTypeInternal;
extern IPsecListConnsRespDefaultTypeInternal _IPsecListConnsResp_default_instance_;
class IPsecListSasReq;
struct IPsecListSasReqDefaultTypeInternal;
extern IPsecListSasReqDefaultTypeInternal _IPsecListSasReq_default_instance_;
class IPsecListSasResp;
struct IPsecListSasRespDefaultTypeInternal;
extern IPsecListSasRespDefaultTypeInternal _IPsecListSasResp_default_instance_;
class IPsecLoadConnReq;
struct IPsecLoadConnReqDefaultTypeInternal;
extern IPsecLoadConnReqDefaultTypeInternal _IPsecLoadConnReq_default_instance_;
class IPsecLoadConnResp;
struct IPsecLoadConnRespDefaultTypeInternal;
extern IPsecLoadConnRespDefaultTypeInternal _IPsecLoadConnResp_default_instance_;
class IPsecRekeyReq;
struct IPsecRekeyReqDefaultTypeInternal;
extern IPsecRekeyReqDefaultTypeInternal _IPsecRekeyReq_default_instance_;
class IPsecRekeyResp;
struct IPsecRekeyRespDefaultTypeInternal;
extern IPsecRekeyRespDefaultTypeInternal _IPsecRekeyResp_default_instance_;
class IPsecStatsReq;
struct IPsecStatsReqDefaultTypeInternal;
extern IPsecStatsReqDefaultTypeInternal _IPsecStatsReq_default_instance_;
class IPsecStatsResp;
struct IPsecStatsRespDefaultTypeInternal;
extern IPsecStatsRespDefaultTypeInternal _IPsecStatsResp_default_instance_;
class IPsecTerminateReq;
struct IPsecTerminateReqDefaultTypeInternal;
extern IPsecTerminateReqDefaultTypeInternal _IPsecTerminateReq_default_instance_;
class IPsecTerminateResp;
struct IPsecTerminateRespDefaultTypeInternal;
extern IPsecTerminateRespDefaultTypeInternal _IPsecTerminateResp_default_instance_;
class IPsecUnloadConnReq;
struct IPsecUnloadConnReqDefaultTypeInternal;
extern IPsecUnloadConnReqDefaultTypeInternal _IPsecUnloadConnReq_default_instance_;
class IPsecUnloadConnResp;
struct IPsecUnloadConnRespDefaultTypeInternal;
extern IPsecUnloadConnRespDefaultTypeInternal _IPsecUnloadConnResp_default_instance_;
class IPsecVersionReq;
struct IPsecVersionReqDefaultTypeInternal;
extern IPsecVersionReqDefaultTypeInternal _IPsecVersionReq_default_instance_;
class IPsecVersionResp;
struct IPsecVersionRespDefaultTypeInternal;
extern IPsecVersionRespDefaultTypeInternal _IPsecVersionResp_default_instance_;
class ListCert;
struct ListCertDefaultTypeInternal;
extern ListCertDefaultTypeInternal _ListCert_default_instance_;
class ListChild;
struct ListChildDefaultTypeInternal;
extern ListChildDefaultTypeInternal _ListChild_default_instance_;
class ListChildSa;
struct ListChildSaDefaultTypeInternal;
extern ListChildSaDefaultTypeInternal _ListChildSa_default_instance_;
class ListConnAuth;
struct ListConnAuthDefaultTypeInternal;
extern ListConnAuthDefaultTypeInternal _ListConnAuth_default_instance_;
class ListConnResp;
struct ListConnRespDefaultTypeInternal;
extern ListConnRespDefaultTypeInternal _ListConnResp_default_instance_;
class ListIkeSa;
struct ListIkeSaDefaultTypeInternal;
extern ListIkeSaDefaultTypeInternal _ListIkeSa_default_instance_;
class LocalAuth;
struct LocalAuthDefaultTypeInternal;
extern LocalAuthDefaultTypeInternal _LocalAuth_default_instance_;
class Pools;
struct PoolsDefaultTypeInternal;
extern PoolsDefaultTypeInternal _Pools_default_instance_;
class Proposals;
struct ProposalsDefaultTypeInternal;
extern ProposalsDefaultTypeInternal _Proposals_default_instance_;
class PubKeys;
struct PubKeysDefaultTypeInternal;
extern PubKeysDefaultTypeInternal _PubKeys_default_instance_;
class RemoteAuth;
struct RemoteAuthDefaultTypeInternal;
extern RemoteAuthDefaultTypeInternal _RemoteAuth_default_instance_;
class TrafficSelectors;
struct TrafficSelectorsDefaultTypeInternal;
extern TrafficSelectorsDefaultTypeInternal _TrafficSelectors_default_instance_;
class TrafficSelectors_TrafficSelector;
struct TrafficSelectors_TrafficSelectorDefaultTypeInternal;
extern TrafficSelectors_TrafficSelectorDefaultTypeInternal _TrafficSelectors_TrafficSelector_default_instance_;
class Vips;
struct VipsDefaultTypeInternal;
extern VipsDefaultTypeInternal _Vips_default_instance_;
}  // namespace v1
}  // namespace security
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::security::v1::Addrs* Arena::CreateMaybeMessage<::opi_api::security::v1::Addrs>(Arena*);
template<> ::opi_api::security::v1::CaCerts* Arena::CreateMaybeMessage<::opi_api::security::v1::CaCerts>(Arena*);
template<> ::opi_api::security::v1::CertPolicy* Arena::CreateMaybeMessage<::opi_api::security::v1::CertPolicy>(Arena*);
template<> ::opi_api::security::v1::Certs* Arena::CreateMaybeMessage<::opi_api::security::v1::Certs>(Arena*);
template<> ::opi_api::security::v1::Child* Arena::CreateMaybeMessage<::opi_api::security::v1::Child>(Arena*);
template<> ::opi_api::security::v1::Connection* Arena::CreateMaybeMessage<::opi_api::security::v1::Connection>(Arena*);
template<> ::opi_api::security::v1::Groups* Arena::CreateMaybeMessage<::opi_api::security::v1::Groups>(Arena*);
template<> ::opi_api::security::v1::IPsecInitiateReq* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecInitiateReq>(Arena*);
template<> ::opi_api::security::v1::IPsecInitiateResp* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecInitiateResp>(Arena*);
template<> ::opi_api::security::v1::IPsecListCertsReq* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecListCertsReq>(Arena*);
template<> ::opi_api::security::v1::IPsecListCertsResp* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecListCertsResp>(Arena*);
template<> ::opi_api::security::v1::IPsecListConnsReq* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecListConnsReq>(Arena*);
template<> ::opi_api::security::v1::IPsecListConnsResp* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecListConnsResp>(Arena*);
template<> ::opi_api::security::v1::IPsecListSasReq* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecListSasReq>(Arena*);
template<> ::opi_api::security::v1::IPsecListSasResp* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecListSasResp>(Arena*);
template<> ::opi_api::security::v1::IPsecLoadConnReq* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecLoadConnReq>(Arena*);
template<> ::opi_api::security::v1::IPsecLoadConnResp* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecLoadConnResp>(Arena*);
template<> ::opi_api::security::v1::IPsecRekeyReq* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecRekeyReq>(Arena*);
template<> ::opi_api::security::v1::IPsecRekeyResp* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecRekeyResp>(Arena*);
template<> ::opi_api::security::v1::IPsecStatsReq* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecStatsReq>(Arena*);
template<> ::opi_api::security::v1::IPsecStatsResp* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecStatsResp>(Arena*);
template<> ::opi_api::security::v1::IPsecTerminateReq* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecTerminateReq>(Arena*);
template<> ::opi_api::security::v1::IPsecTerminateResp* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecTerminateResp>(Arena*);
template<> ::opi_api::security::v1::IPsecUnloadConnReq* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecUnloadConnReq>(Arena*);
template<> ::opi_api::security::v1::IPsecUnloadConnResp* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecUnloadConnResp>(Arena*);
template<> ::opi_api::security::v1::IPsecVersionReq* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecVersionReq>(Arena*);
template<> ::opi_api::security::v1::IPsecVersionResp* Arena::CreateMaybeMessage<::opi_api::security::v1::IPsecVersionResp>(Arena*);
template<> ::opi_api::security::v1::ListCert* Arena::CreateMaybeMessage<::opi_api::security::v1::ListCert>(Arena*);
template<> ::opi_api::security::v1::ListChild* Arena::CreateMaybeMessage<::opi_api::security::v1::ListChild>(Arena*);
template<> ::opi_api::security::v1::ListChildSa* Arena::CreateMaybeMessage<::opi_api::security::v1::ListChildSa>(Arena*);
template<> ::opi_api::security::v1::ListConnAuth* Arena::CreateMaybeMessage<::opi_api::security::v1::ListConnAuth>(Arena*);
template<> ::opi_api::security::v1::ListConnResp* Arena::CreateMaybeMessage<::opi_api::security::v1::ListConnResp>(Arena*);
template<> ::opi_api::security::v1::ListIkeSa* Arena::CreateMaybeMessage<::opi_api::security::v1::ListIkeSa>(Arena*);
template<> ::opi_api::security::v1::LocalAuth* Arena::CreateMaybeMessage<::opi_api::security::v1::LocalAuth>(Arena*);
template<> ::opi_api::security::v1::Pools* Arena::CreateMaybeMessage<::opi_api::security::v1::Pools>(Arena*);
template<> ::opi_api::security::v1::Proposals* Arena::CreateMaybeMessage<::opi_api::security::v1::Proposals>(Arena*);
template<> ::opi_api::security::v1::PubKeys* Arena::CreateMaybeMessage<::opi_api::security::v1::PubKeys>(Arena*);
template<> ::opi_api::security::v1::RemoteAuth* Arena::CreateMaybeMessage<::opi_api::security::v1::RemoteAuth>(Arena*);
template<> ::opi_api::security::v1::TrafficSelectors* Arena::CreateMaybeMessage<::opi_api::security::v1::TrafficSelectors>(Arena*);
template<> ::opi_api::security::v1::TrafficSelectors_TrafficSelector* Arena::CreateMaybeMessage<::opi_api::security::v1::TrafficSelectors_TrafficSelector>(Arena*);
template<> ::opi_api::security::v1::Vips* Arena::CreateMaybeMessage<::opi_api::security::v1::Vips>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace security {
namespace v1 {

enum CryptoAlgorithm : int {
  NONE_CRYPTO = 0,
  AES128 = 1,
  AES192 = 2,
  AES256 = 3,
  AES128GCM128 = 4,
  AES256GCM128 = 5,
  AES128GMAC = 6,
  AES256GMAC = 7,
  CryptoAlgorithm_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CryptoAlgorithm_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CryptoAlgorithm_IsValid(int value);
constexpr CryptoAlgorithm CryptoAlgorithm_MIN = NONE_CRYPTO;
constexpr CryptoAlgorithm CryptoAlgorithm_MAX = AES256GMAC;
constexpr int CryptoAlgorithm_ARRAYSIZE = CryptoAlgorithm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CryptoAlgorithm_descriptor();
template<typename T>
inline const std::string& CryptoAlgorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CryptoAlgorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CryptoAlgorithm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CryptoAlgorithm_descriptor(), enum_t_value);
}
inline bool CryptoAlgorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CryptoAlgorithm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CryptoAlgorithm>(
    CryptoAlgorithm_descriptor(), name, value);
}
enum IntegAlgorithm : int {
  NONE_INTEG = 0,
  MD5 = 1,
  MD5_128 = 2,
  SHA1 = 3,
  SHA1_160 = 4,
  SHA256 = 5,
  SHA384 = 7,
  SHA512 = 8,
  SHA256_96 = 9,
  IntegAlgorithm_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  IntegAlgorithm_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool IntegAlgorithm_IsValid(int value);
constexpr IntegAlgorithm IntegAlgorithm_MIN = NONE_INTEG;
constexpr IntegAlgorithm IntegAlgorithm_MAX = SHA256_96;
constexpr int IntegAlgorithm_ARRAYSIZE = IntegAlgorithm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntegAlgorithm_descriptor();
template<typename T>
inline const std::string& IntegAlgorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IntegAlgorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IntegAlgorithm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IntegAlgorithm_descriptor(), enum_t_value);
}
inline bool IntegAlgorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IntegAlgorithm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IntegAlgorithm>(
    IntegAlgorithm_descriptor(), name, value);
}
enum DiffieHellmanGroups : int {
  NONE_DH_GROUP = 0,
  MODP768 = 1,
  MODP1024 = 2,
  MODP1536 = 3,
  MODP2048 = 4,
  MODP3072 = 5,
  MODP4096 = 6,
  MODP6144 = 7,
  MODP8192 = 8,
  MODP1024S160 = 9,
  MODP2048S224 = 10,
  MODP2048S256 = 11,
  CURVE25519 = 12,
  DiffieHellmanGroups_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DiffieHellmanGroups_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DiffieHellmanGroups_IsValid(int value);
constexpr DiffieHellmanGroups DiffieHellmanGroups_MIN = NONE_DH_GROUP;
constexpr DiffieHellmanGroups DiffieHellmanGroups_MAX = CURVE25519;
constexpr int DiffieHellmanGroups_ARRAYSIZE = DiffieHellmanGroups_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DiffieHellmanGroups_descriptor();
template<typename T>
inline const std::string& DiffieHellmanGroups_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DiffieHellmanGroups>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DiffieHellmanGroups_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DiffieHellmanGroups_descriptor(), enum_t_value);
}
inline bool DiffieHellmanGroups_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DiffieHellmanGroups* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DiffieHellmanGroups>(
    DiffieHellmanGroups_descriptor(), name, value);
}
enum PseudoRandomFunction : int {
  NONE_PRF = 0,
  PRFMD5 = 1,
  PRFSHA1 = 2,
  PRFAESXCBC = 3,
  PRFAESCMAC = 4,
  PRFSHA256 = 5,
  PRFSHA384 = 6,
  PRFSHA512 = 7,
  PseudoRandomFunction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PseudoRandomFunction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PseudoRandomFunction_IsValid(int value);
constexpr PseudoRandomFunction PseudoRandomFunction_MIN = NONE_PRF;
constexpr PseudoRandomFunction PseudoRandomFunction_MAX = PRFSHA512;
constexpr int PseudoRandomFunction_ARRAYSIZE = PseudoRandomFunction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PseudoRandomFunction_descriptor();
template<typename T>
inline const std::string& PseudoRandomFunction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PseudoRandomFunction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PseudoRandomFunction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PseudoRandomFunction_descriptor(), enum_t_value);
}
inline bool PseudoRandomFunction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PseudoRandomFunction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PseudoRandomFunction>(
    PseudoRandomFunction_descriptor(), name, value);
}
enum IPsecMode : int {
  TUNNEL_MODE = 0,
  TRANSPORT_MODE = 1,
  IPsecMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  IPsecMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool IPsecMode_IsValid(int value);
constexpr IPsecMode IPsecMode_MIN = TUNNEL_MODE;
constexpr IPsecMode IPsecMode_MAX = TRANSPORT_MODE;
constexpr int IPsecMode_ARRAYSIZE = IPsecMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IPsecMode_descriptor();
template<typename T>
inline const std::string& IPsecMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IPsecMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IPsecMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IPsecMode_descriptor(), enum_t_value);
}
inline bool IPsecMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IPsecMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IPsecMode>(
    IPsecMode_descriptor(), name, value);
}
enum AuthType : int {
  PUBKEY = 0,
  PSK = 1,
  XAUTH = 2,
  EAP = 3,
  AuthType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AuthType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AuthType_IsValid(int value);
constexpr AuthType AuthType_MIN = PUBKEY;
constexpr AuthType AuthType_MAX = EAP;
constexpr int AuthType_ARRAYSIZE = AuthType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthType_descriptor();
template<typename T>
inline const std::string& AuthType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthType_descriptor(), enum_t_value);
}
inline bool AuthType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuthType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthType>(
    AuthType_descriptor(), name, value);
}
enum IkeSaState : int {
  CREATED = 0,
  CONNECTING = 1,
  ESTABLISHED = 2,
  PASSIVE = 3,
  REKEYING = 4,
  REKEYED = 5,
  DELETING = 6,
  DESTROYING = 7,
  IkeSaState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  IkeSaState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool IkeSaState_IsValid(int value);
constexpr IkeSaState IkeSaState_MIN = CREATED;
constexpr IkeSaState IkeSaState_MAX = DESTROYING;
constexpr int IkeSaState_ARRAYSIZE = IkeSaState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IkeSaState_descriptor();
template<typename T>
inline const std::string& IkeSaState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IkeSaState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IkeSaState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IkeSaState_descriptor(), enum_t_value);
}
inline bool IkeSaState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IkeSaState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IkeSaState>(
    IkeSaState_descriptor(), name, value);
}
enum ChildSaState : int {
  CHILD_CREATED = 0,
  CHILD_ROUTED = 1,
  CHILD_INSTALLING = 2,
  CHILD_INSTALLED = 3,
  CHILD_UPDATING = 4,
  CHILD_REKEYING = 5,
  CHILD_REKEYED = 6,
  CHILD_RETRYING = 7,
  CHILD_DELETING = 8,
  CHILD_DELETED = 9,
  CHILD_DESTROYING = 10,
  ChildSaState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChildSaState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChildSaState_IsValid(int value);
constexpr ChildSaState ChildSaState_MIN = CHILD_CREATED;
constexpr ChildSaState ChildSaState_MAX = CHILD_DESTROYING;
constexpr int ChildSaState_ARRAYSIZE = ChildSaState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChildSaState_descriptor();
template<typename T>
inline const std::string& ChildSaState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChildSaState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChildSaState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChildSaState_descriptor(), enum_t_value);
}
inline bool ChildSaState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChildSaState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChildSaState>(
    ChildSaState_descriptor(), name, value);
}
enum CertificateType : int {
  CERT_X509 = 0,
  CERT_X509_AC = 1,
  CERT_X509_CRL = 2,
  CERT_OCSP_RESPONSE = 3,
  CERT_PUBKEY = 4,
  CertificateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CertificateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CertificateType_IsValid(int value);
constexpr CertificateType CertificateType_MIN = CERT_X509;
constexpr CertificateType CertificateType_MAX = CERT_PUBKEY;
constexpr int CertificateType_ARRAYSIZE = CertificateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CertificateType_descriptor();
template<typename T>
inline const std::string& CertificateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CertificateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CertificateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CertificateType_descriptor(), enum_t_value);
}
inline bool CertificateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CertificateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CertificateType>(
    CertificateType_descriptor(), name, value);
}
enum X509CertificateFlag : int {
  X509_CERT_FLAG_NONE = 0,
  X509_CERT_FLAG_CA = 1,
  X509_CERT_FLAG_AA = 2,
  X509_CERT_FLAG_OCSP = 3,
  X509CertificateFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  X509CertificateFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool X509CertificateFlag_IsValid(int value);
constexpr X509CertificateFlag X509CertificateFlag_MIN = X509_CERT_FLAG_NONE;
constexpr X509CertificateFlag X509CertificateFlag_MAX = X509_CERT_FLAG_OCSP;
constexpr int X509CertificateFlag_ARRAYSIZE = X509CertificateFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* X509CertificateFlag_descriptor();
template<typename T>
inline const std::string& X509CertificateFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, X509CertificateFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function X509CertificateFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    X509CertificateFlag_descriptor(), enum_t_value);
}
inline bool X509CertificateFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, X509CertificateFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<X509CertificateFlag>(
    X509CertificateFlag_descriptor(), name, value);
}
// ===================================================================

class Proposals final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.Proposals) */ {
 public:
  inline Proposals() : Proposals(nullptr) {}
  ~Proposals() override;
  explicit constexpr Proposals(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Proposals(const Proposals& from);
  Proposals(Proposals&& from) noexcept
    : Proposals() {
    *this = ::std::move(from);
  }

  inline Proposals& operator=(const Proposals& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proposals& operator=(Proposals&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Proposals& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proposals* internal_default_instance() {
    return reinterpret_cast<const Proposals*>(
               &_Proposals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Proposals& a, Proposals& b) {
    a.Swap(&b);
  }
  inline void Swap(Proposals* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proposals* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proposals* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Proposals>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Proposals& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Proposals& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proposals* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.Proposals";
  }
  protected:
  explicit Proposals(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCryptoAlgFieldNumber = 1,
    kIntegAlgFieldNumber = 2,
    kPrfFieldNumber = 3,
    kDhgroupsFieldNumber = 4,
  };
  // repeated .opi_api.security.v1.CryptoAlgorithm crypto_alg = 1;
  int crypto_alg_size() const;
  private:
  int _internal_crypto_alg_size() const;
  public:
  void clear_crypto_alg();
  private:
  ::opi_api::security::v1::CryptoAlgorithm _internal_crypto_alg(int index) const;
  void _internal_add_crypto_alg(::opi_api::security::v1::CryptoAlgorithm value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_crypto_alg();
  public:
  ::opi_api::security::v1::CryptoAlgorithm crypto_alg(int index) const;
  void set_crypto_alg(int index, ::opi_api::security::v1::CryptoAlgorithm value);
  void add_crypto_alg(::opi_api::security::v1::CryptoAlgorithm value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& crypto_alg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_crypto_alg();

  // repeated .opi_api.security.v1.IntegAlgorithm integ_alg = 2;
  int integ_alg_size() const;
  private:
  int _internal_integ_alg_size() const;
  public:
  void clear_integ_alg();
  private:
  ::opi_api::security::v1::IntegAlgorithm _internal_integ_alg(int index) const;
  void _internal_add_integ_alg(::opi_api::security::v1::IntegAlgorithm value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_integ_alg();
  public:
  ::opi_api::security::v1::IntegAlgorithm integ_alg(int index) const;
  void set_integ_alg(int index, ::opi_api::security::v1::IntegAlgorithm value);
  void add_integ_alg(::opi_api::security::v1::IntegAlgorithm value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& integ_alg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_integ_alg();

  // repeated .opi_api.security.v1.PseudoRandomFunction prf = 3;
  int prf_size() const;
  private:
  int _internal_prf_size() const;
  public:
  void clear_prf();
  private:
  ::opi_api::security::v1::PseudoRandomFunction _internal_prf(int index) const;
  void _internal_add_prf(::opi_api::security::v1::PseudoRandomFunction value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_prf();
  public:
  ::opi_api::security::v1::PseudoRandomFunction prf(int index) const;
  void set_prf(int index, ::opi_api::security::v1::PseudoRandomFunction value);
  void add_prf(::opi_api::security::v1::PseudoRandomFunction value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& prf() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_prf();

  // repeated .opi_api.security.v1.DiffieHellmanGroups dhgroups = 4;
  int dhgroups_size() const;
  private:
  int _internal_dhgroups_size() const;
  public:
  void clear_dhgroups();
  private:
  ::opi_api::security::v1::DiffieHellmanGroups _internal_dhgroups(int index) const;
  void _internal_add_dhgroups(::opi_api::security::v1::DiffieHellmanGroups value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_dhgroups();
  public:
  ::opi_api::security::v1::DiffieHellmanGroups dhgroups(int index) const;
  void set_dhgroups(int index, ::opi_api::security::v1::DiffieHellmanGroups value);
  void add_dhgroups(::opi_api::security::v1::DiffieHellmanGroups value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& dhgroups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_dhgroups();

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.Proposals)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> crypto_alg_;
  mutable std::atomic<int> _crypto_alg_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> integ_alg_;
  mutable std::atomic<int> _integ_alg_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> prf_;
  mutable std::atomic<int> _prf_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> dhgroups_;
  mutable std::atomic<int> _dhgroups_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class Vips final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.Vips) */ {
 public:
  inline Vips() : Vips(nullptr) {}
  ~Vips() override;
  explicit constexpr Vips(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vips(const Vips& from);
  Vips(Vips&& from) noexcept
    : Vips() {
    *this = ::std::move(from);
  }

  inline Vips& operator=(const Vips& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vips& operator=(Vips&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vips& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vips* internal_default_instance() {
    return reinterpret_cast<const Vips*>(
               &_Vips_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vips& a, Vips& b) {
    a.Swap(&b);
  }
  inline void Swap(Vips* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vips* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vips* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vips>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vips& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vips& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vips* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.Vips";
  }
  protected:
  explicit Vips(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVipFieldNumber = 1,
  };
  // repeated string vip = 1;
  int vip_size() const;
  private:
  int _internal_vip_size() const;
  public:
  void clear_vip();
  const std::string& vip(int index) const;
  std::string* mutable_vip(int index);
  void set_vip(int index, const std::string& value);
  void set_vip(int index, std::string&& value);
  void set_vip(int index, const char* value);
  void set_vip(int index, const char* value, size_t size);
  std::string* add_vip();
  void add_vip(const std::string& value);
  void add_vip(std::string&& value);
  void add_vip(const char* value);
  void add_vip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vip();
  private:
  const std::string& _internal_vip(int index) const;
  std::string* _internal_add_vip();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.Vips)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class Pools final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.Pools) */ {
 public:
  inline Pools() : Pools(nullptr) {}
  ~Pools() override;
  explicit constexpr Pools(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pools(const Pools& from);
  Pools(Pools&& from) noexcept
    : Pools() {
    *this = ::std::move(from);
  }

  inline Pools& operator=(const Pools& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pools& operator=(Pools&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pools& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pools* internal_default_instance() {
    return reinterpret_cast<const Pools*>(
               &_Pools_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pools& a, Pools& b) {
    a.Swap(&b);
  }
  inline void Swap(Pools* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pools* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pools* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pools>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pools& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pools& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pools* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.Pools";
  }
  protected:
  explicit Pools(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolFieldNumber = 1,
  };
  // repeated string pool = 1;
  int pool_size() const;
  private:
  int _internal_pool_size() const;
  public:
  void clear_pool();
  const std::string& pool(int index) const;
  std::string* mutable_pool(int index);
  void set_pool(int index, const std::string& value);
  void set_pool(int index, std::string&& value);
  void set_pool(int index, const char* value);
  void set_pool(int index, const char* value, size_t size);
  std::string* add_pool();
  void add_pool(const std::string& value);
  void add_pool(std::string&& value);
  void add_pool(const char* value);
  void add_pool(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pool();
  private:
  const std::string& _internal_pool(int index) const;
  std::string* _internal_add_pool();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.Pools)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class Certs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.Certs) */ {
 public:
  inline Certs() : Certs(nullptr) {}
  ~Certs() override;
  explicit constexpr Certs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Certs(const Certs& from);
  Certs(Certs&& from) noexcept
    : Certs() {
    *this = ::std::move(from);
  }

  inline Certs& operator=(const Certs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Certs& operator=(Certs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Certs& default_instance() {
    return *internal_default_instance();
  }
  static inline const Certs* internal_default_instance() {
    return reinterpret_cast<const Certs*>(
               &_Certs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Certs& a, Certs& b) {
    a.Swap(&b);
  }
  inline void Swap(Certs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Certs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Certs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Certs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Certs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Certs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Certs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.Certs";
  }
  protected:
  explicit Certs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCertFieldNumber = 1,
  };
  // repeated string cert = 1;
  int cert_size() const;
  private:
  int _internal_cert_size() const;
  public:
  void clear_cert();
  const std::string& cert(int index) const;
  std::string* mutable_cert(int index);
  void set_cert(int index, const std::string& value);
  void set_cert(int index, std::string&& value);
  void set_cert(int index, const char* value);
  void set_cert(int index, const char* value, size_t size);
  std::string* add_cert();
  void add_cert(const std::string& value);
  void add_cert(std::string&& value);
  void add_cert(const char* value);
  void add_cert(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cert() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cert();
  private:
  const std::string& _internal_cert(int index) const;
  std::string* _internal_add_cert();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.Certs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cert_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class PubKeys final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.PubKeys) */ {
 public:
  inline PubKeys() : PubKeys(nullptr) {}
  ~PubKeys() override;
  explicit constexpr PubKeys(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PubKeys(const PubKeys& from);
  PubKeys(PubKeys&& from) noexcept
    : PubKeys() {
    *this = ::std::move(from);
  }

  inline PubKeys& operator=(const PubKeys& from) {
    CopyFrom(from);
    return *this;
  }
  inline PubKeys& operator=(PubKeys&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PubKeys& default_instance() {
    return *internal_default_instance();
  }
  static inline const PubKeys* internal_default_instance() {
    return reinterpret_cast<const PubKeys*>(
               &_PubKeys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PubKeys& a, PubKeys& b) {
    a.Swap(&b);
  }
  inline void Swap(PubKeys* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PubKeys* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PubKeys* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PubKeys>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PubKeys& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PubKeys& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubKeys* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.PubKeys";
  }
  protected:
  explicit PubKeys(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubkeyFieldNumber = 1,
  };
  // repeated string pubkey = 1;
  int pubkey_size() const;
  private:
  int _internal_pubkey_size() const;
  public:
  void clear_pubkey();
  const std::string& pubkey(int index) const;
  std::string* mutable_pubkey(int index);
  void set_pubkey(int index, const std::string& value);
  void set_pubkey(int index, std::string&& value);
  void set_pubkey(int index, const char* value);
  void set_pubkey(int index, const char* value, size_t size);
  std::string* add_pubkey();
  void add_pubkey(const std::string& value);
  void add_pubkey(std::string&& value);
  void add_pubkey(const char* value);
  void add_pubkey(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pubkey() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pubkey();
  private:
  const std::string& _internal_pubkey(int index) const;
  std::string* _internal_add_pubkey();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.PubKeys)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pubkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class Groups final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.Groups) */ {
 public:
  inline Groups() : Groups(nullptr) {}
  ~Groups() override;
  explicit constexpr Groups(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Groups(const Groups& from);
  Groups(Groups&& from) noexcept
    : Groups() {
    *this = ::std::move(from);
  }

  inline Groups& operator=(const Groups& from) {
    CopyFrom(from);
    return *this;
  }
  inline Groups& operator=(Groups&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Groups& default_instance() {
    return *internal_default_instance();
  }
  static inline const Groups* internal_default_instance() {
    return reinterpret_cast<const Groups*>(
               &_Groups_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Groups& a, Groups& b) {
    a.Swap(&b);
  }
  inline void Swap(Groups* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Groups* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Groups* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Groups>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Groups& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Groups& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Groups* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.Groups";
  }
  protected:
  explicit Groups(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
  };
  // repeated string group = 1;
  int group_size() const;
  private:
  int _internal_group_size() const;
  public:
  void clear_group();
  const std::string& group(int index) const;
  std::string* mutable_group(int index);
  void set_group(int index, const std::string& value);
  void set_group(int index, std::string&& value);
  void set_group(int index, const char* value);
  void set_group(int index, const char* value, size_t size);
  std::string* add_group();
  void add_group(const std::string& value);
  void add_group(std::string&& value);
  void add_group(const char* value);
  void add_group(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group();
  private:
  const std::string& _internal_group(int index) const;
  std::string* _internal_add_group();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.Groups)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class CertPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.CertPolicy) */ {
 public:
  inline CertPolicy() : CertPolicy(nullptr) {}
  ~CertPolicy() override;
  explicit constexpr CertPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CertPolicy(const CertPolicy& from);
  CertPolicy(CertPolicy&& from) noexcept
    : CertPolicy() {
    *this = ::std::move(from);
  }

  inline CertPolicy& operator=(const CertPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CertPolicy& operator=(CertPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CertPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const CertPolicy* internal_default_instance() {
    return reinterpret_cast<const CertPolicy*>(
               &_CertPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CertPolicy& a, CertPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(CertPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CertPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CertPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CertPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CertPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CertPolicy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CertPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.CertPolicy";
  }
  protected:
  explicit CertPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCertPolicyFieldNumber = 1,
  };
  // repeated string cert_policy = 1;
  int cert_policy_size() const;
  private:
  int _internal_cert_policy_size() const;
  public:
  void clear_cert_policy();
  const std::string& cert_policy(int index) const;
  std::string* mutable_cert_policy(int index);
  void set_cert_policy(int index, const std::string& value);
  void set_cert_policy(int index, std::string&& value);
  void set_cert_policy(int index, const char* value);
  void set_cert_policy(int index, const char* value, size_t size);
  std::string* add_cert_policy();
  void add_cert_policy(const std::string& value);
  void add_cert_policy(std::string&& value);
  void add_cert_policy(const char* value);
  void add_cert_policy(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cert_policy() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cert_policy();
  private:
  const std::string& _internal_cert_policy(int index) const;
  std::string* _internal_add_cert_policy();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.CertPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cert_policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class CaCerts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.CaCerts) */ {
 public:
  inline CaCerts() : CaCerts(nullptr) {}
  ~CaCerts() override;
  explicit constexpr CaCerts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaCerts(const CaCerts& from);
  CaCerts(CaCerts&& from) noexcept
    : CaCerts() {
    *this = ::std::move(from);
  }

  inline CaCerts& operator=(const CaCerts& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaCerts& operator=(CaCerts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CaCerts& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaCerts* internal_default_instance() {
    return reinterpret_cast<const CaCerts*>(
               &_CaCerts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CaCerts& a, CaCerts& b) {
    a.Swap(&b);
  }
  inline void Swap(CaCerts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaCerts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaCerts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaCerts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CaCerts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CaCerts& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaCerts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.CaCerts";
  }
  protected:
  explicit CaCerts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacertFieldNumber = 1,
  };
  // repeated string cacert = 1;
  int cacert_size() const;
  private:
  int _internal_cacert_size() const;
  public:
  void clear_cacert();
  const std::string& cacert(int index) const;
  std::string* mutable_cacert(int index);
  void set_cacert(int index, const std::string& value);
  void set_cacert(int index, std::string&& value);
  void set_cacert(int index, const char* value);
  void set_cacert(int index, const char* value, size_t size);
  std::string* add_cacert();
  void add_cacert(const std::string& value);
  void add_cacert(std::string&& value);
  void add_cacert(const char* value);
  void add_cacert(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cacert() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cacert();
  private:
  const std::string& _internal_cacert(int index) const;
  std::string* _internal_add_cacert();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.CaCerts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cacert_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class LocalAuth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.LocalAuth) */ {
 public:
  inline LocalAuth() : LocalAuth(nullptr) {}
  ~LocalAuth() override;
  explicit constexpr LocalAuth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalAuth(const LocalAuth& from);
  LocalAuth(LocalAuth&& from) noexcept
    : LocalAuth() {
    *this = ::std::move(from);
  }

  inline LocalAuth& operator=(const LocalAuth& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalAuth& operator=(LocalAuth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalAuth& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalAuth* internal_default_instance() {
    return reinterpret_cast<const LocalAuth*>(
               &_LocalAuth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LocalAuth& a, LocalAuth& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalAuth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalAuth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalAuth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalAuth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalAuth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LocalAuth& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalAuth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.LocalAuth";
  }
  protected:
  explicit LocalAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kEapIdFieldNumber = 3,
    kAaaIdFieldNumber = 4,
    kXauthIdFieldNumber = 5,
    kCertsFieldNumber = 6,
    kPubkeysFieldNumber = 7,
    kAuthFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string eap_id = 3;
  void clear_eap_id();
  const std::string& eap_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eap_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eap_id();
  PROTOBUF_NODISCARD std::string* release_eap_id();
  void set_allocated_eap_id(std::string* eap_id);
  private:
  const std::string& _internal_eap_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eap_id(const std::string& value);
  std::string* _internal_mutable_eap_id();
  public:

  // string aaa_id = 4;
  void clear_aaa_id();
  const std::string& aaa_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aaa_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aaa_id();
  PROTOBUF_NODISCARD std::string* release_aaa_id();
  void set_allocated_aaa_id(std::string* aaa_id);
  private:
  const std::string& _internal_aaa_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aaa_id(const std::string& value);
  std::string* _internal_mutable_aaa_id();
  public:

  // string xauth_id = 5;
  void clear_xauth_id();
  const std::string& xauth_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xauth_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xauth_id();
  PROTOBUF_NODISCARD std::string* release_xauth_id();
  void set_allocated_xauth_id(std::string* xauth_id);
  private:
  const std::string& _internal_xauth_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xauth_id(const std::string& value);
  std::string* _internal_mutable_xauth_id();
  public:

  // .opi_api.security.v1.Certs certs = 6;
  bool has_certs() const;
  private:
  bool _internal_has_certs() const;
  public:
  void clear_certs();
  const ::opi_api::security::v1::Certs& certs() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::Certs* release_certs();
  ::opi_api::security::v1::Certs* mutable_certs();
  void set_allocated_certs(::opi_api::security::v1::Certs* certs);
  private:
  const ::opi_api::security::v1::Certs& _internal_certs() const;
  ::opi_api::security::v1::Certs* _internal_mutable_certs();
  public:
  void unsafe_arena_set_allocated_certs(
      ::opi_api::security::v1::Certs* certs);
  ::opi_api::security::v1::Certs* unsafe_arena_release_certs();

  // .opi_api.security.v1.PubKeys pubkeys = 7;
  bool has_pubkeys() const;
  private:
  bool _internal_has_pubkeys() const;
  public:
  void clear_pubkeys();
  const ::opi_api::security::v1::PubKeys& pubkeys() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::PubKeys* release_pubkeys();
  ::opi_api::security::v1::PubKeys* mutable_pubkeys();
  void set_allocated_pubkeys(::opi_api::security::v1::PubKeys* pubkeys);
  private:
  const ::opi_api::security::v1::PubKeys& _internal_pubkeys() const;
  ::opi_api::security::v1::PubKeys* _internal_mutable_pubkeys();
  public:
  void unsafe_arena_set_allocated_pubkeys(
      ::opi_api::security::v1::PubKeys* pubkeys);
  ::opi_api::security::v1::PubKeys* unsafe_arena_release_pubkeys();

  // .opi_api.security.v1.AuthType auth = 1;
  void clear_auth();
  ::opi_api::security::v1::AuthType auth() const;
  void set_auth(::opi_api::security::v1::AuthType value);
  private:
  ::opi_api::security::v1::AuthType _internal_auth() const;
  void _internal_set_auth(::opi_api::security::v1::AuthType value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.LocalAuth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eap_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aaa_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xauth_id_;
  ::opi_api::security::v1::Certs* certs_;
  ::opi_api::security::v1::PubKeys* pubkeys_;
  int auth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class RemoteAuth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.RemoteAuth) */ {
 public:
  inline RemoteAuth() : RemoteAuth(nullptr) {}
  ~RemoteAuth() override;
  explicit constexpr RemoteAuth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteAuth(const RemoteAuth& from);
  RemoteAuth(RemoteAuth&& from) noexcept
    : RemoteAuth() {
    *this = ::std::move(from);
  }

  inline RemoteAuth& operator=(const RemoteAuth& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteAuth& operator=(RemoteAuth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteAuth& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteAuth* internal_default_instance() {
    return reinterpret_cast<const RemoteAuth*>(
               &_RemoteAuth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RemoteAuth& a, RemoteAuth& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteAuth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteAuth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteAuth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteAuth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoteAuth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoteAuth& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteAuth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.RemoteAuth";
  }
  protected:
  explicit RemoteAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kEapIdFieldNumber = 3,
    kGroupsFieldNumber = 4,
    kCertPolicyFieldNumber = 5,
    kCertsFieldNumber = 6,
    kCaCertsFieldNumber = 7,
    kPubkeysFieldNumber = 8,
    kAuthFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string eap_id = 3;
  void clear_eap_id();
  const std::string& eap_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eap_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eap_id();
  PROTOBUF_NODISCARD std::string* release_eap_id();
  void set_allocated_eap_id(std::string* eap_id);
  private:
  const std::string& _internal_eap_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eap_id(const std::string& value);
  std::string* _internal_mutable_eap_id();
  public:

  // .opi_api.security.v1.Groups groups = 4;
  bool has_groups() const;
  private:
  bool _internal_has_groups() const;
  public:
  void clear_groups();
  const ::opi_api::security::v1::Groups& groups() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::Groups* release_groups();
  ::opi_api::security::v1::Groups* mutable_groups();
  void set_allocated_groups(::opi_api::security::v1::Groups* groups);
  private:
  const ::opi_api::security::v1::Groups& _internal_groups() const;
  ::opi_api::security::v1::Groups* _internal_mutable_groups();
  public:
  void unsafe_arena_set_allocated_groups(
      ::opi_api::security::v1::Groups* groups);
  ::opi_api::security::v1::Groups* unsafe_arena_release_groups();

  // .opi_api.security.v1.CertPolicy cert_policy = 5;
  bool has_cert_policy() const;
  private:
  bool _internal_has_cert_policy() const;
  public:
  void clear_cert_policy();
  const ::opi_api::security::v1::CertPolicy& cert_policy() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::CertPolicy* release_cert_policy();
  ::opi_api::security::v1::CertPolicy* mutable_cert_policy();
  void set_allocated_cert_policy(::opi_api::security::v1::CertPolicy* cert_policy);
  private:
  const ::opi_api::security::v1::CertPolicy& _internal_cert_policy() const;
  ::opi_api::security::v1::CertPolicy* _internal_mutable_cert_policy();
  public:
  void unsafe_arena_set_allocated_cert_policy(
      ::opi_api::security::v1::CertPolicy* cert_policy);
  ::opi_api::security::v1::CertPolicy* unsafe_arena_release_cert_policy();

  // .opi_api.security.v1.Certs certs = 6;
  bool has_certs() const;
  private:
  bool _internal_has_certs() const;
  public:
  void clear_certs();
  const ::opi_api::security::v1::Certs& certs() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::Certs* release_certs();
  ::opi_api::security::v1::Certs* mutable_certs();
  void set_allocated_certs(::opi_api::security::v1::Certs* certs);
  private:
  const ::opi_api::security::v1::Certs& _internal_certs() const;
  ::opi_api::security::v1::Certs* _internal_mutable_certs();
  public:
  void unsafe_arena_set_allocated_certs(
      ::opi_api::security::v1::Certs* certs);
  ::opi_api::security::v1::Certs* unsafe_arena_release_certs();

  // .opi_api.security.v1.CaCerts ca_certs = 7;
  bool has_ca_certs() const;
  private:
  bool _internal_has_ca_certs() const;
  public:
  void clear_ca_certs();
  const ::opi_api::security::v1::CaCerts& ca_certs() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::CaCerts* release_ca_certs();
  ::opi_api::security::v1::CaCerts* mutable_ca_certs();
  void set_allocated_ca_certs(::opi_api::security::v1::CaCerts* ca_certs);
  private:
  const ::opi_api::security::v1::CaCerts& _internal_ca_certs() const;
  ::opi_api::security::v1::CaCerts* _internal_mutable_ca_certs();
  public:
  void unsafe_arena_set_allocated_ca_certs(
      ::opi_api::security::v1::CaCerts* ca_certs);
  ::opi_api::security::v1::CaCerts* unsafe_arena_release_ca_certs();

  // .opi_api.security.v1.PubKeys pubkeys = 8;
  bool has_pubkeys() const;
  private:
  bool _internal_has_pubkeys() const;
  public:
  void clear_pubkeys();
  const ::opi_api::security::v1::PubKeys& pubkeys() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::PubKeys* release_pubkeys();
  ::opi_api::security::v1::PubKeys* mutable_pubkeys();
  void set_allocated_pubkeys(::opi_api::security::v1::PubKeys* pubkeys);
  private:
  const ::opi_api::security::v1::PubKeys& _internal_pubkeys() const;
  ::opi_api::security::v1::PubKeys* _internal_mutable_pubkeys();
  public:
  void unsafe_arena_set_allocated_pubkeys(
      ::opi_api::security::v1::PubKeys* pubkeys);
  ::opi_api::security::v1::PubKeys* unsafe_arena_release_pubkeys();

  // .opi_api.security.v1.AuthType auth = 1;
  void clear_auth();
  ::opi_api::security::v1::AuthType auth() const;
  void set_auth(::opi_api::security::v1::AuthType value);
  private:
  ::opi_api::security::v1::AuthType _internal_auth() const;
  void _internal_set_auth(::opi_api::security::v1::AuthType value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.RemoteAuth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eap_id_;
  ::opi_api::security::v1::Groups* groups_;
  ::opi_api::security::v1::CertPolicy* cert_policy_;
  ::opi_api::security::v1::Certs* certs_;
  ::opi_api::security::v1::CaCerts* ca_certs_;
  ::opi_api::security::v1::PubKeys* pubkeys_;
  int auth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class TrafficSelectors_TrafficSelector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.TrafficSelectors.TrafficSelector) */ {
 public:
  inline TrafficSelectors_TrafficSelector() : TrafficSelectors_TrafficSelector(nullptr) {}
  ~TrafficSelectors_TrafficSelector() override;
  explicit constexpr TrafficSelectors_TrafficSelector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrafficSelectors_TrafficSelector(const TrafficSelectors_TrafficSelector& from);
  TrafficSelectors_TrafficSelector(TrafficSelectors_TrafficSelector&& from) noexcept
    : TrafficSelectors_TrafficSelector() {
    *this = ::std::move(from);
  }

  inline TrafficSelectors_TrafficSelector& operator=(const TrafficSelectors_TrafficSelector& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSelectors_TrafficSelector& operator=(TrafficSelectors_TrafficSelector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficSelectors_TrafficSelector& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrafficSelectors_TrafficSelector* internal_default_instance() {
    return reinterpret_cast<const TrafficSelectors_TrafficSelector*>(
               &_TrafficSelectors_TrafficSelector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TrafficSelectors_TrafficSelector& a, TrafficSelectors_TrafficSelector& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficSelectors_TrafficSelector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficSelectors_TrafficSelector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficSelectors_TrafficSelector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrafficSelectors_TrafficSelector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrafficSelectors_TrafficSelector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrafficSelectors_TrafficSelector& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSelectors_TrafficSelector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.TrafficSelectors.TrafficSelector";
  }
  protected:
  explicit TrafficSelectors_TrafficSelector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidrFieldNumber = 1,
    kProtoFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string cidr = 1;
  void clear_cidr();
  const std::string& cidr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cidr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cidr();
  PROTOBUF_NODISCARD std::string* release_cidr();
  void set_allocated_cidr(std::string* cidr);
  private:
  const std::string& _internal_cidr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cidr(const std::string& value);
  std::string* _internal_mutable_cidr();
  public:

  // string proto = 2;
  void clear_proto();
  const std::string& proto() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto();
  PROTOBUF_NODISCARD std::string* release_proto();
  void set_allocated_proto(std::string* proto);
  private:
  const std::string& _internal_proto() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto(const std::string& value);
  std::string* _internal_mutable_proto();
  public:

  // string port = 3;
  void clear_port();
  const std::string& port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_port();
  PROTOBUF_NODISCARD std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.TrafficSelectors.TrafficSelector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cidr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class TrafficSelectors final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.TrafficSelectors) */ {
 public:
  inline TrafficSelectors() : TrafficSelectors(nullptr) {}
  ~TrafficSelectors() override;
  explicit constexpr TrafficSelectors(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrafficSelectors(const TrafficSelectors& from);
  TrafficSelectors(TrafficSelectors&& from) noexcept
    : TrafficSelectors() {
    *this = ::std::move(from);
  }

  inline TrafficSelectors& operator=(const TrafficSelectors& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSelectors& operator=(TrafficSelectors&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficSelectors& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrafficSelectors* internal_default_instance() {
    return reinterpret_cast<const TrafficSelectors*>(
               &_TrafficSelectors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TrafficSelectors& a, TrafficSelectors& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficSelectors* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficSelectors* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficSelectors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrafficSelectors>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrafficSelectors& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrafficSelectors& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSelectors* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.TrafficSelectors";
  }
  protected:
  explicit TrafficSelectors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSelectors_TrafficSelector TrafficSelector;

  // accessors -------------------------------------------------------

  enum : int {
    kTsFieldNumber = 1,
  };
  // repeated .opi_api.security.v1.TrafficSelectors.TrafficSelector ts = 1;
  int ts_size() const;
  private:
  int _internal_ts_size() const;
  public:
  void clear_ts();
  ::opi_api::security::v1::TrafficSelectors_TrafficSelector* mutable_ts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::TrafficSelectors_TrafficSelector >*
      mutable_ts();
  private:
  const ::opi_api::security::v1::TrafficSelectors_TrafficSelector& _internal_ts(int index) const;
  ::opi_api::security::v1::TrafficSelectors_TrafficSelector* _internal_add_ts();
  public:
  const ::opi_api::security::v1::TrafficSelectors_TrafficSelector& ts(int index) const;
  ::opi_api::security::v1::TrafficSelectors_TrafficSelector* add_ts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::TrafficSelectors_TrafficSelector >&
      ts() const;

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.TrafficSelectors)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::TrafficSelectors_TrafficSelector > ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class Addrs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.Addrs) */ {
 public:
  inline Addrs() : Addrs(nullptr) {}
  ~Addrs() override;
  explicit constexpr Addrs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Addrs(const Addrs& from);
  Addrs(Addrs&& from) noexcept
    : Addrs() {
    *this = ::std::move(from);
  }

  inline Addrs& operator=(const Addrs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Addrs& operator=(Addrs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Addrs& default_instance() {
    return *internal_default_instance();
  }
  static inline const Addrs* internal_default_instance() {
    return reinterpret_cast<const Addrs*>(
               &_Addrs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Addrs& a, Addrs& b) {
    a.Swap(&b);
  }
  inline void Swap(Addrs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Addrs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Addrs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Addrs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Addrs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Addrs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Addrs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.Addrs";
  }
  protected:
  explicit Addrs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
  };
  // string addr = 1;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.Addrs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class Child final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.Child) */ {
 public:
  inline Child() : Child(nullptr) {}
  ~Child() override;
  explicit constexpr Child(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Child(const Child& from);
  Child(Child&& from) noexcept
    : Child() {
    *this = ::std::move(from);
  }

  inline Child& operator=(const Child& from) {
    CopyFrom(from);
    return *this;
  }
  inline Child& operator=(Child&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Child& default_instance() {
    return *internal_default_instance();
  }
  static inline const Child* internal_default_instance() {
    return reinterpret_cast<const Child*>(
               &_Child_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Child& a, Child& b) {
    a.Swap(&b);
  }
  inline void Swap(Child* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Child* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Child* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Child>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Child& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Child& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Child* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.Child";
  }
  protected:
  explicit Child(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUpdownFieldNumber = 9,
    kMarkInSaFieldNumber = 12,
    kHwOffloadFieldNumber = 16,
    kAgProposalsFieldNumber = 2,
    kEspProposalsFieldNumber = 3,
    kLocalTsFieldNumber = 4,
    kRemoteTsFieldNumber = 5,
    kRekeyTimeFieldNumber = 6,
    kLifeTimeFieldNumber = 7,
    kRandTimeFieldNumber = 8,
    kInactivityFieldNumber = 10,
    kMarkInFieldNumber = 11,
    kMarkOutFieldNumber = 13,
    kSetMarkInFieldNumber = 14,
    kSetMarkOutFieldNumber = 15,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string updown = 9;
  void clear_updown();
  const std::string& updown() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updown(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updown();
  PROTOBUF_NODISCARD std::string* release_updown();
  void set_allocated_updown(std::string* updown);
  private:
  const std::string& _internal_updown() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updown(const std::string& value);
  std::string* _internal_mutable_updown();
  public:

  // string mark_in_sa = 12;
  void clear_mark_in_sa();
  const std::string& mark_in_sa() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mark_in_sa(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mark_in_sa();
  PROTOBUF_NODISCARD std::string* release_mark_in_sa();
  void set_allocated_mark_in_sa(std::string* mark_in_sa);
  private:
  const std::string& _internal_mark_in_sa() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mark_in_sa(const std::string& value);
  std::string* _internal_mutable_mark_in_sa();
  public:

  // string hw_offload = 16;
  void clear_hw_offload();
  const std::string& hw_offload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hw_offload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hw_offload();
  PROTOBUF_NODISCARD std::string* release_hw_offload();
  void set_allocated_hw_offload(std::string* hw_offload);
  private:
  const std::string& _internal_hw_offload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hw_offload(const std::string& value);
  std::string* _internal_mutable_hw_offload();
  public:

  // .opi_api.security.v1.Proposals ag_proposals = 2;
  bool has_ag_proposals() const;
  private:
  bool _internal_has_ag_proposals() const;
  public:
  void clear_ag_proposals();
  const ::opi_api::security::v1::Proposals& ag_proposals() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::Proposals* release_ag_proposals();
  ::opi_api::security::v1::Proposals* mutable_ag_proposals();
  void set_allocated_ag_proposals(::opi_api::security::v1::Proposals* ag_proposals);
  private:
  const ::opi_api::security::v1::Proposals& _internal_ag_proposals() const;
  ::opi_api::security::v1::Proposals* _internal_mutable_ag_proposals();
  public:
  void unsafe_arena_set_allocated_ag_proposals(
      ::opi_api::security::v1::Proposals* ag_proposals);
  ::opi_api::security::v1::Proposals* unsafe_arena_release_ag_proposals();

  // .opi_api.security.v1.Proposals esp_proposals = 3;
  bool has_esp_proposals() const;
  private:
  bool _internal_has_esp_proposals() const;
  public:
  void clear_esp_proposals();
  const ::opi_api::security::v1::Proposals& esp_proposals() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::Proposals* release_esp_proposals();
  ::opi_api::security::v1::Proposals* mutable_esp_proposals();
  void set_allocated_esp_proposals(::opi_api::security::v1::Proposals* esp_proposals);
  private:
  const ::opi_api::security::v1::Proposals& _internal_esp_proposals() const;
  ::opi_api::security::v1::Proposals* _internal_mutable_esp_proposals();
  public:
  void unsafe_arena_set_allocated_esp_proposals(
      ::opi_api::security::v1::Proposals* esp_proposals);
  ::opi_api::security::v1::Proposals* unsafe_arena_release_esp_proposals();

  // .opi_api.security.v1.TrafficSelectors local_ts = 4;
  bool has_local_ts() const;
  private:
  bool _internal_has_local_ts() const;
  public:
  void clear_local_ts();
  const ::opi_api::security::v1::TrafficSelectors& local_ts() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::TrafficSelectors* release_local_ts();
  ::opi_api::security::v1::TrafficSelectors* mutable_local_ts();
  void set_allocated_local_ts(::opi_api::security::v1::TrafficSelectors* local_ts);
  private:
  const ::opi_api::security::v1::TrafficSelectors& _internal_local_ts() const;
  ::opi_api::security::v1::TrafficSelectors* _internal_mutable_local_ts();
  public:
  void unsafe_arena_set_allocated_local_ts(
      ::opi_api::security::v1::TrafficSelectors* local_ts);
  ::opi_api::security::v1::TrafficSelectors* unsafe_arena_release_local_ts();

  // .opi_api.security.v1.TrafficSelectors remote_ts = 5;
  bool has_remote_ts() const;
  private:
  bool _internal_has_remote_ts() const;
  public:
  void clear_remote_ts();
  const ::opi_api::security::v1::TrafficSelectors& remote_ts() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::TrafficSelectors* release_remote_ts();
  ::opi_api::security::v1::TrafficSelectors* mutable_remote_ts();
  void set_allocated_remote_ts(::opi_api::security::v1::TrafficSelectors* remote_ts);
  private:
  const ::opi_api::security::v1::TrafficSelectors& _internal_remote_ts() const;
  ::opi_api::security::v1::TrafficSelectors* _internal_mutable_remote_ts();
  public:
  void unsafe_arena_set_allocated_remote_ts(
      ::opi_api::security::v1::TrafficSelectors* remote_ts);
  ::opi_api::security::v1::TrafficSelectors* unsafe_arena_release_remote_ts();

  // uint32 rekey_time = 6;
  void clear_rekey_time();
  uint32_t rekey_time() const;
  void set_rekey_time(uint32_t value);
  private:
  uint32_t _internal_rekey_time() const;
  void _internal_set_rekey_time(uint32_t value);
  public:

  // uint32 life_time = 7;
  void clear_life_time();
  uint32_t life_time() const;
  void set_life_time(uint32_t value);
  private:
  uint32_t _internal_life_time() const;
  void _internal_set_life_time(uint32_t value);
  public:

  // uint32 rand_time = 8;
  void clear_rand_time();
  uint32_t rand_time() const;
  void set_rand_time(uint32_t value);
  private:
  uint32_t _internal_rand_time() const;
  void _internal_set_rand_time(uint32_t value);
  public:

  // uint32 inactivity = 10;
  void clear_inactivity();
  uint32_t inactivity() const;
  void set_inactivity(uint32_t value);
  private:
  uint32_t _internal_inactivity() const;
  void _internal_set_inactivity(uint32_t value);
  public:

  // uint32 mark_in = 11;
  void clear_mark_in();
  uint32_t mark_in() const;
  void set_mark_in(uint32_t value);
  private:
  uint32_t _internal_mark_in() const;
  void _internal_set_mark_in(uint32_t value);
  public:

  // uint32 mark_out = 13;
  void clear_mark_out();
  uint32_t mark_out() const;
  void set_mark_out(uint32_t value);
  private:
  uint32_t _internal_mark_out() const;
  void _internal_set_mark_out(uint32_t value);
  public:

  // uint32 set_mark_in = 14;
  void clear_set_mark_in();
  uint32_t set_mark_in() const;
  void set_set_mark_in(uint32_t value);
  private:
  uint32_t _internal_set_mark_in() const;
  void _internal_set_set_mark_in(uint32_t value);
  public:

  // uint32 set_mark_out = 15;
  void clear_set_mark_out();
  uint32_t set_mark_out() const;
  void set_set_mark_out(uint32_t value);
  private:
  uint32_t _internal_set_mark_out() const;
  void _internal_set_set_mark_out(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.Child)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updown_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mark_in_sa_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hw_offload_;
  ::opi_api::security::v1::Proposals* ag_proposals_;
  ::opi_api::security::v1::Proposals* esp_proposals_;
  ::opi_api::security::v1::TrafficSelectors* local_ts_;
  ::opi_api::security::v1::TrafficSelectors* remote_ts_;
  uint32_t rekey_time_;
  uint32_t life_time_;
  uint32_t rand_time_;
  uint32_t inactivity_;
  uint32_t mark_in_;
  uint32_t mark_out_;
  uint32_t set_mark_in_;
  uint32_t set_mark_out_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class Connection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.Connection) */ {
 public:
  inline Connection() : Connection(nullptr) {}
  ~Connection() override;
  explicit constexpr Connection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Connection(const Connection& from);
  Connection(Connection&& from) noexcept
    : Connection() {
    *this = ::std::move(from);
  }

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connection& operator=(Connection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Connection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Connection* internal_default_instance() {
    return reinterpret_cast<const Connection*>(
               &_Connection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Connection& a, Connection& b) {
    a.Swap(&b);
  }
  inline void Swap(Connection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Connection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Connection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Connection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Connection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Connection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Connection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.Connection";
  }
  protected:
  explicit Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalAddrsFieldNumber = 3,
    kRemoteAddrsFieldNumber = 4,
    kChildrenFieldNumber = 19,
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kEncapFieldNumber = 10,
    kMobikeFieldNumber = 11,
    kProposalsFieldNumber = 7,
    kVipsFieldNumber = 8,
    kPoolsFieldNumber = 16,
    kLocalAuthFieldNumber = 17,
    kRemoteAuthFieldNumber = 18,
    kLocalPortFieldNumber = 5,
    kRemotePortFieldNumber = 6,
    kDscpFieldNumber = 9,
    kDpdDelayFieldNumber = 12,
    kDpdTimeoutFieldNumber = 13,
    kReauthTimeFieldNumber = 14,
    kRekeyTimeFieldNumber = 15,
  };
  // repeated .opi_api.security.v1.Addrs local_addrs = 3;
  int local_addrs_size() const;
  private:
  int _internal_local_addrs_size() const;
  public:
  void clear_local_addrs();
  ::opi_api::security::v1::Addrs* mutable_local_addrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >*
      mutable_local_addrs();
  private:
  const ::opi_api::security::v1::Addrs& _internal_local_addrs(int index) const;
  ::opi_api::security::v1::Addrs* _internal_add_local_addrs();
  public:
  const ::opi_api::security::v1::Addrs& local_addrs(int index) const;
  ::opi_api::security::v1::Addrs* add_local_addrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >&
      local_addrs() const;

  // repeated .opi_api.security.v1.Addrs remote_addrs = 4;
  int remote_addrs_size() const;
  private:
  int _internal_remote_addrs_size() const;
  public:
  void clear_remote_addrs();
  ::opi_api::security::v1::Addrs* mutable_remote_addrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >*
      mutable_remote_addrs();
  private:
  const ::opi_api::security::v1::Addrs& _internal_remote_addrs(int index) const;
  ::opi_api::security::v1::Addrs* _internal_add_remote_addrs();
  public:
  const ::opi_api::security::v1::Addrs& remote_addrs(int index) const;
  ::opi_api::security::v1::Addrs* add_remote_addrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >&
      remote_addrs() const;

  // repeated .opi_api.security.v1.Child children = 19;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::opi_api::security::v1::Child* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Child >*
      mutable_children();
  private:
  const ::opi_api::security::v1::Child& _internal_children(int index) const;
  ::opi_api::security::v1::Child* _internal_add_children();
  public:
  const ::opi_api::security::v1::Child& children(int index) const;
  ::opi_api::security::v1::Child* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Child >&
      children() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string encap = 10;
  void clear_encap();
  const std::string& encap() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encap(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encap();
  PROTOBUF_NODISCARD std::string* release_encap();
  void set_allocated_encap(std::string* encap);
  private:
  const std::string& _internal_encap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encap(const std::string& value);
  std::string* _internal_mutable_encap();
  public:

  // string mobike = 11;
  void clear_mobike();
  const std::string& mobike() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mobike(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mobike();
  PROTOBUF_NODISCARD std::string* release_mobike();
  void set_allocated_mobike(std::string* mobike);
  private:
  const std::string& _internal_mobike() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mobike(const std::string& value);
  std::string* _internal_mutable_mobike();
  public:

  // .opi_api.security.v1.Proposals proposals = 7;
  bool has_proposals() const;
  private:
  bool _internal_has_proposals() const;
  public:
  void clear_proposals();
  const ::opi_api::security::v1::Proposals& proposals() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::Proposals* release_proposals();
  ::opi_api::security::v1::Proposals* mutable_proposals();
  void set_allocated_proposals(::opi_api::security::v1::Proposals* proposals);
  private:
  const ::opi_api::security::v1::Proposals& _internal_proposals() const;
  ::opi_api::security::v1::Proposals* _internal_mutable_proposals();
  public:
  void unsafe_arena_set_allocated_proposals(
      ::opi_api::security::v1::Proposals* proposals);
  ::opi_api::security::v1::Proposals* unsafe_arena_release_proposals();

  // .opi_api.security.v1.Vips vips = 8;
  bool has_vips() const;
  private:
  bool _internal_has_vips() const;
  public:
  void clear_vips();
  const ::opi_api::security::v1::Vips& vips() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::Vips* release_vips();
  ::opi_api::security::v1::Vips* mutable_vips();
  void set_allocated_vips(::opi_api::security::v1::Vips* vips);
  private:
  const ::opi_api::security::v1::Vips& _internal_vips() const;
  ::opi_api::security::v1::Vips* _internal_mutable_vips();
  public:
  void unsafe_arena_set_allocated_vips(
      ::opi_api::security::v1::Vips* vips);
  ::opi_api::security::v1::Vips* unsafe_arena_release_vips();

  // .opi_api.security.v1.Pools pools = 16;
  bool has_pools() const;
  private:
  bool _internal_has_pools() const;
  public:
  void clear_pools();
  const ::opi_api::security::v1::Pools& pools() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::Pools* release_pools();
  ::opi_api::security::v1::Pools* mutable_pools();
  void set_allocated_pools(::opi_api::security::v1::Pools* pools);
  private:
  const ::opi_api::security::v1::Pools& _internal_pools() const;
  ::opi_api::security::v1::Pools* _internal_mutable_pools();
  public:
  void unsafe_arena_set_allocated_pools(
      ::opi_api::security::v1::Pools* pools);
  ::opi_api::security::v1::Pools* unsafe_arena_release_pools();

  // .opi_api.security.v1.LocalAuth local_auth = 17;
  bool has_local_auth() const;
  private:
  bool _internal_has_local_auth() const;
  public:
  void clear_local_auth();
  const ::opi_api::security::v1::LocalAuth& local_auth() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::LocalAuth* release_local_auth();
  ::opi_api::security::v1::LocalAuth* mutable_local_auth();
  void set_allocated_local_auth(::opi_api::security::v1::LocalAuth* local_auth);
  private:
  const ::opi_api::security::v1::LocalAuth& _internal_local_auth() const;
  ::opi_api::security::v1::LocalAuth* _internal_mutable_local_auth();
  public:
  void unsafe_arena_set_allocated_local_auth(
      ::opi_api::security::v1::LocalAuth* local_auth);
  ::opi_api::security::v1::LocalAuth* unsafe_arena_release_local_auth();

  // .opi_api.security.v1.RemoteAuth remote_auth = 18;
  bool has_remote_auth() const;
  private:
  bool _internal_has_remote_auth() const;
  public:
  void clear_remote_auth();
  const ::opi_api::security::v1::RemoteAuth& remote_auth() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::RemoteAuth* release_remote_auth();
  ::opi_api::security::v1::RemoteAuth* mutable_remote_auth();
  void set_allocated_remote_auth(::opi_api::security::v1::RemoteAuth* remote_auth);
  private:
  const ::opi_api::security::v1::RemoteAuth& _internal_remote_auth() const;
  ::opi_api::security::v1::RemoteAuth* _internal_mutable_remote_auth();
  public:
  void unsafe_arena_set_allocated_remote_auth(
      ::opi_api::security::v1::RemoteAuth* remote_auth);
  ::opi_api::security::v1::RemoteAuth* unsafe_arena_release_remote_auth();

  // uint32 local_port = 5;
  void clear_local_port();
  uint32_t local_port() const;
  void set_local_port(uint32_t value);
  private:
  uint32_t _internal_local_port() const;
  void _internal_set_local_port(uint32_t value);
  public:

  // uint32 remote_port = 6;
  void clear_remote_port();
  uint32_t remote_port() const;
  void set_remote_port(uint32_t value);
  private:
  uint32_t _internal_remote_port() const;
  void _internal_set_remote_port(uint32_t value);
  public:

  // uint64 dscp = 9;
  void clear_dscp();
  uint64_t dscp() const;
  void set_dscp(uint64_t value);
  private:
  uint64_t _internal_dscp() const;
  void _internal_set_dscp(uint64_t value);
  public:

  // uint32 dpd_delay = 12;
  void clear_dpd_delay();
  uint32_t dpd_delay() const;
  void set_dpd_delay(uint32_t value);
  private:
  uint32_t _internal_dpd_delay() const;
  void _internal_set_dpd_delay(uint32_t value);
  public:

  // uint32 dpd_timeout = 13;
  void clear_dpd_timeout();
  uint32_t dpd_timeout() const;
  void set_dpd_timeout(uint32_t value);
  private:
  uint32_t _internal_dpd_timeout() const;
  void _internal_set_dpd_timeout(uint32_t value);
  public:

  // uint32 reauth_time = 14;
  void clear_reauth_time();
  uint32_t reauth_time() const;
  void set_reauth_time(uint32_t value);
  private:
  uint32_t _internal_reauth_time() const;
  void _internal_set_reauth_time(uint32_t value);
  public:

  // uint32 rekey_time = 15;
  void clear_rekey_time();
  uint32_t rekey_time() const;
  void set_rekey_time(uint32_t value);
  private:
  uint32_t _internal_rekey_time() const;
  void _internal_set_rekey_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.Connection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs > local_addrs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs > remote_addrs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Child > children_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mobike_;
  ::opi_api::security::v1::Proposals* proposals_;
  ::opi_api::security::v1::Vips* vips_;
  ::opi_api::security::v1::Pools* pools_;
  ::opi_api::security::v1::LocalAuth* local_auth_;
  ::opi_api::security::v1::RemoteAuth* remote_auth_;
  uint32_t local_port_;
  uint32_t remote_port_;
  uint64_t dscp_;
  uint32_t dpd_delay_;
  uint32_t dpd_timeout_;
  uint32_t reauth_time_;
  uint32_t rekey_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecVersionReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecVersionReq) */ {
 public:
  inline IPsecVersionReq() : IPsecVersionReq(nullptr) {}
  explicit constexpr IPsecVersionReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecVersionReq(const IPsecVersionReq& from);
  IPsecVersionReq(IPsecVersionReq&& from) noexcept
    : IPsecVersionReq() {
    *this = ::std::move(from);
  }

  inline IPsecVersionReq& operator=(const IPsecVersionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecVersionReq& operator=(IPsecVersionReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecVersionReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecVersionReq* internal_default_instance() {
    return reinterpret_cast<const IPsecVersionReq*>(
               &_IPsecVersionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(IPsecVersionReq& a, IPsecVersionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecVersionReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecVersionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecVersionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecVersionReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const IPsecVersionReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const IPsecVersionReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecVersionReq";
  }
  protected:
  explicit IPsecVersionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecVersionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecVersionResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecVersionResp) */ {
 public:
  inline IPsecVersionResp() : IPsecVersionResp(nullptr) {}
  ~IPsecVersionResp() override;
  explicit constexpr IPsecVersionResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecVersionResp(const IPsecVersionResp& from);
  IPsecVersionResp(IPsecVersionResp&& from) noexcept
    : IPsecVersionResp() {
    *this = ::std::move(from);
  }

  inline IPsecVersionResp& operator=(const IPsecVersionResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecVersionResp& operator=(IPsecVersionResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecVersionResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecVersionResp* internal_default_instance() {
    return reinterpret_cast<const IPsecVersionResp*>(
               &_IPsecVersionResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(IPsecVersionResp& a, IPsecVersionResp& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecVersionResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecVersionResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecVersionResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecVersionResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecVersionResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecVersionResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecVersionResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecVersionResp";
  }
  protected:
  explicit IPsecVersionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDaemonFieldNumber = 1,
    kVersionFieldNumber = 2,
    kSysnameFieldNumber = 3,
    kReleaseFieldNumber = 4,
    kMachineFieldNumber = 5,
  };
  // string daemon = 1;
  void clear_daemon();
  const std::string& daemon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_daemon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_daemon();
  PROTOBUF_NODISCARD std::string* release_daemon();
  void set_allocated_daemon(std::string* daemon);
  private:
  const std::string& _internal_daemon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_daemon(const std::string& value);
  std::string* _internal_mutable_daemon();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string sysname = 3;
  void clear_sysname();
  const std::string& sysname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sysname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sysname();
  PROTOBUF_NODISCARD std::string* release_sysname();
  void set_allocated_sysname(std::string* sysname);
  private:
  const std::string& _internal_sysname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sysname(const std::string& value);
  std::string* _internal_mutable_sysname();
  public:

  // string release = 4;
  void clear_release();
  const std::string& release() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_release(ArgT0&& arg0, ArgT... args);
  std::string* mutable_release();
  PROTOBUF_NODISCARD std::string* release_release();
  void set_allocated_release(std::string* release);
  private:
  const std::string& _internal_release() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_release(const std::string& value);
  std::string* _internal_mutable_release();
  public:

  // string machine = 5;
  void clear_machine();
  const std::string& machine() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machine(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machine();
  PROTOBUF_NODISCARD std::string* release_machine();
  void set_allocated_machine(std::string* machine);
  private:
  const std::string& _internal_machine() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine(const std::string& value);
  std::string* _internal_mutable_machine();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecVersionResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr daemon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sysname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr release_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecStatsReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecStatsReq) */ {
 public:
  inline IPsecStatsReq() : IPsecStatsReq(nullptr) {}
  explicit constexpr IPsecStatsReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecStatsReq(const IPsecStatsReq& from);
  IPsecStatsReq(IPsecStatsReq&& from) noexcept
    : IPsecStatsReq() {
    *this = ::std::move(from);
  }

  inline IPsecStatsReq& operator=(const IPsecStatsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecStatsReq& operator=(IPsecStatsReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecStatsReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecStatsReq* internal_default_instance() {
    return reinterpret_cast<const IPsecStatsReq*>(
               &_IPsecStatsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(IPsecStatsReq& a, IPsecStatsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecStatsReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecStatsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecStatsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecStatsReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const IPsecStatsReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const IPsecStatsReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecStatsReq";
  }
  protected:
  explicit IPsecStatsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecStatsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecStatsResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecStatsResp) */ {
 public:
  inline IPsecStatsResp() : IPsecStatsResp(nullptr) {}
  ~IPsecStatsResp() override;
  explicit constexpr IPsecStatsResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecStatsResp(const IPsecStatsResp& from);
  IPsecStatsResp(IPsecStatsResp&& from) noexcept
    : IPsecStatsResp() {
    *this = ::std::move(from);
  }

  inline IPsecStatsResp& operator=(const IPsecStatsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecStatsResp& operator=(IPsecStatsResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecStatsResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecStatsResp* internal_default_instance() {
    return reinterpret_cast<const IPsecStatsResp*>(
               &_IPsecStatsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(IPsecStatsResp& a, IPsecStatsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecStatsResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecStatsResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecStatsResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecStatsResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecStatsResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecStatsResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecStatsResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecStatsResp";
  }
  protected:
  explicit IPsecStatsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecStatsResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecInitiateReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecInitiateReq) */ {
 public:
  inline IPsecInitiateReq() : IPsecInitiateReq(nullptr) {}
  ~IPsecInitiateReq() override;
  explicit constexpr IPsecInitiateReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecInitiateReq(const IPsecInitiateReq& from);
  IPsecInitiateReq(IPsecInitiateReq&& from) noexcept
    : IPsecInitiateReq() {
    *this = ::std::move(from);
  }

  inline IPsecInitiateReq& operator=(const IPsecInitiateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecInitiateReq& operator=(IPsecInitiateReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecInitiateReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecInitiateReq* internal_default_instance() {
    return reinterpret_cast<const IPsecInitiateReq*>(
               &_IPsecInitiateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(IPsecInitiateReq& a, IPsecInitiateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecInitiateReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecInitiateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecInitiateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecInitiateReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecInitiateReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecInitiateReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecInitiateReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecInitiateReq";
  }
  protected:
  explicit IPsecInitiateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 1,
    kIkeFieldNumber = 2,
    kTimeoutFieldNumber = 3,
    kLoglevelFieldNumber = 4,
  };
  // string child = 1;
  void clear_child();
  const std::string& child() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_child(ArgT0&& arg0, ArgT... args);
  std::string* mutable_child();
  PROTOBUF_NODISCARD std::string* release_child();
  void set_allocated_child(std::string* child);
  private:
  const std::string& _internal_child() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_child(const std::string& value);
  std::string* _internal_mutable_child();
  public:

  // string ike = 2;
  void clear_ike();
  const std::string& ike() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ike(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ike();
  PROTOBUF_NODISCARD std::string* release_ike();
  void set_allocated_ike(std::string* ike);
  private:
  const std::string& _internal_ike() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ike(const std::string& value);
  std::string* _internal_mutable_ike();
  public:

  // string timeout = 3;
  void clear_timeout();
  const std::string& timeout() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timeout(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timeout();
  PROTOBUF_NODISCARD std::string* release_timeout();
  void set_allocated_timeout(std::string* timeout);
  private:
  const std::string& _internal_timeout() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timeout(const std::string& value);
  std::string* _internal_mutable_timeout();
  public:

  // string loglevel = 4;
  void clear_loglevel();
  const std::string& loglevel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loglevel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loglevel();
  PROTOBUF_NODISCARD std::string* release_loglevel();
  void set_allocated_loglevel(std::string* loglevel);
  private:
  const std::string& _internal_loglevel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loglevel(const std::string& value);
  std::string* _internal_mutable_loglevel();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecInitiateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ike_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loglevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecInitiateResp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecInitiateResp) */ {
 public:
  inline IPsecInitiateResp() : IPsecInitiateResp(nullptr) {}
  explicit constexpr IPsecInitiateResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecInitiateResp(const IPsecInitiateResp& from);
  IPsecInitiateResp(IPsecInitiateResp&& from) noexcept
    : IPsecInitiateResp() {
    *this = ::std::move(from);
  }

  inline IPsecInitiateResp& operator=(const IPsecInitiateResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecInitiateResp& operator=(IPsecInitiateResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecInitiateResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecInitiateResp* internal_default_instance() {
    return reinterpret_cast<const IPsecInitiateResp*>(
               &_IPsecInitiateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(IPsecInitiateResp& a, IPsecInitiateResp& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecInitiateResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecInitiateResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecInitiateResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecInitiateResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const IPsecInitiateResp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const IPsecInitiateResp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecInitiateResp";
  }
  protected:
  explicit IPsecInitiateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecInitiateResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecTerminateReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecTerminateReq) */ {
 public:
  inline IPsecTerminateReq() : IPsecTerminateReq(nullptr) {}
  ~IPsecTerminateReq() override;
  explicit constexpr IPsecTerminateReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecTerminateReq(const IPsecTerminateReq& from);
  IPsecTerminateReq(IPsecTerminateReq&& from) noexcept
    : IPsecTerminateReq() {
    *this = ::std::move(from);
  }

  inline IPsecTerminateReq& operator=(const IPsecTerminateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecTerminateReq& operator=(IPsecTerminateReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecTerminateReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecTerminateReq* internal_default_instance() {
    return reinterpret_cast<const IPsecTerminateReq*>(
               &_IPsecTerminateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(IPsecTerminateReq& a, IPsecTerminateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecTerminateReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecTerminateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecTerminateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecTerminateReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecTerminateReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecTerminateReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecTerminateReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecTerminateReq";
  }
  protected:
  explicit IPsecTerminateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 1,
    kIkeFieldNumber = 2,
    kForceFieldNumber = 5,
    kTimeoutFieldNumber = 6,
    kLoglevelFieldNumber = 7,
    kChildIdFieldNumber = 3,
    kIkeIdFieldNumber = 4,
  };
  // string child = 1;
  void clear_child();
  const std::string& child() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_child(ArgT0&& arg0, ArgT... args);
  std::string* mutable_child();
  PROTOBUF_NODISCARD std::string* release_child();
  void set_allocated_child(std::string* child);
  private:
  const std::string& _internal_child() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_child(const std::string& value);
  std::string* _internal_mutable_child();
  public:

  // string ike = 2;
  void clear_ike();
  const std::string& ike() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ike(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ike();
  PROTOBUF_NODISCARD std::string* release_ike();
  void set_allocated_ike(std::string* ike);
  private:
  const std::string& _internal_ike() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ike(const std::string& value);
  std::string* _internal_mutable_ike();
  public:

  // string force = 5;
  void clear_force();
  const std::string& force() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_force(ArgT0&& arg0, ArgT... args);
  std::string* mutable_force();
  PROTOBUF_NODISCARD std::string* release_force();
  void set_allocated_force(std::string* force);
  private:
  const std::string& _internal_force() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_force(const std::string& value);
  std::string* _internal_mutable_force();
  public:

  // string timeout = 6;
  void clear_timeout();
  const std::string& timeout() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timeout(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timeout();
  PROTOBUF_NODISCARD std::string* release_timeout();
  void set_allocated_timeout(std::string* timeout);
  private:
  const std::string& _internal_timeout() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timeout(const std::string& value);
  std::string* _internal_mutable_timeout();
  public:

  // string loglevel = 7;
  void clear_loglevel();
  const std::string& loglevel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loglevel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loglevel();
  PROTOBUF_NODISCARD std::string* release_loglevel();
  void set_allocated_loglevel(std::string* loglevel);
  private:
  const std::string& _internal_loglevel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loglevel(const std::string& value);
  std::string* _internal_mutable_loglevel();
  public:

  // uint64 child_id = 3;
  void clear_child_id();
  uint64_t child_id() const;
  void set_child_id(uint64_t value);
  private:
  uint64_t _internal_child_id() const;
  void _internal_set_child_id(uint64_t value);
  public:

  // uint64 ike_id = 4;
  void clear_ike_id();
  uint64_t ike_id() const;
  void set_ike_id(uint64_t value);
  private:
  uint64_t _internal_ike_id() const;
  void _internal_set_ike_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecTerminateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ike_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr force_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loglevel_;
  uint64_t child_id_;
  uint64_t ike_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecTerminateResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecTerminateResp) */ {
 public:
  inline IPsecTerminateResp() : IPsecTerminateResp(nullptr) {}
  ~IPsecTerminateResp() override;
  explicit constexpr IPsecTerminateResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecTerminateResp(const IPsecTerminateResp& from);
  IPsecTerminateResp(IPsecTerminateResp&& from) noexcept
    : IPsecTerminateResp() {
    *this = ::std::move(from);
  }

  inline IPsecTerminateResp& operator=(const IPsecTerminateResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecTerminateResp& operator=(IPsecTerminateResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecTerminateResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecTerminateResp* internal_default_instance() {
    return reinterpret_cast<const IPsecTerminateResp*>(
               &_IPsecTerminateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(IPsecTerminateResp& a, IPsecTerminateResp& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecTerminateResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecTerminateResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecTerminateResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecTerminateResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecTerminateResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecTerminateResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecTerminateResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecTerminateResp";
  }
  protected:
  explicit IPsecTerminateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kMatchesFieldNumber = 2,
    kTerminatedFieldNumber = 3,
  };
  // string success = 1;
  void clear_success();
  const std::string& success() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_success(ArgT0&& arg0, ArgT... args);
  std::string* mutable_success();
  PROTOBUF_NODISCARD std::string* release_success();
  void set_allocated_success(std::string* success);
  private:
  const std::string& _internal_success() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_success(const std::string& value);
  std::string* _internal_mutable_success();
  public:

  // uint32 matches = 2;
  void clear_matches();
  uint32_t matches() const;
  void set_matches(uint32_t value);
  private:
  uint32_t _internal_matches() const;
  void _internal_set_matches(uint32_t value);
  public:

  // uint32 terminated = 3;
  void clear_terminated();
  uint32_t terminated() const;
  void set_terminated(uint32_t value);
  private:
  uint32_t _internal_terminated() const;
  void _internal_set_terminated(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecTerminateResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr success_;
  uint32_t matches_;
  uint32_t terminated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecRekeyReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecRekeyReq) */ {
 public:
  inline IPsecRekeyReq() : IPsecRekeyReq(nullptr) {}
  ~IPsecRekeyReq() override;
  explicit constexpr IPsecRekeyReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecRekeyReq(const IPsecRekeyReq& from);
  IPsecRekeyReq(IPsecRekeyReq&& from) noexcept
    : IPsecRekeyReq() {
    *this = ::std::move(from);
  }

  inline IPsecRekeyReq& operator=(const IPsecRekeyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecRekeyReq& operator=(IPsecRekeyReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecRekeyReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecRekeyReq* internal_default_instance() {
    return reinterpret_cast<const IPsecRekeyReq*>(
               &_IPsecRekeyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(IPsecRekeyReq& a, IPsecRekeyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecRekeyReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecRekeyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecRekeyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecRekeyReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecRekeyReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecRekeyReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecRekeyReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecRekeyReq";
  }
  protected:
  explicit IPsecRekeyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 1,
    kIkeFieldNumber = 2,
    kReauthFieldNumber = 5,
    kChildIdFieldNumber = 3,
    kIkeIdFieldNumber = 4,
  };
  // string child = 1;
  void clear_child();
  const std::string& child() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_child(ArgT0&& arg0, ArgT... args);
  std::string* mutable_child();
  PROTOBUF_NODISCARD std::string* release_child();
  void set_allocated_child(std::string* child);
  private:
  const std::string& _internal_child() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_child(const std::string& value);
  std::string* _internal_mutable_child();
  public:

  // string ike = 2;
  void clear_ike();
  const std::string& ike() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ike(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ike();
  PROTOBUF_NODISCARD std::string* release_ike();
  void set_allocated_ike(std::string* ike);
  private:
  const std::string& _internal_ike() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ike(const std::string& value);
  std::string* _internal_mutable_ike();
  public:

  // string reauth = 5;
  void clear_reauth();
  const std::string& reauth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reauth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reauth();
  PROTOBUF_NODISCARD std::string* release_reauth();
  void set_allocated_reauth(std::string* reauth);
  private:
  const std::string& _internal_reauth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reauth(const std::string& value);
  std::string* _internal_mutable_reauth();
  public:

  // uint64 child_id = 3;
  void clear_child_id();
  uint64_t child_id() const;
  void set_child_id(uint64_t value);
  private:
  uint64_t _internal_child_id() const;
  void _internal_set_child_id(uint64_t value);
  public:

  // uint64 ike_id = 4;
  void clear_ike_id();
  uint64_t ike_id() const;
  void set_ike_id(uint64_t value);
  private:
  uint64_t _internal_ike_id() const;
  void _internal_set_ike_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecRekeyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ike_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reauth_;
  uint64_t child_id_;
  uint64_t ike_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecRekeyResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecRekeyResp) */ {
 public:
  inline IPsecRekeyResp() : IPsecRekeyResp(nullptr) {}
  ~IPsecRekeyResp() override;
  explicit constexpr IPsecRekeyResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecRekeyResp(const IPsecRekeyResp& from);
  IPsecRekeyResp(IPsecRekeyResp&& from) noexcept
    : IPsecRekeyResp() {
    *this = ::std::move(from);
  }

  inline IPsecRekeyResp& operator=(const IPsecRekeyResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecRekeyResp& operator=(IPsecRekeyResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecRekeyResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecRekeyResp* internal_default_instance() {
    return reinterpret_cast<const IPsecRekeyResp*>(
               &_IPsecRekeyResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(IPsecRekeyResp& a, IPsecRekeyResp& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecRekeyResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecRekeyResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecRekeyResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecRekeyResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecRekeyResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecRekeyResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecRekeyResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecRekeyResp";
  }
  protected:
  explicit IPsecRekeyResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kMatchesFieldNumber = 2,
  };
  // string success = 1;
  void clear_success();
  const std::string& success() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_success(ArgT0&& arg0, ArgT... args);
  std::string* mutable_success();
  PROTOBUF_NODISCARD std::string* release_success();
  void set_allocated_success(std::string* success);
  private:
  const std::string& _internal_success() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_success(const std::string& value);
  std::string* _internal_mutable_success();
  public:

  // uint32 matches = 2;
  void clear_matches();
  uint32_t matches() const;
  void set_matches(uint32_t value);
  private:
  uint32_t _internal_matches() const;
  void _internal_set_matches(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecRekeyResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr success_;
  uint32_t matches_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecListSasReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecListSasReq) */ {
 public:
  inline IPsecListSasReq() : IPsecListSasReq(nullptr) {}
  ~IPsecListSasReq() override;
  explicit constexpr IPsecListSasReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecListSasReq(const IPsecListSasReq& from);
  IPsecListSasReq(IPsecListSasReq&& from) noexcept
    : IPsecListSasReq() {
    *this = ::std::move(from);
  }

  inline IPsecListSasReq& operator=(const IPsecListSasReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecListSasReq& operator=(IPsecListSasReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecListSasReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecListSasReq* internal_default_instance() {
    return reinterpret_cast<const IPsecListSasReq*>(
               &_IPsecListSasReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(IPsecListSasReq& a, IPsecListSasReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecListSasReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecListSasReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecListSasReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecListSasReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecListSasReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecListSasReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecListSasReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecListSasReq";
  }
  protected:
  explicit IPsecListSasReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoblockFieldNumber = 1,
    kIkeFieldNumber = 2,
    kChildFieldNumber = 4,
    kIkeIdFieldNumber = 3,
    kChildIdFieldNumber = 5,
  };
  // string noblock = 1;
  void clear_noblock();
  const std::string& noblock() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_noblock(ArgT0&& arg0, ArgT... args);
  std::string* mutable_noblock();
  PROTOBUF_NODISCARD std::string* release_noblock();
  void set_allocated_noblock(std::string* noblock);
  private:
  const std::string& _internal_noblock() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_noblock(const std::string& value);
  std::string* _internal_mutable_noblock();
  public:

  // string ike = 2;
  void clear_ike();
  const std::string& ike() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ike(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ike();
  PROTOBUF_NODISCARD std::string* release_ike();
  void set_allocated_ike(std::string* ike);
  private:
  const std::string& _internal_ike() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ike(const std::string& value);
  std::string* _internal_mutable_ike();
  public:

  // string child = 4;
  void clear_child();
  const std::string& child() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_child(ArgT0&& arg0, ArgT... args);
  std::string* mutable_child();
  PROTOBUF_NODISCARD std::string* release_child();
  void set_allocated_child(std::string* child);
  private:
  const std::string& _internal_child() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_child(const std::string& value);
  std::string* _internal_mutable_child();
  public:

  // uint64 ike_id = 3;
  void clear_ike_id();
  uint64_t ike_id() const;
  void set_ike_id(uint64_t value);
  private:
  uint64_t _internal_ike_id() const;
  void _internal_set_ike_id(uint64_t value);
  public:

  // uint64 child_id = 5;
  void clear_child_id();
  uint64_t child_id() const;
  void set_child_id(uint64_t value);
  private:
  uint64_t _internal_child_id() const;
  void _internal_set_child_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecListSasReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr noblock_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ike_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_;
  uint64_t ike_id_;
  uint64_t child_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class ListChildSa final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.ListChildSa) */ {
 public:
  inline ListChildSa() : ListChildSa(nullptr) {}
  ~ListChildSa() override;
  explicit constexpr ListChildSa(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListChildSa(const ListChildSa& from);
  ListChildSa(ListChildSa&& from) noexcept
    : ListChildSa() {
    *this = ::std::move(from);
  }

  inline ListChildSa& operator=(const ListChildSa& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListChildSa& operator=(ListChildSa&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListChildSa& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListChildSa* internal_default_instance() {
    return reinterpret_cast<const ListChildSa*>(
               &_ListChildSa_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ListChildSa& a, ListChildSa& b) {
    a.Swap(&b);
  }
  inline void Swap(ListChildSa* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListChildSa* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListChildSa* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListChildSa>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListChildSa& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListChildSa& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListChildSa* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.ListChildSa";
  }
  protected:
  explicit ListChildSa(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kProtocolFieldNumber = 2,
    kEncapFieldNumber = 3,
    kSpiInFieldNumber = 4,
    kSpiOutFieldNumber = 5,
    kCpiInFieldNumber = 6,
    kCpiOutFieldNumber = 7,
    kMarkInFieldNumber = 8,
    kMarkMaskInFieldNumber = 9,
    kMarkOutFieldNumber = 10,
    kMarkMaskOutFieldNumber = 11,
    kIfIdInFieldNumber = 12,
    kIfIdOutFieldNumber = 13,
    kEncrAlgFieldNumber = 14,
    kEncrKeysizeFieldNumber = 15,
    kIntegAlgFieldNumber = 16,
    kIntegKeysizeFieldNumber = 17,
    kDhGroupFieldNumber = 18,
    kEsnFieldNumber = 19,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string protocol = 2;
  void clear_protocol();
  const std::string& protocol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protocol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protocol();
  PROTOBUF_NODISCARD std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // string encap = 3;
  void clear_encap();
  const std::string& encap() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encap(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encap();
  PROTOBUF_NODISCARD std::string* release_encap();
  void set_allocated_encap(std::string* encap);
  private:
  const std::string& _internal_encap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encap(const std::string& value);
  std::string* _internal_mutable_encap();
  public:

  // string spi_in = 4;
  void clear_spi_in();
  const std::string& spi_in() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spi_in(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spi_in();
  PROTOBUF_NODISCARD std::string* release_spi_in();
  void set_allocated_spi_in(std::string* spi_in);
  private:
  const std::string& _internal_spi_in() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spi_in(const std::string& value);
  std::string* _internal_mutable_spi_in();
  public:

  // string spi_out = 5;
  void clear_spi_out();
  const std::string& spi_out() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spi_out(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spi_out();
  PROTOBUF_NODISCARD std::string* release_spi_out();
  void set_allocated_spi_out(std::string* spi_out);
  private:
  const std::string& _internal_spi_out() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spi_out(const std::string& value);
  std::string* _internal_mutable_spi_out();
  public:

  // string cpi_in = 6;
  void clear_cpi_in();
  const std::string& cpi_in() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpi_in(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpi_in();
  PROTOBUF_NODISCARD std::string* release_cpi_in();
  void set_allocated_cpi_in(std::string* cpi_in);
  private:
  const std::string& _internal_cpi_in() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpi_in(const std::string& value);
  std::string* _internal_mutable_cpi_in();
  public:

  // string cpi_out = 7;
  void clear_cpi_out();
  const std::string& cpi_out() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpi_out(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpi_out();
  PROTOBUF_NODISCARD std::string* release_cpi_out();
  void set_allocated_cpi_out(std::string* cpi_out);
  private:
  const std::string& _internal_cpi_out() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpi_out(const std::string& value);
  std::string* _internal_mutable_cpi_out();
  public:

  // string mark_in = 8;
  void clear_mark_in();
  const std::string& mark_in() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mark_in(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mark_in();
  PROTOBUF_NODISCARD std::string* release_mark_in();
  void set_allocated_mark_in(std::string* mark_in);
  private:
  const std::string& _internal_mark_in() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mark_in(const std::string& value);
  std::string* _internal_mutable_mark_in();
  public:

  // string mark_mask_in = 9;
  void clear_mark_mask_in();
  const std::string& mark_mask_in() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mark_mask_in(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mark_mask_in();
  PROTOBUF_NODISCARD std::string* release_mark_mask_in();
  void set_allocated_mark_mask_in(std::string* mark_mask_in);
  private:
  const std::string& _internal_mark_mask_in() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mark_mask_in(const std::string& value);
  std::string* _internal_mutable_mark_mask_in();
  public:

  // string mark_out = 10;
  void clear_mark_out();
  const std::string& mark_out() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mark_out(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mark_out();
  PROTOBUF_NODISCARD std::string* release_mark_out();
  void set_allocated_mark_out(std::string* mark_out);
  private:
  const std::string& _internal_mark_out() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mark_out(const std::string& value);
  std::string* _internal_mutable_mark_out();
  public:

  // string mark_mask_out = 11;
  void clear_mark_mask_out();
  const std::string& mark_mask_out() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mark_mask_out(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mark_mask_out();
  PROTOBUF_NODISCARD std::string* release_mark_mask_out();
  void set_allocated_mark_mask_out(std::string* mark_mask_out);
  private:
  const std::string& _internal_mark_mask_out() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mark_mask_out(const std::string& value);
  std::string* _internal_mutable_mark_mask_out();
  public:

  // string if_id_in = 12;
  void clear_if_id_in();
  const std::string& if_id_in() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_if_id_in(ArgT0&& arg0, ArgT... args);
  std::string* mutable_if_id_in();
  PROTOBUF_NODISCARD std::string* release_if_id_in();
  void set_allocated_if_id_in(std::string* if_id_in);
  private:
  const std::string& _internal_if_id_in() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_if_id_in(const std::string& value);
  std::string* _internal_mutable_if_id_in();
  public:

  // string if_id_out = 13;
  void clear_if_id_out();
  const std::string& if_id_out() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_if_id_out(ArgT0&& arg0, ArgT... args);
  std::string* mutable_if_id_out();
  PROTOBUF_NODISCARD std::string* release_if_id_out();
  void set_allocated_if_id_out(std::string* if_id_out);
  private:
  const std::string& _internal_if_id_out() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_if_id_out(const std::string& value);
  std::string* _internal_mutable_if_id_out();
  public:

  // string encr_alg = 14;
  void clear_encr_alg();
  const std::string& encr_alg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encr_alg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encr_alg();
  PROTOBUF_NODISCARD std::string* release_encr_alg();
  void set_allocated_encr_alg(std::string* encr_alg);
  private:
  const std::string& _internal_encr_alg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encr_alg(const std::string& value);
  std::string* _internal_mutable_encr_alg();
  public:

  // string encr_keysize = 15;
  void clear_encr_keysize();
  const std::string& encr_keysize() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encr_keysize(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encr_keysize();
  PROTOBUF_NODISCARD std::string* release_encr_keysize();
  void set_allocated_encr_keysize(std::string* encr_keysize);
  private:
  const std::string& _internal_encr_keysize() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encr_keysize(const std::string& value);
  std::string* _internal_mutable_encr_keysize();
  public:

  // string integ_alg = 16;
  void clear_integ_alg();
  const std::string& integ_alg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integ_alg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integ_alg();
  PROTOBUF_NODISCARD std::string* release_integ_alg();
  void set_allocated_integ_alg(std::string* integ_alg);
  private:
  const std::string& _internal_integ_alg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integ_alg(const std::string& value);
  std::string* _internal_mutable_integ_alg();
  public:

  // string integ_keysize = 17;
  void clear_integ_keysize();
  const std::string& integ_keysize() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integ_keysize(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integ_keysize();
  PROTOBUF_NODISCARD std::string* release_integ_keysize();
  void set_allocated_integ_keysize(std::string* integ_keysize);
  private:
  const std::string& _internal_integ_keysize() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integ_keysize(const std::string& value);
  std::string* _internal_mutable_integ_keysize();
  public:

  // string dh_group = 18;
  void clear_dh_group();
  const std::string& dh_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dh_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dh_group();
  PROTOBUF_NODISCARD std::string* release_dh_group();
  void set_allocated_dh_group(std::string* dh_group);
  private:
  const std::string& _internal_dh_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dh_group(const std::string& value);
  std::string* _internal_mutable_dh_group();
  public:

  // string esn = 19;
  void clear_esn();
  const std::string& esn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_esn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_esn();
  PROTOBUF_NODISCARD std::string* release_esn();
  void set_allocated_esn(std::string* esn);
  private:
  const std::string& _internal_esn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_esn(const std::string& value);
  std::string* _internal_mutable_esn();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.ListChildSa)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spi_in_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spi_out_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpi_in_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpi_out_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mark_in_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mark_mask_in_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mark_out_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mark_mask_out_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr if_id_in_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr if_id_out_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encr_alg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encr_keysize_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integ_alg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integ_keysize_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dh_group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr esn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class ListIkeSa final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.ListIkeSa) */ {
 public:
  inline ListIkeSa() : ListIkeSa(nullptr) {}
  ~ListIkeSa() override;
  explicit constexpr ListIkeSa(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListIkeSa(const ListIkeSa& from);
  ListIkeSa(ListIkeSa&& from) noexcept
    : ListIkeSa() {
    *this = ::std::move(from);
  }

  inline ListIkeSa& operator=(const ListIkeSa& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListIkeSa& operator=(ListIkeSa&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListIkeSa& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListIkeSa* internal_default_instance() {
    return reinterpret_cast<const ListIkeSa*>(
               &_ListIkeSa_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ListIkeSa& a, ListIkeSa& b) {
    a.Swap(&b);
  }
  inline void Swap(ListIkeSa* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListIkeSa* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListIkeSa* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListIkeSa>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListIkeSa& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListIkeSa& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListIkeSa* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.ListIkeSa";
  }
  protected:
  explicit ListIkeSa(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalVipsFieldNumber = 32,
    kRemoteVipsFieldNumber = 33,
    kTasksQueuedFieldNumber = 34,
    kTasksActiveFieldNumber = 35,
    kTasksPassiveFieldNumber = 36,
    kChildsasFieldNumber = 37,
    kNameFieldNumber = 1,
    kUniqueidFieldNumber = 2,
    kVersionFieldNumber = 3,
    kLocalHostFieldNumber = 5,
    kLocalPortFieldNumber = 6,
    kLocalIdFieldNumber = 7,
    kRemoteHostFieldNumber = 8,
    kRemotePortFieldNumber = 9,
    kRemoteIdFieldNumber = 10,
    kRemoteXauthIdFieldNumber = 11,
    kRemoteEapIdFieldNumber = 12,
    kInitiatorFieldNumber = 13,
    kInitiatorSpiFieldNumber = 14,
    kResponderSpiFieldNumber = 15,
    kNatLocalFieldNumber = 16,
    kNatRemoteFieldNumber = 17,
    kNatFakeFieldNumber = 18,
    kNatAnyFieldNumber = 19,
    kIfIdInFieldNumber = 20,
    kIfIdOutFieldNumber = 21,
    kEncrAlgFieldNumber = 22,
    kEncrKeysizeFieldNumber = 23,
    kIntegAlgFieldNumber = 24,
    kIntegKeysizeFieldNumber = 25,
    kPrfAlgFieldNumber = 26,
    kDhGroupFieldNumber = 27,
    kPpkFieldNumber = 28,
    kEstablishedFieldNumber = 29,
    kRekeyTimeFieldNumber = 30,
    kReauthTimeFieldNumber = 31,
    kIkestateFieldNumber = 4,
  };
  // repeated string local_vips = 32;
  int local_vips_size() const;
  private:
  int _internal_local_vips_size() const;
  public:
  void clear_local_vips();
  const std::string& local_vips(int index) const;
  std::string* mutable_local_vips(int index);
  void set_local_vips(int index, const std::string& value);
  void set_local_vips(int index, std::string&& value);
  void set_local_vips(int index, const char* value);
  void set_local_vips(int index, const char* value, size_t size);
  std::string* add_local_vips();
  void add_local_vips(const std::string& value);
  void add_local_vips(std::string&& value);
  void add_local_vips(const char* value);
  void add_local_vips(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& local_vips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_local_vips();
  private:
  const std::string& _internal_local_vips(int index) const;
  std::string* _internal_add_local_vips();
  public:

  // repeated string remote_vips = 33;
  int remote_vips_size() const;
  private:
  int _internal_remote_vips_size() const;
  public:
  void clear_remote_vips();
  const std::string& remote_vips(int index) const;
  std::string* mutable_remote_vips(int index);
  void set_remote_vips(int index, const std::string& value);
  void set_remote_vips(int index, std::string&& value);
  void set_remote_vips(int index, const char* value);
  void set_remote_vips(int index, const char* value, size_t size);
  std::string* add_remote_vips();
  void add_remote_vips(const std::string& value);
  void add_remote_vips(std::string&& value);
  void add_remote_vips(const char* value);
  void add_remote_vips(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& remote_vips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_remote_vips();
  private:
  const std::string& _internal_remote_vips(int index) const;
  std::string* _internal_add_remote_vips();
  public:

  // repeated string tasks_queued = 34;
  int tasks_queued_size() const;
  private:
  int _internal_tasks_queued_size() const;
  public:
  void clear_tasks_queued();
  const std::string& tasks_queued(int index) const;
  std::string* mutable_tasks_queued(int index);
  void set_tasks_queued(int index, const std::string& value);
  void set_tasks_queued(int index, std::string&& value);
  void set_tasks_queued(int index, const char* value);
  void set_tasks_queued(int index, const char* value, size_t size);
  std::string* add_tasks_queued();
  void add_tasks_queued(const std::string& value);
  void add_tasks_queued(std::string&& value);
  void add_tasks_queued(const char* value);
  void add_tasks_queued(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tasks_queued() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tasks_queued();
  private:
  const std::string& _internal_tasks_queued(int index) const;
  std::string* _internal_add_tasks_queued();
  public:

  // repeated string tasks_active = 35;
  int tasks_active_size() const;
  private:
  int _internal_tasks_active_size() const;
  public:
  void clear_tasks_active();
  const std::string& tasks_active(int index) const;
  std::string* mutable_tasks_active(int index);
  void set_tasks_active(int index, const std::string& value);
  void set_tasks_active(int index, std::string&& value);
  void set_tasks_active(int index, const char* value);
  void set_tasks_active(int index, const char* value, size_t size);
  std::string* add_tasks_active();
  void add_tasks_active(const std::string& value);
  void add_tasks_active(std::string&& value);
  void add_tasks_active(const char* value);
  void add_tasks_active(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tasks_active() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tasks_active();
  private:
  const std::string& _internal_tasks_active(int index) const;
  std::string* _internal_add_tasks_active();
  public:

  // repeated string tasks_passive = 36;
  int tasks_passive_size() const;
  private:
  int _internal_tasks_passive_size() const;
  public:
  void clear_tasks_passive();
  const std::string& tasks_passive(int index) const;
  std::string* mutable_tasks_passive(int index);
  void set_tasks_passive(int index, const std::string& value);
  void set_tasks_passive(int index, std::string&& value);
  void set_tasks_passive(int index, const char* value);
  void set_tasks_passive(int index, const char* value, size_t size);
  std::string* add_tasks_passive();
  void add_tasks_passive(const std::string& value);
  void add_tasks_passive(std::string&& value);
  void add_tasks_passive(const char* value);
  void add_tasks_passive(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tasks_passive() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tasks_passive();
  private:
  const std::string& _internal_tasks_passive(int index) const;
  std::string* _internal_add_tasks_passive();
  public:

  // repeated .opi_api.security.v1.ListChildSa childsas = 37;
  int childsas_size() const;
  private:
  int _internal_childsas_size() const;
  public:
  void clear_childsas();
  ::opi_api::security::v1::ListChildSa* mutable_childsas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListChildSa >*
      mutable_childsas();
  private:
  const ::opi_api::security::v1::ListChildSa& _internal_childsas(int index) const;
  ::opi_api::security::v1::ListChildSa* _internal_add_childsas();
  public:
  const ::opi_api::security::v1::ListChildSa& childsas(int index) const;
  ::opi_api::security::v1::ListChildSa* add_childsas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListChildSa >&
      childsas() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string uniqueid = 2;
  void clear_uniqueid();
  const std::string& uniqueid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uniqueid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uniqueid();
  PROTOBUF_NODISCARD std::string* release_uniqueid();
  void set_allocated_uniqueid(std::string* uniqueid);
  private:
  const std::string& _internal_uniqueid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uniqueid(const std::string& value);
  std::string* _internal_mutable_uniqueid();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string local_host = 5;
  void clear_local_host();
  const std::string& local_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_host();
  PROTOBUF_NODISCARD std::string* release_local_host();
  void set_allocated_local_host(std::string* local_host);
  private:
  const std::string& _internal_local_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_host(const std::string& value);
  std::string* _internal_mutable_local_host();
  public:

  // string local_port = 6;
  void clear_local_port();
  const std::string& local_port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_port();
  PROTOBUF_NODISCARD std::string* release_local_port();
  void set_allocated_local_port(std::string* local_port);
  private:
  const std::string& _internal_local_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_port(const std::string& value);
  std::string* _internal_mutable_local_port();
  public:

  // string local_id = 7;
  void clear_local_id();
  const std::string& local_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_id();
  PROTOBUF_NODISCARD std::string* release_local_id();
  void set_allocated_local_id(std::string* local_id);
  private:
  const std::string& _internal_local_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_id(const std::string& value);
  std::string* _internal_mutable_local_id();
  public:

  // string remote_host = 8;
  void clear_remote_host();
  const std::string& remote_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_host();
  PROTOBUF_NODISCARD std::string* release_remote_host();
  void set_allocated_remote_host(std::string* remote_host);
  private:
  const std::string& _internal_remote_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_host(const std::string& value);
  std::string* _internal_mutable_remote_host();
  public:

  // string remote_port = 9;
  void clear_remote_port();
  const std::string& remote_port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_port();
  PROTOBUF_NODISCARD std::string* release_remote_port();
  void set_allocated_remote_port(std::string* remote_port);
  private:
  const std::string& _internal_remote_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_port(const std::string& value);
  std::string* _internal_mutable_remote_port();
  public:

  // string remote_id = 10;
  void clear_remote_id();
  const std::string& remote_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_id();
  PROTOBUF_NODISCARD std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);
  private:
  const std::string& _internal_remote_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_id(const std::string& value);
  std::string* _internal_mutable_remote_id();
  public:

  // string remote_xauth_id = 11;
  void clear_remote_xauth_id();
  const std::string& remote_xauth_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_xauth_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_xauth_id();
  PROTOBUF_NODISCARD std::string* release_remote_xauth_id();
  void set_allocated_remote_xauth_id(std::string* remote_xauth_id);
  private:
  const std::string& _internal_remote_xauth_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_xauth_id(const std::string& value);
  std::string* _internal_mutable_remote_xauth_id();
  public:

  // string remote_eap_id = 12;
  void clear_remote_eap_id();
  const std::string& remote_eap_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_eap_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_eap_id();
  PROTOBUF_NODISCARD std::string* release_remote_eap_id();
  void set_allocated_remote_eap_id(std::string* remote_eap_id);
  private:
  const std::string& _internal_remote_eap_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_eap_id(const std::string& value);
  std::string* _internal_mutable_remote_eap_id();
  public:

  // string initiator = 13;
  void clear_initiator();
  const std::string& initiator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_initiator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_initiator();
  PROTOBUF_NODISCARD std::string* release_initiator();
  void set_allocated_initiator(std::string* initiator);
  private:
  const std::string& _internal_initiator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initiator(const std::string& value);
  std::string* _internal_mutable_initiator();
  public:

  // string initiator_spi = 14;
  void clear_initiator_spi();
  const std::string& initiator_spi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_initiator_spi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_initiator_spi();
  PROTOBUF_NODISCARD std::string* release_initiator_spi();
  void set_allocated_initiator_spi(std::string* initiator_spi);
  private:
  const std::string& _internal_initiator_spi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initiator_spi(const std::string& value);
  std::string* _internal_mutable_initiator_spi();
  public:

  // string responder_spi = 15;
  void clear_responder_spi();
  const std::string& responder_spi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_responder_spi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_responder_spi();
  PROTOBUF_NODISCARD std::string* release_responder_spi();
  void set_allocated_responder_spi(std::string* responder_spi);
  private:
  const std::string& _internal_responder_spi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_responder_spi(const std::string& value);
  std::string* _internal_mutable_responder_spi();
  public:

  // string nat_local = 16;
  void clear_nat_local();
  const std::string& nat_local() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nat_local(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nat_local();
  PROTOBUF_NODISCARD std::string* release_nat_local();
  void set_allocated_nat_local(std::string* nat_local);
  private:
  const std::string& _internal_nat_local() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nat_local(const std::string& value);
  std::string* _internal_mutable_nat_local();
  public:

  // string nat_remote = 17;
  void clear_nat_remote();
  const std::string& nat_remote() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nat_remote(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nat_remote();
  PROTOBUF_NODISCARD std::string* release_nat_remote();
  void set_allocated_nat_remote(std::string* nat_remote);
  private:
  const std::string& _internal_nat_remote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nat_remote(const std::string& value);
  std::string* _internal_mutable_nat_remote();
  public:

  // string nat_fake = 18;
  void clear_nat_fake();
  const std::string& nat_fake() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nat_fake(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nat_fake();
  PROTOBUF_NODISCARD std::string* release_nat_fake();
  void set_allocated_nat_fake(std::string* nat_fake);
  private:
  const std::string& _internal_nat_fake() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nat_fake(const std::string& value);
  std::string* _internal_mutable_nat_fake();
  public:

  // string nat_any = 19;
  void clear_nat_any();
  const std::string& nat_any() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nat_any(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nat_any();
  PROTOBUF_NODISCARD std::string* release_nat_any();
  void set_allocated_nat_any(std::string* nat_any);
  private:
  const std::string& _internal_nat_any() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nat_any(const std::string& value);
  std::string* _internal_mutable_nat_any();
  public:

  // string if_id_in = 20;
  void clear_if_id_in();
  const std::string& if_id_in() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_if_id_in(ArgT0&& arg0, ArgT... args);
  std::string* mutable_if_id_in();
  PROTOBUF_NODISCARD std::string* release_if_id_in();
  void set_allocated_if_id_in(std::string* if_id_in);
  private:
  const std::string& _internal_if_id_in() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_if_id_in(const std::string& value);
  std::string* _internal_mutable_if_id_in();
  public:

  // string if_id_out = 21;
  void clear_if_id_out();
  const std::string& if_id_out() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_if_id_out(ArgT0&& arg0, ArgT... args);
  std::string* mutable_if_id_out();
  PROTOBUF_NODISCARD std::string* release_if_id_out();
  void set_allocated_if_id_out(std::string* if_id_out);
  private:
  const std::string& _internal_if_id_out() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_if_id_out(const std::string& value);
  std::string* _internal_mutable_if_id_out();
  public:

  // string encr_alg = 22;
  void clear_encr_alg();
  const std::string& encr_alg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encr_alg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encr_alg();
  PROTOBUF_NODISCARD std::string* release_encr_alg();
  void set_allocated_encr_alg(std::string* encr_alg);
  private:
  const std::string& _internal_encr_alg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encr_alg(const std::string& value);
  std::string* _internal_mutable_encr_alg();
  public:

  // string encr_keysize = 23;
  void clear_encr_keysize();
  const std::string& encr_keysize() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encr_keysize(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encr_keysize();
  PROTOBUF_NODISCARD std::string* release_encr_keysize();
  void set_allocated_encr_keysize(std::string* encr_keysize);
  private:
  const std::string& _internal_encr_keysize() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encr_keysize(const std::string& value);
  std::string* _internal_mutable_encr_keysize();
  public:

  // string integ_alg = 24;
  void clear_integ_alg();
  const std::string& integ_alg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integ_alg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integ_alg();
  PROTOBUF_NODISCARD std::string* release_integ_alg();
  void set_allocated_integ_alg(std::string* integ_alg);
  private:
  const std::string& _internal_integ_alg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integ_alg(const std::string& value);
  std::string* _internal_mutable_integ_alg();
  public:

  // string integ_keysize = 25;
  void clear_integ_keysize();
  const std::string& integ_keysize() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integ_keysize(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integ_keysize();
  PROTOBUF_NODISCARD std::string* release_integ_keysize();
  void set_allocated_integ_keysize(std::string* integ_keysize);
  private:
  const std::string& _internal_integ_keysize() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integ_keysize(const std::string& value);
  std::string* _internal_mutable_integ_keysize();
  public:

  // string prf_alg = 26;
  void clear_prf_alg();
  const std::string& prf_alg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prf_alg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prf_alg();
  PROTOBUF_NODISCARD std::string* release_prf_alg();
  void set_allocated_prf_alg(std::string* prf_alg);
  private:
  const std::string& _internal_prf_alg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prf_alg(const std::string& value);
  std::string* _internal_mutable_prf_alg();
  public:

  // string dh_group = 27;
  void clear_dh_group();
  const std::string& dh_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dh_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dh_group();
  PROTOBUF_NODISCARD std::string* release_dh_group();
  void set_allocated_dh_group(std::string* dh_group);
  private:
  const std::string& _internal_dh_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dh_group(const std::string& value);
  std::string* _internal_mutable_dh_group();
  public:

  // string ppk = 28;
  void clear_ppk();
  const std::string& ppk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ppk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ppk();
  PROTOBUF_NODISCARD std::string* release_ppk();
  void set_allocated_ppk(std::string* ppk);
  private:
  const std::string& _internal_ppk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ppk(const std::string& value);
  std::string* _internal_mutable_ppk();
  public:

  // string established = 29;
  void clear_established();
  const std::string& established() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_established(ArgT0&& arg0, ArgT... args);
  std::string* mutable_established();
  PROTOBUF_NODISCARD std::string* release_established();
  void set_allocated_established(std::string* established);
  private:
  const std::string& _internal_established() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_established(const std::string& value);
  std::string* _internal_mutable_established();
  public:

  // string rekey_time = 30;
  void clear_rekey_time();
  const std::string& rekey_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rekey_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rekey_time();
  PROTOBUF_NODISCARD std::string* release_rekey_time();
  void set_allocated_rekey_time(std::string* rekey_time);
  private:
  const std::string& _internal_rekey_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rekey_time(const std::string& value);
  std::string* _internal_mutable_rekey_time();
  public:

  // string reauth_time = 31;
  void clear_reauth_time();
  const std::string& reauth_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reauth_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reauth_time();
  PROTOBUF_NODISCARD std::string* release_reauth_time();
  void set_allocated_reauth_time(std::string* reauth_time);
  private:
  const std::string& _internal_reauth_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reauth_time(const std::string& value);
  std::string* _internal_mutable_reauth_time();
  public:

  // .opi_api.security.v1.IkeSaState ikestate = 4;
  void clear_ikestate();
  ::opi_api::security::v1::IkeSaState ikestate() const;
  void set_ikestate(::opi_api::security::v1::IkeSaState value);
  private:
  ::opi_api::security::v1::IkeSaState _internal_ikestate() const;
  void _internal_set_ikestate(::opi_api::security::v1::IkeSaState value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.ListIkeSa)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> local_vips_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> remote_vips_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tasks_queued_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tasks_active_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tasks_passive_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListChildSa > childsas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uniqueid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_xauth_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_eap_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initiator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initiator_spi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responder_spi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nat_local_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nat_remote_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nat_fake_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nat_any_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr if_id_in_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr if_id_out_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encr_alg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encr_keysize_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integ_alg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integ_keysize_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prf_alg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dh_group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ppk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr established_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rekey_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reauth_time_;
  int ikestate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecListSasResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecListSasResp) */ {
 public:
  inline IPsecListSasResp() : IPsecListSasResp(nullptr) {}
  ~IPsecListSasResp() override;
  explicit constexpr IPsecListSasResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecListSasResp(const IPsecListSasResp& from);
  IPsecListSasResp(IPsecListSasResp&& from) noexcept
    : IPsecListSasResp() {
    *this = ::std::move(from);
  }

  inline IPsecListSasResp& operator=(const IPsecListSasResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecListSasResp& operator=(IPsecListSasResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecListSasResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecListSasResp* internal_default_instance() {
    return reinterpret_cast<const IPsecListSasResp*>(
               &_IPsecListSasResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(IPsecListSasResp& a, IPsecListSasResp& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecListSasResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecListSasResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecListSasResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecListSasResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecListSasResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecListSasResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecListSasResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecListSasResp";
  }
  protected:
  explicit IPsecListSasResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIkesasFieldNumber = 1,
  };
  // repeated .opi_api.security.v1.ListIkeSa ikesas = 1;
  int ikesas_size() const;
  private:
  int _internal_ikesas_size() const;
  public:
  void clear_ikesas();
  ::opi_api::security::v1::ListIkeSa* mutable_ikesas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListIkeSa >*
      mutable_ikesas();
  private:
  const ::opi_api::security::v1::ListIkeSa& _internal_ikesas(int index) const;
  ::opi_api::security::v1::ListIkeSa* _internal_add_ikesas();
  public:
  const ::opi_api::security::v1::ListIkeSa& ikesas(int index) const;
  ::opi_api::security::v1::ListIkeSa* add_ikesas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListIkeSa >&
      ikesas() const;

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecListSasResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListIkeSa > ikesas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecListConnsReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecListConnsReq) */ {
 public:
  inline IPsecListConnsReq() : IPsecListConnsReq(nullptr) {}
  ~IPsecListConnsReq() override;
  explicit constexpr IPsecListConnsReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecListConnsReq(const IPsecListConnsReq& from);
  IPsecListConnsReq(IPsecListConnsReq&& from) noexcept
    : IPsecListConnsReq() {
    *this = ::std::move(from);
  }

  inline IPsecListConnsReq& operator=(const IPsecListConnsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecListConnsReq& operator=(IPsecListConnsReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecListConnsReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecListConnsReq* internal_default_instance() {
    return reinterpret_cast<const IPsecListConnsReq*>(
               &_IPsecListConnsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(IPsecListConnsReq& a, IPsecListConnsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecListConnsReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecListConnsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecListConnsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecListConnsReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecListConnsReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecListConnsReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecListConnsReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecListConnsReq";
  }
  protected:
  explicit IPsecListConnsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIkeFieldNumber = 1,
  };
  // string ike = 1;
  void clear_ike();
  const std::string& ike() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ike(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ike();
  PROTOBUF_NODISCARD std::string* release_ike();
  void set_allocated_ike(std::string* ike);
  private:
  const std::string& _internal_ike() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ike(const std::string& value);
  std::string* _internal_mutable_ike();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecListConnsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ike_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class ListConnAuth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.ListConnAuth) */ {
 public:
  inline ListConnAuth() : ListConnAuth(nullptr) {}
  ~ListConnAuth() override;
  explicit constexpr ListConnAuth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConnAuth(const ListConnAuth& from);
  ListConnAuth(ListConnAuth&& from) noexcept
    : ListConnAuth() {
    *this = ::std::move(from);
  }

  inline ListConnAuth& operator=(const ListConnAuth& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConnAuth& operator=(ListConnAuth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConnAuth& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConnAuth* internal_default_instance() {
    return reinterpret_cast<const ListConnAuth*>(
               &_ListConnAuth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ListConnAuth& a, ListConnAuth& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConnAuth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConnAuth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListConnAuth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListConnAuth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConnAuth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListConnAuth& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConnAuth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.ListConnAuth";
  }
  protected:
  explicit ListConnAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassFieldNumber = 1,
    kEaptypeFieldNumber = 2,
    kEapvendorFieldNumber = 3,
    kXauthFieldNumber = 4,
    kRevocationFieldNumber = 5,
    kIdFieldNumber = 6,
    kCaIdFieldNumber = 7,
    kAaaIdFieldNumber = 8,
    kEapIdFieldNumber = 9,
    kXauthIdFieldNumber = 10,
    kGroupFieldNumber = 11,
    kCertPolicyFieldNumber = 12,
    kCertsFieldNumber = 13,
    kCacertsFieldNumber = 14,
  };
  // string class = 1;
  void clear_class_();
  const std::string& class_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_();
  PROTOBUF_NODISCARD std::string* release_class_();
  void set_allocated_class_(std::string* class_);
  private:
  const std::string& _internal_class_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_(const std::string& value);
  std::string* _internal_mutable_class_();
  public:

  // string eaptype = 2;
  void clear_eaptype();
  const std::string& eaptype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eaptype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eaptype();
  PROTOBUF_NODISCARD std::string* release_eaptype();
  void set_allocated_eaptype(std::string* eaptype);
  private:
  const std::string& _internal_eaptype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eaptype(const std::string& value);
  std::string* _internal_mutable_eaptype();
  public:

  // string eapvendor = 3;
  void clear_eapvendor();
  const std::string& eapvendor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eapvendor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eapvendor();
  PROTOBUF_NODISCARD std::string* release_eapvendor();
  void set_allocated_eapvendor(std::string* eapvendor);
  private:
  const std::string& _internal_eapvendor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eapvendor(const std::string& value);
  std::string* _internal_mutable_eapvendor();
  public:

  // string xauth = 4;
  void clear_xauth();
  const std::string& xauth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xauth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xauth();
  PROTOBUF_NODISCARD std::string* release_xauth();
  void set_allocated_xauth(std::string* xauth);
  private:
  const std::string& _internal_xauth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xauth(const std::string& value);
  std::string* _internal_mutable_xauth();
  public:

  // string revocation = 5;
  void clear_revocation();
  const std::string& revocation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_revocation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_revocation();
  PROTOBUF_NODISCARD std::string* release_revocation();
  void set_allocated_revocation(std::string* revocation);
  private:
  const std::string& _internal_revocation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_revocation(const std::string& value);
  std::string* _internal_mutable_revocation();
  public:

  // string id = 6;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string ca_id = 7;
  void clear_ca_id();
  const std::string& ca_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ca_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ca_id();
  PROTOBUF_NODISCARD std::string* release_ca_id();
  void set_allocated_ca_id(std::string* ca_id);
  private:
  const std::string& _internal_ca_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ca_id(const std::string& value);
  std::string* _internal_mutable_ca_id();
  public:

  // string aaa_id = 8;
  void clear_aaa_id();
  const std::string& aaa_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aaa_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aaa_id();
  PROTOBUF_NODISCARD std::string* release_aaa_id();
  void set_allocated_aaa_id(std::string* aaa_id);
  private:
  const std::string& _internal_aaa_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aaa_id(const std::string& value);
  std::string* _internal_mutable_aaa_id();
  public:

  // string eap_id = 9;
  void clear_eap_id();
  const std::string& eap_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eap_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eap_id();
  PROTOBUF_NODISCARD std::string* release_eap_id();
  void set_allocated_eap_id(std::string* eap_id);
  private:
  const std::string& _internal_eap_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eap_id(const std::string& value);
  std::string* _internal_mutable_eap_id();
  public:

  // string xauth_id = 10;
  void clear_xauth_id();
  const std::string& xauth_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xauth_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xauth_id();
  PROTOBUF_NODISCARD std::string* release_xauth_id();
  void set_allocated_xauth_id(std::string* xauth_id);
  private:
  const std::string& _internal_xauth_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xauth_id(const std::string& value);
  std::string* _internal_mutable_xauth_id();
  public:

  // .opi_api.security.v1.Groups group = 11;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::opi_api::security::v1::Groups& group() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::Groups* release_group();
  ::opi_api::security::v1::Groups* mutable_group();
  void set_allocated_group(::opi_api::security::v1::Groups* group);
  private:
  const ::opi_api::security::v1::Groups& _internal_group() const;
  ::opi_api::security::v1::Groups* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::opi_api::security::v1::Groups* group);
  ::opi_api::security::v1::Groups* unsafe_arena_release_group();

  // .opi_api.security.v1.CertPolicy cert_policy = 12;
  bool has_cert_policy() const;
  private:
  bool _internal_has_cert_policy() const;
  public:
  void clear_cert_policy();
  const ::opi_api::security::v1::CertPolicy& cert_policy() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::CertPolicy* release_cert_policy();
  ::opi_api::security::v1::CertPolicy* mutable_cert_policy();
  void set_allocated_cert_policy(::opi_api::security::v1::CertPolicy* cert_policy);
  private:
  const ::opi_api::security::v1::CertPolicy& _internal_cert_policy() const;
  ::opi_api::security::v1::CertPolicy* _internal_mutable_cert_policy();
  public:
  void unsafe_arena_set_allocated_cert_policy(
      ::opi_api::security::v1::CertPolicy* cert_policy);
  ::opi_api::security::v1::CertPolicy* unsafe_arena_release_cert_policy();

  // .opi_api.security.v1.Certs certs = 13;
  bool has_certs() const;
  private:
  bool _internal_has_certs() const;
  public:
  void clear_certs();
  const ::opi_api::security::v1::Certs& certs() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::Certs* release_certs();
  ::opi_api::security::v1::Certs* mutable_certs();
  void set_allocated_certs(::opi_api::security::v1::Certs* certs);
  private:
  const ::opi_api::security::v1::Certs& _internal_certs() const;
  ::opi_api::security::v1::Certs* _internal_mutable_certs();
  public:
  void unsafe_arena_set_allocated_certs(
      ::opi_api::security::v1::Certs* certs);
  ::opi_api::security::v1::Certs* unsafe_arena_release_certs();

  // .opi_api.security.v1.CaCerts cacerts = 14;
  bool has_cacerts() const;
  private:
  bool _internal_has_cacerts() const;
  public:
  void clear_cacerts();
  const ::opi_api::security::v1::CaCerts& cacerts() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::CaCerts* release_cacerts();
  ::opi_api::security::v1::CaCerts* mutable_cacerts();
  void set_allocated_cacerts(::opi_api::security::v1::CaCerts* cacerts);
  private:
  const ::opi_api::security::v1::CaCerts& _internal_cacerts() const;
  ::opi_api::security::v1::CaCerts* _internal_mutable_cacerts();
  public:
  void unsafe_arena_set_allocated_cacerts(
      ::opi_api::security::v1::CaCerts* cacerts);
  ::opi_api::security::v1::CaCerts* unsafe_arena_release_cacerts();

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.ListConnAuth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eaptype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eapvendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xauth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr revocation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ca_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aaa_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eap_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xauth_id_;
  ::opi_api::security::v1::Groups* group_;
  ::opi_api::security::v1::CertPolicy* cert_policy_;
  ::opi_api::security::v1::Certs* certs_;
  ::opi_api::security::v1::CaCerts* cacerts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class ListChild final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.ListChild) */ {
 public:
  inline ListChild() : ListChild(nullptr) {}
  ~ListChild() override;
  explicit constexpr ListChild(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListChild(const ListChild& from);
  ListChild(ListChild&& from) noexcept
    : ListChild() {
    *this = ::std::move(from);
  }

  inline ListChild& operator=(const ListChild& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListChild& operator=(ListChild&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListChild& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListChild* internal_default_instance() {
    return reinterpret_cast<const ListChild*>(
               &_ListChild_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ListChild& a, ListChild& b) {
    a.Swap(&b);
  }
  inline void Swap(ListChild* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListChild* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListChild* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListChild>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListChild& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListChild& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListChild* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.ListChild";
  }
  protected:
  explicit ListChild(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kModeFieldNumber = 2,
    kLabelFieldNumber = 3,
    kDpdActionFieldNumber = 7,
    kCloseActionFieldNumber = 8,
    kInterfaceFieldNumber = 11,
    kPriorityFieldNumber = 12,
    kLocalTsFieldNumber = 9,
    kRemoteTsFieldNumber = 10,
    kRekeyTimeFieldNumber = 4,
    kRekeyBytesFieldNumber = 5,
    kRekeyPacketsFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string mode = 2;
  void clear_mode();
  const std::string& mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mode();
  PROTOBUF_NODISCARD std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  private:
  const std::string& _internal_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // string label = 3;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string dpd_action = 7;
  void clear_dpd_action();
  const std::string& dpd_action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dpd_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dpd_action();
  PROTOBUF_NODISCARD std::string* release_dpd_action();
  void set_allocated_dpd_action(std::string* dpd_action);
  private:
  const std::string& _internal_dpd_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dpd_action(const std::string& value);
  std::string* _internal_mutable_dpd_action();
  public:

  // string close_action = 8;
  void clear_close_action();
  const std::string& close_action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_close_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_close_action();
  PROTOBUF_NODISCARD std::string* release_close_action();
  void set_allocated_close_action(std::string* close_action);
  private:
  const std::string& _internal_close_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_close_action(const std::string& value);
  std::string* _internal_mutable_close_action();
  public:

  // string interface = 11;
  void clear_interface();
  const std::string& interface() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interface(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interface();
  PROTOBUF_NODISCARD std::string* release_interface();
  void set_allocated_interface(std::string* interface);
  private:
  const std::string& _internal_interface() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface(const std::string& value);
  std::string* _internal_mutable_interface();
  public:

  // string priority = 12;
  void clear_priority();
  const std::string& priority() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_priority(ArgT0&& arg0, ArgT... args);
  std::string* mutable_priority();
  PROTOBUF_NODISCARD std::string* release_priority();
  void set_allocated_priority(std::string* priority);
  private:
  const std::string& _internal_priority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_priority(const std::string& value);
  std::string* _internal_mutable_priority();
  public:

  // .opi_api.security.v1.TrafficSelectors local_ts = 9;
  bool has_local_ts() const;
  private:
  bool _internal_has_local_ts() const;
  public:
  void clear_local_ts();
  const ::opi_api::security::v1::TrafficSelectors& local_ts() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::TrafficSelectors* release_local_ts();
  ::opi_api::security::v1::TrafficSelectors* mutable_local_ts();
  void set_allocated_local_ts(::opi_api::security::v1::TrafficSelectors* local_ts);
  private:
  const ::opi_api::security::v1::TrafficSelectors& _internal_local_ts() const;
  ::opi_api::security::v1::TrafficSelectors* _internal_mutable_local_ts();
  public:
  void unsafe_arena_set_allocated_local_ts(
      ::opi_api::security::v1::TrafficSelectors* local_ts);
  ::opi_api::security::v1::TrafficSelectors* unsafe_arena_release_local_ts();

  // .opi_api.security.v1.TrafficSelectors remote_ts = 10;
  bool has_remote_ts() const;
  private:
  bool _internal_has_remote_ts() const;
  public:
  void clear_remote_ts();
  const ::opi_api::security::v1::TrafficSelectors& remote_ts() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::TrafficSelectors* release_remote_ts();
  ::opi_api::security::v1::TrafficSelectors* mutable_remote_ts();
  void set_allocated_remote_ts(::opi_api::security::v1::TrafficSelectors* remote_ts);
  private:
  const ::opi_api::security::v1::TrafficSelectors& _internal_remote_ts() const;
  ::opi_api::security::v1::TrafficSelectors* _internal_mutable_remote_ts();
  public:
  void unsafe_arena_set_allocated_remote_ts(
      ::opi_api::security::v1::TrafficSelectors* remote_ts);
  ::opi_api::security::v1::TrafficSelectors* unsafe_arena_release_remote_ts();

  // uint32 rekey_time = 4;
  void clear_rekey_time();
  uint32_t rekey_time() const;
  void set_rekey_time(uint32_t value);
  private:
  uint32_t _internal_rekey_time() const;
  void _internal_set_rekey_time(uint32_t value);
  public:

  // uint32 rekey_bytes = 5;
  void clear_rekey_bytes();
  uint32_t rekey_bytes() const;
  void set_rekey_bytes(uint32_t value);
  private:
  uint32_t _internal_rekey_bytes() const;
  void _internal_set_rekey_bytes(uint32_t value);
  public:

  // uint32 rekey_packets = 6;
  void clear_rekey_packets();
  uint32_t rekey_packets() const;
  void set_rekey_packets(uint32_t value);
  private:
  uint32_t _internal_rekey_packets() const;
  void _internal_set_rekey_packets(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.ListChild)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dpd_action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr close_action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr priority_;
  ::opi_api::security::v1::TrafficSelectors* local_ts_;
  ::opi_api::security::v1::TrafficSelectors* remote_ts_;
  uint32_t rekey_time_;
  uint32_t rekey_bytes_;
  uint32_t rekey_packets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class ListConnResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.ListConnResp) */ {
 public:
  inline ListConnResp() : ListConnResp(nullptr) {}
  ~ListConnResp() override;
  explicit constexpr ListConnResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConnResp(const ListConnResp& from);
  ListConnResp(ListConnResp&& from) noexcept
    : ListConnResp() {
    *this = ::std::move(from);
  }

  inline ListConnResp& operator=(const ListConnResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConnResp& operator=(ListConnResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConnResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConnResp* internal_default_instance() {
    return reinterpret_cast<const ListConnResp*>(
               &_ListConnResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ListConnResp& a, ListConnResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConnResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConnResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListConnResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListConnResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConnResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListConnResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConnResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.ListConnResp";
  }
  protected:
  explicit ListConnResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalAddrsFieldNumber = 2,
    kRemoteAddrsFieldNumber = 3,
    kLocalAuthFieldNumber = 12,
    kRemoteAuthFieldNumber = 13,
    kChildrenFieldNumber = 14,
    kNameFieldNumber = 1,
    kVersionFieldNumber = 4,
    kUniqueFieldNumber = 7,
    kPpkFieldNumber = 10,
    kPpkRequiredFieldNumber = 11,
    kReauthTimeFieldNumber = 5,
    kRekeyTimeFieldNumber = 6,
    kDpdDelayFieldNumber = 8,
    kDpdTimeoutFieldNumber = 9,
  };
  // repeated .opi_api.security.v1.Addrs local_addrs = 2;
  int local_addrs_size() const;
  private:
  int _internal_local_addrs_size() const;
  public:
  void clear_local_addrs();
  ::opi_api::security::v1::Addrs* mutable_local_addrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >*
      mutable_local_addrs();
  private:
  const ::opi_api::security::v1::Addrs& _internal_local_addrs(int index) const;
  ::opi_api::security::v1::Addrs* _internal_add_local_addrs();
  public:
  const ::opi_api::security::v1::Addrs& local_addrs(int index) const;
  ::opi_api::security::v1::Addrs* add_local_addrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >&
      local_addrs() const;

  // repeated .opi_api.security.v1.Addrs remote_addrs = 3;
  int remote_addrs_size() const;
  private:
  int _internal_remote_addrs_size() const;
  public:
  void clear_remote_addrs();
  ::opi_api::security::v1::Addrs* mutable_remote_addrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >*
      mutable_remote_addrs();
  private:
  const ::opi_api::security::v1::Addrs& _internal_remote_addrs(int index) const;
  ::opi_api::security::v1::Addrs* _internal_add_remote_addrs();
  public:
  const ::opi_api::security::v1::Addrs& remote_addrs(int index) const;
  ::opi_api::security::v1::Addrs* add_remote_addrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >&
      remote_addrs() const;

  // repeated .opi_api.security.v1.ListConnAuth local_auth = 12;
  int local_auth_size() const;
  private:
  int _internal_local_auth_size() const;
  public:
  void clear_local_auth();
  ::opi_api::security::v1::ListConnAuth* mutable_local_auth(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListConnAuth >*
      mutable_local_auth();
  private:
  const ::opi_api::security::v1::ListConnAuth& _internal_local_auth(int index) const;
  ::opi_api::security::v1::ListConnAuth* _internal_add_local_auth();
  public:
  const ::opi_api::security::v1::ListConnAuth& local_auth(int index) const;
  ::opi_api::security::v1::ListConnAuth* add_local_auth();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListConnAuth >&
      local_auth() const;

  // repeated .opi_api.security.v1.ListConnAuth remote_auth = 13;
  int remote_auth_size() const;
  private:
  int _internal_remote_auth_size() const;
  public:
  void clear_remote_auth();
  ::opi_api::security::v1::ListConnAuth* mutable_remote_auth(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListConnAuth >*
      mutable_remote_auth();
  private:
  const ::opi_api::security::v1::ListConnAuth& _internal_remote_auth(int index) const;
  ::opi_api::security::v1::ListConnAuth* _internal_add_remote_auth();
  public:
  const ::opi_api::security::v1::ListConnAuth& remote_auth(int index) const;
  ::opi_api::security::v1::ListConnAuth* add_remote_auth();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListConnAuth >&
      remote_auth() const;

  // repeated .opi_api.security.v1.ListChild children = 14;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::opi_api::security::v1::ListChild* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListChild >*
      mutable_children();
  private:
  const ::opi_api::security::v1::ListChild& _internal_children(int index) const;
  ::opi_api::security::v1::ListChild* _internal_add_children();
  public:
  const ::opi_api::security::v1::ListChild& children(int index) const;
  ::opi_api::security::v1::ListChild* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListChild >&
      children() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 4;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string unique = 7;
  void clear_unique();
  const std::string& unique() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unique(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unique();
  PROTOBUF_NODISCARD std::string* release_unique();
  void set_allocated_unique(std::string* unique);
  private:
  const std::string& _internal_unique() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique(const std::string& value);
  std::string* _internal_mutable_unique();
  public:

  // string ppk = 10;
  void clear_ppk();
  const std::string& ppk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ppk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ppk();
  PROTOBUF_NODISCARD std::string* release_ppk();
  void set_allocated_ppk(std::string* ppk);
  private:
  const std::string& _internal_ppk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ppk(const std::string& value);
  std::string* _internal_mutable_ppk();
  public:

  // string ppk_required = 11;
  void clear_ppk_required();
  const std::string& ppk_required() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ppk_required(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ppk_required();
  PROTOBUF_NODISCARD std::string* release_ppk_required();
  void set_allocated_ppk_required(std::string* ppk_required);
  private:
  const std::string& _internal_ppk_required() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ppk_required(const std::string& value);
  std::string* _internal_mutable_ppk_required();
  public:

  // uint32 reauth_time = 5;
  void clear_reauth_time();
  uint32_t reauth_time() const;
  void set_reauth_time(uint32_t value);
  private:
  uint32_t _internal_reauth_time() const;
  void _internal_set_reauth_time(uint32_t value);
  public:

  // uint32 rekey_time = 6;
  void clear_rekey_time();
  uint32_t rekey_time() const;
  void set_rekey_time(uint32_t value);
  private:
  uint32_t _internal_rekey_time() const;
  void _internal_set_rekey_time(uint32_t value);
  public:

  // uint32 dpd_delay = 8;
  void clear_dpd_delay();
  uint32_t dpd_delay() const;
  void set_dpd_delay(uint32_t value);
  private:
  uint32_t _internal_dpd_delay() const;
  void _internal_set_dpd_delay(uint32_t value);
  public:

  // uint32 dpd_timeout = 9;
  void clear_dpd_timeout();
  uint32_t dpd_timeout() const;
  void set_dpd_timeout(uint32_t value);
  private:
  uint32_t _internal_dpd_timeout() const;
  void _internal_set_dpd_timeout(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.ListConnResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs > local_addrs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs > remote_addrs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListConnAuth > local_auth_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListConnAuth > remote_auth_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListChild > children_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ppk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ppk_required_;
  uint32_t reauth_time_;
  uint32_t rekey_time_;
  uint32_t dpd_delay_;
  uint32_t dpd_timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecListConnsResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecListConnsResp) */ {
 public:
  inline IPsecListConnsResp() : IPsecListConnsResp(nullptr) {}
  ~IPsecListConnsResp() override;
  explicit constexpr IPsecListConnsResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecListConnsResp(const IPsecListConnsResp& from);
  IPsecListConnsResp(IPsecListConnsResp&& from) noexcept
    : IPsecListConnsResp() {
    *this = ::std::move(from);
  }

  inline IPsecListConnsResp& operator=(const IPsecListConnsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecListConnsResp& operator=(IPsecListConnsResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecListConnsResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecListConnsResp* internal_default_instance() {
    return reinterpret_cast<const IPsecListConnsResp*>(
               &_IPsecListConnsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(IPsecListConnsResp& a, IPsecListConnsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecListConnsResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecListConnsResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecListConnsResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecListConnsResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecListConnsResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecListConnsResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecListConnsResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecListConnsResp";
  }
  protected:
  explicit IPsecListConnsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionFieldNumber = 1,
  };
  // repeated .opi_api.security.v1.ListConnResp connection = 1;
  int connection_size() const;
  private:
  int _internal_connection_size() const;
  public:
  void clear_connection();
  ::opi_api::security::v1::ListConnResp* mutable_connection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListConnResp >*
      mutable_connection();
  private:
  const ::opi_api::security::v1::ListConnResp& _internal_connection(int index) const;
  ::opi_api::security::v1::ListConnResp* _internal_add_connection();
  public:
  const ::opi_api::security::v1::ListConnResp& connection(int index) const;
  ::opi_api::security::v1::ListConnResp* add_connection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListConnResp >&
      connection() const;

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecListConnsResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListConnResp > connection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecListCertsReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecListCertsReq) */ {
 public:
  inline IPsecListCertsReq() : IPsecListCertsReq(nullptr) {}
  ~IPsecListCertsReq() override;
  explicit constexpr IPsecListCertsReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecListCertsReq(const IPsecListCertsReq& from);
  IPsecListCertsReq(IPsecListCertsReq&& from) noexcept
    : IPsecListCertsReq() {
    *this = ::std::move(from);
  }

  inline IPsecListCertsReq& operator=(const IPsecListCertsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecListCertsReq& operator=(IPsecListCertsReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecListCertsReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecListCertsReq* internal_default_instance() {
    return reinterpret_cast<const IPsecListCertsReq*>(
               &_IPsecListCertsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(IPsecListCertsReq& a, IPsecListCertsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecListCertsReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecListCertsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecListCertsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecListCertsReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecListCertsReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecListCertsReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecListCertsReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecListCertsReq";
  }
  protected:
  explicit IPsecListCertsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kFlagFieldNumber = 2,
    kSubjectFieldNumber = 3,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string flag = 2;
  void clear_flag();
  const std::string& flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flag();
  PROTOBUF_NODISCARD std::string* release_flag();
  void set_allocated_flag(std::string* flag);
  private:
  const std::string& _internal_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flag(const std::string& value);
  std::string* _internal_mutable_flag();
  public:

  // string subject = 3;
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecListCertsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class ListCert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.ListCert) */ {
 public:
  inline ListCert() : ListCert(nullptr) {}
  ~ListCert() override;
  explicit constexpr ListCert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCert(const ListCert& from);
  ListCert(ListCert&& from) noexcept
    : ListCert() {
    *this = ::std::move(from);
  }

  inline ListCert& operator=(const ListCert& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCert& operator=(ListCert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCert& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCert* internal_default_instance() {
    return reinterpret_cast<const ListCert*>(
               &_ListCert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ListCert& a, ListCert& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListCert& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.ListCert";
  }
  protected:
  explicit ListCert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasprivkeyFieldNumber = 3,
    kDataFieldNumber = 4,
    kSubjectFieldNumber = 5,
    kNotbeforeFieldNumber = 6,
    kNotafterFieldNumber = 7,
    kTypeFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // string hasprivkey = 3;
  void clear_hasprivkey();
  const std::string& hasprivkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hasprivkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hasprivkey();
  PROTOBUF_NODISCARD std::string* release_hasprivkey();
  void set_allocated_hasprivkey(std::string* hasprivkey);
  private:
  const std::string& _internal_hasprivkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hasprivkey(const std::string& value);
  std::string* _internal_mutable_hasprivkey();
  public:

  // string data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string subject = 5;
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string notbefore = 6;
  void clear_notbefore();
  const std::string& notbefore() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notbefore(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notbefore();
  PROTOBUF_NODISCARD std::string* release_notbefore();
  void set_allocated_notbefore(std::string* notbefore);
  private:
  const std::string& _internal_notbefore() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notbefore(const std::string& value);
  std::string* _internal_mutable_notbefore();
  public:

  // string notafter = 7;
  void clear_notafter();
  const std::string& notafter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notafter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notafter();
  PROTOBUF_NODISCARD std::string* release_notafter();
  void set_allocated_notafter(std::string* notafter);
  private:
  const std::string& _internal_notafter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notafter(const std::string& value);
  std::string* _internal_mutable_notafter();
  public:

  // .opi_api.security.v1.CertificateType type = 1;
  void clear_type();
  ::opi_api::security::v1::CertificateType type() const;
  void set_type(::opi_api::security::v1::CertificateType value);
  private:
  ::opi_api::security::v1::CertificateType _internal_type() const;
  void _internal_set_type(::opi_api::security::v1::CertificateType value);
  public:

  // .opi_api.security.v1.X509CertificateFlag flag = 2;
  void clear_flag();
  ::opi_api::security::v1::X509CertificateFlag flag() const;
  void set_flag(::opi_api::security::v1::X509CertificateFlag value);
  private:
  ::opi_api::security::v1::X509CertificateFlag _internal_flag() const;
  void _internal_set_flag(::opi_api::security::v1::X509CertificateFlag value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.ListCert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hasprivkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notbefore_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notafter_;
  int type_;
  int flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecListCertsResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecListCertsResp) */ {
 public:
  inline IPsecListCertsResp() : IPsecListCertsResp(nullptr) {}
  ~IPsecListCertsResp() override;
  explicit constexpr IPsecListCertsResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecListCertsResp(const IPsecListCertsResp& from);
  IPsecListCertsResp(IPsecListCertsResp&& from) noexcept
    : IPsecListCertsResp() {
    *this = ::std::move(from);
  }

  inline IPsecListCertsResp& operator=(const IPsecListCertsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecListCertsResp& operator=(IPsecListCertsResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecListCertsResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecListCertsResp* internal_default_instance() {
    return reinterpret_cast<const IPsecListCertsResp*>(
               &_IPsecListCertsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(IPsecListCertsResp& a, IPsecListCertsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecListCertsResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecListCertsResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecListCertsResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecListCertsResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecListCertsResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecListCertsResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecListCertsResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecListCertsResp";
  }
  protected:
  explicit IPsecListCertsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCertsFieldNumber = 1,
  };
  // repeated .opi_api.security.v1.ListCert certs = 1;
  int certs_size() const;
  private:
  int _internal_certs_size() const;
  public:
  void clear_certs();
  ::opi_api::security::v1::ListCert* mutable_certs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListCert >*
      mutable_certs();
  private:
  const ::opi_api::security::v1::ListCert& _internal_certs(int index) const;
  ::opi_api::security::v1::ListCert* _internal_add_certs();
  public:
  const ::opi_api::security::v1::ListCert& certs(int index) const;
  ::opi_api::security::v1::ListCert* add_certs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListCert >&
      certs() const;

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecListCertsResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListCert > certs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecLoadConnReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecLoadConnReq) */ {
 public:
  inline IPsecLoadConnReq() : IPsecLoadConnReq(nullptr) {}
  ~IPsecLoadConnReq() override;
  explicit constexpr IPsecLoadConnReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecLoadConnReq(const IPsecLoadConnReq& from);
  IPsecLoadConnReq(IPsecLoadConnReq&& from) noexcept
    : IPsecLoadConnReq() {
    *this = ::std::move(from);
  }

  inline IPsecLoadConnReq& operator=(const IPsecLoadConnReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecLoadConnReq& operator=(IPsecLoadConnReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecLoadConnReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecLoadConnReq* internal_default_instance() {
    return reinterpret_cast<const IPsecLoadConnReq*>(
               &_IPsecLoadConnReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(IPsecLoadConnReq& a, IPsecLoadConnReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecLoadConnReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecLoadConnReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecLoadConnReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecLoadConnReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecLoadConnReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecLoadConnReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecLoadConnReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecLoadConnReq";
  }
  protected:
  explicit IPsecLoadConnReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionFieldNumber = 1,
  };
  // .opi_api.security.v1.Connection connection = 1;
  bool has_connection() const;
  private:
  bool _internal_has_connection() const;
  public:
  void clear_connection();
  const ::opi_api::security::v1::Connection& connection() const;
  PROTOBUF_NODISCARD ::opi_api::security::v1::Connection* release_connection();
  ::opi_api::security::v1::Connection* mutable_connection();
  void set_allocated_connection(::opi_api::security::v1::Connection* connection);
  private:
  const ::opi_api::security::v1::Connection& _internal_connection() const;
  ::opi_api::security::v1::Connection* _internal_mutable_connection();
  public:
  void unsafe_arena_set_allocated_connection(
      ::opi_api::security::v1::Connection* connection);
  ::opi_api::security::v1::Connection* unsafe_arena_release_connection();

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecLoadConnReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::security::v1::Connection* connection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecLoadConnResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecLoadConnResp) */ {
 public:
  inline IPsecLoadConnResp() : IPsecLoadConnResp(nullptr) {}
  ~IPsecLoadConnResp() override;
  explicit constexpr IPsecLoadConnResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecLoadConnResp(const IPsecLoadConnResp& from);
  IPsecLoadConnResp(IPsecLoadConnResp&& from) noexcept
    : IPsecLoadConnResp() {
    *this = ::std::move(from);
  }

  inline IPsecLoadConnResp& operator=(const IPsecLoadConnResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecLoadConnResp& operator=(IPsecLoadConnResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecLoadConnResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecLoadConnResp* internal_default_instance() {
    return reinterpret_cast<const IPsecLoadConnResp*>(
               &_IPsecLoadConnResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(IPsecLoadConnResp& a, IPsecLoadConnResp& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecLoadConnResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecLoadConnResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecLoadConnResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecLoadConnResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecLoadConnResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecLoadConnResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecLoadConnResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecLoadConnResp";
  }
  protected:
  explicit IPsecLoadConnResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // string success = 1;
  void clear_success();
  const std::string& success() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_success(ArgT0&& arg0, ArgT... args);
  std::string* mutable_success();
  PROTOBUF_NODISCARD std::string* release_success();
  void set_allocated_success(std::string* success);
  private:
  const std::string& _internal_success() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_success(const std::string& value);
  std::string* _internal_mutable_success();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecLoadConnResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecUnloadConnReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecUnloadConnReq) */ {
 public:
  inline IPsecUnloadConnReq() : IPsecUnloadConnReq(nullptr) {}
  ~IPsecUnloadConnReq() override;
  explicit constexpr IPsecUnloadConnReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecUnloadConnReq(const IPsecUnloadConnReq& from);
  IPsecUnloadConnReq(IPsecUnloadConnReq&& from) noexcept
    : IPsecUnloadConnReq() {
    *this = ::std::move(from);
  }

  inline IPsecUnloadConnReq& operator=(const IPsecUnloadConnReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecUnloadConnReq& operator=(IPsecUnloadConnReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecUnloadConnReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecUnloadConnReq* internal_default_instance() {
    return reinterpret_cast<const IPsecUnloadConnReq*>(
               &_IPsecUnloadConnReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(IPsecUnloadConnReq& a, IPsecUnloadConnReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecUnloadConnReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecUnloadConnReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecUnloadConnReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecUnloadConnReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecUnloadConnReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecUnloadConnReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecUnloadConnReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecUnloadConnReq";
  }
  protected:
  explicit IPsecUnloadConnReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecUnloadConnReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// -------------------------------------------------------------------

class IPsecUnloadConnResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.security.v1.IPsecUnloadConnResp) */ {
 public:
  inline IPsecUnloadConnResp() : IPsecUnloadConnResp(nullptr) {}
  ~IPsecUnloadConnResp() override;
  explicit constexpr IPsecUnloadConnResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPsecUnloadConnResp(const IPsecUnloadConnResp& from);
  IPsecUnloadConnResp(IPsecUnloadConnResp&& from) noexcept
    : IPsecUnloadConnResp() {
    *this = ::std::move(from);
  }

  inline IPsecUnloadConnResp& operator=(const IPsecUnloadConnResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPsecUnloadConnResp& operator=(IPsecUnloadConnResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPsecUnloadConnResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPsecUnloadConnResp* internal_default_instance() {
    return reinterpret_cast<const IPsecUnloadConnResp*>(
               &_IPsecUnloadConnResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(IPsecUnloadConnResp& a, IPsecUnloadConnResp& b) {
    a.Swap(&b);
  }
  inline void Swap(IPsecUnloadConnResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPsecUnloadConnResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPsecUnloadConnResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPsecUnloadConnResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPsecUnloadConnResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPsecUnloadConnResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPsecUnloadConnResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.security.v1.IPsecUnloadConnResp";
  }
  protected:
  explicit IPsecUnloadConnResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // string success = 1;
  void clear_success();
  const std::string& success() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_success(ArgT0&& arg0, ArgT... args);
  std::string* mutable_success();
  PROTOBUF_NODISCARD std::string* release_success();
  void set_allocated_success(std::string* success);
  private:
  const std::string& _internal_success() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_success(const std::string& value);
  std::string* _internal_mutable_success();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.security.v1.IPsecUnloadConnResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ipsec_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Proposals

// repeated .opi_api.security.v1.CryptoAlgorithm crypto_alg = 1;
inline int Proposals::_internal_crypto_alg_size() const {
  return crypto_alg_.size();
}
inline int Proposals::crypto_alg_size() const {
  return _internal_crypto_alg_size();
}
inline void Proposals::clear_crypto_alg() {
  crypto_alg_.Clear();
}
inline ::opi_api::security::v1::CryptoAlgorithm Proposals::_internal_crypto_alg(int index) const {
  return static_cast< ::opi_api::security::v1::CryptoAlgorithm >(crypto_alg_.Get(index));
}
inline ::opi_api::security::v1::CryptoAlgorithm Proposals::crypto_alg(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Proposals.crypto_alg)
  return _internal_crypto_alg(index);
}
inline void Proposals::set_crypto_alg(int index, ::opi_api::security::v1::CryptoAlgorithm value) {
  crypto_alg_.Set(index, value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Proposals.crypto_alg)
}
inline void Proposals::_internal_add_crypto_alg(::opi_api::security::v1::CryptoAlgorithm value) {
  crypto_alg_.Add(value);
}
inline void Proposals::add_crypto_alg(::opi_api::security::v1::CryptoAlgorithm value) {
  _internal_add_crypto_alg(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.Proposals.crypto_alg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Proposals::crypto_alg() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.Proposals.crypto_alg)
  return crypto_alg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Proposals::_internal_mutable_crypto_alg() {
  return &crypto_alg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Proposals::mutable_crypto_alg() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.Proposals.crypto_alg)
  return _internal_mutable_crypto_alg();
}

// repeated .opi_api.security.v1.IntegAlgorithm integ_alg = 2;
inline int Proposals::_internal_integ_alg_size() const {
  return integ_alg_.size();
}
inline int Proposals::integ_alg_size() const {
  return _internal_integ_alg_size();
}
inline void Proposals::clear_integ_alg() {
  integ_alg_.Clear();
}
inline ::opi_api::security::v1::IntegAlgorithm Proposals::_internal_integ_alg(int index) const {
  return static_cast< ::opi_api::security::v1::IntegAlgorithm >(integ_alg_.Get(index));
}
inline ::opi_api::security::v1::IntegAlgorithm Proposals::integ_alg(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Proposals.integ_alg)
  return _internal_integ_alg(index);
}
inline void Proposals::set_integ_alg(int index, ::opi_api::security::v1::IntegAlgorithm value) {
  integ_alg_.Set(index, value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Proposals.integ_alg)
}
inline void Proposals::_internal_add_integ_alg(::opi_api::security::v1::IntegAlgorithm value) {
  integ_alg_.Add(value);
}
inline void Proposals::add_integ_alg(::opi_api::security::v1::IntegAlgorithm value) {
  _internal_add_integ_alg(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.Proposals.integ_alg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Proposals::integ_alg() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.Proposals.integ_alg)
  return integ_alg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Proposals::_internal_mutable_integ_alg() {
  return &integ_alg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Proposals::mutable_integ_alg() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.Proposals.integ_alg)
  return _internal_mutable_integ_alg();
}

// repeated .opi_api.security.v1.PseudoRandomFunction prf = 3;
inline int Proposals::_internal_prf_size() const {
  return prf_.size();
}
inline int Proposals::prf_size() const {
  return _internal_prf_size();
}
inline void Proposals::clear_prf() {
  prf_.Clear();
}
inline ::opi_api::security::v1::PseudoRandomFunction Proposals::_internal_prf(int index) const {
  return static_cast< ::opi_api::security::v1::PseudoRandomFunction >(prf_.Get(index));
}
inline ::opi_api::security::v1::PseudoRandomFunction Proposals::prf(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Proposals.prf)
  return _internal_prf(index);
}
inline void Proposals::set_prf(int index, ::opi_api::security::v1::PseudoRandomFunction value) {
  prf_.Set(index, value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Proposals.prf)
}
inline void Proposals::_internal_add_prf(::opi_api::security::v1::PseudoRandomFunction value) {
  prf_.Add(value);
}
inline void Proposals::add_prf(::opi_api::security::v1::PseudoRandomFunction value) {
  _internal_add_prf(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.Proposals.prf)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Proposals::prf() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.Proposals.prf)
  return prf_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Proposals::_internal_mutable_prf() {
  return &prf_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Proposals::mutable_prf() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.Proposals.prf)
  return _internal_mutable_prf();
}

// repeated .opi_api.security.v1.DiffieHellmanGroups dhgroups = 4;
inline int Proposals::_internal_dhgroups_size() const {
  return dhgroups_.size();
}
inline int Proposals::dhgroups_size() const {
  return _internal_dhgroups_size();
}
inline void Proposals::clear_dhgroups() {
  dhgroups_.Clear();
}
inline ::opi_api::security::v1::DiffieHellmanGroups Proposals::_internal_dhgroups(int index) const {
  return static_cast< ::opi_api::security::v1::DiffieHellmanGroups >(dhgroups_.Get(index));
}
inline ::opi_api::security::v1::DiffieHellmanGroups Proposals::dhgroups(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Proposals.dhgroups)
  return _internal_dhgroups(index);
}
inline void Proposals::set_dhgroups(int index, ::opi_api::security::v1::DiffieHellmanGroups value) {
  dhgroups_.Set(index, value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Proposals.dhgroups)
}
inline void Proposals::_internal_add_dhgroups(::opi_api::security::v1::DiffieHellmanGroups value) {
  dhgroups_.Add(value);
}
inline void Proposals::add_dhgroups(::opi_api::security::v1::DiffieHellmanGroups value) {
  _internal_add_dhgroups(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.Proposals.dhgroups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Proposals::dhgroups() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.Proposals.dhgroups)
  return dhgroups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Proposals::_internal_mutable_dhgroups() {
  return &dhgroups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Proposals::mutable_dhgroups() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.Proposals.dhgroups)
  return _internal_mutable_dhgroups();
}

// -------------------------------------------------------------------

// Vips

// repeated string vip = 1;
inline int Vips::_internal_vip_size() const {
  return vip_.size();
}
inline int Vips::vip_size() const {
  return _internal_vip_size();
}
inline void Vips::clear_vip() {
  vip_.Clear();
}
inline std::string* Vips::add_vip() {
  std::string* _s = _internal_add_vip();
  // @@protoc_insertion_point(field_add_mutable:opi_api.security.v1.Vips.vip)
  return _s;
}
inline const std::string& Vips::_internal_vip(int index) const {
  return vip_.Get(index);
}
inline const std::string& Vips::vip(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Vips.vip)
  return _internal_vip(index);
}
inline std::string* Vips::mutable_vip(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Vips.vip)
  return vip_.Mutable(index);
}
inline void Vips::set_vip(int index, const std::string& value) {
  vip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Vips.vip)
}
inline void Vips::set_vip(int index, std::string&& value) {
  vip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Vips.vip)
}
inline void Vips::set_vip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.security.v1.Vips.vip)
}
inline void Vips::set_vip(int index, const char* value, size_t size) {
  vip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.security.v1.Vips.vip)
}
inline std::string* Vips::_internal_add_vip() {
  return vip_.Add();
}
inline void Vips::add_vip(const std::string& value) {
  vip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.Vips.vip)
}
inline void Vips::add_vip(std::string&& value) {
  vip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.security.v1.Vips.vip)
}
inline void Vips::add_vip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.security.v1.Vips.vip)
}
inline void Vips::add_vip(const char* value, size_t size) {
  vip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.security.v1.Vips.vip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Vips::vip() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.Vips.vip)
  return vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Vips::mutable_vip() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.Vips.vip)
  return &vip_;
}

// -------------------------------------------------------------------

// Pools

// repeated string pool = 1;
inline int Pools::_internal_pool_size() const {
  return pool_.size();
}
inline int Pools::pool_size() const {
  return _internal_pool_size();
}
inline void Pools::clear_pool() {
  pool_.Clear();
}
inline std::string* Pools::add_pool() {
  std::string* _s = _internal_add_pool();
  // @@protoc_insertion_point(field_add_mutable:opi_api.security.v1.Pools.pool)
  return _s;
}
inline const std::string& Pools::_internal_pool(int index) const {
  return pool_.Get(index);
}
inline const std::string& Pools::pool(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Pools.pool)
  return _internal_pool(index);
}
inline std::string* Pools::mutable_pool(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Pools.pool)
  return pool_.Mutable(index);
}
inline void Pools::set_pool(int index, const std::string& value) {
  pool_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Pools.pool)
}
inline void Pools::set_pool(int index, std::string&& value) {
  pool_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Pools.pool)
}
inline void Pools::set_pool(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pool_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.security.v1.Pools.pool)
}
inline void Pools::set_pool(int index, const char* value, size_t size) {
  pool_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.security.v1.Pools.pool)
}
inline std::string* Pools::_internal_add_pool() {
  return pool_.Add();
}
inline void Pools::add_pool(const std::string& value) {
  pool_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.Pools.pool)
}
inline void Pools::add_pool(std::string&& value) {
  pool_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.security.v1.Pools.pool)
}
inline void Pools::add_pool(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pool_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.security.v1.Pools.pool)
}
inline void Pools::add_pool(const char* value, size_t size) {
  pool_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.security.v1.Pools.pool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Pools::pool() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.Pools.pool)
  return pool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Pools::mutable_pool() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.Pools.pool)
  return &pool_;
}

// -------------------------------------------------------------------

// Certs

// repeated string cert = 1;
inline int Certs::_internal_cert_size() const {
  return cert_.size();
}
inline int Certs::cert_size() const {
  return _internal_cert_size();
}
inline void Certs::clear_cert() {
  cert_.Clear();
}
inline std::string* Certs::add_cert() {
  std::string* _s = _internal_add_cert();
  // @@protoc_insertion_point(field_add_mutable:opi_api.security.v1.Certs.cert)
  return _s;
}
inline const std::string& Certs::_internal_cert(int index) const {
  return cert_.Get(index);
}
inline const std::string& Certs::cert(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Certs.cert)
  return _internal_cert(index);
}
inline std::string* Certs::mutable_cert(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Certs.cert)
  return cert_.Mutable(index);
}
inline void Certs::set_cert(int index, const std::string& value) {
  cert_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Certs.cert)
}
inline void Certs::set_cert(int index, std::string&& value) {
  cert_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Certs.cert)
}
inline void Certs::set_cert(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cert_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.security.v1.Certs.cert)
}
inline void Certs::set_cert(int index, const char* value, size_t size) {
  cert_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.security.v1.Certs.cert)
}
inline std::string* Certs::_internal_add_cert() {
  return cert_.Add();
}
inline void Certs::add_cert(const std::string& value) {
  cert_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.Certs.cert)
}
inline void Certs::add_cert(std::string&& value) {
  cert_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.security.v1.Certs.cert)
}
inline void Certs::add_cert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cert_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.security.v1.Certs.cert)
}
inline void Certs::add_cert(const char* value, size_t size) {
  cert_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.security.v1.Certs.cert)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Certs::cert() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.Certs.cert)
  return cert_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Certs::mutable_cert() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.Certs.cert)
  return &cert_;
}

// -------------------------------------------------------------------

// PubKeys

// repeated string pubkey = 1;
inline int PubKeys::_internal_pubkey_size() const {
  return pubkey_.size();
}
inline int PubKeys::pubkey_size() const {
  return _internal_pubkey_size();
}
inline void PubKeys::clear_pubkey() {
  pubkey_.Clear();
}
inline std::string* PubKeys::add_pubkey() {
  std::string* _s = _internal_add_pubkey();
  // @@protoc_insertion_point(field_add_mutable:opi_api.security.v1.PubKeys.pubkey)
  return _s;
}
inline const std::string& PubKeys::_internal_pubkey(int index) const {
  return pubkey_.Get(index);
}
inline const std::string& PubKeys::pubkey(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.PubKeys.pubkey)
  return _internal_pubkey(index);
}
inline std::string* PubKeys::mutable_pubkey(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.PubKeys.pubkey)
  return pubkey_.Mutable(index);
}
inline void PubKeys::set_pubkey(int index, const std::string& value) {
  pubkey_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.PubKeys.pubkey)
}
inline void PubKeys::set_pubkey(int index, std::string&& value) {
  pubkey_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.security.v1.PubKeys.pubkey)
}
inline void PubKeys::set_pubkey(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pubkey_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.security.v1.PubKeys.pubkey)
}
inline void PubKeys::set_pubkey(int index, const char* value, size_t size) {
  pubkey_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.security.v1.PubKeys.pubkey)
}
inline std::string* PubKeys::_internal_add_pubkey() {
  return pubkey_.Add();
}
inline void PubKeys::add_pubkey(const std::string& value) {
  pubkey_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.PubKeys.pubkey)
}
inline void PubKeys::add_pubkey(std::string&& value) {
  pubkey_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.security.v1.PubKeys.pubkey)
}
inline void PubKeys::add_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pubkey_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.security.v1.PubKeys.pubkey)
}
inline void PubKeys::add_pubkey(const char* value, size_t size) {
  pubkey_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.security.v1.PubKeys.pubkey)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PubKeys::pubkey() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.PubKeys.pubkey)
  return pubkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PubKeys::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.PubKeys.pubkey)
  return &pubkey_;
}

// -------------------------------------------------------------------

// Groups

// repeated string group = 1;
inline int Groups::_internal_group_size() const {
  return group_.size();
}
inline int Groups::group_size() const {
  return _internal_group_size();
}
inline void Groups::clear_group() {
  group_.Clear();
}
inline std::string* Groups::add_group() {
  std::string* _s = _internal_add_group();
  // @@protoc_insertion_point(field_add_mutable:opi_api.security.v1.Groups.group)
  return _s;
}
inline const std::string& Groups::_internal_group(int index) const {
  return group_.Get(index);
}
inline const std::string& Groups::group(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Groups.group)
  return _internal_group(index);
}
inline std::string* Groups::mutable_group(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Groups.group)
  return group_.Mutable(index);
}
inline void Groups::set_group(int index, const std::string& value) {
  group_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Groups.group)
}
inline void Groups::set_group(int index, std::string&& value) {
  group_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Groups.group)
}
inline void Groups::set_group(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.security.v1.Groups.group)
}
inline void Groups::set_group(int index, const char* value, size_t size) {
  group_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.security.v1.Groups.group)
}
inline std::string* Groups::_internal_add_group() {
  return group_.Add();
}
inline void Groups::add_group(const std::string& value) {
  group_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.Groups.group)
}
inline void Groups::add_group(std::string&& value) {
  group_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.security.v1.Groups.group)
}
inline void Groups::add_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.security.v1.Groups.group)
}
inline void Groups::add_group(const char* value, size_t size) {
  group_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.security.v1.Groups.group)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Groups::group() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.Groups.group)
  return group_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Groups::mutable_group() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.Groups.group)
  return &group_;
}

// -------------------------------------------------------------------

// CertPolicy

// repeated string cert_policy = 1;
inline int CertPolicy::_internal_cert_policy_size() const {
  return cert_policy_.size();
}
inline int CertPolicy::cert_policy_size() const {
  return _internal_cert_policy_size();
}
inline void CertPolicy::clear_cert_policy() {
  cert_policy_.Clear();
}
inline std::string* CertPolicy::add_cert_policy() {
  std::string* _s = _internal_add_cert_policy();
  // @@protoc_insertion_point(field_add_mutable:opi_api.security.v1.CertPolicy.cert_policy)
  return _s;
}
inline const std::string& CertPolicy::_internal_cert_policy(int index) const {
  return cert_policy_.Get(index);
}
inline const std::string& CertPolicy::cert_policy(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.CertPolicy.cert_policy)
  return _internal_cert_policy(index);
}
inline std::string* CertPolicy::mutable_cert_policy(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.CertPolicy.cert_policy)
  return cert_policy_.Mutable(index);
}
inline void CertPolicy::set_cert_policy(int index, const std::string& value) {
  cert_policy_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.CertPolicy.cert_policy)
}
inline void CertPolicy::set_cert_policy(int index, std::string&& value) {
  cert_policy_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.security.v1.CertPolicy.cert_policy)
}
inline void CertPolicy::set_cert_policy(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cert_policy_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.security.v1.CertPolicy.cert_policy)
}
inline void CertPolicy::set_cert_policy(int index, const char* value, size_t size) {
  cert_policy_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.security.v1.CertPolicy.cert_policy)
}
inline std::string* CertPolicy::_internal_add_cert_policy() {
  return cert_policy_.Add();
}
inline void CertPolicy::add_cert_policy(const std::string& value) {
  cert_policy_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.CertPolicy.cert_policy)
}
inline void CertPolicy::add_cert_policy(std::string&& value) {
  cert_policy_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.security.v1.CertPolicy.cert_policy)
}
inline void CertPolicy::add_cert_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cert_policy_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.security.v1.CertPolicy.cert_policy)
}
inline void CertPolicy::add_cert_policy(const char* value, size_t size) {
  cert_policy_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.security.v1.CertPolicy.cert_policy)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CertPolicy::cert_policy() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.CertPolicy.cert_policy)
  return cert_policy_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CertPolicy::mutable_cert_policy() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.CertPolicy.cert_policy)
  return &cert_policy_;
}

// -------------------------------------------------------------------

// CaCerts

// repeated string cacert = 1;
inline int CaCerts::_internal_cacert_size() const {
  return cacert_.size();
}
inline int CaCerts::cacert_size() const {
  return _internal_cacert_size();
}
inline void CaCerts::clear_cacert() {
  cacert_.Clear();
}
inline std::string* CaCerts::add_cacert() {
  std::string* _s = _internal_add_cacert();
  // @@protoc_insertion_point(field_add_mutable:opi_api.security.v1.CaCerts.cacert)
  return _s;
}
inline const std::string& CaCerts::_internal_cacert(int index) const {
  return cacert_.Get(index);
}
inline const std::string& CaCerts::cacert(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.CaCerts.cacert)
  return _internal_cacert(index);
}
inline std::string* CaCerts::mutable_cacert(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.CaCerts.cacert)
  return cacert_.Mutable(index);
}
inline void CaCerts::set_cacert(int index, const std::string& value) {
  cacert_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.CaCerts.cacert)
}
inline void CaCerts::set_cacert(int index, std::string&& value) {
  cacert_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.security.v1.CaCerts.cacert)
}
inline void CaCerts::set_cacert(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cacert_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.security.v1.CaCerts.cacert)
}
inline void CaCerts::set_cacert(int index, const char* value, size_t size) {
  cacert_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.security.v1.CaCerts.cacert)
}
inline std::string* CaCerts::_internal_add_cacert() {
  return cacert_.Add();
}
inline void CaCerts::add_cacert(const std::string& value) {
  cacert_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.CaCerts.cacert)
}
inline void CaCerts::add_cacert(std::string&& value) {
  cacert_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.security.v1.CaCerts.cacert)
}
inline void CaCerts::add_cacert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cacert_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.security.v1.CaCerts.cacert)
}
inline void CaCerts::add_cacert(const char* value, size_t size) {
  cacert_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.security.v1.CaCerts.cacert)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CaCerts::cacert() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.CaCerts.cacert)
  return cacert_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CaCerts::mutable_cacert() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.CaCerts.cacert)
  return &cacert_;
}

// -------------------------------------------------------------------

// LocalAuth

// .opi_api.security.v1.AuthType auth = 1;
inline void LocalAuth::clear_auth() {
  auth_ = 0;
}
inline ::opi_api::security::v1::AuthType LocalAuth::_internal_auth() const {
  return static_cast< ::opi_api::security::v1::AuthType >(auth_);
}
inline ::opi_api::security::v1::AuthType LocalAuth::auth() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.LocalAuth.auth)
  return _internal_auth();
}
inline void LocalAuth::_internal_set_auth(::opi_api::security::v1::AuthType value) {
  
  auth_ = value;
}
inline void LocalAuth::set_auth(::opi_api::security::v1::AuthType value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.LocalAuth.auth)
}

// string id = 2;
inline void LocalAuth::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& LocalAuth::id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.LocalAuth.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalAuth::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.LocalAuth.id)
}
inline std::string* LocalAuth::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.LocalAuth.id)
  return _s;
}
inline const std::string& LocalAuth::_internal_id() const {
  return id_.Get();
}
inline void LocalAuth::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocalAuth::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocalAuth::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.LocalAuth.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocalAuth::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.LocalAuth.id)
}

// string eap_id = 3;
inline void LocalAuth::clear_eap_id() {
  eap_id_.ClearToEmpty();
}
inline const std::string& LocalAuth::eap_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.LocalAuth.eap_id)
  return _internal_eap_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalAuth::set_eap_id(ArgT0&& arg0, ArgT... args) {
 
 eap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.LocalAuth.eap_id)
}
inline std::string* LocalAuth::mutable_eap_id() {
  std::string* _s = _internal_mutable_eap_id();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.LocalAuth.eap_id)
  return _s;
}
inline const std::string& LocalAuth::_internal_eap_id() const {
  return eap_id_.Get();
}
inline void LocalAuth::_internal_set_eap_id(const std::string& value) {
  
  eap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocalAuth::_internal_mutable_eap_id() {
  
  return eap_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocalAuth::release_eap_id() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.LocalAuth.eap_id)
  return eap_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocalAuth::set_allocated_eap_id(std::string* eap_id) {
  if (eap_id != nullptr) {
    
  } else {
    
  }
  eap_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eap_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (eap_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    eap_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.LocalAuth.eap_id)
}

// string aaa_id = 4;
inline void LocalAuth::clear_aaa_id() {
  aaa_id_.ClearToEmpty();
}
inline const std::string& LocalAuth::aaa_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.LocalAuth.aaa_id)
  return _internal_aaa_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalAuth::set_aaa_id(ArgT0&& arg0, ArgT... args) {
 
 aaa_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.LocalAuth.aaa_id)
}
inline std::string* LocalAuth::mutable_aaa_id() {
  std::string* _s = _internal_mutable_aaa_id();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.LocalAuth.aaa_id)
  return _s;
}
inline const std::string& LocalAuth::_internal_aaa_id() const {
  return aaa_id_.Get();
}
inline void LocalAuth::_internal_set_aaa_id(const std::string& value) {
  
  aaa_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocalAuth::_internal_mutable_aaa_id() {
  
  return aaa_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocalAuth::release_aaa_id() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.LocalAuth.aaa_id)
  return aaa_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocalAuth::set_allocated_aaa_id(std::string* aaa_id) {
  if (aaa_id != nullptr) {
    
  } else {
    
  }
  aaa_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aaa_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (aaa_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    aaa_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.LocalAuth.aaa_id)
}

// string xauth_id = 5;
inline void LocalAuth::clear_xauth_id() {
  xauth_id_.ClearToEmpty();
}
inline const std::string& LocalAuth::xauth_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.LocalAuth.xauth_id)
  return _internal_xauth_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalAuth::set_xauth_id(ArgT0&& arg0, ArgT... args) {
 
 xauth_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.LocalAuth.xauth_id)
}
inline std::string* LocalAuth::mutable_xauth_id() {
  std::string* _s = _internal_mutable_xauth_id();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.LocalAuth.xauth_id)
  return _s;
}
inline const std::string& LocalAuth::_internal_xauth_id() const {
  return xauth_id_.Get();
}
inline void LocalAuth::_internal_set_xauth_id(const std::string& value) {
  
  xauth_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LocalAuth::_internal_mutable_xauth_id() {
  
  return xauth_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LocalAuth::release_xauth_id() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.LocalAuth.xauth_id)
  return xauth_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LocalAuth::set_allocated_xauth_id(std::string* xauth_id) {
  if (xauth_id != nullptr) {
    
  } else {
    
  }
  xauth_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xauth_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (xauth_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    xauth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.LocalAuth.xauth_id)
}

// .opi_api.security.v1.Certs certs = 6;
inline bool LocalAuth::_internal_has_certs() const {
  return this != internal_default_instance() && certs_ != nullptr;
}
inline bool LocalAuth::has_certs() const {
  return _internal_has_certs();
}
inline void LocalAuth::clear_certs() {
  if (GetArenaForAllocation() == nullptr && certs_ != nullptr) {
    delete certs_;
  }
  certs_ = nullptr;
}
inline const ::opi_api::security::v1::Certs& LocalAuth::_internal_certs() const {
  const ::opi_api::security::v1::Certs* p = certs_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::Certs&>(
      ::opi_api::security::v1::_Certs_default_instance_);
}
inline const ::opi_api::security::v1::Certs& LocalAuth::certs() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.LocalAuth.certs)
  return _internal_certs();
}
inline void LocalAuth::unsafe_arena_set_allocated_certs(
    ::opi_api::security::v1::Certs* certs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(certs_);
  }
  certs_ = certs;
  if (certs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.LocalAuth.certs)
}
inline ::opi_api::security::v1::Certs* LocalAuth::release_certs() {
  
  ::opi_api::security::v1::Certs* temp = certs_;
  certs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::Certs* LocalAuth::unsafe_arena_release_certs() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.LocalAuth.certs)
  
  ::opi_api::security::v1::Certs* temp = certs_;
  certs_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::Certs* LocalAuth::_internal_mutable_certs() {
  
  if (certs_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::Certs>(GetArenaForAllocation());
    certs_ = p;
  }
  return certs_;
}
inline ::opi_api::security::v1::Certs* LocalAuth::mutable_certs() {
  ::opi_api::security::v1::Certs* _msg = _internal_mutable_certs();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.LocalAuth.certs)
  return _msg;
}
inline void LocalAuth::set_allocated_certs(::opi_api::security::v1::Certs* certs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete certs_;
  }
  if (certs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::Certs>::GetOwningArena(certs);
    if (message_arena != submessage_arena) {
      certs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, certs, submessage_arena);
    }
    
  } else {
    
  }
  certs_ = certs;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.LocalAuth.certs)
}

// .opi_api.security.v1.PubKeys pubkeys = 7;
inline bool LocalAuth::_internal_has_pubkeys() const {
  return this != internal_default_instance() && pubkeys_ != nullptr;
}
inline bool LocalAuth::has_pubkeys() const {
  return _internal_has_pubkeys();
}
inline void LocalAuth::clear_pubkeys() {
  if (GetArenaForAllocation() == nullptr && pubkeys_ != nullptr) {
    delete pubkeys_;
  }
  pubkeys_ = nullptr;
}
inline const ::opi_api::security::v1::PubKeys& LocalAuth::_internal_pubkeys() const {
  const ::opi_api::security::v1::PubKeys* p = pubkeys_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::PubKeys&>(
      ::opi_api::security::v1::_PubKeys_default_instance_);
}
inline const ::opi_api::security::v1::PubKeys& LocalAuth::pubkeys() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.LocalAuth.pubkeys)
  return _internal_pubkeys();
}
inline void LocalAuth::unsafe_arena_set_allocated_pubkeys(
    ::opi_api::security::v1::PubKeys* pubkeys) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pubkeys_);
  }
  pubkeys_ = pubkeys;
  if (pubkeys) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.LocalAuth.pubkeys)
}
inline ::opi_api::security::v1::PubKeys* LocalAuth::release_pubkeys() {
  
  ::opi_api::security::v1::PubKeys* temp = pubkeys_;
  pubkeys_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::PubKeys* LocalAuth::unsafe_arena_release_pubkeys() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.LocalAuth.pubkeys)
  
  ::opi_api::security::v1::PubKeys* temp = pubkeys_;
  pubkeys_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::PubKeys* LocalAuth::_internal_mutable_pubkeys() {
  
  if (pubkeys_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::PubKeys>(GetArenaForAllocation());
    pubkeys_ = p;
  }
  return pubkeys_;
}
inline ::opi_api::security::v1::PubKeys* LocalAuth::mutable_pubkeys() {
  ::opi_api::security::v1::PubKeys* _msg = _internal_mutable_pubkeys();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.LocalAuth.pubkeys)
  return _msg;
}
inline void LocalAuth::set_allocated_pubkeys(::opi_api::security::v1::PubKeys* pubkeys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pubkeys_;
  }
  if (pubkeys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::PubKeys>::GetOwningArena(pubkeys);
    if (message_arena != submessage_arena) {
      pubkeys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pubkeys, submessage_arena);
    }
    
  } else {
    
  }
  pubkeys_ = pubkeys;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.LocalAuth.pubkeys)
}

// -------------------------------------------------------------------

// RemoteAuth

// .opi_api.security.v1.AuthType auth = 1;
inline void RemoteAuth::clear_auth() {
  auth_ = 0;
}
inline ::opi_api::security::v1::AuthType RemoteAuth::_internal_auth() const {
  return static_cast< ::opi_api::security::v1::AuthType >(auth_);
}
inline ::opi_api::security::v1::AuthType RemoteAuth::auth() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.RemoteAuth.auth)
  return _internal_auth();
}
inline void RemoteAuth::_internal_set_auth(::opi_api::security::v1::AuthType value) {
  
  auth_ = value;
}
inline void RemoteAuth::set_auth(::opi_api::security::v1::AuthType value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.RemoteAuth.auth)
}

// string id = 2;
inline void RemoteAuth::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& RemoteAuth::id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.RemoteAuth.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoteAuth::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.RemoteAuth.id)
}
inline std::string* RemoteAuth::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.RemoteAuth.id)
  return _s;
}
inline const std::string& RemoteAuth::_internal_id() const {
  return id_.Get();
}
inline void RemoteAuth::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RemoteAuth::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RemoteAuth::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.RemoteAuth.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RemoteAuth::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.RemoteAuth.id)
}

// string eap_id = 3;
inline void RemoteAuth::clear_eap_id() {
  eap_id_.ClearToEmpty();
}
inline const std::string& RemoteAuth::eap_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.RemoteAuth.eap_id)
  return _internal_eap_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoteAuth::set_eap_id(ArgT0&& arg0, ArgT... args) {
 
 eap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.RemoteAuth.eap_id)
}
inline std::string* RemoteAuth::mutable_eap_id() {
  std::string* _s = _internal_mutable_eap_id();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.RemoteAuth.eap_id)
  return _s;
}
inline const std::string& RemoteAuth::_internal_eap_id() const {
  return eap_id_.Get();
}
inline void RemoteAuth::_internal_set_eap_id(const std::string& value) {
  
  eap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RemoteAuth::_internal_mutable_eap_id() {
  
  return eap_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RemoteAuth::release_eap_id() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.RemoteAuth.eap_id)
  return eap_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RemoteAuth::set_allocated_eap_id(std::string* eap_id) {
  if (eap_id != nullptr) {
    
  } else {
    
  }
  eap_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eap_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (eap_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    eap_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.RemoteAuth.eap_id)
}

// .opi_api.security.v1.Groups groups = 4;
inline bool RemoteAuth::_internal_has_groups() const {
  return this != internal_default_instance() && groups_ != nullptr;
}
inline bool RemoteAuth::has_groups() const {
  return _internal_has_groups();
}
inline void RemoteAuth::clear_groups() {
  if (GetArenaForAllocation() == nullptr && groups_ != nullptr) {
    delete groups_;
  }
  groups_ = nullptr;
}
inline const ::opi_api::security::v1::Groups& RemoteAuth::_internal_groups() const {
  const ::opi_api::security::v1::Groups* p = groups_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::Groups&>(
      ::opi_api::security::v1::_Groups_default_instance_);
}
inline const ::opi_api::security::v1::Groups& RemoteAuth::groups() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.RemoteAuth.groups)
  return _internal_groups();
}
inline void RemoteAuth::unsafe_arena_set_allocated_groups(
    ::opi_api::security::v1::Groups* groups) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(groups_);
  }
  groups_ = groups;
  if (groups) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.RemoteAuth.groups)
}
inline ::opi_api::security::v1::Groups* RemoteAuth::release_groups() {
  
  ::opi_api::security::v1::Groups* temp = groups_;
  groups_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::Groups* RemoteAuth::unsafe_arena_release_groups() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.RemoteAuth.groups)
  
  ::opi_api::security::v1::Groups* temp = groups_;
  groups_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::Groups* RemoteAuth::_internal_mutable_groups() {
  
  if (groups_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::Groups>(GetArenaForAllocation());
    groups_ = p;
  }
  return groups_;
}
inline ::opi_api::security::v1::Groups* RemoteAuth::mutable_groups() {
  ::opi_api::security::v1::Groups* _msg = _internal_mutable_groups();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.RemoteAuth.groups)
  return _msg;
}
inline void RemoteAuth::set_allocated_groups(::opi_api::security::v1::Groups* groups) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete groups_;
  }
  if (groups) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::Groups>::GetOwningArena(groups);
    if (message_arena != submessage_arena) {
      groups = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groups, submessage_arena);
    }
    
  } else {
    
  }
  groups_ = groups;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.RemoteAuth.groups)
}

// .opi_api.security.v1.CertPolicy cert_policy = 5;
inline bool RemoteAuth::_internal_has_cert_policy() const {
  return this != internal_default_instance() && cert_policy_ != nullptr;
}
inline bool RemoteAuth::has_cert_policy() const {
  return _internal_has_cert_policy();
}
inline void RemoteAuth::clear_cert_policy() {
  if (GetArenaForAllocation() == nullptr && cert_policy_ != nullptr) {
    delete cert_policy_;
  }
  cert_policy_ = nullptr;
}
inline const ::opi_api::security::v1::CertPolicy& RemoteAuth::_internal_cert_policy() const {
  const ::opi_api::security::v1::CertPolicy* p = cert_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::CertPolicy&>(
      ::opi_api::security::v1::_CertPolicy_default_instance_);
}
inline const ::opi_api::security::v1::CertPolicy& RemoteAuth::cert_policy() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.RemoteAuth.cert_policy)
  return _internal_cert_policy();
}
inline void RemoteAuth::unsafe_arena_set_allocated_cert_policy(
    ::opi_api::security::v1::CertPolicy* cert_policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cert_policy_);
  }
  cert_policy_ = cert_policy;
  if (cert_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.RemoteAuth.cert_policy)
}
inline ::opi_api::security::v1::CertPolicy* RemoteAuth::release_cert_policy() {
  
  ::opi_api::security::v1::CertPolicy* temp = cert_policy_;
  cert_policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::CertPolicy* RemoteAuth::unsafe_arena_release_cert_policy() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.RemoteAuth.cert_policy)
  
  ::opi_api::security::v1::CertPolicy* temp = cert_policy_;
  cert_policy_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::CertPolicy* RemoteAuth::_internal_mutable_cert_policy() {
  
  if (cert_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::CertPolicy>(GetArenaForAllocation());
    cert_policy_ = p;
  }
  return cert_policy_;
}
inline ::opi_api::security::v1::CertPolicy* RemoteAuth::mutable_cert_policy() {
  ::opi_api::security::v1::CertPolicy* _msg = _internal_mutable_cert_policy();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.RemoteAuth.cert_policy)
  return _msg;
}
inline void RemoteAuth::set_allocated_cert_policy(::opi_api::security::v1::CertPolicy* cert_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cert_policy_;
  }
  if (cert_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::CertPolicy>::GetOwningArena(cert_policy);
    if (message_arena != submessage_arena) {
      cert_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cert_policy, submessage_arena);
    }
    
  } else {
    
  }
  cert_policy_ = cert_policy;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.RemoteAuth.cert_policy)
}

// .opi_api.security.v1.Certs certs = 6;
inline bool RemoteAuth::_internal_has_certs() const {
  return this != internal_default_instance() && certs_ != nullptr;
}
inline bool RemoteAuth::has_certs() const {
  return _internal_has_certs();
}
inline void RemoteAuth::clear_certs() {
  if (GetArenaForAllocation() == nullptr && certs_ != nullptr) {
    delete certs_;
  }
  certs_ = nullptr;
}
inline const ::opi_api::security::v1::Certs& RemoteAuth::_internal_certs() const {
  const ::opi_api::security::v1::Certs* p = certs_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::Certs&>(
      ::opi_api::security::v1::_Certs_default_instance_);
}
inline const ::opi_api::security::v1::Certs& RemoteAuth::certs() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.RemoteAuth.certs)
  return _internal_certs();
}
inline void RemoteAuth::unsafe_arena_set_allocated_certs(
    ::opi_api::security::v1::Certs* certs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(certs_);
  }
  certs_ = certs;
  if (certs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.RemoteAuth.certs)
}
inline ::opi_api::security::v1::Certs* RemoteAuth::release_certs() {
  
  ::opi_api::security::v1::Certs* temp = certs_;
  certs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::Certs* RemoteAuth::unsafe_arena_release_certs() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.RemoteAuth.certs)
  
  ::opi_api::security::v1::Certs* temp = certs_;
  certs_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::Certs* RemoteAuth::_internal_mutable_certs() {
  
  if (certs_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::Certs>(GetArenaForAllocation());
    certs_ = p;
  }
  return certs_;
}
inline ::opi_api::security::v1::Certs* RemoteAuth::mutable_certs() {
  ::opi_api::security::v1::Certs* _msg = _internal_mutable_certs();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.RemoteAuth.certs)
  return _msg;
}
inline void RemoteAuth::set_allocated_certs(::opi_api::security::v1::Certs* certs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete certs_;
  }
  if (certs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::Certs>::GetOwningArena(certs);
    if (message_arena != submessage_arena) {
      certs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, certs, submessage_arena);
    }
    
  } else {
    
  }
  certs_ = certs;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.RemoteAuth.certs)
}

// .opi_api.security.v1.CaCerts ca_certs = 7;
inline bool RemoteAuth::_internal_has_ca_certs() const {
  return this != internal_default_instance() && ca_certs_ != nullptr;
}
inline bool RemoteAuth::has_ca_certs() const {
  return _internal_has_ca_certs();
}
inline void RemoteAuth::clear_ca_certs() {
  if (GetArenaForAllocation() == nullptr && ca_certs_ != nullptr) {
    delete ca_certs_;
  }
  ca_certs_ = nullptr;
}
inline const ::opi_api::security::v1::CaCerts& RemoteAuth::_internal_ca_certs() const {
  const ::opi_api::security::v1::CaCerts* p = ca_certs_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::CaCerts&>(
      ::opi_api::security::v1::_CaCerts_default_instance_);
}
inline const ::opi_api::security::v1::CaCerts& RemoteAuth::ca_certs() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.RemoteAuth.ca_certs)
  return _internal_ca_certs();
}
inline void RemoteAuth::unsafe_arena_set_allocated_ca_certs(
    ::opi_api::security::v1::CaCerts* ca_certs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ca_certs_);
  }
  ca_certs_ = ca_certs;
  if (ca_certs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.RemoteAuth.ca_certs)
}
inline ::opi_api::security::v1::CaCerts* RemoteAuth::release_ca_certs() {
  
  ::opi_api::security::v1::CaCerts* temp = ca_certs_;
  ca_certs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::CaCerts* RemoteAuth::unsafe_arena_release_ca_certs() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.RemoteAuth.ca_certs)
  
  ::opi_api::security::v1::CaCerts* temp = ca_certs_;
  ca_certs_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::CaCerts* RemoteAuth::_internal_mutable_ca_certs() {
  
  if (ca_certs_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::CaCerts>(GetArenaForAllocation());
    ca_certs_ = p;
  }
  return ca_certs_;
}
inline ::opi_api::security::v1::CaCerts* RemoteAuth::mutable_ca_certs() {
  ::opi_api::security::v1::CaCerts* _msg = _internal_mutable_ca_certs();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.RemoteAuth.ca_certs)
  return _msg;
}
inline void RemoteAuth::set_allocated_ca_certs(::opi_api::security::v1::CaCerts* ca_certs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ca_certs_;
  }
  if (ca_certs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::CaCerts>::GetOwningArena(ca_certs);
    if (message_arena != submessage_arena) {
      ca_certs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ca_certs, submessage_arena);
    }
    
  } else {
    
  }
  ca_certs_ = ca_certs;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.RemoteAuth.ca_certs)
}

// .opi_api.security.v1.PubKeys pubkeys = 8;
inline bool RemoteAuth::_internal_has_pubkeys() const {
  return this != internal_default_instance() && pubkeys_ != nullptr;
}
inline bool RemoteAuth::has_pubkeys() const {
  return _internal_has_pubkeys();
}
inline void RemoteAuth::clear_pubkeys() {
  if (GetArenaForAllocation() == nullptr && pubkeys_ != nullptr) {
    delete pubkeys_;
  }
  pubkeys_ = nullptr;
}
inline const ::opi_api::security::v1::PubKeys& RemoteAuth::_internal_pubkeys() const {
  const ::opi_api::security::v1::PubKeys* p = pubkeys_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::PubKeys&>(
      ::opi_api::security::v1::_PubKeys_default_instance_);
}
inline const ::opi_api::security::v1::PubKeys& RemoteAuth::pubkeys() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.RemoteAuth.pubkeys)
  return _internal_pubkeys();
}
inline void RemoteAuth::unsafe_arena_set_allocated_pubkeys(
    ::opi_api::security::v1::PubKeys* pubkeys) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pubkeys_);
  }
  pubkeys_ = pubkeys;
  if (pubkeys) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.RemoteAuth.pubkeys)
}
inline ::opi_api::security::v1::PubKeys* RemoteAuth::release_pubkeys() {
  
  ::opi_api::security::v1::PubKeys* temp = pubkeys_;
  pubkeys_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::PubKeys* RemoteAuth::unsafe_arena_release_pubkeys() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.RemoteAuth.pubkeys)
  
  ::opi_api::security::v1::PubKeys* temp = pubkeys_;
  pubkeys_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::PubKeys* RemoteAuth::_internal_mutable_pubkeys() {
  
  if (pubkeys_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::PubKeys>(GetArenaForAllocation());
    pubkeys_ = p;
  }
  return pubkeys_;
}
inline ::opi_api::security::v1::PubKeys* RemoteAuth::mutable_pubkeys() {
  ::opi_api::security::v1::PubKeys* _msg = _internal_mutable_pubkeys();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.RemoteAuth.pubkeys)
  return _msg;
}
inline void RemoteAuth::set_allocated_pubkeys(::opi_api::security::v1::PubKeys* pubkeys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pubkeys_;
  }
  if (pubkeys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::PubKeys>::GetOwningArena(pubkeys);
    if (message_arena != submessage_arena) {
      pubkeys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pubkeys, submessage_arena);
    }
    
  } else {
    
  }
  pubkeys_ = pubkeys;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.RemoteAuth.pubkeys)
}

// -------------------------------------------------------------------

// TrafficSelectors_TrafficSelector

// string cidr = 1;
inline void TrafficSelectors_TrafficSelector::clear_cidr() {
  cidr_.ClearToEmpty();
}
inline const std::string& TrafficSelectors_TrafficSelector::cidr() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.TrafficSelectors.TrafficSelector.cidr)
  return _internal_cidr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrafficSelectors_TrafficSelector::set_cidr(ArgT0&& arg0, ArgT... args) {
 
 cidr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.TrafficSelectors.TrafficSelector.cidr)
}
inline std::string* TrafficSelectors_TrafficSelector::mutable_cidr() {
  std::string* _s = _internal_mutable_cidr();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.TrafficSelectors.TrafficSelector.cidr)
  return _s;
}
inline const std::string& TrafficSelectors_TrafficSelector::_internal_cidr() const {
  return cidr_.Get();
}
inline void TrafficSelectors_TrafficSelector::_internal_set_cidr(const std::string& value) {
  
  cidr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TrafficSelectors_TrafficSelector::_internal_mutable_cidr() {
  
  return cidr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TrafficSelectors_TrafficSelector::release_cidr() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.TrafficSelectors.TrafficSelector.cidr)
  return cidr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TrafficSelectors_TrafficSelector::set_allocated_cidr(std::string* cidr) {
  if (cidr != nullptr) {
    
  } else {
    
  }
  cidr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cidr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cidr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cidr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.TrafficSelectors.TrafficSelector.cidr)
}

// string proto = 2;
inline void TrafficSelectors_TrafficSelector::clear_proto() {
  proto_.ClearToEmpty();
}
inline const std::string& TrafficSelectors_TrafficSelector::proto() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.TrafficSelectors.TrafficSelector.proto)
  return _internal_proto();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrafficSelectors_TrafficSelector::set_proto(ArgT0&& arg0, ArgT... args) {
 
 proto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.TrafficSelectors.TrafficSelector.proto)
}
inline std::string* TrafficSelectors_TrafficSelector::mutable_proto() {
  std::string* _s = _internal_mutable_proto();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.TrafficSelectors.TrafficSelector.proto)
  return _s;
}
inline const std::string& TrafficSelectors_TrafficSelector::_internal_proto() const {
  return proto_.Get();
}
inline void TrafficSelectors_TrafficSelector::_internal_set_proto(const std::string& value) {
  
  proto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TrafficSelectors_TrafficSelector::_internal_mutable_proto() {
  
  return proto_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TrafficSelectors_TrafficSelector::release_proto() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.TrafficSelectors.TrafficSelector.proto)
  return proto_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TrafficSelectors_TrafficSelector::set_allocated_proto(std::string* proto) {
  if (proto != nullptr) {
    
  } else {
    
  }
  proto_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proto_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.TrafficSelectors.TrafficSelector.proto)
}

// string port = 3;
inline void TrafficSelectors_TrafficSelector::clear_port() {
  port_.ClearToEmpty();
}
inline const std::string& TrafficSelectors_TrafficSelector::port() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.TrafficSelectors.TrafficSelector.port)
  return _internal_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrafficSelectors_TrafficSelector::set_port(ArgT0&& arg0, ArgT... args) {
 
 port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.TrafficSelectors.TrafficSelector.port)
}
inline std::string* TrafficSelectors_TrafficSelector::mutable_port() {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.TrafficSelectors.TrafficSelector.port)
  return _s;
}
inline const std::string& TrafficSelectors_TrafficSelector::_internal_port() const {
  return port_.Get();
}
inline void TrafficSelectors_TrafficSelector::_internal_set_port(const std::string& value) {
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TrafficSelectors_TrafficSelector::_internal_mutable_port() {
  
  return port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TrafficSelectors_TrafficSelector::release_port() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.TrafficSelectors.TrafficSelector.port)
  return port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TrafficSelectors_TrafficSelector::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (port_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.TrafficSelectors.TrafficSelector.port)
}

// -------------------------------------------------------------------

// TrafficSelectors

// repeated .opi_api.security.v1.TrafficSelectors.TrafficSelector ts = 1;
inline int TrafficSelectors::_internal_ts_size() const {
  return ts_.size();
}
inline int TrafficSelectors::ts_size() const {
  return _internal_ts_size();
}
inline void TrafficSelectors::clear_ts() {
  ts_.Clear();
}
inline ::opi_api::security::v1::TrafficSelectors_TrafficSelector* TrafficSelectors::mutable_ts(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.TrafficSelectors.ts)
  return ts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::TrafficSelectors_TrafficSelector >*
TrafficSelectors::mutable_ts() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.TrafficSelectors.ts)
  return &ts_;
}
inline const ::opi_api::security::v1::TrafficSelectors_TrafficSelector& TrafficSelectors::_internal_ts(int index) const {
  return ts_.Get(index);
}
inline const ::opi_api::security::v1::TrafficSelectors_TrafficSelector& TrafficSelectors::ts(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.TrafficSelectors.ts)
  return _internal_ts(index);
}
inline ::opi_api::security::v1::TrafficSelectors_TrafficSelector* TrafficSelectors::_internal_add_ts() {
  return ts_.Add();
}
inline ::opi_api::security::v1::TrafficSelectors_TrafficSelector* TrafficSelectors::add_ts() {
  ::opi_api::security::v1::TrafficSelectors_TrafficSelector* _add = _internal_add_ts();
  // @@protoc_insertion_point(field_add:opi_api.security.v1.TrafficSelectors.ts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::TrafficSelectors_TrafficSelector >&
TrafficSelectors::ts() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.TrafficSelectors.ts)
  return ts_;
}

// -------------------------------------------------------------------

// Addrs

// string addr = 1;
inline void Addrs::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& Addrs::addr() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Addrs.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Addrs::set_addr(ArgT0&& arg0, ArgT... args) {
 
 addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Addrs.addr)
}
inline std::string* Addrs::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Addrs.addr)
  return _s;
}
inline const std::string& Addrs::_internal_addr() const {
  return addr_.Get();
}
inline void Addrs::_internal_set_addr(const std::string& value) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Addrs::_internal_mutable_addr() {
  
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Addrs::release_addr() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Addrs.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Addrs::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (addr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Addrs.addr)
}

// -------------------------------------------------------------------

// Child

// string name = 1;
inline void Child::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Child::name() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Child::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Child.name)
}
inline std::string* Child::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Child.name)
  return _s;
}
inline const std::string& Child::_internal_name() const {
  return name_.Get();
}
inline void Child::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Child::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Child::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Child.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Child::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Child.name)
}

// .opi_api.security.v1.Proposals ag_proposals = 2;
inline bool Child::_internal_has_ag_proposals() const {
  return this != internal_default_instance() && ag_proposals_ != nullptr;
}
inline bool Child::has_ag_proposals() const {
  return _internal_has_ag_proposals();
}
inline void Child::clear_ag_proposals() {
  if (GetArenaForAllocation() == nullptr && ag_proposals_ != nullptr) {
    delete ag_proposals_;
  }
  ag_proposals_ = nullptr;
}
inline const ::opi_api::security::v1::Proposals& Child::_internal_ag_proposals() const {
  const ::opi_api::security::v1::Proposals* p = ag_proposals_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::Proposals&>(
      ::opi_api::security::v1::_Proposals_default_instance_);
}
inline const ::opi_api::security::v1::Proposals& Child::ag_proposals() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.ag_proposals)
  return _internal_ag_proposals();
}
inline void Child::unsafe_arena_set_allocated_ag_proposals(
    ::opi_api::security::v1::Proposals* ag_proposals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ag_proposals_);
  }
  ag_proposals_ = ag_proposals;
  if (ag_proposals) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.Child.ag_proposals)
}
inline ::opi_api::security::v1::Proposals* Child::release_ag_proposals() {
  
  ::opi_api::security::v1::Proposals* temp = ag_proposals_;
  ag_proposals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::Proposals* Child::unsafe_arena_release_ag_proposals() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Child.ag_proposals)
  
  ::opi_api::security::v1::Proposals* temp = ag_proposals_;
  ag_proposals_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::Proposals* Child::_internal_mutable_ag_proposals() {
  
  if (ag_proposals_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::Proposals>(GetArenaForAllocation());
    ag_proposals_ = p;
  }
  return ag_proposals_;
}
inline ::opi_api::security::v1::Proposals* Child::mutable_ag_proposals() {
  ::opi_api::security::v1::Proposals* _msg = _internal_mutable_ag_proposals();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Child.ag_proposals)
  return _msg;
}
inline void Child::set_allocated_ag_proposals(::opi_api::security::v1::Proposals* ag_proposals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ag_proposals_;
  }
  if (ag_proposals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::Proposals>::GetOwningArena(ag_proposals);
    if (message_arena != submessage_arena) {
      ag_proposals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ag_proposals, submessage_arena);
    }
    
  } else {
    
  }
  ag_proposals_ = ag_proposals;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Child.ag_proposals)
}

// .opi_api.security.v1.Proposals esp_proposals = 3;
inline bool Child::_internal_has_esp_proposals() const {
  return this != internal_default_instance() && esp_proposals_ != nullptr;
}
inline bool Child::has_esp_proposals() const {
  return _internal_has_esp_proposals();
}
inline void Child::clear_esp_proposals() {
  if (GetArenaForAllocation() == nullptr && esp_proposals_ != nullptr) {
    delete esp_proposals_;
  }
  esp_proposals_ = nullptr;
}
inline const ::opi_api::security::v1::Proposals& Child::_internal_esp_proposals() const {
  const ::opi_api::security::v1::Proposals* p = esp_proposals_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::Proposals&>(
      ::opi_api::security::v1::_Proposals_default_instance_);
}
inline const ::opi_api::security::v1::Proposals& Child::esp_proposals() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.esp_proposals)
  return _internal_esp_proposals();
}
inline void Child::unsafe_arena_set_allocated_esp_proposals(
    ::opi_api::security::v1::Proposals* esp_proposals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(esp_proposals_);
  }
  esp_proposals_ = esp_proposals;
  if (esp_proposals) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.Child.esp_proposals)
}
inline ::opi_api::security::v1::Proposals* Child::release_esp_proposals() {
  
  ::opi_api::security::v1::Proposals* temp = esp_proposals_;
  esp_proposals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::Proposals* Child::unsafe_arena_release_esp_proposals() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Child.esp_proposals)
  
  ::opi_api::security::v1::Proposals* temp = esp_proposals_;
  esp_proposals_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::Proposals* Child::_internal_mutable_esp_proposals() {
  
  if (esp_proposals_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::Proposals>(GetArenaForAllocation());
    esp_proposals_ = p;
  }
  return esp_proposals_;
}
inline ::opi_api::security::v1::Proposals* Child::mutable_esp_proposals() {
  ::opi_api::security::v1::Proposals* _msg = _internal_mutable_esp_proposals();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Child.esp_proposals)
  return _msg;
}
inline void Child::set_allocated_esp_proposals(::opi_api::security::v1::Proposals* esp_proposals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete esp_proposals_;
  }
  if (esp_proposals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::Proposals>::GetOwningArena(esp_proposals);
    if (message_arena != submessage_arena) {
      esp_proposals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esp_proposals, submessage_arena);
    }
    
  } else {
    
  }
  esp_proposals_ = esp_proposals;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Child.esp_proposals)
}

// .opi_api.security.v1.TrafficSelectors local_ts = 4;
inline bool Child::_internal_has_local_ts() const {
  return this != internal_default_instance() && local_ts_ != nullptr;
}
inline bool Child::has_local_ts() const {
  return _internal_has_local_ts();
}
inline void Child::clear_local_ts() {
  if (GetArenaForAllocation() == nullptr && local_ts_ != nullptr) {
    delete local_ts_;
  }
  local_ts_ = nullptr;
}
inline const ::opi_api::security::v1::TrafficSelectors& Child::_internal_local_ts() const {
  const ::opi_api::security::v1::TrafficSelectors* p = local_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::TrafficSelectors&>(
      ::opi_api::security::v1::_TrafficSelectors_default_instance_);
}
inline const ::opi_api::security::v1::TrafficSelectors& Child::local_ts() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.local_ts)
  return _internal_local_ts();
}
inline void Child::unsafe_arena_set_allocated_local_ts(
    ::opi_api::security::v1::TrafficSelectors* local_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_ts_);
  }
  local_ts_ = local_ts;
  if (local_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.Child.local_ts)
}
inline ::opi_api::security::v1::TrafficSelectors* Child::release_local_ts() {
  
  ::opi_api::security::v1::TrafficSelectors* temp = local_ts_;
  local_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::TrafficSelectors* Child::unsafe_arena_release_local_ts() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Child.local_ts)
  
  ::opi_api::security::v1::TrafficSelectors* temp = local_ts_;
  local_ts_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::TrafficSelectors* Child::_internal_mutable_local_ts() {
  
  if (local_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::TrafficSelectors>(GetArenaForAllocation());
    local_ts_ = p;
  }
  return local_ts_;
}
inline ::opi_api::security::v1::TrafficSelectors* Child::mutable_local_ts() {
  ::opi_api::security::v1::TrafficSelectors* _msg = _internal_mutable_local_ts();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Child.local_ts)
  return _msg;
}
inline void Child::set_allocated_local_ts(::opi_api::security::v1::TrafficSelectors* local_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete local_ts_;
  }
  if (local_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::TrafficSelectors>::GetOwningArena(local_ts);
    if (message_arena != submessage_arena) {
      local_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_ts, submessage_arena);
    }
    
  } else {
    
  }
  local_ts_ = local_ts;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Child.local_ts)
}

// .opi_api.security.v1.TrafficSelectors remote_ts = 5;
inline bool Child::_internal_has_remote_ts() const {
  return this != internal_default_instance() && remote_ts_ != nullptr;
}
inline bool Child::has_remote_ts() const {
  return _internal_has_remote_ts();
}
inline void Child::clear_remote_ts() {
  if (GetArenaForAllocation() == nullptr && remote_ts_ != nullptr) {
    delete remote_ts_;
  }
  remote_ts_ = nullptr;
}
inline const ::opi_api::security::v1::TrafficSelectors& Child::_internal_remote_ts() const {
  const ::opi_api::security::v1::TrafficSelectors* p = remote_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::TrafficSelectors&>(
      ::opi_api::security::v1::_TrafficSelectors_default_instance_);
}
inline const ::opi_api::security::v1::TrafficSelectors& Child::remote_ts() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.remote_ts)
  return _internal_remote_ts();
}
inline void Child::unsafe_arena_set_allocated_remote_ts(
    ::opi_api::security::v1::TrafficSelectors* remote_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_ts_);
  }
  remote_ts_ = remote_ts;
  if (remote_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.Child.remote_ts)
}
inline ::opi_api::security::v1::TrafficSelectors* Child::release_remote_ts() {
  
  ::opi_api::security::v1::TrafficSelectors* temp = remote_ts_;
  remote_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::TrafficSelectors* Child::unsafe_arena_release_remote_ts() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Child.remote_ts)
  
  ::opi_api::security::v1::TrafficSelectors* temp = remote_ts_;
  remote_ts_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::TrafficSelectors* Child::_internal_mutable_remote_ts() {
  
  if (remote_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::TrafficSelectors>(GetArenaForAllocation());
    remote_ts_ = p;
  }
  return remote_ts_;
}
inline ::opi_api::security::v1::TrafficSelectors* Child::mutable_remote_ts() {
  ::opi_api::security::v1::TrafficSelectors* _msg = _internal_mutable_remote_ts();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Child.remote_ts)
  return _msg;
}
inline void Child::set_allocated_remote_ts(::opi_api::security::v1::TrafficSelectors* remote_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete remote_ts_;
  }
  if (remote_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::TrafficSelectors>::GetOwningArena(remote_ts);
    if (message_arena != submessage_arena) {
      remote_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_ts, submessage_arena);
    }
    
  } else {
    
  }
  remote_ts_ = remote_ts;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Child.remote_ts)
}

// uint32 rekey_time = 6;
inline void Child::clear_rekey_time() {
  rekey_time_ = 0u;
}
inline uint32_t Child::_internal_rekey_time() const {
  return rekey_time_;
}
inline uint32_t Child::rekey_time() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.rekey_time)
  return _internal_rekey_time();
}
inline void Child::_internal_set_rekey_time(uint32_t value) {
  
  rekey_time_ = value;
}
inline void Child::set_rekey_time(uint32_t value) {
  _internal_set_rekey_time(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Child.rekey_time)
}

// uint32 life_time = 7;
inline void Child::clear_life_time() {
  life_time_ = 0u;
}
inline uint32_t Child::_internal_life_time() const {
  return life_time_;
}
inline uint32_t Child::life_time() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.life_time)
  return _internal_life_time();
}
inline void Child::_internal_set_life_time(uint32_t value) {
  
  life_time_ = value;
}
inline void Child::set_life_time(uint32_t value) {
  _internal_set_life_time(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Child.life_time)
}

// uint32 rand_time = 8;
inline void Child::clear_rand_time() {
  rand_time_ = 0u;
}
inline uint32_t Child::_internal_rand_time() const {
  return rand_time_;
}
inline uint32_t Child::rand_time() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.rand_time)
  return _internal_rand_time();
}
inline void Child::_internal_set_rand_time(uint32_t value) {
  
  rand_time_ = value;
}
inline void Child::set_rand_time(uint32_t value) {
  _internal_set_rand_time(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Child.rand_time)
}

// string updown = 9;
inline void Child::clear_updown() {
  updown_.ClearToEmpty();
}
inline const std::string& Child::updown() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.updown)
  return _internal_updown();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Child::set_updown(ArgT0&& arg0, ArgT... args) {
 
 updown_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Child.updown)
}
inline std::string* Child::mutable_updown() {
  std::string* _s = _internal_mutable_updown();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Child.updown)
  return _s;
}
inline const std::string& Child::_internal_updown() const {
  return updown_.Get();
}
inline void Child::_internal_set_updown(const std::string& value) {
  
  updown_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Child::_internal_mutable_updown() {
  
  return updown_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Child::release_updown() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Child.updown)
  return updown_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Child::set_allocated_updown(std::string* updown) {
  if (updown != nullptr) {
    
  } else {
    
  }
  updown_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updown,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (updown_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    updown_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Child.updown)
}

// uint32 inactivity = 10;
inline void Child::clear_inactivity() {
  inactivity_ = 0u;
}
inline uint32_t Child::_internal_inactivity() const {
  return inactivity_;
}
inline uint32_t Child::inactivity() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.inactivity)
  return _internal_inactivity();
}
inline void Child::_internal_set_inactivity(uint32_t value) {
  
  inactivity_ = value;
}
inline void Child::set_inactivity(uint32_t value) {
  _internal_set_inactivity(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Child.inactivity)
}

// uint32 mark_in = 11;
inline void Child::clear_mark_in() {
  mark_in_ = 0u;
}
inline uint32_t Child::_internal_mark_in() const {
  return mark_in_;
}
inline uint32_t Child::mark_in() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.mark_in)
  return _internal_mark_in();
}
inline void Child::_internal_set_mark_in(uint32_t value) {
  
  mark_in_ = value;
}
inline void Child::set_mark_in(uint32_t value) {
  _internal_set_mark_in(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Child.mark_in)
}

// string mark_in_sa = 12;
inline void Child::clear_mark_in_sa() {
  mark_in_sa_.ClearToEmpty();
}
inline const std::string& Child::mark_in_sa() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.mark_in_sa)
  return _internal_mark_in_sa();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Child::set_mark_in_sa(ArgT0&& arg0, ArgT... args) {
 
 mark_in_sa_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Child.mark_in_sa)
}
inline std::string* Child::mutable_mark_in_sa() {
  std::string* _s = _internal_mutable_mark_in_sa();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Child.mark_in_sa)
  return _s;
}
inline const std::string& Child::_internal_mark_in_sa() const {
  return mark_in_sa_.Get();
}
inline void Child::_internal_set_mark_in_sa(const std::string& value) {
  
  mark_in_sa_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Child::_internal_mutable_mark_in_sa() {
  
  return mark_in_sa_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Child::release_mark_in_sa() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Child.mark_in_sa)
  return mark_in_sa_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Child::set_allocated_mark_in_sa(std::string* mark_in_sa) {
  if (mark_in_sa != nullptr) {
    
  } else {
    
  }
  mark_in_sa_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mark_in_sa,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mark_in_sa_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mark_in_sa_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Child.mark_in_sa)
}

// uint32 mark_out = 13;
inline void Child::clear_mark_out() {
  mark_out_ = 0u;
}
inline uint32_t Child::_internal_mark_out() const {
  return mark_out_;
}
inline uint32_t Child::mark_out() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.mark_out)
  return _internal_mark_out();
}
inline void Child::_internal_set_mark_out(uint32_t value) {
  
  mark_out_ = value;
}
inline void Child::set_mark_out(uint32_t value) {
  _internal_set_mark_out(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Child.mark_out)
}

// uint32 set_mark_in = 14;
inline void Child::clear_set_mark_in() {
  set_mark_in_ = 0u;
}
inline uint32_t Child::_internal_set_mark_in() const {
  return set_mark_in_;
}
inline uint32_t Child::set_mark_in() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.set_mark_in)
  return _internal_set_mark_in();
}
inline void Child::_internal_set_set_mark_in(uint32_t value) {
  
  set_mark_in_ = value;
}
inline void Child::set_set_mark_in(uint32_t value) {
  _internal_set_set_mark_in(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Child.set_mark_in)
}

// uint32 set_mark_out = 15;
inline void Child::clear_set_mark_out() {
  set_mark_out_ = 0u;
}
inline uint32_t Child::_internal_set_mark_out() const {
  return set_mark_out_;
}
inline uint32_t Child::set_mark_out() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.set_mark_out)
  return _internal_set_mark_out();
}
inline void Child::_internal_set_set_mark_out(uint32_t value) {
  
  set_mark_out_ = value;
}
inline void Child::set_set_mark_out(uint32_t value) {
  _internal_set_set_mark_out(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Child.set_mark_out)
}

// string hw_offload = 16;
inline void Child::clear_hw_offload() {
  hw_offload_.ClearToEmpty();
}
inline const std::string& Child::hw_offload() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Child.hw_offload)
  return _internal_hw_offload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Child::set_hw_offload(ArgT0&& arg0, ArgT... args) {
 
 hw_offload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Child.hw_offload)
}
inline std::string* Child::mutable_hw_offload() {
  std::string* _s = _internal_mutable_hw_offload();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Child.hw_offload)
  return _s;
}
inline const std::string& Child::_internal_hw_offload() const {
  return hw_offload_.Get();
}
inline void Child::_internal_set_hw_offload(const std::string& value) {
  
  hw_offload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Child::_internal_mutable_hw_offload() {
  
  return hw_offload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Child::release_hw_offload() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Child.hw_offload)
  return hw_offload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Child::set_allocated_hw_offload(std::string* hw_offload) {
  if (hw_offload != nullptr) {
    
  } else {
    
  }
  hw_offload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hw_offload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hw_offload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hw_offload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Child.hw_offload)
}

// -------------------------------------------------------------------

// Connection

// string name = 1;
inline void Connection::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Connection::name() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Connection::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Connection.name)
}
inline std::string* Connection::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Connection.name)
  return _s;
}
inline const std::string& Connection::_internal_name() const {
  return name_.Get();
}
inline void Connection::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Connection::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Connection::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Connection.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Connection::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Connection.name)
}

// string version = 2;
inline void Connection::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& Connection::version() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Connection::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Connection.version)
}
inline std::string* Connection::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Connection.version)
  return _s;
}
inline const std::string& Connection::_internal_version() const {
  return version_.Get();
}
inline void Connection::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Connection::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Connection::release_version() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Connection.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Connection::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Connection.version)
}

// repeated .opi_api.security.v1.Addrs local_addrs = 3;
inline int Connection::_internal_local_addrs_size() const {
  return local_addrs_.size();
}
inline int Connection::local_addrs_size() const {
  return _internal_local_addrs_size();
}
inline void Connection::clear_local_addrs() {
  local_addrs_.Clear();
}
inline ::opi_api::security::v1::Addrs* Connection::mutable_local_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Connection.local_addrs)
  return local_addrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >*
Connection::mutable_local_addrs() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.Connection.local_addrs)
  return &local_addrs_;
}
inline const ::opi_api::security::v1::Addrs& Connection::_internal_local_addrs(int index) const {
  return local_addrs_.Get(index);
}
inline const ::opi_api::security::v1::Addrs& Connection::local_addrs(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.local_addrs)
  return _internal_local_addrs(index);
}
inline ::opi_api::security::v1::Addrs* Connection::_internal_add_local_addrs() {
  return local_addrs_.Add();
}
inline ::opi_api::security::v1::Addrs* Connection::add_local_addrs() {
  ::opi_api::security::v1::Addrs* _add = _internal_add_local_addrs();
  // @@protoc_insertion_point(field_add:opi_api.security.v1.Connection.local_addrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >&
Connection::local_addrs() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.Connection.local_addrs)
  return local_addrs_;
}

// repeated .opi_api.security.v1.Addrs remote_addrs = 4;
inline int Connection::_internal_remote_addrs_size() const {
  return remote_addrs_.size();
}
inline int Connection::remote_addrs_size() const {
  return _internal_remote_addrs_size();
}
inline void Connection::clear_remote_addrs() {
  remote_addrs_.Clear();
}
inline ::opi_api::security::v1::Addrs* Connection::mutable_remote_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Connection.remote_addrs)
  return remote_addrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >*
Connection::mutable_remote_addrs() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.Connection.remote_addrs)
  return &remote_addrs_;
}
inline const ::opi_api::security::v1::Addrs& Connection::_internal_remote_addrs(int index) const {
  return remote_addrs_.Get(index);
}
inline const ::opi_api::security::v1::Addrs& Connection::remote_addrs(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.remote_addrs)
  return _internal_remote_addrs(index);
}
inline ::opi_api::security::v1::Addrs* Connection::_internal_add_remote_addrs() {
  return remote_addrs_.Add();
}
inline ::opi_api::security::v1::Addrs* Connection::add_remote_addrs() {
  ::opi_api::security::v1::Addrs* _add = _internal_add_remote_addrs();
  // @@protoc_insertion_point(field_add:opi_api.security.v1.Connection.remote_addrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >&
Connection::remote_addrs() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.Connection.remote_addrs)
  return remote_addrs_;
}

// uint32 local_port = 5;
inline void Connection::clear_local_port() {
  local_port_ = 0u;
}
inline uint32_t Connection::_internal_local_port() const {
  return local_port_;
}
inline uint32_t Connection::local_port() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.local_port)
  return _internal_local_port();
}
inline void Connection::_internal_set_local_port(uint32_t value) {
  
  local_port_ = value;
}
inline void Connection::set_local_port(uint32_t value) {
  _internal_set_local_port(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Connection.local_port)
}

// uint32 remote_port = 6;
inline void Connection::clear_remote_port() {
  remote_port_ = 0u;
}
inline uint32_t Connection::_internal_remote_port() const {
  return remote_port_;
}
inline uint32_t Connection::remote_port() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.remote_port)
  return _internal_remote_port();
}
inline void Connection::_internal_set_remote_port(uint32_t value) {
  
  remote_port_ = value;
}
inline void Connection::set_remote_port(uint32_t value) {
  _internal_set_remote_port(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Connection.remote_port)
}

// .opi_api.security.v1.Proposals proposals = 7;
inline bool Connection::_internal_has_proposals() const {
  return this != internal_default_instance() && proposals_ != nullptr;
}
inline bool Connection::has_proposals() const {
  return _internal_has_proposals();
}
inline void Connection::clear_proposals() {
  if (GetArenaForAllocation() == nullptr && proposals_ != nullptr) {
    delete proposals_;
  }
  proposals_ = nullptr;
}
inline const ::opi_api::security::v1::Proposals& Connection::_internal_proposals() const {
  const ::opi_api::security::v1::Proposals* p = proposals_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::Proposals&>(
      ::opi_api::security::v1::_Proposals_default_instance_);
}
inline const ::opi_api::security::v1::Proposals& Connection::proposals() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.proposals)
  return _internal_proposals();
}
inline void Connection::unsafe_arena_set_allocated_proposals(
    ::opi_api::security::v1::Proposals* proposals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposals_);
  }
  proposals_ = proposals;
  if (proposals) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.Connection.proposals)
}
inline ::opi_api::security::v1::Proposals* Connection::release_proposals() {
  
  ::opi_api::security::v1::Proposals* temp = proposals_;
  proposals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::Proposals* Connection::unsafe_arena_release_proposals() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Connection.proposals)
  
  ::opi_api::security::v1::Proposals* temp = proposals_;
  proposals_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::Proposals* Connection::_internal_mutable_proposals() {
  
  if (proposals_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::Proposals>(GetArenaForAllocation());
    proposals_ = p;
  }
  return proposals_;
}
inline ::opi_api::security::v1::Proposals* Connection::mutable_proposals() {
  ::opi_api::security::v1::Proposals* _msg = _internal_mutable_proposals();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Connection.proposals)
  return _msg;
}
inline void Connection::set_allocated_proposals(::opi_api::security::v1::Proposals* proposals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete proposals_;
  }
  if (proposals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::Proposals>::GetOwningArena(proposals);
    if (message_arena != submessage_arena) {
      proposals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposals, submessage_arena);
    }
    
  } else {
    
  }
  proposals_ = proposals;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Connection.proposals)
}

// .opi_api.security.v1.Vips vips = 8;
inline bool Connection::_internal_has_vips() const {
  return this != internal_default_instance() && vips_ != nullptr;
}
inline bool Connection::has_vips() const {
  return _internal_has_vips();
}
inline void Connection::clear_vips() {
  if (GetArenaForAllocation() == nullptr && vips_ != nullptr) {
    delete vips_;
  }
  vips_ = nullptr;
}
inline const ::opi_api::security::v1::Vips& Connection::_internal_vips() const {
  const ::opi_api::security::v1::Vips* p = vips_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::Vips&>(
      ::opi_api::security::v1::_Vips_default_instance_);
}
inline const ::opi_api::security::v1::Vips& Connection::vips() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.vips)
  return _internal_vips();
}
inline void Connection::unsafe_arena_set_allocated_vips(
    ::opi_api::security::v1::Vips* vips) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vips_);
  }
  vips_ = vips;
  if (vips) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.Connection.vips)
}
inline ::opi_api::security::v1::Vips* Connection::release_vips() {
  
  ::opi_api::security::v1::Vips* temp = vips_;
  vips_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::Vips* Connection::unsafe_arena_release_vips() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Connection.vips)
  
  ::opi_api::security::v1::Vips* temp = vips_;
  vips_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::Vips* Connection::_internal_mutable_vips() {
  
  if (vips_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::Vips>(GetArenaForAllocation());
    vips_ = p;
  }
  return vips_;
}
inline ::opi_api::security::v1::Vips* Connection::mutable_vips() {
  ::opi_api::security::v1::Vips* _msg = _internal_mutable_vips();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Connection.vips)
  return _msg;
}
inline void Connection::set_allocated_vips(::opi_api::security::v1::Vips* vips) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete vips_;
  }
  if (vips) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::Vips>::GetOwningArena(vips);
    if (message_arena != submessage_arena) {
      vips = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vips, submessage_arena);
    }
    
  } else {
    
  }
  vips_ = vips;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Connection.vips)
}

// uint64 dscp = 9;
inline void Connection::clear_dscp() {
  dscp_ = uint64_t{0u};
}
inline uint64_t Connection::_internal_dscp() const {
  return dscp_;
}
inline uint64_t Connection::dscp() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.dscp)
  return _internal_dscp();
}
inline void Connection::_internal_set_dscp(uint64_t value) {
  
  dscp_ = value;
}
inline void Connection::set_dscp(uint64_t value) {
  _internal_set_dscp(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Connection.dscp)
}

// string encap = 10;
inline void Connection::clear_encap() {
  encap_.ClearToEmpty();
}
inline const std::string& Connection::encap() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.encap)
  return _internal_encap();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Connection::set_encap(ArgT0&& arg0, ArgT... args) {
 
 encap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Connection.encap)
}
inline std::string* Connection::mutable_encap() {
  std::string* _s = _internal_mutable_encap();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Connection.encap)
  return _s;
}
inline const std::string& Connection::_internal_encap() const {
  return encap_.Get();
}
inline void Connection::_internal_set_encap(const std::string& value) {
  
  encap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Connection::_internal_mutable_encap() {
  
  return encap_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Connection::release_encap() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Connection.encap)
  return encap_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Connection::set_allocated_encap(std::string* encap) {
  if (encap != nullptr) {
    
  } else {
    
  }
  encap_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encap,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encap_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Connection.encap)
}

// string mobike = 11;
inline void Connection::clear_mobike() {
  mobike_.ClearToEmpty();
}
inline const std::string& Connection::mobike() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.mobike)
  return _internal_mobike();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Connection::set_mobike(ArgT0&& arg0, ArgT... args) {
 
 mobike_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Connection.mobike)
}
inline std::string* Connection::mutable_mobike() {
  std::string* _s = _internal_mutable_mobike();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Connection.mobike)
  return _s;
}
inline const std::string& Connection::_internal_mobike() const {
  return mobike_.Get();
}
inline void Connection::_internal_set_mobike(const std::string& value) {
  
  mobike_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Connection::_internal_mutable_mobike() {
  
  return mobike_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Connection::release_mobike() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Connection.mobike)
  return mobike_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Connection::set_allocated_mobike(std::string* mobike) {
  if (mobike != nullptr) {
    
  } else {
    
  }
  mobike_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mobike,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mobike_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mobike_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Connection.mobike)
}

// uint32 dpd_delay = 12;
inline void Connection::clear_dpd_delay() {
  dpd_delay_ = 0u;
}
inline uint32_t Connection::_internal_dpd_delay() const {
  return dpd_delay_;
}
inline uint32_t Connection::dpd_delay() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.dpd_delay)
  return _internal_dpd_delay();
}
inline void Connection::_internal_set_dpd_delay(uint32_t value) {
  
  dpd_delay_ = value;
}
inline void Connection::set_dpd_delay(uint32_t value) {
  _internal_set_dpd_delay(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Connection.dpd_delay)
}

// uint32 dpd_timeout = 13;
inline void Connection::clear_dpd_timeout() {
  dpd_timeout_ = 0u;
}
inline uint32_t Connection::_internal_dpd_timeout() const {
  return dpd_timeout_;
}
inline uint32_t Connection::dpd_timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.dpd_timeout)
  return _internal_dpd_timeout();
}
inline void Connection::_internal_set_dpd_timeout(uint32_t value) {
  
  dpd_timeout_ = value;
}
inline void Connection::set_dpd_timeout(uint32_t value) {
  _internal_set_dpd_timeout(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Connection.dpd_timeout)
}

// uint32 reauth_time = 14;
inline void Connection::clear_reauth_time() {
  reauth_time_ = 0u;
}
inline uint32_t Connection::_internal_reauth_time() const {
  return reauth_time_;
}
inline uint32_t Connection::reauth_time() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.reauth_time)
  return _internal_reauth_time();
}
inline void Connection::_internal_set_reauth_time(uint32_t value) {
  
  reauth_time_ = value;
}
inline void Connection::set_reauth_time(uint32_t value) {
  _internal_set_reauth_time(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Connection.reauth_time)
}

// uint32 rekey_time = 15;
inline void Connection::clear_rekey_time() {
  rekey_time_ = 0u;
}
inline uint32_t Connection::_internal_rekey_time() const {
  return rekey_time_;
}
inline uint32_t Connection::rekey_time() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.rekey_time)
  return _internal_rekey_time();
}
inline void Connection::_internal_set_rekey_time(uint32_t value) {
  
  rekey_time_ = value;
}
inline void Connection::set_rekey_time(uint32_t value) {
  _internal_set_rekey_time(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.Connection.rekey_time)
}

// .opi_api.security.v1.Pools pools = 16;
inline bool Connection::_internal_has_pools() const {
  return this != internal_default_instance() && pools_ != nullptr;
}
inline bool Connection::has_pools() const {
  return _internal_has_pools();
}
inline void Connection::clear_pools() {
  if (GetArenaForAllocation() == nullptr && pools_ != nullptr) {
    delete pools_;
  }
  pools_ = nullptr;
}
inline const ::opi_api::security::v1::Pools& Connection::_internal_pools() const {
  const ::opi_api::security::v1::Pools* p = pools_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::Pools&>(
      ::opi_api::security::v1::_Pools_default_instance_);
}
inline const ::opi_api::security::v1::Pools& Connection::pools() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.pools)
  return _internal_pools();
}
inline void Connection::unsafe_arena_set_allocated_pools(
    ::opi_api::security::v1::Pools* pools) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pools_);
  }
  pools_ = pools;
  if (pools) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.Connection.pools)
}
inline ::opi_api::security::v1::Pools* Connection::release_pools() {
  
  ::opi_api::security::v1::Pools* temp = pools_;
  pools_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::Pools* Connection::unsafe_arena_release_pools() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Connection.pools)
  
  ::opi_api::security::v1::Pools* temp = pools_;
  pools_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::Pools* Connection::_internal_mutable_pools() {
  
  if (pools_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::Pools>(GetArenaForAllocation());
    pools_ = p;
  }
  return pools_;
}
inline ::opi_api::security::v1::Pools* Connection::mutable_pools() {
  ::opi_api::security::v1::Pools* _msg = _internal_mutable_pools();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Connection.pools)
  return _msg;
}
inline void Connection::set_allocated_pools(::opi_api::security::v1::Pools* pools) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pools_;
  }
  if (pools) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::Pools>::GetOwningArena(pools);
    if (message_arena != submessage_arena) {
      pools = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pools, submessage_arena);
    }
    
  } else {
    
  }
  pools_ = pools;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Connection.pools)
}

// .opi_api.security.v1.LocalAuth local_auth = 17;
inline bool Connection::_internal_has_local_auth() const {
  return this != internal_default_instance() && local_auth_ != nullptr;
}
inline bool Connection::has_local_auth() const {
  return _internal_has_local_auth();
}
inline void Connection::clear_local_auth() {
  if (GetArenaForAllocation() == nullptr && local_auth_ != nullptr) {
    delete local_auth_;
  }
  local_auth_ = nullptr;
}
inline const ::opi_api::security::v1::LocalAuth& Connection::_internal_local_auth() const {
  const ::opi_api::security::v1::LocalAuth* p = local_auth_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::LocalAuth&>(
      ::opi_api::security::v1::_LocalAuth_default_instance_);
}
inline const ::opi_api::security::v1::LocalAuth& Connection::local_auth() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.local_auth)
  return _internal_local_auth();
}
inline void Connection::unsafe_arena_set_allocated_local_auth(
    ::opi_api::security::v1::LocalAuth* local_auth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_auth_);
  }
  local_auth_ = local_auth;
  if (local_auth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.Connection.local_auth)
}
inline ::opi_api::security::v1::LocalAuth* Connection::release_local_auth() {
  
  ::opi_api::security::v1::LocalAuth* temp = local_auth_;
  local_auth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::LocalAuth* Connection::unsafe_arena_release_local_auth() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Connection.local_auth)
  
  ::opi_api::security::v1::LocalAuth* temp = local_auth_;
  local_auth_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::LocalAuth* Connection::_internal_mutable_local_auth() {
  
  if (local_auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::LocalAuth>(GetArenaForAllocation());
    local_auth_ = p;
  }
  return local_auth_;
}
inline ::opi_api::security::v1::LocalAuth* Connection::mutable_local_auth() {
  ::opi_api::security::v1::LocalAuth* _msg = _internal_mutable_local_auth();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Connection.local_auth)
  return _msg;
}
inline void Connection::set_allocated_local_auth(::opi_api::security::v1::LocalAuth* local_auth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete local_auth_;
  }
  if (local_auth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::LocalAuth>::GetOwningArena(local_auth);
    if (message_arena != submessage_arena) {
      local_auth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_auth, submessage_arena);
    }
    
  } else {
    
  }
  local_auth_ = local_auth;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Connection.local_auth)
}

// .opi_api.security.v1.RemoteAuth remote_auth = 18;
inline bool Connection::_internal_has_remote_auth() const {
  return this != internal_default_instance() && remote_auth_ != nullptr;
}
inline bool Connection::has_remote_auth() const {
  return _internal_has_remote_auth();
}
inline void Connection::clear_remote_auth() {
  if (GetArenaForAllocation() == nullptr && remote_auth_ != nullptr) {
    delete remote_auth_;
  }
  remote_auth_ = nullptr;
}
inline const ::opi_api::security::v1::RemoteAuth& Connection::_internal_remote_auth() const {
  const ::opi_api::security::v1::RemoteAuth* p = remote_auth_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::RemoteAuth&>(
      ::opi_api::security::v1::_RemoteAuth_default_instance_);
}
inline const ::opi_api::security::v1::RemoteAuth& Connection::remote_auth() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.remote_auth)
  return _internal_remote_auth();
}
inline void Connection::unsafe_arena_set_allocated_remote_auth(
    ::opi_api::security::v1::RemoteAuth* remote_auth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_auth_);
  }
  remote_auth_ = remote_auth;
  if (remote_auth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.Connection.remote_auth)
}
inline ::opi_api::security::v1::RemoteAuth* Connection::release_remote_auth() {
  
  ::opi_api::security::v1::RemoteAuth* temp = remote_auth_;
  remote_auth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::RemoteAuth* Connection::unsafe_arena_release_remote_auth() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.Connection.remote_auth)
  
  ::opi_api::security::v1::RemoteAuth* temp = remote_auth_;
  remote_auth_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::RemoteAuth* Connection::_internal_mutable_remote_auth() {
  
  if (remote_auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::RemoteAuth>(GetArenaForAllocation());
    remote_auth_ = p;
  }
  return remote_auth_;
}
inline ::opi_api::security::v1::RemoteAuth* Connection::mutable_remote_auth() {
  ::opi_api::security::v1::RemoteAuth* _msg = _internal_mutable_remote_auth();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Connection.remote_auth)
  return _msg;
}
inline void Connection::set_allocated_remote_auth(::opi_api::security::v1::RemoteAuth* remote_auth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete remote_auth_;
  }
  if (remote_auth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::RemoteAuth>::GetOwningArena(remote_auth);
    if (message_arena != submessage_arena) {
      remote_auth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_auth, submessage_arena);
    }
    
  } else {
    
  }
  remote_auth_ = remote_auth;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.Connection.remote_auth)
}

// repeated .opi_api.security.v1.Child children = 19;
inline int Connection::_internal_children_size() const {
  return children_.size();
}
inline int Connection::children_size() const {
  return _internal_children_size();
}
inline void Connection::clear_children() {
  children_.Clear();
}
inline ::opi_api::security::v1::Child* Connection::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.Connection.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Child >*
Connection::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.Connection.children)
  return &children_;
}
inline const ::opi_api::security::v1::Child& Connection::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::opi_api::security::v1::Child& Connection::children(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.Connection.children)
  return _internal_children(index);
}
inline ::opi_api::security::v1::Child* Connection::_internal_add_children() {
  return children_.Add();
}
inline ::opi_api::security::v1::Child* Connection::add_children() {
  ::opi_api::security::v1::Child* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:opi_api.security.v1.Connection.children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Child >&
Connection::children() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.Connection.children)
  return children_;
}

// -------------------------------------------------------------------

// IPsecVersionReq

// -------------------------------------------------------------------

// IPsecVersionResp

// string daemon = 1;
inline void IPsecVersionResp::clear_daemon() {
  daemon_.ClearToEmpty();
}
inline const std::string& IPsecVersionResp::daemon() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecVersionResp.daemon)
  return _internal_daemon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecVersionResp::set_daemon(ArgT0&& arg0, ArgT... args) {
 
 daemon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecVersionResp.daemon)
}
inline std::string* IPsecVersionResp::mutable_daemon() {
  std::string* _s = _internal_mutable_daemon();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecVersionResp.daemon)
  return _s;
}
inline const std::string& IPsecVersionResp::_internal_daemon() const {
  return daemon_.Get();
}
inline void IPsecVersionResp::_internal_set_daemon(const std::string& value) {
  
  daemon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecVersionResp::_internal_mutable_daemon() {
  
  return daemon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecVersionResp::release_daemon() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecVersionResp.daemon)
  return daemon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecVersionResp::set_allocated_daemon(std::string* daemon) {
  if (daemon != nullptr) {
    
  } else {
    
  }
  daemon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), daemon,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (daemon_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    daemon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecVersionResp.daemon)
}

// string version = 2;
inline void IPsecVersionResp::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& IPsecVersionResp::version() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecVersionResp.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecVersionResp::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecVersionResp.version)
}
inline std::string* IPsecVersionResp::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecVersionResp.version)
  return _s;
}
inline const std::string& IPsecVersionResp::_internal_version() const {
  return version_.Get();
}
inline void IPsecVersionResp::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecVersionResp::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecVersionResp::release_version() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecVersionResp.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecVersionResp::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecVersionResp.version)
}

// string sysname = 3;
inline void IPsecVersionResp::clear_sysname() {
  sysname_.ClearToEmpty();
}
inline const std::string& IPsecVersionResp::sysname() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecVersionResp.sysname)
  return _internal_sysname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecVersionResp::set_sysname(ArgT0&& arg0, ArgT... args) {
 
 sysname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecVersionResp.sysname)
}
inline std::string* IPsecVersionResp::mutable_sysname() {
  std::string* _s = _internal_mutable_sysname();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecVersionResp.sysname)
  return _s;
}
inline const std::string& IPsecVersionResp::_internal_sysname() const {
  return sysname_.Get();
}
inline void IPsecVersionResp::_internal_set_sysname(const std::string& value) {
  
  sysname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecVersionResp::_internal_mutable_sysname() {
  
  return sysname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecVersionResp::release_sysname() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecVersionResp.sysname)
  return sysname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecVersionResp::set_allocated_sysname(std::string* sysname) {
  if (sysname != nullptr) {
    
  } else {
    
  }
  sysname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sysname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sysname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sysname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecVersionResp.sysname)
}

// string release = 4;
inline void IPsecVersionResp::clear_release() {
  release_.ClearToEmpty();
}
inline const std::string& IPsecVersionResp::release() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecVersionResp.release)
  return _internal_release();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecVersionResp::set_release(ArgT0&& arg0, ArgT... args) {
 
 release_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecVersionResp.release)
}
inline std::string* IPsecVersionResp::mutable_release() {
  std::string* _s = _internal_mutable_release();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecVersionResp.release)
  return _s;
}
inline const std::string& IPsecVersionResp::_internal_release() const {
  return release_.Get();
}
inline void IPsecVersionResp::_internal_set_release(const std::string& value) {
  
  release_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecVersionResp::_internal_mutable_release() {
  
  return release_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecVersionResp::release_release() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecVersionResp.release)
  return release_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecVersionResp::set_allocated_release(std::string* release) {
  if (release != nullptr) {
    
  } else {
    
  }
  release_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), release,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (release_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    release_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecVersionResp.release)
}

// string machine = 5;
inline void IPsecVersionResp::clear_machine() {
  machine_.ClearToEmpty();
}
inline const std::string& IPsecVersionResp::machine() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecVersionResp.machine)
  return _internal_machine();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecVersionResp::set_machine(ArgT0&& arg0, ArgT... args) {
 
 machine_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecVersionResp.machine)
}
inline std::string* IPsecVersionResp::mutable_machine() {
  std::string* _s = _internal_mutable_machine();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecVersionResp.machine)
  return _s;
}
inline const std::string& IPsecVersionResp::_internal_machine() const {
  return machine_.Get();
}
inline void IPsecVersionResp::_internal_set_machine(const std::string& value) {
  
  machine_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecVersionResp::_internal_mutable_machine() {
  
  return machine_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecVersionResp::release_machine() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecVersionResp.machine)
  return machine_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecVersionResp::set_allocated_machine(std::string* machine) {
  if (machine != nullptr) {
    
  } else {
    
  }
  machine_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecVersionResp.machine)
}

// -------------------------------------------------------------------

// IPsecStatsReq

// -------------------------------------------------------------------

// IPsecStatsResp

// string status = 1;
inline void IPsecStatsResp::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& IPsecStatsResp::status() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecStatsResp.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecStatsResp::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecStatsResp.status)
}
inline std::string* IPsecStatsResp::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecStatsResp.status)
  return _s;
}
inline const std::string& IPsecStatsResp::_internal_status() const {
  return status_.Get();
}
inline void IPsecStatsResp::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecStatsResp::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecStatsResp::release_status() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecStatsResp.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecStatsResp::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecStatsResp.status)
}

// -------------------------------------------------------------------

// IPsecInitiateReq

// string child = 1;
inline void IPsecInitiateReq::clear_child() {
  child_.ClearToEmpty();
}
inline const std::string& IPsecInitiateReq::child() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecInitiateReq.child)
  return _internal_child();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecInitiateReq::set_child(ArgT0&& arg0, ArgT... args) {
 
 child_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecInitiateReq.child)
}
inline std::string* IPsecInitiateReq::mutable_child() {
  std::string* _s = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecInitiateReq.child)
  return _s;
}
inline const std::string& IPsecInitiateReq::_internal_child() const {
  return child_.Get();
}
inline void IPsecInitiateReq::_internal_set_child(const std::string& value) {
  
  child_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecInitiateReq::_internal_mutable_child() {
  
  return child_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecInitiateReq::release_child() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecInitiateReq.child)
  return child_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecInitiateReq::set_allocated_child(std::string* child) {
  if (child != nullptr) {
    
  } else {
    
  }
  child_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), child,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (child_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    child_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecInitiateReq.child)
}

// string ike = 2;
inline void IPsecInitiateReq::clear_ike() {
  ike_.ClearToEmpty();
}
inline const std::string& IPsecInitiateReq::ike() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecInitiateReq.ike)
  return _internal_ike();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecInitiateReq::set_ike(ArgT0&& arg0, ArgT... args) {
 
 ike_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecInitiateReq.ike)
}
inline std::string* IPsecInitiateReq::mutable_ike() {
  std::string* _s = _internal_mutable_ike();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecInitiateReq.ike)
  return _s;
}
inline const std::string& IPsecInitiateReq::_internal_ike() const {
  return ike_.Get();
}
inline void IPsecInitiateReq::_internal_set_ike(const std::string& value) {
  
  ike_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecInitiateReq::_internal_mutable_ike() {
  
  return ike_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecInitiateReq::release_ike() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecInitiateReq.ike)
  return ike_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecInitiateReq::set_allocated_ike(std::string* ike) {
  if (ike != nullptr) {
    
  } else {
    
  }
  ike_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ike,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ike_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ike_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecInitiateReq.ike)
}

// string timeout = 3;
inline void IPsecInitiateReq::clear_timeout() {
  timeout_.ClearToEmpty();
}
inline const std::string& IPsecInitiateReq::timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecInitiateReq.timeout)
  return _internal_timeout();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecInitiateReq::set_timeout(ArgT0&& arg0, ArgT... args) {
 
 timeout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecInitiateReq.timeout)
}
inline std::string* IPsecInitiateReq::mutable_timeout() {
  std::string* _s = _internal_mutable_timeout();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecInitiateReq.timeout)
  return _s;
}
inline const std::string& IPsecInitiateReq::_internal_timeout() const {
  return timeout_.Get();
}
inline void IPsecInitiateReq::_internal_set_timeout(const std::string& value) {
  
  timeout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecInitiateReq::_internal_mutable_timeout() {
  
  return timeout_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecInitiateReq::release_timeout() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecInitiateReq.timeout)
  return timeout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecInitiateReq::set_allocated_timeout(std::string* timeout) {
  if (timeout != nullptr) {
    
  } else {
    
  }
  timeout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeout,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (timeout_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    timeout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecInitiateReq.timeout)
}

// string loglevel = 4;
inline void IPsecInitiateReq::clear_loglevel() {
  loglevel_.ClearToEmpty();
}
inline const std::string& IPsecInitiateReq::loglevel() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecInitiateReq.loglevel)
  return _internal_loglevel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecInitiateReq::set_loglevel(ArgT0&& arg0, ArgT... args) {
 
 loglevel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecInitiateReq.loglevel)
}
inline std::string* IPsecInitiateReq::mutable_loglevel() {
  std::string* _s = _internal_mutable_loglevel();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecInitiateReq.loglevel)
  return _s;
}
inline const std::string& IPsecInitiateReq::_internal_loglevel() const {
  return loglevel_.Get();
}
inline void IPsecInitiateReq::_internal_set_loglevel(const std::string& value) {
  
  loglevel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecInitiateReq::_internal_mutable_loglevel() {
  
  return loglevel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecInitiateReq::release_loglevel() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecInitiateReq.loglevel)
  return loglevel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecInitiateReq::set_allocated_loglevel(std::string* loglevel) {
  if (loglevel != nullptr) {
    
  } else {
    
  }
  loglevel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loglevel,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (loglevel_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    loglevel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecInitiateReq.loglevel)
}

// -------------------------------------------------------------------

// IPsecInitiateResp

// -------------------------------------------------------------------

// IPsecTerminateReq

// string child = 1;
inline void IPsecTerminateReq::clear_child() {
  child_.ClearToEmpty();
}
inline const std::string& IPsecTerminateReq::child() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecTerminateReq.child)
  return _internal_child();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecTerminateReq::set_child(ArgT0&& arg0, ArgT... args) {
 
 child_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecTerminateReq.child)
}
inline std::string* IPsecTerminateReq::mutable_child() {
  std::string* _s = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecTerminateReq.child)
  return _s;
}
inline const std::string& IPsecTerminateReq::_internal_child() const {
  return child_.Get();
}
inline void IPsecTerminateReq::_internal_set_child(const std::string& value) {
  
  child_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecTerminateReq::_internal_mutable_child() {
  
  return child_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecTerminateReq::release_child() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecTerminateReq.child)
  return child_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecTerminateReq::set_allocated_child(std::string* child) {
  if (child != nullptr) {
    
  } else {
    
  }
  child_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), child,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (child_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    child_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecTerminateReq.child)
}

// string ike = 2;
inline void IPsecTerminateReq::clear_ike() {
  ike_.ClearToEmpty();
}
inline const std::string& IPsecTerminateReq::ike() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecTerminateReq.ike)
  return _internal_ike();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecTerminateReq::set_ike(ArgT0&& arg0, ArgT... args) {
 
 ike_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecTerminateReq.ike)
}
inline std::string* IPsecTerminateReq::mutable_ike() {
  std::string* _s = _internal_mutable_ike();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecTerminateReq.ike)
  return _s;
}
inline const std::string& IPsecTerminateReq::_internal_ike() const {
  return ike_.Get();
}
inline void IPsecTerminateReq::_internal_set_ike(const std::string& value) {
  
  ike_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecTerminateReq::_internal_mutable_ike() {
  
  return ike_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecTerminateReq::release_ike() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecTerminateReq.ike)
  return ike_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecTerminateReq::set_allocated_ike(std::string* ike) {
  if (ike != nullptr) {
    
  } else {
    
  }
  ike_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ike,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ike_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ike_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecTerminateReq.ike)
}

// uint64 child_id = 3;
inline void IPsecTerminateReq::clear_child_id() {
  child_id_ = uint64_t{0u};
}
inline uint64_t IPsecTerminateReq::_internal_child_id() const {
  return child_id_;
}
inline uint64_t IPsecTerminateReq::child_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecTerminateReq.child_id)
  return _internal_child_id();
}
inline void IPsecTerminateReq::_internal_set_child_id(uint64_t value) {
  
  child_id_ = value;
}
inline void IPsecTerminateReq::set_child_id(uint64_t value) {
  _internal_set_child_id(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecTerminateReq.child_id)
}

// uint64 ike_id = 4;
inline void IPsecTerminateReq::clear_ike_id() {
  ike_id_ = uint64_t{0u};
}
inline uint64_t IPsecTerminateReq::_internal_ike_id() const {
  return ike_id_;
}
inline uint64_t IPsecTerminateReq::ike_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecTerminateReq.ike_id)
  return _internal_ike_id();
}
inline void IPsecTerminateReq::_internal_set_ike_id(uint64_t value) {
  
  ike_id_ = value;
}
inline void IPsecTerminateReq::set_ike_id(uint64_t value) {
  _internal_set_ike_id(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecTerminateReq.ike_id)
}

// string force = 5;
inline void IPsecTerminateReq::clear_force() {
  force_.ClearToEmpty();
}
inline const std::string& IPsecTerminateReq::force() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecTerminateReq.force)
  return _internal_force();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecTerminateReq::set_force(ArgT0&& arg0, ArgT... args) {
 
 force_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecTerminateReq.force)
}
inline std::string* IPsecTerminateReq::mutable_force() {
  std::string* _s = _internal_mutable_force();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecTerminateReq.force)
  return _s;
}
inline const std::string& IPsecTerminateReq::_internal_force() const {
  return force_.Get();
}
inline void IPsecTerminateReq::_internal_set_force(const std::string& value) {
  
  force_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecTerminateReq::_internal_mutable_force() {
  
  return force_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecTerminateReq::release_force() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecTerminateReq.force)
  return force_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecTerminateReq::set_allocated_force(std::string* force) {
  if (force != nullptr) {
    
  } else {
    
  }
  force_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), force,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (force_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    force_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecTerminateReq.force)
}

// string timeout = 6;
inline void IPsecTerminateReq::clear_timeout() {
  timeout_.ClearToEmpty();
}
inline const std::string& IPsecTerminateReq::timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecTerminateReq.timeout)
  return _internal_timeout();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecTerminateReq::set_timeout(ArgT0&& arg0, ArgT... args) {
 
 timeout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecTerminateReq.timeout)
}
inline std::string* IPsecTerminateReq::mutable_timeout() {
  std::string* _s = _internal_mutable_timeout();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecTerminateReq.timeout)
  return _s;
}
inline const std::string& IPsecTerminateReq::_internal_timeout() const {
  return timeout_.Get();
}
inline void IPsecTerminateReq::_internal_set_timeout(const std::string& value) {
  
  timeout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecTerminateReq::_internal_mutable_timeout() {
  
  return timeout_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecTerminateReq::release_timeout() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecTerminateReq.timeout)
  return timeout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecTerminateReq::set_allocated_timeout(std::string* timeout) {
  if (timeout != nullptr) {
    
  } else {
    
  }
  timeout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timeout,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (timeout_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    timeout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecTerminateReq.timeout)
}

// string loglevel = 7;
inline void IPsecTerminateReq::clear_loglevel() {
  loglevel_.ClearToEmpty();
}
inline const std::string& IPsecTerminateReq::loglevel() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecTerminateReq.loglevel)
  return _internal_loglevel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecTerminateReq::set_loglevel(ArgT0&& arg0, ArgT... args) {
 
 loglevel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecTerminateReq.loglevel)
}
inline std::string* IPsecTerminateReq::mutable_loglevel() {
  std::string* _s = _internal_mutable_loglevel();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecTerminateReq.loglevel)
  return _s;
}
inline const std::string& IPsecTerminateReq::_internal_loglevel() const {
  return loglevel_.Get();
}
inline void IPsecTerminateReq::_internal_set_loglevel(const std::string& value) {
  
  loglevel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecTerminateReq::_internal_mutable_loglevel() {
  
  return loglevel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecTerminateReq::release_loglevel() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecTerminateReq.loglevel)
  return loglevel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecTerminateReq::set_allocated_loglevel(std::string* loglevel) {
  if (loglevel != nullptr) {
    
  } else {
    
  }
  loglevel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loglevel,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (loglevel_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    loglevel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecTerminateReq.loglevel)
}

// -------------------------------------------------------------------

// IPsecTerminateResp

// string success = 1;
inline void IPsecTerminateResp::clear_success() {
  success_.ClearToEmpty();
}
inline const std::string& IPsecTerminateResp::success() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecTerminateResp.success)
  return _internal_success();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecTerminateResp::set_success(ArgT0&& arg0, ArgT... args) {
 
 success_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecTerminateResp.success)
}
inline std::string* IPsecTerminateResp::mutable_success() {
  std::string* _s = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecTerminateResp.success)
  return _s;
}
inline const std::string& IPsecTerminateResp::_internal_success() const {
  return success_.Get();
}
inline void IPsecTerminateResp::_internal_set_success(const std::string& value) {
  
  success_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecTerminateResp::_internal_mutable_success() {
  
  return success_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecTerminateResp::release_success() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecTerminateResp.success)
  return success_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecTerminateResp::set_allocated_success(std::string* success) {
  if (success != nullptr) {
    
  } else {
    
  }
  success_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), success,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (success_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecTerminateResp.success)
}

// uint32 matches = 2;
inline void IPsecTerminateResp::clear_matches() {
  matches_ = 0u;
}
inline uint32_t IPsecTerminateResp::_internal_matches() const {
  return matches_;
}
inline uint32_t IPsecTerminateResp::matches() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecTerminateResp.matches)
  return _internal_matches();
}
inline void IPsecTerminateResp::_internal_set_matches(uint32_t value) {
  
  matches_ = value;
}
inline void IPsecTerminateResp::set_matches(uint32_t value) {
  _internal_set_matches(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecTerminateResp.matches)
}

// uint32 terminated = 3;
inline void IPsecTerminateResp::clear_terminated() {
  terminated_ = 0u;
}
inline uint32_t IPsecTerminateResp::_internal_terminated() const {
  return terminated_;
}
inline uint32_t IPsecTerminateResp::terminated() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecTerminateResp.terminated)
  return _internal_terminated();
}
inline void IPsecTerminateResp::_internal_set_terminated(uint32_t value) {
  
  terminated_ = value;
}
inline void IPsecTerminateResp::set_terminated(uint32_t value) {
  _internal_set_terminated(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecTerminateResp.terminated)
}

// -------------------------------------------------------------------

// IPsecRekeyReq

// string child = 1;
inline void IPsecRekeyReq::clear_child() {
  child_.ClearToEmpty();
}
inline const std::string& IPsecRekeyReq::child() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecRekeyReq.child)
  return _internal_child();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecRekeyReq::set_child(ArgT0&& arg0, ArgT... args) {
 
 child_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecRekeyReq.child)
}
inline std::string* IPsecRekeyReq::mutable_child() {
  std::string* _s = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecRekeyReq.child)
  return _s;
}
inline const std::string& IPsecRekeyReq::_internal_child() const {
  return child_.Get();
}
inline void IPsecRekeyReq::_internal_set_child(const std::string& value) {
  
  child_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecRekeyReq::_internal_mutable_child() {
  
  return child_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecRekeyReq::release_child() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecRekeyReq.child)
  return child_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecRekeyReq::set_allocated_child(std::string* child) {
  if (child != nullptr) {
    
  } else {
    
  }
  child_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), child,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (child_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    child_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecRekeyReq.child)
}

// string ike = 2;
inline void IPsecRekeyReq::clear_ike() {
  ike_.ClearToEmpty();
}
inline const std::string& IPsecRekeyReq::ike() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecRekeyReq.ike)
  return _internal_ike();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecRekeyReq::set_ike(ArgT0&& arg0, ArgT... args) {
 
 ike_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecRekeyReq.ike)
}
inline std::string* IPsecRekeyReq::mutable_ike() {
  std::string* _s = _internal_mutable_ike();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecRekeyReq.ike)
  return _s;
}
inline const std::string& IPsecRekeyReq::_internal_ike() const {
  return ike_.Get();
}
inline void IPsecRekeyReq::_internal_set_ike(const std::string& value) {
  
  ike_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecRekeyReq::_internal_mutable_ike() {
  
  return ike_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecRekeyReq::release_ike() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecRekeyReq.ike)
  return ike_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecRekeyReq::set_allocated_ike(std::string* ike) {
  if (ike != nullptr) {
    
  } else {
    
  }
  ike_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ike,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ike_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ike_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecRekeyReq.ike)
}

// uint64 child_id = 3;
inline void IPsecRekeyReq::clear_child_id() {
  child_id_ = uint64_t{0u};
}
inline uint64_t IPsecRekeyReq::_internal_child_id() const {
  return child_id_;
}
inline uint64_t IPsecRekeyReq::child_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecRekeyReq.child_id)
  return _internal_child_id();
}
inline void IPsecRekeyReq::_internal_set_child_id(uint64_t value) {
  
  child_id_ = value;
}
inline void IPsecRekeyReq::set_child_id(uint64_t value) {
  _internal_set_child_id(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecRekeyReq.child_id)
}

// uint64 ike_id = 4;
inline void IPsecRekeyReq::clear_ike_id() {
  ike_id_ = uint64_t{0u};
}
inline uint64_t IPsecRekeyReq::_internal_ike_id() const {
  return ike_id_;
}
inline uint64_t IPsecRekeyReq::ike_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecRekeyReq.ike_id)
  return _internal_ike_id();
}
inline void IPsecRekeyReq::_internal_set_ike_id(uint64_t value) {
  
  ike_id_ = value;
}
inline void IPsecRekeyReq::set_ike_id(uint64_t value) {
  _internal_set_ike_id(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecRekeyReq.ike_id)
}

// string reauth = 5;
inline void IPsecRekeyReq::clear_reauth() {
  reauth_.ClearToEmpty();
}
inline const std::string& IPsecRekeyReq::reauth() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecRekeyReq.reauth)
  return _internal_reauth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecRekeyReq::set_reauth(ArgT0&& arg0, ArgT... args) {
 
 reauth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecRekeyReq.reauth)
}
inline std::string* IPsecRekeyReq::mutable_reauth() {
  std::string* _s = _internal_mutable_reauth();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecRekeyReq.reauth)
  return _s;
}
inline const std::string& IPsecRekeyReq::_internal_reauth() const {
  return reauth_.Get();
}
inline void IPsecRekeyReq::_internal_set_reauth(const std::string& value) {
  
  reauth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecRekeyReq::_internal_mutable_reauth() {
  
  return reauth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecRekeyReq::release_reauth() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecRekeyReq.reauth)
  return reauth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecRekeyReq::set_allocated_reauth(std::string* reauth) {
  if (reauth != nullptr) {
    
  } else {
    
  }
  reauth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reauth,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reauth_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reauth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecRekeyReq.reauth)
}

// -------------------------------------------------------------------

// IPsecRekeyResp

// string success = 1;
inline void IPsecRekeyResp::clear_success() {
  success_.ClearToEmpty();
}
inline const std::string& IPsecRekeyResp::success() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecRekeyResp.success)
  return _internal_success();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecRekeyResp::set_success(ArgT0&& arg0, ArgT... args) {
 
 success_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecRekeyResp.success)
}
inline std::string* IPsecRekeyResp::mutable_success() {
  std::string* _s = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecRekeyResp.success)
  return _s;
}
inline const std::string& IPsecRekeyResp::_internal_success() const {
  return success_.Get();
}
inline void IPsecRekeyResp::_internal_set_success(const std::string& value) {
  
  success_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecRekeyResp::_internal_mutable_success() {
  
  return success_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecRekeyResp::release_success() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecRekeyResp.success)
  return success_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecRekeyResp::set_allocated_success(std::string* success) {
  if (success != nullptr) {
    
  } else {
    
  }
  success_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), success,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (success_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecRekeyResp.success)
}

// uint32 matches = 2;
inline void IPsecRekeyResp::clear_matches() {
  matches_ = 0u;
}
inline uint32_t IPsecRekeyResp::_internal_matches() const {
  return matches_;
}
inline uint32_t IPsecRekeyResp::matches() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecRekeyResp.matches)
  return _internal_matches();
}
inline void IPsecRekeyResp::_internal_set_matches(uint32_t value) {
  
  matches_ = value;
}
inline void IPsecRekeyResp::set_matches(uint32_t value) {
  _internal_set_matches(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecRekeyResp.matches)
}

// -------------------------------------------------------------------

// IPsecListSasReq

// string noblock = 1;
inline void IPsecListSasReq::clear_noblock() {
  noblock_.ClearToEmpty();
}
inline const std::string& IPsecListSasReq::noblock() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecListSasReq.noblock)
  return _internal_noblock();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecListSasReq::set_noblock(ArgT0&& arg0, ArgT... args) {
 
 noblock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecListSasReq.noblock)
}
inline std::string* IPsecListSasReq::mutable_noblock() {
  std::string* _s = _internal_mutable_noblock();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecListSasReq.noblock)
  return _s;
}
inline const std::string& IPsecListSasReq::_internal_noblock() const {
  return noblock_.Get();
}
inline void IPsecListSasReq::_internal_set_noblock(const std::string& value) {
  
  noblock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecListSasReq::_internal_mutable_noblock() {
  
  return noblock_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecListSasReq::release_noblock() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecListSasReq.noblock)
  return noblock_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecListSasReq::set_allocated_noblock(std::string* noblock) {
  if (noblock != nullptr) {
    
  } else {
    
  }
  noblock_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), noblock,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (noblock_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    noblock_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecListSasReq.noblock)
}

// string ike = 2;
inline void IPsecListSasReq::clear_ike() {
  ike_.ClearToEmpty();
}
inline const std::string& IPsecListSasReq::ike() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecListSasReq.ike)
  return _internal_ike();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecListSasReq::set_ike(ArgT0&& arg0, ArgT... args) {
 
 ike_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecListSasReq.ike)
}
inline std::string* IPsecListSasReq::mutable_ike() {
  std::string* _s = _internal_mutable_ike();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecListSasReq.ike)
  return _s;
}
inline const std::string& IPsecListSasReq::_internal_ike() const {
  return ike_.Get();
}
inline void IPsecListSasReq::_internal_set_ike(const std::string& value) {
  
  ike_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecListSasReq::_internal_mutable_ike() {
  
  return ike_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecListSasReq::release_ike() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecListSasReq.ike)
  return ike_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecListSasReq::set_allocated_ike(std::string* ike) {
  if (ike != nullptr) {
    
  } else {
    
  }
  ike_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ike,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ike_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ike_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecListSasReq.ike)
}

// uint64 ike_id = 3;
inline void IPsecListSasReq::clear_ike_id() {
  ike_id_ = uint64_t{0u};
}
inline uint64_t IPsecListSasReq::_internal_ike_id() const {
  return ike_id_;
}
inline uint64_t IPsecListSasReq::ike_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecListSasReq.ike_id)
  return _internal_ike_id();
}
inline void IPsecListSasReq::_internal_set_ike_id(uint64_t value) {
  
  ike_id_ = value;
}
inline void IPsecListSasReq::set_ike_id(uint64_t value) {
  _internal_set_ike_id(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecListSasReq.ike_id)
}

// string child = 4;
inline void IPsecListSasReq::clear_child() {
  child_.ClearToEmpty();
}
inline const std::string& IPsecListSasReq::child() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecListSasReq.child)
  return _internal_child();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecListSasReq::set_child(ArgT0&& arg0, ArgT... args) {
 
 child_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecListSasReq.child)
}
inline std::string* IPsecListSasReq::mutable_child() {
  std::string* _s = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecListSasReq.child)
  return _s;
}
inline const std::string& IPsecListSasReq::_internal_child() const {
  return child_.Get();
}
inline void IPsecListSasReq::_internal_set_child(const std::string& value) {
  
  child_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecListSasReq::_internal_mutable_child() {
  
  return child_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecListSasReq::release_child() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecListSasReq.child)
  return child_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecListSasReq::set_allocated_child(std::string* child) {
  if (child != nullptr) {
    
  } else {
    
  }
  child_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), child,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (child_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    child_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecListSasReq.child)
}

// uint64 child_id = 5;
inline void IPsecListSasReq::clear_child_id() {
  child_id_ = uint64_t{0u};
}
inline uint64_t IPsecListSasReq::_internal_child_id() const {
  return child_id_;
}
inline uint64_t IPsecListSasReq::child_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecListSasReq.child_id)
  return _internal_child_id();
}
inline void IPsecListSasReq::_internal_set_child_id(uint64_t value) {
  
  child_id_ = value;
}
inline void IPsecListSasReq::set_child_id(uint64_t value) {
  _internal_set_child_id(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecListSasReq.child_id)
}

// -------------------------------------------------------------------

// ListChildSa

// string name = 1;
inline void ListChildSa::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListChildSa::name() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.name)
}
inline std::string* ListChildSa::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.name)
  return _s;
}
inline const std::string& ListChildSa::_internal_name() const {
  return name_.Get();
}
inline void ListChildSa::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.name)
}

// string protocol = 2;
inline void ListChildSa::clear_protocol() {
  protocol_.ClearToEmpty();
}
inline const std::string& ListChildSa::protocol() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.protocol)
  return _internal_protocol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_protocol(ArgT0&& arg0, ArgT... args) {
 
 protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.protocol)
}
inline std::string* ListChildSa::mutable_protocol() {
  std::string* _s = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.protocol)
  return _s;
}
inline const std::string& ListChildSa::_internal_protocol() const {
  return protocol_.Get();
}
inline void ListChildSa::_internal_set_protocol(const std::string& value) {
  
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_protocol() {
  
  return protocol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_protocol() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.protocol)
  return protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (protocol_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.protocol)
}

// string encap = 3;
inline void ListChildSa::clear_encap() {
  encap_.ClearToEmpty();
}
inline const std::string& ListChildSa::encap() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.encap)
  return _internal_encap();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_encap(ArgT0&& arg0, ArgT... args) {
 
 encap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.encap)
}
inline std::string* ListChildSa::mutable_encap() {
  std::string* _s = _internal_mutable_encap();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.encap)
  return _s;
}
inline const std::string& ListChildSa::_internal_encap() const {
  return encap_.Get();
}
inline void ListChildSa::_internal_set_encap(const std::string& value) {
  
  encap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_encap() {
  
  return encap_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_encap() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.encap)
  return encap_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_encap(std::string* encap) {
  if (encap != nullptr) {
    
  } else {
    
  }
  encap_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encap,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encap_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.encap)
}

// string spi_in = 4;
inline void ListChildSa::clear_spi_in() {
  spi_in_.ClearToEmpty();
}
inline const std::string& ListChildSa::spi_in() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.spi_in)
  return _internal_spi_in();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_spi_in(ArgT0&& arg0, ArgT... args) {
 
 spi_in_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.spi_in)
}
inline std::string* ListChildSa::mutable_spi_in() {
  std::string* _s = _internal_mutable_spi_in();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.spi_in)
  return _s;
}
inline const std::string& ListChildSa::_internal_spi_in() const {
  return spi_in_.Get();
}
inline void ListChildSa::_internal_set_spi_in(const std::string& value) {
  
  spi_in_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_spi_in() {
  
  return spi_in_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_spi_in() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.spi_in)
  return spi_in_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_spi_in(std::string* spi_in) {
  if (spi_in != nullptr) {
    
  } else {
    
  }
  spi_in_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spi_in,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (spi_in_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    spi_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.spi_in)
}

// string spi_out = 5;
inline void ListChildSa::clear_spi_out() {
  spi_out_.ClearToEmpty();
}
inline const std::string& ListChildSa::spi_out() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.spi_out)
  return _internal_spi_out();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_spi_out(ArgT0&& arg0, ArgT... args) {
 
 spi_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.spi_out)
}
inline std::string* ListChildSa::mutable_spi_out() {
  std::string* _s = _internal_mutable_spi_out();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.spi_out)
  return _s;
}
inline const std::string& ListChildSa::_internal_spi_out() const {
  return spi_out_.Get();
}
inline void ListChildSa::_internal_set_spi_out(const std::string& value) {
  
  spi_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_spi_out() {
  
  return spi_out_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_spi_out() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.spi_out)
  return spi_out_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_spi_out(std::string* spi_out) {
  if (spi_out != nullptr) {
    
  } else {
    
  }
  spi_out_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spi_out,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (spi_out_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    spi_out_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.spi_out)
}

// string cpi_in = 6;
inline void ListChildSa::clear_cpi_in() {
  cpi_in_.ClearToEmpty();
}
inline const std::string& ListChildSa::cpi_in() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.cpi_in)
  return _internal_cpi_in();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_cpi_in(ArgT0&& arg0, ArgT... args) {
 
 cpi_in_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.cpi_in)
}
inline std::string* ListChildSa::mutable_cpi_in() {
  std::string* _s = _internal_mutable_cpi_in();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.cpi_in)
  return _s;
}
inline const std::string& ListChildSa::_internal_cpi_in() const {
  return cpi_in_.Get();
}
inline void ListChildSa::_internal_set_cpi_in(const std::string& value) {
  
  cpi_in_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_cpi_in() {
  
  return cpi_in_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_cpi_in() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.cpi_in)
  return cpi_in_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_cpi_in(std::string* cpi_in) {
  if (cpi_in != nullptr) {
    
  } else {
    
  }
  cpi_in_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpi_in,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cpi_in_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cpi_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.cpi_in)
}

// string cpi_out = 7;
inline void ListChildSa::clear_cpi_out() {
  cpi_out_.ClearToEmpty();
}
inline const std::string& ListChildSa::cpi_out() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.cpi_out)
  return _internal_cpi_out();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_cpi_out(ArgT0&& arg0, ArgT... args) {
 
 cpi_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.cpi_out)
}
inline std::string* ListChildSa::mutable_cpi_out() {
  std::string* _s = _internal_mutable_cpi_out();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.cpi_out)
  return _s;
}
inline const std::string& ListChildSa::_internal_cpi_out() const {
  return cpi_out_.Get();
}
inline void ListChildSa::_internal_set_cpi_out(const std::string& value) {
  
  cpi_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_cpi_out() {
  
  return cpi_out_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_cpi_out() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.cpi_out)
  return cpi_out_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_cpi_out(std::string* cpi_out) {
  if (cpi_out != nullptr) {
    
  } else {
    
  }
  cpi_out_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpi_out,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cpi_out_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cpi_out_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.cpi_out)
}

// string mark_in = 8;
inline void ListChildSa::clear_mark_in() {
  mark_in_.ClearToEmpty();
}
inline const std::string& ListChildSa::mark_in() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.mark_in)
  return _internal_mark_in();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_mark_in(ArgT0&& arg0, ArgT... args) {
 
 mark_in_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.mark_in)
}
inline std::string* ListChildSa::mutable_mark_in() {
  std::string* _s = _internal_mutable_mark_in();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.mark_in)
  return _s;
}
inline const std::string& ListChildSa::_internal_mark_in() const {
  return mark_in_.Get();
}
inline void ListChildSa::_internal_set_mark_in(const std::string& value) {
  
  mark_in_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_mark_in() {
  
  return mark_in_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_mark_in() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.mark_in)
  return mark_in_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_mark_in(std::string* mark_in) {
  if (mark_in != nullptr) {
    
  } else {
    
  }
  mark_in_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mark_in,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mark_in_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mark_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.mark_in)
}

// string mark_mask_in = 9;
inline void ListChildSa::clear_mark_mask_in() {
  mark_mask_in_.ClearToEmpty();
}
inline const std::string& ListChildSa::mark_mask_in() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.mark_mask_in)
  return _internal_mark_mask_in();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_mark_mask_in(ArgT0&& arg0, ArgT... args) {
 
 mark_mask_in_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.mark_mask_in)
}
inline std::string* ListChildSa::mutable_mark_mask_in() {
  std::string* _s = _internal_mutable_mark_mask_in();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.mark_mask_in)
  return _s;
}
inline const std::string& ListChildSa::_internal_mark_mask_in() const {
  return mark_mask_in_.Get();
}
inline void ListChildSa::_internal_set_mark_mask_in(const std::string& value) {
  
  mark_mask_in_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_mark_mask_in() {
  
  return mark_mask_in_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_mark_mask_in() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.mark_mask_in)
  return mark_mask_in_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_mark_mask_in(std::string* mark_mask_in) {
  if (mark_mask_in != nullptr) {
    
  } else {
    
  }
  mark_mask_in_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mark_mask_in,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mark_mask_in_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mark_mask_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.mark_mask_in)
}

// string mark_out = 10;
inline void ListChildSa::clear_mark_out() {
  mark_out_.ClearToEmpty();
}
inline const std::string& ListChildSa::mark_out() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.mark_out)
  return _internal_mark_out();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_mark_out(ArgT0&& arg0, ArgT... args) {
 
 mark_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.mark_out)
}
inline std::string* ListChildSa::mutable_mark_out() {
  std::string* _s = _internal_mutable_mark_out();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.mark_out)
  return _s;
}
inline const std::string& ListChildSa::_internal_mark_out() const {
  return mark_out_.Get();
}
inline void ListChildSa::_internal_set_mark_out(const std::string& value) {
  
  mark_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_mark_out() {
  
  return mark_out_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_mark_out() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.mark_out)
  return mark_out_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_mark_out(std::string* mark_out) {
  if (mark_out != nullptr) {
    
  } else {
    
  }
  mark_out_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mark_out,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mark_out_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mark_out_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.mark_out)
}

// string mark_mask_out = 11;
inline void ListChildSa::clear_mark_mask_out() {
  mark_mask_out_.ClearToEmpty();
}
inline const std::string& ListChildSa::mark_mask_out() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.mark_mask_out)
  return _internal_mark_mask_out();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_mark_mask_out(ArgT0&& arg0, ArgT... args) {
 
 mark_mask_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.mark_mask_out)
}
inline std::string* ListChildSa::mutable_mark_mask_out() {
  std::string* _s = _internal_mutable_mark_mask_out();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.mark_mask_out)
  return _s;
}
inline const std::string& ListChildSa::_internal_mark_mask_out() const {
  return mark_mask_out_.Get();
}
inline void ListChildSa::_internal_set_mark_mask_out(const std::string& value) {
  
  mark_mask_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_mark_mask_out() {
  
  return mark_mask_out_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_mark_mask_out() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.mark_mask_out)
  return mark_mask_out_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_mark_mask_out(std::string* mark_mask_out) {
  if (mark_mask_out != nullptr) {
    
  } else {
    
  }
  mark_mask_out_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mark_mask_out,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mark_mask_out_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mark_mask_out_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.mark_mask_out)
}

// string if_id_in = 12;
inline void ListChildSa::clear_if_id_in() {
  if_id_in_.ClearToEmpty();
}
inline const std::string& ListChildSa::if_id_in() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.if_id_in)
  return _internal_if_id_in();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_if_id_in(ArgT0&& arg0, ArgT... args) {
 
 if_id_in_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.if_id_in)
}
inline std::string* ListChildSa::mutable_if_id_in() {
  std::string* _s = _internal_mutable_if_id_in();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.if_id_in)
  return _s;
}
inline const std::string& ListChildSa::_internal_if_id_in() const {
  return if_id_in_.Get();
}
inline void ListChildSa::_internal_set_if_id_in(const std::string& value) {
  
  if_id_in_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_if_id_in() {
  
  return if_id_in_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_if_id_in() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.if_id_in)
  return if_id_in_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_if_id_in(std::string* if_id_in) {
  if (if_id_in != nullptr) {
    
  } else {
    
  }
  if_id_in_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), if_id_in,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (if_id_in_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    if_id_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.if_id_in)
}

// string if_id_out = 13;
inline void ListChildSa::clear_if_id_out() {
  if_id_out_.ClearToEmpty();
}
inline const std::string& ListChildSa::if_id_out() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.if_id_out)
  return _internal_if_id_out();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_if_id_out(ArgT0&& arg0, ArgT... args) {
 
 if_id_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.if_id_out)
}
inline std::string* ListChildSa::mutable_if_id_out() {
  std::string* _s = _internal_mutable_if_id_out();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.if_id_out)
  return _s;
}
inline const std::string& ListChildSa::_internal_if_id_out() const {
  return if_id_out_.Get();
}
inline void ListChildSa::_internal_set_if_id_out(const std::string& value) {
  
  if_id_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_if_id_out() {
  
  return if_id_out_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_if_id_out() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.if_id_out)
  return if_id_out_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_if_id_out(std::string* if_id_out) {
  if (if_id_out != nullptr) {
    
  } else {
    
  }
  if_id_out_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), if_id_out,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (if_id_out_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    if_id_out_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.if_id_out)
}

// string encr_alg = 14;
inline void ListChildSa::clear_encr_alg() {
  encr_alg_.ClearToEmpty();
}
inline const std::string& ListChildSa::encr_alg() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.encr_alg)
  return _internal_encr_alg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_encr_alg(ArgT0&& arg0, ArgT... args) {
 
 encr_alg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.encr_alg)
}
inline std::string* ListChildSa::mutable_encr_alg() {
  std::string* _s = _internal_mutable_encr_alg();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.encr_alg)
  return _s;
}
inline const std::string& ListChildSa::_internal_encr_alg() const {
  return encr_alg_.Get();
}
inline void ListChildSa::_internal_set_encr_alg(const std::string& value) {
  
  encr_alg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_encr_alg() {
  
  return encr_alg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_encr_alg() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.encr_alg)
  return encr_alg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_encr_alg(std::string* encr_alg) {
  if (encr_alg != nullptr) {
    
  } else {
    
  }
  encr_alg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encr_alg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encr_alg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encr_alg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.encr_alg)
}

// string encr_keysize = 15;
inline void ListChildSa::clear_encr_keysize() {
  encr_keysize_.ClearToEmpty();
}
inline const std::string& ListChildSa::encr_keysize() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.encr_keysize)
  return _internal_encr_keysize();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_encr_keysize(ArgT0&& arg0, ArgT... args) {
 
 encr_keysize_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.encr_keysize)
}
inline std::string* ListChildSa::mutable_encr_keysize() {
  std::string* _s = _internal_mutable_encr_keysize();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.encr_keysize)
  return _s;
}
inline const std::string& ListChildSa::_internal_encr_keysize() const {
  return encr_keysize_.Get();
}
inline void ListChildSa::_internal_set_encr_keysize(const std::string& value) {
  
  encr_keysize_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_encr_keysize() {
  
  return encr_keysize_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_encr_keysize() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.encr_keysize)
  return encr_keysize_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_encr_keysize(std::string* encr_keysize) {
  if (encr_keysize != nullptr) {
    
  } else {
    
  }
  encr_keysize_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encr_keysize,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encr_keysize_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encr_keysize_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.encr_keysize)
}

// string integ_alg = 16;
inline void ListChildSa::clear_integ_alg() {
  integ_alg_.ClearToEmpty();
}
inline const std::string& ListChildSa::integ_alg() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.integ_alg)
  return _internal_integ_alg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_integ_alg(ArgT0&& arg0, ArgT... args) {
 
 integ_alg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.integ_alg)
}
inline std::string* ListChildSa::mutable_integ_alg() {
  std::string* _s = _internal_mutable_integ_alg();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.integ_alg)
  return _s;
}
inline const std::string& ListChildSa::_internal_integ_alg() const {
  return integ_alg_.Get();
}
inline void ListChildSa::_internal_set_integ_alg(const std::string& value) {
  
  integ_alg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_integ_alg() {
  
  return integ_alg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_integ_alg() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.integ_alg)
  return integ_alg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_integ_alg(std::string* integ_alg) {
  if (integ_alg != nullptr) {
    
  } else {
    
  }
  integ_alg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), integ_alg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (integ_alg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    integ_alg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.integ_alg)
}

// string integ_keysize = 17;
inline void ListChildSa::clear_integ_keysize() {
  integ_keysize_.ClearToEmpty();
}
inline const std::string& ListChildSa::integ_keysize() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.integ_keysize)
  return _internal_integ_keysize();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_integ_keysize(ArgT0&& arg0, ArgT... args) {
 
 integ_keysize_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.integ_keysize)
}
inline std::string* ListChildSa::mutable_integ_keysize() {
  std::string* _s = _internal_mutable_integ_keysize();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.integ_keysize)
  return _s;
}
inline const std::string& ListChildSa::_internal_integ_keysize() const {
  return integ_keysize_.Get();
}
inline void ListChildSa::_internal_set_integ_keysize(const std::string& value) {
  
  integ_keysize_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_integ_keysize() {
  
  return integ_keysize_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_integ_keysize() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.integ_keysize)
  return integ_keysize_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_integ_keysize(std::string* integ_keysize) {
  if (integ_keysize != nullptr) {
    
  } else {
    
  }
  integ_keysize_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), integ_keysize,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (integ_keysize_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    integ_keysize_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.integ_keysize)
}

// string dh_group = 18;
inline void ListChildSa::clear_dh_group() {
  dh_group_.ClearToEmpty();
}
inline const std::string& ListChildSa::dh_group() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.dh_group)
  return _internal_dh_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_dh_group(ArgT0&& arg0, ArgT... args) {
 
 dh_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.dh_group)
}
inline std::string* ListChildSa::mutable_dh_group() {
  std::string* _s = _internal_mutable_dh_group();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.dh_group)
  return _s;
}
inline const std::string& ListChildSa::_internal_dh_group() const {
  return dh_group_.Get();
}
inline void ListChildSa::_internal_set_dh_group(const std::string& value) {
  
  dh_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_dh_group() {
  
  return dh_group_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_dh_group() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.dh_group)
  return dh_group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_dh_group(std::string* dh_group) {
  if (dh_group != nullptr) {
    
  } else {
    
  }
  dh_group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dh_group,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dh_group_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dh_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.dh_group)
}

// string esn = 19;
inline void ListChildSa::clear_esn() {
  esn_.ClearToEmpty();
}
inline const std::string& ListChildSa::esn() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChildSa.esn)
  return _internal_esn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChildSa::set_esn(ArgT0&& arg0, ArgT... args) {
 
 esn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChildSa.esn)
}
inline std::string* ListChildSa::mutable_esn() {
  std::string* _s = _internal_mutable_esn();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChildSa.esn)
  return _s;
}
inline const std::string& ListChildSa::_internal_esn() const {
  return esn_.Get();
}
inline void ListChildSa::_internal_set_esn(const std::string& value) {
  
  esn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChildSa::_internal_mutable_esn() {
  
  return esn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChildSa::release_esn() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChildSa.esn)
  return esn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChildSa::set_allocated_esn(std::string* esn) {
  if (esn != nullptr) {
    
  } else {
    
  }
  esn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), esn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (esn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    esn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChildSa.esn)
}

// -------------------------------------------------------------------

// ListIkeSa

// string name = 1;
inline void ListIkeSa::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListIkeSa::name() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.name)
}
inline std::string* ListIkeSa::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.name)
  return _s;
}
inline const std::string& ListIkeSa::_internal_name() const {
  return name_.Get();
}
inline void ListIkeSa::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.name)
}

// string uniqueid = 2;
inline void ListIkeSa::clear_uniqueid() {
  uniqueid_.ClearToEmpty();
}
inline const std::string& ListIkeSa::uniqueid() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.uniqueid)
  return _internal_uniqueid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_uniqueid(ArgT0&& arg0, ArgT... args) {
 
 uniqueid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.uniqueid)
}
inline std::string* ListIkeSa::mutable_uniqueid() {
  std::string* _s = _internal_mutable_uniqueid();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.uniqueid)
  return _s;
}
inline const std::string& ListIkeSa::_internal_uniqueid() const {
  return uniqueid_.Get();
}
inline void ListIkeSa::_internal_set_uniqueid(const std::string& value) {
  
  uniqueid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_uniqueid() {
  
  return uniqueid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_uniqueid() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.uniqueid)
  return uniqueid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_uniqueid(std::string* uniqueid) {
  if (uniqueid != nullptr) {
    
  } else {
    
  }
  uniqueid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uniqueid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uniqueid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    uniqueid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.uniqueid)
}

// string version = 3;
inline void ListIkeSa::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& ListIkeSa::version() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.version)
}
inline std::string* ListIkeSa::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.version)
  return _s;
}
inline const std::string& ListIkeSa::_internal_version() const {
  return version_.Get();
}
inline void ListIkeSa::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_version() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.version)
}

// .opi_api.security.v1.IkeSaState ikestate = 4;
inline void ListIkeSa::clear_ikestate() {
  ikestate_ = 0;
}
inline ::opi_api::security::v1::IkeSaState ListIkeSa::_internal_ikestate() const {
  return static_cast< ::opi_api::security::v1::IkeSaState >(ikestate_);
}
inline ::opi_api::security::v1::IkeSaState ListIkeSa::ikestate() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.ikestate)
  return _internal_ikestate();
}
inline void ListIkeSa::_internal_set_ikestate(::opi_api::security::v1::IkeSaState value) {
  
  ikestate_ = value;
}
inline void ListIkeSa::set_ikestate(::opi_api::security::v1::IkeSaState value) {
  _internal_set_ikestate(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.ikestate)
}

// string local_host = 5;
inline void ListIkeSa::clear_local_host() {
  local_host_.ClearToEmpty();
}
inline const std::string& ListIkeSa::local_host() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.local_host)
  return _internal_local_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_local_host(ArgT0&& arg0, ArgT... args) {
 
 local_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.local_host)
}
inline std::string* ListIkeSa::mutable_local_host() {
  std::string* _s = _internal_mutable_local_host();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.local_host)
  return _s;
}
inline const std::string& ListIkeSa::_internal_local_host() const {
  return local_host_.Get();
}
inline void ListIkeSa::_internal_set_local_host(const std::string& value) {
  
  local_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_local_host() {
  
  return local_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_local_host() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.local_host)
  return local_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_local_host(std::string* local_host) {
  if (local_host != nullptr) {
    
  } else {
    
  }
  local_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_host,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (local_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    local_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.local_host)
}

// string local_port = 6;
inline void ListIkeSa::clear_local_port() {
  local_port_.ClearToEmpty();
}
inline const std::string& ListIkeSa::local_port() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.local_port)
  return _internal_local_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_local_port(ArgT0&& arg0, ArgT... args) {
 
 local_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.local_port)
}
inline std::string* ListIkeSa::mutable_local_port() {
  std::string* _s = _internal_mutable_local_port();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.local_port)
  return _s;
}
inline const std::string& ListIkeSa::_internal_local_port() const {
  return local_port_.Get();
}
inline void ListIkeSa::_internal_set_local_port(const std::string& value) {
  
  local_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_local_port() {
  
  return local_port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_local_port() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.local_port)
  return local_port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_local_port(std::string* local_port) {
  if (local_port != nullptr) {
    
  } else {
    
  }
  local_port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_port,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (local_port_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    local_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.local_port)
}

// string local_id = 7;
inline void ListIkeSa::clear_local_id() {
  local_id_.ClearToEmpty();
}
inline const std::string& ListIkeSa::local_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.local_id)
  return _internal_local_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_local_id(ArgT0&& arg0, ArgT... args) {
 
 local_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.local_id)
}
inline std::string* ListIkeSa::mutable_local_id() {
  std::string* _s = _internal_mutable_local_id();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.local_id)
  return _s;
}
inline const std::string& ListIkeSa::_internal_local_id() const {
  return local_id_.Get();
}
inline void ListIkeSa::_internal_set_local_id(const std::string& value) {
  
  local_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_local_id() {
  
  return local_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_local_id() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.local_id)
  return local_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_local_id(std::string* local_id) {
  if (local_id != nullptr) {
    
  } else {
    
  }
  local_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (local_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    local_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.local_id)
}

// string remote_host = 8;
inline void ListIkeSa::clear_remote_host() {
  remote_host_.ClearToEmpty();
}
inline const std::string& ListIkeSa::remote_host() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.remote_host)
  return _internal_remote_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_remote_host(ArgT0&& arg0, ArgT... args) {
 
 remote_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.remote_host)
}
inline std::string* ListIkeSa::mutable_remote_host() {
  std::string* _s = _internal_mutable_remote_host();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.remote_host)
  return _s;
}
inline const std::string& ListIkeSa::_internal_remote_host() const {
  return remote_host_.Get();
}
inline void ListIkeSa::_internal_set_remote_host(const std::string& value) {
  
  remote_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_remote_host() {
  
  return remote_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_remote_host() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.remote_host)
  return remote_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_remote_host(std::string* remote_host) {
  if (remote_host != nullptr) {
    
  } else {
    
  }
  remote_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_host,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remote_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    remote_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.remote_host)
}

// string remote_port = 9;
inline void ListIkeSa::clear_remote_port() {
  remote_port_.ClearToEmpty();
}
inline const std::string& ListIkeSa::remote_port() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.remote_port)
  return _internal_remote_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_remote_port(ArgT0&& arg0, ArgT... args) {
 
 remote_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.remote_port)
}
inline std::string* ListIkeSa::mutable_remote_port() {
  std::string* _s = _internal_mutable_remote_port();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.remote_port)
  return _s;
}
inline const std::string& ListIkeSa::_internal_remote_port() const {
  return remote_port_.Get();
}
inline void ListIkeSa::_internal_set_remote_port(const std::string& value) {
  
  remote_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_remote_port() {
  
  return remote_port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_remote_port() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.remote_port)
  return remote_port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_remote_port(std::string* remote_port) {
  if (remote_port != nullptr) {
    
  } else {
    
  }
  remote_port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_port,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remote_port_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    remote_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.remote_port)
}

// string remote_id = 10;
inline void ListIkeSa::clear_remote_id() {
  remote_id_.ClearToEmpty();
}
inline const std::string& ListIkeSa::remote_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.remote_id)
  return _internal_remote_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_remote_id(ArgT0&& arg0, ArgT... args) {
 
 remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.remote_id)
}
inline std::string* ListIkeSa::mutable_remote_id() {
  std::string* _s = _internal_mutable_remote_id();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.remote_id)
  return _s;
}
inline const std::string& ListIkeSa::_internal_remote_id() const {
  return remote_id_.Get();
}
inline void ListIkeSa::_internal_set_remote_id(const std::string& value) {
  
  remote_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_remote_id() {
  
  return remote_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_remote_id() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.remote_id)
  return remote_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remote_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    remote_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.remote_id)
}

// string remote_xauth_id = 11;
inline void ListIkeSa::clear_remote_xauth_id() {
  remote_xauth_id_.ClearToEmpty();
}
inline const std::string& ListIkeSa::remote_xauth_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.remote_xauth_id)
  return _internal_remote_xauth_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_remote_xauth_id(ArgT0&& arg0, ArgT... args) {
 
 remote_xauth_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.remote_xauth_id)
}
inline std::string* ListIkeSa::mutable_remote_xauth_id() {
  std::string* _s = _internal_mutable_remote_xauth_id();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.remote_xauth_id)
  return _s;
}
inline const std::string& ListIkeSa::_internal_remote_xauth_id() const {
  return remote_xauth_id_.Get();
}
inline void ListIkeSa::_internal_set_remote_xauth_id(const std::string& value) {
  
  remote_xauth_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_remote_xauth_id() {
  
  return remote_xauth_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_remote_xauth_id() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.remote_xauth_id)
  return remote_xauth_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_remote_xauth_id(std::string* remote_xauth_id) {
  if (remote_xauth_id != nullptr) {
    
  } else {
    
  }
  remote_xauth_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_xauth_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remote_xauth_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    remote_xauth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.remote_xauth_id)
}

// string remote_eap_id = 12;
inline void ListIkeSa::clear_remote_eap_id() {
  remote_eap_id_.ClearToEmpty();
}
inline const std::string& ListIkeSa::remote_eap_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.remote_eap_id)
  return _internal_remote_eap_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_remote_eap_id(ArgT0&& arg0, ArgT... args) {
 
 remote_eap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.remote_eap_id)
}
inline std::string* ListIkeSa::mutable_remote_eap_id() {
  std::string* _s = _internal_mutable_remote_eap_id();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.remote_eap_id)
  return _s;
}
inline const std::string& ListIkeSa::_internal_remote_eap_id() const {
  return remote_eap_id_.Get();
}
inline void ListIkeSa::_internal_set_remote_eap_id(const std::string& value) {
  
  remote_eap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_remote_eap_id() {
  
  return remote_eap_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_remote_eap_id() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.remote_eap_id)
  return remote_eap_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_remote_eap_id(std::string* remote_eap_id) {
  if (remote_eap_id != nullptr) {
    
  } else {
    
  }
  remote_eap_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_eap_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remote_eap_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    remote_eap_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.remote_eap_id)
}

// string initiator = 13;
inline void ListIkeSa::clear_initiator() {
  initiator_.ClearToEmpty();
}
inline const std::string& ListIkeSa::initiator() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.initiator)
  return _internal_initiator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_initiator(ArgT0&& arg0, ArgT... args) {
 
 initiator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.initiator)
}
inline std::string* ListIkeSa::mutable_initiator() {
  std::string* _s = _internal_mutable_initiator();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.initiator)
  return _s;
}
inline const std::string& ListIkeSa::_internal_initiator() const {
  return initiator_.Get();
}
inline void ListIkeSa::_internal_set_initiator(const std::string& value) {
  
  initiator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_initiator() {
  
  return initiator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_initiator() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.initiator)
  return initiator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_initiator(std::string* initiator) {
  if (initiator != nullptr) {
    
  } else {
    
  }
  initiator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), initiator,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (initiator_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    initiator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.initiator)
}

// string initiator_spi = 14;
inline void ListIkeSa::clear_initiator_spi() {
  initiator_spi_.ClearToEmpty();
}
inline const std::string& ListIkeSa::initiator_spi() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.initiator_spi)
  return _internal_initiator_spi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_initiator_spi(ArgT0&& arg0, ArgT... args) {
 
 initiator_spi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.initiator_spi)
}
inline std::string* ListIkeSa::mutable_initiator_spi() {
  std::string* _s = _internal_mutable_initiator_spi();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.initiator_spi)
  return _s;
}
inline const std::string& ListIkeSa::_internal_initiator_spi() const {
  return initiator_spi_.Get();
}
inline void ListIkeSa::_internal_set_initiator_spi(const std::string& value) {
  
  initiator_spi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_initiator_spi() {
  
  return initiator_spi_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_initiator_spi() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.initiator_spi)
  return initiator_spi_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_initiator_spi(std::string* initiator_spi) {
  if (initiator_spi != nullptr) {
    
  } else {
    
  }
  initiator_spi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), initiator_spi,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (initiator_spi_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    initiator_spi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.initiator_spi)
}

// string responder_spi = 15;
inline void ListIkeSa::clear_responder_spi() {
  responder_spi_.ClearToEmpty();
}
inline const std::string& ListIkeSa::responder_spi() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.responder_spi)
  return _internal_responder_spi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_responder_spi(ArgT0&& arg0, ArgT... args) {
 
 responder_spi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.responder_spi)
}
inline std::string* ListIkeSa::mutable_responder_spi() {
  std::string* _s = _internal_mutable_responder_spi();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.responder_spi)
  return _s;
}
inline const std::string& ListIkeSa::_internal_responder_spi() const {
  return responder_spi_.Get();
}
inline void ListIkeSa::_internal_set_responder_spi(const std::string& value) {
  
  responder_spi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_responder_spi() {
  
  return responder_spi_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_responder_spi() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.responder_spi)
  return responder_spi_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_responder_spi(std::string* responder_spi) {
  if (responder_spi != nullptr) {
    
  } else {
    
  }
  responder_spi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), responder_spi,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (responder_spi_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    responder_spi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.responder_spi)
}

// string nat_local = 16;
inline void ListIkeSa::clear_nat_local() {
  nat_local_.ClearToEmpty();
}
inline const std::string& ListIkeSa::nat_local() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.nat_local)
  return _internal_nat_local();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_nat_local(ArgT0&& arg0, ArgT... args) {
 
 nat_local_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.nat_local)
}
inline std::string* ListIkeSa::mutable_nat_local() {
  std::string* _s = _internal_mutable_nat_local();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.nat_local)
  return _s;
}
inline const std::string& ListIkeSa::_internal_nat_local() const {
  return nat_local_.Get();
}
inline void ListIkeSa::_internal_set_nat_local(const std::string& value) {
  
  nat_local_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_nat_local() {
  
  return nat_local_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_nat_local() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.nat_local)
  return nat_local_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_nat_local(std::string* nat_local) {
  if (nat_local != nullptr) {
    
  } else {
    
  }
  nat_local_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nat_local,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nat_local_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nat_local_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.nat_local)
}

// string nat_remote = 17;
inline void ListIkeSa::clear_nat_remote() {
  nat_remote_.ClearToEmpty();
}
inline const std::string& ListIkeSa::nat_remote() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.nat_remote)
  return _internal_nat_remote();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_nat_remote(ArgT0&& arg0, ArgT... args) {
 
 nat_remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.nat_remote)
}
inline std::string* ListIkeSa::mutable_nat_remote() {
  std::string* _s = _internal_mutable_nat_remote();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.nat_remote)
  return _s;
}
inline const std::string& ListIkeSa::_internal_nat_remote() const {
  return nat_remote_.Get();
}
inline void ListIkeSa::_internal_set_nat_remote(const std::string& value) {
  
  nat_remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_nat_remote() {
  
  return nat_remote_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_nat_remote() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.nat_remote)
  return nat_remote_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_nat_remote(std::string* nat_remote) {
  if (nat_remote != nullptr) {
    
  } else {
    
  }
  nat_remote_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nat_remote,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nat_remote_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nat_remote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.nat_remote)
}

// string nat_fake = 18;
inline void ListIkeSa::clear_nat_fake() {
  nat_fake_.ClearToEmpty();
}
inline const std::string& ListIkeSa::nat_fake() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.nat_fake)
  return _internal_nat_fake();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_nat_fake(ArgT0&& arg0, ArgT... args) {
 
 nat_fake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.nat_fake)
}
inline std::string* ListIkeSa::mutable_nat_fake() {
  std::string* _s = _internal_mutable_nat_fake();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.nat_fake)
  return _s;
}
inline const std::string& ListIkeSa::_internal_nat_fake() const {
  return nat_fake_.Get();
}
inline void ListIkeSa::_internal_set_nat_fake(const std::string& value) {
  
  nat_fake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_nat_fake() {
  
  return nat_fake_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_nat_fake() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.nat_fake)
  return nat_fake_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_nat_fake(std::string* nat_fake) {
  if (nat_fake != nullptr) {
    
  } else {
    
  }
  nat_fake_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nat_fake,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nat_fake_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nat_fake_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.nat_fake)
}

// string nat_any = 19;
inline void ListIkeSa::clear_nat_any() {
  nat_any_.ClearToEmpty();
}
inline const std::string& ListIkeSa::nat_any() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.nat_any)
  return _internal_nat_any();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_nat_any(ArgT0&& arg0, ArgT... args) {
 
 nat_any_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.nat_any)
}
inline std::string* ListIkeSa::mutable_nat_any() {
  std::string* _s = _internal_mutable_nat_any();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.nat_any)
  return _s;
}
inline const std::string& ListIkeSa::_internal_nat_any() const {
  return nat_any_.Get();
}
inline void ListIkeSa::_internal_set_nat_any(const std::string& value) {
  
  nat_any_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_nat_any() {
  
  return nat_any_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_nat_any() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.nat_any)
  return nat_any_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_nat_any(std::string* nat_any) {
  if (nat_any != nullptr) {
    
  } else {
    
  }
  nat_any_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nat_any,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nat_any_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nat_any_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.nat_any)
}

// string if_id_in = 20;
inline void ListIkeSa::clear_if_id_in() {
  if_id_in_.ClearToEmpty();
}
inline const std::string& ListIkeSa::if_id_in() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.if_id_in)
  return _internal_if_id_in();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_if_id_in(ArgT0&& arg0, ArgT... args) {
 
 if_id_in_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.if_id_in)
}
inline std::string* ListIkeSa::mutable_if_id_in() {
  std::string* _s = _internal_mutable_if_id_in();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.if_id_in)
  return _s;
}
inline const std::string& ListIkeSa::_internal_if_id_in() const {
  return if_id_in_.Get();
}
inline void ListIkeSa::_internal_set_if_id_in(const std::string& value) {
  
  if_id_in_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_if_id_in() {
  
  return if_id_in_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_if_id_in() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.if_id_in)
  return if_id_in_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_if_id_in(std::string* if_id_in) {
  if (if_id_in != nullptr) {
    
  } else {
    
  }
  if_id_in_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), if_id_in,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (if_id_in_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    if_id_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.if_id_in)
}

// string if_id_out = 21;
inline void ListIkeSa::clear_if_id_out() {
  if_id_out_.ClearToEmpty();
}
inline const std::string& ListIkeSa::if_id_out() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.if_id_out)
  return _internal_if_id_out();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_if_id_out(ArgT0&& arg0, ArgT... args) {
 
 if_id_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.if_id_out)
}
inline std::string* ListIkeSa::mutable_if_id_out() {
  std::string* _s = _internal_mutable_if_id_out();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.if_id_out)
  return _s;
}
inline const std::string& ListIkeSa::_internal_if_id_out() const {
  return if_id_out_.Get();
}
inline void ListIkeSa::_internal_set_if_id_out(const std::string& value) {
  
  if_id_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_if_id_out() {
  
  return if_id_out_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_if_id_out() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.if_id_out)
  return if_id_out_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_if_id_out(std::string* if_id_out) {
  if (if_id_out != nullptr) {
    
  } else {
    
  }
  if_id_out_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), if_id_out,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (if_id_out_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    if_id_out_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.if_id_out)
}

// string encr_alg = 22;
inline void ListIkeSa::clear_encr_alg() {
  encr_alg_.ClearToEmpty();
}
inline const std::string& ListIkeSa::encr_alg() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.encr_alg)
  return _internal_encr_alg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_encr_alg(ArgT0&& arg0, ArgT... args) {
 
 encr_alg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.encr_alg)
}
inline std::string* ListIkeSa::mutable_encr_alg() {
  std::string* _s = _internal_mutable_encr_alg();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.encr_alg)
  return _s;
}
inline const std::string& ListIkeSa::_internal_encr_alg() const {
  return encr_alg_.Get();
}
inline void ListIkeSa::_internal_set_encr_alg(const std::string& value) {
  
  encr_alg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_encr_alg() {
  
  return encr_alg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_encr_alg() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.encr_alg)
  return encr_alg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_encr_alg(std::string* encr_alg) {
  if (encr_alg != nullptr) {
    
  } else {
    
  }
  encr_alg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encr_alg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encr_alg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encr_alg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.encr_alg)
}

// string encr_keysize = 23;
inline void ListIkeSa::clear_encr_keysize() {
  encr_keysize_.ClearToEmpty();
}
inline const std::string& ListIkeSa::encr_keysize() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.encr_keysize)
  return _internal_encr_keysize();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_encr_keysize(ArgT0&& arg0, ArgT... args) {
 
 encr_keysize_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.encr_keysize)
}
inline std::string* ListIkeSa::mutable_encr_keysize() {
  std::string* _s = _internal_mutable_encr_keysize();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.encr_keysize)
  return _s;
}
inline const std::string& ListIkeSa::_internal_encr_keysize() const {
  return encr_keysize_.Get();
}
inline void ListIkeSa::_internal_set_encr_keysize(const std::string& value) {
  
  encr_keysize_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_encr_keysize() {
  
  return encr_keysize_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_encr_keysize() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.encr_keysize)
  return encr_keysize_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_encr_keysize(std::string* encr_keysize) {
  if (encr_keysize != nullptr) {
    
  } else {
    
  }
  encr_keysize_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encr_keysize,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encr_keysize_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encr_keysize_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.encr_keysize)
}

// string integ_alg = 24;
inline void ListIkeSa::clear_integ_alg() {
  integ_alg_.ClearToEmpty();
}
inline const std::string& ListIkeSa::integ_alg() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.integ_alg)
  return _internal_integ_alg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_integ_alg(ArgT0&& arg0, ArgT... args) {
 
 integ_alg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.integ_alg)
}
inline std::string* ListIkeSa::mutable_integ_alg() {
  std::string* _s = _internal_mutable_integ_alg();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.integ_alg)
  return _s;
}
inline const std::string& ListIkeSa::_internal_integ_alg() const {
  return integ_alg_.Get();
}
inline void ListIkeSa::_internal_set_integ_alg(const std::string& value) {
  
  integ_alg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_integ_alg() {
  
  return integ_alg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_integ_alg() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.integ_alg)
  return integ_alg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_integ_alg(std::string* integ_alg) {
  if (integ_alg != nullptr) {
    
  } else {
    
  }
  integ_alg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), integ_alg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (integ_alg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    integ_alg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.integ_alg)
}

// string integ_keysize = 25;
inline void ListIkeSa::clear_integ_keysize() {
  integ_keysize_.ClearToEmpty();
}
inline const std::string& ListIkeSa::integ_keysize() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.integ_keysize)
  return _internal_integ_keysize();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_integ_keysize(ArgT0&& arg0, ArgT... args) {
 
 integ_keysize_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.integ_keysize)
}
inline std::string* ListIkeSa::mutable_integ_keysize() {
  std::string* _s = _internal_mutable_integ_keysize();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.integ_keysize)
  return _s;
}
inline const std::string& ListIkeSa::_internal_integ_keysize() const {
  return integ_keysize_.Get();
}
inline void ListIkeSa::_internal_set_integ_keysize(const std::string& value) {
  
  integ_keysize_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_integ_keysize() {
  
  return integ_keysize_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_integ_keysize() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.integ_keysize)
  return integ_keysize_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_integ_keysize(std::string* integ_keysize) {
  if (integ_keysize != nullptr) {
    
  } else {
    
  }
  integ_keysize_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), integ_keysize,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (integ_keysize_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    integ_keysize_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.integ_keysize)
}

// string prf_alg = 26;
inline void ListIkeSa::clear_prf_alg() {
  prf_alg_.ClearToEmpty();
}
inline const std::string& ListIkeSa::prf_alg() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.prf_alg)
  return _internal_prf_alg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_prf_alg(ArgT0&& arg0, ArgT... args) {
 
 prf_alg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.prf_alg)
}
inline std::string* ListIkeSa::mutable_prf_alg() {
  std::string* _s = _internal_mutable_prf_alg();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.prf_alg)
  return _s;
}
inline const std::string& ListIkeSa::_internal_prf_alg() const {
  return prf_alg_.Get();
}
inline void ListIkeSa::_internal_set_prf_alg(const std::string& value) {
  
  prf_alg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_prf_alg() {
  
  return prf_alg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_prf_alg() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.prf_alg)
  return prf_alg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_prf_alg(std::string* prf_alg) {
  if (prf_alg != nullptr) {
    
  } else {
    
  }
  prf_alg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prf_alg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prf_alg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    prf_alg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.prf_alg)
}

// string dh_group = 27;
inline void ListIkeSa::clear_dh_group() {
  dh_group_.ClearToEmpty();
}
inline const std::string& ListIkeSa::dh_group() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.dh_group)
  return _internal_dh_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_dh_group(ArgT0&& arg0, ArgT... args) {
 
 dh_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.dh_group)
}
inline std::string* ListIkeSa::mutable_dh_group() {
  std::string* _s = _internal_mutable_dh_group();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.dh_group)
  return _s;
}
inline const std::string& ListIkeSa::_internal_dh_group() const {
  return dh_group_.Get();
}
inline void ListIkeSa::_internal_set_dh_group(const std::string& value) {
  
  dh_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_dh_group() {
  
  return dh_group_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_dh_group() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.dh_group)
  return dh_group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_dh_group(std::string* dh_group) {
  if (dh_group != nullptr) {
    
  } else {
    
  }
  dh_group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dh_group,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dh_group_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dh_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.dh_group)
}

// string ppk = 28;
inline void ListIkeSa::clear_ppk() {
  ppk_.ClearToEmpty();
}
inline const std::string& ListIkeSa::ppk() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.ppk)
  return _internal_ppk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_ppk(ArgT0&& arg0, ArgT... args) {
 
 ppk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.ppk)
}
inline std::string* ListIkeSa::mutable_ppk() {
  std::string* _s = _internal_mutable_ppk();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.ppk)
  return _s;
}
inline const std::string& ListIkeSa::_internal_ppk() const {
  return ppk_.Get();
}
inline void ListIkeSa::_internal_set_ppk(const std::string& value) {
  
  ppk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_ppk() {
  
  return ppk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_ppk() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.ppk)
  return ppk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_ppk(std::string* ppk) {
  if (ppk != nullptr) {
    
  } else {
    
  }
  ppk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ppk,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ppk_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ppk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.ppk)
}

// string established = 29;
inline void ListIkeSa::clear_established() {
  established_.ClearToEmpty();
}
inline const std::string& ListIkeSa::established() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.established)
  return _internal_established();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_established(ArgT0&& arg0, ArgT... args) {
 
 established_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.established)
}
inline std::string* ListIkeSa::mutable_established() {
  std::string* _s = _internal_mutable_established();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.established)
  return _s;
}
inline const std::string& ListIkeSa::_internal_established() const {
  return established_.Get();
}
inline void ListIkeSa::_internal_set_established(const std::string& value) {
  
  established_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_established() {
  
  return established_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_established() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.established)
  return established_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_established(std::string* established) {
  if (established != nullptr) {
    
  } else {
    
  }
  established_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), established,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (established_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    established_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.established)
}

// string rekey_time = 30;
inline void ListIkeSa::clear_rekey_time() {
  rekey_time_.ClearToEmpty();
}
inline const std::string& ListIkeSa::rekey_time() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.rekey_time)
  return _internal_rekey_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_rekey_time(ArgT0&& arg0, ArgT... args) {
 
 rekey_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.rekey_time)
}
inline std::string* ListIkeSa::mutable_rekey_time() {
  std::string* _s = _internal_mutable_rekey_time();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.rekey_time)
  return _s;
}
inline const std::string& ListIkeSa::_internal_rekey_time() const {
  return rekey_time_.Get();
}
inline void ListIkeSa::_internal_set_rekey_time(const std::string& value) {
  
  rekey_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_rekey_time() {
  
  return rekey_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_rekey_time() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.rekey_time)
  return rekey_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_rekey_time(std::string* rekey_time) {
  if (rekey_time != nullptr) {
    
  } else {
    
  }
  rekey_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rekey_time,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rekey_time_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rekey_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.rekey_time)
}

// string reauth_time = 31;
inline void ListIkeSa::clear_reauth_time() {
  reauth_time_.ClearToEmpty();
}
inline const std::string& ListIkeSa::reauth_time() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.reauth_time)
  return _internal_reauth_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListIkeSa::set_reauth_time(ArgT0&& arg0, ArgT... args) {
 
 reauth_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.reauth_time)
}
inline std::string* ListIkeSa::mutable_reauth_time() {
  std::string* _s = _internal_mutable_reauth_time();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.reauth_time)
  return _s;
}
inline const std::string& ListIkeSa::_internal_reauth_time() const {
  return reauth_time_.Get();
}
inline void ListIkeSa::_internal_set_reauth_time(const std::string& value) {
  
  reauth_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListIkeSa::_internal_mutable_reauth_time() {
  
  return reauth_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListIkeSa::release_reauth_time() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListIkeSa.reauth_time)
  return reauth_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListIkeSa::set_allocated_reauth_time(std::string* reauth_time) {
  if (reauth_time != nullptr) {
    
  } else {
    
  }
  reauth_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reauth_time,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reauth_time_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reauth_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListIkeSa.reauth_time)
}

// repeated string local_vips = 32;
inline int ListIkeSa::_internal_local_vips_size() const {
  return local_vips_.size();
}
inline int ListIkeSa::local_vips_size() const {
  return _internal_local_vips_size();
}
inline void ListIkeSa::clear_local_vips() {
  local_vips_.Clear();
}
inline std::string* ListIkeSa::add_local_vips() {
  std::string* _s = _internal_add_local_vips();
  // @@protoc_insertion_point(field_add_mutable:opi_api.security.v1.ListIkeSa.local_vips)
  return _s;
}
inline const std::string& ListIkeSa::_internal_local_vips(int index) const {
  return local_vips_.Get(index);
}
inline const std::string& ListIkeSa::local_vips(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.local_vips)
  return _internal_local_vips(index);
}
inline std::string* ListIkeSa::mutable_local_vips(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.local_vips)
  return local_vips_.Mutable(index);
}
inline void ListIkeSa::set_local_vips(int index, const std::string& value) {
  local_vips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.local_vips)
}
inline void ListIkeSa::set_local_vips(int index, std::string&& value) {
  local_vips_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.local_vips)
}
inline void ListIkeSa::set_local_vips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  local_vips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.security.v1.ListIkeSa.local_vips)
}
inline void ListIkeSa::set_local_vips(int index, const char* value, size_t size) {
  local_vips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.security.v1.ListIkeSa.local_vips)
}
inline std::string* ListIkeSa::_internal_add_local_vips() {
  return local_vips_.Add();
}
inline void ListIkeSa::add_local_vips(const std::string& value) {
  local_vips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListIkeSa.local_vips)
}
inline void ListIkeSa::add_local_vips(std::string&& value) {
  local_vips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListIkeSa.local_vips)
}
inline void ListIkeSa::add_local_vips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  local_vips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.security.v1.ListIkeSa.local_vips)
}
inline void ListIkeSa::add_local_vips(const char* value, size_t size) {
  local_vips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.security.v1.ListIkeSa.local_vips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListIkeSa::local_vips() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.ListIkeSa.local_vips)
  return local_vips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListIkeSa::mutable_local_vips() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.ListIkeSa.local_vips)
  return &local_vips_;
}

// repeated string remote_vips = 33;
inline int ListIkeSa::_internal_remote_vips_size() const {
  return remote_vips_.size();
}
inline int ListIkeSa::remote_vips_size() const {
  return _internal_remote_vips_size();
}
inline void ListIkeSa::clear_remote_vips() {
  remote_vips_.Clear();
}
inline std::string* ListIkeSa::add_remote_vips() {
  std::string* _s = _internal_add_remote_vips();
  // @@protoc_insertion_point(field_add_mutable:opi_api.security.v1.ListIkeSa.remote_vips)
  return _s;
}
inline const std::string& ListIkeSa::_internal_remote_vips(int index) const {
  return remote_vips_.Get(index);
}
inline const std::string& ListIkeSa::remote_vips(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.remote_vips)
  return _internal_remote_vips(index);
}
inline std::string* ListIkeSa::mutable_remote_vips(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.remote_vips)
  return remote_vips_.Mutable(index);
}
inline void ListIkeSa::set_remote_vips(int index, const std::string& value) {
  remote_vips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.remote_vips)
}
inline void ListIkeSa::set_remote_vips(int index, std::string&& value) {
  remote_vips_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.remote_vips)
}
inline void ListIkeSa::set_remote_vips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  remote_vips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.security.v1.ListIkeSa.remote_vips)
}
inline void ListIkeSa::set_remote_vips(int index, const char* value, size_t size) {
  remote_vips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.security.v1.ListIkeSa.remote_vips)
}
inline std::string* ListIkeSa::_internal_add_remote_vips() {
  return remote_vips_.Add();
}
inline void ListIkeSa::add_remote_vips(const std::string& value) {
  remote_vips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListIkeSa.remote_vips)
}
inline void ListIkeSa::add_remote_vips(std::string&& value) {
  remote_vips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListIkeSa.remote_vips)
}
inline void ListIkeSa::add_remote_vips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  remote_vips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.security.v1.ListIkeSa.remote_vips)
}
inline void ListIkeSa::add_remote_vips(const char* value, size_t size) {
  remote_vips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.security.v1.ListIkeSa.remote_vips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListIkeSa::remote_vips() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.ListIkeSa.remote_vips)
  return remote_vips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListIkeSa::mutable_remote_vips() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.ListIkeSa.remote_vips)
  return &remote_vips_;
}

// repeated string tasks_queued = 34;
inline int ListIkeSa::_internal_tasks_queued_size() const {
  return tasks_queued_.size();
}
inline int ListIkeSa::tasks_queued_size() const {
  return _internal_tasks_queued_size();
}
inline void ListIkeSa::clear_tasks_queued() {
  tasks_queued_.Clear();
}
inline std::string* ListIkeSa::add_tasks_queued() {
  std::string* _s = _internal_add_tasks_queued();
  // @@protoc_insertion_point(field_add_mutable:opi_api.security.v1.ListIkeSa.tasks_queued)
  return _s;
}
inline const std::string& ListIkeSa::_internal_tasks_queued(int index) const {
  return tasks_queued_.Get(index);
}
inline const std::string& ListIkeSa::tasks_queued(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.tasks_queued)
  return _internal_tasks_queued(index);
}
inline std::string* ListIkeSa::mutable_tasks_queued(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.tasks_queued)
  return tasks_queued_.Mutable(index);
}
inline void ListIkeSa::set_tasks_queued(int index, const std::string& value) {
  tasks_queued_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.tasks_queued)
}
inline void ListIkeSa::set_tasks_queued(int index, std::string&& value) {
  tasks_queued_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.tasks_queued)
}
inline void ListIkeSa::set_tasks_queued(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tasks_queued_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.security.v1.ListIkeSa.tasks_queued)
}
inline void ListIkeSa::set_tasks_queued(int index, const char* value, size_t size) {
  tasks_queued_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.security.v1.ListIkeSa.tasks_queued)
}
inline std::string* ListIkeSa::_internal_add_tasks_queued() {
  return tasks_queued_.Add();
}
inline void ListIkeSa::add_tasks_queued(const std::string& value) {
  tasks_queued_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListIkeSa.tasks_queued)
}
inline void ListIkeSa::add_tasks_queued(std::string&& value) {
  tasks_queued_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListIkeSa.tasks_queued)
}
inline void ListIkeSa::add_tasks_queued(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tasks_queued_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.security.v1.ListIkeSa.tasks_queued)
}
inline void ListIkeSa::add_tasks_queued(const char* value, size_t size) {
  tasks_queued_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.security.v1.ListIkeSa.tasks_queued)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListIkeSa::tasks_queued() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.ListIkeSa.tasks_queued)
  return tasks_queued_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListIkeSa::mutable_tasks_queued() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.ListIkeSa.tasks_queued)
  return &tasks_queued_;
}

// repeated string tasks_active = 35;
inline int ListIkeSa::_internal_tasks_active_size() const {
  return tasks_active_.size();
}
inline int ListIkeSa::tasks_active_size() const {
  return _internal_tasks_active_size();
}
inline void ListIkeSa::clear_tasks_active() {
  tasks_active_.Clear();
}
inline std::string* ListIkeSa::add_tasks_active() {
  std::string* _s = _internal_add_tasks_active();
  // @@protoc_insertion_point(field_add_mutable:opi_api.security.v1.ListIkeSa.tasks_active)
  return _s;
}
inline const std::string& ListIkeSa::_internal_tasks_active(int index) const {
  return tasks_active_.Get(index);
}
inline const std::string& ListIkeSa::tasks_active(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.tasks_active)
  return _internal_tasks_active(index);
}
inline std::string* ListIkeSa::mutable_tasks_active(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.tasks_active)
  return tasks_active_.Mutable(index);
}
inline void ListIkeSa::set_tasks_active(int index, const std::string& value) {
  tasks_active_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.tasks_active)
}
inline void ListIkeSa::set_tasks_active(int index, std::string&& value) {
  tasks_active_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.tasks_active)
}
inline void ListIkeSa::set_tasks_active(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tasks_active_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.security.v1.ListIkeSa.tasks_active)
}
inline void ListIkeSa::set_tasks_active(int index, const char* value, size_t size) {
  tasks_active_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.security.v1.ListIkeSa.tasks_active)
}
inline std::string* ListIkeSa::_internal_add_tasks_active() {
  return tasks_active_.Add();
}
inline void ListIkeSa::add_tasks_active(const std::string& value) {
  tasks_active_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListIkeSa.tasks_active)
}
inline void ListIkeSa::add_tasks_active(std::string&& value) {
  tasks_active_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListIkeSa.tasks_active)
}
inline void ListIkeSa::add_tasks_active(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tasks_active_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.security.v1.ListIkeSa.tasks_active)
}
inline void ListIkeSa::add_tasks_active(const char* value, size_t size) {
  tasks_active_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.security.v1.ListIkeSa.tasks_active)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListIkeSa::tasks_active() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.ListIkeSa.tasks_active)
  return tasks_active_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListIkeSa::mutable_tasks_active() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.ListIkeSa.tasks_active)
  return &tasks_active_;
}

// repeated string tasks_passive = 36;
inline int ListIkeSa::_internal_tasks_passive_size() const {
  return tasks_passive_.size();
}
inline int ListIkeSa::tasks_passive_size() const {
  return _internal_tasks_passive_size();
}
inline void ListIkeSa::clear_tasks_passive() {
  tasks_passive_.Clear();
}
inline std::string* ListIkeSa::add_tasks_passive() {
  std::string* _s = _internal_add_tasks_passive();
  // @@protoc_insertion_point(field_add_mutable:opi_api.security.v1.ListIkeSa.tasks_passive)
  return _s;
}
inline const std::string& ListIkeSa::_internal_tasks_passive(int index) const {
  return tasks_passive_.Get(index);
}
inline const std::string& ListIkeSa::tasks_passive(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.tasks_passive)
  return _internal_tasks_passive(index);
}
inline std::string* ListIkeSa::mutable_tasks_passive(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.tasks_passive)
  return tasks_passive_.Mutable(index);
}
inline void ListIkeSa::set_tasks_passive(int index, const std::string& value) {
  tasks_passive_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.tasks_passive)
}
inline void ListIkeSa::set_tasks_passive(int index, std::string&& value) {
  tasks_passive_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListIkeSa.tasks_passive)
}
inline void ListIkeSa::set_tasks_passive(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tasks_passive_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.security.v1.ListIkeSa.tasks_passive)
}
inline void ListIkeSa::set_tasks_passive(int index, const char* value, size_t size) {
  tasks_passive_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.security.v1.ListIkeSa.tasks_passive)
}
inline std::string* ListIkeSa::_internal_add_tasks_passive() {
  return tasks_passive_.Add();
}
inline void ListIkeSa::add_tasks_passive(const std::string& value) {
  tasks_passive_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListIkeSa.tasks_passive)
}
inline void ListIkeSa::add_tasks_passive(std::string&& value) {
  tasks_passive_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListIkeSa.tasks_passive)
}
inline void ListIkeSa::add_tasks_passive(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tasks_passive_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.security.v1.ListIkeSa.tasks_passive)
}
inline void ListIkeSa::add_tasks_passive(const char* value, size_t size) {
  tasks_passive_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.security.v1.ListIkeSa.tasks_passive)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListIkeSa::tasks_passive() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.ListIkeSa.tasks_passive)
  return tasks_passive_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListIkeSa::mutable_tasks_passive() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.ListIkeSa.tasks_passive)
  return &tasks_passive_;
}

// repeated .opi_api.security.v1.ListChildSa childsas = 37;
inline int ListIkeSa::_internal_childsas_size() const {
  return childsas_.size();
}
inline int ListIkeSa::childsas_size() const {
  return _internal_childsas_size();
}
inline void ListIkeSa::clear_childsas() {
  childsas_.Clear();
}
inline ::opi_api::security::v1::ListChildSa* ListIkeSa::mutable_childsas(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListIkeSa.childsas)
  return childsas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListChildSa >*
ListIkeSa::mutable_childsas() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.ListIkeSa.childsas)
  return &childsas_;
}
inline const ::opi_api::security::v1::ListChildSa& ListIkeSa::_internal_childsas(int index) const {
  return childsas_.Get(index);
}
inline const ::opi_api::security::v1::ListChildSa& ListIkeSa::childsas(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListIkeSa.childsas)
  return _internal_childsas(index);
}
inline ::opi_api::security::v1::ListChildSa* ListIkeSa::_internal_add_childsas() {
  return childsas_.Add();
}
inline ::opi_api::security::v1::ListChildSa* ListIkeSa::add_childsas() {
  ::opi_api::security::v1::ListChildSa* _add = _internal_add_childsas();
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListIkeSa.childsas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListChildSa >&
ListIkeSa::childsas() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.ListIkeSa.childsas)
  return childsas_;
}

// -------------------------------------------------------------------

// IPsecListSasResp

// repeated .opi_api.security.v1.ListIkeSa ikesas = 1;
inline int IPsecListSasResp::_internal_ikesas_size() const {
  return ikesas_.size();
}
inline int IPsecListSasResp::ikesas_size() const {
  return _internal_ikesas_size();
}
inline void IPsecListSasResp::clear_ikesas() {
  ikesas_.Clear();
}
inline ::opi_api::security::v1::ListIkeSa* IPsecListSasResp::mutable_ikesas(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecListSasResp.ikesas)
  return ikesas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListIkeSa >*
IPsecListSasResp::mutable_ikesas() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.IPsecListSasResp.ikesas)
  return &ikesas_;
}
inline const ::opi_api::security::v1::ListIkeSa& IPsecListSasResp::_internal_ikesas(int index) const {
  return ikesas_.Get(index);
}
inline const ::opi_api::security::v1::ListIkeSa& IPsecListSasResp::ikesas(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecListSasResp.ikesas)
  return _internal_ikesas(index);
}
inline ::opi_api::security::v1::ListIkeSa* IPsecListSasResp::_internal_add_ikesas() {
  return ikesas_.Add();
}
inline ::opi_api::security::v1::ListIkeSa* IPsecListSasResp::add_ikesas() {
  ::opi_api::security::v1::ListIkeSa* _add = _internal_add_ikesas();
  // @@protoc_insertion_point(field_add:opi_api.security.v1.IPsecListSasResp.ikesas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListIkeSa >&
IPsecListSasResp::ikesas() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.IPsecListSasResp.ikesas)
  return ikesas_;
}

// -------------------------------------------------------------------

// IPsecListConnsReq

// string ike = 1;
inline void IPsecListConnsReq::clear_ike() {
  ike_.ClearToEmpty();
}
inline const std::string& IPsecListConnsReq::ike() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecListConnsReq.ike)
  return _internal_ike();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecListConnsReq::set_ike(ArgT0&& arg0, ArgT... args) {
 
 ike_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecListConnsReq.ike)
}
inline std::string* IPsecListConnsReq::mutable_ike() {
  std::string* _s = _internal_mutable_ike();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecListConnsReq.ike)
  return _s;
}
inline const std::string& IPsecListConnsReq::_internal_ike() const {
  return ike_.Get();
}
inline void IPsecListConnsReq::_internal_set_ike(const std::string& value) {
  
  ike_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecListConnsReq::_internal_mutable_ike() {
  
  return ike_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecListConnsReq::release_ike() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecListConnsReq.ike)
  return ike_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecListConnsReq::set_allocated_ike(std::string* ike) {
  if (ike != nullptr) {
    
  } else {
    
  }
  ike_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ike,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ike_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ike_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecListConnsReq.ike)
}

// -------------------------------------------------------------------

// ListConnAuth

// string class = 1;
inline void ListConnAuth::clear_class_() {
  class__.ClearToEmpty();
}
inline const std::string& ListConnAuth::class_() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnAuth.class)
  return _internal_class_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConnAuth::set_class_(ArgT0&& arg0, ArgT... args) {
 
 class__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnAuth.class)
}
inline std::string* ListConnAuth::mutable_class_() {
  std::string* _s = _internal_mutable_class_();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnAuth.class)
  return _s;
}
inline const std::string& ListConnAuth::_internal_class_() const {
  return class__.Get();
}
inline void ListConnAuth::_internal_set_class_(const std::string& value) {
  
  class__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConnAuth::_internal_mutable_class_() {
  
  return class__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConnAuth::release_class_() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnAuth.class)
  return class__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConnAuth::set_allocated_class_(std::string* class_) {
  if (class_ != nullptr) {
    
  } else {
    
  }
  class__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class__.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    class__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnAuth.class)
}

// string eaptype = 2;
inline void ListConnAuth::clear_eaptype() {
  eaptype_.ClearToEmpty();
}
inline const std::string& ListConnAuth::eaptype() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnAuth.eaptype)
  return _internal_eaptype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConnAuth::set_eaptype(ArgT0&& arg0, ArgT... args) {
 
 eaptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnAuth.eaptype)
}
inline std::string* ListConnAuth::mutable_eaptype() {
  std::string* _s = _internal_mutable_eaptype();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnAuth.eaptype)
  return _s;
}
inline const std::string& ListConnAuth::_internal_eaptype() const {
  return eaptype_.Get();
}
inline void ListConnAuth::_internal_set_eaptype(const std::string& value) {
  
  eaptype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConnAuth::_internal_mutable_eaptype() {
  
  return eaptype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConnAuth::release_eaptype() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnAuth.eaptype)
  return eaptype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConnAuth::set_allocated_eaptype(std::string* eaptype) {
  if (eaptype != nullptr) {
    
  } else {
    
  }
  eaptype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eaptype,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (eaptype_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    eaptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnAuth.eaptype)
}

// string eapvendor = 3;
inline void ListConnAuth::clear_eapvendor() {
  eapvendor_.ClearToEmpty();
}
inline const std::string& ListConnAuth::eapvendor() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnAuth.eapvendor)
  return _internal_eapvendor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConnAuth::set_eapvendor(ArgT0&& arg0, ArgT... args) {
 
 eapvendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnAuth.eapvendor)
}
inline std::string* ListConnAuth::mutable_eapvendor() {
  std::string* _s = _internal_mutable_eapvendor();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnAuth.eapvendor)
  return _s;
}
inline const std::string& ListConnAuth::_internal_eapvendor() const {
  return eapvendor_.Get();
}
inline void ListConnAuth::_internal_set_eapvendor(const std::string& value) {
  
  eapvendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConnAuth::_internal_mutable_eapvendor() {
  
  return eapvendor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConnAuth::release_eapvendor() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnAuth.eapvendor)
  return eapvendor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConnAuth::set_allocated_eapvendor(std::string* eapvendor) {
  if (eapvendor != nullptr) {
    
  } else {
    
  }
  eapvendor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eapvendor,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (eapvendor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    eapvendor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnAuth.eapvendor)
}

// string xauth = 4;
inline void ListConnAuth::clear_xauth() {
  xauth_.ClearToEmpty();
}
inline const std::string& ListConnAuth::xauth() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnAuth.xauth)
  return _internal_xauth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConnAuth::set_xauth(ArgT0&& arg0, ArgT... args) {
 
 xauth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnAuth.xauth)
}
inline std::string* ListConnAuth::mutable_xauth() {
  std::string* _s = _internal_mutable_xauth();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnAuth.xauth)
  return _s;
}
inline const std::string& ListConnAuth::_internal_xauth() const {
  return xauth_.Get();
}
inline void ListConnAuth::_internal_set_xauth(const std::string& value) {
  
  xauth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConnAuth::_internal_mutable_xauth() {
  
  return xauth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConnAuth::release_xauth() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnAuth.xauth)
  return xauth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConnAuth::set_allocated_xauth(std::string* xauth) {
  if (xauth != nullptr) {
    
  } else {
    
  }
  xauth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xauth,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (xauth_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    xauth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnAuth.xauth)
}

// string revocation = 5;
inline void ListConnAuth::clear_revocation() {
  revocation_.ClearToEmpty();
}
inline const std::string& ListConnAuth::revocation() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnAuth.revocation)
  return _internal_revocation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConnAuth::set_revocation(ArgT0&& arg0, ArgT... args) {
 
 revocation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnAuth.revocation)
}
inline std::string* ListConnAuth::mutable_revocation() {
  std::string* _s = _internal_mutable_revocation();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnAuth.revocation)
  return _s;
}
inline const std::string& ListConnAuth::_internal_revocation() const {
  return revocation_.Get();
}
inline void ListConnAuth::_internal_set_revocation(const std::string& value) {
  
  revocation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConnAuth::_internal_mutable_revocation() {
  
  return revocation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConnAuth::release_revocation() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnAuth.revocation)
  return revocation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConnAuth::set_allocated_revocation(std::string* revocation) {
  if (revocation != nullptr) {
    
  } else {
    
  }
  revocation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), revocation,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (revocation_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    revocation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnAuth.revocation)
}

// string id = 6;
inline void ListConnAuth::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ListConnAuth::id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnAuth.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConnAuth::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnAuth.id)
}
inline std::string* ListConnAuth::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnAuth.id)
  return _s;
}
inline const std::string& ListConnAuth::_internal_id() const {
  return id_.Get();
}
inline void ListConnAuth::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConnAuth::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConnAuth::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnAuth.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConnAuth::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnAuth.id)
}

// string ca_id = 7;
inline void ListConnAuth::clear_ca_id() {
  ca_id_.ClearToEmpty();
}
inline const std::string& ListConnAuth::ca_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnAuth.ca_id)
  return _internal_ca_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConnAuth::set_ca_id(ArgT0&& arg0, ArgT... args) {
 
 ca_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnAuth.ca_id)
}
inline std::string* ListConnAuth::mutable_ca_id() {
  std::string* _s = _internal_mutable_ca_id();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnAuth.ca_id)
  return _s;
}
inline const std::string& ListConnAuth::_internal_ca_id() const {
  return ca_id_.Get();
}
inline void ListConnAuth::_internal_set_ca_id(const std::string& value) {
  
  ca_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConnAuth::_internal_mutable_ca_id() {
  
  return ca_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConnAuth::release_ca_id() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnAuth.ca_id)
  return ca_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConnAuth::set_allocated_ca_id(std::string* ca_id) {
  if (ca_id != nullptr) {
    
  } else {
    
  }
  ca_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ca_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ca_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ca_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnAuth.ca_id)
}

// string aaa_id = 8;
inline void ListConnAuth::clear_aaa_id() {
  aaa_id_.ClearToEmpty();
}
inline const std::string& ListConnAuth::aaa_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnAuth.aaa_id)
  return _internal_aaa_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConnAuth::set_aaa_id(ArgT0&& arg0, ArgT... args) {
 
 aaa_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnAuth.aaa_id)
}
inline std::string* ListConnAuth::mutable_aaa_id() {
  std::string* _s = _internal_mutable_aaa_id();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnAuth.aaa_id)
  return _s;
}
inline const std::string& ListConnAuth::_internal_aaa_id() const {
  return aaa_id_.Get();
}
inline void ListConnAuth::_internal_set_aaa_id(const std::string& value) {
  
  aaa_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConnAuth::_internal_mutable_aaa_id() {
  
  return aaa_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConnAuth::release_aaa_id() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnAuth.aaa_id)
  return aaa_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConnAuth::set_allocated_aaa_id(std::string* aaa_id) {
  if (aaa_id != nullptr) {
    
  } else {
    
  }
  aaa_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aaa_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (aaa_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    aaa_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnAuth.aaa_id)
}

// string eap_id = 9;
inline void ListConnAuth::clear_eap_id() {
  eap_id_.ClearToEmpty();
}
inline const std::string& ListConnAuth::eap_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnAuth.eap_id)
  return _internal_eap_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConnAuth::set_eap_id(ArgT0&& arg0, ArgT... args) {
 
 eap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnAuth.eap_id)
}
inline std::string* ListConnAuth::mutable_eap_id() {
  std::string* _s = _internal_mutable_eap_id();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnAuth.eap_id)
  return _s;
}
inline const std::string& ListConnAuth::_internal_eap_id() const {
  return eap_id_.Get();
}
inline void ListConnAuth::_internal_set_eap_id(const std::string& value) {
  
  eap_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConnAuth::_internal_mutable_eap_id() {
  
  return eap_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConnAuth::release_eap_id() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnAuth.eap_id)
  return eap_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConnAuth::set_allocated_eap_id(std::string* eap_id) {
  if (eap_id != nullptr) {
    
  } else {
    
  }
  eap_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eap_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (eap_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    eap_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnAuth.eap_id)
}

// string xauth_id = 10;
inline void ListConnAuth::clear_xauth_id() {
  xauth_id_.ClearToEmpty();
}
inline const std::string& ListConnAuth::xauth_id() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnAuth.xauth_id)
  return _internal_xauth_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConnAuth::set_xauth_id(ArgT0&& arg0, ArgT... args) {
 
 xauth_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnAuth.xauth_id)
}
inline std::string* ListConnAuth::mutable_xauth_id() {
  std::string* _s = _internal_mutable_xauth_id();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnAuth.xauth_id)
  return _s;
}
inline const std::string& ListConnAuth::_internal_xauth_id() const {
  return xauth_id_.Get();
}
inline void ListConnAuth::_internal_set_xauth_id(const std::string& value) {
  
  xauth_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConnAuth::_internal_mutable_xauth_id() {
  
  return xauth_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConnAuth::release_xauth_id() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnAuth.xauth_id)
  return xauth_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConnAuth::set_allocated_xauth_id(std::string* xauth_id) {
  if (xauth_id != nullptr) {
    
  } else {
    
  }
  xauth_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xauth_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (xauth_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    xauth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnAuth.xauth_id)
}

// .opi_api.security.v1.Groups group = 11;
inline bool ListConnAuth::_internal_has_group() const {
  return this != internal_default_instance() && group_ != nullptr;
}
inline bool ListConnAuth::has_group() const {
  return _internal_has_group();
}
inline void ListConnAuth::clear_group() {
  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
inline const ::opi_api::security::v1::Groups& ListConnAuth::_internal_group() const {
  const ::opi_api::security::v1::Groups* p = group_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::Groups&>(
      ::opi_api::security::v1::_Groups_default_instance_);
}
inline const ::opi_api::security::v1::Groups& ListConnAuth::group() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnAuth.group)
  return _internal_group();
}
inline void ListConnAuth::unsafe_arena_set_allocated_group(
    ::opi_api::security::v1::Groups* group) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_);
  }
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.ListConnAuth.group)
}
inline ::opi_api::security::v1::Groups* ListConnAuth::release_group() {
  
  ::opi_api::security::v1::Groups* temp = group_;
  group_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::Groups* ListConnAuth::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnAuth.group)
  
  ::opi_api::security::v1::Groups* temp = group_;
  group_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::Groups* ListConnAuth::_internal_mutable_group() {
  
  if (group_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::Groups>(GetArenaForAllocation());
    group_ = p;
  }
  return group_;
}
inline ::opi_api::security::v1::Groups* ListConnAuth::mutable_group() {
  ::opi_api::security::v1::Groups* _msg = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnAuth.group)
  return _msg;
}
inline void ListConnAuth::set_allocated_group(::opi_api::security::v1::Groups* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete group_;
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::Groups>::GetOwningArena(group);
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnAuth.group)
}

// .opi_api.security.v1.CertPolicy cert_policy = 12;
inline bool ListConnAuth::_internal_has_cert_policy() const {
  return this != internal_default_instance() && cert_policy_ != nullptr;
}
inline bool ListConnAuth::has_cert_policy() const {
  return _internal_has_cert_policy();
}
inline void ListConnAuth::clear_cert_policy() {
  if (GetArenaForAllocation() == nullptr && cert_policy_ != nullptr) {
    delete cert_policy_;
  }
  cert_policy_ = nullptr;
}
inline const ::opi_api::security::v1::CertPolicy& ListConnAuth::_internal_cert_policy() const {
  const ::opi_api::security::v1::CertPolicy* p = cert_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::CertPolicy&>(
      ::opi_api::security::v1::_CertPolicy_default_instance_);
}
inline const ::opi_api::security::v1::CertPolicy& ListConnAuth::cert_policy() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnAuth.cert_policy)
  return _internal_cert_policy();
}
inline void ListConnAuth::unsafe_arena_set_allocated_cert_policy(
    ::opi_api::security::v1::CertPolicy* cert_policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cert_policy_);
  }
  cert_policy_ = cert_policy;
  if (cert_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.ListConnAuth.cert_policy)
}
inline ::opi_api::security::v1::CertPolicy* ListConnAuth::release_cert_policy() {
  
  ::opi_api::security::v1::CertPolicy* temp = cert_policy_;
  cert_policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::CertPolicy* ListConnAuth::unsafe_arena_release_cert_policy() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnAuth.cert_policy)
  
  ::opi_api::security::v1::CertPolicy* temp = cert_policy_;
  cert_policy_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::CertPolicy* ListConnAuth::_internal_mutable_cert_policy() {
  
  if (cert_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::CertPolicy>(GetArenaForAllocation());
    cert_policy_ = p;
  }
  return cert_policy_;
}
inline ::opi_api::security::v1::CertPolicy* ListConnAuth::mutable_cert_policy() {
  ::opi_api::security::v1::CertPolicy* _msg = _internal_mutable_cert_policy();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnAuth.cert_policy)
  return _msg;
}
inline void ListConnAuth::set_allocated_cert_policy(::opi_api::security::v1::CertPolicy* cert_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cert_policy_;
  }
  if (cert_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::CertPolicy>::GetOwningArena(cert_policy);
    if (message_arena != submessage_arena) {
      cert_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cert_policy, submessage_arena);
    }
    
  } else {
    
  }
  cert_policy_ = cert_policy;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnAuth.cert_policy)
}

// .opi_api.security.v1.Certs certs = 13;
inline bool ListConnAuth::_internal_has_certs() const {
  return this != internal_default_instance() && certs_ != nullptr;
}
inline bool ListConnAuth::has_certs() const {
  return _internal_has_certs();
}
inline void ListConnAuth::clear_certs() {
  if (GetArenaForAllocation() == nullptr && certs_ != nullptr) {
    delete certs_;
  }
  certs_ = nullptr;
}
inline const ::opi_api::security::v1::Certs& ListConnAuth::_internal_certs() const {
  const ::opi_api::security::v1::Certs* p = certs_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::Certs&>(
      ::opi_api::security::v1::_Certs_default_instance_);
}
inline const ::opi_api::security::v1::Certs& ListConnAuth::certs() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnAuth.certs)
  return _internal_certs();
}
inline void ListConnAuth::unsafe_arena_set_allocated_certs(
    ::opi_api::security::v1::Certs* certs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(certs_);
  }
  certs_ = certs;
  if (certs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.ListConnAuth.certs)
}
inline ::opi_api::security::v1::Certs* ListConnAuth::release_certs() {
  
  ::opi_api::security::v1::Certs* temp = certs_;
  certs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::Certs* ListConnAuth::unsafe_arena_release_certs() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnAuth.certs)
  
  ::opi_api::security::v1::Certs* temp = certs_;
  certs_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::Certs* ListConnAuth::_internal_mutable_certs() {
  
  if (certs_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::Certs>(GetArenaForAllocation());
    certs_ = p;
  }
  return certs_;
}
inline ::opi_api::security::v1::Certs* ListConnAuth::mutable_certs() {
  ::opi_api::security::v1::Certs* _msg = _internal_mutable_certs();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnAuth.certs)
  return _msg;
}
inline void ListConnAuth::set_allocated_certs(::opi_api::security::v1::Certs* certs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete certs_;
  }
  if (certs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::Certs>::GetOwningArena(certs);
    if (message_arena != submessage_arena) {
      certs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, certs, submessage_arena);
    }
    
  } else {
    
  }
  certs_ = certs;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnAuth.certs)
}

// .opi_api.security.v1.CaCerts cacerts = 14;
inline bool ListConnAuth::_internal_has_cacerts() const {
  return this != internal_default_instance() && cacerts_ != nullptr;
}
inline bool ListConnAuth::has_cacerts() const {
  return _internal_has_cacerts();
}
inline void ListConnAuth::clear_cacerts() {
  if (GetArenaForAllocation() == nullptr && cacerts_ != nullptr) {
    delete cacerts_;
  }
  cacerts_ = nullptr;
}
inline const ::opi_api::security::v1::CaCerts& ListConnAuth::_internal_cacerts() const {
  const ::opi_api::security::v1::CaCerts* p = cacerts_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::CaCerts&>(
      ::opi_api::security::v1::_CaCerts_default_instance_);
}
inline const ::opi_api::security::v1::CaCerts& ListConnAuth::cacerts() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnAuth.cacerts)
  return _internal_cacerts();
}
inline void ListConnAuth::unsafe_arena_set_allocated_cacerts(
    ::opi_api::security::v1::CaCerts* cacerts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cacerts_);
  }
  cacerts_ = cacerts;
  if (cacerts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.ListConnAuth.cacerts)
}
inline ::opi_api::security::v1::CaCerts* ListConnAuth::release_cacerts() {
  
  ::opi_api::security::v1::CaCerts* temp = cacerts_;
  cacerts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::CaCerts* ListConnAuth::unsafe_arena_release_cacerts() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnAuth.cacerts)
  
  ::opi_api::security::v1::CaCerts* temp = cacerts_;
  cacerts_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::CaCerts* ListConnAuth::_internal_mutable_cacerts() {
  
  if (cacerts_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::CaCerts>(GetArenaForAllocation());
    cacerts_ = p;
  }
  return cacerts_;
}
inline ::opi_api::security::v1::CaCerts* ListConnAuth::mutable_cacerts() {
  ::opi_api::security::v1::CaCerts* _msg = _internal_mutable_cacerts();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnAuth.cacerts)
  return _msg;
}
inline void ListConnAuth::set_allocated_cacerts(::opi_api::security::v1::CaCerts* cacerts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cacerts_;
  }
  if (cacerts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::CaCerts>::GetOwningArena(cacerts);
    if (message_arena != submessage_arena) {
      cacerts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cacerts, submessage_arena);
    }
    
  } else {
    
  }
  cacerts_ = cacerts;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnAuth.cacerts)
}

// -------------------------------------------------------------------

// ListChild

// string name = 1;
inline void ListChild::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListChild::name() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChild.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChild::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChild.name)
}
inline std::string* ListChild::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChild.name)
  return _s;
}
inline const std::string& ListChild::_internal_name() const {
  return name_.Get();
}
inline void ListChild::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChild::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChild::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChild.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChild::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChild.name)
}

// string mode = 2;
inline void ListChild::clear_mode() {
  mode_.ClearToEmpty();
}
inline const std::string& ListChild::mode() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChild.mode)
  return _internal_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChild::set_mode(ArgT0&& arg0, ArgT... args) {
 
 mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChild.mode)
}
inline std::string* ListChild::mutable_mode() {
  std::string* _s = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChild.mode)
  return _s;
}
inline const std::string& ListChild::_internal_mode() const {
  return mode_.Get();
}
inline void ListChild::_internal_set_mode(const std::string& value) {
  
  mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChild::_internal_mutable_mode() {
  
  return mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChild::release_mode() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChild.mode)
  return mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChild::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChild.mode)
}

// string label = 3;
inline void ListChild::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& ListChild::label() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChild.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChild::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChild.label)
}
inline std::string* ListChild::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChild.label)
  return _s;
}
inline const std::string& ListChild::_internal_label() const {
  return label_.Get();
}
inline void ListChild::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChild::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChild::release_label() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChild.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChild::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChild.label)
}

// uint32 rekey_time = 4;
inline void ListChild::clear_rekey_time() {
  rekey_time_ = 0u;
}
inline uint32_t ListChild::_internal_rekey_time() const {
  return rekey_time_;
}
inline uint32_t ListChild::rekey_time() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChild.rekey_time)
  return _internal_rekey_time();
}
inline void ListChild::_internal_set_rekey_time(uint32_t value) {
  
  rekey_time_ = value;
}
inline void ListChild::set_rekey_time(uint32_t value) {
  _internal_set_rekey_time(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChild.rekey_time)
}

// uint32 rekey_bytes = 5;
inline void ListChild::clear_rekey_bytes() {
  rekey_bytes_ = 0u;
}
inline uint32_t ListChild::_internal_rekey_bytes() const {
  return rekey_bytes_;
}
inline uint32_t ListChild::rekey_bytes() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChild.rekey_bytes)
  return _internal_rekey_bytes();
}
inline void ListChild::_internal_set_rekey_bytes(uint32_t value) {
  
  rekey_bytes_ = value;
}
inline void ListChild::set_rekey_bytes(uint32_t value) {
  _internal_set_rekey_bytes(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChild.rekey_bytes)
}

// uint32 rekey_packets = 6;
inline void ListChild::clear_rekey_packets() {
  rekey_packets_ = 0u;
}
inline uint32_t ListChild::_internal_rekey_packets() const {
  return rekey_packets_;
}
inline uint32_t ListChild::rekey_packets() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChild.rekey_packets)
  return _internal_rekey_packets();
}
inline void ListChild::_internal_set_rekey_packets(uint32_t value) {
  
  rekey_packets_ = value;
}
inline void ListChild::set_rekey_packets(uint32_t value) {
  _internal_set_rekey_packets(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChild.rekey_packets)
}

// string dpd_action = 7;
inline void ListChild::clear_dpd_action() {
  dpd_action_.ClearToEmpty();
}
inline const std::string& ListChild::dpd_action() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChild.dpd_action)
  return _internal_dpd_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChild::set_dpd_action(ArgT0&& arg0, ArgT... args) {
 
 dpd_action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChild.dpd_action)
}
inline std::string* ListChild::mutable_dpd_action() {
  std::string* _s = _internal_mutable_dpd_action();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChild.dpd_action)
  return _s;
}
inline const std::string& ListChild::_internal_dpd_action() const {
  return dpd_action_.Get();
}
inline void ListChild::_internal_set_dpd_action(const std::string& value) {
  
  dpd_action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChild::_internal_mutable_dpd_action() {
  
  return dpd_action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChild::release_dpd_action() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChild.dpd_action)
  return dpd_action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChild::set_allocated_dpd_action(std::string* dpd_action) {
  if (dpd_action != nullptr) {
    
  } else {
    
  }
  dpd_action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dpd_action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dpd_action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dpd_action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChild.dpd_action)
}

// string close_action = 8;
inline void ListChild::clear_close_action() {
  close_action_.ClearToEmpty();
}
inline const std::string& ListChild::close_action() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChild.close_action)
  return _internal_close_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChild::set_close_action(ArgT0&& arg0, ArgT... args) {
 
 close_action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChild.close_action)
}
inline std::string* ListChild::mutable_close_action() {
  std::string* _s = _internal_mutable_close_action();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChild.close_action)
  return _s;
}
inline const std::string& ListChild::_internal_close_action() const {
  return close_action_.Get();
}
inline void ListChild::_internal_set_close_action(const std::string& value) {
  
  close_action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChild::_internal_mutable_close_action() {
  
  return close_action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChild::release_close_action() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChild.close_action)
  return close_action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChild::set_allocated_close_action(std::string* close_action) {
  if (close_action != nullptr) {
    
  } else {
    
  }
  close_action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), close_action,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (close_action_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    close_action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChild.close_action)
}

// .opi_api.security.v1.TrafficSelectors local_ts = 9;
inline bool ListChild::_internal_has_local_ts() const {
  return this != internal_default_instance() && local_ts_ != nullptr;
}
inline bool ListChild::has_local_ts() const {
  return _internal_has_local_ts();
}
inline void ListChild::clear_local_ts() {
  if (GetArenaForAllocation() == nullptr && local_ts_ != nullptr) {
    delete local_ts_;
  }
  local_ts_ = nullptr;
}
inline const ::opi_api::security::v1::TrafficSelectors& ListChild::_internal_local_ts() const {
  const ::opi_api::security::v1::TrafficSelectors* p = local_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::TrafficSelectors&>(
      ::opi_api::security::v1::_TrafficSelectors_default_instance_);
}
inline const ::opi_api::security::v1::TrafficSelectors& ListChild::local_ts() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChild.local_ts)
  return _internal_local_ts();
}
inline void ListChild::unsafe_arena_set_allocated_local_ts(
    ::opi_api::security::v1::TrafficSelectors* local_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_ts_);
  }
  local_ts_ = local_ts;
  if (local_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.ListChild.local_ts)
}
inline ::opi_api::security::v1::TrafficSelectors* ListChild::release_local_ts() {
  
  ::opi_api::security::v1::TrafficSelectors* temp = local_ts_;
  local_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::TrafficSelectors* ListChild::unsafe_arena_release_local_ts() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChild.local_ts)
  
  ::opi_api::security::v1::TrafficSelectors* temp = local_ts_;
  local_ts_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::TrafficSelectors* ListChild::_internal_mutable_local_ts() {
  
  if (local_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::TrafficSelectors>(GetArenaForAllocation());
    local_ts_ = p;
  }
  return local_ts_;
}
inline ::opi_api::security::v1::TrafficSelectors* ListChild::mutable_local_ts() {
  ::opi_api::security::v1::TrafficSelectors* _msg = _internal_mutable_local_ts();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChild.local_ts)
  return _msg;
}
inline void ListChild::set_allocated_local_ts(::opi_api::security::v1::TrafficSelectors* local_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete local_ts_;
  }
  if (local_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::TrafficSelectors>::GetOwningArena(local_ts);
    if (message_arena != submessage_arena) {
      local_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_ts, submessage_arena);
    }
    
  } else {
    
  }
  local_ts_ = local_ts;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChild.local_ts)
}

// .opi_api.security.v1.TrafficSelectors remote_ts = 10;
inline bool ListChild::_internal_has_remote_ts() const {
  return this != internal_default_instance() && remote_ts_ != nullptr;
}
inline bool ListChild::has_remote_ts() const {
  return _internal_has_remote_ts();
}
inline void ListChild::clear_remote_ts() {
  if (GetArenaForAllocation() == nullptr && remote_ts_ != nullptr) {
    delete remote_ts_;
  }
  remote_ts_ = nullptr;
}
inline const ::opi_api::security::v1::TrafficSelectors& ListChild::_internal_remote_ts() const {
  const ::opi_api::security::v1::TrafficSelectors* p = remote_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::TrafficSelectors&>(
      ::opi_api::security::v1::_TrafficSelectors_default_instance_);
}
inline const ::opi_api::security::v1::TrafficSelectors& ListChild::remote_ts() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChild.remote_ts)
  return _internal_remote_ts();
}
inline void ListChild::unsafe_arena_set_allocated_remote_ts(
    ::opi_api::security::v1::TrafficSelectors* remote_ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_ts_);
  }
  remote_ts_ = remote_ts;
  if (remote_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.ListChild.remote_ts)
}
inline ::opi_api::security::v1::TrafficSelectors* ListChild::release_remote_ts() {
  
  ::opi_api::security::v1::TrafficSelectors* temp = remote_ts_;
  remote_ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::TrafficSelectors* ListChild::unsafe_arena_release_remote_ts() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChild.remote_ts)
  
  ::opi_api::security::v1::TrafficSelectors* temp = remote_ts_;
  remote_ts_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::TrafficSelectors* ListChild::_internal_mutable_remote_ts() {
  
  if (remote_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::TrafficSelectors>(GetArenaForAllocation());
    remote_ts_ = p;
  }
  return remote_ts_;
}
inline ::opi_api::security::v1::TrafficSelectors* ListChild::mutable_remote_ts() {
  ::opi_api::security::v1::TrafficSelectors* _msg = _internal_mutable_remote_ts();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChild.remote_ts)
  return _msg;
}
inline void ListChild::set_allocated_remote_ts(::opi_api::security::v1::TrafficSelectors* remote_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete remote_ts_;
  }
  if (remote_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::TrafficSelectors>::GetOwningArena(remote_ts);
    if (message_arena != submessage_arena) {
      remote_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_ts, submessage_arena);
    }
    
  } else {
    
  }
  remote_ts_ = remote_ts;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChild.remote_ts)
}

// string interface = 11;
inline void ListChild::clear_interface() {
  interface_.ClearToEmpty();
}
inline const std::string& ListChild::interface() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChild.interface)
  return _internal_interface();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChild::set_interface(ArgT0&& arg0, ArgT... args) {
 
 interface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChild.interface)
}
inline std::string* ListChild::mutable_interface() {
  std::string* _s = _internal_mutable_interface();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChild.interface)
  return _s;
}
inline const std::string& ListChild::_internal_interface() const {
  return interface_.Get();
}
inline void ListChild::_internal_set_interface(const std::string& value) {
  
  interface_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChild::_internal_mutable_interface() {
  
  return interface_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChild::release_interface() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChild.interface)
  return interface_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChild::set_allocated_interface(std::string* interface) {
  if (interface != nullptr) {
    
  } else {
    
  }
  interface_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (interface_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    interface_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChild.interface)
}

// string priority = 12;
inline void ListChild::clear_priority() {
  priority_.ClearToEmpty();
}
inline const std::string& ListChild::priority() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListChild.priority)
  return _internal_priority();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListChild::set_priority(ArgT0&& arg0, ArgT... args) {
 
 priority_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListChild.priority)
}
inline std::string* ListChild::mutable_priority() {
  std::string* _s = _internal_mutable_priority();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListChild.priority)
  return _s;
}
inline const std::string& ListChild::_internal_priority() const {
  return priority_.Get();
}
inline void ListChild::_internal_set_priority(const std::string& value) {
  
  priority_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListChild::_internal_mutable_priority() {
  
  return priority_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListChild::release_priority() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListChild.priority)
  return priority_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListChild::set_allocated_priority(std::string* priority) {
  if (priority != nullptr) {
    
  } else {
    
  }
  priority_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), priority,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (priority_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    priority_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListChild.priority)
}

// -------------------------------------------------------------------

// ListConnResp

// string name = 1;
inline void ListConnResp::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListConnResp::name() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnResp.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConnResp::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnResp.name)
}
inline std::string* ListConnResp::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnResp.name)
  return _s;
}
inline const std::string& ListConnResp::_internal_name() const {
  return name_.Get();
}
inline void ListConnResp::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConnResp::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConnResp::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnResp.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConnResp::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnResp.name)
}

// repeated .opi_api.security.v1.Addrs local_addrs = 2;
inline int ListConnResp::_internal_local_addrs_size() const {
  return local_addrs_.size();
}
inline int ListConnResp::local_addrs_size() const {
  return _internal_local_addrs_size();
}
inline void ListConnResp::clear_local_addrs() {
  local_addrs_.Clear();
}
inline ::opi_api::security::v1::Addrs* ListConnResp::mutable_local_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnResp.local_addrs)
  return local_addrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >*
ListConnResp::mutable_local_addrs() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.ListConnResp.local_addrs)
  return &local_addrs_;
}
inline const ::opi_api::security::v1::Addrs& ListConnResp::_internal_local_addrs(int index) const {
  return local_addrs_.Get(index);
}
inline const ::opi_api::security::v1::Addrs& ListConnResp::local_addrs(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnResp.local_addrs)
  return _internal_local_addrs(index);
}
inline ::opi_api::security::v1::Addrs* ListConnResp::_internal_add_local_addrs() {
  return local_addrs_.Add();
}
inline ::opi_api::security::v1::Addrs* ListConnResp::add_local_addrs() {
  ::opi_api::security::v1::Addrs* _add = _internal_add_local_addrs();
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListConnResp.local_addrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >&
ListConnResp::local_addrs() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.ListConnResp.local_addrs)
  return local_addrs_;
}

// repeated .opi_api.security.v1.Addrs remote_addrs = 3;
inline int ListConnResp::_internal_remote_addrs_size() const {
  return remote_addrs_.size();
}
inline int ListConnResp::remote_addrs_size() const {
  return _internal_remote_addrs_size();
}
inline void ListConnResp::clear_remote_addrs() {
  remote_addrs_.Clear();
}
inline ::opi_api::security::v1::Addrs* ListConnResp::mutable_remote_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnResp.remote_addrs)
  return remote_addrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >*
ListConnResp::mutable_remote_addrs() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.ListConnResp.remote_addrs)
  return &remote_addrs_;
}
inline const ::opi_api::security::v1::Addrs& ListConnResp::_internal_remote_addrs(int index) const {
  return remote_addrs_.Get(index);
}
inline const ::opi_api::security::v1::Addrs& ListConnResp::remote_addrs(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnResp.remote_addrs)
  return _internal_remote_addrs(index);
}
inline ::opi_api::security::v1::Addrs* ListConnResp::_internal_add_remote_addrs() {
  return remote_addrs_.Add();
}
inline ::opi_api::security::v1::Addrs* ListConnResp::add_remote_addrs() {
  ::opi_api::security::v1::Addrs* _add = _internal_add_remote_addrs();
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListConnResp.remote_addrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::Addrs >&
ListConnResp::remote_addrs() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.ListConnResp.remote_addrs)
  return remote_addrs_;
}

// string version = 4;
inline void ListConnResp::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& ListConnResp::version() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnResp.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConnResp::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnResp.version)
}
inline std::string* ListConnResp::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnResp.version)
  return _s;
}
inline const std::string& ListConnResp::_internal_version() const {
  return version_.Get();
}
inline void ListConnResp::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConnResp::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConnResp::release_version() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnResp.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConnResp::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnResp.version)
}

// uint32 reauth_time = 5;
inline void ListConnResp::clear_reauth_time() {
  reauth_time_ = 0u;
}
inline uint32_t ListConnResp::_internal_reauth_time() const {
  return reauth_time_;
}
inline uint32_t ListConnResp::reauth_time() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnResp.reauth_time)
  return _internal_reauth_time();
}
inline void ListConnResp::_internal_set_reauth_time(uint32_t value) {
  
  reauth_time_ = value;
}
inline void ListConnResp::set_reauth_time(uint32_t value) {
  _internal_set_reauth_time(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnResp.reauth_time)
}

// uint32 rekey_time = 6;
inline void ListConnResp::clear_rekey_time() {
  rekey_time_ = 0u;
}
inline uint32_t ListConnResp::_internal_rekey_time() const {
  return rekey_time_;
}
inline uint32_t ListConnResp::rekey_time() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnResp.rekey_time)
  return _internal_rekey_time();
}
inline void ListConnResp::_internal_set_rekey_time(uint32_t value) {
  
  rekey_time_ = value;
}
inline void ListConnResp::set_rekey_time(uint32_t value) {
  _internal_set_rekey_time(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnResp.rekey_time)
}

// string unique = 7;
inline void ListConnResp::clear_unique() {
  unique_.ClearToEmpty();
}
inline const std::string& ListConnResp::unique() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnResp.unique)
  return _internal_unique();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConnResp::set_unique(ArgT0&& arg0, ArgT... args) {
 
 unique_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnResp.unique)
}
inline std::string* ListConnResp::mutable_unique() {
  std::string* _s = _internal_mutable_unique();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnResp.unique)
  return _s;
}
inline const std::string& ListConnResp::_internal_unique() const {
  return unique_.Get();
}
inline void ListConnResp::_internal_set_unique(const std::string& value) {
  
  unique_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConnResp::_internal_mutable_unique() {
  
  return unique_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConnResp::release_unique() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnResp.unique)
  return unique_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConnResp::set_allocated_unique(std::string* unique) {
  if (unique != nullptr) {
    
  } else {
    
  }
  unique_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unique_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    unique_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnResp.unique)
}

// uint32 dpd_delay = 8;
inline void ListConnResp::clear_dpd_delay() {
  dpd_delay_ = 0u;
}
inline uint32_t ListConnResp::_internal_dpd_delay() const {
  return dpd_delay_;
}
inline uint32_t ListConnResp::dpd_delay() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnResp.dpd_delay)
  return _internal_dpd_delay();
}
inline void ListConnResp::_internal_set_dpd_delay(uint32_t value) {
  
  dpd_delay_ = value;
}
inline void ListConnResp::set_dpd_delay(uint32_t value) {
  _internal_set_dpd_delay(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnResp.dpd_delay)
}

// uint32 dpd_timeout = 9;
inline void ListConnResp::clear_dpd_timeout() {
  dpd_timeout_ = 0u;
}
inline uint32_t ListConnResp::_internal_dpd_timeout() const {
  return dpd_timeout_;
}
inline uint32_t ListConnResp::dpd_timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnResp.dpd_timeout)
  return _internal_dpd_timeout();
}
inline void ListConnResp::_internal_set_dpd_timeout(uint32_t value) {
  
  dpd_timeout_ = value;
}
inline void ListConnResp::set_dpd_timeout(uint32_t value) {
  _internal_set_dpd_timeout(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnResp.dpd_timeout)
}

// string ppk = 10;
inline void ListConnResp::clear_ppk() {
  ppk_.ClearToEmpty();
}
inline const std::string& ListConnResp::ppk() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnResp.ppk)
  return _internal_ppk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConnResp::set_ppk(ArgT0&& arg0, ArgT... args) {
 
 ppk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnResp.ppk)
}
inline std::string* ListConnResp::mutable_ppk() {
  std::string* _s = _internal_mutable_ppk();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnResp.ppk)
  return _s;
}
inline const std::string& ListConnResp::_internal_ppk() const {
  return ppk_.Get();
}
inline void ListConnResp::_internal_set_ppk(const std::string& value) {
  
  ppk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConnResp::_internal_mutable_ppk() {
  
  return ppk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConnResp::release_ppk() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnResp.ppk)
  return ppk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConnResp::set_allocated_ppk(std::string* ppk) {
  if (ppk != nullptr) {
    
  } else {
    
  }
  ppk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ppk,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ppk_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ppk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnResp.ppk)
}

// string ppk_required = 11;
inline void ListConnResp::clear_ppk_required() {
  ppk_required_.ClearToEmpty();
}
inline const std::string& ListConnResp::ppk_required() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnResp.ppk_required)
  return _internal_ppk_required();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConnResp::set_ppk_required(ArgT0&& arg0, ArgT... args) {
 
 ppk_required_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListConnResp.ppk_required)
}
inline std::string* ListConnResp::mutable_ppk_required() {
  std::string* _s = _internal_mutable_ppk_required();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnResp.ppk_required)
  return _s;
}
inline const std::string& ListConnResp::_internal_ppk_required() const {
  return ppk_required_.Get();
}
inline void ListConnResp::_internal_set_ppk_required(const std::string& value) {
  
  ppk_required_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConnResp::_internal_mutable_ppk_required() {
  
  return ppk_required_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConnResp::release_ppk_required() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListConnResp.ppk_required)
  return ppk_required_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConnResp::set_allocated_ppk_required(std::string* ppk_required) {
  if (ppk_required != nullptr) {
    
  } else {
    
  }
  ppk_required_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ppk_required,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ppk_required_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ppk_required_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListConnResp.ppk_required)
}

// repeated .opi_api.security.v1.ListConnAuth local_auth = 12;
inline int ListConnResp::_internal_local_auth_size() const {
  return local_auth_.size();
}
inline int ListConnResp::local_auth_size() const {
  return _internal_local_auth_size();
}
inline void ListConnResp::clear_local_auth() {
  local_auth_.Clear();
}
inline ::opi_api::security::v1::ListConnAuth* ListConnResp::mutable_local_auth(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnResp.local_auth)
  return local_auth_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListConnAuth >*
ListConnResp::mutable_local_auth() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.ListConnResp.local_auth)
  return &local_auth_;
}
inline const ::opi_api::security::v1::ListConnAuth& ListConnResp::_internal_local_auth(int index) const {
  return local_auth_.Get(index);
}
inline const ::opi_api::security::v1::ListConnAuth& ListConnResp::local_auth(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnResp.local_auth)
  return _internal_local_auth(index);
}
inline ::opi_api::security::v1::ListConnAuth* ListConnResp::_internal_add_local_auth() {
  return local_auth_.Add();
}
inline ::opi_api::security::v1::ListConnAuth* ListConnResp::add_local_auth() {
  ::opi_api::security::v1::ListConnAuth* _add = _internal_add_local_auth();
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListConnResp.local_auth)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListConnAuth >&
ListConnResp::local_auth() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.ListConnResp.local_auth)
  return local_auth_;
}

// repeated .opi_api.security.v1.ListConnAuth remote_auth = 13;
inline int ListConnResp::_internal_remote_auth_size() const {
  return remote_auth_.size();
}
inline int ListConnResp::remote_auth_size() const {
  return _internal_remote_auth_size();
}
inline void ListConnResp::clear_remote_auth() {
  remote_auth_.Clear();
}
inline ::opi_api::security::v1::ListConnAuth* ListConnResp::mutable_remote_auth(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnResp.remote_auth)
  return remote_auth_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListConnAuth >*
ListConnResp::mutable_remote_auth() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.ListConnResp.remote_auth)
  return &remote_auth_;
}
inline const ::opi_api::security::v1::ListConnAuth& ListConnResp::_internal_remote_auth(int index) const {
  return remote_auth_.Get(index);
}
inline const ::opi_api::security::v1::ListConnAuth& ListConnResp::remote_auth(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnResp.remote_auth)
  return _internal_remote_auth(index);
}
inline ::opi_api::security::v1::ListConnAuth* ListConnResp::_internal_add_remote_auth() {
  return remote_auth_.Add();
}
inline ::opi_api::security::v1::ListConnAuth* ListConnResp::add_remote_auth() {
  ::opi_api::security::v1::ListConnAuth* _add = _internal_add_remote_auth();
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListConnResp.remote_auth)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListConnAuth >&
ListConnResp::remote_auth() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.ListConnResp.remote_auth)
  return remote_auth_;
}

// repeated .opi_api.security.v1.ListChild children = 14;
inline int ListConnResp::_internal_children_size() const {
  return children_.size();
}
inline int ListConnResp::children_size() const {
  return _internal_children_size();
}
inline void ListConnResp::clear_children() {
  children_.Clear();
}
inline ::opi_api::security::v1::ListChild* ListConnResp::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListConnResp.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListChild >*
ListConnResp::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.ListConnResp.children)
  return &children_;
}
inline const ::opi_api::security::v1::ListChild& ListConnResp::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::opi_api::security::v1::ListChild& ListConnResp::children(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListConnResp.children)
  return _internal_children(index);
}
inline ::opi_api::security::v1::ListChild* ListConnResp::_internal_add_children() {
  return children_.Add();
}
inline ::opi_api::security::v1::ListChild* ListConnResp::add_children() {
  ::opi_api::security::v1::ListChild* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:opi_api.security.v1.ListConnResp.children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListChild >&
ListConnResp::children() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.ListConnResp.children)
  return children_;
}

// -------------------------------------------------------------------

// IPsecListConnsResp

// repeated .opi_api.security.v1.ListConnResp connection = 1;
inline int IPsecListConnsResp::_internal_connection_size() const {
  return connection_.size();
}
inline int IPsecListConnsResp::connection_size() const {
  return _internal_connection_size();
}
inline void IPsecListConnsResp::clear_connection() {
  connection_.Clear();
}
inline ::opi_api::security::v1::ListConnResp* IPsecListConnsResp::mutable_connection(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecListConnsResp.connection)
  return connection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListConnResp >*
IPsecListConnsResp::mutable_connection() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.IPsecListConnsResp.connection)
  return &connection_;
}
inline const ::opi_api::security::v1::ListConnResp& IPsecListConnsResp::_internal_connection(int index) const {
  return connection_.Get(index);
}
inline const ::opi_api::security::v1::ListConnResp& IPsecListConnsResp::connection(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecListConnsResp.connection)
  return _internal_connection(index);
}
inline ::opi_api::security::v1::ListConnResp* IPsecListConnsResp::_internal_add_connection() {
  return connection_.Add();
}
inline ::opi_api::security::v1::ListConnResp* IPsecListConnsResp::add_connection() {
  ::opi_api::security::v1::ListConnResp* _add = _internal_add_connection();
  // @@protoc_insertion_point(field_add:opi_api.security.v1.IPsecListConnsResp.connection)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListConnResp >&
IPsecListConnsResp::connection() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.IPsecListConnsResp.connection)
  return connection_;
}

// -------------------------------------------------------------------

// IPsecListCertsReq

// string type = 1;
inline void IPsecListCertsReq::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& IPsecListCertsReq::type() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecListCertsReq.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecListCertsReq::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecListCertsReq.type)
}
inline std::string* IPsecListCertsReq::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecListCertsReq.type)
  return _s;
}
inline const std::string& IPsecListCertsReq::_internal_type() const {
  return type_.Get();
}
inline void IPsecListCertsReq::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecListCertsReq::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecListCertsReq::release_type() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecListCertsReq.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecListCertsReq::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecListCertsReq.type)
}

// string flag = 2;
inline void IPsecListCertsReq::clear_flag() {
  flag_.ClearToEmpty();
}
inline const std::string& IPsecListCertsReq::flag() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecListCertsReq.flag)
  return _internal_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecListCertsReq::set_flag(ArgT0&& arg0, ArgT... args) {
 
 flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecListCertsReq.flag)
}
inline std::string* IPsecListCertsReq::mutable_flag() {
  std::string* _s = _internal_mutable_flag();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecListCertsReq.flag)
  return _s;
}
inline const std::string& IPsecListCertsReq::_internal_flag() const {
  return flag_.Get();
}
inline void IPsecListCertsReq::_internal_set_flag(const std::string& value) {
  
  flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecListCertsReq::_internal_mutable_flag() {
  
  return flag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecListCertsReq::release_flag() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecListCertsReq.flag)
  return flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecListCertsReq::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    
  } else {
    
  }
  flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecListCertsReq.flag)
}

// string subject = 3;
inline void IPsecListCertsReq::clear_subject() {
  subject_.ClearToEmpty();
}
inline const std::string& IPsecListCertsReq::subject() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecListCertsReq.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecListCertsReq::set_subject(ArgT0&& arg0, ArgT... args) {
 
 subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecListCertsReq.subject)
}
inline std::string* IPsecListCertsReq::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecListCertsReq.subject)
  return _s;
}
inline const std::string& IPsecListCertsReq::_internal_subject() const {
  return subject_.Get();
}
inline void IPsecListCertsReq::_internal_set_subject(const std::string& value) {
  
  subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecListCertsReq::_internal_mutable_subject() {
  
  return subject_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecListCertsReq::release_subject() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecListCertsReq.subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecListCertsReq::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subject_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecListCertsReq.subject)
}

// -------------------------------------------------------------------

// ListCert

// .opi_api.security.v1.CertificateType type = 1;
inline void ListCert::clear_type() {
  type_ = 0;
}
inline ::opi_api::security::v1::CertificateType ListCert::_internal_type() const {
  return static_cast< ::opi_api::security::v1::CertificateType >(type_);
}
inline ::opi_api::security::v1::CertificateType ListCert::type() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListCert.type)
  return _internal_type();
}
inline void ListCert::_internal_set_type(::opi_api::security::v1::CertificateType value) {
  
  type_ = value;
}
inline void ListCert::set_type(::opi_api::security::v1::CertificateType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListCert.type)
}

// .opi_api.security.v1.X509CertificateFlag flag = 2;
inline void ListCert::clear_flag() {
  flag_ = 0;
}
inline ::opi_api::security::v1::X509CertificateFlag ListCert::_internal_flag() const {
  return static_cast< ::opi_api::security::v1::X509CertificateFlag >(flag_);
}
inline ::opi_api::security::v1::X509CertificateFlag ListCert::flag() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListCert.flag)
  return _internal_flag();
}
inline void ListCert::_internal_set_flag(::opi_api::security::v1::X509CertificateFlag value) {
  
  flag_ = value;
}
inline void ListCert::set_flag(::opi_api::security::v1::X509CertificateFlag value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListCert.flag)
}

// string hasprivkey = 3;
inline void ListCert::clear_hasprivkey() {
  hasprivkey_.ClearToEmpty();
}
inline const std::string& ListCert::hasprivkey() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListCert.hasprivkey)
  return _internal_hasprivkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCert::set_hasprivkey(ArgT0&& arg0, ArgT... args) {
 
 hasprivkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListCert.hasprivkey)
}
inline std::string* ListCert::mutable_hasprivkey() {
  std::string* _s = _internal_mutable_hasprivkey();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListCert.hasprivkey)
  return _s;
}
inline const std::string& ListCert::_internal_hasprivkey() const {
  return hasprivkey_.Get();
}
inline void ListCert::_internal_set_hasprivkey(const std::string& value) {
  
  hasprivkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListCert::_internal_mutable_hasprivkey() {
  
  return hasprivkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListCert::release_hasprivkey() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListCert.hasprivkey)
  return hasprivkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListCert::set_allocated_hasprivkey(std::string* hasprivkey) {
  if (hasprivkey != nullptr) {
    
  } else {
    
  }
  hasprivkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hasprivkey,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hasprivkey_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hasprivkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListCert.hasprivkey)
}

// string data = 4;
inline void ListCert::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ListCert::data() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListCert.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCert::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListCert.data)
}
inline std::string* ListCert::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListCert.data)
  return _s;
}
inline const std::string& ListCert::_internal_data() const {
  return data_.Get();
}
inline void ListCert::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListCert::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListCert::release_data() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListCert.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListCert::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListCert.data)
}

// string subject = 5;
inline void ListCert::clear_subject() {
  subject_.ClearToEmpty();
}
inline const std::string& ListCert::subject() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListCert.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCert::set_subject(ArgT0&& arg0, ArgT... args) {
 
 subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListCert.subject)
}
inline std::string* ListCert::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListCert.subject)
  return _s;
}
inline const std::string& ListCert::_internal_subject() const {
  return subject_.Get();
}
inline void ListCert::_internal_set_subject(const std::string& value) {
  
  subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListCert::_internal_mutable_subject() {
  
  return subject_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListCert::release_subject() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListCert.subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListCert::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subject_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListCert.subject)
}

// string notbefore = 6;
inline void ListCert::clear_notbefore() {
  notbefore_.ClearToEmpty();
}
inline const std::string& ListCert::notbefore() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListCert.notbefore)
  return _internal_notbefore();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCert::set_notbefore(ArgT0&& arg0, ArgT... args) {
 
 notbefore_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListCert.notbefore)
}
inline std::string* ListCert::mutable_notbefore() {
  std::string* _s = _internal_mutable_notbefore();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListCert.notbefore)
  return _s;
}
inline const std::string& ListCert::_internal_notbefore() const {
  return notbefore_.Get();
}
inline void ListCert::_internal_set_notbefore(const std::string& value) {
  
  notbefore_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListCert::_internal_mutable_notbefore() {
  
  return notbefore_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListCert::release_notbefore() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListCert.notbefore)
  return notbefore_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListCert::set_allocated_notbefore(std::string* notbefore) {
  if (notbefore != nullptr) {
    
  } else {
    
  }
  notbefore_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notbefore,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (notbefore_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    notbefore_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListCert.notbefore)
}

// string notafter = 7;
inline void ListCert::clear_notafter() {
  notafter_.ClearToEmpty();
}
inline const std::string& ListCert::notafter() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.ListCert.notafter)
  return _internal_notafter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListCert::set_notafter(ArgT0&& arg0, ArgT... args) {
 
 notafter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.ListCert.notafter)
}
inline std::string* ListCert::mutable_notafter() {
  std::string* _s = _internal_mutable_notafter();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.ListCert.notafter)
  return _s;
}
inline const std::string& ListCert::_internal_notafter() const {
  return notafter_.Get();
}
inline void ListCert::_internal_set_notafter(const std::string& value) {
  
  notafter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListCert::_internal_mutable_notafter() {
  
  return notafter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListCert::release_notafter() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.ListCert.notafter)
  return notafter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListCert::set_allocated_notafter(std::string* notafter) {
  if (notafter != nullptr) {
    
  } else {
    
  }
  notafter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notafter,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (notafter_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    notafter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.ListCert.notafter)
}

// -------------------------------------------------------------------

// IPsecListCertsResp

// repeated .opi_api.security.v1.ListCert certs = 1;
inline int IPsecListCertsResp::_internal_certs_size() const {
  return certs_.size();
}
inline int IPsecListCertsResp::certs_size() const {
  return _internal_certs_size();
}
inline void IPsecListCertsResp::clear_certs() {
  certs_.Clear();
}
inline ::opi_api::security::v1::ListCert* IPsecListCertsResp::mutable_certs(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecListCertsResp.certs)
  return certs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListCert >*
IPsecListCertsResp::mutable_certs() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.security.v1.IPsecListCertsResp.certs)
  return &certs_;
}
inline const ::opi_api::security::v1::ListCert& IPsecListCertsResp::_internal_certs(int index) const {
  return certs_.Get(index);
}
inline const ::opi_api::security::v1::ListCert& IPsecListCertsResp::certs(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecListCertsResp.certs)
  return _internal_certs(index);
}
inline ::opi_api::security::v1::ListCert* IPsecListCertsResp::_internal_add_certs() {
  return certs_.Add();
}
inline ::opi_api::security::v1::ListCert* IPsecListCertsResp::add_certs() {
  ::opi_api::security::v1::ListCert* _add = _internal_add_certs();
  // @@protoc_insertion_point(field_add:opi_api.security.v1.IPsecListCertsResp.certs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::security::v1::ListCert >&
IPsecListCertsResp::certs() const {
  // @@protoc_insertion_point(field_list:opi_api.security.v1.IPsecListCertsResp.certs)
  return certs_;
}

// -------------------------------------------------------------------

// IPsecLoadConnReq

// .opi_api.security.v1.Connection connection = 1;
inline bool IPsecLoadConnReq::_internal_has_connection() const {
  return this != internal_default_instance() && connection_ != nullptr;
}
inline bool IPsecLoadConnReq::has_connection() const {
  return _internal_has_connection();
}
inline void IPsecLoadConnReq::clear_connection() {
  if (GetArenaForAllocation() == nullptr && connection_ != nullptr) {
    delete connection_;
  }
  connection_ = nullptr;
}
inline const ::opi_api::security::v1::Connection& IPsecLoadConnReq::_internal_connection() const {
  const ::opi_api::security::v1::Connection* p = connection_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::security::v1::Connection&>(
      ::opi_api::security::v1::_Connection_default_instance_);
}
inline const ::opi_api::security::v1::Connection& IPsecLoadConnReq::connection() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecLoadConnReq.connection)
  return _internal_connection();
}
inline void IPsecLoadConnReq::unsafe_arena_set_allocated_connection(
    ::opi_api::security::v1::Connection* connection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_);
  }
  connection_ = connection;
  if (connection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.security.v1.IPsecLoadConnReq.connection)
}
inline ::opi_api::security::v1::Connection* IPsecLoadConnReq::release_connection() {
  
  ::opi_api::security::v1::Connection* temp = connection_;
  connection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::security::v1::Connection* IPsecLoadConnReq::unsafe_arena_release_connection() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecLoadConnReq.connection)
  
  ::opi_api::security::v1::Connection* temp = connection_;
  connection_ = nullptr;
  return temp;
}
inline ::opi_api::security::v1::Connection* IPsecLoadConnReq::_internal_mutable_connection() {
  
  if (connection_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::security::v1::Connection>(GetArenaForAllocation());
    connection_ = p;
  }
  return connection_;
}
inline ::opi_api::security::v1::Connection* IPsecLoadConnReq::mutable_connection() {
  ::opi_api::security::v1::Connection* _msg = _internal_mutable_connection();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecLoadConnReq.connection)
  return _msg;
}
inline void IPsecLoadConnReq::set_allocated_connection(::opi_api::security::v1::Connection* connection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete connection_;
  }
  if (connection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::security::v1::Connection>::GetOwningArena(connection);
    if (message_arena != submessage_arena) {
      connection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    
  } else {
    
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecLoadConnReq.connection)
}

// -------------------------------------------------------------------

// IPsecLoadConnResp

// string success = 1;
inline void IPsecLoadConnResp::clear_success() {
  success_.ClearToEmpty();
}
inline const std::string& IPsecLoadConnResp::success() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecLoadConnResp.success)
  return _internal_success();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecLoadConnResp::set_success(ArgT0&& arg0, ArgT... args) {
 
 success_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecLoadConnResp.success)
}
inline std::string* IPsecLoadConnResp::mutable_success() {
  std::string* _s = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecLoadConnResp.success)
  return _s;
}
inline const std::string& IPsecLoadConnResp::_internal_success() const {
  return success_.Get();
}
inline void IPsecLoadConnResp::_internal_set_success(const std::string& value) {
  
  success_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecLoadConnResp::_internal_mutable_success() {
  
  return success_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecLoadConnResp::release_success() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecLoadConnResp.success)
  return success_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecLoadConnResp::set_allocated_success(std::string* success) {
  if (success != nullptr) {
    
  } else {
    
  }
  success_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), success,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (success_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecLoadConnResp.success)
}

// -------------------------------------------------------------------

// IPsecUnloadConnReq

// string name = 1;
inline void IPsecUnloadConnReq::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& IPsecUnloadConnReq::name() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecUnloadConnReq.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecUnloadConnReq::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecUnloadConnReq.name)
}
inline std::string* IPsecUnloadConnReq::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecUnloadConnReq.name)
  return _s;
}
inline const std::string& IPsecUnloadConnReq::_internal_name() const {
  return name_.Get();
}
inline void IPsecUnloadConnReq::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecUnloadConnReq::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecUnloadConnReq::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecUnloadConnReq.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecUnloadConnReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecUnloadConnReq.name)
}

// -------------------------------------------------------------------

// IPsecUnloadConnResp

// string success = 1;
inline void IPsecUnloadConnResp::clear_success() {
  success_.ClearToEmpty();
}
inline const std::string& IPsecUnloadConnResp::success() const {
  // @@protoc_insertion_point(field_get:opi_api.security.v1.IPsecUnloadConnResp.success)
  return _internal_success();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPsecUnloadConnResp::set_success(ArgT0&& arg0, ArgT... args) {
 
 success_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.security.v1.IPsecUnloadConnResp.success)
}
inline std::string* IPsecUnloadConnResp::mutable_success() {
  std::string* _s = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:opi_api.security.v1.IPsecUnloadConnResp.success)
  return _s;
}
inline const std::string& IPsecUnloadConnResp::_internal_success() const {
  return success_.Get();
}
inline void IPsecUnloadConnResp::_internal_set_success(const std::string& value) {
  
  success_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPsecUnloadConnResp::_internal_mutable_success() {
  
  return success_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPsecUnloadConnResp::release_success() {
  // @@protoc_insertion_point(field_release:opi_api.security.v1.IPsecUnloadConnResp.success)
  return success_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPsecUnloadConnResp::set_allocated_success(std::string* success) {
  if (success != nullptr) {
    
  } else {
    
  }
  success_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), success,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (success_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.security.v1.IPsecUnloadConnResp.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace security
}  // namespace opi_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opi_api::security::v1::CryptoAlgorithm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::security::v1::CryptoAlgorithm>() {
  return ::opi_api::security::v1::CryptoAlgorithm_descriptor();
}
template <> struct is_proto_enum< ::opi_api::security::v1::IntegAlgorithm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::security::v1::IntegAlgorithm>() {
  return ::opi_api::security::v1::IntegAlgorithm_descriptor();
}
template <> struct is_proto_enum< ::opi_api::security::v1::DiffieHellmanGroups> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::security::v1::DiffieHellmanGroups>() {
  return ::opi_api::security::v1::DiffieHellmanGroups_descriptor();
}
template <> struct is_proto_enum< ::opi_api::security::v1::PseudoRandomFunction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::security::v1::PseudoRandomFunction>() {
  return ::opi_api::security::v1::PseudoRandomFunction_descriptor();
}
template <> struct is_proto_enum< ::opi_api::security::v1::IPsecMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::security::v1::IPsecMode>() {
  return ::opi_api::security::v1::IPsecMode_descriptor();
}
template <> struct is_proto_enum< ::opi_api::security::v1::AuthType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::security::v1::AuthType>() {
  return ::opi_api::security::v1::AuthType_descriptor();
}
template <> struct is_proto_enum< ::opi_api::security::v1::IkeSaState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::security::v1::IkeSaState>() {
  return ::opi_api::security::v1::IkeSaState_descriptor();
}
template <> struct is_proto_enum< ::opi_api::security::v1::ChildSaState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::security::v1::ChildSaState>() {
  return ::opi_api::security::v1::ChildSaState_descriptor();
}
template <> struct is_proto_enum< ::opi_api::security::v1::CertificateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::security::v1::CertificateType>() {
  return ::opi_api::security::v1::CertificateType_descriptor();
}
template <> struct is_proto_enum< ::opi_api::security::v1::X509CertificateFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::security::v1::X509CertificateFlag>() {
  return ::opi_api::security::v1::X509CertificateFlag_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ipsec_2eproto
