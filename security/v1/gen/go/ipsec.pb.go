//
// Copyright (C) 2021 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//
// Major pieces taken from:
// https://github.com/ligato/cn-infra/blob/master/examples/cryptodata-proto-plugin/ipsec/ipsec.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: ipsec.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Cryptographic algorithm for encryption
type CryptoAlgorithm int32

const (
	CryptoAlgorithm_NONE_CRYPTO  CryptoAlgorithm = 0
	CryptoAlgorithm_AES128       CryptoAlgorithm = 1
	CryptoAlgorithm_AES192       CryptoAlgorithm = 2
	CryptoAlgorithm_AES256       CryptoAlgorithm = 3
	CryptoAlgorithm_AES128GCM128 CryptoAlgorithm = 4
	CryptoAlgorithm_AES256GCM128 CryptoAlgorithm = 5
	CryptoAlgorithm_AES128GMAC   CryptoAlgorithm = 6
	CryptoAlgorithm_AES256GMAC   CryptoAlgorithm = 7
)

// Enum value maps for CryptoAlgorithm.
var (
	CryptoAlgorithm_name = map[int32]string{
		0: "NONE_CRYPTO",
		1: "AES128",
		2: "AES192",
		3: "AES256",
		4: "AES128GCM128",
		5: "AES256GCM128",
		6: "AES128GMAC",
		7: "AES256GMAC",
	}
	CryptoAlgorithm_value = map[string]int32{
		"NONE_CRYPTO":  0,
		"AES128":       1,
		"AES192":       2,
		"AES256":       3,
		"AES128GCM128": 4,
		"AES256GCM128": 5,
		"AES128GMAC":   6,
		"AES256GMAC":   7,
	}
)

func (x CryptoAlgorithm) Enum() *CryptoAlgorithm {
	p := new(CryptoAlgorithm)
	*p = x
	return p
}

func (x CryptoAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[0].Descriptor()
}

func (CryptoAlgorithm) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[0]
}

func (x CryptoAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoAlgorithm.Descriptor instead.
func (CryptoAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{0}
}

// Cryptographic algorithm for authentication
type IntegAlgorithm int32

const (
	IntegAlgorithm_NONE_INTEG IntegAlgorithm = 0
	IntegAlgorithm_MD5        IntegAlgorithm = 1
	IntegAlgorithm_MD5_128    IntegAlgorithm = 2
	IntegAlgorithm_SHA1       IntegAlgorithm = 3
	IntegAlgorithm_SHA1_160   IntegAlgorithm = 4
	IntegAlgorithm_SHA256     IntegAlgorithm = 5
	IntegAlgorithm_SHA384     IntegAlgorithm = 7
	IntegAlgorithm_SHA512     IntegAlgorithm = 8
	IntegAlgorithm_SHA256_96  IntegAlgorithm = 9
)

// Enum value maps for IntegAlgorithm.
var (
	IntegAlgorithm_name = map[int32]string{
		0: "NONE_INTEG",
		1: "MD5",
		2: "MD5_128",
		3: "SHA1",
		4: "SHA1_160",
		5: "SHA256",
		7: "SHA384",
		8: "SHA512",
		9: "SHA256_96",
	}
	IntegAlgorithm_value = map[string]int32{
		"NONE_INTEG": 0,
		"MD5":        1,
		"MD5_128":    2,
		"SHA1":       3,
		"SHA1_160":   4,
		"SHA256":     5,
		"SHA384":     7,
		"SHA512":     8,
		"SHA256_96":  9,
	}
)

func (x IntegAlgorithm) Enum() *IntegAlgorithm {
	p := new(IntegAlgorithm)
	*p = x
	return p
}

func (x IntegAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[1].Descriptor()
}

func (IntegAlgorithm) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[1]
}

func (x IntegAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegAlgorithm.Descriptor instead.
func (IntegAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1}
}

// Diffie Hellman Groups
type DiffieHellmanGroups int32

const (
	DiffieHellmanGroups_NONE_DH_GROUP DiffieHellmanGroups = 0
	DiffieHellmanGroups_MODP768       DiffieHellmanGroups = 1
	DiffieHellmanGroups_MODP1024      DiffieHellmanGroups = 2
	DiffieHellmanGroups_MODP1536      DiffieHellmanGroups = 3
	DiffieHellmanGroups_MODP2048      DiffieHellmanGroups = 4
	DiffieHellmanGroups_MODP3072      DiffieHellmanGroups = 5
	DiffieHellmanGroups_MODP4096      DiffieHellmanGroups = 6
	DiffieHellmanGroups_MODP6144      DiffieHellmanGroups = 7
	DiffieHellmanGroups_MODP8192      DiffieHellmanGroups = 8
	DiffieHellmanGroups_MODP1024S160  DiffieHellmanGroups = 9
	DiffieHellmanGroups_MODP2048S224  DiffieHellmanGroups = 10
	DiffieHellmanGroups_MODP2048S256  DiffieHellmanGroups = 11
	DiffieHellmanGroups_CURVE25519    DiffieHellmanGroups = 12
)

// Enum value maps for DiffieHellmanGroups.
var (
	DiffieHellmanGroups_name = map[int32]string{
		0:  "NONE_DH_GROUP",
		1:  "MODP768",
		2:  "MODP1024",
		3:  "MODP1536",
		4:  "MODP2048",
		5:  "MODP3072",
		6:  "MODP4096",
		7:  "MODP6144",
		8:  "MODP8192",
		9:  "MODP1024S160",
		10: "MODP2048S224",
		11: "MODP2048S256",
		12: "CURVE25519",
	}
	DiffieHellmanGroups_value = map[string]int32{
		"NONE_DH_GROUP": 0,
		"MODP768":       1,
		"MODP1024":      2,
		"MODP1536":      3,
		"MODP2048":      4,
		"MODP3072":      5,
		"MODP4096":      6,
		"MODP6144":      7,
		"MODP8192":      8,
		"MODP1024S160":  9,
		"MODP2048S224":  10,
		"MODP2048S256":  11,
		"CURVE25519":    12,
	}
)

func (x DiffieHellmanGroups) Enum() *DiffieHellmanGroups {
	p := new(DiffieHellmanGroups)
	*p = x
	return p
}

func (x DiffieHellmanGroups) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiffieHellmanGroups) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[2].Descriptor()
}

func (DiffieHellmanGroups) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[2]
}

func (x DiffieHellmanGroups) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiffieHellmanGroups.Descriptor instead.
func (DiffieHellmanGroups) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{2}
}

type PseudoRandomFunction int32

const (
	PseudoRandomFunction_NONE_PRF   PseudoRandomFunction = 0
	PseudoRandomFunction_PRFMD5     PseudoRandomFunction = 1
	PseudoRandomFunction_PRFSHA1    PseudoRandomFunction = 2
	PseudoRandomFunction_PRFAESXCBC PseudoRandomFunction = 3
	PseudoRandomFunction_PRFAESCMAC PseudoRandomFunction = 4
	PseudoRandomFunction_PRFSHA256  PseudoRandomFunction = 5
	PseudoRandomFunction_PRFSHA384  PseudoRandomFunction = 6
	PseudoRandomFunction_PRFSHA512  PseudoRandomFunction = 7
)

// Enum value maps for PseudoRandomFunction.
var (
	PseudoRandomFunction_name = map[int32]string{
		0: "NONE_PRF",
		1: "PRFMD5",
		2: "PRFSHA1",
		3: "PRFAESXCBC",
		4: "PRFAESCMAC",
		5: "PRFSHA256",
		6: "PRFSHA384",
		7: "PRFSHA512",
	}
	PseudoRandomFunction_value = map[string]int32{
		"NONE_PRF":   0,
		"PRFMD5":     1,
		"PRFSHA1":    2,
		"PRFAESXCBC": 3,
		"PRFAESCMAC": 4,
		"PRFSHA256":  5,
		"PRFSHA384":  6,
		"PRFSHA512":  7,
	}
)

func (x PseudoRandomFunction) Enum() *PseudoRandomFunction {
	p := new(PseudoRandomFunction)
	*p = x
	return p
}

func (x PseudoRandomFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PseudoRandomFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[3].Descriptor()
}

func (PseudoRandomFunction) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[3]
}

func (x PseudoRandomFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PseudoRandomFunction.Descriptor instead.
func (PseudoRandomFunction) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{3}
}

// Tunnel mode
type IPsecMode int32

const (
	IPsecMode_TUNNEL_MODE    IPsecMode = 0
	IPsecMode_TRANSPORT_MODE IPsecMode = 1
)

// Enum value maps for IPsecMode.
var (
	IPsecMode_name = map[int32]string{
		0: "TUNNEL_MODE",
		1: "TRANSPORT_MODE",
	}
	IPsecMode_value = map[string]int32{
		"TUNNEL_MODE":    0,
		"TRANSPORT_MODE": 1,
	}
)

func (x IPsecMode) Enum() *IPsecMode {
	p := new(IPsecMode)
	*p = x
	return p
}

func (x IPsecMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPsecMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[4].Descriptor()
}

func (IPsecMode) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[4]
}

func (x IPsecMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPsecMode.Descriptor instead.
func (IPsecMode) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{4}
}

// Authentication Type
type AuthType int32

const (
	AuthType_PUBKEY AuthType = 0
	AuthType_PSK    AuthType = 1
	AuthType_XAUTH  AuthType = 2
	AuthType_EAP    AuthType = 3
)

// Enum value maps for AuthType.
var (
	AuthType_name = map[int32]string{
		0: "PUBKEY",
		1: "PSK",
		2: "XAUTH",
		3: "EAP",
	}
	AuthType_value = map[string]int32{
		"PUBKEY": 0,
		"PSK":    1,
		"XAUTH":  2,
		"EAP":    3,
	}
)

func (x AuthType) Enum() *AuthType {
	p := new(AuthType)
	*p = x
	return p
}

func (x AuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[5].Descriptor()
}

func (AuthType) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[5]
}

func (x AuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthType.Descriptor instead.
func (AuthType) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{5}
}

// IKE_SA state
type IkeSaState int32

const (
	IkeSaState_CREATED     IkeSaState = 0
	IkeSaState_CONNECTING  IkeSaState = 1
	IkeSaState_ESTABLISHED IkeSaState = 2
	IkeSaState_PASSIVE     IkeSaState = 3
	IkeSaState_REKEYING    IkeSaState = 4
	IkeSaState_REKEYED     IkeSaState = 5
	IkeSaState_DELETING    IkeSaState = 6
	IkeSaState_DESTROYING  IkeSaState = 7
)

// Enum value maps for IkeSaState.
var (
	IkeSaState_name = map[int32]string{
		0: "CREATED",
		1: "CONNECTING",
		2: "ESTABLISHED",
		3: "PASSIVE",
		4: "REKEYING",
		5: "REKEYED",
		6: "DELETING",
		7: "DESTROYING",
	}
	IkeSaState_value = map[string]int32{
		"CREATED":     0,
		"CONNECTING":  1,
		"ESTABLISHED": 2,
		"PASSIVE":     3,
		"REKEYING":    4,
		"REKEYED":     5,
		"DELETING":    6,
		"DESTROYING":  7,
	}
)

func (x IkeSaState) Enum() *IkeSaState {
	p := new(IkeSaState)
	*p = x
	return p
}

func (x IkeSaState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IkeSaState) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[6].Descriptor()
}

func (IkeSaState) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[6]
}

func (x IkeSaState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IkeSaState.Descriptor instead.
func (IkeSaState) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{6}
}

// CHILD_SA state
type ChildSaState int32

const (
	ChildSaState_CHILD_CREATED    ChildSaState = 0
	ChildSaState_CHILD_ROUTED     ChildSaState = 1
	ChildSaState_CHILD_INSTALLING ChildSaState = 2
	ChildSaState_CHILD_INSTALLED  ChildSaState = 3
	ChildSaState_CHILD_UPDATING   ChildSaState = 4
	ChildSaState_CHILD_REKEYING   ChildSaState = 5
	ChildSaState_CHILD_REKEYED    ChildSaState = 6
	ChildSaState_CHILD_RETRYING   ChildSaState = 7
	ChildSaState_CHILD_DELETING   ChildSaState = 8
	ChildSaState_CHILD_DELETED    ChildSaState = 9
	ChildSaState_CHILD_DESTROYING ChildSaState = 10
)

// Enum value maps for ChildSaState.
var (
	ChildSaState_name = map[int32]string{
		0:  "CHILD_CREATED",
		1:  "CHILD_ROUTED",
		2:  "CHILD_INSTALLING",
		3:  "CHILD_INSTALLED",
		4:  "CHILD_UPDATING",
		5:  "CHILD_REKEYING",
		6:  "CHILD_REKEYED",
		7:  "CHILD_RETRYING",
		8:  "CHILD_DELETING",
		9:  "CHILD_DELETED",
		10: "CHILD_DESTROYING",
	}
	ChildSaState_value = map[string]int32{
		"CHILD_CREATED":    0,
		"CHILD_ROUTED":     1,
		"CHILD_INSTALLING": 2,
		"CHILD_INSTALLED":  3,
		"CHILD_UPDATING":   4,
		"CHILD_REKEYING":   5,
		"CHILD_REKEYED":    6,
		"CHILD_RETRYING":   7,
		"CHILD_DELETING":   8,
		"CHILD_DELETED":    9,
		"CHILD_DESTROYING": 10,
	}
)

func (x ChildSaState) Enum() *ChildSaState {
	p := new(ChildSaState)
	*p = x
	return p
}

func (x ChildSaState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChildSaState) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[7].Descriptor()
}

func (ChildSaState) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[7]
}

func (x ChildSaState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChildSaState.Descriptor instead.
func (ChildSaState) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{7}
}

// Certificate type
type CertificateType int32

const (
	CertificateType_CERT_X509          CertificateType = 0
	CertificateType_CERT_X509_AC       CertificateType = 1
	CertificateType_CERT_X509_CRL      CertificateType = 2
	CertificateType_CERT_OCSP_RESPONSE CertificateType = 3
	CertificateType_CERT_PUBKEY        CertificateType = 4
)

// Enum value maps for CertificateType.
var (
	CertificateType_name = map[int32]string{
		0: "CERT_X509",
		1: "CERT_X509_AC",
		2: "CERT_X509_CRL",
		3: "CERT_OCSP_RESPONSE",
		4: "CERT_PUBKEY",
	}
	CertificateType_value = map[string]int32{
		"CERT_X509":          0,
		"CERT_X509_AC":       1,
		"CERT_X509_CRL":      2,
		"CERT_OCSP_RESPONSE": 3,
		"CERT_PUBKEY":        4,
	}
)

func (x CertificateType) Enum() *CertificateType {
	p := new(CertificateType)
	*p = x
	return p
}

func (x CertificateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateType) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[8].Descriptor()
}

func (CertificateType) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[8]
}

func (x CertificateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateType.Descriptor instead.
func (CertificateType) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{8}
}

// X.509 certificate flag
type X509CertificateFlag int32

const (
	X509CertificateFlag_X509_CERT_FLAG_NONE X509CertificateFlag = 0
	X509CertificateFlag_X509_CERT_FLAG_CA   X509CertificateFlag = 1
	X509CertificateFlag_X509_CERT_FLAG_AA   X509CertificateFlag = 2
	X509CertificateFlag_X509_CERT_FLAG_OCSP X509CertificateFlag = 3
)

// Enum value maps for X509CertificateFlag.
var (
	X509CertificateFlag_name = map[int32]string{
		0: "X509_CERT_FLAG_NONE",
		1: "X509_CERT_FLAG_CA",
		2: "X509_CERT_FLAG_AA",
		3: "X509_CERT_FLAG_OCSP",
	}
	X509CertificateFlag_value = map[string]int32{
		"X509_CERT_FLAG_NONE": 0,
		"X509_CERT_FLAG_CA":   1,
		"X509_CERT_FLAG_AA":   2,
		"X509_CERT_FLAG_OCSP": 3,
	}
)

func (x X509CertificateFlag) Enum() *X509CertificateFlag {
	p := new(X509CertificateFlag)
	*p = x
	return p
}

func (x X509CertificateFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (X509CertificateFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_ipsec_proto_enumTypes[9].Descriptor()
}

func (X509CertificateFlag) Type() protoreflect.EnumType {
	return &file_ipsec_proto_enumTypes[9]
}

func (x X509CertificateFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use X509CertificateFlag.Descriptor instead.
func (X509CertificateFlag) EnumDescriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{9}
}

type Proposals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptoAlg []CryptoAlgorithm      `protobuf:"varint,1,rep,packed,name=crypto_alg,json=cryptoAlg,proto3,enum=opi_api.security.v1.CryptoAlgorithm" json:"crypto_alg,omitempty"`
	IntegAlg  []IntegAlgorithm       `protobuf:"varint,2,rep,packed,name=integ_alg,json=integAlg,proto3,enum=opi_api.security.v1.IntegAlgorithm" json:"integ_alg,omitempty"`
	Prf       []PseudoRandomFunction `protobuf:"varint,3,rep,packed,name=prf,proto3,enum=opi_api.security.v1.PseudoRandomFunction" json:"prf,omitempty"`
	Dhgroups  []DiffieHellmanGroups  `protobuf:"varint,4,rep,packed,name=dhgroups,proto3,enum=opi_api.security.v1.DiffieHellmanGroups" json:"dhgroups,omitempty"`
}

func (x *Proposals) Reset() {
	*x = Proposals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposals) ProtoMessage() {}

func (x *Proposals) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposals.ProtoReflect.Descriptor instead.
func (*Proposals) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{0}
}

func (x *Proposals) GetCryptoAlg() []CryptoAlgorithm {
	if x != nil {
		return x.CryptoAlg
	}
	return nil
}

func (x *Proposals) GetIntegAlg() []IntegAlgorithm {
	if x != nil {
		return x.IntegAlg
	}
	return nil
}

func (x *Proposals) GetPrf() []PseudoRandomFunction {
	if x != nil {
		return x.Prf
	}
	return nil
}

func (x *Proposals) GetDhgroups() []DiffieHellmanGroups {
	if x != nil {
		return x.Dhgroups
	}
	return nil
}

type Vips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vip []string `protobuf:"bytes,1,rep,name=vip,proto3" json:"vip,omitempty"`
}

func (x *Vips) Reset() {
	*x = Vips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vips) ProtoMessage() {}

func (x *Vips) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vips.ProtoReflect.Descriptor instead.
func (*Vips) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{1}
}

func (x *Vips) GetVip() []string {
	if x != nil {
		return x.Vip
	}
	return nil
}

type Pools struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool []string `protobuf:"bytes,1,rep,name=pool,proto3" json:"pool,omitempty"`
}

func (x *Pools) Reset() {
	*x = Pools{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pools) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pools) ProtoMessage() {}

func (x *Pools) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pools.ProtoReflect.Descriptor instead.
func (*Pools) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{2}
}

func (x *Pools) GetPool() []string {
	if x != nil {
		return x.Pool
	}
	return nil
}

type Certs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert []string `protobuf:"bytes,1,rep,name=cert,proto3" json:"cert,omitempty"`
}

func (x *Certs) Reset() {
	*x = Certs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certs) ProtoMessage() {}

func (x *Certs) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certs.ProtoReflect.Descriptor instead.
func (*Certs) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{3}
}

func (x *Certs) GetCert() []string {
	if x != nil {
		return x.Cert
	}
	return nil
}

type PubKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey []string `protobuf:"bytes,1,rep,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *PubKeys) Reset() {
	*x = PubKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubKeys) ProtoMessage() {}

func (x *PubKeys) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubKeys.ProtoReflect.Descriptor instead.
func (*PubKeys) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{4}
}

func (x *PubKeys) GetPubkey() []string {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

type Groups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group []string `protobuf:"bytes,1,rep,name=group,proto3" json:"group,omitempty"`
}

func (x *Groups) Reset() {
	*x = Groups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Groups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Groups) ProtoMessage() {}

func (x *Groups) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Groups.ProtoReflect.Descriptor instead.
func (*Groups) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{5}
}

func (x *Groups) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

type CertPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertPolicy []string `protobuf:"bytes,1,rep,name=cert_policy,json=certPolicy,proto3" json:"cert_policy,omitempty"`
}

func (x *CertPolicy) Reset() {
	*x = CertPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertPolicy) ProtoMessage() {}

func (x *CertPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertPolicy.ProtoReflect.Descriptor instead.
func (*CertPolicy) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{6}
}

func (x *CertPolicy) GetCertPolicy() []string {
	if x != nil {
		return x.CertPolicy
	}
	return nil
}

type CaCerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cacert []string `protobuf:"bytes,1,rep,name=cacert,proto3" json:"cacert,omitempty"`
}

func (x *CaCerts) Reset() {
	*x = CaCerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaCerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaCerts) ProtoMessage() {}

func (x *CaCerts) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaCerts.ProtoReflect.Descriptor instead.
func (*CaCerts) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{7}
}

func (x *CaCerts) GetCacert() []string {
	if x != nil {
		return x.Cacert
	}
	return nil
}

type LocalAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    AuthType `protobuf:"varint,1,opt,name=auth,proto3,enum=opi_api.security.v1.AuthType" json:"auth,omitempty"`
	Id      string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	EapId   string   `protobuf:"bytes,3,opt,name=eap_id,json=eapId,proto3" json:"eap_id,omitempty"`
	AaaId   string   `protobuf:"bytes,4,opt,name=aaa_id,json=aaaId,proto3" json:"aaa_id,omitempty"`
	XauthId string   `protobuf:"bytes,5,opt,name=xauth_id,json=xauthId,proto3" json:"xauth_id,omitempty"`
	Certs   *Certs   `protobuf:"bytes,6,opt,name=certs,proto3" json:"certs,omitempty"`
	Pubkeys *PubKeys `protobuf:"bytes,7,opt,name=pubkeys,proto3" json:"pubkeys,omitempty"`
}

func (x *LocalAuth) Reset() {
	*x = LocalAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalAuth) ProtoMessage() {}

func (x *LocalAuth) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalAuth.ProtoReflect.Descriptor instead.
func (*LocalAuth) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{8}
}

func (x *LocalAuth) GetAuth() AuthType {
	if x != nil {
		return x.Auth
	}
	return AuthType_PUBKEY
}

func (x *LocalAuth) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LocalAuth) GetEapId() string {
	if x != nil {
		return x.EapId
	}
	return ""
}

func (x *LocalAuth) GetAaaId() string {
	if x != nil {
		return x.AaaId
	}
	return ""
}

func (x *LocalAuth) GetXauthId() string {
	if x != nil {
		return x.XauthId
	}
	return ""
}

func (x *LocalAuth) GetCerts() *Certs {
	if x != nil {
		return x.Certs
	}
	return nil
}

func (x *LocalAuth) GetPubkeys() *PubKeys {
	if x != nil {
		return x.Pubkeys
	}
	return nil
}

type RemoteAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth       AuthType    `protobuf:"varint,1,opt,name=auth,proto3,enum=opi_api.security.v1.AuthType" json:"auth,omitempty"`
	Id         string      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	EapId      string      `protobuf:"bytes,3,opt,name=eap_id,json=eapId,proto3" json:"eap_id,omitempty"`
	Groups     *Groups     `protobuf:"bytes,4,opt,name=groups,proto3" json:"groups,omitempty"`
	CertPolicy *CertPolicy `protobuf:"bytes,5,opt,name=cert_policy,json=certPolicy,proto3" json:"cert_policy,omitempty"`
	Certs      *Certs      `protobuf:"bytes,6,opt,name=certs,proto3" json:"certs,omitempty"`
	CaCerts    *CaCerts    `protobuf:"bytes,7,opt,name=ca_certs,json=caCerts,proto3" json:"ca_certs,omitempty"`
	Pubkeys    *PubKeys    `protobuf:"bytes,8,opt,name=pubkeys,proto3" json:"pubkeys,omitempty"`
}

func (x *RemoteAuth) Reset() {
	*x = RemoteAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteAuth) ProtoMessage() {}

func (x *RemoteAuth) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteAuth.ProtoReflect.Descriptor instead.
func (*RemoteAuth) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{9}
}

func (x *RemoteAuth) GetAuth() AuthType {
	if x != nil {
		return x.Auth
	}
	return AuthType_PUBKEY
}

func (x *RemoteAuth) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RemoteAuth) GetEapId() string {
	if x != nil {
		return x.EapId
	}
	return ""
}

func (x *RemoteAuth) GetGroups() *Groups {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *RemoteAuth) GetCertPolicy() *CertPolicy {
	if x != nil {
		return x.CertPolicy
	}
	return nil
}

func (x *RemoteAuth) GetCerts() *Certs {
	if x != nil {
		return x.Certs
	}
	return nil
}

func (x *RemoteAuth) GetCaCerts() *CaCerts {
	if x != nil {
		return x.CaCerts
	}
	return nil
}

func (x *RemoteAuth) GetPubkeys() *PubKeys {
	if x != nil {
		return x.Pubkeys
	}
	return nil
}

type TrafficSelectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts []*TrafficSelectors_TrafficSelector `protobuf:"bytes,1,rep,name=ts,proto3" json:"ts,omitempty"`
}

func (x *TrafficSelectors) Reset() {
	*x = TrafficSelectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficSelectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficSelectors) ProtoMessage() {}

func (x *TrafficSelectors) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficSelectors.ProtoReflect.Descriptor instead.
func (*TrafficSelectors) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{10}
}

func (x *TrafficSelectors) GetTs() []*TrafficSelectors_TrafficSelector {
	if x != nil {
		return x.Ts
	}
	return nil
}

// IP addresses or hostanmes
type Addrs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *Addrs) Reset() {
	*x = Addrs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addrs) ProtoMessage() {}

func (x *Addrs) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addrs.ProtoReflect.Descriptor instead.
func (*Addrs) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{11}
}

func (x *Addrs) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

// Child SA
type Child struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Child SA name
	AgProposals  *Proposals        `protobuf:"bytes,2,opt,name=ag_proposals,json=agProposals,proto3" json:"ag_proposals,omitempty"`
	EspProposals *Proposals        `protobuf:"bytes,3,opt,name=esp_proposals,json=espProposals,proto3" json:"esp_proposals,omitempty"`
	LocalTs      *TrafficSelectors `protobuf:"bytes,4,opt,name=local_ts,json=localTs,proto3" json:"local_ts,omitempty"`
	RemoteTs     *TrafficSelectors `protobuf:"bytes,5,opt,name=remote_ts,json=remoteTs,proto3" json:"remote_ts,omitempty"`
	RekeyTime    uint32            `protobuf:"varint,6,opt,name=rekey_time,json=rekeyTime,proto3" json:"rekey_time,omitempty"`
	LifeTime     uint32            `protobuf:"varint,7,opt,name=life_time,json=lifeTime,proto3" json:"life_time,omitempty"`
	RandTime     uint32            `protobuf:"varint,8,opt,name=rand_time,json=randTime,proto3" json:"rand_time,omitempty"`
	Updown       string            `protobuf:"bytes,9,opt,name=updown,proto3" json:"updown,omitempty"`
	Inactivity   uint32            `protobuf:"varint,10,opt,name=inactivity,proto3" json:"inactivity,omitempty"`
	MarkIn       uint32            `protobuf:"varint,11,opt,name=mark_in,json=markIn,proto3" json:"mark_in,omitempty"`
	MarkInSa     string            `protobuf:"bytes,12,opt,name=mark_in_sa,json=markInSa,proto3" json:"mark_in_sa,omitempty"`
	MarkOut      uint32            `protobuf:"varint,13,opt,name=mark_out,json=markOut,proto3" json:"mark_out,omitempty"`
	SetMarkIn    uint32            `protobuf:"varint,14,opt,name=set_mark_in,json=setMarkIn,proto3" json:"set_mark_in,omitempty"`
	SetMarkOut   uint32            `protobuf:"varint,15,opt,name=set_mark_out,json=setMarkOut,proto3" json:"set_mark_out,omitempty"`
	HwOffload    string            `protobuf:"bytes,16,opt,name=hw_offload,json=hwOffload,proto3" json:"hw_offload,omitempty"`
}

func (x *Child) Reset() {
	*x = Child{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Child) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Child) ProtoMessage() {}

func (x *Child) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Child.ProtoReflect.Descriptor instead.
func (*Child) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{12}
}

func (x *Child) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Child) GetAgProposals() *Proposals {
	if x != nil {
		return x.AgProposals
	}
	return nil
}

func (x *Child) GetEspProposals() *Proposals {
	if x != nil {
		return x.EspProposals
	}
	return nil
}

func (x *Child) GetLocalTs() *TrafficSelectors {
	if x != nil {
		return x.LocalTs
	}
	return nil
}

func (x *Child) GetRemoteTs() *TrafficSelectors {
	if x != nil {
		return x.RemoteTs
	}
	return nil
}

func (x *Child) GetRekeyTime() uint32 {
	if x != nil {
		return x.RekeyTime
	}
	return 0
}

func (x *Child) GetLifeTime() uint32 {
	if x != nil {
		return x.LifeTime
	}
	return 0
}

func (x *Child) GetRandTime() uint32 {
	if x != nil {
		return x.RandTime
	}
	return 0
}

func (x *Child) GetUpdown() string {
	if x != nil {
		return x.Updown
	}
	return ""
}

func (x *Child) GetInactivity() uint32 {
	if x != nil {
		return x.Inactivity
	}
	return 0
}

func (x *Child) GetMarkIn() uint32 {
	if x != nil {
		return x.MarkIn
	}
	return 0
}

func (x *Child) GetMarkInSa() string {
	if x != nil {
		return x.MarkInSa
	}
	return ""
}

func (x *Child) GetMarkOut() uint32 {
	if x != nil {
		return x.MarkOut
	}
	return 0
}

func (x *Child) GetSetMarkIn() uint32 {
	if x != nil {
		return x.SetMarkIn
	}
	return 0
}

func (x *Child) GetSetMarkOut() uint32 {
	if x != nil {
		return x.SetMarkOut
	}
	return 0
}

func (x *Child) GetHwOffload() string {
	if x != nil {
		return x.HwOffload
	}
	return ""
}

// IKE connection
type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // connection name
	Version     string      `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	LocalAddrs  []*Addrs    `protobuf:"bytes,3,rep,name=local_addrs,json=localAddrs,proto3" json:"local_addrs,omitempty"`
	RemoteAddrs []*Addrs    `protobuf:"bytes,4,rep,name=remote_addrs,json=remoteAddrs,proto3" json:"remote_addrs,omitempty"`
	LocalPort   uint32      `protobuf:"varint,5,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	RemotePort  uint32      `protobuf:"varint,6,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
	Proposals   *Proposals  `protobuf:"bytes,7,opt,name=proposals,proto3" json:"proposals,omitempty"`
	Vips        *Vips       `protobuf:"bytes,8,opt,name=vips,proto3" json:"vips,omitempty"`
	Dscp        uint64      `protobuf:"varint,9,opt,name=dscp,proto3" json:"dscp,omitempty"` // We use only the lower 6 bytes
	Encap       string      `protobuf:"bytes,10,opt,name=encap,proto3" json:"encap,omitempty"`
	Mobike      string      `protobuf:"bytes,11,opt,name=mobike,proto3" json:"mobike,omitempty"`
	DpdDelay    uint32      `protobuf:"varint,12,opt,name=dpd_delay,json=dpdDelay,proto3" json:"dpd_delay,omitempty"`
	DpdTimeout  uint32      `protobuf:"varint,13,opt,name=dpd_timeout,json=dpdTimeout,proto3" json:"dpd_timeout,omitempty"`
	ReauthTime  uint32      `protobuf:"varint,14,opt,name=reauth_time,json=reauthTime,proto3" json:"reauth_time,omitempty"`
	RekeyTime   uint32      `protobuf:"varint,15,opt,name=rekey_time,json=rekeyTime,proto3" json:"rekey_time,omitempty"`
	Pools       *Pools      `protobuf:"bytes,16,opt,name=pools,proto3" json:"pools,omitempty"`
	LocalAuth   *LocalAuth  `protobuf:"bytes,17,opt,name=local_auth,json=localAuth,proto3" json:"local_auth,omitempty"`
	RemoteAuth  *RemoteAuth `protobuf:"bytes,18,opt,name=remote_auth,json=remoteAuth,proto3" json:"remote_auth,omitempty"`
	Children    []*Child    `protobuf:"bytes,19,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{13}
}

func (x *Connection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Connection) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Connection) GetLocalAddrs() []*Addrs {
	if x != nil {
		return x.LocalAddrs
	}
	return nil
}

func (x *Connection) GetRemoteAddrs() []*Addrs {
	if x != nil {
		return x.RemoteAddrs
	}
	return nil
}

func (x *Connection) GetLocalPort() uint32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *Connection) GetRemotePort() uint32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *Connection) GetProposals() *Proposals {
	if x != nil {
		return x.Proposals
	}
	return nil
}

func (x *Connection) GetVips() *Vips {
	if x != nil {
		return x.Vips
	}
	return nil
}

func (x *Connection) GetDscp() uint64 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

func (x *Connection) GetEncap() string {
	if x != nil {
		return x.Encap
	}
	return ""
}

func (x *Connection) GetMobike() string {
	if x != nil {
		return x.Mobike
	}
	return ""
}

func (x *Connection) GetDpdDelay() uint32 {
	if x != nil {
		return x.DpdDelay
	}
	return 0
}

func (x *Connection) GetDpdTimeout() uint32 {
	if x != nil {
		return x.DpdTimeout
	}
	return 0
}

func (x *Connection) GetReauthTime() uint32 {
	if x != nil {
		return x.ReauthTime
	}
	return 0
}

func (x *Connection) GetRekeyTime() uint32 {
	if x != nil {
		return x.RekeyTime
	}
	return 0
}

func (x *Connection) GetPools() *Pools {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *Connection) GetLocalAuth() *LocalAuth {
	if x != nil {
		return x.LocalAuth
	}
	return nil
}

func (x *Connection) GetRemoteAuth() *RemoteAuth {
	if x != nil {
		return x.RemoteAuth
	}
	return nil
}

func (x *Connection) GetChildren() []*Child {
	if x != nil {
		return x.Children
	}
	return nil
}

type IPsecVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IPsecVersionReq) Reset() {
	*x = IPsecVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecVersionReq) ProtoMessage() {}

func (x *IPsecVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecVersionReq.ProtoReflect.Descriptor instead.
func (*IPsecVersionReq) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{14}
}

type IPsecVersionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Daemon  string `protobuf:"bytes,1,opt,name=daemon,proto3" json:"daemon,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Sysname string `protobuf:"bytes,3,opt,name=sysname,proto3" json:"sysname,omitempty"`
	Release string `protobuf:"bytes,4,opt,name=release,proto3" json:"release,omitempty"`
	Machine string `protobuf:"bytes,5,opt,name=machine,proto3" json:"machine,omitempty"`
}

func (x *IPsecVersionResp) Reset() {
	*x = IPsecVersionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecVersionResp) ProtoMessage() {}

func (x *IPsecVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecVersionResp.ProtoReflect.Descriptor instead.
func (*IPsecVersionResp) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{15}
}

func (x *IPsecVersionResp) GetDaemon() string {
	if x != nil {
		return x.Daemon
	}
	return ""
}

func (x *IPsecVersionResp) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *IPsecVersionResp) GetSysname() string {
	if x != nil {
		return x.Sysname
	}
	return ""
}

func (x *IPsecVersionResp) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *IPsecVersionResp) GetMachine() string {
	if x != nil {
		return x.Machine
	}
	return ""
}

type IPsecStatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IPsecStatsReq) Reset() {
	*x = IPsecStatsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecStatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecStatsReq) ProtoMessage() {}

func (x *IPsecStatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecStatsReq.ProtoReflect.Descriptor instead.
func (*IPsecStatsReq) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{16}
}

type IPsecStatsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // Generic status string for now
}

func (x *IPsecStatsResp) Reset() {
	*x = IPsecStatsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecStatsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecStatsResp) ProtoMessage() {}

func (x *IPsecStatsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecStatsResp.ProtoReflect.Descriptor instead.
func (*IPsecStatsResp) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{17}
}

func (x *IPsecStatsResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type IPsecInitiateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child    string `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
	Ike      string `protobuf:"bytes,2,opt,name=ike,proto3" json:"ike,omitempty"`
	Timeout  string `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Loglevel string `protobuf:"bytes,4,opt,name=loglevel,proto3" json:"loglevel,omitempty"`
}

func (x *IPsecInitiateReq) Reset() {
	*x = IPsecInitiateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecInitiateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecInitiateReq) ProtoMessage() {}

func (x *IPsecInitiateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecInitiateReq.ProtoReflect.Descriptor instead.
func (*IPsecInitiateReq) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{18}
}

func (x *IPsecInitiateReq) GetChild() string {
	if x != nil {
		return x.Child
	}
	return ""
}

func (x *IPsecInitiateReq) GetIke() string {
	if x != nil {
		return x.Ike
	}
	return ""
}

func (x *IPsecInitiateReq) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *IPsecInitiateReq) GetLoglevel() string {
	if x != nil {
		return x.Loglevel
	}
	return ""
}

type IPsecInitiateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IPsecInitiateResp) Reset() {
	*x = IPsecInitiateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecInitiateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecInitiateResp) ProtoMessage() {}

func (x *IPsecInitiateResp) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecInitiateResp.ProtoReflect.Descriptor instead.
func (*IPsecInitiateResp) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{19}
}

type IPsecTerminateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child    string `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
	Ike      string `protobuf:"bytes,2,opt,name=ike,proto3" json:"ike,omitempty"`
	ChildId  uint64 `protobuf:"varint,3,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	IkeId    uint64 `protobuf:"varint,4,opt,name=ike_id,json=ikeId,proto3" json:"ike_id,omitempty"`
	Force    string `protobuf:"bytes,5,opt,name=force,proto3" json:"force,omitempty"`
	Timeout  string `protobuf:"bytes,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Loglevel string `protobuf:"bytes,7,opt,name=loglevel,proto3" json:"loglevel,omitempty"`
}

func (x *IPsecTerminateReq) Reset() {
	*x = IPsecTerminateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecTerminateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecTerminateReq) ProtoMessage() {}

func (x *IPsecTerminateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecTerminateReq.ProtoReflect.Descriptor instead.
func (*IPsecTerminateReq) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{20}
}

func (x *IPsecTerminateReq) GetChild() string {
	if x != nil {
		return x.Child
	}
	return ""
}

func (x *IPsecTerminateReq) GetIke() string {
	if x != nil {
		return x.Ike
	}
	return ""
}

func (x *IPsecTerminateReq) GetChildId() uint64 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

func (x *IPsecTerminateReq) GetIkeId() uint64 {
	if x != nil {
		return x.IkeId
	}
	return 0
}

func (x *IPsecTerminateReq) GetForce() string {
	if x != nil {
		return x.Force
	}
	return ""
}

func (x *IPsecTerminateReq) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *IPsecTerminateReq) GetLoglevel() string {
	if x != nil {
		return x.Loglevel
	}
	return ""
}

type IPsecTerminateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    string `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
	Matches    uint32 `protobuf:"varint,2,opt,name=matches,proto3" json:"matches,omitempty"`
	Terminated uint32 `protobuf:"varint,3,opt,name=terminated,proto3" json:"terminated,omitempty"`
}

func (x *IPsecTerminateResp) Reset() {
	*x = IPsecTerminateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecTerminateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecTerminateResp) ProtoMessage() {}

func (x *IPsecTerminateResp) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecTerminateResp.ProtoReflect.Descriptor instead.
func (*IPsecTerminateResp) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{21}
}

func (x *IPsecTerminateResp) GetSuccess() string {
	if x != nil {
		return x.Success
	}
	return ""
}

func (x *IPsecTerminateResp) GetMatches() uint32 {
	if x != nil {
		return x.Matches
	}
	return 0
}

func (x *IPsecTerminateResp) GetTerminated() uint32 {
	if x != nil {
		return x.Terminated
	}
	return 0
}

type IPsecRekeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child   string `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
	Ike     string `protobuf:"bytes,2,opt,name=ike,proto3" json:"ike,omitempty"`
	ChildId uint64 `protobuf:"varint,3,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	IkeId   uint64 `protobuf:"varint,4,opt,name=ike_id,json=ikeId,proto3" json:"ike_id,omitempty"`
	Reauth  string `protobuf:"bytes,5,opt,name=reauth,proto3" json:"reauth,omitempty"`
}

func (x *IPsecRekeyReq) Reset() {
	*x = IPsecRekeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecRekeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecRekeyReq) ProtoMessage() {}

func (x *IPsecRekeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecRekeyReq.ProtoReflect.Descriptor instead.
func (*IPsecRekeyReq) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{22}
}

func (x *IPsecRekeyReq) GetChild() string {
	if x != nil {
		return x.Child
	}
	return ""
}

func (x *IPsecRekeyReq) GetIke() string {
	if x != nil {
		return x.Ike
	}
	return ""
}

func (x *IPsecRekeyReq) GetChildId() uint64 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

func (x *IPsecRekeyReq) GetIkeId() uint64 {
	if x != nil {
		return x.IkeId
	}
	return 0
}

func (x *IPsecRekeyReq) GetReauth() string {
	if x != nil {
		return x.Reauth
	}
	return ""
}

type IPsecRekeyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success string `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
	Matches uint32 `protobuf:"varint,2,opt,name=matches,proto3" json:"matches,omitempty"`
}

func (x *IPsecRekeyResp) Reset() {
	*x = IPsecRekeyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecRekeyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecRekeyResp) ProtoMessage() {}

func (x *IPsecRekeyResp) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecRekeyResp.ProtoReflect.Descriptor instead.
func (*IPsecRekeyResp) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{23}
}

func (x *IPsecRekeyResp) GetSuccess() string {
	if x != nil {
		return x.Success
	}
	return ""
}

func (x *IPsecRekeyResp) GetMatches() uint32 {
	if x != nil {
		return x.Matches
	}
	return 0
}

type IPsecListSasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Noblock string `protobuf:"bytes,1,opt,name=noblock,proto3" json:"noblock,omitempty"`
	Ike     string `protobuf:"bytes,2,opt,name=ike,proto3" json:"ike,omitempty"`
	IkeId   uint64 `protobuf:"varint,3,opt,name=ike_id,json=ikeId,proto3" json:"ike_id,omitempty"`
	Child   string `protobuf:"bytes,4,opt,name=child,proto3" json:"child,omitempty"`
	ChildId uint64 `protobuf:"varint,5,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
}

func (x *IPsecListSasReq) Reset() {
	*x = IPsecListSasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecListSasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecListSasReq) ProtoMessage() {}

func (x *IPsecListSasReq) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecListSasReq.ProtoReflect.Descriptor instead.
func (*IPsecListSasReq) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{24}
}

func (x *IPsecListSasReq) GetNoblock() string {
	if x != nil {
		return x.Noblock
	}
	return ""
}

func (x *IPsecListSasReq) GetIke() string {
	if x != nil {
		return x.Ike
	}
	return ""
}

func (x *IPsecListSasReq) GetIkeId() uint64 {
	if x != nil {
		return x.IkeId
	}
	return 0
}

func (x *IPsecListSasReq) GetChild() string {
	if x != nil {
		return x.Child
	}
	return ""
}

func (x *IPsecListSasReq) GetChildId() uint64 {
	if x != nil {
		return x.ChildId
	}
	return 0
}

type ListChildSa struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Protocol     string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Encap        string `protobuf:"bytes,3,opt,name=encap,proto3" json:"encap,omitempty"`
	SpiIn        string `protobuf:"bytes,4,opt,name=spi_in,json=spiIn,proto3" json:"spi_in,omitempty"`
	SpiOut       string `protobuf:"bytes,5,opt,name=spi_out,json=spiOut,proto3" json:"spi_out,omitempty"`
	CpiIn        string `protobuf:"bytes,6,opt,name=cpi_in,json=cpiIn,proto3" json:"cpi_in,omitempty"`
	CpiOut       string `protobuf:"bytes,7,opt,name=cpi_out,json=cpiOut,proto3" json:"cpi_out,omitempty"`
	MarkIn       string `protobuf:"bytes,8,opt,name=mark_in,json=markIn,proto3" json:"mark_in,omitempty"`
	MarkMaskIn   string `protobuf:"bytes,9,opt,name=mark_mask_in,json=markMaskIn,proto3" json:"mark_mask_in,omitempty"`
	MarkOut      string `protobuf:"bytes,10,opt,name=mark_out,json=markOut,proto3" json:"mark_out,omitempty"`
	MarkMaskOut  string `protobuf:"bytes,11,opt,name=mark_mask_out,json=markMaskOut,proto3" json:"mark_mask_out,omitempty"`
	IfIdIn       string `protobuf:"bytes,12,opt,name=if_id_in,json=ifIdIn,proto3" json:"if_id_in,omitempty"`
	IfIdOut      string `protobuf:"bytes,13,opt,name=if_id_out,json=ifIdOut,proto3" json:"if_id_out,omitempty"`
	EncrAlg      string `protobuf:"bytes,14,opt,name=encr_alg,json=encrAlg,proto3" json:"encr_alg,omitempty"`
	EncrKeysize  string `protobuf:"bytes,15,opt,name=encr_keysize,json=encrKeysize,proto3" json:"encr_keysize,omitempty"`
	IntegAlg     string `protobuf:"bytes,16,opt,name=integ_alg,json=integAlg,proto3" json:"integ_alg,omitempty"`
	IntegKeysize string `protobuf:"bytes,17,opt,name=integ_keysize,json=integKeysize,proto3" json:"integ_keysize,omitempty"`
	DhGroup      string `protobuf:"bytes,18,opt,name=dh_group,json=dhGroup,proto3" json:"dh_group,omitempty"`
	Esn          string `protobuf:"bytes,19,opt,name=esn,proto3" json:"esn,omitempty"`
}

func (x *ListChildSa) Reset() {
	*x = ListChildSa{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChildSa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChildSa) ProtoMessage() {}

func (x *ListChildSa) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChildSa.ProtoReflect.Descriptor instead.
func (*ListChildSa) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{25}
}

func (x *ListChildSa) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListChildSa) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ListChildSa) GetEncap() string {
	if x != nil {
		return x.Encap
	}
	return ""
}

func (x *ListChildSa) GetSpiIn() string {
	if x != nil {
		return x.SpiIn
	}
	return ""
}

func (x *ListChildSa) GetSpiOut() string {
	if x != nil {
		return x.SpiOut
	}
	return ""
}

func (x *ListChildSa) GetCpiIn() string {
	if x != nil {
		return x.CpiIn
	}
	return ""
}

func (x *ListChildSa) GetCpiOut() string {
	if x != nil {
		return x.CpiOut
	}
	return ""
}

func (x *ListChildSa) GetMarkIn() string {
	if x != nil {
		return x.MarkIn
	}
	return ""
}

func (x *ListChildSa) GetMarkMaskIn() string {
	if x != nil {
		return x.MarkMaskIn
	}
	return ""
}

func (x *ListChildSa) GetMarkOut() string {
	if x != nil {
		return x.MarkOut
	}
	return ""
}

func (x *ListChildSa) GetMarkMaskOut() string {
	if x != nil {
		return x.MarkMaskOut
	}
	return ""
}

func (x *ListChildSa) GetIfIdIn() string {
	if x != nil {
		return x.IfIdIn
	}
	return ""
}

func (x *ListChildSa) GetIfIdOut() string {
	if x != nil {
		return x.IfIdOut
	}
	return ""
}

func (x *ListChildSa) GetEncrAlg() string {
	if x != nil {
		return x.EncrAlg
	}
	return ""
}

func (x *ListChildSa) GetEncrKeysize() string {
	if x != nil {
		return x.EncrKeysize
	}
	return ""
}

func (x *ListChildSa) GetIntegAlg() string {
	if x != nil {
		return x.IntegAlg
	}
	return ""
}

func (x *ListChildSa) GetIntegKeysize() string {
	if x != nil {
		return x.IntegKeysize
	}
	return ""
}

func (x *ListChildSa) GetDhGroup() string {
	if x != nil {
		return x.DhGroup
	}
	return ""
}

func (x *ListChildSa) GetEsn() string {
	if x != nil {
		return x.Esn
	}
	return ""
}

type ListIkeSa struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // IKE_SA name
	Uniqueid      string         `protobuf:"bytes,2,opt,name=uniqueid,proto3" json:"uniqueid,omitempty"`
	Version       string         `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Ikestate      IkeSaState     `protobuf:"varint,4,opt,name=ikestate,proto3,enum=opi_api.security.v1.IkeSaState" json:"ikestate,omitempty"`
	LocalHost     string         `protobuf:"bytes,5,opt,name=local_host,json=localHost,proto3" json:"local_host,omitempty"`
	LocalPort     string         `protobuf:"bytes,6,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	LocalId       string         `protobuf:"bytes,7,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
	RemoteHost    string         `protobuf:"bytes,8,opt,name=remote_host,json=remoteHost,proto3" json:"remote_host,omitempty"`
	RemotePort    string         `protobuf:"bytes,9,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
	RemoteId      string         `protobuf:"bytes,10,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	RemoteXauthId string         `protobuf:"bytes,11,opt,name=remote_xauth_id,json=remoteXauthId,proto3" json:"remote_xauth_id,omitempty"`
	RemoteEapId   string         `protobuf:"bytes,12,opt,name=remote_eap_id,json=remoteEapId,proto3" json:"remote_eap_id,omitempty"`
	Initiator     string         `protobuf:"bytes,13,opt,name=initiator,proto3" json:"initiator,omitempty"`
	InitiatorSpi  string         `protobuf:"bytes,14,opt,name=initiator_spi,json=initiatorSpi,proto3" json:"initiator_spi,omitempty"`
	ResponderSpi  string         `protobuf:"bytes,15,opt,name=responder_spi,json=responderSpi,proto3" json:"responder_spi,omitempty"`
	NatLocal      string         `protobuf:"bytes,16,opt,name=nat_local,json=natLocal,proto3" json:"nat_local,omitempty"`
	NatRemote     string         `protobuf:"bytes,17,opt,name=nat_remote,json=natRemote,proto3" json:"nat_remote,omitempty"`
	NatFake       string         `protobuf:"bytes,18,opt,name=nat_fake,json=natFake,proto3" json:"nat_fake,omitempty"`
	NatAny        string         `protobuf:"bytes,19,opt,name=nat_any,json=natAny,proto3" json:"nat_any,omitempty"`
	IfIdIn        string         `protobuf:"bytes,20,opt,name=if_id_in,json=ifIdIn,proto3" json:"if_id_in,omitempty"`
	IfIdOut       string         `protobuf:"bytes,21,opt,name=if_id_out,json=ifIdOut,proto3" json:"if_id_out,omitempty"`
	EncrAlg       string         `protobuf:"bytes,22,opt,name=encr_alg,json=encrAlg,proto3" json:"encr_alg,omitempty"`
	EncrKeysize   string         `protobuf:"bytes,23,opt,name=encr_keysize,json=encrKeysize,proto3" json:"encr_keysize,omitempty"`
	IntegAlg      string         `protobuf:"bytes,24,opt,name=integ_alg,json=integAlg,proto3" json:"integ_alg,omitempty"`
	IntegKeysize  string         `protobuf:"bytes,25,opt,name=integ_keysize,json=integKeysize,proto3" json:"integ_keysize,omitempty"`
	PrfAlg        string         `protobuf:"bytes,26,opt,name=prf_alg,json=prfAlg,proto3" json:"prf_alg,omitempty"`
	DhGroup       string         `protobuf:"bytes,27,opt,name=dh_group,json=dhGroup,proto3" json:"dh_group,omitempty"`
	Ppk           string         `protobuf:"bytes,28,opt,name=ppk,proto3" json:"ppk,omitempty"`
	Established   string         `protobuf:"bytes,29,opt,name=established,proto3" json:"established,omitempty"`
	RekeyTime     string         `protobuf:"bytes,30,opt,name=rekey_time,json=rekeyTime,proto3" json:"rekey_time,omitempty"`
	ReauthTime    string         `protobuf:"bytes,31,opt,name=reauth_time,json=reauthTime,proto3" json:"reauth_time,omitempty"`
	LocalVips     []string       `protobuf:"bytes,32,rep,name=local_vips,json=localVips,proto3" json:"local_vips,omitempty"`
	RemoteVips    []string       `protobuf:"bytes,33,rep,name=remote_vips,json=remoteVips,proto3" json:"remote_vips,omitempty"`
	TasksQueued   []string       `protobuf:"bytes,34,rep,name=tasks_queued,json=tasksQueued,proto3" json:"tasks_queued,omitempty"`
	TasksActive   []string       `protobuf:"bytes,35,rep,name=tasks_active,json=tasksActive,proto3" json:"tasks_active,omitempty"`
	TasksPassive  []string       `protobuf:"bytes,36,rep,name=tasks_passive,json=tasksPassive,proto3" json:"tasks_passive,omitempty"`
	Childsas      []*ListChildSa `protobuf:"bytes,37,rep,name=childsas,proto3" json:"childsas,omitempty"`
}

func (x *ListIkeSa) Reset() {
	*x = ListIkeSa{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIkeSa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIkeSa) ProtoMessage() {}

func (x *ListIkeSa) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIkeSa.ProtoReflect.Descriptor instead.
func (*ListIkeSa) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{26}
}

func (x *ListIkeSa) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListIkeSa) GetUniqueid() string {
	if x != nil {
		return x.Uniqueid
	}
	return ""
}

func (x *ListIkeSa) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ListIkeSa) GetIkestate() IkeSaState {
	if x != nil {
		return x.Ikestate
	}
	return IkeSaState_CREATED
}

func (x *ListIkeSa) GetLocalHost() string {
	if x != nil {
		return x.LocalHost
	}
	return ""
}

func (x *ListIkeSa) GetLocalPort() string {
	if x != nil {
		return x.LocalPort
	}
	return ""
}

func (x *ListIkeSa) GetLocalId() string {
	if x != nil {
		return x.LocalId
	}
	return ""
}

func (x *ListIkeSa) GetRemoteHost() string {
	if x != nil {
		return x.RemoteHost
	}
	return ""
}

func (x *ListIkeSa) GetRemotePort() string {
	if x != nil {
		return x.RemotePort
	}
	return ""
}

func (x *ListIkeSa) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *ListIkeSa) GetRemoteXauthId() string {
	if x != nil {
		return x.RemoteXauthId
	}
	return ""
}

func (x *ListIkeSa) GetRemoteEapId() string {
	if x != nil {
		return x.RemoteEapId
	}
	return ""
}

func (x *ListIkeSa) GetInitiator() string {
	if x != nil {
		return x.Initiator
	}
	return ""
}

func (x *ListIkeSa) GetInitiatorSpi() string {
	if x != nil {
		return x.InitiatorSpi
	}
	return ""
}

func (x *ListIkeSa) GetResponderSpi() string {
	if x != nil {
		return x.ResponderSpi
	}
	return ""
}

func (x *ListIkeSa) GetNatLocal() string {
	if x != nil {
		return x.NatLocal
	}
	return ""
}

func (x *ListIkeSa) GetNatRemote() string {
	if x != nil {
		return x.NatRemote
	}
	return ""
}

func (x *ListIkeSa) GetNatFake() string {
	if x != nil {
		return x.NatFake
	}
	return ""
}

func (x *ListIkeSa) GetNatAny() string {
	if x != nil {
		return x.NatAny
	}
	return ""
}

func (x *ListIkeSa) GetIfIdIn() string {
	if x != nil {
		return x.IfIdIn
	}
	return ""
}

func (x *ListIkeSa) GetIfIdOut() string {
	if x != nil {
		return x.IfIdOut
	}
	return ""
}

func (x *ListIkeSa) GetEncrAlg() string {
	if x != nil {
		return x.EncrAlg
	}
	return ""
}

func (x *ListIkeSa) GetEncrKeysize() string {
	if x != nil {
		return x.EncrKeysize
	}
	return ""
}

func (x *ListIkeSa) GetIntegAlg() string {
	if x != nil {
		return x.IntegAlg
	}
	return ""
}

func (x *ListIkeSa) GetIntegKeysize() string {
	if x != nil {
		return x.IntegKeysize
	}
	return ""
}

func (x *ListIkeSa) GetPrfAlg() string {
	if x != nil {
		return x.PrfAlg
	}
	return ""
}

func (x *ListIkeSa) GetDhGroup() string {
	if x != nil {
		return x.DhGroup
	}
	return ""
}

func (x *ListIkeSa) GetPpk() string {
	if x != nil {
		return x.Ppk
	}
	return ""
}

func (x *ListIkeSa) GetEstablished() string {
	if x != nil {
		return x.Established
	}
	return ""
}

func (x *ListIkeSa) GetRekeyTime() string {
	if x != nil {
		return x.RekeyTime
	}
	return ""
}

func (x *ListIkeSa) GetReauthTime() string {
	if x != nil {
		return x.ReauthTime
	}
	return ""
}

func (x *ListIkeSa) GetLocalVips() []string {
	if x != nil {
		return x.LocalVips
	}
	return nil
}

func (x *ListIkeSa) GetRemoteVips() []string {
	if x != nil {
		return x.RemoteVips
	}
	return nil
}

func (x *ListIkeSa) GetTasksQueued() []string {
	if x != nil {
		return x.TasksQueued
	}
	return nil
}

func (x *ListIkeSa) GetTasksActive() []string {
	if x != nil {
		return x.TasksActive
	}
	return nil
}

func (x *ListIkeSa) GetTasksPassive() []string {
	if x != nil {
		return x.TasksPassive
	}
	return nil
}

func (x *ListIkeSa) GetChildsas() []*ListChildSa {
	if x != nil {
		return x.Childsas
	}
	return nil
}

type IPsecListSasResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ikesas []*ListIkeSa `protobuf:"bytes,1,rep,name=ikesas,proto3" json:"ikesas,omitempty"`
}

func (x *IPsecListSasResp) Reset() {
	*x = IPsecListSasResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecListSasResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecListSasResp) ProtoMessage() {}

func (x *IPsecListSasResp) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecListSasResp.ProtoReflect.Descriptor instead.
func (*IPsecListSasResp) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{27}
}

func (x *IPsecListSasResp) GetIkesas() []*ListIkeSa {
	if x != nil {
		return x.Ikesas
	}
	return nil
}

type IPsecListConnsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ike string `protobuf:"bytes,1,opt,name=ike,proto3" json:"ike,omitempty"`
}

func (x *IPsecListConnsReq) Reset() {
	*x = IPsecListConnsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecListConnsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecListConnsReq) ProtoMessage() {}

func (x *IPsecListConnsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecListConnsReq.ProtoReflect.Descriptor instead.
func (*IPsecListConnsReq) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{28}
}

func (x *IPsecListConnsReq) GetIke() string {
	if x != nil {
		return x.Ike
	}
	return ""
}

type ListConnAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class      string      `protobuf:"bytes,1,opt,name=class,proto3" json:"class,omitempty"`
	Eaptype    string      `protobuf:"bytes,2,opt,name=eaptype,proto3" json:"eaptype,omitempty"`
	Eapvendor  string      `protobuf:"bytes,3,opt,name=eapvendor,proto3" json:"eapvendor,omitempty"`
	Xauth      string      `protobuf:"bytes,4,opt,name=xauth,proto3" json:"xauth,omitempty"`
	Revocation string      `protobuf:"bytes,5,opt,name=revocation,proto3" json:"revocation,omitempty"`
	Id         string      `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	CaId       string      `protobuf:"bytes,7,opt,name=ca_id,json=caId,proto3" json:"ca_id,omitempty"`
	AaaId      string      `protobuf:"bytes,8,opt,name=aaa_id,json=aaaId,proto3" json:"aaa_id,omitempty"`
	EapId      string      `protobuf:"bytes,9,opt,name=eap_id,json=eapId,proto3" json:"eap_id,omitempty"`
	XauthId    string      `protobuf:"bytes,10,opt,name=xauth_id,json=xauthId,proto3" json:"xauth_id,omitempty"`
	Group      *Groups     `protobuf:"bytes,11,opt,name=group,proto3" json:"group,omitempty"`
	CertPolicy *CertPolicy `protobuf:"bytes,12,opt,name=cert_policy,json=certPolicy,proto3" json:"cert_policy,omitempty"`
	Certs      *Certs      `protobuf:"bytes,13,opt,name=certs,proto3" json:"certs,omitempty"`
	Cacerts    *CaCerts    `protobuf:"bytes,14,opt,name=cacerts,proto3" json:"cacerts,omitempty"`
}

func (x *ListConnAuth) Reset() {
	*x = ListConnAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnAuth) ProtoMessage() {}

func (x *ListConnAuth) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnAuth.ProtoReflect.Descriptor instead.
func (*ListConnAuth) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{29}
}

func (x *ListConnAuth) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *ListConnAuth) GetEaptype() string {
	if x != nil {
		return x.Eaptype
	}
	return ""
}

func (x *ListConnAuth) GetEapvendor() string {
	if x != nil {
		return x.Eapvendor
	}
	return ""
}

func (x *ListConnAuth) GetXauth() string {
	if x != nil {
		return x.Xauth
	}
	return ""
}

func (x *ListConnAuth) GetRevocation() string {
	if x != nil {
		return x.Revocation
	}
	return ""
}

func (x *ListConnAuth) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListConnAuth) GetCaId() string {
	if x != nil {
		return x.CaId
	}
	return ""
}

func (x *ListConnAuth) GetAaaId() string {
	if x != nil {
		return x.AaaId
	}
	return ""
}

func (x *ListConnAuth) GetEapId() string {
	if x != nil {
		return x.EapId
	}
	return ""
}

func (x *ListConnAuth) GetXauthId() string {
	if x != nil {
		return x.XauthId
	}
	return ""
}

func (x *ListConnAuth) GetGroup() *Groups {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ListConnAuth) GetCertPolicy() *CertPolicy {
	if x != nil {
		return x.CertPolicy
	}
	return nil
}

func (x *ListConnAuth) GetCerts() *Certs {
	if x != nil {
		return x.Certs
	}
	return nil
}

func (x *ListConnAuth) GetCacerts() *CaCerts {
	if x != nil {
		return x.Cacerts
	}
	return nil
}

type ListChild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Child SA name
	Mode         string            `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Label        string            `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	RekeyTime    uint32            `protobuf:"varint,4,opt,name=rekey_time,json=rekeyTime,proto3" json:"rekey_time,omitempty"`
	RekeyBytes   uint32            `protobuf:"varint,5,opt,name=rekey_bytes,json=rekeyBytes,proto3" json:"rekey_bytes,omitempty"`
	RekeyPackets uint32            `protobuf:"varint,6,opt,name=rekey_packets,json=rekeyPackets,proto3" json:"rekey_packets,omitempty"`
	DpdAction    string            `protobuf:"bytes,7,opt,name=dpd_action,json=dpdAction,proto3" json:"dpd_action,omitempty"`
	CloseAction  string            `protobuf:"bytes,8,opt,name=close_action,json=closeAction,proto3" json:"close_action,omitempty"`
	LocalTs      *TrafficSelectors `protobuf:"bytes,9,opt,name=local_ts,json=localTs,proto3" json:"local_ts,omitempty"`
	RemoteTs     *TrafficSelectors `protobuf:"bytes,10,opt,name=remote_ts,json=remoteTs,proto3" json:"remote_ts,omitempty"`
	Interface    string            `protobuf:"bytes,11,opt,name=interface,proto3" json:"interface,omitempty"`
	Priority     string            `protobuf:"bytes,12,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *ListChild) Reset() {
	*x = ListChild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChild) ProtoMessage() {}

func (x *ListChild) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChild.ProtoReflect.Descriptor instead.
func (*ListChild) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{30}
}

func (x *ListChild) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListChild) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ListChild) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ListChild) GetRekeyTime() uint32 {
	if x != nil {
		return x.RekeyTime
	}
	return 0
}

func (x *ListChild) GetRekeyBytes() uint32 {
	if x != nil {
		return x.RekeyBytes
	}
	return 0
}

func (x *ListChild) GetRekeyPackets() uint32 {
	if x != nil {
		return x.RekeyPackets
	}
	return 0
}

func (x *ListChild) GetDpdAction() string {
	if x != nil {
		return x.DpdAction
	}
	return ""
}

func (x *ListChild) GetCloseAction() string {
	if x != nil {
		return x.CloseAction
	}
	return ""
}

func (x *ListChild) GetLocalTs() *TrafficSelectors {
	if x != nil {
		return x.LocalTs
	}
	return nil
}

func (x *ListChild) GetRemoteTs() *TrafficSelectors {
	if x != nil {
		return x.RemoteTs
	}
	return nil
}

func (x *ListChild) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *ListChild) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

type ListConnResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Connection name
	LocalAddrs  []*Addrs        `protobuf:"bytes,2,rep,name=local_addrs,json=localAddrs,proto3" json:"local_addrs,omitempty"`
	RemoteAddrs []*Addrs        `protobuf:"bytes,3,rep,name=remote_addrs,json=remoteAddrs,proto3" json:"remote_addrs,omitempty"`
	Version     string          `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	ReauthTime  uint32          `protobuf:"varint,5,opt,name=reauth_time,json=reauthTime,proto3" json:"reauth_time,omitempty"`
	RekeyTime   uint32          `protobuf:"varint,6,opt,name=rekey_time,json=rekeyTime,proto3" json:"rekey_time,omitempty"`
	Unique      string          `protobuf:"bytes,7,opt,name=unique,proto3" json:"unique,omitempty"`
	DpdDelay    uint32          `protobuf:"varint,8,opt,name=dpd_delay,json=dpdDelay,proto3" json:"dpd_delay,omitempty"`
	DpdTimeout  uint32          `protobuf:"varint,9,opt,name=dpd_timeout,json=dpdTimeout,proto3" json:"dpd_timeout,omitempty"`
	Ppk         string          `protobuf:"bytes,10,opt,name=ppk,proto3" json:"ppk,omitempty"`
	PpkRequired string          `protobuf:"bytes,11,opt,name=ppk_required,json=ppkRequired,proto3" json:"ppk_required,omitempty"`
	LocalAuth   []*ListConnAuth `protobuf:"bytes,12,rep,name=local_auth,json=localAuth,proto3" json:"local_auth,omitempty"`
	RemoteAuth  []*ListConnAuth `protobuf:"bytes,13,rep,name=remote_auth,json=remoteAuth,proto3" json:"remote_auth,omitempty"`
	Children    []*ListChild    `protobuf:"bytes,14,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *ListConnResp) Reset() {
	*x = ListConnResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnResp) ProtoMessage() {}

func (x *ListConnResp) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnResp.ProtoReflect.Descriptor instead.
func (*ListConnResp) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{31}
}

func (x *ListConnResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListConnResp) GetLocalAddrs() []*Addrs {
	if x != nil {
		return x.LocalAddrs
	}
	return nil
}

func (x *ListConnResp) GetRemoteAddrs() []*Addrs {
	if x != nil {
		return x.RemoteAddrs
	}
	return nil
}

func (x *ListConnResp) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ListConnResp) GetReauthTime() uint32 {
	if x != nil {
		return x.ReauthTime
	}
	return 0
}

func (x *ListConnResp) GetRekeyTime() uint32 {
	if x != nil {
		return x.RekeyTime
	}
	return 0
}

func (x *ListConnResp) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *ListConnResp) GetDpdDelay() uint32 {
	if x != nil {
		return x.DpdDelay
	}
	return 0
}

func (x *ListConnResp) GetDpdTimeout() uint32 {
	if x != nil {
		return x.DpdTimeout
	}
	return 0
}

func (x *ListConnResp) GetPpk() string {
	if x != nil {
		return x.Ppk
	}
	return ""
}

func (x *ListConnResp) GetPpkRequired() string {
	if x != nil {
		return x.PpkRequired
	}
	return ""
}

func (x *ListConnResp) GetLocalAuth() []*ListConnAuth {
	if x != nil {
		return x.LocalAuth
	}
	return nil
}

func (x *ListConnResp) GetRemoteAuth() []*ListConnAuth {
	if x != nil {
		return x.RemoteAuth
	}
	return nil
}

func (x *ListConnResp) GetChildren() []*ListChild {
	if x != nil {
		return x.Children
	}
	return nil
}

type IPsecListConnsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection []*ListConnResp `protobuf:"bytes,1,rep,name=connection,proto3" json:"connection,omitempty"`
}

func (x *IPsecListConnsResp) Reset() {
	*x = IPsecListConnsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecListConnsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecListConnsResp) ProtoMessage() {}

func (x *IPsecListConnsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecListConnsResp.ProtoReflect.Descriptor instead.
func (*IPsecListConnsResp) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{32}
}

func (x *IPsecListConnsResp) GetConnection() []*ListConnResp {
	if x != nil {
		return x.Connection
	}
	return nil
}

type IPsecListCertsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Flag    string `protobuf:"bytes,2,opt,name=flag,proto3" json:"flag,omitempty"`
	Subject string `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *IPsecListCertsReq) Reset() {
	*x = IPsecListCertsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecListCertsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecListCertsReq) ProtoMessage() {}

func (x *IPsecListCertsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecListCertsReq.ProtoReflect.Descriptor instead.
func (*IPsecListCertsReq) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{33}
}

func (x *IPsecListCertsReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IPsecListCertsReq) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *IPsecListCertsReq) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

// list-cert
type ListCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       CertificateType     `protobuf:"varint,1,opt,name=type,proto3,enum=opi_api.security.v1.CertificateType" json:"type,omitempty"`
	Flag       X509CertificateFlag `protobuf:"varint,2,opt,name=flag,proto3,enum=opi_api.security.v1.X509CertificateFlag" json:"flag,omitempty"`
	Hasprivkey string              `protobuf:"bytes,3,opt,name=hasprivkey,proto3" json:"hasprivkey,omitempty"`
	Data       string              `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Subject    string              `protobuf:"bytes,5,opt,name=subject,proto3" json:"subject,omitempty"`
	Notbefore  string              `protobuf:"bytes,6,opt,name=notbefore,proto3" json:"notbefore,omitempty"`
	Notafter   string              `protobuf:"bytes,7,opt,name=notafter,proto3" json:"notafter,omitempty"`
}

func (x *ListCert) Reset() {
	*x = ListCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCert) ProtoMessage() {}

func (x *ListCert) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCert.ProtoReflect.Descriptor instead.
func (*ListCert) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{34}
}

func (x *ListCert) GetType() CertificateType {
	if x != nil {
		return x.Type
	}
	return CertificateType_CERT_X509
}

func (x *ListCert) GetFlag() X509CertificateFlag {
	if x != nil {
		return x.Flag
	}
	return X509CertificateFlag_X509_CERT_FLAG_NONE
}

func (x *ListCert) GetHasprivkey() string {
	if x != nil {
		return x.Hasprivkey
	}
	return ""
}

func (x *ListCert) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ListCert) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ListCert) GetNotbefore() string {
	if x != nil {
		return x.Notbefore
	}
	return ""
}

func (x *ListCert) GetNotafter() string {
	if x != nil {
		return x.Notafter
	}
	return ""
}

type IPsecListCertsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certs []*ListCert `protobuf:"bytes,1,rep,name=certs,proto3" json:"certs,omitempty"`
}

func (x *IPsecListCertsResp) Reset() {
	*x = IPsecListCertsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecListCertsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecListCertsResp) ProtoMessage() {}

func (x *IPsecListCertsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecListCertsResp.ProtoReflect.Descriptor instead.
func (*IPsecListCertsResp) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{35}
}

func (x *IPsecListCertsResp) GetCerts() []*ListCert {
	if x != nil {
		return x.Certs
	}
	return nil
}

type IPsecLoadConnReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *IPsecLoadConnReq) Reset() {
	*x = IPsecLoadConnReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecLoadConnReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecLoadConnReq) ProtoMessage() {}

func (x *IPsecLoadConnReq) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecLoadConnReq.ProtoReflect.Descriptor instead.
func (*IPsecLoadConnReq) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{36}
}

func (x *IPsecLoadConnReq) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type IPsecLoadConnResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success string `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *IPsecLoadConnResp) Reset() {
	*x = IPsecLoadConnResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecLoadConnResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecLoadConnResp) ProtoMessage() {}

func (x *IPsecLoadConnResp) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecLoadConnResp.ProtoReflect.Descriptor instead.
func (*IPsecLoadConnResp) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{37}
}

func (x *IPsecLoadConnResp) GetSuccess() string {
	if x != nil {
		return x.Success
	}
	return ""
}

type IPsecUnloadConnReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *IPsecUnloadConnReq) Reset() {
	*x = IPsecUnloadConnReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecUnloadConnReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecUnloadConnReq) ProtoMessage() {}

func (x *IPsecUnloadConnReq) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecUnloadConnReq.ProtoReflect.Descriptor instead.
func (*IPsecUnloadConnReq) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{38}
}

func (x *IPsecUnloadConnReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type IPsecUnloadConnResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success string `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *IPsecUnloadConnResp) Reset() {
	*x = IPsecUnloadConnResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPsecUnloadConnResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPsecUnloadConnResp) ProtoMessage() {}

func (x *IPsecUnloadConnResp) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPsecUnloadConnResp.ProtoReflect.Descriptor instead.
func (*IPsecUnloadConnResp) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{39}
}

func (x *IPsecUnloadConnResp) GetSuccess() string {
	if x != nil {
		return x.Success
	}
	return ""
}

type TrafficSelectors_TrafficSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cidr  string `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Proto string `protobuf:"bytes,2,opt,name=proto,proto3" json:"proto,omitempty"`
	Port  string `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *TrafficSelectors_TrafficSelector) Reset() {
	*x = TrafficSelectors_TrafficSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipsec_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficSelectors_TrafficSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficSelectors_TrafficSelector) ProtoMessage() {}

func (x *TrafficSelectors_TrafficSelector) ProtoReflect() protoreflect.Message {
	mi := &file_ipsec_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficSelectors_TrafficSelector.ProtoReflect.Descriptor instead.
func (*TrafficSelectors_TrafficSelector) Descriptor() ([]byte, []int) {
	return file_ipsec_proto_rawDescGZIP(), []int{10, 0}
}

func (x *TrafficSelectors_TrafficSelector) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *TrafficSelectors_TrafficSelector) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *TrafficSelectors_TrafficSelector) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

var File_ipsec_proto protoreflect.FileDescriptor

var file_ipsec_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x22, 0x95, 0x02, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x12, 0x43, 0x0a, 0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x41, 0x6c, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x61,
	0x6c, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x12, 0x3b, 0x0a, 0x03, 0x70, 0x72, 0x66, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x73, 0x65, 0x75, 0x64,
	0x6f, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x70, 0x72, 0x66, 0x12, 0x44, 0x0a, 0x08, 0x64, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x65, 0x48, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x08, 0x64, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x18, 0x0a, 0x04, 0x56, 0x69,
	0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x76, 0x69, 0x70, 0x22, 0x1b, 0x0a, 0x05, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x22, 0x1b, 0x0a, 0x05, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x22, 0x21,
	0x0a, 0x07, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x22, 0x1e, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x2d, 0x0a, 0x0a, 0x43, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0x21, 0x0a, 0x07, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x61, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x63,
	0x65, 0x72, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x31, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x61, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x61, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x61, 0x61,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x78, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x78, 0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x12,
	0x36, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x07,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x61, 0x70, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x63, 0x65, 0x72,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x52, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x61, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x07, 0x63, 0x61, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x45, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x02, 0x74, 0x73, 0x1a, 0x4f, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x1b, 0x0a, 0x05, 0x41, 0x64, 0x64, 0x72, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x22, 0xed, 0x04, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x61, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x65, 0x73, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x0c, 0x65, 0x73,
	0x70, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x73, 0x12, 0x42, 0x0a, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x53, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b,
	0x4f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x49, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x4f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x6f, 0x66, 0x66, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x4f, 0x66, 0x66,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x8e, 0x06, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x73, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x3d,
	0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x73,
	0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x76,
	0x69, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x70, 0x73, 0x52, 0x04, 0x76, 0x69, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73,
	0x63, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6b, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6b, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x70, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x70, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x70, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x64, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x0b, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x36, 0x0a,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x11, 0x0a, 0x0f, 0x49, 0x50, 0x73, 0x65, 0x63, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x49, 0x50, 0x73,
	0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x79, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0x0f, 0x0a,
	0x0d, 0x49, 0x50, 0x73, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x22, 0x28,
	0x0a, 0x0e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x70, 0x0a, 0x10, 0x49, 0x50, 0x73, 0x65,
	0x63, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x6b, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x13, 0x0a, 0x11, 0x49, 0x50,
	0x73, 0x65, 0x63, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22,
	0xb9, 0x01, 0x0a, 0x11, 0x49, 0x50, 0x73, 0x65, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6b, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6b, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x68, 0x0a, 0x12, 0x49,
	0x50, 0x73, 0x65, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x49, 0x50, 0x73, 0x65, 0x63, 0x52,
	0x65, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6b, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6b,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6b, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x22, 0x44, 0x0a, 0x0e, 0x49, 0x50, 0x73,
	0x65, 0x63, 0x52, 0x65, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22,
	0x85, 0x01, 0x0a, 0x0f, 0x49, 0x50, 0x73, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6b, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x6b, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x90, 0x04, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x70, 0x69, 0x5f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x70, 0x69, 0x49, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x63, 0x70, 0x69, 0x5f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x70, 0x69, 0x49, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x70, 0x69, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x70, 0x69, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x4d, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b,
	0x4f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b,
	0x4d, 0x61, 0x73, 0x6b, 0x4f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x69, 0x64,
	0x5f, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66, 0x49, 0x64, 0x49,
	0x6e, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x66, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x66, 0x49, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x63, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x63, 0x72, 0x41, 0x6c, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x72,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x6e, 0x63, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x73, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x73, 0x6e, 0x22, 0xb5, 0x09, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6b, 0x65, 0x53, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x69, 0x6b, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6b, 0x65, 0x53, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x69, 0x6b, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x78, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x58, 0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x61, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x61,
	0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x70, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x70, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x69, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x70, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x61, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x61, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x74, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x5f, 0x66,
	0x61, 0x6b, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x61, 0x74, 0x46, 0x61,
	0x6b, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x74, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x74, 0x41, 0x6e, 0x79, 0x12, 0x18, 0x0a, 0x08, 0x69,
	0x66, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x66, 0x49, 0x64, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x66, 0x5f, 0x69, 0x64, 0x5f, 0x6f,
	0x75, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x66, 0x49, 0x64, 0x4f, 0x75,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x41, 0x6c, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x6e, 0x63, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x66, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x66, 0x41, 0x6c, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x68,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x68,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x70, 0x6b, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x70, 0x70, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6b,
	0x65, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x6b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x75, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x76, 0x69, 0x70, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x56, 0x69, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x76, 0x69, 0x70, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x69, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x23, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x18, 0x24, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x61, 0x73,
	0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x61, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73,
	0x61, 0x73, 0x22, 0x4a, 0x0a, 0x10, 0x49, 0x50, 0x73, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x06, 0x69, 0x6b, 0x65, 0x73, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6b, 0x65, 0x53, 0x61, 0x52, 0x06, 0x69, 0x6b, 0x65, 0x73, 0x61, 0x73, 0x22, 0x25,
	0x0a, 0x11, 0x49, 0x50, 0x73, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x6b, 0x65, 0x22, 0xdf, 0x03, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x61, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x61, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x61, 0x70, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x61, 0x70, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x78, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x78, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x61, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x61, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x61, 0x61, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x61, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x61, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x78, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x78, 0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x40, 0x0a, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x12,
	0x36, 0x0a, 0x07, 0x63, 0x61, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x07,
	0x63, 0x61, 0x63, 0x65, 0x72, 0x74, 0x73, 0x22, 0xb0, 0x03, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6b, 0x65,
	0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x70, 0x64, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x70,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x73, 0x12, 0x42, 0x0a, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xc5, 0x04, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x73,
	0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0c,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x73, 0x52, 0x0b,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x75,
	0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6b, 0x65,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x70, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x70, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x70,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x64, 0x70, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x70, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x70, 0x6b, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x70, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x70, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x22, 0x57, 0x0a, 0x12, 0x49, 0x50, 0x73, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x11, 0x49,
	0x50, 0x73, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x8a, 0x02, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x35,
	0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x70, 0x72,
	0x69, 0x76, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x73,
	0x70, 0x72, 0x69, 0x76, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22,
	0x49, 0x0a, 0x12, 0x49, 0x50, 0x73, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x52, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x10, 0x49, 0x50,
	0x73, 0x65, 0x63, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x3f,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x2d, 0x0a, 0x11, 0x49, 0x50, 0x73, 0x65, 0x63, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x28,
	0x0a, 0x12, 0x49, 0x50, 0x73, 0x65, 0x63, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x13, 0x49, 0x50, 0x73, 0x65,
	0x63, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0x8a, 0x01, 0x0a, 0x0f, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x45, 0x53, 0x31, 0x32, 0x38, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x45,
	0x53, 0x31, 0x39, 0x32, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x45, 0x53, 0x31, 0x32, 0x38, 0x47, 0x43, 0x4d, 0x31,
	0x32, 0x38, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36, 0x47, 0x43,
	0x4d, 0x31, 0x32, 0x38, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x45, 0x53, 0x31, 0x32, 0x38,
	0x47, 0x4d, 0x41, 0x43, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36,
	0x47, 0x4d, 0x41, 0x43, 0x10, 0x07, 0x2a, 0x81, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x4e,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x44, 0x35,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x44, 0x35, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x48, 0x41, 0x31, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x41,
	0x31, 0x5f, 0x31, 0x36, 0x30, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x32, 0x35,
	0x36, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x07, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x48, 0x41, 0x32, 0x35, 0x36, 0x5f, 0x39, 0x36, 0x10, 0x09, 0x2a, 0xdd, 0x01, 0x0a, 0x13, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x65, 0x48, 0x65, 0x6c, 0x6c, 0x6d, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x44, 0x48, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x44, 0x50, 0x37, 0x36, 0x38,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x50, 0x31, 0x30, 0x32, 0x34, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x50, 0x31, 0x35, 0x33, 0x36, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x50, 0x32, 0x30, 0x34, 0x38, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x4f, 0x44, 0x50, 0x33, 0x30, 0x37, 0x32, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f,
	0x44, 0x50, 0x34, 0x30, 0x39, 0x36, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x50,
	0x36, 0x31, 0x34, 0x34, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x50, 0x38, 0x31,
	0x39, 0x32, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x50, 0x31, 0x30, 0x32, 0x34,
	0x53, 0x31, 0x36, 0x30, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x50, 0x32, 0x30,
	0x34, 0x38, 0x53, 0x32, 0x32, 0x34, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x50,
	0x32, 0x30, 0x34, 0x38, 0x53, 0x32, 0x35, 0x36, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x55,
	0x52, 0x56, 0x45, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x0c, 0x2a, 0x8a, 0x01, 0x0a, 0x14, 0x50,
	0x73, 0x65, 0x75, 0x64, 0x6f, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x46, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x52, 0x46, 0x4d, 0x44, 0x35, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x52, 0x46, 0x53, 0x48, 0x41, 0x31, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52,
	0x46, 0x41, 0x45, 0x53, 0x58, 0x43, 0x42, 0x43, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52,
	0x46, 0x41, 0x45, 0x53, 0x43, 0x4d, 0x41, 0x43, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52,
	0x46, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x46,
	0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x46, 0x53,
	0x48, 0x41, 0x35, 0x31, 0x32, 0x10, 0x07, 0x2a, 0x30, 0x0a, 0x09, 0x49, 0x50, 0x73, 0x65, 0x63,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x2a, 0x33, 0x0a, 0x08, 0x41, 0x75, 0x74,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4b, 0x45, 0x59, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x58, 0x41,
	0x55, 0x54, 0x48, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x41, 0x50, 0x10, 0x03, 0x2a, 0x80,
	0x01, 0x0a, 0x0a, 0x49, 0x6b, 0x65, 0x53, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x53,
	0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4b, 0x45,
	0x59, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4b, 0x45, 0x59, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x49, 0x4e, 0x47, 0x10,
	0x07, 0x2a, 0xea, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x49, 0x4c, 0x44,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f,
	0x52, 0x45, 0x4b, 0x45, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48,
	0x49, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x4b, 0x45, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x49, 0x4e, 0x47, 0x10,
	0x07, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x49, 0x4c,
	0x44, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x2a, 0x6e,
	0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x41, 0x43,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x5f,
	0x43, 0x52, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x4f, 0x43,
	0x53, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4b, 0x45, 0x59, 0x10, 0x04, 0x2a, 0x75,
	0x0a, 0x13, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x17, 0x0a, 0x13, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47,
	0x5f, 0x43, 0x41, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x41, 0x41, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x58, 0x35, 0x30, 0x39, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4f,
	0x43, 0x53, 0x50, 0x10, 0x03, 0x32, 0xd2, 0x07, 0x0a, 0x05, 0x49, 0x50, 0x73, 0x65, 0x63, 0x12,
	0x5d, 0x0a, 0x0c, 0x49, 0x50, 0x73, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65,
	0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x0a, 0x49, 0x50, 0x73, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0d, 0x49, 0x50, 0x73, 0x65, 0x63,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x50, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e, 0x49, 0x50, 0x73,
	0x65, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x0a, 0x49, 0x50, 0x73, 0x65, 0x63, 0x52, 0x65, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x52, 0x65, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x52, 0x65, 0x6b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x49, 0x50, 0x73, 0x65, 0x63,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x73, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50,
	0x73, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x50, 0x73, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e, 0x49,
	0x50, 0x73, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x26, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65,
	0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x0d, 0x49, 0x50, 0x73, 0x65, 0x63, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x6e, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x4c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x50, 0x73, 0x65, 0x63, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x0f, 0x49, 0x50, 0x73, 0x65, 0x63, 0x55, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65,
	0x63, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x73, 0x65, 0x63, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ipsec_proto_rawDescOnce sync.Once
	file_ipsec_proto_rawDescData = file_ipsec_proto_rawDesc
)

func file_ipsec_proto_rawDescGZIP() []byte {
	file_ipsec_proto_rawDescOnce.Do(func() {
		file_ipsec_proto_rawDescData = protoimpl.X.CompressGZIP(file_ipsec_proto_rawDescData)
	})
	return file_ipsec_proto_rawDescData
}

var file_ipsec_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_ipsec_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_ipsec_proto_goTypes = []interface{}{
	(CryptoAlgorithm)(0),                     // 0: opi_api.security.v1.CryptoAlgorithm
	(IntegAlgorithm)(0),                      // 1: opi_api.security.v1.IntegAlgorithm
	(DiffieHellmanGroups)(0),                 // 2: opi_api.security.v1.DiffieHellmanGroups
	(PseudoRandomFunction)(0),                // 3: opi_api.security.v1.PseudoRandomFunction
	(IPsecMode)(0),                           // 4: opi_api.security.v1.IPsecMode
	(AuthType)(0),                            // 5: opi_api.security.v1.AuthType
	(IkeSaState)(0),                          // 6: opi_api.security.v1.IkeSaState
	(ChildSaState)(0),                        // 7: opi_api.security.v1.ChildSaState
	(CertificateType)(0),                     // 8: opi_api.security.v1.CertificateType
	(X509CertificateFlag)(0),                 // 9: opi_api.security.v1.X509CertificateFlag
	(*Proposals)(nil),                        // 10: opi_api.security.v1.Proposals
	(*Vips)(nil),                             // 11: opi_api.security.v1.Vips
	(*Pools)(nil),                            // 12: opi_api.security.v1.Pools
	(*Certs)(nil),                            // 13: opi_api.security.v1.Certs
	(*PubKeys)(nil),                          // 14: opi_api.security.v1.PubKeys
	(*Groups)(nil),                           // 15: opi_api.security.v1.Groups
	(*CertPolicy)(nil),                       // 16: opi_api.security.v1.CertPolicy
	(*CaCerts)(nil),                          // 17: opi_api.security.v1.CaCerts
	(*LocalAuth)(nil),                        // 18: opi_api.security.v1.LocalAuth
	(*RemoteAuth)(nil),                       // 19: opi_api.security.v1.RemoteAuth
	(*TrafficSelectors)(nil),                 // 20: opi_api.security.v1.TrafficSelectors
	(*Addrs)(nil),                            // 21: opi_api.security.v1.Addrs
	(*Child)(nil),                            // 22: opi_api.security.v1.Child
	(*Connection)(nil),                       // 23: opi_api.security.v1.Connection
	(*IPsecVersionReq)(nil),                  // 24: opi_api.security.v1.IPsecVersionReq
	(*IPsecVersionResp)(nil),                 // 25: opi_api.security.v1.IPsecVersionResp
	(*IPsecStatsReq)(nil),                    // 26: opi_api.security.v1.IPsecStatsReq
	(*IPsecStatsResp)(nil),                   // 27: opi_api.security.v1.IPsecStatsResp
	(*IPsecInitiateReq)(nil),                 // 28: opi_api.security.v1.IPsecInitiateReq
	(*IPsecInitiateResp)(nil),                // 29: opi_api.security.v1.IPsecInitiateResp
	(*IPsecTerminateReq)(nil),                // 30: opi_api.security.v1.IPsecTerminateReq
	(*IPsecTerminateResp)(nil),               // 31: opi_api.security.v1.IPsecTerminateResp
	(*IPsecRekeyReq)(nil),                    // 32: opi_api.security.v1.IPsecRekeyReq
	(*IPsecRekeyResp)(nil),                   // 33: opi_api.security.v1.IPsecRekeyResp
	(*IPsecListSasReq)(nil),                  // 34: opi_api.security.v1.IPsecListSasReq
	(*ListChildSa)(nil),                      // 35: opi_api.security.v1.ListChildSa
	(*ListIkeSa)(nil),                        // 36: opi_api.security.v1.ListIkeSa
	(*IPsecListSasResp)(nil),                 // 37: opi_api.security.v1.IPsecListSasResp
	(*IPsecListConnsReq)(nil),                // 38: opi_api.security.v1.IPsecListConnsReq
	(*ListConnAuth)(nil),                     // 39: opi_api.security.v1.ListConnAuth
	(*ListChild)(nil),                        // 40: opi_api.security.v1.ListChild
	(*ListConnResp)(nil),                     // 41: opi_api.security.v1.ListConnResp
	(*IPsecListConnsResp)(nil),               // 42: opi_api.security.v1.IPsecListConnsResp
	(*IPsecListCertsReq)(nil),                // 43: opi_api.security.v1.IPsecListCertsReq
	(*ListCert)(nil),                         // 44: opi_api.security.v1.ListCert
	(*IPsecListCertsResp)(nil),               // 45: opi_api.security.v1.IPsecListCertsResp
	(*IPsecLoadConnReq)(nil),                 // 46: opi_api.security.v1.IPsecLoadConnReq
	(*IPsecLoadConnResp)(nil),                // 47: opi_api.security.v1.IPsecLoadConnResp
	(*IPsecUnloadConnReq)(nil),               // 48: opi_api.security.v1.IPsecUnloadConnReq
	(*IPsecUnloadConnResp)(nil),              // 49: opi_api.security.v1.IPsecUnloadConnResp
	(*TrafficSelectors_TrafficSelector)(nil), // 50: opi_api.security.v1.TrafficSelectors.TrafficSelector
}
var file_ipsec_proto_depIdxs = []int32{
	0,  // 0: opi_api.security.v1.Proposals.crypto_alg:type_name -> opi_api.security.v1.CryptoAlgorithm
	1,  // 1: opi_api.security.v1.Proposals.integ_alg:type_name -> opi_api.security.v1.IntegAlgorithm
	3,  // 2: opi_api.security.v1.Proposals.prf:type_name -> opi_api.security.v1.PseudoRandomFunction
	2,  // 3: opi_api.security.v1.Proposals.dhgroups:type_name -> opi_api.security.v1.DiffieHellmanGroups
	5,  // 4: opi_api.security.v1.LocalAuth.auth:type_name -> opi_api.security.v1.AuthType
	13, // 5: opi_api.security.v1.LocalAuth.certs:type_name -> opi_api.security.v1.Certs
	14, // 6: opi_api.security.v1.LocalAuth.pubkeys:type_name -> opi_api.security.v1.PubKeys
	5,  // 7: opi_api.security.v1.RemoteAuth.auth:type_name -> opi_api.security.v1.AuthType
	15, // 8: opi_api.security.v1.RemoteAuth.groups:type_name -> opi_api.security.v1.Groups
	16, // 9: opi_api.security.v1.RemoteAuth.cert_policy:type_name -> opi_api.security.v1.CertPolicy
	13, // 10: opi_api.security.v1.RemoteAuth.certs:type_name -> opi_api.security.v1.Certs
	17, // 11: opi_api.security.v1.RemoteAuth.ca_certs:type_name -> opi_api.security.v1.CaCerts
	14, // 12: opi_api.security.v1.RemoteAuth.pubkeys:type_name -> opi_api.security.v1.PubKeys
	50, // 13: opi_api.security.v1.TrafficSelectors.ts:type_name -> opi_api.security.v1.TrafficSelectors.TrafficSelector
	10, // 14: opi_api.security.v1.Child.ag_proposals:type_name -> opi_api.security.v1.Proposals
	10, // 15: opi_api.security.v1.Child.esp_proposals:type_name -> opi_api.security.v1.Proposals
	20, // 16: opi_api.security.v1.Child.local_ts:type_name -> opi_api.security.v1.TrafficSelectors
	20, // 17: opi_api.security.v1.Child.remote_ts:type_name -> opi_api.security.v1.TrafficSelectors
	21, // 18: opi_api.security.v1.Connection.local_addrs:type_name -> opi_api.security.v1.Addrs
	21, // 19: opi_api.security.v1.Connection.remote_addrs:type_name -> opi_api.security.v1.Addrs
	10, // 20: opi_api.security.v1.Connection.proposals:type_name -> opi_api.security.v1.Proposals
	11, // 21: opi_api.security.v1.Connection.vips:type_name -> opi_api.security.v1.Vips
	12, // 22: opi_api.security.v1.Connection.pools:type_name -> opi_api.security.v1.Pools
	18, // 23: opi_api.security.v1.Connection.local_auth:type_name -> opi_api.security.v1.LocalAuth
	19, // 24: opi_api.security.v1.Connection.remote_auth:type_name -> opi_api.security.v1.RemoteAuth
	22, // 25: opi_api.security.v1.Connection.children:type_name -> opi_api.security.v1.Child
	6,  // 26: opi_api.security.v1.ListIkeSa.ikestate:type_name -> opi_api.security.v1.IkeSaState
	35, // 27: opi_api.security.v1.ListIkeSa.childsas:type_name -> opi_api.security.v1.ListChildSa
	36, // 28: opi_api.security.v1.IPsecListSasResp.ikesas:type_name -> opi_api.security.v1.ListIkeSa
	15, // 29: opi_api.security.v1.ListConnAuth.group:type_name -> opi_api.security.v1.Groups
	16, // 30: opi_api.security.v1.ListConnAuth.cert_policy:type_name -> opi_api.security.v1.CertPolicy
	13, // 31: opi_api.security.v1.ListConnAuth.certs:type_name -> opi_api.security.v1.Certs
	17, // 32: opi_api.security.v1.ListConnAuth.cacerts:type_name -> opi_api.security.v1.CaCerts
	20, // 33: opi_api.security.v1.ListChild.local_ts:type_name -> opi_api.security.v1.TrafficSelectors
	20, // 34: opi_api.security.v1.ListChild.remote_ts:type_name -> opi_api.security.v1.TrafficSelectors
	21, // 35: opi_api.security.v1.ListConnResp.local_addrs:type_name -> opi_api.security.v1.Addrs
	21, // 36: opi_api.security.v1.ListConnResp.remote_addrs:type_name -> opi_api.security.v1.Addrs
	39, // 37: opi_api.security.v1.ListConnResp.local_auth:type_name -> opi_api.security.v1.ListConnAuth
	39, // 38: opi_api.security.v1.ListConnResp.remote_auth:type_name -> opi_api.security.v1.ListConnAuth
	40, // 39: opi_api.security.v1.ListConnResp.children:type_name -> opi_api.security.v1.ListChild
	41, // 40: opi_api.security.v1.IPsecListConnsResp.connection:type_name -> opi_api.security.v1.ListConnResp
	8,  // 41: opi_api.security.v1.ListCert.type:type_name -> opi_api.security.v1.CertificateType
	9,  // 42: opi_api.security.v1.ListCert.flag:type_name -> opi_api.security.v1.X509CertificateFlag
	44, // 43: opi_api.security.v1.IPsecListCertsResp.certs:type_name -> opi_api.security.v1.ListCert
	23, // 44: opi_api.security.v1.IPsecLoadConnReq.connection:type_name -> opi_api.security.v1.Connection
	24, // 45: opi_api.security.v1.IPsec.IPsecVersion:input_type -> opi_api.security.v1.IPsecVersionReq
	26, // 46: opi_api.security.v1.IPsec.IPsecStats:input_type -> opi_api.security.v1.IPsecStatsReq
	28, // 47: opi_api.security.v1.IPsec.IPsecInitiate:input_type -> opi_api.security.v1.IPsecInitiateReq
	30, // 48: opi_api.security.v1.IPsec.IPsecTerminate:input_type -> opi_api.security.v1.IPsecTerminateReq
	32, // 49: opi_api.security.v1.IPsec.IPsecRekey:input_type -> opi_api.security.v1.IPsecRekeyReq
	34, // 50: opi_api.security.v1.IPsec.IPsecListSas:input_type -> opi_api.security.v1.IPsecListSasReq
	38, // 51: opi_api.security.v1.IPsec.IPsecListConns:input_type -> opi_api.security.v1.IPsecListConnsReq
	43, // 52: opi_api.security.v1.IPsec.IPsecListCerts:input_type -> opi_api.security.v1.IPsecListCertsReq
	46, // 53: opi_api.security.v1.IPsec.IPsecLoadConn:input_type -> opi_api.security.v1.IPsecLoadConnReq
	48, // 54: opi_api.security.v1.IPsec.IPsecUnloadConn:input_type -> opi_api.security.v1.IPsecUnloadConnReq
	25, // 55: opi_api.security.v1.IPsec.IPsecVersion:output_type -> opi_api.security.v1.IPsecVersionResp
	27, // 56: opi_api.security.v1.IPsec.IPsecStats:output_type -> opi_api.security.v1.IPsecStatsResp
	29, // 57: opi_api.security.v1.IPsec.IPsecInitiate:output_type -> opi_api.security.v1.IPsecInitiateResp
	31, // 58: opi_api.security.v1.IPsec.IPsecTerminate:output_type -> opi_api.security.v1.IPsecTerminateResp
	33, // 59: opi_api.security.v1.IPsec.IPsecRekey:output_type -> opi_api.security.v1.IPsecRekeyResp
	37, // 60: opi_api.security.v1.IPsec.IPsecListSas:output_type -> opi_api.security.v1.IPsecListSasResp
	42, // 61: opi_api.security.v1.IPsec.IPsecListConns:output_type -> opi_api.security.v1.IPsecListConnsResp
	45, // 62: opi_api.security.v1.IPsec.IPsecListCerts:output_type -> opi_api.security.v1.IPsecListCertsResp
	47, // 63: opi_api.security.v1.IPsec.IPsecLoadConn:output_type -> opi_api.security.v1.IPsecLoadConnResp
	49, // 64: opi_api.security.v1.IPsec.IPsecUnloadConn:output_type -> opi_api.security.v1.IPsecUnloadConnResp
	55, // [55:65] is the sub-list for method output_type
	45, // [45:55] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_ipsec_proto_init() }
func file_ipsec_proto_init() {
	if File_ipsec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ipsec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pools); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Groups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaCerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficSelectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addrs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Child); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecVersionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecStatsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecStatsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecInitiateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecInitiateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecTerminateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecTerminateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecRekeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecRekeyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecListSasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChildSa); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIkeSa); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecListSasResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecListConnsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecListConnsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecListCertsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecListCertsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecLoadConnReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecLoadConnResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecUnloadConnReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPsecUnloadConnResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipsec_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficSelectors_TrafficSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ipsec_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ipsec_proto_goTypes,
		DependencyIndexes: file_ipsec_proto_depIdxs,
		EnumInfos:         file_ipsec_proto_enumTypes,
		MessageInfos:      file_ipsec_proto_msgTypes,
	}.Build()
	File_ipsec_proto = out.File
	file_ipsec_proto_rawDesc = nil
	file_ipsec_proto_goTypes = nil
	file_ipsec_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IPsecClient is the client API for IPsec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IPsecClient interface {
	IPsecVersion(ctx context.Context, in *IPsecVersionReq, opts ...grpc.CallOption) (*IPsecVersionResp, error)
	IPsecStats(ctx context.Context, in *IPsecStatsReq, opts ...grpc.CallOption) (*IPsecStatsResp, error)
	IPsecInitiate(ctx context.Context, in *IPsecInitiateReq, opts ...grpc.CallOption) (*IPsecInitiateResp, error)
	IPsecTerminate(ctx context.Context, in *IPsecTerminateReq, opts ...grpc.CallOption) (*IPsecTerminateResp, error)
	IPsecRekey(ctx context.Context, in *IPsecRekeyReq, opts ...grpc.CallOption) (*IPsecRekeyResp, error)
	IPsecListSas(ctx context.Context, in *IPsecListSasReq, opts ...grpc.CallOption) (*IPsecListSasResp, error)
	IPsecListConns(ctx context.Context, in *IPsecListConnsReq, opts ...grpc.CallOption) (*IPsecListConnsResp, error)
	IPsecListCerts(ctx context.Context, in *IPsecListCertsReq, opts ...grpc.CallOption) (*IPsecListCertsResp, error)
	IPsecLoadConn(ctx context.Context, in *IPsecLoadConnReq, opts ...grpc.CallOption) (*IPsecLoadConnResp, error)
	IPsecUnloadConn(ctx context.Context, in *IPsecUnloadConnReq, opts ...grpc.CallOption) (*IPsecUnloadConnResp, error)
}

type iPsecClient struct {
	cc grpc.ClientConnInterface
}

func NewIPsecClient(cc grpc.ClientConnInterface) IPsecClient {
	return &iPsecClient{cc}
}

func (c *iPsecClient) IPsecVersion(ctx context.Context, in *IPsecVersionReq, opts ...grpc.CallOption) (*IPsecVersionResp, error) {
	out := new(IPsecVersionResp)
	err := c.cc.Invoke(ctx, "/opi_api.security.v1.IPsec/IPsecVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecClient) IPsecStats(ctx context.Context, in *IPsecStatsReq, opts ...grpc.CallOption) (*IPsecStatsResp, error) {
	out := new(IPsecStatsResp)
	err := c.cc.Invoke(ctx, "/opi_api.security.v1.IPsec/IPsecStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecClient) IPsecInitiate(ctx context.Context, in *IPsecInitiateReq, opts ...grpc.CallOption) (*IPsecInitiateResp, error) {
	out := new(IPsecInitiateResp)
	err := c.cc.Invoke(ctx, "/opi_api.security.v1.IPsec/IPsecInitiate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecClient) IPsecTerminate(ctx context.Context, in *IPsecTerminateReq, opts ...grpc.CallOption) (*IPsecTerminateResp, error) {
	out := new(IPsecTerminateResp)
	err := c.cc.Invoke(ctx, "/opi_api.security.v1.IPsec/IPsecTerminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecClient) IPsecRekey(ctx context.Context, in *IPsecRekeyReq, opts ...grpc.CallOption) (*IPsecRekeyResp, error) {
	out := new(IPsecRekeyResp)
	err := c.cc.Invoke(ctx, "/opi_api.security.v1.IPsec/IPsecRekey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecClient) IPsecListSas(ctx context.Context, in *IPsecListSasReq, opts ...grpc.CallOption) (*IPsecListSasResp, error) {
	out := new(IPsecListSasResp)
	err := c.cc.Invoke(ctx, "/opi_api.security.v1.IPsec/IPsecListSas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecClient) IPsecListConns(ctx context.Context, in *IPsecListConnsReq, opts ...grpc.CallOption) (*IPsecListConnsResp, error) {
	out := new(IPsecListConnsResp)
	err := c.cc.Invoke(ctx, "/opi_api.security.v1.IPsec/IPsecListConns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecClient) IPsecListCerts(ctx context.Context, in *IPsecListCertsReq, opts ...grpc.CallOption) (*IPsecListCertsResp, error) {
	out := new(IPsecListCertsResp)
	err := c.cc.Invoke(ctx, "/opi_api.security.v1.IPsec/IPsecListCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecClient) IPsecLoadConn(ctx context.Context, in *IPsecLoadConnReq, opts ...grpc.CallOption) (*IPsecLoadConnResp, error) {
	out := new(IPsecLoadConnResp)
	err := c.cc.Invoke(ctx, "/opi_api.security.v1.IPsec/IPsecLoadConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPsecClient) IPsecUnloadConn(ctx context.Context, in *IPsecUnloadConnReq, opts ...grpc.CallOption) (*IPsecUnloadConnResp, error) {
	out := new(IPsecUnloadConnResp)
	err := c.cc.Invoke(ctx, "/opi_api.security.v1.IPsec/IPsecUnloadConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPsecServer is the server API for IPsec service.
type IPsecServer interface {
	IPsecVersion(context.Context, *IPsecVersionReq) (*IPsecVersionResp, error)
	IPsecStats(context.Context, *IPsecStatsReq) (*IPsecStatsResp, error)
	IPsecInitiate(context.Context, *IPsecInitiateReq) (*IPsecInitiateResp, error)
	IPsecTerminate(context.Context, *IPsecTerminateReq) (*IPsecTerminateResp, error)
	IPsecRekey(context.Context, *IPsecRekeyReq) (*IPsecRekeyResp, error)
	IPsecListSas(context.Context, *IPsecListSasReq) (*IPsecListSasResp, error)
	IPsecListConns(context.Context, *IPsecListConnsReq) (*IPsecListConnsResp, error)
	IPsecListCerts(context.Context, *IPsecListCertsReq) (*IPsecListCertsResp, error)
	IPsecLoadConn(context.Context, *IPsecLoadConnReq) (*IPsecLoadConnResp, error)
	IPsecUnloadConn(context.Context, *IPsecUnloadConnReq) (*IPsecUnloadConnResp, error)
}

// UnimplementedIPsecServer can be embedded to have forward compatible implementations.
type UnimplementedIPsecServer struct {
}

func (*UnimplementedIPsecServer) IPsecVersion(context.Context, *IPsecVersionReq) (*IPsecVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecVersion not implemented")
}
func (*UnimplementedIPsecServer) IPsecStats(context.Context, *IPsecStatsReq) (*IPsecStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecStats not implemented")
}
func (*UnimplementedIPsecServer) IPsecInitiate(context.Context, *IPsecInitiateReq) (*IPsecInitiateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecInitiate not implemented")
}
func (*UnimplementedIPsecServer) IPsecTerminate(context.Context, *IPsecTerminateReq) (*IPsecTerminateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecTerminate not implemented")
}
func (*UnimplementedIPsecServer) IPsecRekey(context.Context, *IPsecRekeyReq) (*IPsecRekeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecRekey not implemented")
}
func (*UnimplementedIPsecServer) IPsecListSas(context.Context, *IPsecListSasReq) (*IPsecListSasResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecListSas not implemented")
}
func (*UnimplementedIPsecServer) IPsecListConns(context.Context, *IPsecListConnsReq) (*IPsecListConnsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecListConns not implemented")
}
func (*UnimplementedIPsecServer) IPsecListCerts(context.Context, *IPsecListCertsReq) (*IPsecListCertsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecListCerts not implemented")
}
func (*UnimplementedIPsecServer) IPsecLoadConn(context.Context, *IPsecLoadConnReq) (*IPsecLoadConnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecLoadConn not implemented")
}
func (*UnimplementedIPsecServer) IPsecUnloadConn(context.Context, *IPsecUnloadConnReq) (*IPsecUnloadConnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPsecUnloadConn not implemented")
}

func RegisterIPsecServer(s *grpc.Server, srv IPsecServer) {
	s.RegisterService(&_IPsec_serviceDesc, srv)
}

func _IPsec_IPsecVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServer).IPsecVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.security.v1.IPsec/IPsecVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServer).IPsecVersion(ctx, req.(*IPsecVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsec_IPsecStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServer).IPsecStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.security.v1.IPsec/IPsecStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServer).IPsecStats(ctx, req.(*IPsecStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsec_IPsecInitiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecInitiateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServer).IPsecInitiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.security.v1.IPsec/IPsecInitiate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServer).IPsecInitiate(ctx, req.(*IPsecInitiateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsec_IPsecTerminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecTerminateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServer).IPsecTerminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.security.v1.IPsec/IPsecTerminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServer).IPsecTerminate(ctx, req.(*IPsecTerminateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsec_IPsecRekey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecRekeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServer).IPsecRekey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.security.v1.IPsec/IPsecRekey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServer).IPsecRekey(ctx, req.(*IPsecRekeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsec_IPsecListSas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecListSasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServer).IPsecListSas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.security.v1.IPsec/IPsecListSas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServer).IPsecListSas(ctx, req.(*IPsecListSasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsec_IPsecListConns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecListConnsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServer).IPsecListConns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.security.v1.IPsec/IPsecListConns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServer).IPsecListConns(ctx, req.(*IPsecListConnsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsec_IPsecListCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecListCertsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServer).IPsecListCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.security.v1.IPsec/IPsecListCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServer).IPsecListCerts(ctx, req.(*IPsecListCertsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsec_IPsecLoadConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecLoadConnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServer).IPsecLoadConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.security.v1.IPsec/IPsecLoadConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServer).IPsecLoadConn(ctx, req.(*IPsecLoadConnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPsec_IPsecUnloadConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPsecUnloadConnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPsecServer).IPsecUnloadConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.security.v1.IPsec/IPsecUnloadConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPsecServer).IPsecUnloadConn(ctx, req.(*IPsecUnloadConnReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPsec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.security.v1.IPsec",
	HandlerType: (*IPsecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IPsecVersion",
			Handler:    _IPsec_IPsecVersion_Handler,
		},
		{
			MethodName: "IPsecStats",
			Handler:    _IPsec_IPsecStats_Handler,
		},
		{
			MethodName: "IPsecInitiate",
			Handler:    _IPsec_IPsecInitiate_Handler,
		},
		{
			MethodName: "IPsecTerminate",
			Handler:    _IPsec_IPsecTerminate_Handler,
		},
		{
			MethodName: "IPsecRekey",
			Handler:    _IPsec_IPsecRekey_Handler,
		},
		{
			MethodName: "IPsecListSas",
			Handler:    _IPsec_IPsecListSas_Handler,
		},
		{
			MethodName: "IPsecListConns",
			Handler:    _IPsec_IPsecListConns_Handler,
		},
		{
			MethodName: "IPsecListCerts",
			Handler:    _IPsec_IPsecListCerts_Handler,
		},
		{
			MethodName: "IPsecLoadConn",
			Handler:    _IPsec_IPsecLoadConn_Handler,
		},
		{
			MethodName: "IPsecUnloadConn",
			Handler:    _IPsec_IPsecUnloadConn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipsec.proto",
}
