// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_inventory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_inventory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_inventory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_inventory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_inventory_2eproto;
namespace opi_api {
namespace inventory {
namespace v1 {
class BIOSInfo;
struct BIOSInfoDefaultTypeInternal;
extern BIOSInfoDefaultTypeInternal _BIOSInfo_default_instance_;
class BaseboardInfo;
struct BaseboardInfoDefaultTypeInternal;
extern BaseboardInfoDefaultTypeInternal _BaseboardInfo_default_instance_;
class CPUInfo;
struct CPUInfoDefaultTypeInternal;
extern CPUInfoDefaultTypeInternal _CPUInfo_default_instance_;
class ChassisInfo;
struct ChassisInfoDefaultTypeInternal;
extern ChassisInfoDefaultTypeInternal _ChassisInfo_default_instance_;
class InventoryGetRequest;
struct InventoryGetRequestDefaultTypeInternal;
extern InventoryGetRequestDefaultTypeInternal _InventoryGetRequest_default_instance_;
class InventoryGetResponse;
struct InventoryGetResponseDefaultTypeInternal;
extern InventoryGetResponseDefaultTypeInternal _InventoryGetResponse_default_instance_;
class MemoryInfo;
struct MemoryInfoDefaultTypeInternal;
extern MemoryInfoDefaultTypeInternal _MemoryInfo_default_instance_;
class PCIeDeviceInfo;
struct PCIeDeviceInfoDefaultTypeInternal;
extern PCIeDeviceInfoDefaultTypeInternal _PCIeDeviceInfo_default_instance_;
class SystemInfo;
struct SystemInfoDefaultTypeInternal;
extern SystemInfoDefaultTypeInternal _SystemInfo_default_instance_;
}  // namespace v1
}  // namespace inventory
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::inventory::v1::BIOSInfo* Arena::CreateMaybeMessage<::opi_api::inventory::v1::BIOSInfo>(Arena*);
template<> ::opi_api::inventory::v1::BaseboardInfo* Arena::CreateMaybeMessage<::opi_api::inventory::v1::BaseboardInfo>(Arena*);
template<> ::opi_api::inventory::v1::CPUInfo* Arena::CreateMaybeMessage<::opi_api::inventory::v1::CPUInfo>(Arena*);
template<> ::opi_api::inventory::v1::ChassisInfo* Arena::CreateMaybeMessage<::opi_api::inventory::v1::ChassisInfo>(Arena*);
template<> ::opi_api::inventory::v1::InventoryGetRequest* Arena::CreateMaybeMessage<::opi_api::inventory::v1::InventoryGetRequest>(Arena*);
template<> ::opi_api::inventory::v1::InventoryGetResponse* Arena::CreateMaybeMessage<::opi_api::inventory::v1::InventoryGetResponse>(Arena*);
template<> ::opi_api::inventory::v1::MemoryInfo* Arena::CreateMaybeMessage<::opi_api::inventory::v1::MemoryInfo>(Arena*);
template<> ::opi_api::inventory::v1::PCIeDeviceInfo* Arena::CreateMaybeMessage<::opi_api::inventory::v1::PCIeDeviceInfo>(Arena*);
template<> ::opi_api::inventory::v1::SystemInfo* Arena::CreateMaybeMessage<::opi_api::inventory::v1::SystemInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace inventory {
namespace v1 {

// ===================================================================

class BIOSInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.inventory.v1.BIOSInfo) */ {
 public:
  inline BIOSInfo() : BIOSInfo(nullptr) {}
  ~BIOSInfo() override;
  explicit constexpr BIOSInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BIOSInfo(const BIOSInfo& from);
  BIOSInfo(BIOSInfo&& from) noexcept
    : BIOSInfo() {
    *this = ::std::move(from);
  }

  inline BIOSInfo& operator=(const BIOSInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BIOSInfo& operator=(BIOSInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BIOSInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BIOSInfo* internal_default_instance() {
    return reinterpret_cast<const BIOSInfo*>(
               &_BIOSInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BIOSInfo& a, BIOSInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BIOSInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BIOSInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BIOSInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BIOSInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BIOSInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BIOSInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BIOSInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.inventory.v1.BIOSInfo";
  }
  protected:
  explicit BIOSInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorFieldNumber = 1,
    kVersionFieldNumber = 2,
    kDateFieldNumber = 3,
  };
  // string vendor = 1;
  void clear_vendor();
  const std::string& vendor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vendor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vendor();
  PROTOBUF_NODISCARD std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string date = 3;
  void clear_date();
  const std::string& date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date();
  PROTOBUF_NODISCARD std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.inventory.v1.BIOSInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inventory_2eproto;
};
// -------------------------------------------------------------------

class SystemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.inventory.v1.SystemInfo) */ {
 public:
  inline SystemInfo() : SystemInfo(nullptr) {}
  ~SystemInfo() override;
  explicit constexpr SystemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfo(const SystemInfo& from);
  SystemInfo(SystemInfo&& from) noexcept
    : SystemInfo() {
    *this = ::std::move(from);
  }

  inline SystemInfo& operator=(const SystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfo& operator=(SystemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfo* internal_default_instance() {
    return reinterpret_cast<const SystemInfo*>(
               &_SystemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SystemInfo& a, SystemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SystemInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.inventory.v1.SystemInfo";
  }
  protected:
  explicit SystemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyFieldNumber = 1,
    kNameFieldNumber = 2,
    kVendorFieldNumber = 3,
    kSerialNumberFieldNumber = 4,
    kUuidFieldNumber = 5,
    kSkuFieldNumber = 6,
    kVersionFieldNumber = 7,
  };
  // string family = 1;
  void clear_family();
  const std::string& family() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_family(ArgT0&& arg0, ArgT... args);
  std::string* mutable_family();
  PROTOBUF_NODISCARD std::string* release_family();
  void set_allocated_family(std::string* family);
  private:
  const std::string& _internal_family() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_family(const std::string& value);
  std::string* _internal_mutable_family();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string vendor = 3;
  void clear_vendor();
  const std::string& vendor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vendor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vendor();
  PROTOBUF_NODISCARD std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // string serial_number = 4;
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // string uuid = 5;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string sku = 6;
  void clear_sku();
  const std::string& sku() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sku(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sku();
  PROTOBUF_NODISCARD std::string* release_sku();
  void set_allocated_sku(std::string* sku);
  private:
  const std::string& _internal_sku() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sku(const std::string& value);
  std::string* _internal_mutable_sku();
  public:

  // string version = 7;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.inventory.v1.SystemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sku_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inventory_2eproto;
};
// -------------------------------------------------------------------

class ChassisInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.inventory.v1.ChassisInfo) */ {
 public:
  inline ChassisInfo() : ChassisInfo(nullptr) {}
  ~ChassisInfo() override;
  explicit constexpr ChassisInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChassisInfo(const ChassisInfo& from);
  ChassisInfo(ChassisInfo&& from) noexcept
    : ChassisInfo() {
    *this = ::std::move(from);
  }

  inline ChassisInfo& operator=(const ChassisInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChassisInfo& operator=(ChassisInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChassisInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChassisInfo* internal_default_instance() {
    return reinterpret_cast<const ChassisInfo*>(
               &_ChassisInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChassisInfo& a, ChassisInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChassisInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChassisInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChassisInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChassisInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChassisInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChassisInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChassisInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.inventory.v1.ChassisInfo";
  }
  protected:
  explicit ChassisInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetTagFieldNumber = 1,
    kSerialNumberFieldNumber = 2,
    kTypeFieldNumber = 3,
    kTypeDescriptionFieldNumber = 4,
    kVendorFieldNumber = 5,
    kVersionFieldNumber = 6,
  };
  // string asset_tag = 1;
  void clear_asset_tag();
  const std::string& asset_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset_tag();
  PROTOBUF_NODISCARD std::string* release_asset_tag();
  void set_allocated_asset_tag(std::string* asset_tag);
  private:
  const std::string& _internal_asset_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_tag(const std::string& value);
  std::string* _internal_mutable_asset_tag();
  public:

  // string serial_number = 2;
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string type_description = 4;
  void clear_type_description();
  const std::string& type_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_description();
  PROTOBUF_NODISCARD std::string* release_type_description();
  void set_allocated_type_description(std::string* type_description);
  private:
  const std::string& _internal_type_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_description(const std::string& value);
  std::string* _internal_mutable_type_description();
  public:

  // string vendor = 5;
  void clear_vendor();
  const std::string& vendor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vendor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vendor();
  PROTOBUF_NODISCARD std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // string version = 6;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.inventory.v1.ChassisInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inventory_2eproto;
};
// -------------------------------------------------------------------

class BaseboardInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.inventory.v1.BaseboardInfo) */ {
 public:
  inline BaseboardInfo() : BaseboardInfo(nullptr) {}
  ~BaseboardInfo() override;
  explicit constexpr BaseboardInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseboardInfo(const BaseboardInfo& from);
  BaseboardInfo(BaseboardInfo&& from) noexcept
    : BaseboardInfo() {
    *this = ::std::move(from);
  }

  inline BaseboardInfo& operator=(const BaseboardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseboardInfo& operator=(BaseboardInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseboardInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseboardInfo* internal_default_instance() {
    return reinterpret_cast<const BaseboardInfo*>(
               &_BaseboardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BaseboardInfo& a, BaseboardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseboardInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseboardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseboardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseboardInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseboardInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BaseboardInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseboardInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.inventory.v1.BaseboardInfo";
  }
  protected:
  explicit BaseboardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetTagFieldNumber = 1,
    kSerialNumberFieldNumber = 2,
    kVendorFieldNumber = 3,
    kVersionFieldNumber = 4,
    kProductFieldNumber = 5,
  };
  // string asset_tag = 1;
  void clear_asset_tag();
  const std::string& asset_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset_tag();
  PROTOBUF_NODISCARD std::string* release_asset_tag();
  void set_allocated_asset_tag(std::string* asset_tag);
  private:
  const std::string& _internal_asset_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset_tag(const std::string& value);
  std::string* _internal_mutable_asset_tag();
  public:

  // string serial_number = 2;
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // string vendor = 3;
  void clear_vendor();
  const std::string& vendor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vendor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vendor();
  PROTOBUF_NODISCARD std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // string version = 4;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string product = 5;
  void clear_product();
  const std::string& product() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product();
  PROTOBUF_NODISCARD std::string* release_product();
  void set_allocated_product(std::string* product);
  private:
  const std::string& _internal_product() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product(const std::string& value);
  std::string* _internal_mutable_product();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.inventory.v1.BaseboardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inventory_2eproto;
};
// -------------------------------------------------------------------

class CPUInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.inventory.v1.CPUInfo) */ {
 public:
  inline CPUInfo() : CPUInfo(nullptr) {}
  ~CPUInfo() override;
  explicit constexpr CPUInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPUInfo(const CPUInfo& from);
  CPUInfo(CPUInfo&& from) noexcept
    : CPUInfo() {
    *this = ::std::move(from);
  }

  inline CPUInfo& operator=(const CPUInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPUInfo& operator=(CPUInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPUInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPUInfo* internal_default_instance() {
    return reinterpret_cast<const CPUInfo*>(
               &_CPUInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CPUInfo& a, CPUInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CPUInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPUInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPUInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPUInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPUInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPUInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPUInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.inventory.v1.CPUInfo";
  }
  protected:
  explicit CPUInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalCoresFieldNumber = 1,
    kTotalThreadsFieldNumber = 2,
  };
  // int32 total_cores = 1;
  void clear_total_cores();
  int32_t total_cores() const;
  void set_total_cores(int32_t value);
  private:
  int32_t _internal_total_cores() const;
  void _internal_set_total_cores(int32_t value);
  public:

  // int32 total_threads = 2;
  void clear_total_threads();
  int32_t total_threads() const;
  void set_total_threads(int32_t value);
  private:
  int32_t _internal_total_threads() const;
  void _internal_set_total_threads(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.inventory.v1.CPUInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t total_cores_;
  int32_t total_threads_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inventory_2eproto;
};
// -------------------------------------------------------------------

class MemoryInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.inventory.v1.MemoryInfo) */ {
 public:
  inline MemoryInfo() : MemoryInfo(nullptr) {}
  ~MemoryInfo() override;
  explicit constexpr MemoryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryInfo(const MemoryInfo& from);
  MemoryInfo(MemoryInfo&& from) noexcept
    : MemoryInfo() {
    *this = ::std::move(from);
  }

  inline MemoryInfo& operator=(const MemoryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryInfo& operator=(MemoryInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryInfo* internal_default_instance() {
    return reinterpret_cast<const MemoryInfo*>(
               &_MemoryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MemoryInfo& a, MemoryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.inventory.v1.MemoryInfo";
  }
  protected:
  explicit MemoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalPhysicalBytesFieldNumber = 1,
    kTotalUsableBytesFieldNumber = 2,
  };
  // int64 total_physical_bytes = 1;
  void clear_total_physical_bytes();
  int64_t total_physical_bytes() const;
  void set_total_physical_bytes(int64_t value);
  private:
  int64_t _internal_total_physical_bytes() const;
  void _internal_set_total_physical_bytes(int64_t value);
  public:

  // int64 total_usable_bytes = 2;
  void clear_total_usable_bytes();
  int64_t total_usable_bytes() const;
  void set_total_usable_bytes(int64_t value);
  private:
  int64_t _internal_total_usable_bytes() const;
  void _internal_set_total_usable_bytes(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.inventory.v1.MemoryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t total_physical_bytes_;
  int64_t total_usable_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inventory_2eproto;
};
// -------------------------------------------------------------------

class PCIeDeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.inventory.v1.PCIeDeviceInfo) */ {
 public:
  inline PCIeDeviceInfo() : PCIeDeviceInfo(nullptr) {}
  ~PCIeDeviceInfo() override;
  explicit constexpr PCIeDeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PCIeDeviceInfo(const PCIeDeviceInfo& from);
  PCIeDeviceInfo(PCIeDeviceInfo&& from) noexcept
    : PCIeDeviceInfo() {
    *this = ::std::move(from);
  }

  inline PCIeDeviceInfo& operator=(const PCIeDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PCIeDeviceInfo& operator=(PCIeDeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PCIeDeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PCIeDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const PCIeDeviceInfo*>(
               &_PCIeDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PCIeDeviceInfo& a, PCIeDeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PCIeDeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PCIeDeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PCIeDeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PCIeDeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PCIeDeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PCIeDeviceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PCIeDeviceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.inventory.v1.PCIeDeviceInfo";
  }
  protected:
  explicit PCIeDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 1,
    kAddressFieldNumber = 2,
    kVendorFieldNumber = 3,
    kProductFieldNumber = 4,
    kRevisionFieldNumber = 5,
    kSubsystemFieldNumber = 6,
    kClassFieldNumber = 7,
    kSubclassFieldNumber = 8,
  };
  // string driver = 1;
  void clear_driver();
  const std::string& driver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_driver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_driver();
  PROTOBUF_NODISCARD std::string* release_driver();
  void set_allocated_driver(std::string* driver);
  private:
  const std::string& _internal_driver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver(const std::string& value);
  std::string* _internal_mutable_driver();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string vendor = 3;
  void clear_vendor();
  const std::string& vendor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vendor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vendor();
  PROTOBUF_NODISCARD std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // string product = 4;
  void clear_product();
  const std::string& product() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product();
  PROTOBUF_NODISCARD std::string* release_product();
  void set_allocated_product(std::string* product);
  private:
  const std::string& _internal_product() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product(const std::string& value);
  std::string* _internal_mutable_product();
  public:

  // string revision = 5;
  void clear_revision();
  const std::string& revision() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_revision(ArgT0&& arg0, ArgT... args);
  std::string* mutable_revision();
  PROTOBUF_NODISCARD std::string* release_revision();
  void set_allocated_revision(std::string* revision);
  private:
  const std::string& _internal_revision() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_revision(const std::string& value);
  std::string* _internal_mutable_revision();
  public:

  // string subsystem = 6;
  void clear_subsystem();
  const std::string& subsystem() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subsystem(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subsystem();
  PROTOBUF_NODISCARD std::string* release_subsystem();
  void set_allocated_subsystem(std::string* subsystem);
  private:
  const std::string& _internal_subsystem() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subsystem(const std::string& value);
  std::string* _internal_mutable_subsystem();
  public:

  // string class = 7;
  void clear_class_();
  const std::string& class_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_();
  PROTOBUF_NODISCARD std::string* release_class_();
  void set_allocated_class_(std::string* class_);
  private:
  const std::string& _internal_class_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_(const std::string& value);
  std::string* _internal_mutable_class_();
  public:

  // string subclass = 8;
  void clear_subclass();
  const std::string& subclass() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subclass(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subclass();
  PROTOBUF_NODISCARD std::string* release_subclass();
  void set_allocated_subclass(std::string* subclass);
  private:
  const std::string& _internal_subclass() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subclass(const std::string& value);
  std::string* _internal_mutable_subclass();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.inventory.v1.PCIeDeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr revision_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subsystem_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subclass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inventory_2eproto;
};
// -------------------------------------------------------------------

class InventoryGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.inventory.v1.InventoryGetRequest) */ {
 public:
  inline InventoryGetRequest() : InventoryGetRequest(nullptr) {}
  explicit constexpr InventoryGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InventoryGetRequest(const InventoryGetRequest& from);
  InventoryGetRequest(InventoryGetRequest&& from) noexcept
    : InventoryGetRequest() {
    *this = ::std::move(from);
  }

  inline InventoryGetRequest& operator=(const InventoryGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InventoryGetRequest& operator=(InventoryGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InventoryGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InventoryGetRequest* internal_default_instance() {
    return reinterpret_cast<const InventoryGetRequest*>(
               &_InventoryGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InventoryGetRequest& a, InventoryGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InventoryGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InventoryGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InventoryGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InventoryGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InventoryGetRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InventoryGetRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.inventory.v1.InventoryGetRequest";
  }
  protected:
  explicit InventoryGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.inventory.v1.InventoryGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inventory_2eproto;
};
// -------------------------------------------------------------------

class InventoryGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.inventory.v1.InventoryGetResponse) */ {
 public:
  inline InventoryGetResponse() : InventoryGetResponse(nullptr) {}
  ~InventoryGetResponse() override;
  explicit constexpr InventoryGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InventoryGetResponse(const InventoryGetResponse& from);
  InventoryGetResponse(InventoryGetResponse&& from) noexcept
    : InventoryGetResponse() {
    *this = ::std::move(from);
  }

  inline InventoryGetResponse& operator=(const InventoryGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InventoryGetResponse& operator=(InventoryGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InventoryGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InventoryGetResponse* internal_default_instance() {
    return reinterpret_cast<const InventoryGetResponse*>(
               &_InventoryGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InventoryGetResponse& a, InventoryGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InventoryGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InventoryGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InventoryGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InventoryGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InventoryGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InventoryGetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InventoryGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.inventory.v1.InventoryGetResponse";
  }
  protected:
  explicit InventoryGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPciFieldNumber = 7,
    kBiosFieldNumber = 1,
    kSystemFieldNumber = 2,
    kBaseboardFieldNumber = 3,
    kChassisFieldNumber = 4,
    kProcessorFieldNumber = 5,
    kMemoryFieldNumber = 6,
  };
  // repeated .opi_api.inventory.v1.PCIeDeviceInfo pci = 7;
  int pci_size() const;
  private:
  int _internal_pci_size() const;
  public:
  void clear_pci();
  ::opi_api::inventory::v1::PCIeDeviceInfo* mutable_pci(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::inventory::v1::PCIeDeviceInfo >*
      mutable_pci();
  private:
  const ::opi_api::inventory::v1::PCIeDeviceInfo& _internal_pci(int index) const;
  ::opi_api::inventory::v1::PCIeDeviceInfo* _internal_add_pci();
  public:
  const ::opi_api::inventory::v1::PCIeDeviceInfo& pci(int index) const;
  ::opi_api::inventory::v1::PCIeDeviceInfo* add_pci();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::inventory::v1::PCIeDeviceInfo >&
      pci() const;

  // .opi_api.inventory.v1.BIOSInfo bios = 1;
  bool has_bios() const;
  private:
  bool _internal_has_bios() const;
  public:
  void clear_bios();
  const ::opi_api::inventory::v1::BIOSInfo& bios() const;
  PROTOBUF_NODISCARD ::opi_api::inventory::v1::BIOSInfo* release_bios();
  ::opi_api::inventory::v1::BIOSInfo* mutable_bios();
  void set_allocated_bios(::opi_api::inventory::v1::BIOSInfo* bios);
  private:
  const ::opi_api::inventory::v1::BIOSInfo& _internal_bios() const;
  ::opi_api::inventory::v1::BIOSInfo* _internal_mutable_bios();
  public:
  void unsafe_arena_set_allocated_bios(
      ::opi_api::inventory::v1::BIOSInfo* bios);
  ::opi_api::inventory::v1::BIOSInfo* unsafe_arena_release_bios();

  // .opi_api.inventory.v1.SystemInfo system = 2;
  bool has_system() const;
  private:
  bool _internal_has_system() const;
  public:
  void clear_system();
  const ::opi_api::inventory::v1::SystemInfo& system() const;
  PROTOBUF_NODISCARD ::opi_api::inventory::v1::SystemInfo* release_system();
  ::opi_api::inventory::v1::SystemInfo* mutable_system();
  void set_allocated_system(::opi_api::inventory::v1::SystemInfo* system);
  private:
  const ::opi_api::inventory::v1::SystemInfo& _internal_system() const;
  ::opi_api::inventory::v1::SystemInfo* _internal_mutable_system();
  public:
  void unsafe_arena_set_allocated_system(
      ::opi_api::inventory::v1::SystemInfo* system);
  ::opi_api::inventory::v1::SystemInfo* unsafe_arena_release_system();

  // .opi_api.inventory.v1.BaseboardInfo baseboard = 3;
  bool has_baseboard() const;
  private:
  bool _internal_has_baseboard() const;
  public:
  void clear_baseboard();
  const ::opi_api::inventory::v1::BaseboardInfo& baseboard() const;
  PROTOBUF_NODISCARD ::opi_api::inventory::v1::BaseboardInfo* release_baseboard();
  ::opi_api::inventory::v1::BaseboardInfo* mutable_baseboard();
  void set_allocated_baseboard(::opi_api::inventory::v1::BaseboardInfo* baseboard);
  private:
  const ::opi_api::inventory::v1::BaseboardInfo& _internal_baseboard() const;
  ::opi_api::inventory::v1::BaseboardInfo* _internal_mutable_baseboard();
  public:
  void unsafe_arena_set_allocated_baseboard(
      ::opi_api::inventory::v1::BaseboardInfo* baseboard);
  ::opi_api::inventory::v1::BaseboardInfo* unsafe_arena_release_baseboard();

  // .opi_api.inventory.v1.ChassisInfo chassis = 4;
  bool has_chassis() const;
  private:
  bool _internal_has_chassis() const;
  public:
  void clear_chassis();
  const ::opi_api::inventory::v1::ChassisInfo& chassis() const;
  PROTOBUF_NODISCARD ::opi_api::inventory::v1::ChassisInfo* release_chassis();
  ::opi_api::inventory::v1::ChassisInfo* mutable_chassis();
  void set_allocated_chassis(::opi_api::inventory::v1::ChassisInfo* chassis);
  private:
  const ::opi_api::inventory::v1::ChassisInfo& _internal_chassis() const;
  ::opi_api::inventory::v1::ChassisInfo* _internal_mutable_chassis();
  public:
  void unsafe_arena_set_allocated_chassis(
      ::opi_api::inventory::v1::ChassisInfo* chassis);
  ::opi_api::inventory::v1::ChassisInfo* unsafe_arena_release_chassis();

  // .opi_api.inventory.v1.CPUInfo processor = 5;
  bool has_processor() const;
  private:
  bool _internal_has_processor() const;
  public:
  void clear_processor();
  const ::opi_api::inventory::v1::CPUInfo& processor() const;
  PROTOBUF_NODISCARD ::opi_api::inventory::v1::CPUInfo* release_processor();
  ::opi_api::inventory::v1::CPUInfo* mutable_processor();
  void set_allocated_processor(::opi_api::inventory::v1::CPUInfo* processor);
  private:
  const ::opi_api::inventory::v1::CPUInfo& _internal_processor() const;
  ::opi_api::inventory::v1::CPUInfo* _internal_mutable_processor();
  public:
  void unsafe_arena_set_allocated_processor(
      ::opi_api::inventory::v1::CPUInfo* processor);
  ::opi_api::inventory::v1::CPUInfo* unsafe_arena_release_processor();

  // .opi_api.inventory.v1.MemoryInfo memory = 6;
  bool has_memory() const;
  private:
  bool _internal_has_memory() const;
  public:
  void clear_memory();
  const ::opi_api::inventory::v1::MemoryInfo& memory() const;
  PROTOBUF_NODISCARD ::opi_api::inventory::v1::MemoryInfo* release_memory();
  ::opi_api::inventory::v1::MemoryInfo* mutable_memory();
  void set_allocated_memory(::opi_api::inventory::v1::MemoryInfo* memory);
  private:
  const ::opi_api::inventory::v1::MemoryInfo& _internal_memory() const;
  ::opi_api::inventory::v1::MemoryInfo* _internal_mutable_memory();
  public:
  void unsafe_arena_set_allocated_memory(
      ::opi_api::inventory::v1::MemoryInfo* memory);
  ::opi_api::inventory::v1::MemoryInfo* unsafe_arena_release_memory();

  // @@protoc_insertion_point(class_scope:opi_api.inventory.v1.InventoryGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::inventory::v1::PCIeDeviceInfo > pci_;
  ::opi_api::inventory::v1::BIOSInfo* bios_;
  ::opi_api::inventory::v1::SystemInfo* system_;
  ::opi_api::inventory::v1::BaseboardInfo* baseboard_;
  ::opi_api::inventory::v1::ChassisInfo* chassis_;
  ::opi_api::inventory::v1::CPUInfo* processor_;
  ::opi_api::inventory::v1::MemoryInfo* memory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inventory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BIOSInfo

// string vendor = 1;
inline void BIOSInfo::clear_vendor() {
  vendor_.ClearToEmpty();
}
inline const std::string& BIOSInfo::vendor() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.BIOSInfo.vendor)
  return _internal_vendor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BIOSInfo::set_vendor(ArgT0&& arg0, ArgT... args) {
 
 vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.BIOSInfo.vendor)
}
inline std::string* BIOSInfo::mutable_vendor() {
  std::string* _s = _internal_mutable_vendor();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.BIOSInfo.vendor)
  return _s;
}
inline const std::string& BIOSInfo::_internal_vendor() const {
  return vendor_.Get();
}
inline void BIOSInfo::_internal_set_vendor(const std::string& value) {
  
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BIOSInfo::_internal_mutable_vendor() {
  
  return vendor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BIOSInfo::release_vendor() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.BIOSInfo.vendor)
  return vendor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BIOSInfo::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    
  } else {
    
  }
  vendor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vendor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vendor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.BIOSInfo.vendor)
}

// string version = 2;
inline void BIOSInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& BIOSInfo::version() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.BIOSInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BIOSInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.BIOSInfo.version)
}
inline std::string* BIOSInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.BIOSInfo.version)
  return _s;
}
inline const std::string& BIOSInfo::_internal_version() const {
  return version_.Get();
}
inline void BIOSInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BIOSInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BIOSInfo::release_version() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.BIOSInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BIOSInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.BIOSInfo.version)
}

// string date = 3;
inline void BIOSInfo::clear_date() {
  date_.ClearToEmpty();
}
inline const std::string& BIOSInfo::date() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.BIOSInfo.date)
  return _internal_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BIOSInfo::set_date(ArgT0&& arg0, ArgT... args) {
 
 date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.BIOSInfo.date)
}
inline std::string* BIOSInfo::mutable_date() {
  std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.BIOSInfo.date)
  return _s;
}
inline const std::string& BIOSInfo::_internal_date() const {
  return date_.Get();
}
inline void BIOSInfo::_internal_set_date(const std::string& value) {
  
  date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BIOSInfo::_internal_mutable_date() {
  
  return date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BIOSInfo::release_date() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.BIOSInfo.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BIOSInfo::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (date_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.BIOSInfo.date)
}

// -------------------------------------------------------------------

// SystemInfo

// string family = 1;
inline void SystemInfo::clear_family() {
  family_.ClearToEmpty();
}
inline const std::string& SystemInfo::family() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.SystemInfo.family)
  return _internal_family();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_family(ArgT0&& arg0, ArgT... args) {
 
 family_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.SystemInfo.family)
}
inline std::string* SystemInfo::mutable_family() {
  std::string* _s = _internal_mutable_family();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.SystemInfo.family)
  return _s;
}
inline const std::string& SystemInfo::_internal_family() const {
  return family_.Get();
}
inline void SystemInfo::_internal_set_family(const std::string& value) {
  
  family_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_family() {
  
  return family_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_family() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.SystemInfo.family)
  return family_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_family(std::string* family) {
  if (family != nullptr) {
    
  } else {
    
  }
  family_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), family,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (family_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    family_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.SystemInfo.family)
}

// string name = 2;
inline void SystemInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SystemInfo::name() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.SystemInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.SystemInfo.name)
}
inline std::string* SystemInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.SystemInfo.name)
  return _s;
}
inline const std::string& SystemInfo::_internal_name() const {
  return name_.Get();
}
inline void SystemInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.SystemInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.SystemInfo.name)
}

// string vendor = 3;
inline void SystemInfo::clear_vendor() {
  vendor_.ClearToEmpty();
}
inline const std::string& SystemInfo::vendor() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.SystemInfo.vendor)
  return _internal_vendor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_vendor(ArgT0&& arg0, ArgT... args) {
 
 vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.SystemInfo.vendor)
}
inline std::string* SystemInfo::mutable_vendor() {
  std::string* _s = _internal_mutable_vendor();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.SystemInfo.vendor)
  return _s;
}
inline const std::string& SystemInfo::_internal_vendor() const {
  return vendor_.Get();
}
inline void SystemInfo::_internal_set_vendor(const std::string& value) {
  
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_vendor() {
  
  return vendor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_vendor() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.SystemInfo.vendor)
  return vendor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    
  } else {
    
  }
  vendor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vendor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vendor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.SystemInfo.vendor)
}

// string serial_number = 4;
inline void SystemInfo::clear_serial_number() {
  serial_number_.ClearToEmpty();
}
inline const std::string& SystemInfo::serial_number() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.SystemInfo.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_serial_number(ArgT0&& arg0, ArgT... args) {
 
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.SystemInfo.serial_number)
}
inline std::string* SystemInfo::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.SystemInfo.serial_number)
  return _s;
}
inline const std::string& SystemInfo::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void SystemInfo::_internal_set_serial_number(const std::string& value) {
  
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_serial_number() {
  
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_serial_number() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.SystemInfo.serial_number)
  return serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    
  } else {
    
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.SystemInfo.serial_number)
}

// string uuid = 5;
inline void SystemInfo::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& SystemInfo::uuid() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.SystemInfo.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.SystemInfo.uuid)
}
inline std::string* SystemInfo::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.SystemInfo.uuid)
  return _s;
}
inline const std::string& SystemInfo::_internal_uuid() const {
  return uuid_.Get();
}
inline void SystemInfo::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.SystemInfo.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uuid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.SystemInfo.uuid)
}

// string sku = 6;
inline void SystemInfo::clear_sku() {
  sku_.ClearToEmpty();
}
inline const std::string& SystemInfo::sku() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.SystemInfo.sku)
  return _internal_sku();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_sku(ArgT0&& arg0, ArgT... args) {
 
 sku_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.SystemInfo.sku)
}
inline std::string* SystemInfo::mutable_sku() {
  std::string* _s = _internal_mutable_sku();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.SystemInfo.sku)
  return _s;
}
inline const std::string& SystemInfo::_internal_sku() const {
  return sku_.Get();
}
inline void SystemInfo::_internal_set_sku(const std::string& value) {
  
  sku_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_sku() {
  
  return sku_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_sku() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.SystemInfo.sku)
  return sku_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_sku(std::string* sku) {
  if (sku != nullptr) {
    
  } else {
    
  }
  sku_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sku,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sku_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sku_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.SystemInfo.sku)
}

// string version = 7;
inline void SystemInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& SystemInfo::version() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.SystemInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.SystemInfo.version)
}
inline std::string* SystemInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.SystemInfo.version)
  return _s;
}
inline const std::string& SystemInfo::_internal_version() const {
  return version_.Get();
}
inline void SystemInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_version() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.SystemInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.SystemInfo.version)
}

// -------------------------------------------------------------------

// ChassisInfo

// string asset_tag = 1;
inline void ChassisInfo::clear_asset_tag() {
  asset_tag_.ClearToEmpty();
}
inline const std::string& ChassisInfo::asset_tag() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.ChassisInfo.asset_tag)
  return _internal_asset_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChassisInfo::set_asset_tag(ArgT0&& arg0, ArgT... args) {
 
 asset_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.ChassisInfo.asset_tag)
}
inline std::string* ChassisInfo::mutable_asset_tag() {
  std::string* _s = _internal_mutable_asset_tag();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.ChassisInfo.asset_tag)
  return _s;
}
inline const std::string& ChassisInfo::_internal_asset_tag() const {
  return asset_tag_.Get();
}
inline void ChassisInfo::_internal_set_asset_tag(const std::string& value) {
  
  asset_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChassisInfo::_internal_mutable_asset_tag() {
  
  return asset_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChassisInfo::release_asset_tag() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.ChassisInfo.asset_tag)
  return asset_tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChassisInfo::set_allocated_asset_tag(std::string* asset_tag) {
  if (asset_tag != nullptr) {
    
  } else {
    
  }
  asset_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_tag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (asset_tag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    asset_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.ChassisInfo.asset_tag)
}

// string serial_number = 2;
inline void ChassisInfo::clear_serial_number() {
  serial_number_.ClearToEmpty();
}
inline const std::string& ChassisInfo::serial_number() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.ChassisInfo.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChassisInfo::set_serial_number(ArgT0&& arg0, ArgT... args) {
 
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.ChassisInfo.serial_number)
}
inline std::string* ChassisInfo::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.ChassisInfo.serial_number)
  return _s;
}
inline const std::string& ChassisInfo::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void ChassisInfo::_internal_set_serial_number(const std::string& value) {
  
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChassisInfo::_internal_mutable_serial_number() {
  
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChassisInfo::release_serial_number() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.ChassisInfo.serial_number)
  return serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChassisInfo::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    
  } else {
    
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.ChassisInfo.serial_number)
}

// string type = 3;
inline void ChassisInfo::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& ChassisInfo::type() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.ChassisInfo.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChassisInfo::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.ChassisInfo.type)
}
inline std::string* ChassisInfo::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.ChassisInfo.type)
  return _s;
}
inline const std::string& ChassisInfo::_internal_type() const {
  return type_.Get();
}
inline void ChassisInfo::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChassisInfo::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChassisInfo::release_type() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.ChassisInfo.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChassisInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.ChassisInfo.type)
}

// string type_description = 4;
inline void ChassisInfo::clear_type_description() {
  type_description_.ClearToEmpty();
}
inline const std::string& ChassisInfo::type_description() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.ChassisInfo.type_description)
  return _internal_type_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChassisInfo::set_type_description(ArgT0&& arg0, ArgT... args) {
 
 type_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.ChassisInfo.type_description)
}
inline std::string* ChassisInfo::mutable_type_description() {
  std::string* _s = _internal_mutable_type_description();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.ChassisInfo.type_description)
  return _s;
}
inline const std::string& ChassisInfo::_internal_type_description() const {
  return type_description_.Get();
}
inline void ChassisInfo::_internal_set_type_description(const std::string& value) {
  
  type_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChassisInfo::_internal_mutable_type_description() {
  
  return type_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChassisInfo::release_type_description() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.ChassisInfo.type_description)
  return type_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChassisInfo::set_allocated_type_description(std::string* type_description) {
  if (type_description != nullptr) {
    
  } else {
    
  }
  type_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.ChassisInfo.type_description)
}

// string vendor = 5;
inline void ChassisInfo::clear_vendor() {
  vendor_.ClearToEmpty();
}
inline const std::string& ChassisInfo::vendor() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.ChassisInfo.vendor)
  return _internal_vendor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChassisInfo::set_vendor(ArgT0&& arg0, ArgT... args) {
 
 vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.ChassisInfo.vendor)
}
inline std::string* ChassisInfo::mutable_vendor() {
  std::string* _s = _internal_mutable_vendor();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.ChassisInfo.vendor)
  return _s;
}
inline const std::string& ChassisInfo::_internal_vendor() const {
  return vendor_.Get();
}
inline void ChassisInfo::_internal_set_vendor(const std::string& value) {
  
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChassisInfo::_internal_mutable_vendor() {
  
  return vendor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChassisInfo::release_vendor() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.ChassisInfo.vendor)
  return vendor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChassisInfo::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    
  } else {
    
  }
  vendor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vendor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vendor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.ChassisInfo.vendor)
}

// string version = 6;
inline void ChassisInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& ChassisInfo::version() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.ChassisInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChassisInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.ChassisInfo.version)
}
inline std::string* ChassisInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.ChassisInfo.version)
  return _s;
}
inline const std::string& ChassisInfo::_internal_version() const {
  return version_.Get();
}
inline void ChassisInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChassisInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChassisInfo::release_version() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.ChassisInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChassisInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.ChassisInfo.version)
}

// -------------------------------------------------------------------

// BaseboardInfo

// string asset_tag = 1;
inline void BaseboardInfo::clear_asset_tag() {
  asset_tag_.ClearToEmpty();
}
inline const std::string& BaseboardInfo::asset_tag() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.BaseboardInfo.asset_tag)
  return _internal_asset_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaseboardInfo::set_asset_tag(ArgT0&& arg0, ArgT... args) {
 
 asset_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.BaseboardInfo.asset_tag)
}
inline std::string* BaseboardInfo::mutable_asset_tag() {
  std::string* _s = _internal_mutable_asset_tag();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.BaseboardInfo.asset_tag)
  return _s;
}
inline const std::string& BaseboardInfo::_internal_asset_tag() const {
  return asset_tag_.Get();
}
inline void BaseboardInfo::_internal_set_asset_tag(const std::string& value) {
  
  asset_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BaseboardInfo::_internal_mutable_asset_tag() {
  
  return asset_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BaseboardInfo::release_asset_tag() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.BaseboardInfo.asset_tag)
  return asset_tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BaseboardInfo::set_allocated_asset_tag(std::string* asset_tag) {
  if (asset_tag != nullptr) {
    
  } else {
    
  }
  asset_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_tag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (asset_tag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    asset_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.BaseboardInfo.asset_tag)
}

// string serial_number = 2;
inline void BaseboardInfo::clear_serial_number() {
  serial_number_.ClearToEmpty();
}
inline const std::string& BaseboardInfo::serial_number() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.BaseboardInfo.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaseboardInfo::set_serial_number(ArgT0&& arg0, ArgT... args) {
 
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.BaseboardInfo.serial_number)
}
inline std::string* BaseboardInfo::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.BaseboardInfo.serial_number)
  return _s;
}
inline const std::string& BaseboardInfo::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void BaseboardInfo::_internal_set_serial_number(const std::string& value) {
  
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BaseboardInfo::_internal_mutable_serial_number() {
  
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BaseboardInfo::release_serial_number() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.BaseboardInfo.serial_number)
  return serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BaseboardInfo::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    
  } else {
    
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.BaseboardInfo.serial_number)
}

// string vendor = 3;
inline void BaseboardInfo::clear_vendor() {
  vendor_.ClearToEmpty();
}
inline const std::string& BaseboardInfo::vendor() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.BaseboardInfo.vendor)
  return _internal_vendor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaseboardInfo::set_vendor(ArgT0&& arg0, ArgT... args) {
 
 vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.BaseboardInfo.vendor)
}
inline std::string* BaseboardInfo::mutable_vendor() {
  std::string* _s = _internal_mutable_vendor();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.BaseboardInfo.vendor)
  return _s;
}
inline const std::string& BaseboardInfo::_internal_vendor() const {
  return vendor_.Get();
}
inline void BaseboardInfo::_internal_set_vendor(const std::string& value) {
  
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BaseboardInfo::_internal_mutable_vendor() {
  
  return vendor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BaseboardInfo::release_vendor() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.BaseboardInfo.vendor)
  return vendor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BaseboardInfo::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    
  } else {
    
  }
  vendor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vendor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vendor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.BaseboardInfo.vendor)
}

// string version = 4;
inline void BaseboardInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& BaseboardInfo::version() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.BaseboardInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaseboardInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.BaseboardInfo.version)
}
inline std::string* BaseboardInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.BaseboardInfo.version)
  return _s;
}
inline const std::string& BaseboardInfo::_internal_version() const {
  return version_.Get();
}
inline void BaseboardInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BaseboardInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BaseboardInfo::release_version() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.BaseboardInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BaseboardInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.BaseboardInfo.version)
}

// string product = 5;
inline void BaseboardInfo::clear_product() {
  product_.ClearToEmpty();
}
inline const std::string& BaseboardInfo::product() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.BaseboardInfo.product)
  return _internal_product();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaseboardInfo::set_product(ArgT0&& arg0, ArgT... args) {
 
 product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.BaseboardInfo.product)
}
inline std::string* BaseboardInfo::mutable_product() {
  std::string* _s = _internal_mutable_product();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.BaseboardInfo.product)
  return _s;
}
inline const std::string& BaseboardInfo::_internal_product() const {
  return product_.Get();
}
inline void BaseboardInfo::_internal_set_product(const std::string& value) {
  
  product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BaseboardInfo::_internal_mutable_product() {
  
  return product_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BaseboardInfo::release_product() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.BaseboardInfo.product)
  return product_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BaseboardInfo::set_allocated_product(std::string* product) {
  if (product != nullptr) {
    
  } else {
    
  }
  product_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.BaseboardInfo.product)
}

// -------------------------------------------------------------------

// CPUInfo

// int32 total_cores = 1;
inline void CPUInfo::clear_total_cores() {
  total_cores_ = 0;
}
inline int32_t CPUInfo::_internal_total_cores() const {
  return total_cores_;
}
inline int32_t CPUInfo::total_cores() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.CPUInfo.total_cores)
  return _internal_total_cores();
}
inline void CPUInfo::_internal_set_total_cores(int32_t value) {
  
  total_cores_ = value;
}
inline void CPUInfo::set_total_cores(int32_t value) {
  _internal_set_total_cores(value);
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.CPUInfo.total_cores)
}

// int32 total_threads = 2;
inline void CPUInfo::clear_total_threads() {
  total_threads_ = 0;
}
inline int32_t CPUInfo::_internal_total_threads() const {
  return total_threads_;
}
inline int32_t CPUInfo::total_threads() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.CPUInfo.total_threads)
  return _internal_total_threads();
}
inline void CPUInfo::_internal_set_total_threads(int32_t value) {
  
  total_threads_ = value;
}
inline void CPUInfo::set_total_threads(int32_t value) {
  _internal_set_total_threads(value);
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.CPUInfo.total_threads)
}

// -------------------------------------------------------------------

// MemoryInfo

// int64 total_physical_bytes = 1;
inline void MemoryInfo::clear_total_physical_bytes() {
  total_physical_bytes_ = int64_t{0};
}
inline int64_t MemoryInfo::_internal_total_physical_bytes() const {
  return total_physical_bytes_;
}
inline int64_t MemoryInfo::total_physical_bytes() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.MemoryInfo.total_physical_bytes)
  return _internal_total_physical_bytes();
}
inline void MemoryInfo::_internal_set_total_physical_bytes(int64_t value) {
  
  total_physical_bytes_ = value;
}
inline void MemoryInfo::set_total_physical_bytes(int64_t value) {
  _internal_set_total_physical_bytes(value);
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.MemoryInfo.total_physical_bytes)
}

// int64 total_usable_bytes = 2;
inline void MemoryInfo::clear_total_usable_bytes() {
  total_usable_bytes_ = int64_t{0};
}
inline int64_t MemoryInfo::_internal_total_usable_bytes() const {
  return total_usable_bytes_;
}
inline int64_t MemoryInfo::total_usable_bytes() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.MemoryInfo.total_usable_bytes)
  return _internal_total_usable_bytes();
}
inline void MemoryInfo::_internal_set_total_usable_bytes(int64_t value) {
  
  total_usable_bytes_ = value;
}
inline void MemoryInfo::set_total_usable_bytes(int64_t value) {
  _internal_set_total_usable_bytes(value);
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.MemoryInfo.total_usable_bytes)
}

// -------------------------------------------------------------------

// PCIeDeviceInfo

// string driver = 1;
inline void PCIeDeviceInfo::clear_driver() {
  driver_.ClearToEmpty();
}
inline const std::string& PCIeDeviceInfo::driver() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.PCIeDeviceInfo.driver)
  return _internal_driver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PCIeDeviceInfo::set_driver(ArgT0&& arg0, ArgT... args) {
 
 driver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.PCIeDeviceInfo.driver)
}
inline std::string* PCIeDeviceInfo::mutable_driver() {
  std::string* _s = _internal_mutable_driver();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.PCIeDeviceInfo.driver)
  return _s;
}
inline const std::string& PCIeDeviceInfo::_internal_driver() const {
  return driver_.Get();
}
inline void PCIeDeviceInfo::_internal_set_driver(const std::string& value) {
  
  driver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::_internal_mutable_driver() {
  
  return driver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::release_driver() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.PCIeDeviceInfo.driver)
  return driver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PCIeDeviceInfo::set_allocated_driver(std::string* driver) {
  if (driver != nullptr) {
    
  } else {
    
  }
  driver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.PCIeDeviceInfo.driver)
}

// string address = 2;
inline void PCIeDeviceInfo::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& PCIeDeviceInfo::address() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.PCIeDeviceInfo.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PCIeDeviceInfo::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.PCIeDeviceInfo.address)
}
inline std::string* PCIeDeviceInfo::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.PCIeDeviceInfo.address)
  return _s;
}
inline const std::string& PCIeDeviceInfo::_internal_address() const {
  return address_.Get();
}
inline void PCIeDeviceInfo::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::release_address() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.PCIeDeviceInfo.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PCIeDeviceInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.PCIeDeviceInfo.address)
}

// string vendor = 3;
inline void PCIeDeviceInfo::clear_vendor() {
  vendor_.ClearToEmpty();
}
inline const std::string& PCIeDeviceInfo::vendor() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.PCIeDeviceInfo.vendor)
  return _internal_vendor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PCIeDeviceInfo::set_vendor(ArgT0&& arg0, ArgT... args) {
 
 vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.PCIeDeviceInfo.vendor)
}
inline std::string* PCIeDeviceInfo::mutable_vendor() {
  std::string* _s = _internal_mutable_vendor();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.PCIeDeviceInfo.vendor)
  return _s;
}
inline const std::string& PCIeDeviceInfo::_internal_vendor() const {
  return vendor_.Get();
}
inline void PCIeDeviceInfo::_internal_set_vendor(const std::string& value) {
  
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::_internal_mutable_vendor() {
  
  return vendor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::release_vendor() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.PCIeDeviceInfo.vendor)
  return vendor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PCIeDeviceInfo::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    
  } else {
    
  }
  vendor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vendor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vendor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.PCIeDeviceInfo.vendor)
}

// string product = 4;
inline void PCIeDeviceInfo::clear_product() {
  product_.ClearToEmpty();
}
inline const std::string& PCIeDeviceInfo::product() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.PCIeDeviceInfo.product)
  return _internal_product();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PCIeDeviceInfo::set_product(ArgT0&& arg0, ArgT... args) {
 
 product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.PCIeDeviceInfo.product)
}
inline std::string* PCIeDeviceInfo::mutable_product() {
  std::string* _s = _internal_mutable_product();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.PCIeDeviceInfo.product)
  return _s;
}
inline const std::string& PCIeDeviceInfo::_internal_product() const {
  return product_.Get();
}
inline void PCIeDeviceInfo::_internal_set_product(const std::string& value) {
  
  product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::_internal_mutable_product() {
  
  return product_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::release_product() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.PCIeDeviceInfo.product)
  return product_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PCIeDeviceInfo::set_allocated_product(std::string* product) {
  if (product != nullptr) {
    
  } else {
    
  }
  product_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.PCIeDeviceInfo.product)
}

// string revision = 5;
inline void PCIeDeviceInfo::clear_revision() {
  revision_.ClearToEmpty();
}
inline const std::string& PCIeDeviceInfo::revision() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.PCIeDeviceInfo.revision)
  return _internal_revision();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PCIeDeviceInfo::set_revision(ArgT0&& arg0, ArgT... args) {
 
 revision_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.PCIeDeviceInfo.revision)
}
inline std::string* PCIeDeviceInfo::mutable_revision() {
  std::string* _s = _internal_mutable_revision();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.PCIeDeviceInfo.revision)
  return _s;
}
inline const std::string& PCIeDeviceInfo::_internal_revision() const {
  return revision_.Get();
}
inline void PCIeDeviceInfo::_internal_set_revision(const std::string& value) {
  
  revision_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::_internal_mutable_revision() {
  
  return revision_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::release_revision() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.PCIeDeviceInfo.revision)
  return revision_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PCIeDeviceInfo::set_allocated_revision(std::string* revision) {
  if (revision != nullptr) {
    
  } else {
    
  }
  revision_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), revision,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (revision_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    revision_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.PCIeDeviceInfo.revision)
}

// string subsystem = 6;
inline void PCIeDeviceInfo::clear_subsystem() {
  subsystem_.ClearToEmpty();
}
inline const std::string& PCIeDeviceInfo::subsystem() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.PCIeDeviceInfo.subsystem)
  return _internal_subsystem();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PCIeDeviceInfo::set_subsystem(ArgT0&& arg0, ArgT... args) {
 
 subsystem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.PCIeDeviceInfo.subsystem)
}
inline std::string* PCIeDeviceInfo::mutable_subsystem() {
  std::string* _s = _internal_mutable_subsystem();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.PCIeDeviceInfo.subsystem)
  return _s;
}
inline const std::string& PCIeDeviceInfo::_internal_subsystem() const {
  return subsystem_.Get();
}
inline void PCIeDeviceInfo::_internal_set_subsystem(const std::string& value) {
  
  subsystem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::_internal_mutable_subsystem() {
  
  return subsystem_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::release_subsystem() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.PCIeDeviceInfo.subsystem)
  return subsystem_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PCIeDeviceInfo::set_allocated_subsystem(std::string* subsystem) {
  if (subsystem != nullptr) {
    
  } else {
    
  }
  subsystem_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subsystem,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subsystem_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subsystem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.PCIeDeviceInfo.subsystem)
}

// string class = 7;
inline void PCIeDeviceInfo::clear_class_() {
  class__.ClearToEmpty();
}
inline const std::string& PCIeDeviceInfo::class_() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.PCIeDeviceInfo.class)
  return _internal_class_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PCIeDeviceInfo::set_class_(ArgT0&& arg0, ArgT... args) {
 
 class__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.PCIeDeviceInfo.class)
}
inline std::string* PCIeDeviceInfo::mutable_class_() {
  std::string* _s = _internal_mutable_class_();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.PCIeDeviceInfo.class)
  return _s;
}
inline const std::string& PCIeDeviceInfo::_internal_class_() const {
  return class__.Get();
}
inline void PCIeDeviceInfo::_internal_set_class_(const std::string& value) {
  
  class__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::_internal_mutable_class_() {
  
  return class__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::release_class_() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.PCIeDeviceInfo.class)
  return class__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PCIeDeviceInfo::set_allocated_class_(std::string* class_) {
  if (class_ != nullptr) {
    
  } else {
    
  }
  class__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class__.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    class__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.PCIeDeviceInfo.class)
}

// string subclass = 8;
inline void PCIeDeviceInfo::clear_subclass() {
  subclass_.ClearToEmpty();
}
inline const std::string& PCIeDeviceInfo::subclass() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.PCIeDeviceInfo.subclass)
  return _internal_subclass();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PCIeDeviceInfo::set_subclass(ArgT0&& arg0, ArgT... args) {
 
 subclass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.inventory.v1.PCIeDeviceInfo.subclass)
}
inline std::string* PCIeDeviceInfo::mutable_subclass() {
  std::string* _s = _internal_mutable_subclass();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.PCIeDeviceInfo.subclass)
  return _s;
}
inline const std::string& PCIeDeviceInfo::_internal_subclass() const {
  return subclass_.Get();
}
inline void PCIeDeviceInfo::_internal_set_subclass(const std::string& value) {
  
  subclass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::_internal_mutable_subclass() {
  
  return subclass_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PCIeDeviceInfo::release_subclass() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.PCIeDeviceInfo.subclass)
  return subclass_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PCIeDeviceInfo::set_allocated_subclass(std::string* subclass) {
  if (subclass != nullptr) {
    
  } else {
    
  }
  subclass_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subclass,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subclass_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subclass_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.PCIeDeviceInfo.subclass)
}

// -------------------------------------------------------------------

// InventoryGetRequest

// -------------------------------------------------------------------

// InventoryGetResponse

// .opi_api.inventory.v1.BIOSInfo bios = 1;
inline bool InventoryGetResponse::_internal_has_bios() const {
  return this != internal_default_instance() && bios_ != nullptr;
}
inline bool InventoryGetResponse::has_bios() const {
  return _internal_has_bios();
}
inline void InventoryGetResponse::clear_bios() {
  if (GetArenaForAllocation() == nullptr && bios_ != nullptr) {
    delete bios_;
  }
  bios_ = nullptr;
}
inline const ::opi_api::inventory::v1::BIOSInfo& InventoryGetResponse::_internal_bios() const {
  const ::opi_api::inventory::v1::BIOSInfo* p = bios_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::inventory::v1::BIOSInfo&>(
      ::opi_api::inventory::v1::_BIOSInfo_default_instance_);
}
inline const ::opi_api::inventory::v1::BIOSInfo& InventoryGetResponse::bios() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.InventoryGetResponse.bios)
  return _internal_bios();
}
inline void InventoryGetResponse::unsafe_arena_set_allocated_bios(
    ::opi_api::inventory::v1::BIOSInfo* bios) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bios_);
  }
  bios_ = bios;
  if (bios) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.inventory.v1.InventoryGetResponse.bios)
}
inline ::opi_api::inventory::v1::BIOSInfo* InventoryGetResponse::release_bios() {
  
  ::opi_api::inventory::v1::BIOSInfo* temp = bios_;
  bios_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::inventory::v1::BIOSInfo* InventoryGetResponse::unsafe_arena_release_bios() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.InventoryGetResponse.bios)
  
  ::opi_api::inventory::v1::BIOSInfo* temp = bios_;
  bios_ = nullptr;
  return temp;
}
inline ::opi_api::inventory::v1::BIOSInfo* InventoryGetResponse::_internal_mutable_bios() {
  
  if (bios_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::inventory::v1::BIOSInfo>(GetArenaForAllocation());
    bios_ = p;
  }
  return bios_;
}
inline ::opi_api::inventory::v1::BIOSInfo* InventoryGetResponse::mutable_bios() {
  ::opi_api::inventory::v1::BIOSInfo* _msg = _internal_mutable_bios();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.InventoryGetResponse.bios)
  return _msg;
}
inline void InventoryGetResponse::set_allocated_bios(::opi_api::inventory::v1::BIOSInfo* bios) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bios_;
  }
  if (bios) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::inventory::v1::BIOSInfo>::GetOwningArena(bios);
    if (message_arena != submessage_arena) {
      bios = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bios, submessage_arena);
    }
    
  } else {
    
  }
  bios_ = bios;
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.InventoryGetResponse.bios)
}

// .opi_api.inventory.v1.SystemInfo system = 2;
inline bool InventoryGetResponse::_internal_has_system() const {
  return this != internal_default_instance() && system_ != nullptr;
}
inline bool InventoryGetResponse::has_system() const {
  return _internal_has_system();
}
inline void InventoryGetResponse::clear_system() {
  if (GetArenaForAllocation() == nullptr && system_ != nullptr) {
    delete system_;
  }
  system_ = nullptr;
}
inline const ::opi_api::inventory::v1::SystemInfo& InventoryGetResponse::_internal_system() const {
  const ::opi_api::inventory::v1::SystemInfo* p = system_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::inventory::v1::SystemInfo&>(
      ::opi_api::inventory::v1::_SystemInfo_default_instance_);
}
inline const ::opi_api::inventory::v1::SystemInfo& InventoryGetResponse::system() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.InventoryGetResponse.system)
  return _internal_system();
}
inline void InventoryGetResponse::unsafe_arena_set_allocated_system(
    ::opi_api::inventory::v1::SystemInfo* system) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_);
  }
  system_ = system;
  if (system) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.inventory.v1.InventoryGetResponse.system)
}
inline ::opi_api::inventory::v1::SystemInfo* InventoryGetResponse::release_system() {
  
  ::opi_api::inventory::v1::SystemInfo* temp = system_;
  system_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::inventory::v1::SystemInfo* InventoryGetResponse::unsafe_arena_release_system() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.InventoryGetResponse.system)
  
  ::opi_api::inventory::v1::SystemInfo* temp = system_;
  system_ = nullptr;
  return temp;
}
inline ::opi_api::inventory::v1::SystemInfo* InventoryGetResponse::_internal_mutable_system() {
  
  if (system_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::inventory::v1::SystemInfo>(GetArenaForAllocation());
    system_ = p;
  }
  return system_;
}
inline ::opi_api::inventory::v1::SystemInfo* InventoryGetResponse::mutable_system() {
  ::opi_api::inventory::v1::SystemInfo* _msg = _internal_mutable_system();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.InventoryGetResponse.system)
  return _msg;
}
inline void InventoryGetResponse::set_allocated_system(::opi_api::inventory::v1::SystemInfo* system) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete system_;
  }
  if (system) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::inventory::v1::SystemInfo>::GetOwningArena(system);
    if (message_arena != submessage_arena) {
      system = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    
  } else {
    
  }
  system_ = system;
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.InventoryGetResponse.system)
}

// .opi_api.inventory.v1.BaseboardInfo baseboard = 3;
inline bool InventoryGetResponse::_internal_has_baseboard() const {
  return this != internal_default_instance() && baseboard_ != nullptr;
}
inline bool InventoryGetResponse::has_baseboard() const {
  return _internal_has_baseboard();
}
inline void InventoryGetResponse::clear_baseboard() {
  if (GetArenaForAllocation() == nullptr && baseboard_ != nullptr) {
    delete baseboard_;
  }
  baseboard_ = nullptr;
}
inline const ::opi_api::inventory::v1::BaseboardInfo& InventoryGetResponse::_internal_baseboard() const {
  const ::opi_api::inventory::v1::BaseboardInfo* p = baseboard_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::inventory::v1::BaseboardInfo&>(
      ::opi_api::inventory::v1::_BaseboardInfo_default_instance_);
}
inline const ::opi_api::inventory::v1::BaseboardInfo& InventoryGetResponse::baseboard() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.InventoryGetResponse.baseboard)
  return _internal_baseboard();
}
inline void InventoryGetResponse::unsafe_arena_set_allocated_baseboard(
    ::opi_api::inventory::v1::BaseboardInfo* baseboard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baseboard_);
  }
  baseboard_ = baseboard;
  if (baseboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.inventory.v1.InventoryGetResponse.baseboard)
}
inline ::opi_api::inventory::v1::BaseboardInfo* InventoryGetResponse::release_baseboard() {
  
  ::opi_api::inventory::v1::BaseboardInfo* temp = baseboard_;
  baseboard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::inventory::v1::BaseboardInfo* InventoryGetResponse::unsafe_arena_release_baseboard() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.InventoryGetResponse.baseboard)
  
  ::opi_api::inventory::v1::BaseboardInfo* temp = baseboard_;
  baseboard_ = nullptr;
  return temp;
}
inline ::opi_api::inventory::v1::BaseboardInfo* InventoryGetResponse::_internal_mutable_baseboard() {
  
  if (baseboard_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::inventory::v1::BaseboardInfo>(GetArenaForAllocation());
    baseboard_ = p;
  }
  return baseboard_;
}
inline ::opi_api::inventory::v1::BaseboardInfo* InventoryGetResponse::mutable_baseboard() {
  ::opi_api::inventory::v1::BaseboardInfo* _msg = _internal_mutable_baseboard();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.InventoryGetResponse.baseboard)
  return _msg;
}
inline void InventoryGetResponse::set_allocated_baseboard(::opi_api::inventory::v1::BaseboardInfo* baseboard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete baseboard_;
  }
  if (baseboard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::inventory::v1::BaseboardInfo>::GetOwningArena(baseboard);
    if (message_arena != submessage_arena) {
      baseboard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseboard, submessage_arena);
    }
    
  } else {
    
  }
  baseboard_ = baseboard;
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.InventoryGetResponse.baseboard)
}

// .opi_api.inventory.v1.ChassisInfo chassis = 4;
inline bool InventoryGetResponse::_internal_has_chassis() const {
  return this != internal_default_instance() && chassis_ != nullptr;
}
inline bool InventoryGetResponse::has_chassis() const {
  return _internal_has_chassis();
}
inline void InventoryGetResponse::clear_chassis() {
  if (GetArenaForAllocation() == nullptr && chassis_ != nullptr) {
    delete chassis_;
  }
  chassis_ = nullptr;
}
inline const ::opi_api::inventory::v1::ChassisInfo& InventoryGetResponse::_internal_chassis() const {
  const ::opi_api::inventory::v1::ChassisInfo* p = chassis_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::inventory::v1::ChassisInfo&>(
      ::opi_api::inventory::v1::_ChassisInfo_default_instance_);
}
inline const ::opi_api::inventory::v1::ChassisInfo& InventoryGetResponse::chassis() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.InventoryGetResponse.chassis)
  return _internal_chassis();
}
inline void InventoryGetResponse::unsafe_arena_set_allocated_chassis(
    ::opi_api::inventory::v1::ChassisInfo* chassis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chassis_);
  }
  chassis_ = chassis;
  if (chassis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.inventory.v1.InventoryGetResponse.chassis)
}
inline ::opi_api::inventory::v1::ChassisInfo* InventoryGetResponse::release_chassis() {
  
  ::opi_api::inventory::v1::ChassisInfo* temp = chassis_;
  chassis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::inventory::v1::ChassisInfo* InventoryGetResponse::unsafe_arena_release_chassis() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.InventoryGetResponse.chassis)
  
  ::opi_api::inventory::v1::ChassisInfo* temp = chassis_;
  chassis_ = nullptr;
  return temp;
}
inline ::opi_api::inventory::v1::ChassisInfo* InventoryGetResponse::_internal_mutable_chassis() {
  
  if (chassis_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::inventory::v1::ChassisInfo>(GetArenaForAllocation());
    chassis_ = p;
  }
  return chassis_;
}
inline ::opi_api::inventory::v1::ChassisInfo* InventoryGetResponse::mutable_chassis() {
  ::opi_api::inventory::v1::ChassisInfo* _msg = _internal_mutable_chassis();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.InventoryGetResponse.chassis)
  return _msg;
}
inline void InventoryGetResponse::set_allocated_chassis(::opi_api::inventory::v1::ChassisInfo* chassis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete chassis_;
  }
  if (chassis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::inventory::v1::ChassisInfo>::GetOwningArena(chassis);
    if (message_arena != submessage_arena) {
      chassis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chassis, submessage_arena);
    }
    
  } else {
    
  }
  chassis_ = chassis;
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.InventoryGetResponse.chassis)
}

// .opi_api.inventory.v1.CPUInfo processor = 5;
inline bool InventoryGetResponse::_internal_has_processor() const {
  return this != internal_default_instance() && processor_ != nullptr;
}
inline bool InventoryGetResponse::has_processor() const {
  return _internal_has_processor();
}
inline void InventoryGetResponse::clear_processor() {
  if (GetArenaForAllocation() == nullptr && processor_ != nullptr) {
    delete processor_;
  }
  processor_ = nullptr;
}
inline const ::opi_api::inventory::v1::CPUInfo& InventoryGetResponse::_internal_processor() const {
  const ::opi_api::inventory::v1::CPUInfo* p = processor_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::inventory::v1::CPUInfo&>(
      ::opi_api::inventory::v1::_CPUInfo_default_instance_);
}
inline const ::opi_api::inventory::v1::CPUInfo& InventoryGetResponse::processor() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.InventoryGetResponse.processor)
  return _internal_processor();
}
inline void InventoryGetResponse::unsafe_arena_set_allocated_processor(
    ::opi_api::inventory::v1::CPUInfo* processor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(processor_);
  }
  processor_ = processor;
  if (processor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.inventory.v1.InventoryGetResponse.processor)
}
inline ::opi_api::inventory::v1::CPUInfo* InventoryGetResponse::release_processor() {
  
  ::opi_api::inventory::v1::CPUInfo* temp = processor_;
  processor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::inventory::v1::CPUInfo* InventoryGetResponse::unsafe_arena_release_processor() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.InventoryGetResponse.processor)
  
  ::opi_api::inventory::v1::CPUInfo* temp = processor_;
  processor_ = nullptr;
  return temp;
}
inline ::opi_api::inventory::v1::CPUInfo* InventoryGetResponse::_internal_mutable_processor() {
  
  if (processor_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::inventory::v1::CPUInfo>(GetArenaForAllocation());
    processor_ = p;
  }
  return processor_;
}
inline ::opi_api::inventory::v1::CPUInfo* InventoryGetResponse::mutable_processor() {
  ::opi_api::inventory::v1::CPUInfo* _msg = _internal_mutable_processor();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.InventoryGetResponse.processor)
  return _msg;
}
inline void InventoryGetResponse::set_allocated_processor(::opi_api::inventory::v1::CPUInfo* processor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete processor_;
  }
  if (processor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::inventory::v1::CPUInfo>::GetOwningArena(processor);
    if (message_arena != submessage_arena) {
      processor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processor, submessage_arena);
    }
    
  } else {
    
  }
  processor_ = processor;
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.InventoryGetResponse.processor)
}

// .opi_api.inventory.v1.MemoryInfo memory = 6;
inline bool InventoryGetResponse::_internal_has_memory() const {
  return this != internal_default_instance() && memory_ != nullptr;
}
inline bool InventoryGetResponse::has_memory() const {
  return _internal_has_memory();
}
inline void InventoryGetResponse::clear_memory() {
  if (GetArenaForAllocation() == nullptr && memory_ != nullptr) {
    delete memory_;
  }
  memory_ = nullptr;
}
inline const ::opi_api::inventory::v1::MemoryInfo& InventoryGetResponse::_internal_memory() const {
  const ::opi_api::inventory::v1::MemoryInfo* p = memory_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::inventory::v1::MemoryInfo&>(
      ::opi_api::inventory::v1::_MemoryInfo_default_instance_);
}
inline const ::opi_api::inventory::v1::MemoryInfo& InventoryGetResponse::memory() const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.InventoryGetResponse.memory)
  return _internal_memory();
}
inline void InventoryGetResponse::unsafe_arena_set_allocated_memory(
    ::opi_api::inventory::v1::MemoryInfo* memory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memory_);
  }
  memory_ = memory;
  if (memory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.inventory.v1.InventoryGetResponse.memory)
}
inline ::opi_api::inventory::v1::MemoryInfo* InventoryGetResponse::release_memory() {
  
  ::opi_api::inventory::v1::MemoryInfo* temp = memory_;
  memory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::inventory::v1::MemoryInfo* InventoryGetResponse::unsafe_arena_release_memory() {
  // @@protoc_insertion_point(field_release:opi_api.inventory.v1.InventoryGetResponse.memory)
  
  ::opi_api::inventory::v1::MemoryInfo* temp = memory_;
  memory_ = nullptr;
  return temp;
}
inline ::opi_api::inventory::v1::MemoryInfo* InventoryGetResponse::_internal_mutable_memory() {
  
  if (memory_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::inventory::v1::MemoryInfo>(GetArenaForAllocation());
    memory_ = p;
  }
  return memory_;
}
inline ::opi_api::inventory::v1::MemoryInfo* InventoryGetResponse::mutable_memory() {
  ::opi_api::inventory::v1::MemoryInfo* _msg = _internal_mutable_memory();
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.InventoryGetResponse.memory)
  return _msg;
}
inline void InventoryGetResponse::set_allocated_memory(::opi_api::inventory::v1::MemoryInfo* memory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete memory_;
  }
  if (memory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::inventory::v1::MemoryInfo>::GetOwningArena(memory);
    if (message_arena != submessage_arena) {
      memory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory, submessage_arena);
    }
    
  } else {
    
  }
  memory_ = memory;
  // @@protoc_insertion_point(field_set_allocated:opi_api.inventory.v1.InventoryGetResponse.memory)
}

// repeated .opi_api.inventory.v1.PCIeDeviceInfo pci = 7;
inline int InventoryGetResponse::_internal_pci_size() const {
  return pci_.size();
}
inline int InventoryGetResponse::pci_size() const {
  return _internal_pci_size();
}
inline void InventoryGetResponse::clear_pci() {
  pci_.Clear();
}
inline ::opi_api::inventory::v1::PCIeDeviceInfo* InventoryGetResponse::mutable_pci(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.inventory.v1.InventoryGetResponse.pci)
  return pci_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::inventory::v1::PCIeDeviceInfo >*
InventoryGetResponse::mutable_pci() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.inventory.v1.InventoryGetResponse.pci)
  return &pci_;
}
inline const ::opi_api::inventory::v1::PCIeDeviceInfo& InventoryGetResponse::_internal_pci(int index) const {
  return pci_.Get(index);
}
inline const ::opi_api::inventory::v1::PCIeDeviceInfo& InventoryGetResponse::pci(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.inventory.v1.InventoryGetResponse.pci)
  return _internal_pci(index);
}
inline ::opi_api::inventory::v1::PCIeDeviceInfo* InventoryGetResponse::_internal_add_pci() {
  return pci_.Add();
}
inline ::opi_api::inventory::v1::PCIeDeviceInfo* InventoryGetResponse::add_pci() {
  ::opi_api::inventory::v1::PCIeDeviceInfo* _add = _internal_add_pci();
  // @@protoc_insertion_point(field_add:opi_api.inventory.v1.InventoryGetResponse.pci)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::inventory::v1::PCIeDeviceInfo >&
InventoryGetResponse::pci() const {
  // @@protoc_insertion_point(field_list:opi_api.inventory.v1.InventoryGetResponse.pci)
  return pci_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace inventory
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_inventory_2eproto
