// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: inventory.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BIOS Information (Type 0)
type BIOSInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String number of the BIOS Vendor’s Name.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// String number of the BIOS Version. This value is a
	// free-form string that may contain Core and OEM
	// version information.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// String number of the BIOS release date. The date
	// string, if supplied, is in either mm/dd/yy or
	// mm/dd/yyyy format. If the year portion of the string
	// is two digits, the year is assumed to be 19yy.
	// NOTE: The mm/dd/yyyy format is required for SMBIOS
	// version 2.3 and later
	Date string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *BIOSInfo) Reset() {
	*x = BIOSInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BIOSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BIOSInfo) ProtoMessage() {}

func (x *BIOSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BIOSInfo.ProtoReflect.Descriptor instead.
func (*BIOSInfo) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{0}
}

func (x *BIOSInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *BIOSInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BIOSInfo) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// System Information (Type 1)
//  The information in this structure defines attributes of the overall system and is intended to be associated
//  with the Component ID group of the system’s MIF. An SMBIOS implementation is associated with a single
//  system instance and contains one and only one System Information (Type 1) structure. Table 10 shows
//  the contents of this structure.
type SystemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of null-terminated string
	// This text string identifies the family to which a
	// particular computer belongs. A family refers to a
	// set of computers that are similar but not identical
	// from a hardware or software point of view.
	// Typically, a family is composed of different
	// computer models, which have different
	// configurations and pricing points. Computers in
	// the same family often have similar branding and
	// cosmetic features.
	Family string `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	// Number of null-terminated string
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Number of null-terminated string
	Vendor string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Number of null-terminated string
	SerialNumber string `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// A UUID is an identifier that is designed to be unique across both time and space. It requires no central
	// registration process. The UUID is 128 bits long. Its format is described in RFC4122, but the actual field
	// contents are opaque and not significant to the SMBIOS specification, which is only concerned with the
	// byte order. Table 11 shows the field names; these field names, particularly for multiplexed fields, follow
	// historical practice.
	Uuid string `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Number of null-terminated string
	// This text string identifies a particular computer
	// configuration for sale. It is sometimes also called
	// a product ID or purchase order number. This
	// number is frequently found in existing fields, but
	// there is no standard format. Typically for a given
	// system board from a given OEM, there are tens
	// of unique processor, memory, hard drive, and
	// optical drive configurations.
	Sku string `protobuf:"bytes,6,opt,name=sku,proto3" json:"sku,omitempty"`
	// Number of null-terminated string
	Version string `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *SystemInfo) Reset() {
	*x = SystemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInfo) ProtoMessage() {}

func (x *SystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInfo.ProtoReflect.Descriptor instead.
func (*SystemInfo) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{1}
}

func (x *SystemInfo) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *SystemInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *SystemInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *SystemInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SystemInfo) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *SystemInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// System Enclosure or Chassis (Type 3)
//  The information in this structure (see Table 16) defines attributes of the system’s mechanical
//  enclosure(s). For example, if a system included a separate enclosure for its peripheral devices, two
//  structures would be returned: one for the main system enclosure and the second for the peripheral device
//  enclosure. The additions to this structure in version 2.1 of this specification support the population of the
//  CIM_Chassis class.
type ChassisInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of null-terminated string
	AssetTag string `protobuf:"bytes,1,opt,name=asset_tag,json=assetTag,proto3" json:"asset_tag,omitempty"`
	// Number of null-terminated string
	SerialNumber string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// Bit 7 Chassis lock is present if 1.
	// Otherwise, either a lock is not present, or it is unknown if the enclosure has a lock.
	// Bits 6:0 Enumeration value; see below.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Table 17 shows the byte values for the System Enclosure or Chassis Types field
	// Number of null-terminated string
	TypeDescription string `protobuf:"bytes,4,opt,name=type_description,json=typeDescription,proto3" json:"type_description,omitempty"`
	// Number of null-terminated string
	Vendor string `protobuf:"bytes,5,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Number of null-terminated string
	Version string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ChassisInfo) Reset() {
	*x = ChassisInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChassisInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisInfo) ProtoMessage() {}

func (x *ChassisInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisInfo.ProtoReflect.Descriptor instead.
func (*ChassisInfo) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{2}
}

func (x *ChassisInfo) GetAssetTag() string {
	if x != nil {
		return x.AssetTag
	}
	return ""
}

func (x *ChassisInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *ChassisInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChassisInfo) GetTypeDescription() string {
	if x != nil {
		return x.TypeDescription
	}
	return ""
}

func (x *ChassisInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ChassisInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Baseboard (or Module) Information (Type 2)
//  The information in this structure defines attributes of a system baseboard (for
//  example, a motherboard, planar, server blade, or other standard system module)
type BaseboardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of a null-terminated string
	AssetTag string `protobuf:"bytes,1,opt,name=asset_tag,json=assetTag,proto3" json:"asset_tag,omitempty"`
	// Number of null-terminated string
	SerialNumber string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// Number of null-terminated string
	Vendor string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Number of null-terminated string
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Number of null-terminated string
	Product string `protobuf:"bytes,5,opt,name=product,proto3" json:"product,omitempty"`
}

func (x *BaseboardInfo) Reset() {
	*x = BaseboardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseboardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseboardInfo) ProtoMessage() {}

func (x *BaseboardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseboardInfo.ProtoReflect.Descriptor instead.
func (*BaseboardInfo) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{3}
}

func (x *BaseboardInfo) GetAssetTag() string {
	if x != nil {
		return x.AssetTag
	}
	return ""
}

func (x *BaseboardInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *BaseboardInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *BaseboardInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BaseboardInfo) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

// Processor Information (Type 4)
//  The information in this structure (see Table 21) defines the attributes of a single processor; a separate
//  structure instance is provided for each system processor socket/slot. For example, a system with an
//  IntelDX2™ processor would have a single structure instance while a system with an IntelSX2™ processor
//  would have a structure to describe the main CPU and a second structure to describe the 80487 co1054 processor.
type CPUInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of cores per processor socket
	// See 7.5.6. If the value is unknown, the field is set
	// to 0. For core counts of 256 or greater, the Core
	// Count field is set to FFh and the Core Count 2
	// field is set to the number of cores.
	TotalCores int32 `protobuf:"varint,1,opt,name=total_cores,json=totalCores,proto3" json:"total_cores,omitempty"`
	// Number of threads per processor socket
	// See 7.5.8. If the value is unknown, the field is set
	// to 0. For thread counts of 256 or greater, the
	// Thread Count field is set to FFh and the Thread
	// Count 2 field is set to the number of threads.
	TotalThreads int32 `protobuf:"varint,2,opt,name=total_threads,json=totalThreads,proto3" json:"total_threads,omitempty"`
}

func (x *CPUInfo) Reset() {
	*x = CPUInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUInfo) ProtoMessage() {}

func (x *CPUInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUInfo.ProtoReflect.Descriptor instead.
func (*CPUInfo) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{4}
}

func (x *CPUInfo) GetTotalCores() int32 {
	if x != nil {
		return x.TotalCores
	}
	return 0
}

func (x *CPUInfo) GetTotalThreads() int32 {
	if x != nil {
		return x.TotalThreads
	}
	return 0
}

// Physical Memory Array (Type 16)
//  This structure describes a collection of memory devices that operate together to form a memory address
//  space.
type MemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum memory capacity, in kilobytes, for this array
	// If the capacity is not represented in this field, then this
	// field contains 8000 0000h and the Extended
	// Maximum Capacity field should be used. Values 2 TB
	// (8000 0000h) or greater must be represented in the
	// Extended Maximum Capacity field.
	TotalPhysicalBytes int64 `protobuf:"varint,1,opt,name=total_physical_bytes,json=totalPhysicalBytes,proto3" json:"total_physical_bytes,omitempty"`
	// TBD
	TotalUsableBytes int64 `protobuf:"varint,2,opt,name=total_usable_bytes,json=totalUsableBytes,proto3" json:"total_usable_bytes,omitempty"`
}

func (x *MemoryInfo) Reset() {
	*x = MemoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryInfo) ProtoMessage() {}

func (x *MemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryInfo.ProtoReflect.Descriptor instead.
func (*MemoryInfo) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{5}
}

func (x *MemoryInfo) GetTotalPhysicalBytes() int64 {
	if x != nil {
		return x.TotalPhysicalBytes
	}
	return 0
}

func (x *MemoryInfo) GetTotalUsableBytes() int64 {
	if x != nil {
		return x.TotalUsableBytes
	}
	return 0
}

// PCI device information
//  TBD: Type 9 or Type 41 ?
//  This structure describes a collection of PCI devices.
type PCIeDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Driver assiociated with the device
	Driver string `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	// BDF address in a string format, for example "0000:00:17.7"
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// string vendor info
	Vendor string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// string product info
	Product string `protobuf:"bytes,4,opt,name=product,proto3" json:"product,omitempty"`
	// string revision info
	Revision string `protobuf:"bytes,5,opt,name=revision,proto3" json:"revision,omitempty"`
	// string subsystem info
	Subsystem string `protobuf:"bytes,6,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
	// string class info
	Class string `protobuf:"bytes,7,opt,name=class,proto3" json:"class,omitempty"`
	// string subclass info
	Subclass string `protobuf:"bytes,8,opt,name=subclass,proto3" json:"subclass,omitempty"`
}

func (x *PCIeDeviceInfo) Reset() {
	*x = PCIeDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCIeDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCIeDeviceInfo) ProtoMessage() {}

func (x *PCIeDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCIeDeviceInfo.ProtoReflect.Descriptor instead.
func (*PCIeDeviceInfo) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{6}
}

func (x *PCIeDeviceInfo) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *PCIeDeviceInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PCIeDeviceInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *PCIeDeviceInfo) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *PCIeDeviceInfo) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *PCIeDeviceInfo) GetSubsystem() string {
	if x != nil {
		return x.Subsystem
	}
	return ""
}

func (x *PCIeDeviceInfo) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *PCIeDeviceInfo) GetSubclass() string {
	if x != nil {
		return x.Subclass
	}
	return ""
}

type InventoryGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InventoryGetRequest) Reset() {
	*x = InventoryGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryGetRequest) ProtoMessage() {}

func (x *InventoryGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryGetRequest.ProtoReflect.Descriptor instead.
func (*InventoryGetRequest) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{7}
}

type InventoryGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bios      *BIOSInfo         `protobuf:"bytes,1,opt,name=bios,proto3" json:"bios,omitempty"`
	System    *SystemInfo       `protobuf:"bytes,2,opt,name=system,proto3" json:"system,omitempty"`
	Baseboard *BaseboardInfo    `protobuf:"bytes,3,opt,name=baseboard,proto3" json:"baseboard,omitempty"`
	Chassis   *ChassisInfo      `protobuf:"bytes,4,opt,name=chassis,proto3" json:"chassis,omitempty"`
	Processor *CPUInfo          `protobuf:"bytes,5,opt,name=processor,proto3" json:"processor,omitempty"`
	Memory    *MemoryInfo       `protobuf:"bytes,6,opt,name=memory,proto3" json:"memory,omitempty"`
	Pci       []*PCIeDeviceInfo `protobuf:"bytes,7,rep,name=pci,proto3" json:"pci,omitempty"`
}

func (x *InventoryGetResponse) Reset() {
	*x = InventoryGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryGetResponse) ProtoMessage() {}

func (x *InventoryGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryGetResponse.ProtoReflect.Descriptor instead.
func (*InventoryGetResponse) Descriptor() ([]byte, []int) {
	return file_inventory_proto_rawDescGZIP(), []int{8}
}

func (x *InventoryGetResponse) GetBios() *BIOSInfo {
	if x != nil {
		return x.Bios
	}
	return nil
}

func (x *InventoryGetResponse) GetSystem() *SystemInfo {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *InventoryGetResponse) GetBaseboard() *BaseboardInfo {
	if x != nil {
		return x.Baseboard
	}
	return nil
}

func (x *InventoryGetResponse) GetChassis() *ChassisInfo {
	if x != nil {
		return x.Chassis
	}
	return nil
}

func (x *InventoryGetResponse) GetProcessor() *CPUInfo {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *InventoryGetResponse) GetMemory() *MemoryInfo {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *InventoryGetResponse) GetPci() []*PCIeDeviceInfo {
	if x != nil {
		return x.Pci
	}
	return nil
}

var File_inventory_proto protoreflect.FileDescriptor

var file_inventory_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x22, 0x50, 0x0a, 0x08, 0x42, 0x49, 0x4f, 0x53, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0a, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xc0, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x22, 0x4f, 0x0a, 0x07, 0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0x6c, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x50, 0x43, 0x49, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb3, 0x03,
	0x0a, 0x14, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x69, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x49, 0x4f, 0x53,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x69, 0x6f, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x41, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x12, 0x38, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x03, 0x70,
	0x63, 0x69, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x43, 0x49, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03,
	0x70, 0x63, 0x69, 0x32, 0x77, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x76, 0x63, 0x12, 0x67, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x47, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x58, 0x0a, 0x14,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70,
	0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inventory_proto_rawDescOnce sync.Once
	file_inventory_proto_rawDescData = file_inventory_proto_rawDesc
)

func file_inventory_proto_rawDescGZIP() []byte {
	file_inventory_proto_rawDescOnce.Do(func() {
		file_inventory_proto_rawDescData = protoimpl.X.CompressGZIP(file_inventory_proto_rawDescData)
	})
	return file_inventory_proto_rawDescData
}

var file_inventory_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_inventory_proto_goTypes = []interface{}{
	(*BIOSInfo)(nil),             // 0: opi_api.inventory.v1.BIOSInfo
	(*SystemInfo)(nil),           // 1: opi_api.inventory.v1.SystemInfo
	(*ChassisInfo)(nil),          // 2: opi_api.inventory.v1.ChassisInfo
	(*BaseboardInfo)(nil),        // 3: opi_api.inventory.v1.BaseboardInfo
	(*CPUInfo)(nil),              // 4: opi_api.inventory.v1.CPUInfo
	(*MemoryInfo)(nil),           // 5: opi_api.inventory.v1.MemoryInfo
	(*PCIeDeviceInfo)(nil),       // 6: opi_api.inventory.v1.PCIeDeviceInfo
	(*InventoryGetRequest)(nil),  // 7: opi_api.inventory.v1.InventoryGetRequest
	(*InventoryGetResponse)(nil), // 8: opi_api.inventory.v1.InventoryGetResponse
}
var file_inventory_proto_depIdxs = []int32{
	0, // 0: opi_api.inventory.v1.InventoryGetResponse.bios:type_name -> opi_api.inventory.v1.BIOSInfo
	1, // 1: opi_api.inventory.v1.InventoryGetResponse.system:type_name -> opi_api.inventory.v1.SystemInfo
	3, // 2: opi_api.inventory.v1.InventoryGetResponse.baseboard:type_name -> opi_api.inventory.v1.BaseboardInfo
	2, // 3: opi_api.inventory.v1.InventoryGetResponse.chassis:type_name -> opi_api.inventory.v1.ChassisInfo
	4, // 4: opi_api.inventory.v1.InventoryGetResponse.processor:type_name -> opi_api.inventory.v1.CPUInfo
	5, // 5: opi_api.inventory.v1.InventoryGetResponse.memory:type_name -> opi_api.inventory.v1.MemoryInfo
	6, // 6: opi_api.inventory.v1.InventoryGetResponse.pci:type_name -> opi_api.inventory.v1.PCIeDeviceInfo
	7, // 7: opi_api.inventory.v1.InventorySvc.InventoryGet:input_type -> opi_api.inventory.v1.InventoryGetRequest
	8, // 8: opi_api.inventory.v1.InventorySvc.InventoryGet:output_type -> opi_api.inventory.v1.InventoryGetResponse
	8, // [8:9] is the sub-list for method output_type
	7, // [7:8] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_inventory_proto_init() }
func file_inventory_proto_init() {
	if File_inventory_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inventory_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BIOSInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChassisInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseboardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCIeDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inventory_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inventory_proto_goTypes,
		DependencyIndexes: file_inventory_proto_depIdxs,
		MessageInfos:      file_inventory_proto_msgTypes,
	}.Build()
	File_inventory_proto = out.File
	file_inventory_proto_rawDesc = nil
	file_inventory_proto_goTypes = nil
	file_inventory_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InventorySvcClient is the client API for InventorySvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventorySvcClient interface {
	// retrieves the inventory data for the device
	InventoryGet(ctx context.Context, in *InventoryGetRequest, opts ...grpc.CallOption) (*InventoryGetResponse, error)
}

type inventorySvcClient struct {
	cc grpc.ClientConnInterface
}

func NewInventorySvcClient(cc grpc.ClientConnInterface) InventorySvcClient {
	return &inventorySvcClient{cc}
}

func (c *inventorySvcClient) InventoryGet(ctx context.Context, in *InventoryGetRequest, opts ...grpc.CallOption) (*InventoryGetResponse, error) {
	out := new(InventoryGetResponse)
	err := c.cc.Invoke(ctx, "/opi_api.inventory.v1.InventorySvc/InventoryGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventorySvcServer is the server API for InventorySvc service.
type InventorySvcServer interface {
	// retrieves the inventory data for the device
	InventoryGet(context.Context, *InventoryGetRequest) (*InventoryGetResponse, error)
}

// UnimplementedInventorySvcServer can be embedded to have forward compatible implementations.
type UnimplementedInventorySvcServer struct {
}

func (*UnimplementedInventorySvcServer) InventoryGet(context.Context, *InventoryGetRequest) (*InventoryGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InventoryGet not implemented")
}

func RegisterInventorySvcServer(s *grpc.Server, srv InventorySvcServer) {
	s.RegisterService(&_InventorySvc_serviceDesc, srv)
}

func _InventorySvc_InventoryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventorySvcServer).InventoryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.inventory.v1.InventorySvc/InventoryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventorySvcServer).InventoryGet(ctx, req.(*InventoryGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InventorySvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.inventory.v1.InventorySvc",
	HandlerType: (*InventorySvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InventoryGet",
			Handler:    _InventorySvc_InventoryGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory.proto",
}
