// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networktypes.proto

package opi_api.network.opinetcommon.v1alpha1;

public interface RuleL4MatchOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.network.opinetcommon.v1alpha1.RuleL4Match)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * source and/or destination ports/ranges
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.PortMatch ports = 1;</code>
   * @return Whether the ports field is set.
   */
  boolean hasPorts();
  /**
   * <pre>
   * source and/or destination ports/ranges
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.PortMatch ports = 1;</code>
   * @return The ports.
   */
  opi_api.network.opinetcommon.v1alpha1.PortMatch getPorts();
  /**
   * <pre>
   * source and/or destination ports/ranges
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.PortMatch ports = 1;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.PortMatchOrBuilder getPortsOrBuilder();

  /**
   * <pre>
   * ICMP type/code match criteria
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.ICMPMatch type_code = 2;</code>
   * @return Whether the typeCode field is set.
   */
  boolean hasTypeCode();
  /**
   * <pre>
   * ICMP type/code match criteria
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.ICMPMatch type_code = 2;</code>
   * @return The typeCode.
   */
  opi_api.network.opinetcommon.v1alpha1.ICMPMatch getTypeCode();
  /**
   * <pre>
   * ICMP type/code match criteria
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.ICMPMatch type_code = 2;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.ICMPMatchOrBuilder getTypeCodeOrBuilder();

  /**
   * <pre>
   * list of source and/or destination ports/ranges
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.PortListMatch port_list = 3;</code>
   * @return Whether the portList field is set.
   */
  boolean hasPortList();
  /**
   * <pre>
   * list of source and/or destination ports/ranges
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.PortListMatch port_list = 3;</code>
   * @return The portList.
   */
  opi_api.network.opinetcommon.v1alpha1.PortListMatch getPortList();
  /**
   * <pre>
   * list of source and/or destination ports/ranges
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.PortListMatch port_list = 3;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.PortListMatchOrBuilder getPortListOrBuilder();

  /**
   * <pre>
   * list ICMP type/code match criteria
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.ICMPMatchList icmp_match_list = 4;</code>
   * @return Whether the icmpMatchList field is set.
   */
  boolean hasIcmpMatchList();
  /**
   * <pre>
   * list ICMP type/code match criteria
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.ICMPMatchList icmp_match_list = 4;</code>
   * @return The icmpMatchList.
   */
  opi_api.network.opinetcommon.v1alpha1.ICMPMatchList getIcmpMatchList();
  /**
   * <pre>
   * list ICMP type/code match criteria
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.ICMPMatchList icmp_match_list = 4;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.ICMPMatchListOrBuilder getIcmpMatchListOrBuilder();

  public opi_api.network.opinetcommon.v1alpha1.RuleL4Match.L4InfoCase getL4InfoCase();
}
