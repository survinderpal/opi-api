// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: openconfig_interfaces.proto
// Original file comments:
// openconfig-interfaces.proto file
// Derived from the OpenConfig interfaces model github.com/openconfig/public/release/models/interfaces
#ifndef GRPC_openconfig_5finterfaces_2eproto__INCLUDED
#define GRPC_openconfig_5finterfaces_2eproto__INCLUDED

#include "openconfig_interfaces.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace opi_api {
namespace network {
namespace v1 {

// Service functions for Network Interface exported by the server
class NetInterface final {
 public:
  static constexpr char const* service_full_name() {
    return "opi_api.network.v1.NetInterface";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Retrieves the interface information for a given interface
    virtual ::grpc::Status NetInterfaceGet(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest& request, ::opi_api::network::v1::NetInterfaceGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceGetResponse>> AsyncNetInterfaceGet(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceGetResponse>>(AsyncNetInterfaceGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceGetResponse>> PrepareAsyncNetInterfaceGet(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceGetResponse>>(PrepareAsyncNetInterfaceGetRaw(context, request, cq));
    }
    // Retrieves the set of interfaces on the device
    virtual ::grpc::Status NetInterfaceList(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceListRequest& request, ::opi_api::network::v1::NetInterfaceListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceListResponse>> AsyncNetInterfaceList(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceListResponse>>(AsyncNetInterfaceListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceListResponse>> PrepareAsyncNetInterfaceList(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceListResponse>>(PrepareAsyncNetInterfaceListRaw(context, request, cq));
    }
    // A method for setting or changing configuration of an interface
    virtual ::grpc::Status NetInterfaceUpdate(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest& request, ::opi_api::network::v1::NetInterfaceUpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceUpdateResponse>> AsyncNetInterfaceUpdate(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceUpdateResponse>>(AsyncNetInterfaceUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceUpdateResponse>> PrepareAsyncNetInterfaceUpdate(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceUpdateResponse>>(PrepareAsyncNetInterfaceUpdateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Retrieves the interface information for a given interface
      virtual void NetInterfaceGet(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest* request, ::opi_api::network::v1::NetInterfaceGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NetInterfaceGet(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest* request, ::opi_api::network::v1::NetInterfaceGetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the set of interfaces on the device
      virtual void NetInterfaceList(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceListRequest* request, ::opi_api::network::v1::NetInterfaceListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NetInterfaceList(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceListRequest* request, ::opi_api::network::v1::NetInterfaceListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // A method for setting or changing configuration of an interface
      virtual void NetInterfaceUpdate(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest* request, ::opi_api::network::v1::NetInterfaceUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NetInterfaceUpdate(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest* request, ::opi_api::network::v1::NetInterfaceUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceGetResponse>* AsyncNetInterfaceGetRaw(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceGetResponse>* PrepareAsyncNetInterfaceGetRaw(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceListResponse>* AsyncNetInterfaceListRaw(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceListResponse>* PrepareAsyncNetInterfaceListRaw(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceUpdateResponse>* AsyncNetInterfaceUpdateRaw(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::network::v1::NetInterfaceUpdateResponse>* PrepareAsyncNetInterfaceUpdateRaw(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status NetInterfaceGet(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest& request, ::opi_api::network::v1::NetInterfaceGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceGetResponse>> AsyncNetInterfaceGet(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceGetResponse>>(AsyncNetInterfaceGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceGetResponse>> PrepareAsyncNetInterfaceGet(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceGetResponse>>(PrepareAsyncNetInterfaceGetRaw(context, request, cq));
    }
    ::grpc::Status NetInterfaceList(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceListRequest& request, ::opi_api::network::v1::NetInterfaceListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceListResponse>> AsyncNetInterfaceList(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceListResponse>>(AsyncNetInterfaceListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceListResponse>> PrepareAsyncNetInterfaceList(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceListResponse>>(PrepareAsyncNetInterfaceListRaw(context, request, cq));
    }
    ::grpc::Status NetInterfaceUpdate(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest& request, ::opi_api::network::v1::NetInterfaceUpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceUpdateResponse>> AsyncNetInterfaceUpdate(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceUpdateResponse>>(AsyncNetInterfaceUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceUpdateResponse>> PrepareAsyncNetInterfaceUpdate(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceUpdateResponse>>(PrepareAsyncNetInterfaceUpdateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void NetInterfaceGet(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest* request, ::opi_api::network::v1::NetInterfaceGetResponse* response, std::function<void(::grpc::Status)>) override;
      void NetInterfaceGet(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest* request, ::opi_api::network::v1::NetInterfaceGetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NetInterfaceList(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceListRequest* request, ::opi_api::network::v1::NetInterfaceListResponse* response, std::function<void(::grpc::Status)>) override;
      void NetInterfaceList(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceListRequest* request, ::opi_api::network::v1::NetInterfaceListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NetInterfaceUpdate(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest* request, ::opi_api::network::v1::NetInterfaceUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void NetInterfaceUpdate(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest* request, ::opi_api::network::v1::NetInterfaceUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceGetResponse>* AsyncNetInterfaceGetRaw(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceGetResponse>* PrepareAsyncNetInterfaceGetRaw(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceListResponse>* AsyncNetInterfaceListRaw(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceListResponse>* PrepareAsyncNetInterfaceListRaw(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceUpdateResponse>* AsyncNetInterfaceUpdateRaw(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::network::v1::NetInterfaceUpdateResponse>* PrepareAsyncNetInterfaceUpdateRaw(::grpc::ClientContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NetInterfaceGet_;
    const ::grpc::internal::RpcMethod rpcmethod_NetInterfaceList_;
    const ::grpc::internal::RpcMethod rpcmethod_NetInterfaceUpdate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Retrieves the interface information for a given interface
    virtual ::grpc::Status NetInterfaceGet(::grpc::ServerContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest* request, ::opi_api::network::v1::NetInterfaceGetResponse* response);
    // Retrieves the set of interfaces on the device
    virtual ::grpc::Status NetInterfaceList(::grpc::ServerContext* context, const ::opi_api::network::v1::NetInterfaceListRequest* request, ::opi_api::network::v1::NetInterfaceListResponse* response);
    // A method for setting or changing configuration of an interface
    virtual ::grpc::Status NetInterfaceUpdate(::grpc::ServerContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest* request, ::opi_api::network::v1::NetInterfaceUpdateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NetInterfaceGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NetInterfaceGet() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NetInterfaceGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetInterfaceGet(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceGetRequest* /*request*/, ::opi_api::network::v1::NetInterfaceGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNetInterfaceGet(::grpc::ServerContext* context, ::opi_api::network::v1::NetInterfaceGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::v1::NetInterfaceGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NetInterfaceList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NetInterfaceList() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_NetInterfaceList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetInterfaceList(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceListRequest* /*request*/, ::opi_api::network::v1::NetInterfaceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNetInterfaceList(::grpc::ServerContext* context, ::opi_api::network::v1::NetInterfaceListRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::v1::NetInterfaceListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NetInterfaceUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NetInterfaceUpdate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_NetInterfaceUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetInterfaceUpdate(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceUpdateRequest* /*request*/, ::opi_api::network::v1::NetInterfaceUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNetInterfaceUpdate(::grpc::ServerContext* context, ::opi_api::network::v1::NetInterfaceUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::network::v1::NetInterfaceUpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NetInterfaceGet<WithAsyncMethod_NetInterfaceList<WithAsyncMethod_NetInterfaceUpdate<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_NetInterfaceGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NetInterfaceGet() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::v1::NetInterfaceGetRequest, ::opi_api::network::v1::NetInterfaceGetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::v1::NetInterfaceGetRequest* request, ::opi_api::network::v1::NetInterfaceGetResponse* response) { return this->NetInterfaceGet(context, request, response); }));}
    void SetMessageAllocatorFor_NetInterfaceGet(
        ::grpc::MessageAllocator< ::opi_api::network::v1::NetInterfaceGetRequest, ::opi_api::network::v1::NetInterfaceGetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::v1::NetInterfaceGetRequest, ::opi_api::network::v1::NetInterfaceGetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NetInterfaceGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetInterfaceGet(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceGetRequest* /*request*/, ::opi_api::network::v1::NetInterfaceGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NetInterfaceGet(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceGetRequest* /*request*/, ::opi_api::network::v1::NetInterfaceGetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NetInterfaceList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NetInterfaceList() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::v1::NetInterfaceListRequest, ::opi_api::network::v1::NetInterfaceListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::v1::NetInterfaceListRequest* request, ::opi_api::network::v1::NetInterfaceListResponse* response) { return this->NetInterfaceList(context, request, response); }));}
    void SetMessageAllocatorFor_NetInterfaceList(
        ::grpc::MessageAllocator< ::opi_api::network::v1::NetInterfaceListRequest, ::opi_api::network::v1::NetInterfaceListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::v1::NetInterfaceListRequest, ::opi_api::network::v1::NetInterfaceListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NetInterfaceList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetInterfaceList(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceListRequest* /*request*/, ::opi_api::network::v1::NetInterfaceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NetInterfaceList(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceListRequest* /*request*/, ::opi_api::network::v1::NetInterfaceListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NetInterfaceUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NetInterfaceUpdate() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::network::v1::NetInterfaceUpdateRequest, ::opi_api::network::v1::NetInterfaceUpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::network::v1::NetInterfaceUpdateRequest* request, ::opi_api::network::v1::NetInterfaceUpdateResponse* response) { return this->NetInterfaceUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_NetInterfaceUpdate(
        ::grpc::MessageAllocator< ::opi_api::network::v1::NetInterfaceUpdateRequest, ::opi_api::network::v1::NetInterfaceUpdateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::network::v1::NetInterfaceUpdateRequest, ::opi_api::network::v1::NetInterfaceUpdateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NetInterfaceUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetInterfaceUpdate(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceUpdateRequest* /*request*/, ::opi_api::network::v1::NetInterfaceUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NetInterfaceUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceUpdateRequest* /*request*/, ::opi_api::network::v1::NetInterfaceUpdateResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_NetInterfaceGet<WithCallbackMethod_NetInterfaceList<WithCallbackMethod_NetInterfaceUpdate<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_NetInterfaceGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NetInterfaceGet() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NetInterfaceGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetInterfaceGet(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceGetRequest* /*request*/, ::opi_api::network::v1::NetInterfaceGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NetInterfaceList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NetInterfaceList() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_NetInterfaceList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetInterfaceList(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceListRequest* /*request*/, ::opi_api::network::v1::NetInterfaceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NetInterfaceUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NetInterfaceUpdate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_NetInterfaceUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetInterfaceUpdate(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceUpdateRequest* /*request*/, ::opi_api::network::v1::NetInterfaceUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NetInterfaceGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NetInterfaceGet() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NetInterfaceGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetInterfaceGet(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceGetRequest* /*request*/, ::opi_api::network::v1::NetInterfaceGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNetInterfaceGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NetInterfaceList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NetInterfaceList() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_NetInterfaceList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetInterfaceList(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceListRequest* /*request*/, ::opi_api::network::v1::NetInterfaceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNetInterfaceList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NetInterfaceUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NetInterfaceUpdate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_NetInterfaceUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetInterfaceUpdate(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceUpdateRequest* /*request*/, ::opi_api::network::v1::NetInterfaceUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNetInterfaceUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NetInterfaceGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NetInterfaceGet() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NetInterfaceGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_NetInterfaceGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetInterfaceGet(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceGetRequest* /*request*/, ::opi_api::network::v1::NetInterfaceGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NetInterfaceGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NetInterfaceList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NetInterfaceList() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NetInterfaceList(context, request, response); }));
    }
    ~WithRawCallbackMethod_NetInterfaceList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetInterfaceList(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceListRequest* /*request*/, ::opi_api::network::v1::NetInterfaceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NetInterfaceList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NetInterfaceUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NetInterfaceUpdate() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NetInterfaceUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_NetInterfaceUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NetInterfaceUpdate(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceUpdateRequest* /*request*/, ::opi_api::network::v1::NetInterfaceUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NetInterfaceUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NetInterfaceGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NetInterfaceGet() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::v1::NetInterfaceGetRequest, ::opi_api::network::v1::NetInterfaceGetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::v1::NetInterfaceGetRequest, ::opi_api::network::v1::NetInterfaceGetResponse>* streamer) {
                       return this->StreamedNetInterfaceGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NetInterfaceGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NetInterfaceGet(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceGetRequest* /*request*/, ::opi_api::network::v1::NetInterfaceGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNetInterfaceGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::v1::NetInterfaceGetRequest,::opi_api::network::v1::NetInterfaceGetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NetInterfaceList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NetInterfaceList() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::v1::NetInterfaceListRequest, ::opi_api::network::v1::NetInterfaceListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::v1::NetInterfaceListRequest, ::opi_api::network::v1::NetInterfaceListResponse>* streamer) {
                       return this->StreamedNetInterfaceList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NetInterfaceList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NetInterfaceList(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceListRequest* /*request*/, ::opi_api::network::v1::NetInterfaceListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNetInterfaceList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::v1::NetInterfaceListRequest,::opi_api::network::v1::NetInterfaceListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NetInterfaceUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NetInterfaceUpdate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::network::v1::NetInterfaceUpdateRequest, ::opi_api::network::v1::NetInterfaceUpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::network::v1::NetInterfaceUpdateRequest, ::opi_api::network::v1::NetInterfaceUpdateResponse>* streamer) {
                       return this->StreamedNetInterfaceUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NetInterfaceUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NetInterfaceUpdate(::grpc::ServerContext* /*context*/, const ::opi_api::network::v1::NetInterfaceUpdateRequest* /*request*/, ::opi_api::network::v1::NetInterfaceUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNetInterfaceUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::network::v1::NetInterfaceUpdateRequest,::opi_api::network::v1::NetInterfaceUpdateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NetInterfaceGet<WithStreamedUnaryMethod_NetInterfaceList<WithStreamedUnaryMethod_NetInterfaceUpdate<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NetInterfaceGet<WithStreamedUnaryMethod_NetInterfaceList<WithStreamedUnaryMethod_NetInterfaceUpdate<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace network
}  // namespace opi_api


#endif  // GRPC_openconfig_5finterfaces_2eproto__INCLUDED
