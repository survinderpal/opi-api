// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig_interfaces.proto

#include "openconfig_interfaces.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace network {
namespace v1 {
constexpr Interface_Config::Interface_Config(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , mtu_(0u)
  , loopback_mode_(false)
  , enabled_(false){}
struct Interface_ConfigDefaultTypeInternal {
  constexpr Interface_ConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Interface_ConfigDefaultTypeInternal() {}
  union {
    Interface_Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Interface_ConfigDefaultTypeInternal _Interface_Config_default_instance_;
constexpr Interface_State_Counters::Interface_State_Counters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : in_octets_(uint64_t{0u})
  , in_packets_(uint64_t{0u})
  , in_unicast_pkts_(uint64_t{0u})
  , in_broadcast_pkts_(uint64_t{0u})
  , in_multicast_pkts_(uint64_t{0u})
  , in_discards_(uint64_t{0u})
  , in_errors_(uint64_t{0u})
  , in_unknown_protos_(uint64_t{0u})
  , in_fcs_errors_(uint64_t{0u})
  , out_octets_(uint64_t{0u})
  , out_packets_(uint64_t{0u})
  , out_unicast_pkts_(uint64_t{0u})
  , out_broadcast_pkts_(uint64_t{0u})
  , out_multicast_pkts_(uint64_t{0u})
  , out_discards_(uint64_t{0u})
  , out_errors_(uint64_t{0u})
  , carrier_transitions_(uint64_t{0u})
  , last_clear_(uint64_t{0u}){}
struct Interface_State_CountersDefaultTypeInternal {
  constexpr Interface_State_CountersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Interface_State_CountersDefaultTypeInternal() {}
  union {
    Interface_State_Counters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Interface_State_CountersDefaultTypeInternal _Interface_State_Counters_default_instance_;
constexpr Interface_State::Interface_State(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , counters_(nullptr)
  , type_(0)

  , mtu_(0u)
  , ifindex_(0u)
  , admin_status_(0)

  , loopback_mode_(false)
  , enabled_(false)
  , logical_(false)
  , management_(false)
  , oper_status_(0)

  , last_change_(uint64_t{0u})
  , cpu_(false){}
struct Interface_StateDefaultTypeInternal {
  constexpr Interface_StateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Interface_StateDefaultTypeInternal() {}
  union {
    Interface_State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Interface_StateDefaultTypeInternal _Interface_State_default_instance_;
constexpr Interface_HoldTime_Config::Interface_HoldTime_Config(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : up_(0u)
  , down_(0u){}
struct Interface_HoldTime_ConfigDefaultTypeInternal {
  constexpr Interface_HoldTime_ConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Interface_HoldTime_ConfigDefaultTypeInternal() {}
  union {
    Interface_HoldTime_Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Interface_HoldTime_ConfigDefaultTypeInternal _Interface_HoldTime_Config_default_instance_;
constexpr Interface_HoldTime_State::Interface_HoldTime_State(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : up_(0u)
  , down_(0u){}
struct Interface_HoldTime_StateDefaultTypeInternal {
  constexpr Interface_HoldTime_StateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Interface_HoldTime_StateDefaultTypeInternal() {}
  union {
    Interface_HoldTime_State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Interface_HoldTime_StateDefaultTypeInternal _Interface_HoldTime_State_default_instance_;
constexpr Interface_HoldTime::Interface_HoldTime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(nullptr)
  , state_(nullptr){}
struct Interface_HoldTimeDefaultTypeInternal {
  constexpr Interface_HoldTimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Interface_HoldTimeDefaultTypeInternal() {}
  union {
    Interface_HoldTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Interface_HoldTimeDefaultTypeInternal _Interface_HoldTime_default_instance_;
constexpr Interface_Subinterfaces_Subinterface_Config::Interface_Subinterfaces_Subinterface_Config(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(uint64_t{0u})
  , enabled_(false){}
struct Interface_Subinterfaces_Subinterface_ConfigDefaultTypeInternal {
  constexpr Interface_Subinterfaces_Subinterface_ConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Interface_Subinterfaces_Subinterface_ConfigDefaultTypeInternal() {}
  union {
    Interface_Subinterfaces_Subinterface_Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Interface_Subinterfaces_Subinterface_ConfigDefaultTypeInternal _Interface_Subinterfaces_Subinterface_Config_default_instance_;
constexpr Interface_Subinterfaces_Subinterface_State_Counters::Interface_Subinterfaces_Subinterface_State_Counters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : in_octets_(uint64_t{0u})
  , in_packets_(uint64_t{0u})
  , in_unicast_pkts_(uint64_t{0u})
  , in_broadcast_pkts_(uint64_t{0u})
  , in_multicast_pkts_(uint64_t{0u})
  , in_discards_(uint64_t{0u})
  , in_errors_(uint64_t{0u})
  , in_unknown_protos_(uint64_t{0u})
  , in_fcs_errors_(uint64_t{0u})
  , out_octets_(uint64_t{0u})
  , out_packets_(uint64_t{0u})
  , out_unicast_pkts_(uint64_t{0u})
  , out_broadcast_pkts_(uint64_t{0u})
  , out_multicast_pkts_(uint64_t{0u})
  , out_discards_(uint64_t{0u})
  , out_errors_(uint64_t{0u})
  , carrier_transitions_(uint64_t{0u})
  , last_clear_(uint64_t{0u}){}
struct Interface_Subinterfaces_Subinterface_State_CountersDefaultTypeInternal {
  constexpr Interface_Subinterfaces_Subinterface_State_CountersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Interface_Subinterfaces_Subinterface_State_CountersDefaultTypeInternal() {}
  union {
    Interface_Subinterfaces_Subinterface_State_Counters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Interface_Subinterfaces_Subinterface_State_CountersDefaultTypeInternal _Interface_Subinterfaces_Subinterface_State_Counters_default_instance_;
constexpr Interface_Subinterfaces_Subinterface_State::Interface_Subinterfaces_Subinterface_State(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , counters_(nullptr)
  , index_(0u)
  , ifindex_(0u)
  , admin_status_(0)

  , oper_status_(0)

  , last_change_(uint64_t{0u})
  , enabled_(false)
  , logical_(false)
  , management_(false)
  , cpu_(false){}
struct Interface_Subinterfaces_Subinterface_StateDefaultTypeInternal {
  constexpr Interface_Subinterfaces_Subinterface_StateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Interface_Subinterfaces_Subinterface_StateDefaultTypeInternal() {}
  union {
    Interface_Subinterfaces_Subinterface_State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Interface_Subinterfaces_Subinterface_StateDefaultTypeInternal _Interface_Subinterfaces_Subinterface_State_default_instance_;
constexpr Interface_Subinterfaces_Subinterface::Interface_Subinterfaces_Subinterface(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(nullptr)
  , state_(nullptr)
  , index_(uint64_t{0u}){}
struct Interface_Subinterfaces_SubinterfaceDefaultTypeInternal {
  constexpr Interface_Subinterfaces_SubinterfaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Interface_Subinterfaces_SubinterfaceDefaultTypeInternal() {}
  union {
    Interface_Subinterfaces_Subinterface _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Interface_Subinterfaces_SubinterfaceDefaultTypeInternal _Interface_Subinterfaces_Subinterface_default_instance_;
constexpr Interface_Subinterfaces::Interface_Subinterfaces(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subinterface_(){}
struct Interface_SubinterfacesDefaultTypeInternal {
  constexpr Interface_SubinterfacesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Interface_SubinterfacesDefaultTypeInternal() {}
  union {
    Interface_Subinterfaces _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Interface_SubinterfacesDefaultTypeInternal _Interface_Subinterfaces_default_instance_;
constexpr Interface::Interface(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , config_(nullptr)
  , state_(nullptr)
  , holdtime_(nullptr)
  , subinterfaces_(nullptr){}
struct InterfaceDefaultTypeInternal {
  constexpr InterfaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InterfaceDefaultTypeInternal() {}
  union {
    Interface _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InterfaceDefaultTypeInternal _Interface_default_instance_;
constexpr Interfaces::Interfaces(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interface_(){}
struct InterfacesDefaultTypeInternal {
  constexpr InterfacesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InterfacesDefaultTypeInternal() {}
  union {
    Interfaces _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InterfacesDefaultTypeInternal _Interfaces_default_instance_;
constexpr NetInterfaceGetRequest::NetInterfaceGetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NetInterfaceGetRequestDefaultTypeInternal {
  constexpr NetInterfaceGetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInterfaceGetRequestDefaultTypeInternal() {}
  union {
    NetInterfaceGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInterfaceGetRequestDefaultTypeInternal _NetInterfaceGetRequest_default_instance_;
constexpr NetInterfaceGetResponse::NetInterfaceGetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interface_(nullptr){}
struct NetInterfaceGetResponseDefaultTypeInternal {
  constexpr NetInterfaceGetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInterfaceGetResponseDefaultTypeInternal() {}
  union {
    NetInterfaceGetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInterfaceGetResponseDefaultTypeInternal _NetInterfaceGetResponse_default_instance_;
constexpr NetInterfaceListRequest::NetInterfaceListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NetInterfaceListRequestDefaultTypeInternal {
  constexpr NetInterfaceListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInterfaceListRequestDefaultTypeInternal() {}
  union {
    NetInterfaceListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInterfaceListRequestDefaultTypeInternal _NetInterfaceListRequest_default_instance_;
constexpr NetInterfaceListResponse::NetInterfaceListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interface_(){}
struct NetInterfaceListResponseDefaultTypeInternal {
  constexpr NetInterfaceListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInterfaceListResponseDefaultTypeInternal() {}
  union {
    NetInterfaceListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInterfaceListResponseDefaultTypeInternal _NetInterfaceListResponse_default_instance_;
constexpr NetInterfaceUpdateRequest::NetInterfaceUpdateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interface_(nullptr){}
struct NetInterfaceUpdateRequestDefaultTypeInternal {
  constexpr NetInterfaceUpdateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInterfaceUpdateRequestDefaultTypeInternal() {}
  union {
    NetInterfaceUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInterfaceUpdateRequestDefaultTypeInternal _NetInterfaceUpdateRequest_default_instance_;
constexpr NetInterfaceUpdateResponse::NetInterfaceUpdateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct NetInterfaceUpdateResponseDefaultTypeInternal {
  constexpr NetInterfaceUpdateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInterfaceUpdateResponseDefaultTypeInternal() {}
  union {
    NetInterfaceUpdateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInterfaceUpdateResponseDefaultTypeInternal _NetInterfaceUpdateResponse_default_instance_;
}  // namespace v1
}  // namespace network
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openconfig_5finterfaces_2eproto[19];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_openconfig_5finterfaces_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openconfig_5finterfaces_2eproto = nullptr;

const uint32_t TableStruct_openconfig_5finterfaces_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Config, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Config, type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Config, mtu_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Config, loopback_mode_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Config, description_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Config, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, in_octets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, in_packets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, in_unicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, in_broadcast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, in_multicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, in_discards_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, in_errors_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, in_unknown_protos_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, in_fcs_errors_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, out_octets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, out_packets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, out_unicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, out_broadcast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, out_multicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, out_discards_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, out_errors_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, carrier_transitions_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State_Counters, last_clear_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State, type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State, mtu_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State, loopback_mode_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State, description_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State, enabled_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State, ifindex_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State, admin_status_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State, oper_status_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State, last_change_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State, logical_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State, management_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State, cpu_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_State, counters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_HoldTime_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_HoldTime_Config, up_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_HoldTime_Config, down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_HoldTime_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_HoldTime_State, up_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_HoldTime_State, down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_HoldTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_HoldTime, config_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_HoldTime, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config, index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config, description_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, in_octets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, in_packets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, in_unicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, in_broadcast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, in_multicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, in_discards_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, in_errors_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, in_unknown_protos_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, in_fcs_errors_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, out_octets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, out_packets_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, out_unicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, out_broadcast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, out_multicast_pkts_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, out_discards_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, out_errors_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, carrier_transitions_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters, last_clear_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State, index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State, description_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State, enabled_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State, ifindex_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State, admin_status_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State, oper_status_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State, last_change_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State, logical_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State, management_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State, cpu_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State, counters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface, index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface, config_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces_Subinterface, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface_Subinterfaces, subinterface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface, config_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface, state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface, holdtime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interface, subinterfaces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interfaces, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::Interfaces, interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::NetInterfaceGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::NetInterfaceGetRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::NetInterfaceGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::NetInterfaceGetResponse, interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::NetInterfaceListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::NetInterfaceListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::NetInterfaceListResponse, interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::NetInterfaceUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::NetInterfaceUpdateRequest, interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::NetInterfaceUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::v1::NetInterfaceUpdateResponse, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::v1::Interface_Config)},
  { 12, -1, -1, sizeof(::opi_api::network::v1::Interface_State_Counters)},
  { 36, -1, -1, sizeof(::opi_api::network::v1::Interface_State)},
  { 56, -1, -1, sizeof(::opi_api::network::v1::Interface_HoldTime_Config)},
  { 64, -1, -1, sizeof(::opi_api::network::v1::Interface_HoldTime_State)},
  { 72, -1, -1, sizeof(::opi_api::network::v1::Interface_HoldTime)},
  { 80, -1, -1, sizeof(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config)},
  { 89, -1, -1, sizeof(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters)},
  { 113, -1, -1, sizeof(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State)},
  { 131, -1, -1, sizeof(::opi_api::network::v1::Interface_Subinterfaces_Subinterface)},
  { 140, -1, -1, sizeof(::opi_api::network::v1::Interface_Subinterfaces)},
  { 147, -1, -1, sizeof(::opi_api::network::v1::Interface)},
  { 158, -1, -1, sizeof(::opi_api::network::v1::Interfaces)},
  { 165, -1, -1, sizeof(::opi_api::network::v1::NetInterfaceGetRequest)},
  { 172, -1, -1, sizeof(::opi_api::network::v1::NetInterfaceGetResponse)},
  { 179, -1, -1, sizeof(::opi_api::network::v1::NetInterfaceListRequest)},
  { 185, -1, -1, sizeof(::opi_api::network::v1::NetInterfaceListResponse)},
  { 192, -1, -1, sizeof(::opi_api::network::v1::NetInterfaceUpdateRequest)},
  { 199, -1, -1, sizeof(::opi_api::network::v1::NetInterfaceUpdateResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_Interface_Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_Interface_State_Counters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_Interface_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_Interface_HoldTime_Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_Interface_HoldTime_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_Interface_HoldTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_Interface_Subinterfaces_Subinterface_Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_Interface_Subinterfaces_Subinterface_State_Counters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_Interface_Subinterfaces_Subinterface_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_Interface_Subinterfaces_Subinterface_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_Interface_Subinterfaces_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_Interface_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_Interfaces_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_NetInterfaceGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_NetInterfaceGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_NetInterfaceListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_NetInterfaceListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_NetInterfaceUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::v1::_NetInterfaceUpdateResponse_default_instance_),
};

const char descriptor_table_protodef_openconfig_5finterfaces_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033openconfig_interfaces.proto\022\022opi_api.n"
  "etwork.v1\"\275\024\n\tInterface\022\014\n\004name\030\001 \001(\t\0224\n"
  "\006config\030\002 \001(\0132$.opi_api.network.v1.Inter"
  "face.Config\0222\n\005state\030\003 \001(\0132#.opi_api.net"
  "work.v1.Interface.State\0228\n\010holdtime\030\004 \001("
  "\0132&.opi_api.network.v1.Interface.HoldTim"
  "e\022B\n\rsubinterfaces\030\005 \001(\0132+.opi_api.netwo"
  "rk.v1.Interface.Subinterfaces\032\221\001\n\006Config"
  "\022\014\n\004name\030\001 \001(\t\022/\n\004type\030\002 \001(\0162!.opi_api.n"
  "etwork.v1.InterfaceType\022\013\n\003mtu\030\003 \001(\r\022\025\n\r"
  "loopback_mode\030\004 \001(\010\022\023\n\013description\030\005 \001(\t"
  "\022\017\n\007enabled\030\006 \001(\010\032\316\006\n\005State\022\014\n\004name\030\001 \001("
  "\t\022/\n\004type\030\002 \001(\0162!.opi_api.network.v1.Int"
  "erfaceType\022\013\n\003mtu\030\003 \001(\r\022\025\n\rloopback_mode"
  "\030\004 \001(\010\022\023\n\013description\030\005 \001(\t\022\017\n\007enabled\030\006"
  " \001(\010\022\017\n\007ifindex\030\007 \001(\r\0228\n\014admin_status\030\010 "
  "\001(\0162\".opi_api.network.v1.InterfaceState\022"
  "7\n\013oper_status\030\t \001(\0162\".opi_api.network.v"
  "1.InterfaceState\022\023\n\013last_change\030\n \001(\004\022\017\n"
  "\007logical\030\013 \001(\010\022\022\n\nmanagement\030\014 \001(\010\022\013\n\003cp"
  "u\030\r \001(\010\022>\n\010counters\030\016 \001(\0132,.opi_api.netw"
  "ork.v1.Interface.State.Counters\032\260\003\n\010Coun"
  "ters\022\021\n\tin_octets\030\001 \001(\004\022\022\n\nin_packets\030\002 "
  "\001(\004\022\027\n\017in_unicast_pkts\030\003 \001(\004\022\031\n\021in_broad"
  "cast_pkts\030\004 \001(\004\022\031\n\021in_multicast_pkts\030\005 \001"
  "(\004\022\023\n\013in_discards\030\006 \001(\004\022\021\n\tin_errors\030\007 \001"
  "(\004\022\031\n\021in_unknown_protos\030\010 \001(\004\022\025\n\rin_fcs_"
  "errors\030\t \001(\004\022\022\n\nout_octets\030\n \001(\004\022\023\n\013out_"
  "packets\030\013 \001(\004\022\030\n\020out_unicast_pkts\030\014 \001(\004\022"
  "\032\n\022out_broadcast_pkts\030\r \001(\004\022\032\n\022out_multi"
  "cast_pkts\030\016 \001(\004\022\024\n\014out_discards\030\017 \001(\004\022\022\n"
  "\nout_errors\030\020 \001(\004\022\033\n\023carrier_transitions"
  "\030\021 \001(\004\022\022\n\nlast_clear\030\022 \001(\004\032\315\001\n\010HoldTime\022"
  "=\n\006config\030\001 \001(\0132-.opi_api.network.v1.Int"
  "erface.HoldTime.Config\022;\n\005state\030\002 \001(\0132,."
  "opi_api.network.v1.Interface.HoldTime.St"
  "ate\032\"\n\006Config\022\n\n\002up\030\001 \001(\r\022\014\n\004down\030\002 \001(\r\032"
  "!\n\005State\022\n\n\002up\030\001 \001(\r\022\014\n\004down\030\002 \001(\r\032\204\t\n\rS"
  "ubinterfaces\022N\n\014subinterface\030\002 \003(\01328.opi"
  "_api.network.v1.Interface.Subinterfaces."
  "Subinterface\032\242\010\n\014Subinterface\022\r\n\005index\030\001"
  " \001(\004\022O\n\006config\030\002 \001(\0132\?.opi_api.network.v"
  "1.Interface.Subinterfaces.Subinterface.C"
  "onfig\022M\n\005state\030\003 \001(\0132>.opi_api.network.v"
  "1.Interface.Subinterfaces.Subinterface.S"
  "tate\032=\n\006Config\022\r\n\005index\030\001 \001(\004\022\023\n\013descrip"
  "tion\030\002 \001(\t\022\017\n\007enabled\030\003 \001(\010\032\243\006\n\005State\022\r\n"
  "\005index\030\001 \001(\r\022\023\n\013description\030\002 \001(\t\022\017\n\007ena"
  "bled\030\003 \001(\010\022\014\n\004name\030\004 \001(\t\022\017\n\007ifindex\030\005 \001("
  "\r\0228\n\014admin_status\030\006 \001(\0162\".opi_api.networ"
  "k.v1.InterfaceState\0227\n\013oper_status\030\007 \001(\016"
  "2\".opi_api.network.v1.InterfaceState\022\023\n\013"
  "last_change\030\n \001(\004\022\017\n\007logical\030\013 \001(\010\022\022\n\nma"
  "nagement\030\014 \001(\010\022\013\n\003cpu\030\r \001(\010\022Y\n\010counters\030"
  "\016 \001(\0132G.opi_api.network.v1.Interface.Sub"
  "interfaces.Subinterface.State.Counters\032\260"
  "\003\n\010Counters\022\021\n\tin_octets\030\001 \001(\004\022\022\n\nin_pac"
  "kets\030\002 \001(\004\022\027\n\017in_unicast_pkts\030\003 \001(\004\022\031\n\021i"
  "n_broadcast_pkts\030\004 \001(\004\022\031\n\021in_multicast_p"
  "kts\030\005 \001(\004\022\023\n\013in_discards\030\006 \001(\004\022\021\n\tin_err"
  "ors\030\007 \001(\004\022\031\n\021in_unknown_protos\030\010 \001(\004\022\025\n\r"
  "in_fcs_errors\030\t \001(\004\022\022\n\nout_octets\030\n \001(\004\022"
  "\023\n\013out_packets\030\013 \001(\004\022\030\n\020out_unicast_pkts"
  "\030\014 \001(\004\022\032\n\022out_broadcast_pkts\030\r \001(\004\022\032\n\022ou"
  "t_multicast_pkts\030\016 \001(\004\022\024\n\014out_discards\030\017"
  " \001(\004\022\022\n\nout_errors\030\020 \001(\004\022\033\n\023carrier_tran"
  "sitions\030\021 \001(\004\022\022\n\nlast_clear\030\022 \001(\004\">\n\nInt"
  "erfaces\0220\n\tinterface\030\001 \003(\0132\035.opi_api.net"
  "work.v1.Interface\"&\n\026NetInterfaceGetRequ"
  "est\022\014\n\004name\030\001 \001(\t\"K\n\027NetInterfaceGetResp"
  "onse\0220\n\tinterface\030\001 \001(\0132\035.opi_api.networ"
  "k.v1.Interface\"\031\n\027NetInterfaceListReques"
  "t\"L\n\030NetInterfaceListResponse\0220\n\tinterfa"
  "ce\030\001 \003(\0132\035.opi_api.network.v1.Interface\""
  "M\n\031NetInterfaceUpdateRequest\0220\n\tinterfac"
  "e\030\001 \001(\0132\035.opi_api.network.v1.Interface\","
  "\n\032NetInterfaceUpdateResponse\022\016\n\006result\030\001"
  " \001(\r*+\n\rInterfaceType\022\014\n\010ETHERNET\020\000\022\014\n\010L"
  "OOPBACK\020\001*\"\n\016InterfaceState\022\010\n\004DOWN\020\000\022\006\n"
  "\002UP\020\0012\344\002\n\014NetInterface\022l\n\017NetInterfaceGe"
  "t\022*.opi_api.network.v1.NetInterfaceGetRe"
  "quest\032+.opi_api.network.v1.NetInterfaceG"
  "etResponse\"\000\022o\n\020NetInterfaceList\022+.opi_a"
  "pi.network.v1.NetInterfaceListRequest\032,."
  "opi_api.network.v1.NetInterfaceListRespo"
  "nse\"\000\022u\n\022NetInterfaceUpdate\022-.opi_api.ne"
  "twork.v1.NetInterfaceUpdateRequest\032..opi"
  "_api.network.v1.NetInterfaceUpdateRespon"
  "se\"\000B1Z/github.com/opiproject/opi-api/ne"
  "twork/v1/gen/gob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openconfig_5finterfaces_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openconfig_5finterfaces_2eproto = {
  false, false, 3583, descriptor_table_protodef_openconfig_5finterfaces_2eproto, "openconfig_interfaces.proto", 
  &descriptor_table_openconfig_5finterfaces_2eproto_once, nullptr, 0, 19,
  schemas, file_default_instances, TableStruct_openconfig_5finterfaces_2eproto::offsets,
  file_level_metadata_openconfig_5finterfaces_2eproto, file_level_enum_descriptors_openconfig_5finterfaces_2eproto, file_level_service_descriptors_openconfig_5finterfaces_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_openconfig_5finterfaces_2eproto_getter() {
  return &descriptor_table_openconfig_5finterfaces_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_openconfig_5finterfaces_2eproto(&descriptor_table_openconfig_5finterfaces_2eproto);
namespace opi_api {
namespace network {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InterfaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openconfig_5finterfaces_2eproto);
  return file_level_enum_descriptors_openconfig_5finterfaces_2eproto[0];
}
bool InterfaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InterfaceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_openconfig_5finterfaces_2eproto);
  return file_level_enum_descriptors_openconfig_5finterfaces_2eproto[1];
}
bool InterfaceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Interface_Config::_Internal {
 public:
};

Interface_Config::Interface_Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.Interface.Config)
}
Interface_Config::Interface_Config(const Interface_Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&type_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.Interface.Config)
}

inline void Interface_Config::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&type_)) + sizeof(enabled_));
}

Interface_Config::~Interface_Config() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.Interface.Config)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interface_Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Interface_Config::ArenaDtor(void* object) {
  Interface_Config* _this = reinterpret_cast< Interface_Config* >(object);
  (void)_this;
}
void Interface_Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface_Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interface_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.Interface.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  description_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&type_)) + sizeof(enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface_Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1.Interface.Config.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1.InterfaceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::v1::InterfaceType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 mtu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool loopback_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          loopback_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1.Interface.Config.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface_Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.Interface.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1.Interface.Config.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.v1.InterfaceType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 mtu = 3;
  if (this->_internal_mtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mtu(), target);
  }

  // bool loopback_mode = 4;
  if (this->_internal_loopback_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_loopback_mode(), target);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1.Interface.Config.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // bool enabled = 6;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.Interface.Config)
  return target;
}

size_t Interface_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.Interface.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .opi_api.network.v1.InterfaceType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 mtu = 3;
  if (this->_internal_mtu() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mtu());
  }

  // bool loopback_mode = 4;
  if (this->_internal_loopback_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool enabled = 6;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface_Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interface_Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface_Config::GetClassData() const { return &_class_data_; }

void Interface_Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interface_Config *>(to)->MergeFrom(
      static_cast<const Interface_Config &>(from));
}


void Interface_Config::MergeFrom(const Interface_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.Interface.Config)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_mtu() != 0) {
    _internal_set_mtu(from._internal_mtu());
  }
  if (from._internal_loopback_mode() != 0) {
    _internal_set_loopback_mode(from._internal_loopback_mode());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface_Config::CopyFrom(const Interface_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.Interface.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface_Config::IsInitialized() const {
  return true;
}

void Interface_Config::InternalSwap(Interface_Config* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interface_Config, enabled_)
      + sizeof(Interface_Config::enabled_)
      - PROTOBUF_FIELD_OFFSET(Interface_Config, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface_Config::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[0]);
}

// ===================================================================

class Interface_State_Counters::_Internal {
 public:
};

Interface_State_Counters::Interface_State_Counters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.Interface.State.Counters)
}
Interface_State_Counters::Interface_State_Counters(const Interface_State_Counters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&in_octets_, &from.in_octets_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_clear_) -
    reinterpret_cast<char*>(&in_octets_)) + sizeof(last_clear_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.Interface.State.Counters)
}

inline void Interface_State_Counters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&in_octets_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_clear_) -
    reinterpret_cast<char*>(&in_octets_)) + sizeof(last_clear_));
}

Interface_State_Counters::~Interface_State_Counters() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.Interface.State.Counters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interface_State_Counters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Interface_State_Counters::ArenaDtor(void* object) {
  Interface_State_Counters* _this = reinterpret_cast< Interface_State_Counters* >(object);
  (void)_this;
}
void Interface_State_Counters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface_State_Counters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interface_State_Counters::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.Interface.State.Counters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&in_octets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_clear_) -
      reinterpret_cast<char*>(&in_octets_)) + sizeof(last_clear_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface_State_Counters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 in_octets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          in_octets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_packets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          in_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_unicast_pkts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          in_unicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_broadcast_pkts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          in_broadcast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_multicast_pkts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          in_multicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_discards = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          in_discards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_errors = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          in_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_unknown_protos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          in_unknown_protos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_fcs_errors = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          in_fcs_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_octets = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          out_octets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_packets = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          out_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_unicast_pkts = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          out_unicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_broadcast_pkts = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          out_broadcast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_multicast_pkts = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          out_multicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_discards = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          out_discards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_errors = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          out_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 carrier_transitions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          carrier_transitions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_clear = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          last_clear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface_State_Counters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.Interface.State.Counters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 in_octets = 1;
  if (this->_internal_in_octets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_in_octets(), target);
  }

  // uint64 in_packets = 2;
  if (this->_internal_in_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_in_packets(), target);
  }

  // uint64 in_unicast_pkts = 3;
  if (this->_internal_in_unicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_in_unicast_pkts(), target);
  }

  // uint64 in_broadcast_pkts = 4;
  if (this->_internal_in_broadcast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_in_broadcast_pkts(), target);
  }

  // uint64 in_multicast_pkts = 5;
  if (this->_internal_in_multicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_in_multicast_pkts(), target);
  }

  // uint64 in_discards = 6;
  if (this->_internal_in_discards() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_in_discards(), target);
  }

  // uint64 in_errors = 7;
  if (this->_internal_in_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_in_errors(), target);
  }

  // uint64 in_unknown_protos = 8;
  if (this->_internal_in_unknown_protos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_in_unknown_protos(), target);
  }

  // uint64 in_fcs_errors = 9;
  if (this->_internal_in_fcs_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_in_fcs_errors(), target);
  }

  // uint64 out_octets = 10;
  if (this->_internal_out_octets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_out_octets(), target);
  }

  // uint64 out_packets = 11;
  if (this->_internal_out_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_out_packets(), target);
  }

  // uint64 out_unicast_pkts = 12;
  if (this->_internal_out_unicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_out_unicast_pkts(), target);
  }

  // uint64 out_broadcast_pkts = 13;
  if (this->_internal_out_broadcast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_out_broadcast_pkts(), target);
  }

  // uint64 out_multicast_pkts = 14;
  if (this->_internal_out_multicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_out_multicast_pkts(), target);
  }

  // uint64 out_discards = 15;
  if (this->_internal_out_discards() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_out_discards(), target);
  }

  // uint64 out_errors = 16;
  if (this->_internal_out_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_out_errors(), target);
  }

  // uint64 carrier_transitions = 17;
  if (this->_internal_carrier_transitions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_carrier_transitions(), target);
  }

  // uint64 last_clear = 18;
  if (this->_internal_last_clear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_last_clear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.Interface.State.Counters)
  return target;
}

size_t Interface_State_Counters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.Interface.State.Counters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 in_octets = 1;
  if (this->_internal_in_octets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_octets());
  }

  // uint64 in_packets = 2;
  if (this->_internal_in_packets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_packets());
  }

  // uint64 in_unicast_pkts = 3;
  if (this->_internal_in_unicast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_unicast_pkts());
  }

  // uint64 in_broadcast_pkts = 4;
  if (this->_internal_in_broadcast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_broadcast_pkts());
  }

  // uint64 in_multicast_pkts = 5;
  if (this->_internal_in_multicast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_multicast_pkts());
  }

  // uint64 in_discards = 6;
  if (this->_internal_in_discards() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_discards());
  }

  // uint64 in_errors = 7;
  if (this->_internal_in_errors() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_errors());
  }

  // uint64 in_unknown_protos = 8;
  if (this->_internal_in_unknown_protos() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_unknown_protos());
  }

  // uint64 in_fcs_errors = 9;
  if (this->_internal_in_fcs_errors() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_fcs_errors());
  }

  // uint64 out_octets = 10;
  if (this->_internal_out_octets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_octets());
  }

  // uint64 out_packets = 11;
  if (this->_internal_out_packets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_packets());
  }

  // uint64 out_unicast_pkts = 12;
  if (this->_internal_out_unicast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_unicast_pkts());
  }

  // uint64 out_broadcast_pkts = 13;
  if (this->_internal_out_broadcast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_broadcast_pkts());
  }

  // uint64 out_multicast_pkts = 14;
  if (this->_internal_out_multicast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_multicast_pkts());
  }

  // uint64 out_discards = 15;
  if (this->_internal_out_discards() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_discards());
  }

  // uint64 out_errors = 16;
  if (this->_internal_out_errors() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_out_errors());
  }

  // uint64 carrier_transitions = 17;
  if (this->_internal_carrier_transitions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_carrier_transitions());
  }

  // uint64 last_clear = 18;
  if (this->_internal_last_clear() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_clear());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface_State_Counters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interface_State_Counters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface_State_Counters::GetClassData() const { return &_class_data_; }

void Interface_State_Counters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interface_State_Counters *>(to)->MergeFrom(
      static_cast<const Interface_State_Counters &>(from));
}


void Interface_State_Counters::MergeFrom(const Interface_State_Counters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.Interface.State.Counters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_in_octets() != 0) {
    _internal_set_in_octets(from._internal_in_octets());
  }
  if (from._internal_in_packets() != 0) {
    _internal_set_in_packets(from._internal_in_packets());
  }
  if (from._internal_in_unicast_pkts() != 0) {
    _internal_set_in_unicast_pkts(from._internal_in_unicast_pkts());
  }
  if (from._internal_in_broadcast_pkts() != 0) {
    _internal_set_in_broadcast_pkts(from._internal_in_broadcast_pkts());
  }
  if (from._internal_in_multicast_pkts() != 0) {
    _internal_set_in_multicast_pkts(from._internal_in_multicast_pkts());
  }
  if (from._internal_in_discards() != 0) {
    _internal_set_in_discards(from._internal_in_discards());
  }
  if (from._internal_in_errors() != 0) {
    _internal_set_in_errors(from._internal_in_errors());
  }
  if (from._internal_in_unknown_protos() != 0) {
    _internal_set_in_unknown_protos(from._internal_in_unknown_protos());
  }
  if (from._internal_in_fcs_errors() != 0) {
    _internal_set_in_fcs_errors(from._internal_in_fcs_errors());
  }
  if (from._internal_out_octets() != 0) {
    _internal_set_out_octets(from._internal_out_octets());
  }
  if (from._internal_out_packets() != 0) {
    _internal_set_out_packets(from._internal_out_packets());
  }
  if (from._internal_out_unicast_pkts() != 0) {
    _internal_set_out_unicast_pkts(from._internal_out_unicast_pkts());
  }
  if (from._internal_out_broadcast_pkts() != 0) {
    _internal_set_out_broadcast_pkts(from._internal_out_broadcast_pkts());
  }
  if (from._internal_out_multicast_pkts() != 0) {
    _internal_set_out_multicast_pkts(from._internal_out_multicast_pkts());
  }
  if (from._internal_out_discards() != 0) {
    _internal_set_out_discards(from._internal_out_discards());
  }
  if (from._internal_out_errors() != 0) {
    _internal_set_out_errors(from._internal_out_errors());
  }
  if (from._internal_carrier_transitions() != 0) {
    _internal_set_carrier_transitions(from._internal_carrier_transitions());
  }
  if (from._internal_last_clear() != 0) {
    _internal_set_last_clear(from._internal_last_clear());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface_State_Counters::CopyFrom(const Interface_State_Counters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.Interface.State.Counters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface_State_Counters::IsInitialized() const {
  return true;
}

void Interface_State_Counters::InternalSwap(Interface_State_Counters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interface_State_Counters, last_clear_)
      + sizeof(Interface_State_Counters::last_clear_)
      - PROTOBUF_FIELD_OFFSET(Interface_State_Counters, in_octets_)>(
          reinterpret_cast<char*>(&in_octets_),
          reinterpret_cast<char*>(&other->in_octets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface_State_Counters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[1]);
}

// ===================================================================

class Interface_State::_Internal {
 public:
  static const ::opi_api::network::v1::Interface_State_Counters& counters(const Interface_State* msg);
};

const ::opi_api::network::v1::Interface_State_Counters&
Interface_State::_Internal::counters(const Interface_State* msg) {
  return *msg->counters_;
}
Interface_State::Interface_State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.Interface.State)
}
Interface_State::Interface_State(const Interface_State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_counters()) {
    counters_ = new ::opi_api::network::v1::Interface_State_Counters(*from.counters_);
  } else {
    counters_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpu_) -
    reinterpret_cast<char*>(&type_)) + sizeof(cpu_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.Interface.State)
}

inline void Interface_State::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&counters_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cpu_) -
    reinterpret_cast<char*>(&counters_)) + sizeof(cpu_));
}

Interface_State::~Interface_State() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.Interface.State)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interface_State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete counters_;
}

void Interface_State::ArenaDtor(void* object) {
  Interface_State* _this = reinterpret_cast< Interface_State* >(object);
  (void)_this;
}
void Interface_State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface_State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interface_State::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.Interface.State)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && counters_ != nullptr) {
    delete counters_;
  }
  counters_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_) -
      reinterpret_cast<char*>(&type_)) + sizeof(cpu_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface_State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1.Interface.State.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1.InterfaceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::v1::InterfaceType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 mtu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool loopback_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          loopback_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1.Interface.State.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ifindex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ifindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1.InterfaceState admin_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_admin_status(static_cast<::opi_api::network::v1::InterfaceState>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1.InterfaceState oper_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper_status(static_cast<::opi_api::network::v1::InterfaceState>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 last_change = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          last_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool logical = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          logical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool management = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          management_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool cpu = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1.Interface.State.Counters counters = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_counters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface_State::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.Interface.State)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1.Interface.State.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.v1.InterfaceType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 mtu = 3;
  if (this->_internal_mtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mtu(), target);
  }

  // bool loopback_mode = 4;
  if (this->_internal_loopback_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_loopback_mode(), target);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1.Interface.State.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // bool enabled = 6;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // uint32 ifindex = 7;
  if (this->_internal_ifindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ifindex(), target);
  }

  // .opi_api.network.v1.InterfaceState admin_status = 8;
  if (this->_internal_admin_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_admin_status(), target);
  }

  // .opi_api.network.v1.InterfaceState oper_status = 9;
  if (this->_internal_oper_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_oper_status(), target);
  }

  // uint64 last_change = 10;
  if (this->_internal_last_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_last_change(), target);
  }

  // bool logical = 11;
  if (this->_internal_logical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_logical(), target);
  }

  // bool management = 12;
  if (this->_internal_management() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_management(), target);
  }

  // bool cpu = 13;
  if (this->_internal_cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_cpu(), target);
  }

  // .opi_api.network.v1.Interface.State.Counters counters = 14;
  if (this->_internal_has_counters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::counters(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.Interface.State)
  return target;
}

size_t Interface_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.Interface.State)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .opi_api.network.v1.Interface.State.Counters counters = 14;
  if (this->_internal_has_counters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *counters_);
  }

  // .opi_api.network.v1.InterfaceType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 mtu = 3;
  if (this->_internal_mtu() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mtu());
  }

  // uint32 ifindex = 7;
  if (this->_internal_ifindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ifindex());
  }

  // .opi_api.network.v1.InterfaceState admin_status = 8;
  if (this->_internal_admin_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_admin_status());
  }

  // bool loopback_mode = 4;
  if (this->_internal_loopback_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool enabled = 6;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool logical = 11;
  if (this->_internal_logical() != 0) {
    total_size += 1 + 1;
  }

  // bool management = 12;
  if (this->_internal_management() != 0) {
    total_size += 1 + 1;
  }

  // .opi_api.network.v1.InterfaceState oper_status = 9;
  if (this->_internal_oper_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper_status());
  }

  // uint64 last_change = 10;
  if (this->_internal_last_change() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_last_change());
  }

  // bool cpu = 13;
  if (this->_internal_cpu() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface_State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interface_State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface_State::GetClassData() const { return &_class_data_; }

void Interface_State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interface_State *>(to)->MergeFrom(
      static_cast<const Interface_State &>(from));
}


void Interface_State::MergeFrom(const Interface_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.Interface.State)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_counters()) {
    _internal_mutable_counters()->::opi_api::network::v1::Interface_State_Counters::MergeFrom(from._internal_counters());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_mtu() != 0) {
    _internal_set_mtu(from._internal_mtu());
  }
  if (from._internal_ifindex() != 0) {
    _internal_set_ifindex(from._internal_ifindex());
  }
  if (from._internal_admin_status() != 0) {
    _internal_set_admin_status(from._internal_admin_status());
  }
  if (from._internal_loopback_mode() != 0) {
    _internal_set_loopback_mode(from._internal_loopback_mode());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_logical() != 0) {
    _internal_set_logical(from._internal_logical());
  }
  if (from._internal_management() != 0) {
    _internal_set_management(from._internal_management());
  }
  if (from._internal_oper_status() != 0) {
    _internal_set_oper_status(from._internal_oper_status());
  }
  if (from._internal_last_change() != 0) {
    _internal_set_last_change(from._internal_last_change());
  }
  if (from._internal_cpu() != 0) {
    _internal_set_cpu(from._internal_cpu());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface_State::CopyFrom(const Interface_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.Interface.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface_State::IsInitialized() const {
  return true;
}

void Interface_State::InternalSwap(Interface_State* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interface_State, cpu_)
      + sizeof(Interface_State::cpu_)
      - PROTOBUF_FIELD_OFFSET(Interface_State, counters_)>(
          reinterpret_cast<char*>(&counters_),
          reinterpret_cast<char*>(&other->counters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface_State::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[2]);
}

// ===================================================================

class Interface_HoldTime_Config::_Internal {
 public:
};

Interface_HoldTime_Config::Interface_HoldTime_Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.Interface.HoldTime.Config)
}
Interface_HoldTime_Config::Interface_HoldTime_Config(const Interface_HoldTime_Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&up_, &from.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_) -
    reinterpret_cast<char*>(&up_)) + sizeof(down_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.Interface.HoldTime.Config)
}

inline void Interface_HoldTime_Config::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&up_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&down_) -
    reinterpret_cast<char*>(&up_)) + sizeof(down_));
}

Interface_HoldTime_Config::~Interface_HoldTime_Config() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.Interface.HoldTime.Config)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interface_HoldTime_Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Interface_HoldTime_Config::ArenaDtor(void* object) {
  Interface_HoldTime_Config* _this = reinterpret_cast< Interface_HoldTime_Config* >(object);
  (void)_this;
}
void Interface_HoldTime_Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface_HoldTime_Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interface_HoldTime_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.Interface.HoldTime.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_) -
      reinterpret_cast<char*>(&up_)) + sizeof(down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface_HoldTime_Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 down = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface_HoldTime_Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.Interface.HoldTime.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 up = 1;
  if (this->_internal_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_up(), target);
  }

  // uint32 down = 2;
  if (this->_internal_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.Interface.HoldTime.Config)
  return target;
}

size_t Interface_HoldTime_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.Interface.HoldTime.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 up = 1;
  if (this->_internal_up() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_up());
  }

  // uint32 down = 2;
  if (this->_internal_down() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_down());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface_HoldTime_Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interface_HoldTime_Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface_HoldTime_Config::GetClassData() const { return &_class_data_; }

void Interface_HoldTime_Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interface_HoldTime_Config *>(to)->MergeFrom(
      static_cast<const Interface_HoldTime_Config &>(from));
}


void Interface_HoldTime_Config::MergeFrom(const Interface_HoldTime_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.Interface.HoldTime.Config)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_up() != 0) {
    _internal_set_up(from._internal_up());
  }
  if (from._internal_down() != 0) {
    _internal_set_down(from._internal_down());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface_HoldTime_Config::CopyFrom(const Interface_HoldTime_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.Interface.HoldTime.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface_HoldTime_Config::IsInitialized() const {
  return true;
}

void Interface_HoldTime_Config::InternalSwap(Interface_HoldTime_Config* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interface_HoldTime_Config, down_)
      + sizeof(Interface_HoldTime_Config::down_)
      - PROTOBUF_FIELD_OFFSET(Interface_HoldTime_Config, up_)>(
          reinterpret_cast<char*>(&up_),
          reinterpret_cast<char*>(&other->up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface_HoldTime_Config::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[3]);
}

// ===================================================================

class Interface_HoldTime_State::_Internal {
 public:
};

Interface_HoldTime_State::Interface_HoldTime_State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.Interface.HoldTime.State)
}
Interface_HoldTime_State::Interface_HoldTime_State(const Interface_HoldTime_State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&up_, &from.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_) -
    reinterpret_cast<char*>(&up_)) + sizeof(down_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.Interface.HoldTime.State)
}

inline void Interface_HoldTime_State::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&up_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&down_) -
    reinterpret_cast<char*>(&up_)) + sizeof(down_));
}

Interface_HoldTime_State::~Interface_HoldTime_State() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.Interface.HoldTime.State)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interface_HoldTime_State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Interface_HoldTime_State::ArenaDtor(void* object) {
  Interface_HoldTime_State* _this = reinterpret_cast< Interface_HoldTime_State* >(object);
  (void)_this;
}
void Interface_HoldTime_State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface_HoldTime_State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interface_HoldTime_State::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.Interface.HoldTime.State)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_) -
      reinterpret_cast<char*>(&up_)) + sizeof(down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface_HoldTime_State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 down = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface_HoldTime_State::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.Interface.HoldTime.State)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 up = 1;
  if (this->_internal_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_up(), target);
  }

  // uint32 down = 2;
  if (this->_internal_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.Interface.HoldTime.State)
  return target;
}

size_t Interface_HoldTime_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.Interface.HoldTime.State)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 up = 1;
  if (this->_internal_up() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_up());
  }

  // uint32 down = 2;
  if (this->_internal_down() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_down());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface_HoldTime_State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interface_HoldTime_State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface_HoldTime_State::GetClassData() const { return &_class_data_; }

void Interface_HoldTime_State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interface_HoldTime_State *>(to)->MergeFrom(
      static_cast<const Interface_HoldTime_State &>(from));
}


void Interface_HoldTime_State::MergeFrom(const Interface_HoldTime_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.Interface.HoldTime.State)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_up() != 0) {
    _internal_set_up(from._internal_up());
  }
  if (from._internal_down() != 0) {
    _internal_set_down(from._internal_down());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface_HoldTime_State::CopyFrom(const Interface_HoldTime_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.Interface.HoldTime.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface_HoldTime_State::IsInitialized() const {
  return true;
}

void Interface_HoldTime_State::InternalSwap(Interface_HoldTime_State* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interface_HoldTime_State, down_)
      + sizeof(Interface_HoldTime_State::down_)
      - PROTOBUF_FIELD_OFFSET(Interface_HoldTime_State, up_)>(
          reinterpret_cast<char*>(&up_),
          reinterpret_cast<char*>(&other->up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface_HoldTime_State::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[4]);
}

// ===================================================================

class Interface_HoldTime::_Internal {
 public:
  static const ::opi_api::network::v1::Interface_HoldTime_Config& config(const Interface_HoldTime* msg);
  static const ::opi_api::network::v1::Interface_HoldTime_State& state(const Interface_HoldTime* msg);
};

const ::opi_api::network::v1::Interface_HoldTime_Config&
Interface_HoldTime::_Internal::config(const Interface_HoldTime* msg) {
  return *msg->config_;
}
const ::opi_api::network::v1::Interface_HoldTime_State&
Interface_HoldTime::_Internal::state(const Interface_HoldTime* msg) {
  return *msg->state_;
}
Interface_HoldTime::Interface_HoldTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.Interface.HoldTime)
}
Interface_HoldTime::Interface_HoldTime(const Interface_HoldTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::opi_api::network::v1::Interface_HoldTime_Config(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::opi_api::network::v1::Interface_HoldTime_State(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.Interface.HoldTime)
}

inline void Interface_HoldTime::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

Interface_HoldTime::~Interface_HoldTime() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.Interface.HoldTime)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interface_HoldTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Interface_HoldTime::ArenaDtor(void* object) {
  Interface_HoldTime* _this = reinterpret_cast< Interface_HoldTime* >(object);
  (void)_this;
}
void Interface_HoldTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface_HoldTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interface_HoldTime::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.Interface.HoldTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface_HoldTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.v1.Interface.HoldTime.Config config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1.Interface.HoldTime.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface_HoldTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.Interface.HoldTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.v1.Interface.HoldTime.Config config = 1;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .opi_api.network.v1.Interface.HoldTime.State state = 2;
  if (this->_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.Interface.HoldTime)
  return target;
}

size_t Interface_HoldTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.Interface.HoldTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.v1.Interface.HoldTime.Config config = 1;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .opi_api.network.v1.Interface.HoldTime.State state = 2;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface_HoldTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interface_HoldTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface_HoldTime::GetClassData() const { return &_class_data_; }

void Interface_HoldTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interface_HoldTime *>(to)->MergeFrom(
      static_cast<const Interface_HoldTime &>(from));
}


void Interface_HoldTime::MergeFrom(const Interface_HoldTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.Interface.HoldTime)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _internal_mutable_config()->::opi_api::network::v1::Interface_HoldTime_Config::MergeFrom(from._internal_config());
  }
  if (from._internal_has_state()) {
    _internal_mutable_state()->::opi_api::network::v1::Interface_HoldTime_State::MergeFrom(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface_HoldTime::CopyFrom(const Interface_HoldTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.Interface.HoldTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface_HoldTime::IsInitialized() const {
  return true;
}

void Interface_HoldTime::InternalSwap(Interface_HoldTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interface_HoldTime, state_)
      + sizeof(Interface_HoldTime::state_)
      - PROTOBUF_FIELD_OFFSET(Interface_HoldTime, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface_HoldTime::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[5]);
}

// ===================================================================

class Interface_Subinterfaces_Subinterface_Config::_Internal {
 public:
};

Interface_Subinterfaces_Subinterface_Config::Interface_Subinterfaces_Subinterface_Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config)
}
Interface_Subinterfaces_Subinterface_Config::Interface_Subinterfaces_Subinterface_Config(const Interface_Subinterfaces_Subinterface_Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&index_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config)
}

inline void Interface_Subinterfaces_Subinterface_Config::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&index_)) + sizeof(enabled_));
}

Interface_Subinterfaces_Subinterface_Config::~Interface_Subinterfaces_Subinterface_Config() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interface_Subinterfaces_Subinterface_Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Interface_Subinterfaces_Subinterface_Config::ArenaDtor(void* object) {
  Interface_Subinterfaces_Subinterface_Config* _this = reinterpret_cast< Interface_Subinterfaces_Subinterface_Config* >(object);
  (void)_this;
}
void Interface_Subinterfaces_Subinterface_Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface_Subinterfaces_Subinterface_Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interface_Subinterfaces_Subinterface_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&index_)) + sizeof(enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface_Subinterfaces_Subinterface_Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface_Subinterfaces_Subinterface_Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // bool enabled = 3;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config)
  return target;
}

size_t Interface_Subinterfaces_Subinterface_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  // bool enabled = 3;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface_Subinterfaces_Subinterface_Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interface_Subinterfaces_Subinterface_Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface_Subinterfaces_Subinterface_Config::GetClassData() const { return &_class_data_; }

void Interface_Subinterfaces_Subinterface_Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interface_Subinterfaces_Subinterface_Config *>(to)->MergeFrom(
      static_cast<const Interface_Subinterfaces_Subinterface_Config &>(from));
}


void Interface_Subinterfaces_Subinterface_Config::MergeFrom(const Interface_Subinterfaces_Subinterface_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface_Subinterfaces_Subinterface_Config::CopyFrom(const Interface_Subinterfaces_Subinterface_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface_Subinterfaces_Subinterface_Config::IsInitialized() const {
  return true;
}

void Interface_Subinterfaces_Subinterface_Config::InternalSwap(Interface_Subinterfaces_Subinterface_Config* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interface_Subinterfaces_Subinterface_Config, enabled_)
      + sizeof(Interface_Subinterfaces_Subinterface_Config::enabled_)
      - PROTOBUF_FIELD_OFFSET(Interface_Subinterfaces_Subinterface_Config, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface_Subinterfaces_Subinterface_Config::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[6]);
}

// ===================================================================

class Interface_Subinterfaces_Subinterface_State_Counters::_Internal {
 public:
};

Interface_Subinterfaces_Subinterface_State_Counters::Interface_Subinterfaces_Subinterface_State_Counters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters)
}
Interface_Subinterfaces_Subinterface_State_Counters::Interface_Subinterfaces_Subinterface_State_Counters(const Interface_Subinterfaces_Subinterface_State_Counters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&in_octets_, &from.in_octets_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_clear_) -
    reinterpret_cast<char*>(&in_octets_)) + sizeof(last_clear_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters)
}

inline void Interface_Subinterfaces_Subinterface_State_Counters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&in_octets_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_clear_) -
    reinterpret_cast<char*>(&in_octets_)) + sizeof(last_clear_));
}

Interface_Subinterfaces_Subinterface_State_Counters::~Interface_Subinterfaces_Subinterface_State_Counters() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interface_Subinterfaces_Subinterface_State_Counters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Interface_Subinterfaces_Subinterface_State_Counters::ArenaDtor(void* object) {
  Interface_Subinterfaces_Subinterface_State_Counters* _this = reinterpret_cast< Interface_Subinterfaces_Subinterface_State_Counters* >(object);
  (void)_this;
}
void Interface_Subinterfaces_Subinterface_State_Counters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface_Subinterfaces_Subinterface_State_Counters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interface_Subinterfaces_Subinterface_State_Counters::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&in_octets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_clear_) -
      reinterpret_cast<char*>(&in_octets_)) + sizeof(last_clear_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface_Subinterfaces_Subinterface_State_Counters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 in_octets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          in_octets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_packets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          in_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_unicast_pkts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          in_unicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_broadcast_pkts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          in_broadcast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_multicast_pkts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          in_multicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_discards = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          in_discards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_errors = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          in_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_unknown_protos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          in_unknown_protos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_fcs_errors = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          in_fcs_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_octets = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          out_octets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_packets = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          out_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_unicast_pkts = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          out_unicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_broadcast_pkts = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          out_broadcast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_multicast_pkts = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          out_multicast_pkts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_discards = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          out_discards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_errors = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          out_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 carrier_transitions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          carrier_transitions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_clear = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          last_clear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface_Subinterfaces_Subinterface_State_Counters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 in_octets = 1;
  if (this->_internal_in_octets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_in_octets(), target);
  }

  // uint64 in_packets = 2;
  if (this->_internal_in_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_in_packets(), target);
  }

  // uint64 in_unicast_pkts = 3;
  if (this->_internal_in_unicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_in_unicast_pkts(), target);
  }

  // uint64 in_broadcast_pkts = 4;
  if (this->_internal_in_broadcast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_in_broadcast_pkts(), target);
  }

  // uint64 in_multicast_pkts = 5;
  if (this->_internal_in_multicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_in_multicast_pkts(), target);
  }

  // uint64 in_discards = 6;
  if (this->_internal_in_discards() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_in_discards(), target);
  }

  // uint64 in_errors = 7;
  if (this->_internal_in_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_in_errors(), target);
  }

  // uint64 in_unknown_protos = 8;
  if (this->_internal_in_unknown_protos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_in_unknown_protos(), target);
  }

  // uint64 in_fcs_errors = 9;
  if (this->_internal_in_fcs_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_in_fcs_errors(), target);
  }

  // uint64 out_octets = 10;
  if (this->_internal_out_octets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_out_octets(), target);
  }

  // uint64 out_packets = 11;
  if (this->_internal_out_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_out_packets(), target);
  }

  // uint64 out_unicast_pkts = 12;
  if (this->_internal_out_unicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_out_unicast_pkts(), target);
  }

  // uint64 out_broadcast_pkts = 13;
  if (this->_internal_out_broadcast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_out_broadcast_pkts(), target);
  }

  // uint64 out_multicast_pkts = 14;
  if (this->_internal_out_multicast_pkts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_out_multicast_pkts(), target);
  }

  // uint64 out_discards = 15;
  if (this->_internal_out_discards() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_out_discards(), target);
  }

  // uint64 out_errors = 16;
  if (this->_internal_out_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_out_errors(), target);
  }

  // uint64 carrier_transitions = 17;
  if (this->_internal_carrier_transitions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_carrier_transitions(), target);
  }

  // uint64 last_clear = 18;
  if (this->_internal_last_clear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_last_clear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters)
  return target;
}

size_t Interface_Subinterfaces_Subinterface_State_Counters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 in_octets = 1;
  if (this->_internal_in_octets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_octets());
  }

  // uint64 in_packets = 2;
  if (this->_internal_in_packets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_packets());
  }

  // uint64 in_unicast_pkts = 3;
  if (this->_internal_in_unicast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_unicast_pkts());
  }

  // uint64 in_broadcast_pkts = 4;
  if (this->_internal_in_broadcast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_broadcast_pkts());
  }

  // uint64 in_multicast_pkts = 5;
  if (this->_internal_in_multicast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_multicast_pkts());
  }

  // uint64 in_discards = 6;
  if (this->_internal_in_discards() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_discards());
  }

  // uint64 in_errors = 7;
  if (this->_internal_in_errors() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_errors());
  }

  // uint64 in_unknown_protos = 8;
  if (this->_internal_in_unknown_protos() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_unknown_protos());
  }

  // uint64 in_fcs_errors = 9;
  if (this->_internal_in_fcs_errors() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_in_fcs_errors());
  }

  // uint64 out_octets = 10;
  if (this->_internal_out_octets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_octets());
  }

  // uint64 out_packets = 11;
  if (this->_internal_out_packets() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_packets());
  }

  // uint64 out_unicast_pkts = 12;
  if (this->_internal_out_unicast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_unicast_pkts());
  }

  // uint64 out_broadcast_pkts = 13;
  if (this->_internal_out_broadcast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_broadcast_pkts());
  }

  // uint64 out_multicast_pkts = 14;
  if (this->_internal_out_multicast_pkts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_multicast_pkts());
  }

  // uint64 out_discards = 15;
  if (this->_internal_out_discards() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_out_discards());
  }

  // uint64 out_errors = 16;
  if (this->_internal_out_errors() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_out_errors());
  }

  // uint64 carrier_transitions = 17;
  if (this->_internal_carrier_transitions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_carrier_transitions());
  }

  // uint64 last_clear = 18;
  if (this->_internal_last_clear() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_clear());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface_Subinterfaces_Subinterface_State_Counters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interface_Subinterfaces_Subinterface_State_Counters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface_Subinterfaces_Subinterface_State_Counters::GetClassData() const { return &_class_data_; }

void Interface_Subinterfaces_Subinterface_State_Counters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interface_Subinterfaces_Subinterface_State_Counters *>(to)->MergeFrom(
      static_cast<const Interface_Subinterfaces_Subinterface_State_Counters &>(from));
}


void Interface_Subinterfaces_Subinterface_State_Counters::MergeFrom(const Interface_Subinterfaces_Subinterface_State_Counters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_in_octets() != 0) {
    _internal_set_in_octets(from._internal_in_octets());
  }
  if (from._internal_in_packets() != 0) {
    _internal_set_in_packets(from._internal_in_packets());
  }
  if (from._internal_in_unicast_pkts() != 0) {
    _internal_set_in_unicast_pkts(from._internal_in_unicast_pkts());
  }
  if (from._internal_in_broadcast_pkts() != 0) {
    _internal_set_in_broadcast_pkts(from._internal_in_broadcast_pkts());
  }
  if (from._internal_in_multicast_pkts() != 0) {
    _internal_set_in_multicast_pkts(from._internal_in_multicast_pkts());
  }
  if (from._internal_in_discards() != 0) {
    _internal_set_in_discards(from._internal_in_discards());
  }
  if (from._internal_in_errors() != 0) {
    _internal_set_in_errors(from._internal_in_errors());
  }
  if (from._internal_in_unknown_protos() != 0) {
    _internal_set_in_unknown_protos(from._internal_in_unknown_protos());
  }
  if (from._internal_in_fcs_errors() != 0) {
    _internal_set_in_fcs_errors(from._internal_in_fcs_errors());
  }
  if (from._internal_out_octets() != 0) {
    _internal_set_out_octets(from._internal_out_octets());
  }
  if (from._internal_out_packets() != 0) {
    _internal_set_out_packets(from._internal_out_packets());
  }
  if (from._internal_out_unicast_pkts() != 0) {
    _internal_set_out_unicast_pkts(from._internal_out_unicast_pkts());
  }
  if (from._internal_out_broadcast_pkts() != 0) {
    _internal_set_out_broadcast_pkts(from._internal_out_broadcast_pkts());
  }
  if (from._internal_out_multicast_pkts() != 0) {
    _internal_set_out_multicast_pkts(from._internal_out_multicast_pkts());
  }
  if (from._internal_out_discards() != 0) {
    _internal_set_out_discards(from._internal_out_discards());
  }
  if (from._internal_out_errors() != 0) {
    _internal_set_out_errors(from._internal_out_errors());
  }
  if (from._internal_carrier_transitions() != 0) {
    _internal_set_carrier_transitions(from._internal_carrier_transitions());
  }
  if (from._internal_last_clear() != 0) {
    _internal_set_last_clear(from._internal_last_clear());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface_Subinterfaces_Subinterface_State_Counters::CopyFrom(const Interface_Subinterfaces_Subinterface_State_Counters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface_Subinterfaces_Subinterface_State_Counters::IsInitialized() const {
  return true;
}

void Interface_Subinterfaces_Subinterface_State_Counters::InternalSwap(Interface_Subinterfaces_Subinterface_State_Counters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interface_Subinterfaces_Subinterface_State_Counters, last_clear_)
      + sizeof(Interface_Subinterfaces_Subinterface_State_Counters::last_clear_)
      - PROTOBUF_FIELD_OFFSET(Interface_Subinterfaces_Subinterface_State_Counters, in_octets_)>(
          reinterpret_cast<char*>(&in_octets_),
          reinterpret_cast<char*>(&other->in_octets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface_Subinterfaces_Subinterface_State_Counters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[7]);
}

// ===================================================================

class Interface_Subinterfaces_Subinterface_State::_Internal {
 public:
  static const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters& counters(const Interface_Subinterfaces_Subinterface_State* msg);
};

const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters&
Interface_Subinterfaces_Subinterface_State::_Internal::counters(const Interface_Subinterfaces_Subinterface_State* msg) {
  return *msg->counters_;
}
Interface_Subinterfaces_Subinterface_State::Interface_Subinterfaces_Subinterface_State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State)
}
Interface_Subinterfaces_Subinterface_State::Interface_Subinterfaces_Subinterface_State(const Interface_Subinterfaces_Subinterface_State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_counters()) {
    counters_ = new ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters(*from.counters_);
  } else {
    counters_ = nullptr;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpu_) -
    reinterpret_cast<char*>(&index_)) + sizeof(cpu_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State)
}

inline void Interface_Subinterfaces_Subinterface_State::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&counters_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cpu_) -
    reinterpret_cast<char*>(&counters_)) + sizeof(cpu_));
}

Interface_Subinterfaces_Subinterface_State::~Interface_Subinterfaces_Subinterface_State() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interface_Subinterfaces_Subinterface_State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete counters_;
}

void Interface_Subinterfaces_Subinterface_State::ArenaDtor(void* object) {
  Interface_Subinterfaces_Subinterface_State* _this = reinterpret_cast< Interface_Subinterfaces_Subinterface_State* >(object);
  (void)_this;
}
void Interface_Subinterfaces_Subinterface_State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface_Subinterfaces_Subinterface_State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interface_Subinterfaces_Subinterface_State::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && counters_ != nullptr) {
    delete counters_;
  }
  counters_ = nullptr;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_) -
      reinterpret_cast<char*>(&index_)) + sizeof(cpu_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface_Subinterfaces_Subinterface_State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ifindex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ifindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1.InterfaceState admin_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_admin_status(static_cast<::opi_api::network::v1::InterfaceState>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1.InterfaceState oper_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper_status(static_cast<::opi_api::network::v1::InterfaceState>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 last_change = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          last_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool logical = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          logical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool management = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          management_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool cpu = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters counters = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_counters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface_Subinterfaces_Subinterface_State::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // bool enabled = 3;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enabled(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // uint32 ifindex = 5;
  if (this->_internal_ifindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ifindex(), target);
  }

  // .opi_api.network.v1.InterfaceState admin_status = 6;
  if (this->_internal_admin_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_admin_status(), target);
  }

  // .opi_api.network.v1.InterfaceState oper_status = 7;
  if (this->_internal_oper_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_oper_status(), target);
  }

  // uint64 last_change = 10;
  if (this->_internal_last_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_last_change(), target);
  }

  // bool logical = 11;
  if (this->_internal_logical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_logical(), target);
  }

  // bool management = 12;
  if (this->_internal_management() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_management(), target);
  }

  // bool cpu = 13;
  if (this->_internal_cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_cpu(), target);
  }

  // .opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters counters = 14;
  if (this->_internal_has_counters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::counters(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State)
  return target;
}

size_t Interface_Subinterfaces_Subinterface_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters counters = 14;
  if (this->_internal_has_counters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *counters_);
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 ifindex = 5;
  if (this->_internal_ifindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ifindex());
  }

  // .opi_api.network.v1.InterfaceState admin_status = 6;
  if (this->_internal_admin_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_admin_status());
  }

  // .opi_api.network.v1.InterfaceState oper_status = 7;
  if (this->_internal_oper_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper_status());
  }

  // uint64 last_change = 10;
  if (this->_internal_last_change() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_last_change());
  }

  // bool enabled = 3;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool logical = 11;
  if (this->_internal_logical() != 0) {
    total_size += 1 + 1;
  }

  // bool management = 12;
  if (this->_internal_management() != 0) {
    total_size += 1 + 1;
  }

  // bool cpu = 13;
  if (this->_internal_cpu() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface_Subinterfaces_Subinterface_State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interface_Subinterfaces_Subinterface_State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface_Subinterfaces_Subinterface_State::GetClassData() const { return &_class_data_; }

void Interface_Subinterfaces_Subinterface_State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interface_Subinterfaces_Subinterface_State *>(to)->MergeFrom(
      static_cast<const Interface_Subinterfaces_Subinterface_State &>(from));
}


void Interface_Subinterfaces_Subinterface_State::MergeFrom(const Interface_Subinterfaces_Subinterface_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_counters()) {
    _internal_mutable_counters()->::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters::MergeFrom(from._internal_counters());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_ifindex() != 0) {
    _internal_set_ifindex(from._internal_ifindex());
  }
  if (from._internal_admin_status() != 0) {
    _internal_set_admin_status(from._internal_admin_status());
  }
  if (from._internal_oper_status() != 0) {
    _internal_set_oper_status(from._internal_oper_status());
  }
  if (from._internal_last_change() != 0) {
    _internal_set_last_change(from._internal_last_change());
  }
  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_logical() != 0) {
    _internal_set_logical(from._internal_logical());
  }
  if (from._internal_management() != 0) {
    _internal_set_management(from._internal_management());
  }
  if (from._internal_cpu() != 0) {
    _internal_set_cpu(from._internal_cpu());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface_Subinterfaces_Subinterface_State::CopyFrom(const Interface_Subinterfaces_Subinterface_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface_Subinterfaces_Subinterface_State::IsInitialized() const {
  return true;
}

void Interface_Subinterfaces_Subinterface_State::InternalSwap(Interface_Subinterfaces_Subinterface_State* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interface_Subinterfaces_Subinterface_State, cpu_)
      + sizeof(Interface_Subinterfaces_Subinterface_State::cpu_)
      - PROTOBUF_FIELD_OFFSET(Interface_Subinterfaces_Subinterface_State, counters_)>(
          reinterpret_cast<char*>(&counters_),
          reinterpret_cast<char*>(&other->counters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface_Subinterfaces_Subinterface_State::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[8]);
}

// ===================================================================

class Interface_Subinterfaces_Subinterface::_Internal {
 public:
  static const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config& config(const Interface_Subinterfaces_Subinterface* msg);
  static const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State& state(const Interface_Subinterfaces_Subinterface* msg);
};

const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config&
Interface_Subinterfaces_Subinterface::_Internal::config(const Interface_Subinterfaces_Subinterface* msg) {
  return *msg->config_;
}
const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State&
Interface_Subinterfaces_Subinterface::_Internal::state(const Interface_Subinterfaces_Subinterface* msg) {
  return *msg->state_;
}
Interface_Subinterfaces_Subinterface::Interface_Subinterfaces_Subinterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.Interface.Subinterfaces.Subinterface)
}
Interface_Subinterfaces_Subinterface::Interface_Subinterfaces_Subinterface(const Interface_Subinterfaces_Subinterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State(*from.state_);
  } else {
    state_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.Interface.Subinterfaces.Subinterface)
}

inline void Interface_Subinterfaces_Subinterface::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&config_)) + sizeof(index_));
}

Interface_Subinterfaces_Subinterface::~Interface_Subinterfaces_Subinterface() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.Interface.Subinterfaces.Subinterface)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interface_Subinterfaces_Subinterface::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Interface_Subinterfaces_Subinterface::ArenaDtor(void* object) {
  Interface_Subinterfaces_Subinterface* _this = reinterpret_cast< Interface_Subinterfaces_Subinterface* >(object);
  (void)_this;
}
void Interface_Subinterfaces_Subinterface::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface_Subinterfaces_Subinterface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interface_Subinterfaces_Subinterface::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  index_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface_Subinterfaces_Subinterface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1.Interface.Subinterfaces.Subinterface.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface_Subinterfaces_Subinterface::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // .opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config config = 2;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  // .opi_api.network.v1.Interface.Subinterfaces.Subinterface.State state = 3;
  if (this->_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.Interface.Subinterfaces.Subinterface)
  return target;
}

size_t Interface_Subinterfaces_Subinterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config config = 2;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .opi_api.network.v1.Interface.Subinterfaces.Subinterface.State state = 3;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface_Subinterfaces_Subinterface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interface_Subinterfaces_Subinterface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface_Subinterfaces_Subinterface::GetClassData() const { return &_class_data_; }

void Interface_Subinterfaces_Subinterface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interface_Subinterfaces_Subinterface *>(to)->MergeFrom(
      static_cast<const Interface_Subinterfaces_Subinterface &>(from));
}


void Interface_Subinterfaces_Subinterface::MergeFrom(const Interface_Subinterfaces_Subinterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _internal_mutable_config()->::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config::MergeFrom(from._internal_config());
  }
  if (from._internal_has_state()) {
    _internal_mutable_state()->::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State::MergeFrom(from._internal_state());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface_Subinterfaces_Subinterface::CopyFrom(const Interface_Subinterfaces_Subinterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.Interface.Subinterfaces.Subinterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface_Subinterfaces_Subinterface::IsInitialized() const {
  return true;
}

void Interface_Subinterfaces_Subinterface::InternalSwap(Interface_Subinterfaces_Subinterface* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interface_Subinterfaces_Subinterface, index_)
      + sizeof(Interface_Subinterfaces_Subinterface::index_)
      - PROTOBUF_FIELD_OFFSET(Interface_Subinterfaces_Subinterface, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface_Subinterfaces_Subinterface::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[9]);
}

// ===================================================================

class Interface_Subinterfaces::_Internal {
 public:
};

Interface_Subinterfaces::Interface_Subinterfaces(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  subinterface_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.Interface.Subinterfaces)
}
Interface_Subinterfaces::Interface_Subinterfaces(const Interface_Subinterfaces& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subinterface_(from.subinterface_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.Interface.Subinterfaces)
}

inline void Interface_Subinterfaces::SharedCtor() {
}

Interface_Subinterfaces::~Interface_Subinterfaces() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.Interface.Subinterfaces)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interface_Subinterfaces::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Interface_Subinterfaces::ArenaDtor(void* object) {
  Interface_Subinterfaces* _this = reinterpret_cast< Interface_Subinterfaces* >(object);
  (void)_this;
}
void Interface_Subinterfaces::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface_Subinterfaces::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interface_Subinterfaces::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.Interface.Subinterfaces)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subinterface_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface_Subinterfaces::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.v1.Interface.Subinterfaces.Subinterface subinterface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subinterface(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface_Subinterfaces::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.Interface.Subinterfaces)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.v1.Interface.Subinterfaces.Subinterface subinterface = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subinterface_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_subinterface(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.Interface.Subinterfaces)
  return target;
}

size_t Interface_Subinterfaces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.Interface.Subinterfaces)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.v1.Interface.Subinterfaces.Subinterface subinterface = 2;
  total_size += 1UL * this->_internal_subinterface_size();
  for (const auto& msg : this->subinterface_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface_Subinterfaces::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interface_Subinterfaces::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface_Subinterfaces::GetClassData() const { return &_class_data_; }

void Interface_Subinterfaces::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interface_Subinterfaces *>(to)->MergeFrom(
      static_cast<const Interface_Subinterfaces &>(from));
}


void Interface_Subinterfaces::MergeFrom(const Interface_Subinterfaces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.Interface.Subinterfaces)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  subinterface_.MergeFrom(from.subinterface_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface_Subinterfaces::CopyFrom(const Interface_Subinterfaces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.Interface.Subinterfaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface_Subinterfaces::IsInitialized() const {
  return true;
}

void Interface_Subinterfaces::InternalSwap(Interface_Subinterfaces* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  subinterface_.InternalSwap(&other->subinterface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface_Subinterfaces::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[10]);
}

// ===================================================================

class Interface::_Internal {
 public:
  static const ::opi_api::network::v1::Interface_Config& config(const Interface* msg);
  static const ::opi_api::network::v1::Interface_State& state(const Interface* msg);
  static const ::opi_api::network::v1::Interface_HoldTime& holdtime(const Interface* msg);
  static const ::opi_api::network::v1::Interface_Subinterfaces& subinterfaces(const Interface* msg);
};

const ::opi_api::network::v1::Interface_Config&
Interface::_Internal::config(const Interface* msg) {
  return *msg->config_;
}
const ::opi_api::network::v1::Interface_State&
Interface::_Internal::state(const Interface* msg) {
  return *msg->state_;
}
const ::opi_api::network::v1::Interface_HoldTime&
Interface::_Internal::holdtime(const Interface* msg) {
  return *msg->holdtime_;
}
const ::opi_api::network::v1::Interface_Subinterfaces&
Interface::_Internal::subinterfaces(const Interface* msg) {
  return *msg->subinterfaces_;
}
Interface::Interface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.Interface)
}
Interface::Interface(const Interface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_config()) {
    config_ = new ::opi_api::network::v1::Interface_Config(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::opi_api::network::v1::Interface_State(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_holdtime()) {
    holdtime_ = new ::opi_api::network::v1::Interface_HoldTime(*from.holdtime_);
  } else {
    holdtime_ = nullptr;
  }
  if (from._internal_has_subinterfaces()) {
    subinterfaces_ = new ::opi_api::network::v1::Interface_Subinterfaces(*from.subinterfaces_);
  } else {
    subinterfaces_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.Interface)
}

inline void Interface::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subinterfaces_) -
    reinterpret_cast<char*>(&config_)) + sizeof(subinterfaces_));
}

Interface::~Interface() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.Interface)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interface::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete holdtime_;
  if (this != internal_default_instance()) delete subinterfaces_;
}

void Interface::ArenaDtor(void* object) {
  Interface* _this = reinterpret_cast< Interface* >(object);
  (void)_this;
}
void Interface::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interface::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.Interface)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && holdtime_ != nullptr) {
    delete holdtime_;
  }
  holdtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && subinterfaces_ != nullptr) {
    delete subinterfaces_;
  }
  subinterfaces_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1.Interface.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1.Interface.Config config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1.Interface.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1.Interface.HoldTime holdtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_holdtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.v1.Interface.Subinterfaces subinterfaces = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_subinterfaces(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.Interface)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1.Interface.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .opi_api.network.v1.Interface.Config config = 2;
  if (this->_internal_has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  // .opi_api.network.v1.Interface.State state = 3;
  if (this->_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  // .opi_api.network.v1.Interface.HoldTime holdtime = 4;
  if (this->_internal_has_holdtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::holdtime(this), target, stream);
  }

  // .opi_api.network.v1.Interface.Subinterfaces subinterfaces = 5;
  if (this->_internal_has_subinterfaces()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::subinterfaces(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.Interface)
  return target;
}

size_t Interface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.Interface)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opi_api.network.v1.Interface.Config config = 2;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .opi_api.network.v1.Interface.State state = 3;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .opi_api.network.v1.Interface.HoldTime holdtime = 4;
  if (this->_internal_has_holdtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *holdtime_);
  }

  // .opi_api.network.v1.Interface.Subinterfaces subinterfaces = 5;
  if (this->_internal_has_subinterfaces()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subinterfaces_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface::GetClassData() const { return &_class_data_; }

void Interface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interface *>(to)->MergeFrom(
      static_cast<const Interface &>(from));
}


void Interface::MergeFrom(const Interface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.Interface)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_config()) {
    _internal_mutable_config()->::opi_api::network::v1::Interface_Config::MergeFrom(from._internal_config());
  }
  if (from._internal_has_state()) {
    _internal_mutable_state()->::opi_api::network::v1::Interface_State::MergeFrom(from._internal_state());
  }
  if (from._internal_has_holdtime()) {
    _internal_mutable_holdtime()->::opi_api::network::v1::Interface_HoldTime::MergeFrom(from._internal_holdtime());
  }
  if (from._internal_has_subinterfaces()) {
    _internal_mutable_subinterfaces()->::opi_api::network::v1::Interface_Subinterfaces::MergeFrom(from._internal_subinterfaces());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface::CopyFrom(const Interface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.Interface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface::IsInitialized() const {
  return true;
}

void Interface::InternalSwap(Interface* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interface, subinterfaces_)
      + sizeof(Interface::subinterfaces_)
      - PROTOBUF_FIELD_OFFSET(Interface, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[11]);
}

// ===================================================================

class Interfaces::_Internal {
 public:
};

Interfaces::Interfaces(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  interface_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.Interfaces)
}
Interfaces::Interfaces(const Interfaces& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      interface_(from.interface_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.Interfaces)
}

inline void Interfaces::SharedCtor() {
}

Interfaces::~Interfaces() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.Interfaces)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interfaces::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Interfaces::ArenaDtor(void* object) {
  Interfaces* _this = reinterpret_cast< Interfaces* >(object);
  (void)_this;
}
void Interfaces::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interfaces::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interfaces::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.Interfaces)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interface_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interfaces::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.v1.Interface interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interface(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interfaces::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.Interfaces)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.v1.Interface interface = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_interface_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_interface(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.Interfaces)
  return target;
}

size_t Interfaces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.Interfaces)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.v1.Interface interface = 1;
  total_size += 1UL * this->_internal_interface_size();
  for (const auto& msg : this->interface_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interfaces::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interfaces::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interfaces::GetClassData() const { return &_class_data_; }

void Interfaces::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interfaces *>(to)->MergeFrom(
      static_cast<const Interfaces &>(from));
}


void Interfaces::MergeFrom(const Interfaces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.Interfaces)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  interface_.MergeFrom(from.interface_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interfaces::CopyFrom(const Interfaces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.Interfaces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interfaces::IsInitialized() const {
  return true;
}

void Interfaces::InternalSwap(Interfaces* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  interface_.InternalSwap(&other->interface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Interfaces::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[12]);
}

// ===================================================================

class NetInterfaceGetRequest::_Internal {
 public:
};

NetInterfaceGetRequest::NetInterfaceGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.NetInterfaceGetRequest)
}
NetInterfaceGetRequest::NetInterfaceGetRequest(const NetInterfaceGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.NetInterfaceGetRequest)
}

inline void NetInterfaceGetRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetInterfaceGetRequest::~NetInterfaceGetRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.NetInterfaceGetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInterfaceGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetInterfaceGetRequest::ArenaDtor(void* object) {
  NetInterfaceGetRequest* _this = reinterpret_cast< NetInterfaceGetRequest* >(object);
  (void)_this;
}
void NetInterfaceGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInterfaceGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInterfaceGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.NetInterfaceGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterfaceGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.v1.NetInterfaceGetRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterfaceGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.NetInterfaceGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.v1.NetInterfaceGetRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.NetInterfaceGetRequest)
  return target;
}

size_t NetInterfaceGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.NetInterfaceGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterfaceGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInterfaceGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterfaceGetRequest::GetClassData() const { return &_class_data_; }

void NetInterfaceGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetInterfaceGetRequest *>(to)->MergeFrom(
      static_cast<const NetInterfaceGetRequest &>(from));
}


void NetInterfaceGetRequest::MergeFrom(const NetInterfaceGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.NetInterfaceGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterfaceGetRequest::CopyFrom(const NetInterfaceGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.NetInterfaceGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterfaceGetRequest::IsInitialized() const {
  return true;
}

void NetInterfaceGetRequest::InternalSwap(NetInterfaceGetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterfaceGetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[13]);
}

// ===================================================================

class NetInterfaceGetResponse::_Internal {
 public:
  static const ::opi_api::network::v1::Interface& interface(const NetInterfaceGetResponse* msg);
};

const ::opi_api::network::v1::Interface&
NetInterfaceGetResponse::_Internal::interface(const NetInterfaceGetResponse* msg) {
  return *msg->interface_;
}
NetInterfaceGetResponse::NetInterfaceGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.NetInterfaceGetResponse)
}
NetInterfaceGetResponse::NetInterfaceGetResponse(const NetInterfaceGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interface()) {
    interface_ = new ::opi_api::network::v1::Interface(*from.interface_);
  } else {
    interface_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.NetInterfaceGetResponse)
}

inline void NetInterfaceGetResponse::SharedCtor() {
interface_ = nullptr;
}

NetInterfaceGetResponse::~NetInterfaceGetResponse() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.NetInterfaceGetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInterfaceGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete interface_;
}

void NetInterfaceGetResponse::ArenaDtor(void* object) {
  NetInterfaceGetResponse* _this = reinterpret_cast< NetInterfaceGetResponse* >(object);
  (void)_this;
}
void NetInterfaceGetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInterfaceGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInterfaceGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.NetInterfaceGetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterfaceGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.v1.Interface interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterfaceGetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.NetInterfaceGetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.v1.Interface interface = 1;
  if (this->_internal_has_interface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::interface(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.NetInterfaceGetResponse)
  return target;
}

size_t NetInterfaceGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.NetInterfaceGetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.v1.Interface interface = 1;
  if (this->_internal_has_interface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interface_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterfaceGetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInterfaceGetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterfaceGetResponse::GetClassData() const { return &_class_data_; }

void NetInterfaceGetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetInterfaceGetResponse *>(to)->MergeFrom(
      static_cast<const NetInterfaceGetResponse &>(from));
}


void NetInterfaceGetResponse::MergeFrom(const NetInterfaceGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.NetInterfaceGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_interface()) {
    _internal_mutable_interface()->::opi_api::network::v1::Interface::MergeFrom(from._internal_interface());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterfaceGetResponse::CopyFrom(const NetInterfaceGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.NetInterfaceGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterfaceGetResponse::IsInitialized() const {
  return true;
}

void NetInterfaceGetResponse::InternalSwap(NetInterfaceGetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(interface_, other->interface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterfaceGetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[14]);
}

// ===================================================================

class NetInterfaceListRequest::_Internal {
 public:
};

NetInterfaceListRequest::NetInterfaceListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.NetInterfaceListRequest)
}
NetInterfaceListRequest::NetInterfaceListRequest(const NetInterfaceListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.NetInterfaceListRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterfaceListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterfaceListRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NetInterfaceListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[15]);
}

// ===================================================================

class NetInterfaceListResponse::_Internal {
 public:
};

NetInterfaceListResponse::NetInterfaceListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  interface_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.NetInterfaceListResponse)
}
NetInterfaceListResponse::NetInterfaceListResponse(const NetInterfaceListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      interface_(from.interface_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.NetInterfaceListResponse)
}

inline void NetInterfaceListResponse::SharedCtor() {
}

NetInterfaceListResponse::~NetInterfaceListResponse() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.NetInterfaceListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInterfaceListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetInterfaceListResponse::ArenaDtor(void* object) {
  NetInterfaceListResponse* _this = reinterpret_cast< NetInterfaceListResponse* >(object);
  (void)_this;
}
void NetInterfaceListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInterfaceListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInterfaceListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.NetInterfaceListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interface_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterfaceListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.v1.Interface interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interface(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterfaceListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.NetInterfaceListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.v1.Interface interface = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_interface_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_interface(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.NetInterfaceListResponse)
  return target;
}

size_t NetInterfaceListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.NetInterfaceListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.v1.Interface interface = 1;
  total_size += 1UL * this->_internal_interface_size();
  for (const auto& msg : this->interface_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterfaceListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInterfaceListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterfaceListResponse::GetClassData() const { return &_class_data_; }

void NetInterfaceListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetInterfaceListResponse *>(to)->MergeFrom(
      static_cast<const NetInterfaceListResponse &>(from));
}


void NetInterfaceListResponse::MergeFrom(const NetInterfaceListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.NetInterfaceListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  interface_.MergeFrom(from.interface_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterfaceListResponse::CopyFrom(const NetInterfaceListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.NetInterfaceListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterfaceListResponse::IsInitialized() const {
  return true;
}

void NetInterfaceListResponse::InternalSwap(NetInterfaceListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  interface_.InternalSwap(&other->interface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterfaceListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[16]);
}

// ===================================================================

class NetInterfaceUpdateRequest::_Internal {
 public:
  static const ::opi_api::network::v1::Interface& interface(const NetInterfaceUpdateRequest* msg);
};

const ::opi_api::network::v1::Interface&
NetInterfaceUpdateRequest::_Internal::interface(const NetInterfaceUpdateRequest* msg) {
  return *msg->interface_;
}
NetInterfaceUpdateRequest::NetInterfaceUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.NetInterfaceUpdateRequest)
}
NetInterfaceUpdateRequest::NetInterfaceUpdateRequest(const NetInterfaceUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interface()) {
    interface_ = new ::opi_api::network::v1::Interface(*from.interface_);
  } else {
    interface_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.NetInterfaceUpdateRequest)
}

inline void NetInterfaceUpdateRequest::SharedCtor() {
interface_ = nullptr;
}

NetInterfaceUpdateRequest::~NetInterfaceUpdateRequest() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.NetInterfaceUpdateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInterfaceUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete interface_;
}

void NetInterfaceUpdateRequest::ArenaDtor(void* object) {
  NetInterfaceUpdateRequest* _this = reinterpret_cast< NetInterfaceUpdateRequest* >(object);
  (void)_this;
}
void NetInterfaceUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInterfaceUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInterfaceUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.NetInterfaceUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterfaceUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.v1.Interface interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterfaceUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.NetInterfaceUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.v1.Interface interface = 1;
  if (this->_internal_has_interface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::interface(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.NetInterfaceUpdateRequest)
  return target;
}

size_t NetInterfaceUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.NetInterfaceUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.v1.Interface interface = 1;
  if (this->_internal_has_interface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interface_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterfaceUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInterfaceUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterfaceUpdateRequest::GetClassData() const { return &_class_data_; }

void NetInterfaceUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetInterfaceUpdateRequest *>(to)->MergeFrom(
      static_cast<const NetInterfaceUpdateRequest &>(from));
}


void NetInterfaceUpdateRequest::MergeFrom(const NetInterfaceUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.NetInterfaceUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_interface()) {
    _internal_mutable_interface()->::opi_api::network::v1::Interface::MergeFrom(from._internal_interface());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterfaceUpdateRequest::CopyFrom(const NetInterfaceUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.NetInterfaceUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterfaceUpdateRequest::IsInitialized() const {
  return true;
}

void NetInterfaceUpdateRequest::InternalSwap(NetInterfaceUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(interface_, other->interface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterfaceUpdateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[17]);
}

// ===================================================================

class NetInterfaceUpdateResponse::_Internal {
 public:
};

NetInterfaceUpdateResponse::NetInterfaceUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.v1.NetInterfaceUpdateResponse)
}
NetInterfaceUpdateResponse::NetInterfaceUpdateResponse(const NetInterfaceUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.v1.NetInterfaceUpdateResponse)
}

inline void NetInterfaceUpdateResponse::SharedCtor() {
result_ = 0u;
}

NetInterfaceUpdateResponse::~NetInterfaceUpdateResponse() {
  // @@protoc_insertion_point(destructor:opi_api.network.v1.NetInterfaceUpdateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInterfaceUpdateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetInterfaceUpdateResponse::ArenaDtor(void* object) {
  NetInterfaceUpdateResponse* _this = reinterpret_cast< NetInterfaceUpdateResponse* >(object);
  (void)_this;
}
void NetInterfaceUpdateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInterfaceUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInterfaceUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.v1.NetInterfaceUpdateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInterfaceUpdateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetInterfaceUpdateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.v1.NetInterfaceUpdateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.v1.NetInterfaceUpdateResponse)
  return target;
}

size_t NetInterfaceUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.v1.NetInterfaceUpdateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInterfaceUpdateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInterfaceUpdateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInterfaceUpdateResponse::GetClassData() const { return &_class_data_; }

void NetInterfaceUpdateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetInterfaceUpdateResponse *>(to)->MergeFrom(
      static_cast<const NetInterfaceUpdateResponse &>(from));
}


void NetInterfaceUpdateResponse::MergeFrom(const NetInterfaceUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.v1.NetInterfaceUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInterfaceUpdateResponse::CopyFrom(const NetInterfaceUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.v1.NetInterfaceUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterfaceUpdateResponse::IsInitialized() const {
  return true;
}

void NetInterfaceUpdateResponse::InternalSwap(NetInterfaceUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInterfaceUpdateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openconfig_5finterfaces_2eproto_getter, &descriptor_table_openconfig_5finterfaces_2eproto_once,
      file_level_metadata_openconfig_5finterfaces_2eproto[18]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::Interface_Config* Arena::CreateMaybeMessage< ::opi_api::network::v1::Interface_Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::Interface_Config >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::Interface_State_Counters* Arena::CreateMaybeMessage< ::opi_api::network::v1::Interface_State_Counters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::Interface_State_Counters >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::Interface_State* Arena::CreateMaybeMessage< ::opi_api::network::v1::Interface_State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::Interface_State >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::Interface_HoldTime_Config* Arena::CreateMaybeMessage< ::opi_api::network::v1::Interface_HoldTime_Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::Interface_HoldTime_Config >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::Interface_HoldTime_State* Arena::CreateMaybeMessage< ::opi_api::network::v1::Interface_HoldTime_State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::Interface_HoldTime_State >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::Interface_HoldTime* Arena::CreateMaybeMessage< ::opi_api::network::v1::Interface_HoldTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::Interface_HoldTime >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* Arena::CreateMaybeMessage< ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* Arena::CreateMaybeMessage< ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* Arena::CreateMaybeMessage< ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::Interface_Subinterfaces_Subinterface* Arena::CreateMaybeMessage< ::opi_api::network::v1::Interface_Subinterfaces_Subinterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::Interface_Subinterfaces_Subinterface >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::Interface_Subinterfaces* Arena::CreateMaybeMessage< ::opi_api::network::v1::Interface_Subinterfaces >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::Interface_Subinterfaces >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::Interface* Arena::CreateMaybeMessage< ::opi_api::network::v1::Interface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::Interface >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::Interfaces* Arena::CreateMaybeMessage< ::opi_api::network::v1::Interfaces >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::Interfaces >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::NetInterfaceGetRequest* Arena::CreateMaybeMessage< ::opi_api::network::v1::NetInterfaceGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::NetInterfaceGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::NetInterfaceGetResponse* Arena::CreateMaybeMessage< ::opi_api::network::v1::NetInterfaceGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::NetInterfaceGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::NetInterfaceListRequest* Arena::CreateMaybeMessage< ::opi_api::network::v1::NetInterfaceListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::NetInterfaceListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::NetInterfaceListResponse* Arena::CreateMaybeMessage< ::opi_api::network::v1::NetInterfaceListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::NetInterfaceListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::NetInterfaceUpdateRequest* Arena::CreateMaybeMessage< ::opi_api::network::v1::NetInterfaceUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::NetInterfaceUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::v1::NetInterfaceUpdateResponse* Arena::CreateMaybeMessage< ::opi_api::network::v1::NetInterfaceUpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::v1::NetInterfaceUpdateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
