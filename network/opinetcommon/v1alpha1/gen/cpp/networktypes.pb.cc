// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networktypes.proto

#include "networktypes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace network {
namespace opinetcommon {
namespace v1alpha1 {
constexpr IPAddress::IPAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : af_(0)

  , _oneof_case_{}{}
struct IPAddressDefaultTypeInternal {
  constexpr IPAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IPAddressDefaultTypeInternal() {}
  union {
    IPAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IPAddressDefaultTypeInternal _IPAddress_default_instance_;
constexpr IPPrefix::IPPrefix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addr_(nullptr)
  , len_(0){}
struct IPPrefixDefaultTypeInternal {
  constexpr IPPrefixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IPPrefixDefaultTypeInternal() {}
  union {
    IPPrefix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IPPrefixDefaultTypeInternal _IPPrefix_default_instance_;
constexpr IPv4Prefix::IPv4Prefix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addr_(0u)
  , len_(0){}
struct IPv4PrefixDefaultTypeInternal {
  constexpr IPv4PrefixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IPv4PrefixDefaultTypeInternal() {}
  union {
    IPv4Prefix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IPv4PrefixDefaultTypeInternal _IPv4Prefix_default_instance_;
constexpr IPv6Prefix::IPv6Prefix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , len_(0){}
struct IPv6PrefixDefaultTypeInternal {
  constexpr IPv6PrefixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IPv6PrefixDefaultTypeInternal() {}
  union {
    IPv6Prefix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IPv6PrefixDefaultTypeInternal _IPv6Prefix_default_instance_;
constexpr EncapVal::EncapVal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct EncapValDefaultTypeInternal {
  constexpr EncapValDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncapValDefaultTypeInternal() {}
  union {
    EncapVal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncapValDefaultTypeInternal _EncapVal_default_instance_;
constexpr Encap::Encap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr)
  , type_(0)
{}
struct EncapDefaultTypeInternal {
  constexpr EncapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncapDefaultTypeInternal() {}
  union {
    Encap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncapDefaultTypeInternal _Encap_default_instance_;
constexpr PortRange::PortRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_low_(0)
  , port_high_(0){}
struct PortRangeDefaultTypeInternal {
  constexpr PortRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortRangeDefaultTypeInternal() {}
  union {
    PortRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortRangeDefaultTypeInternal _PortRange_default_instance_;
constexpr IPRange::IPRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : low_(nullptr)
  , high_(nullptr){}
struct IPRangeDefaultTypeInternal {
  constexpr IPRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IPRangeDefaultTypeInternal() {}
  union {
    IPRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IPRangeDefaultTypeInternal _IPRange_default_instance_;
constexpr AddressRange::AddressRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AddressRangeDefaultTypeInternal {
  constexpr AddressRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressRangeDefaultTypeInternal() {}
  union {
    AddressRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressRangeDefaultTypeInternal _AddressRange_default_instance_;
constexpr IPEntry::IPEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct IPEntryDefaultTypeInternal {
  constexpr IPEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IPEntryDefaultTypeInternal() {}
  union {
    IPEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IPEntryDefaultTypeInternal _IPEntry_default_instance_;
constexpr IPList::IPList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_entries_(){}
struct IPListDefaultTypeInternal {
  constexpr IPListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IPListDefaultTypeInternal() {}
  union {
    IPList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IPListDefaultTypeInternal _IPList_default_instance_;
constexpr RuleL3Match::RuleL3Match(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct RuleL3MatchDefaultTypeInternal {
  constexpr RuleL3MatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuleL3MatchDefaultTypeInternal() {}
  union {
    RuleL3Match _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuleL3MatchDefaultTypeInternal _RuleL3Match_default_instance_;
constexpr PortMatch::PortMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : src_port_range_(nullptr)
  , dst_port_range_(nullptr){}
struct PortMatchDefaultTypeInternal {
  constexpr PortMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortMatchDefaultTypeInternal() {}
  union {
    PortMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortMatchDefaultTypeInternal _PortMatch_default_instance_;
constexpr ICMPMatch::ICMPMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ICMPMatchDefaultTypeInternal {
  constexpr ICMPMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ICMPMatchDefaultTypeInternal() {}
  union {
    ICMPMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ICMPMatchDefaultTypeInternal _ICMPMatch_default_instance_;
constexpr PortListMatch::PortListMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : src_port_range_()
  , dst_port_range_(){}
struct PortListMatchDefaultTypeInternal {
  constexpr PortListMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortListMatchDefaultTypeInternal() {}
  union {
    PortListMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortListMatchDefaultTypeInternal _PortListMatch_default_instance_;
constexpr ICMPMatchList::ICMPMatchList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : icmp_match_list_(){}
struct ICMPMatchListDefaultTypeInternal {
  constexpr ICMPMatchListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ICMPMatchListDefaultTypeInternal() {}
  union {
    ICMPMatchList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ICMPMatchListDefaultTypeInternal _ICMPMatchList_default_instance_;
constexpr RuleL4Match::RuleL4Match(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct RuleL4MatchDefaultTypeInternal {
  constexpr RuleL4MatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuleL4MatchDefaultTypeInternal() {}
  union {
    RuleL4Match _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuleL4MatchDefaultTypeInternal _RuleL4Match_default_instance_;
constexpr RuleMatch::RuleMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : l3_match_(nullptr)
  , l4_match_(nullptr){}
struct RuleMatchDefaultTypeInternal {
  constexpr RuleMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuleMatchDefaultTypeInternal() {}
  union {
    RuleMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuleMatchDefaultTypeInternal _RuleMatch_default_instance_;
constexpr HwHandle::HwHandle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : idx_(uint64_t{0u}){}
struct HwHandleDefaultTypeInternal {
  constexpr HwHandleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HwHandleDefaultTypeInternal() {}
  union {
    HwHandle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HwHandleDefaultTypeInternal _HwHandle_default_instance_;
}  // namespace v1alpha1
}  // namespace opinetcommon
}  // namespace network
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_networktypes_2eproto[19];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_networktypes_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_networktypes_2eproto = nullptr;

const uint32_t TableStruct_networktypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPAddress, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPAddress, af_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPAddress, v4_or_v6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPPrefix, addr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPPrefix, len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix, addr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix, len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix, addr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix, len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::EncapVal, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::EncapVal, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::EncapVal, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::Encap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::Encap, type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::Encap, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::PortRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::PortRange, port_low_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::PortRange, port_high_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPRange, low_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPRange, high_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::AddressRange, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::AddressRange, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::AddressRange, range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPEntry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPEntry, ip_entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::IPList, ip_entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::RuleL3Match, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::RuleL3Match, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::RuleL3Match, protomatch_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::RuleL3Match, srcmatch_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::RuleL3Match, dstmatch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::PortMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::PortMatch, src_port_range_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::PortMatch, dst_port_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::ICMPMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::ICMPMatch, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::ICMPMatch, typematch_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::ICMPMatch, codematch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::PortListMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::PortListMatch, src_port_range_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::PortListMatch, dst_port_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::ICMPMatchList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::ICMPMatchList, icmp_match_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::RuleL4Match, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::RuleL4Match, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::RuleL4Match, l4info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::RuleMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::RuleMatch, l3_match_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::RuleMatch, l4_match_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::HwHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::opinetcommon::v1alpha1::HwHandle, idx_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::IPAddress)},
  { 10, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::IPPrefix)},
  { 18, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix)},
  { 26, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix)},
  { 34, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::EncapVal)},
  { 45, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::Encap)},
  { 53, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::PortRange)},
  { 61, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::IPRange)},
  { 69, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::AddressRange)},
  { 78, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::IPEntry)},
  { 88, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::IPList)},
  { 95, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::RuleL3Match)},
  { 114, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::PortMatch)},
  { 122, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::ICMPMatch)},
  { 134, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::PortListMatch)},
  { 142, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::ICMPMatchList)},
  { 149, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::RuleL4Match)},
  { 160, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::RuleMatch)},
  { 168, -1, -1, sizeof(::opi_api::network::opinetcommon::v1alpha1::HwHandle)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_IPPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_IPv4Prefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_IPv6Prefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_EncapVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_Encap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_PortRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_IPRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_AddressRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_IPEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_IPList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_RuleL3Match_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_PortMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_ICMPMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_PortListMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_ICMPMatchList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_RuleL4Match_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_RuleMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::opinetcommon::v1alpha1::_HwHandle_default_instance_),
};

const char descriptor_table_protodef_networktypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022networktypes.proto\022%opi_api.network.op"
  "inetcommon.v1alpha1\"v\n\tIPAddress\0227\n\002af\030\001"
  " \001(\0162+.opi_api.network.opinetcommon.v1al"
  "pha1.IpAf\022\021\n\007v4_addr\030\002 \001(\007H\000\022\021\n\007v6_addr\030"
  "\003 \001(\014H\000B\n\n\010v4_or_v6\"W\n\010IPPrefix\022>\n\004addr\030"
  "\001 \001(\01320.opi_api.network.opinetcommon.v1a"
  "lpha1.IPAddress\022\013\n\003len\030\002 \001(\005\"\'\n\nIPv4Pref"
  "ix\022\014\n\004addr\030\001 \001(\007\022\013\n\003len\030\002 \001(\005\"\'\n\nIPv6Pre"
  "fix\022\014\n\004addr\030\001 \001(\014\022\013\n\003len\030\002 \001(\005\"X\n\010EncapV"
  "al\022\021\n\007vlan_id\030\001 \001(\005H\000\022\022\n\010mpls_tag\030\002 \001(\005H"
  "\000\022\016\n\004vnid\030\003 \001(\005H\000\022\016\n\004vsid\030\005 \001(\005H\000B\005\n\003val"
  "\"\207\001\n\005Encap\022>\n\004type\030\001 \001(\01620.opi_api.netwo"
  "rk.opinetcommon.v1alpha1.EncapType\022>\n\005va"
  "lue\030\002 \001(\0132/.opi_api.network.opinetcommon"
  ".v1alpha1.EncapVal\"0\n\tPortRange\022\020\n\010port_"
  "low\030\001 \001(\005\022\021\n\tport_high\030\002 \001(\005\"\210\001\n\007IPRange"
  "\022=\n\003low\030\001 \001(\01320.opi_api.network.opinetco"
  "mmon.v1alpha1.IPAddress\022>\n\004high\030\002 \001(\01320."
  "opi_api.network.opinetcommon.v1alpha1.IP"
  "Address\"\243\001\n\014AddressRange\022D\n\nipv4_range\030\001"
  " \001(\0132..opi_api.network.opinetcommon.v1al"
  "pha1.IPRangeH\000\022D\n\nipv6_range\030\002 \001(\0132..opi"
  "_api.network.opinetcommon.v1alpha1.IPRan"
  "geH\000B\007\n\005range\"\255\001\n\007IPEntry\022A\n\006prefix\030\001 \001("
  "\0132/.opi_api.network.opinetcommon.v1alpha"
  "1.IPPrefixH\000\022D\n\005range\030\002 \001(\01323.opi_api.ne"
  "twork.opinetcommon.v1alpha1.AddressRange"
  "H\000\022\r\n\003tag\030\003 \001(\005H\000B\n\n\010ip_entry\"L\n\006IPList\022"
  "B\n\nip_entries\030\001 \003(\0132..opi_api.network.op"
  "inetcommon.v1alpha1.IPEntry\"\355\004\n\013RuleL3Ma"
  "tch\022\023\n\tproto_num\030\001 \001(\005H\000\022O\n\017proto_wild_c"
  "ard\030\002 \001(\01624.opi_api.network.opinetcommon"
  ".v1alpha1.WildcardMatchH\000\022E\n\nsrc_prefix\030"
  "\003 \001(\0132/.opi_api.network.opinetcommon.v1a"
  "lpha1.IPPrefixH\001\022H\n\tsrc_range\030\004 \001(\01323.op"
  "i_api.network.opinetcommon.v1alpha1.Addr"
  "essRangeH\001\022\021\n\007src_tag\030\005 \001(\005H\001\022D\n\013src_ip_"
  "list\030\006 \001(\0132-.opi_api.network.opinetcommo"
  "n.v1alpha1.IPListH\001\022E\n\ndst_prefix\030\007 \001(\0132"
  "/.opi_api.network.opinetcommon.v1alpha1."
  "IPPrefixH\002\022H\n\tdst_range\030\010 \001(\01323.opi_api."
  "network.opinetcommon.v1alpha1.AddressRan"
  "geH\002\022\021\n\007dst_tag\030\t \001(\005H\002\022D\n\013dst_ip_list\030\n"
  " \001(\0132-.opi_api.network.opinetcommon.v1al"
  "pha1.IPListH\002B\014\n\nprotomatchB\n\n\010srcmatchB"
  "\n\n\010dstmatch\"\237\001\n\tPortMatch\022H\n\016src_port_ra"
  "nge\030\001 \001(\01320.opi_api.network.opinetcommon"
  ".v1alpha1.PortRange\022H\n\016dst_port_range\030\002 "
  "\001(\01320.opi_api.network.opinetcommon.v1alp"
  "ha1.PortRange\"\343\001\n\tICMPMatch\022\016\n\004type\030\001 \001("
  "\005H\000\022M\n\rtype_wildcard\030\002 \001(\01624.opi_api.net"
  "work.opinetcommon.v1alpha1.WildcardMatch"
  "H\000\022\016\n\004code\030\003 \001(\005H\001\022M\n\rcode_wildcard\030\004 \001("
  "\01624.opi_api.network.opinetcommon.v1alpha"
  "1.WildcardMatchH\001B\013\n\ttypematchB\013\n\tcodema"
  "tch\"\243\001\n\rPortListMatch\022H\n\016src_port_range\030"
  "\001 \003(\01320.opi_api.network.opinetcommon.v1a"
  "lpha1.PortRange\022H\n\016dst_port_range\030\002 \003(\0132"
  "0.opi_api.network.opinetcommon.v1alpha1."
  "PortRange\"Z\n\rICMPMatchList\022I\n\017icmp_match"
  "_list\030\001 \003(\01320.opi_api.network.opinetcomm"
  "on.v1alpha1.ICMPMatch\"\275\002\n\013RuleL4Match\022A\n"
  "\005ports\030\001 \001(\01320.opi_api.network.opinetcom"
  "mon.v1alpha1.PortMatchH\000\022E\n\ttype_code\030\002 "
  "\001(\01320.opi_api.network.opinetcommon.v1alp"
  "ha1.ICMPMatchH\000\022I\n\tport_list\030\003 \001(\01324.opi"
  "_api.network.opinetcommon.v1alpha1.PortL"
  "istMatchH\000\022O\n\017icmp_match_list\030\004 \001(\01324.op"
  "i_api.network.opinetcommon.v1alpha1.ICMP"
  "MatchListH\000B\010\n\006l4info\"\227\001\n\tRuleMatch\022D\n\010l"
  "3_match\030\001 \001(\01322.opi_api.network.opinetco"
  "mmon.v1alpha1.RuleL3Match\022D\n\010l4_match\030\002 "
  "\001(\01322.opi_api.network.opinetcommon.v1alp"
  "ha1.RuleL4Match\"\027\n\010HwHandle\022\013\n\003idx\030\001 \001(\004"
  "*r\n\022SecurityRuleAction\022\035\n\031SECURITY_RULE_"
  "ACTION_NONE\020\000\022\036\n\032SECURITY_RULE_ACTION_AL"
  "LOW\020\001\022\035\n\031SECURITY_RULE_ACTION_DENY\020\002*>\n\004"
  "IpAf\022\025\n\021IP_AF_UNSPECIFIED\020\000\022\016\n\nIP_AF_INE"
  "T\020\001\022\017\n\013IP_AF_INET6\020\002*\207\001\n\tEncapType\022\032\n\026EN"
  "CAP_TYPE_UNSPECIFIED\020\000\022\024\n\020ENCAP_TYPE_DOT"
  "1Q\020\001\022\034\n\030ENCAP_TYPE_MPLS_OVER_UDP\020\002\022\024\n\020EN"
  "CAP_TYPE_VXLAN\020\003\022\024\n\020ENCAP_TYPE_NVGRE\020\004*\201"
  "\001\n\tRouteType\022\032\n\026ROUTE_TYPE_UNSPECIFIED\020\000"
  "\022\024\n\020ROUTE_TYPE_OTHER\020\001\022\025\n\021ROUTE_TYPE_REJ"
  "ECT\020\002\022\024\n\020ROUTE_TYPE_LOCAL\020\003\022\025\n\021ROUTE_TYP"
  "E_REMOTE\020\004*|\n\rRouteProtocol\022\036\n\032ROUTE_PRO"
  "TOCOL_UNSPECIFIED\020\000\022\030\n\024ROUTE_PROTOCOL_LO"
  "CAL\020\001\022\031\n\025ROUTE_PROTOCOL_STATIC\020\002\022\026\n\022ROUT"
  "E_PROTOCOL_BGP\020\003*Z\n\nAdminState\022\033\n\027ADMIN_"
  "STATE_UNSPECIFIED\020\000\022\026\n\022ADMIN_STATE_ENABL"
  "E\020\001\022\027\n\023ADMIN_STATE_DISABLE\020\002*V\n\tPolicyDi"
  "r\022\032\n\026POLICY_DIR_UNSPECIFIED\020\000\022\026\n\022POLICY_"
  "DIR_INGRESS\020\001\022\025\n\021POLICY_DIR_EGRESS\020\002*/\n\r"
  "WildcardMatch\022\016\n\nMATCH_NONE\020\000\022\016\n\tMATCH_A"
  "NY\020\200\002B\200\001\n%opi_api.network.opinetcommon.v"
  "1alpha1B\021NetworkTypesProtoP\001ZBgithub.com"
  "/opiproject/opi-api/network/opinetcommon"
  "/v1alpha1/gen/gob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_networktypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_networktypes_2eproto = {
  false, false, 3904, descriptor_table_protodef_networktypes_2eproto, "networktypes.proto", 
  &descriptor_table_networktypes_2eproto_once, nullptr, 0, 19,
  schemas, file_default_instances, TableStruct_networktypes_2eproto::offsets,
  file_level_metadata_networktypes_2eproto, file_level_enum_descriptors_networktypes_2eproto, file_level_service_descriptors_networktypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_networktypes_2eproto_getter() {
  return &descriptor_table_networktypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_networktypes_2eproto(&descriptor_table_networktypes_2eproto);
namespace opi_api {
namespace network {
namespace opinetcommon {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityRuleAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networktypes_2eproto);
  return file_level_enum_descriptors_networktypes_2eproto[0];
}
bool SecurityRuleAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IpAf_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networktypes_2eproto);
  return file_level_enum_descriptors_networktypes_2eproto[1];
}
bool IpAf_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncapType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networktypes_2eproto);
  return file_level_enum_descriptors_networktypes_2eproto[2];
}
bool EncapType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RouteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networktypes_2eproto);
  return file_level_enum_descriptors_networktypes_2eproto[3];
}
bool RouteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RouteProtocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networktypes_2eproto);
  return file_level_enum_descriptors_networktypes_2eproto[4];
}
bool RouteProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdminState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networktypes_2eproto);
  return file_level_enum_descriptors_networktypes_2eproto[5];
}
bool AdminState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PolicyDir_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networktypes_2eproto);
  return file_level_enum_descriptors_networktypes_2eproto[6];
}
bool PolicyDir_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WildcardMatch_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networktypes_2eproto);
  return file_level_enum_descriptors_networktypes_2eproto[7];
}
bool WildcardMatch_IsValid(int value) {
  switch (value) {
    case 0:
    case 256:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class IPAddress::_Internal {
 public:
};

IPAddress::IPAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.IPAddress)
}
IPAddress::IPAddress(const IPAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  af_ = from.af_;
  clear_has_v4_or_v6();
  switch (from.v4_or_v6_case()) {
    case kV4Addr: {
      _internal_set_v4_addr(from._internal_v4_addr());
      break;
    }
    case kV6Addr: {
      _internal_set_v6_addr(from._internal_v6_addr());
      break;
    }
    case V4_OR_V6_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.IPAddress)
}

inline void IPAddress::SharedCtor() {
af_ = 0;
clear_has_v4_or_v6();
}

IPAddress::~IPAddress() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.IPAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IPAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_v4_or_v6()) {
    clear_v4_or_v6();
  }
}

void IPAddress::ArenaDtor(void* object) {
  IPAddress* _this = reinterpret_cast< IPAddress* >(object);
  (void)_this;
}
void IPAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IPAddress::clear_v4_or_v6() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.opinetcommon.v1alpha1.IPAddress)
  switch (v4_or_v6_case()) {
    case kV4Addr: {
      // No need to clear
      break;
    }
    case kV6Addr: {
      v4_or_v6_.v6_addr_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case V4_OR_V6_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = V4_OR_V6_NOT_SET;
}


void IPAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.IPAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  af_ = 0;
  clear_v4_or_v6();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IpAf af = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_af(static_cast<::opi_api::network::opinetcommon::v1alpha1::IpAf>(val));
        } else
          goto handle_unusual;
        continue;
      // fixed32 v4_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _internal_set_v4_addr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // bytes v6_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_v6_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.IPAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IpAf af = 1;
  if (this->_internal_af() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_af(), target);
  }

  // fixed32 v4_addr = 2;
  if (_internal_has_v4_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_v4_addr(), target);
  }

  // bytes v6_addr = 3;
  if (_internal_has_v6_addr()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_v6_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.IPAddress)
  return target;
}

size_t IPAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.IPAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IpAf af = 1;
  if (this->_internal_af() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_af());
  }

  switch (v4_or_v6_case()) {
    // fixed32 v4_addr = 2;
    case kV4Addr: {
      total_size += 1 + 4;
      break;
    }
    // bytes v6_addr = 3;
    case kV6Addr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_v6_addr());
      break;
    }
    case V4_OR_V6_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IPAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPAddress::GetClassData() const { return &_class_data_; }

void IPAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IPAddress *>(to)->MergeFrom(
      static_cast<const IPAddress &>(from));
}


void IPAddress::MergeFrom(const IPAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.IPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_af() != 0) {
    _internal_set_af(from._internal_af());
  }
  switch (from.v4_or_v6_case()) {
    case kV4Addr: {
      _internal_set_v4_addr(from._internal_v4_addr());
      break;
    }
    case kV6Addr: {
      _internal_set_v6_addr(from._internal_v6_addr());
      break;
    }
    case V4_OR_V6_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPAddress::CopyFrom(const IPAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.IPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAddress::IsInitialized() const {
  return true;
}

void IPAddress::InternalSwap(IPAddress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(af_, other->af_);
  swap(v4_or_v6_, other->v4_or_v6_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[0]);
}

// ===================================================================

class IPPrefix::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& addr(const IPPrefix* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
IPPrefix::_Internal::addr(const IPPrefix* msg) {
  return *msg->addr_;
}
IPPrefix::IPPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.IPPrefix)
}
IPPrefix::IPPrefix(const IPPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_addr()) {
    addr_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.addr_);
  } else {
    addr_ = nullptr;
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.IPPrefix)
}

inline void IPPrefix::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&addr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(len_));
}

IPPrefix::~IPPrefix() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.IPPrefix)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IPPrefix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete addr_;
}

void IPPrefix::ArenaDtor(void* object) {
  IPPrefix* _this = reinterpret_cast< IPPrefix* >(object);
  (void)_this;
}
void IPPrefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IPPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.IPPrefix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && addr_ != nullptr) {
    delete addr_;
  }
  addr_ = nullptr;
  len_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_addr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPPrefix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.IPPrefix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress addr = 1;
  if (this->_internal_has_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::addr(this), target, stream);
  }

  // int32 len = 2;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.IPPrefix)
  return target;
}

size_t IPPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.IPPrefix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress addr = 1;
  if (this->_internal_has_addr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *addr_);
  }

  // int32 len = 2;
  if (this->_internal_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_len());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPPrefix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IPPrefix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPPrefix::GetClassData() const { return &_class_data_; }

void IPPrefix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IPPrefix *>(to)->MergeFrom(
      static_cast<const IPPrefix &>(from));
}


void IPPrefix::MergeFrom(const IPPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.IPPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_addr()) {
    _internal_mutable_addr()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_addr());
  }
  if (from._internal_len() != 0) {
    _internal_set_len(from._internal_len());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPPrefix::CopyFrom(const IPPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.IPPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPPrefix::IsInitialized() const {
  return true;
}

void IPPrefix::InternalSwap(IPPrefix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPPrefix, len_)
      + sizeof(IPPrefix::len_)
      - PROTOBUF_FIELD_OFFSET(IPPrefix, addr_)>(
          reinterpret_cast<char*>(&addr_),
          reinterpret_cast<char*>(&other->addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPPrefix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[1]);
}

// ===================================================================

class IPv4Prefix::_Internal {
 public:
};

IPv4Prefix::IPv4Prefix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.IPv4Prefix)
}
IPv4Prefix::IPv4Prefix(const IPv4Prefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(len_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.IPv4Prefix)
}

inline void IPv4Prefix::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&addr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(len_));
}

IPv4Prefix::~IPv4Prefix() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.IPv4Prefix)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IPv4Prefix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IPv4Prefix::ArenaDtor(void* object) {
  IPv4Prefix* _this = reinterpret_cast< IPv4Prefix* >(object);
  (void)_this;
}
void IPv4Prefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPv4Prefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IPv4Prefix::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.IPv4Prefix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPv4Prefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed32 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // int32 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPv4Prefix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.IPv4Prefix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 addr = 1;
  if (this->_internal_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_addr(), target);
  }

  // int32 len = 2;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.IPv4Prefix)
  return target;
}

size_t IPv4Prefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.IPv4Prefix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed32 addr = 1;
  if (this->_internal_addr() != 0) {
    total_size += 1 + 4;
  }

  // int32 len = 2;
  if (this->_internal_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_len());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPv4Prefix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IPv4Prefix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPv4Prefix::GetClassData() const { return &_class_data_; }

void IPv4Prefix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IPv4Prefix *>(to)->MergeFrom(
      static_cast<const IPv4Prefix &>(from));
}


void IPv4Prefix::MergeFrom(const IPv4Prefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.IPv4Prefix)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_addr() != 0) {
    _internal_set_addr(from._internal_addr());
  }
  if (from._internal_len() != 0) {
    _internal_set_len(from._internal_len());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPv4Prefix::CopyFrom(const IPv4Prefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.IPv4Prefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPv4Prefix::IsInitialized() const {
  return true;
}

void IPv4Prefix::InternalSwap(IPv4Prefix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPv4Prefix, len_)
      + sizeof(IPv4Prefix::len_)
      - PROTOBUF_FIELD_OFFSET(IPv4Prefix, addr_)>(
          reinterpret_cast<char*>(&addr_),
          reinterpret_cast<char*>(&other->addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPv4Prefix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[2]);
}

// ===================================================================

class IPv6Prefix::_Internal {
 public:
};

IPv6Prefix::IPv6Prefix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.IPv6Prefix)
}
IPv6Prefix::IPv6Prefix(const IPv6Prefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addr(), 
      GetArenaForAllocation());
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.IPv6Prefix)
}

inline void IPv6Prefix::SharedCtor() {
addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
len_ = 0;
}

IPv6Prefix::~IPv6Prefix() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.IPv6Prefix)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IPv6Prefix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPv6Prefix::ArenaDtor(void* object) {
  IPv6Prefix* _this = reinterpret_cast< IPv6Prefix* >(object);
  (void)_this;
}
void IPv6Prefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPv6Prefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IPv6Prefix::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.IPv6Prefix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmpty();
  len_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPv6Prefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPv6Prefix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.IPv6Prefix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes addr = 1;
  if (!this->_internal_addr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_addr(), target);
  }

  // int32 len = 2;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.IPv6Prefix)
  return target;
}

size_t IPv6Prefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.IPv6Prefix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes addr = 1;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_addr());
  }

  // int32 len = 2;
  if (this->_internal_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_len());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPv6Prefix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IPv6Prefix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPv6Prefix::GetClassData() const { return &_class_data_; }

void IPv6Prefix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IPv6Prefix *>(to)->MergeFrom(
      static_cast<const IPv6Prefix &>(from));
}


void IPv6Prefix::MergeFrom(const IPv6Prefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.IPv6Prefix)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_addr().empty()) {
    _internal_set_addr(from._internal_addr());
  }
  if (from._internal_len() != 0) {
    _internal_set_len(from._internal_len());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPv6Prefix::CopyFrom(const IPv6Prefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.IPv6Prefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPv6Prefix::IsInitialized() const {
  return true;
}

void IPv6Prefix::InternalSwap(IPv6Prefix* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &addr_, lhs_arena,
      &other->addr_, rhs_arena
  );
  swap(len_, other->len_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPv6Prefix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[3]);
}

// ===================================================================

class EncapVal::_Internal {
 public:
};

EncapVal::EncapVal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.EncapVal)
}
EncapVal::EncapVal(const EncapVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_val();
  switch (from.val_case()) {
    case kVlanId: {
      _internal_set_vlan_id(from._internal_vlan_id());
      break;
    }
    case kMplsTag: {
      _internal_set_mpls_tag(from._internal_mpls_tag());
      break;
    }
    case kVnid: {
      _internal_set_vnid(from._internal_vnid());
      break;
    }
    case kVsid: {
      _internal_set_vsid(from._internal_vsid());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.EncapVal)
}

inline void EncapVal::SharedCtor() {
clear_has_val();
}

EncapVal::~EncapVal() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.EncapVal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EncapVal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_val()) {
    clear_val();
  }
}

void EncapVal::ArenaDtor(void* object) {
  EncapVal* _this = reinterpret_cast< EncapVal* >(object);
  (void)_this;
}
void EncapVal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncapVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EncapVal::clear_val() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.opinetcommon.v1alpha1.EncapVal)
  switch (val_case()) {
    case kVlanId: {
      // No need to clear
      break;
    }
    case kMplsTag: {
      // No need to clear
      break;
    }
    case kVnid: {
      // No need to clear
      break;
    }
    case kVsid: {
      // No need to clear
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VAL_NOT_SET;
}


void EncapVal::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.EncapVal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_val();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncapVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vlan_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_vlan_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mpls_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_mpls_tag(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vnid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_vnid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vsid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_vsid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncapVal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.EncapVal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vlan_id = 1;
  if (_internal_has_vlan_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vlan_id(), target);
  }

  // int32 mpls_tag = 2;
  if (_internal_has_mpls_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mpls_tag(), target);
  }

  // int32 vnid = 3;
  if (_internal_has_vnid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vnid(), target);
  }

  // int32 vsid = 5;
  if (_internal_has_vsid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_vsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.EncapVal)
  return target;
}

size_t EncapVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.EncapVal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (val_case()) {
    // int32 vlan_id = 1;
    case kVlanId: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vlan_id());
      break;
    }
    // int32 mpls_tag = 2;
    case kMplsTag: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mpls_tag());
      break;
    }
    // int32 vnid = 3;
    case kVnid: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vnid());
      break;
    }
    // int32 vsid = 5;
    case kVsid: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vsid());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncapVal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EncapVal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncapVal::GetClassData() const { return &_class_data_; }

void EncapVal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EncapVal *>(to)->MergeFrom(
      static_cast<const EncapVal &>(from));
}


void EncapVal::MergeFrom(const EncapVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.EncapVal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.val_case()) {
    case kVlanId: {
      _internal_set_vlan_id(from._internal_vlan_id());
      break;
    }
    case kMplsTag: {
      _internal_set_mpls_tag(from._internal_mpls_tag());
      break;
    }
    case kVnid: {
      _internal_set_vnid(from._internal_vnid());
      break;
    }
    case kVsid: {
      _internal_set_vsid(from._internal_vsid());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncapVal::CopyFrom(const EncapVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.EncapVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncapVal::IsInitialized() const {
  return true;
}

void EncapVal::InternalSwap(EncapVal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(val_, other->val_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncapVal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[4]);
}

// ===================================================================

class Encap::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::EncapVal& value(const Encap* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::EncapVal&
Encap::_Internal::value(const Encap* msg) {
  return *msg->value_;
}
Encap::Encap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.Encap)
}
Encap::Encap(const Encap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::opi_api::network::opinetcommon::v1alpha1::EncapVal(*from.value_);
  } else {
    value_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.Encap)
}

inline void Encap::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(type_));
}

Encap::~Encap() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.Encap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Encap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void Encap::ArenaDtor(void* object) {
  Encap* _this = reinterpret_cast< Encap* >(object);
  (void)_this;
}
void Encap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Encap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Encap::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.Encap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Encap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.EncapType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::opinetcommon::v1alpha1::EncapType>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.EncapVal value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Encap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.Encap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.EncapType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.EncapVal value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.Encap)
  return target;
}

size_t Encap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.Encap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.EncapVal value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.EncapType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Encap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Encap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Encap::GetClassData() const { return &_class_data_; }

void Encap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Encap *>(to)->MergeFrom(
      static_cast<const Encap &>(from));
}


void Encap::MergeFrom(const Encap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.Encap)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::opi_api::network::opinetcommon::v1alpha1::EncapVal::MergeFrom(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Encap::CopyFrom(const Encap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.Encap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Encap::IsInitialized() const {
  return true;
}

void Encap::InternalSwap(Encap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Encap, type_)
      + sizeof(Encap::type_)
      - PROTOBUF_FIELD_OFFSET(Encap, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Encap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[5]);
}

// ===================================================================

class PortRange::_Internal {
 public:
};

PortRange::PortRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.PortRange)
}
PortRange::PortRange(const PortRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_low_, &from.port_low_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_high_) -
    reinterpret_cast<char*>(&port_low_)) + sizeof(port_high_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.PortRange)
}

inline void PortRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_low_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_high_) -
    reinterpret_cast<char*>(&port_low_)) + sizeof(port_high_));
}

PortRange::~PortRange() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.PortRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PortRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PortRange::ArenaDtor(void* object) {
  PortRange* _this = reinterpret_cast< PortRange* >(object);
  (void)_this;
}
void PortRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortRange::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.PortRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_low_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_high_) -
      reinterpret_cast<char*>(&port_low_)) + sizeof(port_high_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 port_low = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          port_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port_high = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          port_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.PortRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port_low = 1;
  if (this->_internal_port_low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_port_low(), target);
  }

  // int32 port_high = 2;
  if (this->_internal_port_high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.PortRange)
  return target;
}

size_t PortRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.PortRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 port_low = 1;
  if (this->_internal_port_low() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port_low());
  }

  // int32 port_high = 2;
  if (this->_internal_port_high() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port_high());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PortRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortRange::GetClassData() const { return &_class_data_; }

void PortRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PortRange *>(to)->MergeFrom(
      static_cast<const PortRange &>(from));
}


void PortRange::MergeFrom(const PortRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.PortRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port_low() != 0) {
    _internal_set_port_low(from._internal_port_low());
  }
  if (from._internal_port_high() != 0) {
    _internal_set_port_high(from._internal_port_high());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortRange::CopyFrom(const PortRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.PortRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortRange::IsInitialized() const {
  return true;
}

void PortRange::InternalSwap(PortRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortRange, port_high_)
      + sizeof(PortRange::port_high_)
      - PROTOBUF_FIELD_OFFSET(PortRange, port_low_)>(
          reinterpret_cast<char*>(&port_low_),
          reinterpret_cast<char*>(&other->port_low_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[6]);
}

// ===================================================================

class IPRange::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& low(const IPRange* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& high(const IPRange* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
IPRange::_Internal::low(const IPRange* msg) {
  return *msg->low_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
IPRange::_Internal::high(const IPRange* msg) {
  return *msg->high_;
}
IPRange::IPRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.IPRange)
}
IPRange::IPRange(const IPRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_low()) {
    low_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.low_);
  } else {
    low_ = nullptr;
  }
  if (from._internal_has_high()) {
    high_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.high_);
  } else {
    high_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.IPRange)
}

inline void IPRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&low_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&high_) -
    reinterpret_cast<char*>(&low_)) + sizeof(high_));
}

IPRange::~IPRange() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.IPRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IPRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete low_;
  if (this != internal_default_instance()) delete high_;
}

void IPRange::ArenaDtor(void* object) {
  IPRange* _this = reinterpret_cast< IPRange* >(object);
  (void)_this;
}
void IPRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IPRange::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.IPRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && low_ != nullptr) {
    delete low_;
  }
  low_ = nullptr;
  if (GetArenaForAllocation() == nullptr && high_ != nullptr) {
    delete high_;
  }
  high_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress low = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_low(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress high = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_high(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.IPRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress low = 1;
  if (this->_internal_has_low()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::low(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress high = 2;
  if (this->_internal_has_high()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::high(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.IPRange)
  return target;
}

size_t IPRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.IPRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress low = 1;
  if (this->_internal_has_low()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *low_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress high = 2;
  if (this->_internal_has_high()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *high_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IPRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPRange::GetClassData() const { return &_class_data_; }

void IPRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IPRange *>(to)->MergeFrom(
      static_cast<const IPRange &>(from));
}


void IPRange::MergeFrom(const IPRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.IPRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_low()) {
    _internal_mutable_low()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_low());
  }
  if (from._internal_has_high()) {
    _internal_mutable_high()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_high());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPRange::CopyFrom(const IPRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.IPRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPRange::IsInitialized() const {
  return true;
}

void IPRange::InternalSwap(IPRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPRange, high_)
      + sizeof(IPRange::high_)
      - PROTOBUF_FIELD_OFFSET(IPRange, low_)>(
          reinterpret_cast<char*>(&low_),
          reinterpret_cast<char*>(&other->low_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[7]);
}

// ===================================================================

class AddressRange::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPRange& ipv4_range(const AddressRange* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPRange& ipv6_range(const AddressRange* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPRange&
AddressRange::_Internal::ipv4_range(const AddressRange* msg) {
  return *msg->range_.ipv4_range_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPRange&
AddressRange::_Internal::ipv6_range(const AddressRange* msg) {
  return *msg->range_.ipv6_range_;
}
void AddressRange::set_allocated_ipv4_range(::opi_api::network::opinetcommon::v1alpha1::IPRange* ipv4_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_range();
  if (ipv4_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::opinetcommon::v1alpha1::IPRange>::GetOwningArena(ipv4_range);
    if (message_arena != submessage_arena) {
      ipv4_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipv4_range, submessage_arena);
    }
    set_has_ipv4_range();
    range_.ipv4_range_ = ipv4_range;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.opinetcommon.v1alpha1.AddressRange.ipv4_range)
}
void AddressRange::set_allocated_ipv6_range(::opi_api::network::opinetcommon::v1alpha1::IPRange* ipv6_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_range();
  if (ipv6_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::opinetcommon::v1alpha1::IPRange>::GetOwningArena(ipv6_range);
    if (message_arena != submessage_arena) {
      ipv6_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipv6_range, submessage_arena);
    }
    set_has_ipv6_range();
    range_.ipv6_range_ = ipv6_range;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.opinetcommon.v1alpha1.AddressRange.ipv6_range)
}
AddressRange::AddressRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.AddressRange)
}
AddressRange::AddressRange(const AddressRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_range();
  switch (from.range_case()) {
    case kIpv4Range: {
      _internal_mutable_ipv4_range()->::opi_api::network::opinetcommon::v1alpha1::IPRange::MergeFrom(from._internal_ipv4_range());
      break;
    }
    case kIpv6Range: {
      _internal_mutable_ipv6_range()->::opi_api::network::opinetcommon::v1alpha1::IPRange::MergeFrom(from._internal_ipv6_range());
      break;
    }
    case RANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.AddressRange)
}

inline void AddressRange::SharedCtor() {
clear_has_range();
}

AddressRange::~AddressRange() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.AddressRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_range()) {
    clear_range();
  }
}

void AddressRange::ArenaDtor(void* object) {
  AddressRange* _this = reinterpret_cast< AddressRange* >(object);
  (void)_this;
}
void AddressRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressRange::clear_range() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.opinetcommon.v1alpha1.AddressRange)
  switch (range_case()) {
    case kIpv4Range: {
      if (GetArenaForAllocation() == nullptr) {
        delete range_.ipv4_range_;
      }
      break;
    }
    case kIpv6Range: {
      if (GetArenaForAllocation() == nullptr) {
        delete range_.ipv6_range_;
      }
      break;
    }
    case RANGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RANGE_NOT_SET;
}


void AddressRange::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.AddressRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_range();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IPRange ipv4_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipv4_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPRange ipv6_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipv6_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddressRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.AddressRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPRange ipv4_range = 1;
  if (_internal_has_ipv4_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ipv4_range(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPRange ipv6_range = 2;
  if (_internal_has_ipv6_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ipv6_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.AddressRange)
  return target;
}

size_t AddressRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.AddressRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (range_case()) {
    // .opi_api.network.opinetcommon.v1alpha1.IPRange ipv4_range = 1;
    case kIpv4Range: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_.ipv4_range_);
      break;
    }
    // .opi_api.network.opinetcommon.v1alpha1.IPRange ipv6_range = 2;
    case kIpv6Range: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_.ipv6_range_);
      break;
    }
    case RANGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressRange::GetClassData() const { return &_class_data_; }

void AddressRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddressRange *>(to)->MergeFrom(
      static_cast<const AddressRange &>(from));
}


void AddressRange::MergeFrom(const AddressRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.AddressRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.range_case()) {
    case kIpv4Range: {
      _internal_mutable_ipv4_range()->::opi_api::network::opinetcommon::v1alpha1::IPRange::MergeFrom(from._internal_ipv4_range());
      break;
    }
    case kIpv6Range: {
      _internal_mutable_ipv6_range()->::opi_api::network::opinetcommon::v1alpha1::IPRange::MergeFrom(from._internal_ipv6_range());
      break;
    }
    case RANGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressRange::CopyFrom(const AddressRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.AddressRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressRange::IsInitialized() const {
  return true;
}

void AddressRange::InternalSwap(AddressRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(range_, other->range_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[8]);
}

// ===================================================================

class IPEntry::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& prefix(const IPEntry* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::AddressRange& range(const IPEntry* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&
IPEntry::_Internal::prefix(const IPEntry* msg) {
  return *msg->ip_entry_.prefix_;
}
const ::opi_api::network::opinetcommon::v1alpha1::AddressRange&
IPEntry::_Internal::range(const IPEntry* msg) {
  return *msg->ip_entry_.range_;
}
void IPEntry::set_allocated_prefix(::opi_api::network::opinetcommon::v1alpha1::IPPrefix* prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ip_entry();
  if (prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::opinetcommon::v1alpha1::IPPrefix>::GetOwningArena(prefix);
    if (message_arena != submessage_arena) {
      prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix, submessage_arena);
    }
    set_has_prefix();
    ip_entry_.prefix_ = prefix;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.opinetcommon.v1alpha1.IPEntry.prefix)
}
void IPEntry::set_allocated_range(::opi_api::network::opinetcommon::v1alpha1::AddressRange* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ip_entry();
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::opinetcommon::v1alpha1::AddressRange>::GetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    set_has_range();
    ip_entry_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.opinetcommon.v1alpha1.IPEntry.range)
}
IPEntry::IPEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.IPEntry)
}
IPEntry::IPEntry(const IPEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_ip_entry();
  switch (from.ip_entry_case()) {
    case kPrefix: {
      _internal_mutable_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(from._internal_prefix());
      break;
    }
    case kRange: {
      _internal_mutable_range()->::opi_api::network::opinetcommon::v1alpha1::AddressRange::MergeFrom(from._internal_range());
      break;
    }
    case kTag: {
      _internal_set_tag(from._internal_tag());
      break;
    }
    case IP_ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.IPEntry)
}

inline void IPEntry::SharedCtor() {
clear_has_ip_entry();
}

IPEntry::~IPEntry() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.IPEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IPEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_ip_entry()) {
    clear_ip_entry();
  }
}

void IPEntry::ArenaDtor(void* object) {
  IPEntry* _this = reinterpret_cast< IPEntry* >(object);
  (void)_this;
}
void IPEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IPEntry::clear_ip_entry() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.opinetcommon.v1alpha1.IPEntry)
  switch (ip_entry_case()) {
    case kPrefix: {
      if (GetArenaForAllocation() == nullptr) {
        delete ip_entry_.prefix_;
      }
      break;
    }
    case kRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete ip_entry_.range_;
      }
      break;
    }
    case kTag: {
      // No need to clear
      break;
    }
    case IP_ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IP_ENTRY_NOT_SET;
}


void IPEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.IPEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ip_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.AddressRange range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_tag(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.IPEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 1;
  if (_internal_has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prefix(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.AddressRange range = 2;
  if (_internal_has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::range(this), target, stream);
  }

  // int32 tag = 3;
  if (_internal_has_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.IPEntry)
  return target;
}

size_t IPEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.IPEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ip_entry_case()) {
    // .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 1;
    case kPrefix: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip_entry_.prefix_);
      break;
    }
    // .opi_api.network.opinetcommon.v1alpha1.AddressRange range = 2;
    case kRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip_entry_.range_);
      break;
    }
    // int32 tag = 3;
    case kTag: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tag());
      break;
    }
    case IP_ENTRY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IPEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPEntry::GetClassData() const { return &_class_data_; }

void IPEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IPEntry *>(to)->MergeFrom(
      static_cast<const IPEntry &>(from));
}


void IPEntry::MergeFrom(const IPEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.IPEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ip_entry_case()) {
    case kPrefix: {
      _internal_mutable_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(from._internal_prefix());
      break;
    }
    case kRange: {
      _internal_mutable_range()->::opi_api::network::opinetcommon::v1alpha1::AddressRange::MergeFrom(from._internal_range());
      break;
    }
    case kTag: {
      _internal_set_tag(from._internal_tag());
      break;
    }
    case IP_ENTRY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPEntry::CopyFrom(const IPEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.IPEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPEntry::IsInitialized() const {
  return true;
}

void IPEntry::InternalSwap(IPEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ip_entry_, other->ip_entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[9]);
}

// ===================================================================

class IPList::_Internal {
 public:
};

IPList::IPList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ip_entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.IPList)
}
IPList::IPList(const IPList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ip_entries_(from.ip_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.IPList)
}

inline void IPList::SharedCtor() {
}

IPList::~IPList() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.IPList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IPList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IPList::ArenaDtor(void* object) {
  IPList* _this = reinterpret_cast< IPList* >(object);
  (void)_this;
}
void IPList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IPList::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.IPList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.opinetcommon.v1alpha1.IPEntry ip_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ip_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.IPList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.opinetcommon.v1alpha1.IPEntry ip_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ip_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ip_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.IPList)
  return target;
}

size_t IPList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.IPList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.opinetcommon.v1alpha1.IPEntry ip_entries = 1;
  total_size += 1UL * this->_internal_ip_entries_size();
  for (const auto& msg : this->ip_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IPList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPList::GetClassData() const { return &_class_data_; }

void IPList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IPList *>(to)->MergeFrom(
      static_cast<const IPList &>(from));
}


void IPList::MergeFrom(const IPList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.IPList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ip_entries_.MergeFrom(from.ip_entries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPList::CopyFrom(const IPList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.IPList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPList::IsInitialized() const {
  return true;
}

void IPList::InternalSwap(IPList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ip_entries_.InternalSwap(&other->ip_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[10]);
}

// ===================================================================

class RuleL3Match::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& src_prefix(const RuleL3Match* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::AddressRange& src_range(const RuleL3Match* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPList& src_ip_list(const RuleL3Match* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& dst_prefix(const RuleL3Match* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::AddressRange& dst_range(const RuleL3Match* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPList& dst_ip_list(const RuleL3Match* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&
RuleL3Match::_Internal::src_prefix(const RuleL3Match* msg) {
  return *msg->srcmatch_.src_prefix_;
}
const ::opi_api::network::opinetcommon::v1alpha1::AddressRange&
RuleL3Match::_Internal::src_range(const RuleL3Match* msg) {
  return *msg->srcmatch_.src_range_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPList&
RuleL3Match::_Internal::src_ip_list(const RuleL3Match* msg) {
  return *msg->srcmatch_.src_ip_list_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&
RuleL3Match::_Internal::dst_prefix(const RuleL3Match* msg) {
  return *msg->dstmatch_.dst_prefix_;
}
const ::opi_api::network::opinetcommon::v1alpha1::AddressRange&
RuleL3Match::_Internal::dst_range(const RuleL3Match* msg) {
  return *msg->dstmatch_.dst_range_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPList&
RuleL3Match::_Internal::dst_ip_list(const RuleL3Match* msg) {
  return *msg->dstmatch_.dst_ip_list_;
}
void RuleL3Match::set_allocated_src_prefix(::opi_api::network::opinetcommon::v1alpha1::IPPrefix* src_prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_srcmatch();
  if (src_prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::opinetcommon::v1alpha1::IPPrefix>::GetOwningArena(src_prefix);
    if (message_arena != submessage_arena) {
      src_prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_prefix, submessage_arena);
    }
    set_has_src_prefix();
    srcmatch_.src_prefix_ = src_prefix;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.opinetcommon.v1alpha1.RuleL3Match.src_prefix)
}
void RuleL3Match::set_allocated_src_range(::opi_api::network::opinetcommon::v1alpha1::AddressRange* src_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_srcmatch();
  if (src_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::opinetcommon::v1alpha1::AddressRange>::GetOwningArena(src_range);
    if (message_arena != submessage_arena) {
      src_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_range, submessage_arena);
    }
    set_has_src_range();
    srcmatch_.src_range_ = src_range;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.opinetcommon.v1alpha1.RuleL3Match.src_range)
}
void RuleL3Match::set_allocated_src_ip_list(::opi_api::network::opinetcommon::v1alpha1::IPList* src_ip_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_srcmatch();
  if (src_ip_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::opinetcommon::v1alpha1::IPList>::GetOwningArena(src_ip_list);
    if (message_arena != submessage_arena) {
      src_ip_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_ip_list, submessage_arena);
    }
    set_has_src_ip_list();
    srcmatch_.src_ip_list_ = src_ip_list;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.opinetcommon.v1alpha1.RuleL3Match.src_ip_list)
}
void RuleL3Match::set_allocated_dst_prefix(::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dst_prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_dstmatch();
  if (dst_prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::opinetcommon::v1alpha1::IPPrefix>::GetOwningArena(dst_prefix);
    if (message_arena != submessage_arena) {
      dst_prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_prefix, submessage_arena);
    }
    set_has_dst_prefix();
    dstmatch_.dst_prefix_ = dst_prefix;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.opinetcommon.v1alpha1.RuleL3Match.dst_prefix)
}
void RuleL3Match::set_allocated_dst_range(::opi_api::network::opinetcommon::v1alpha1::AddressRange* dst_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_dstmatch();
  if (dst_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::opinetcommon::v1alpha1::AddressRange>::GetOwningArena(dst_range);
    if (message_arena != submessage_arena) {
      dst_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_range, submessage_arena);
    }
    set_has_dst_range();
    dstmatch_.dst_range_ = dst_range;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.opinetcommon.v1alpha1.RuleL3Match.dst_range)
}
void RuleL3Match::set_allocated_dst_ip_list(::opi_api::network::opinetcommon::v1alpha1::IPList* dst_ip_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_dstmatch();
  if (dst_ip_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::opinetcommon::v1alpha1::IPList>::GetOwningArena(dst_ip_list);
    if (message_arena != submessage_arena) {
      dst_ip_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_ip_list, submessage_arena);
    }
    set_has_dst_ip_list();
    dstmatch_.dst_ip_list_ = dst_ip_list;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.opinetcommon.v1alpha1.RuleL3Match.dst_ip_list)
}
RuleL3Match::RuleL3Match(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.RuleL3Match)
}
RuleL3Match::RuleL3Match(const RuleL3Match& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_protomatch();
  switch (from.protomatch_case()) {
    case kProtoNum: {
      _internal_set_proto_num(from._internal_proto_num());
      break;
    }
    case kProtoWildCard: {
      _internal_set_proto_wild_card(from._internal_proto_wild_card());
      break;
    }
    case PROTOMATCH_NOT_SET: {
      break;
    }
  }
  clear_has_srcmatch();
  switch (from.srcmatch_case()) {
    case kSrcPrefix: {
      _internal_mutable_src_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(from._internal_src_prefix());
      break;
    }
    case kSrcRange: {
      _internal_mutable_src_range()->::opi_api::network::opinetcommon::v1alpha1::AddressRange::MergeFrom(from._internal_src_range());
      break;
    }
    case kSrcTag: {
      _internal_set_src_tag(from._internal_src_tag());
      break;
    }
    case kSrcIpList: {
      _internal_mutable_src_ip_list()->::opi_api::network::opinetcommon::v1alpha1::IPList::MergeFrom(from._internal_src_ip_list());
      break;
    }
    case SRCMATCH_NOT_SET: {
      break;
    }
  }
  clear_has_dstmatch();
  switch (from.dstmatch_case()) {
    case kDstPrefix: {
      _internal_mutable_dst_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(from._internal_dst_prefix());
      break;
    }
    case kDstRange: {
      _internal_mutable_dst_range()->::opi_api::network::opinetcommon::v1alpha1::AddressRange::MergeFrom(from._internal_dst_range());
      break;
    }
    case kDstTag: {
      _internal_set_dst_tag(from._internal_dst_tag());
      break;
    }
    case kDstIpList: {
      _internal_mutable_dst_ip_list()->::opi_api::network::opinetcommon::v1alpha1::IPList::MergeFrom(from._internal_dst_ip_list());
      break;
    }
    case DSTMATCH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.RuleL3Match)
}

inline void RuleL3Match::SharedCtor() {
clear_has_protomatch();
clear_has_srcmatch();
clear_has_dstmatch();
}

RuleL3Match::~RuleL3Match() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.RuleL3Match)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RuleL3Match::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_protomatch()) {
    clear_protomatch();
  }
  if (has_srcmatch()) {
    clear_srcmatch();
  }
  if (has_dstmatch()) {
    clear_dstmatch();
  }
}

void RuleL3Match::ArenaDtor(void* object) {
  RuleL3Match* _this = reinterpret_cast< RuleL3Match* >(object);
  (void)_this;
}
void RuleL3Match::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleL3Match::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuleL3Match::clear_protomatch() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.opinetcommon.v1alpha1.RuleL3Match)
  switch (protomatch_case()) {
    case kProtoNum: {
      // No need to clear
      break;
    }
    case kProtoWildCard: {
      // No need to clear
      break;
    }
    case PROTOMATCH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROTOMATCH_NOT_SET;
}

void RuleL3Match::clear_srcmatch() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.opinetcommon.v1alpha1.RuleL3Match)
  switch (srcmatch_case()) {
    case kSrcPrefix: {
      if (GetArenaForAllocation() == nullptr) {
        delete srcmatch_.src_prefix_;
      }
      break;
    }
    case kSrcRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete srcmatch_.src_range_;
      }
      break;
    }
    case kSrcTag: {
      // No need to clear
      break;
    }
    case kSrcIpList: {
      if (GetArenaForAllocation() == nullptr) {
        delete srcmatch_.src_ip_list_;
      }
      break;
    }
    case SRCMATCH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SRCMATCH_NOT_SET;
}

void RuleL3Match::clear_dstmatch() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.opinetcommon.v1alpha1.RuleL3Match)
  switch (dstmatch_case()) {
    case kDstPrefix: {
      if (GetArenaForAllocation() == nullptr) {
        delete dstmatch_.dst_prefix_;
      }
      break;
    }
    case kDstRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete dstmatch_.dst_range_;
      }
      break;
    }
    case kDstTag: {
      // No need to clear
      break;
    }
    case kDstIpList: {
      if (GetArenaForAllocation() == nullptr) {
        delete dstmatch_.dst_ip_list_;
      }
      break;
    }
    case DSTMATCH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = DSTMATCH_NOT_SET;
}


void RuleL3Match::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.RuleL3Match)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_protomatch();
  clear_srcmatch();
  clear_dstmatch();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleL3Match::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 proto_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_proto_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.WildcardMatch proto_wild_card = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_proto_wild_card(static_cast<::opi_api::network::opinetcommon::v1alpha1::WildcardMatch>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPPrefix src_prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.AddressRange src_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 src_tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_src_tag(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPList src_ip_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_ip_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dst_prefix = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.AddressRange dst_range = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dst_tag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _internal_set_dst_tag(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPList dst_ip_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_ip_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RuleL3Match::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.RuleL3Match)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 proto_num = 1;
  if (_internal_has_proto_num()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_proto_num(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.WildcardMatch proto_wild_card = 2;
  if (_internal_has_proto_wild_card()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_proto_wild_card(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix src_prefix = 3;
  if (_internal_has_src_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::src_prefix(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.AddressRange src_range = 4;
  if (_internal_has_src_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::src_range(this), target, stream);
  }

  // int32 src_tag = 5;
  if (_internal_has_src_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_src_tag(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPList src_ip_list = 6;
  if (_internal_has_src_ip_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::src_ip_list(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dst_prefix = 7;
  if (_internal_has_dst_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::dst_prefix(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.AddressRange dst_range = 8;
  if (_internal_has_dst_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::dst_range(this), target, stream);
  }

  // int32 dst_tag = 9;
  if (_internal_has_dst_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_dst_tag(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPList dst_ip_list = 10;
  if (_internal_has_dst_ip_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::dst_ip_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.RuleL3Match)
  return target;
}

size_t RuleL3Match::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.RuleL3Match)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (protomatch_case()) {
    // int32 proto_num = 1;
    case kProtoNum: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_proto_num());
      break;
    }
    // .opi_api.network.opinetcommon.v1alpha1.WildcardMatch proto_wild_card = 2;
    case kProtoWildCard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_proto_wild_card());
      break;
    }
    case PROTOMATCH_NOT_SET: {
      break;
    }
  }
  switch (srcmatch_case()) {
    // .opi_api.network.opinetcommon.v1alpha1.IPPrefix src_prefix = 3;
    case kSrcPrefix: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *srcmatch_.src_prefix_);
      break;
    }
    // .opi_api.network.opinetcommon.v1alpha1.AddressRange src_range = 4;
    case kSrcRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *srcmatch_.src_range_);
      break;
    }
    // int32 src_tag = 5;
    case kSrcTag: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_src_tag());
      break;
    }
    // .opi_api.network.opinetcommon.v1alpha1.IPList src_ip_list = 6;
    case kSrcIpList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *srcmatch_.src_ip_list_);
      break;
    }
    case SRCMATCH_NOT_SET: {
      break;
    }
  }
  switch (dstmatch_case()) {
    // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dst_prefix = 7;
    case kDstPrefix: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dstmatch_.dst_prefix_);
      break;
    }
    // .opi_api.network.opinetcommon.v1alpha1.AddressRange dst_range = 8;
    case kDstRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dstmatch_.dst_range_);
      break;
    }
    // int32 dst_tag = 9;
    case kDstTag: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dst_tag());
      break;
    }
    // .opi_api.network.opinetcommon.v1alpha1.IPList dst_ip_list = 10;
    case kDstIpList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dstmatch_.dst_ip_list_);
      break;
    }
    case DSTMATCH_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuleL3Match::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuleL3Match::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuleL3Match::GetClassData() const { return &_class_data_; }

void RuleL3Match::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RuleL3Match *>(to)->MergeFrom(
      static_cast<const RuleL3Match &>(from));
}


void RuleL3Match::MergeFrom(const RuleL3Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.RuleL3Match)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.protomatch_case()) {
    case kProtoNum: {
      _internal_set_proto_num(from._internal_proto_num());
      break;
    }
    case kProtoWildCard: {
      _internal_set_proto_wild_card(from._internal_proto_wild_card());
      break;
    }
    case PROTOMATCH_NOT_SET: {
      break;
    }
  }
  switch (from.srcmatch_case()) {
    case kSrcPrefix: {
      _internal_mutable_src_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(from._internal_src_prefix());
      break;
    }
    case kSrcRange: {
      _internal_mutable_src_range()->::opi_api::network::opinetcommon::v1alpha1::AddressRange::MergeFrom(from._internal_src_range());
      break;
    }
    case kSrcTag: {
      _internal_set_src_tag(from._internal_src_tag());
      break;
    }
    case kSrcIpList: {
      _internal_mutable_src_ip_list()->::opi_api::network::opinetcommon::v1alpha1::IPList::MergeFrom(from._internal_src_ip_list());
      break;
    }
    case SRCMATCH_NOT_SET: {
      break;
    }
  }
  switch (from.dstmatch_case()) {
    case kDstPrefix: {
      _internal_mutable_dst_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(from._internal_dst_prefix());
      break;
    }
    case kDstRange: {
      _internal_mutable_dst_range()->::opi_api::network::opinetcommon::v1alpha1::AddressRange::MergeFrom(from._internal_dst_range());
      break;
    }
    case kDstTag: {
      _internal_set_dst_tag(from._internal_dst_tag());
      break;
    }
    case kDstIpList: {
      _internal_mutable_dst_ip_list()->::opi_api::network::opinetcommon::v1alpha1::IPList::MergeFrom(from._internal_dst_ip_list());
      break;
    }
    case DSTMATCH_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuleL3Match::CopyFrom(const RuleL3Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.RuleL3Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleL3Match::IsInitialized() const {
  return true;
}

void RuleL3Match::InternalSwap(RuleL3Match* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(protomatch_, other->protomatch_);
  swap(srcmatch_, other->srcmatch_);
  swap(dstmatch_, other->dstmatch_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleL3Match::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[11]);
}

// ===================================================================

class PortMatch::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::PortRange& src_port_range(const PortMatch* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::PortRange& dst_port_range(const PortMatch* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::PortRange&
PortMatch::_Internal::src_port_range(const PortMatch* msg) {
  return *msg->src_port_range_;
}
const ::opi_api::network::opinetcommon::v1alpha1::PortRange&
PortMatch::_Internal::dst_port_range(const PortMatch* msg) {
  return *msg->dst_port_range_;
}
PortMatch::PortMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.PortMatch)
}
PortMatch::PortMatch(const PortMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_src_port_range()) {
    src_port_range_ = new ::opi_api::network::opinetcommon::v1alpha1::PortRange(*from.src_port_range_);
  } else {
    src_port_range_ = nullptr;
  }
  if (from._internal_has_dst_port_range()) {
    dst_port_range_ = new ::opi_api::network::opinetcommon::v1alpha1::PortRange(*from.dst_port_range_);
  } else {
    dst_port_range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.PortMatch)
}

inline void PortMatch::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&src_port_range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dst_port_range_) -
    reinterpret_cast<char*>(&src_port_range_)) + sizeof(dst_port_range_));
}

PortMatch::~PortMatch() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.PortMatch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PortMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete src_port_range_;
  if (this != internal_default_instance()) delete dst_port_range_;
}

void PortMatch::ArenaDtor(void* object) {
  PortMatch* _this = reinterpret_cast< PortMatch* >(object);
  (void)_this;
}
void PortMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.PortMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && src_port_range_ != nullptr) {
    delete src_port_range_;
  }
  src_port_range_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dst_port_range_ != nullptr) {
    delete dst_port_range_;
  }
  dst_port_range_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.PortRange src_port_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_port_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.PortRange dst_port_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_port_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.PortMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.PortRange src_port_range = 1;
  if (this->_internal_has_src_port_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::src_port_range(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.PortRange dst_port_range = 2;
  if (this->_internal_has_dst_port_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dst_port_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.PortMatch)
  return target;
}

size_t PortMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.PortMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.PortRange src_port_range = 1;
  if (this->_internal_has_src_port_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_port_range_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.PortRange dst_port_range = 2;
  if (this->_internal_has_dst_port_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_port_range_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PortMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortMatch::GetClassData() const { return &_class_data_; }

void PortMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PortMatch *>(to)->MergeFrom(
      static_cast<const PortMatch &>(from));
}


void PortMatch::MergeFrom(const PortMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.PortMatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_src_port_range()) {
    _internal_mutable_src_port_range()->::opi_api::network::opinetcommon::v1alpha1::PortRange::MergeFrom(from._internal_src_port_range());
  }
  if (from._internal_has_dst_port_range()) {
    _internal_mutable_dst_port_range()->::opi_api::network::opinetcommon::v1alpha1::PortRange::MergeFrom(from._internal_dst_port_range());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortMatch::CopyFrom(const PortMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.PortMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortMatch::IsInitialized() const {
  return true;
}

void PortMatch::InternalSwap(PortMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortMatch, dst_port_range_)
      + sizeof(PortMatch::dst_port_range_)
      - PROTOBUF_FIELD_OFFSET(PortMatch, src_port_range_)>(
          reinterpret_cast<char*>(&src_port_range_),
          reinterpret_cast<char*>(&other->src_port_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortMatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[12]);
}

// ===================================================================

class ICMPMatch::_Internal {
 public:
};

ICMPMatch::ICMPMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.ICMPMatch)
}
ICMPMatch::ICMPMatch(const ICMPMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_typematch();
  switch (from.typematch_case()) {
    case kType: {
      _internal_set_type(from._internal_type());
      break;
    }
    case kTypeWildcard: {
      _internal_set_type_wildcard(from._internal_type_wildcard());
      break;
    }
    case TYPEMATCH_NOT_SET: {
      break;
    }
  }
  clear_has_codematch();
  switch (from.codematch_case()) {
    case kCode: {
      _internal_set_code(from._internal_code());
      break;
    }
    case kCodeWildcard: {
      _internal_set_code_wildcard(from._internal_code_wildcard());
      break;
    }
    case CODEMATCH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.ICMPMatch)
}

inline void ICMPMatch::SharedCtor() {
clear_has_typematch();
clear_has_codematch();
}

ICMPMatch::~ICMPMatch() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.ICMPMatch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ICMPMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_typematch()) {
    clear_typematch();
  }
  if (has_codematch()) {
    clear_codematch();
  }
}

void ICMPMatch::ArenaDtor(void* object) {
  ICMPMatch* _this = reinterpret_cast< ICMPMatch* >(object);
  (void)_this;
}
void ICMPMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ICMPMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ICMPMatch::clear_typematch() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.opinetcommon.v1alpha1.ICMPMatch)
  switch (typematch_case()) {
    case kType: {
      // No need to clear
      break;
    }
    case kTypeWildcard: {
      // No need to clear
      break;
    }
    case TYPEMATCH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPEMATCH_NOT_SET;
}

void ICMPMatch::clear_codematch() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.opinetcommon.v1alpha1.ICMPMatch)
  switch (codematch_case()) {
    case kCode: {
      // No need to clear
      break;
    }
    case kCodeWildcard: {
      // No need to clear
      break;
    }
    case CODEMATCH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = CODEMATCH_NOT_SET;
}


void ICMPMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.ICMPMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_typematch();
  clear_codematch();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ICMPMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_type(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.WildcardMatch type_wildcard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type_wildcard(static_cast<::opi_api::network::opinetcommon::v1alpha1::WildcardMatch>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_code(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.WildcardMatch code_wildcard = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code_wildcard(static_cast<::opi_api::network::opinetcommon::v1alpha1::WildcardMatch>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ICMPMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.ICMPMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.WildcardMatch type_wildcard = 2;
  if (_internal_has_type_wildcard()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type_wildcard(), target);
  }

  // int32 code = 3;
  if (_internal_has_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_code(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.WildcardMatch code_wildcard = 4;
  if (_internal_has_code_wildcard()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_code_wildcard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.ICMPMatch)
  return target;
}

size_t ICMPMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.ICMPMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (typematch_case()) {
    // int32 type = 1;
    case kType: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
      break;
    }
    // .opi_api.network.opinetcommon.v1alpha1.WildcardMatch type_wildcard = 2;
    case kTypeWildcard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type_wildcard());
      break;
    }
    case TYPEMATCH_NOT_SET: {
      break;
    }
  }
  switch (codematch_case()) {
    // int32 code = 3;
    case kCode: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_code());
      break;
    }
    // .opi_api.network.opinetcommon.v1alpha1.WildcardMatch code_wildcard = 4;
    case kCodeWildcard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code_wildcard());
      break;
    }
    case CODEMATCH_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ICMPMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ICMPMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ICMPMatch::GetClassData() const { return &_class_data_; }

void ICMPMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ICMPMatch *>(to)->MergeFrom(
      static_cast<const ICMPMatch &>(from));
}


void ICMPMatch::MergeFrom(const ICMPMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.ICMPMatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.typematch_case()) {
    case kType: {
      _internal_set_type(from._internal_type());
      break;
    }
    case kTypeWildcard: {
      _internal_set_type_wildcard(from._internal_type_wildcard());
      break;
    }
    case TYPEMATCH_NOT_SET: {
      break;
    }
  }
  switch (from.codematch_case()) {
    case kCode: {
      _internal_set_code(from._internal_code());
      break;
    }
    case kCodeWildcard: {
      _internal_set_code_wildcard(from._internal_code_wildcard());
      break;
    }
    case CODEMATCH_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ICMPMatch::CopyFrom(const ICMPMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.ICMPMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ICMPMatch::IsInitialized() const {
  return true;
}

void ICMPMatch::InternalSwap(ICMPMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(typematch_, other->typematch_);
  swap(codematch_, other->codematch_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ICMPMatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[13]);
}

// ===================================================================

class PortListMatch::_Internal {
 public:
};

PortListMatch::PortListMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  src_port_range_(arena),
  dst_port_range_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.PortListMatch)
}
PortListMatch::PortListMatch(const PortListMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      src_port_range_(from.src_port_range_),
      dst_port_range_(from.dst_port_range_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.PortListMatch)
}

inline void PortListMatch::SharedCtor() {
}

PortListMatch::~PortListMatch() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.PortListMatch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PortListMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PortListMatch::ArenaDtor(void* object) {
  PortListMatch* _this = reinterpret_cast< PortListMatch* >(object);
  (void)_this;
}
void PortListMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortListMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortListMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.PortListMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  src_port_range_.Clear();
  dst_port_range_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortListMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.opinetcommon.v1alpha1.PortRange src_port_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_src_port_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.network.opinetcommon.v1alpha1.PortRange dst_port_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dst_port_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortListMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.PortListMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.opinetcommon.v1alpha1.PortRange src_port_range = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_src_port_range_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_src_port_range(i), target, stream);
  }

  // repeated .opi_api.network.opinetcommon.v1alpha1.PortRange dst_port_range = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dst_port_range_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_dst_port_range(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.PortListMatch)
  return target;
}

size_t PortListMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.PortListMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.opinetcommon.v1alpha1.PortRange src_port_range = 1;
  total_size += 1UL * this->_internal_src_port_range_size();
  for (const auto& msg : this->src_port_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opi_api.network.opinetcommon.v1alpha1.PortRange dst_port_range = 2;
  total_size += 1UL * this->_internal_dst_port_range_size();
  for (const auto& msg : this->dst_port_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortListMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PortListMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortListMatch::GetClassData() const { return &_class_data_; }

void PortListMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PortListMatch *>(to)->MergeFrom(
      static_cast<const PortListMatch &>(from));
}


void PortListMatch::MergeFrom(const PortListMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.PortListMatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  src_port_range_.MergeFrom(from.src_port_range_);
  dst_port_range_.MergeFrom(from.dst_port_range_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortListMatch::CopyFrom(const PortListMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.PortListMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortListMatch::IsInitialized() const {
  return true;
}

void PortListMatch::InternalSwap(PortListMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  src_port_range_.InternalSwap(&other->src_port_range_);
  dst_port_range_.InternalSwap(&other->dst_port_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortListMatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[14]);
}

// ===================================================================

class ICMPMatchList::_Internal {
 public:
};

ICMPMatchList::ICMPMatchList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  icmp_match_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.ICMPMatchList)
}
ICMPMatchList::ICMPMatchList(const ICMPMatchList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      icmp_match_list_(from.icmp_match_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.ICMPMatchList)
}

inline void ICMPMatchList::SharedCtor() {
}

ICMPMatchList::~ICMPMatchList() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.ICMPMatchList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ICMPMatchList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ICMPMatchList::ArenaDtor(void* object) {
  ICMPMatchList* _this = reinterpret_cast< ICMPMatchList* >(object);
  (void)_this;
}
void ICMPMatchList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ICMPMatchList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ICMPMatchList::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.ICMPMatchList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icmp_match_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ICMPMatchList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.opinetcommon.v1alpha1.ICMPMatch icmp_match_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_icmp_match_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ICMPMatchList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.ICMPMatchList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.opinetcommon.v1alpha1.ICMPMatch icmp_match_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_icmp_match_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_icmp_match_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.ICMPMatchList)
  return target;
}

size_t ICMPMatchList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.ICMPMatchList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.opinetcommon.v1alpha1.ICMPMatch icmp_match_list = 1;
  total_size += 1UL * this->_internal_icmp_match_list_size();
  for (const auto& msg : this->icmp_match_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ICMPMatchList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ICMPMatchList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ICMPMatchList::GetClassData() const { return &_class_data_; }

void ICMPMatchList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ICMPMatchList *>(to)->MergeFrom(
      static_cast<const ICMPMatchList &>(from));
}


void ICMPMatchList::MergeFrom(const ICMPMatchList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.ICMPMatchList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  icmp_match_list_.MergeFrom(from.icmp_match_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ICMPMatchList::CopyFrom(const ICMPMatchList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.ICMPMatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ICMPMatchList::IsInitialized() const {
  return true;
}

void ICMPMatchList::InternalSwap(ICMPMatchList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  icmp_match_list_.InternalSwap(&other->icmp_match_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ICMPMatchList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[15]);
}

// ===================================================================

class RuleL4Match::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::PortMatch& ports(const RuleL4Match* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::ICMPMatch& type_code(const RuleL4Match* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::PortListMatch& port_list(const RuleL4Match* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::ICMPMatchList& icmp_match_list(const RuleL4Match* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::PortMatch&
RuleL4Match::_Internal::ports(const RuleL4Match* msg) {
  return *msg->l4info_.ports_;
}
const ::opi_api::network::opinetcommon::v1alpha1::ICMPMatch&
RuleL4Match::_Internal::type_code(const RuleL4Match* msg) {
  return *msg->l4info_.type_code_;
}
const ::opi_api::network::opinetcommon::v1alpha1::PortListMatch&
RuleL4Match::_Internal::port_list(const RuleL4Match* msg) {
  return *msg->l4info_.port_list_;
}
const ::opi_api::network::opinetcommon::v1alpha1::ICMPMatchList&
RuleL4Match::_Internal::icmp_match_list(const RuleL4Match* msg) {
  return *msg->l4info_.icmp_match_list_;
}
void RuleL4Match::set_allocated_ports(::opi_api::network::opinetcommon::v1alpha1::PortMatch* ports) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_l4info();
  if (ports) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::opinetcommon::v1alpha1::PortMatch>::GetOwningArena(ports);
    if (message_arena != submessage_arena) {
      ports = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ports, submessage_arena);
    }
    set_has_ports();
    l4info_.ports_ = ports;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.opinetcommon.v1alpha1.RuleL4Match.ports)
}
void RuleL4Match::set_allocated_type_code(::opi_api::network::opinetcommon::v1alpha1::ICMPMatch* type_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_l4info();
  if (type_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::opinetcommon::v1alpha1::ICMPMatch>::GetOwningArena(type_code);
    if (message_arena != submessage_arena) {
      type_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_code, submessage_arena);
    }
    set_has_type_code();
    l4info_.type_code_ = type_code;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.opinetcommon.v1alpha1.RuleL4Match.type_code)
}
void RuleL4Match::set_allocated_port_list(::opi_api::network::opinetcommon::v1alpha1::PortListMatch* port_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_l4info();
  if (port_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::opinetcommon::v1alpha1::PortListMatch>::GetOwningArena(port_list);
    if (message_arena != submessage_arena) {
      port_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, port_list, submessage_arena);
    }
    set_has_port_list();
    l4info_.port_list_ = port_list;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.opinetcommon.v1alpha1.RuleL4Match.port_list)
}
void RuleL4Match::set_allocated_icmp_match_list(::opi_api::network::opinetcommon::v1alpha1::ICMPMatchList* icmp_match_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_l4info();
  if (icmp_match_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::opinetcommon::v1alpha1::ICMPMatchList>::GetOwningArena(icmp_match_list);
    if (message_arena != submessage_arena) {
      icmp_match_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, icmp_match_list, submessage_arena);
    }
    set_has_icmp_match_list();
    l4info_.icmp_match_list_ = icmp_match_list;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.opinetcommon.v1alpha1.RuleL4Match.icmp_match_list)
}
RuleL4Match::RuleL4Match(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.RuleL4Match)
}
RuleL4Match::RuleL4Match(const RuleL4Match& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_l4info();
  switch (from.l4info_case()) {
    case kPorts: {
      _internal_mutable_ports()->::opi_api::network::opinetcommon::v1alpha1::PortMatch::MergeFrom(from._internal_ports());
      break;
    }
    case kTypeCode: {
      _internal_mutable_type_code()->::opi_api::network::opinetcommon::v1alpha1::ICMPMatch::MergeFrom(from._internal_type_code());
      break;
    }
    case kPortList: {
      _internal_mutable_port_list()->::opi_api::network::opinetcommon::v1alpha1::PortListMatch::MergeFrom(from._internal_port_list());
      break;
    }
    case kIcmpMatchList: {
      _internal_mutable_icmp_match_list()->::opi_api::network::opinetcommon::v1alpha1::ICMPMatchList::MergeFrom(from._internal_icmp_match_list());
      break;
    }
    case L4INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.RuleL4Match)
}

inline void RuleL4Match::SharedCtor() {
clear_has_l4info();
}

RuleL4Match::~RuleL4Match() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.RuleL4Match)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RuleL4Match::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_l4info()) {
    clear_l4info();
  }
}

void RuleL4Match::ArenaDtor(void* object) {
  RuleL4Match* _this = reinterpret_cast< RuleL4Match* >(object);
  (void)_this;
}
void RuleL4Match::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleL4Match::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuleL4Match::clear_l4info() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.opinetcommon.v1alpha1.RuleL4Match)
  switch (l4info_case()) {
    case kPorts: {
      if (GetArenaForAllocation() == nullptr) {
        delete l4info_.ports_;
      }
      break;
    }
    case kTypeCode: {
      if (GetArenaForAllocation() == nullptr) {
        delete l4info_.type_code_;
      }
      break;
    }
    case kPortList: {
      if (GetArenaForAllocation() == nullptr) {
        delete l4info_.port_list_;
      }
      break;
    }
    case kIcmpMatchList: {
      if (GetArenaForAllocation() == nullptr) {
        delete l4info_.icmp_match_list_;
      }
      break;
    }
    case L4INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = L4INFO_NOT_SET;
}


void RuleL4Match::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.RuleL4Match)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_l4info();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleL4Match::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.PortMatch ports = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ports(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.ICMPMatch type_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_code(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.PortListMatch port_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_port_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.ICMPMatchList icmp_match_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_icmp_match_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RuleL4Match::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.RuleL4Match)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.PortMatch ports = 1;
  if (_internal_has_ports()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ports(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.ICMPMatch type_code = 2;
  if (_internal_has_type_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type_code(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.PortListMatch port_list = 3;
  if (_internal_has_port_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::port_list(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.ICMPMatchList icmp_match_list = 4;
  if (_internal_has_icmp_match_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::icmp_match_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.RuleL4Match)
  return target;
}

size_t RuleL4Match::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.RuleL4Match)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (l4info_case()) {
    // .opi_api.network.opinetcommon.v1alpha1.PortMatch ports = 1;
    case kPorts: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *l4info_.ports_);
      break;
    }
    // .opi_api.network.opinetcommon.v1alpha1.ICMPMatch type_code = 2;
    case kTypeCode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *l4info_.type_code_);
      break;
    }
    // .opi_api.network.opinetcommon.v1alpha1.PortListMatch port_list = 3;
    case kPortList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *l4info_.port_list_);
      break;
    }
    // .opi_api.network.opinetcommon.v1alpha1.ICMPMatchList icmp_match_list = 4;
    case kIcmpMatchList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *l4info_.icmp_match_list_);
      break;
    }
    case L4INFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuleL4Match::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuleL4Match::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuleL4Match::GetClassData() const { return &_class_data_; }

void RuleL4Match::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RuleL4Match *>(to)->MergeFrom(
      static_cast<const RuleL4Match &>(from));
}


void RuleL4Match::MergeFrom(const RuleL4Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.RuleL4Match)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.l4info_case()) {
    case kPorts: {
      _internal_mutable_ports()->::opi_api::network::opinetcommon::v1alpha1::PortMatch::MergeFrom(from._internal_ports());
      break;
    }
    case kTypeCode: {
      _internal_mutable_type_code()->::opi_api::network::opinetcommon::v1alpha1::ICMPMatch::MergeFrom(from._internal_type_code());
      break;
    }
    case kPortList: {
      _internal_mutable_port_list()->::opi_api::network::opinetcommon::v1alpha1::PortListMatch::MergeFrom(from._internal_port_list());
      break;
    }
    case kIcmpMatchList: {
      _internal_mutable_icmp_match_list()->::opi_api::network::opinetcommon::v1alpha1::ICMPMatchList::MergeFrom(from._internal_icmp_match_list());
      break;
    }
    case L4INFO_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuleL4Match::CopyFrom(const RuleL4Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.RuleL4Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleL4Match::IsInitialized() const {
  return true;
}

void RuleL4Match::InternalSwap(RuleL4Match* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(l4info_, other->l4info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleL4Match::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[16]);
}

// ===================================================================

class RuleMatch::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::RuleL3Match& l3_match(const RuleMatch* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::RuleL4Match& l4_match(const RuleMatch* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::RuleL3Match&
RuleMatch::_Internal::l3_match(const RuleMatch* msg) {
  return *msg->l3_match_;
}
const ::opi_api::network::opinetcommon::v1alpha1::RuleL4Match&
RuleMatch::_Internal::l4_match(const RuleMatch* msg) {
  return *msg->l4_match_;
}
RuleMatch::RuleMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.RuleMatch)
}
RuleMatch::RuleMatch(const RuleMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_l3_match()) {
    l3_match_ = new ::opi_api::network::opinetcommon::v1alpha1::RuleL3Match(*from.l3_match_);
  } else {
    l3_match_ = nullptr;
  }
  if (from._internal_has_l4_match()) {
    l4_match_ = new ::opi_api::network::opinetcommon::v1alpha1::RuleL4Match(*from.l4_match_);
  } else {
    l4_match_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.RuleMatch)
}

inline void RuleMatch::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&l3_match_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&l4_match_) -
    reinterpret_cast<char*>(&l3_match_)) + sizeof(l4_match_));
}

RuleMatch::~RuleMatch() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.RuleMatch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RuleMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete l3_match_;
  if (this != internal_default_instance()) delete l4_match_;
}

void RuleMatch::ArenaDtor(void* object) {
  RuleMatch* _this = reinterpret_cast< RuleMatch* >(object);
  (void)_this;
}
void RuleMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuleMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuleMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.RuleMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && l3_match_ != nullptr) {
    delete l3_match_;
  }
  l3_match_ = nullptr;
  if (GetArenaForAllocation() == nullptr && l4_match_ != nullptr) {
    delete l4_match_;
  }
  l4_match_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuleMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.RuleL3Match l3_match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_l3_match(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.RuleL4Match l4_match = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_l4_match(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RuleMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.RuleMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.RuleL3Match l3_match = 1;
  if (this->_internal_has_l3_match()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::l3_match(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.RuleL4Match l4_match = 2;
  if (this->_internal_has_l4_match()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::l4_match(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.RuleMatch)
  return target;
}

size_t RuleMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.RuleMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.RuleL3Match l3_match = 1;
  if (this->_internal_has_l3_match()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *l3_match_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.RuleL4Match l4_match = 2;
  if (this->_internal_has_l4_match()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *l4_match_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuleMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuleMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuleMatch::GetClassData() const { return &_class_data_; }

void RuleMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RuleMatch *>(to)->MergeFrom(
      static_cast<const RuleMatch &>(from));
}


void RuleMatch::MergeFrom(const RuleMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.RuleMatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_l3_match()) {
    _internal_mutable_l3_match()->::opi_api::network::opinetcommon::v1alpha1::RuleL3Match::MergeFrom(from._internal_l3_match());
  }
  if (from._internal_has_l4_match()) {
    _internal_mutable_l4_match()->::opi_api::network::opinetcommon::v1alpha1::RuleL4Match::MergeFrom(from._internal_l4_match());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuleMatch::CopyFrom(const RuleMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.RuleMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleMatch::IsInitialized() const {
  return true;
}

void RuleMatch::InternalSwap(RuleMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuleMatch, l4_match_)
      + sizeof(RuleMatch::l4_match_)
      - PROTOBUF_FIELD_OFFSET(RuleMatch, l3_match_)>(
          reinterpret_cast<char*>(&l3_match_),
          reinterpret_cast<char*>(&other->l3_match_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleMatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[17]);
}

// ===================================================================

class HwHandle::_Internal {
 public:
};

HwHandle::HwHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.opinetcommon.v1alpha1.HwHandle)
}
HwHandle::HwHandle(const HwHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  idx_ = from.idx_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.opinetcommon.v1alpha1.HwHandle)
}

inline void HwHandle::SharedCtor() {
idx_ = uint64_t{0u};
}

HwHandle::~HwHandle() {
  // @@protoc_insertion_point(destructor:opi_api.network.opinetcommon.v1alpha1.HwHandle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HwHandle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HwHandle::ArenaDtor(void* object) {
  HwHandle* _this = reinterpret_cast< HwHandle* >(object);
  (void)_this;
}
void HwHandle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HwHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HwHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.opinetcommon.v1alpha1.HwHandle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  idx_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HwHandle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HwHandle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.opinetcommon.v1alpha1.HwHandle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 idx = 1;
  if (this->_internal_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.opinetcommon.v1alpha1.HwHandle)
  return target;
}

size_t HwHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.opinetcommon.v1alpha1.HwHandle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 idx = 1;
  if (this->_internal_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HwHandle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HwHandle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HwHandle::GetClassData() const { return &_class_data_; }

void HwHandle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HwHandle *>(to)->MergeFrom(
      static_cast<const HwHandle &>(from));
}


void HwHandle::MergeFrom(const HwHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.opinetcommon.v1alpha1.HwHandle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HwHandle::CopyFrom(const HwHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.opinetcommon.v1alpha1.HwHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HwHandle::IsInitialized() const {
  return true;
}

void HwHandle::InternalSwap(HwHandle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(idx_, other->idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HwHandle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_networktypes_2eproto_getter, &descriptor_table_networktypes_2eproto_once,
      file_level_metadata_networktypes_2eproto[18]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace opinetcommon
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::IPAddress* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::IPAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::IPAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::IPPrefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::IPPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::EncapVal* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::EncapVal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::EncapVal >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::Encap* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::Encap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::Encap >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::PortRange* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::PortRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::PortRange >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::IPRange* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::IPRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::IPRange >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::AddressRange* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::AddressRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::AddressRange >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::IPEntry* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::IPEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::IPEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::IPList* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::IPList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::IPList >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::RuleL3Match* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::RuleL3Match >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::RuleL3Match >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::PortMatch* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::PortMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::PortMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::ICMPMatch* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::ICMPMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::ICMPMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::PortListMatch* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::PortListMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::PortListMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::ICMPMatchList* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::ICMPMatchList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::ICMPMatchList >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::RuleL4Match* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::RuleL4Match >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::RuleL4Match >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::RuleMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::RuleMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::opinetcommon::v1alpha1::HwHandle* Arena::CreateMaybeMessage< ::opi_api::network::opinetcommon::v1alpha1::HwHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::opinetcommon::v1alpha1::HwHandle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
