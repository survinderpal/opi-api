// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openconfig_interfaces.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_openconfig_5finterfaces_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_openconfig_5finterfaces_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_openconfig_5finterfaces_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_openconfig_5finterfaces_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openconfig_5finterfaces_2eproto;
namespace opi_api {
namespace network {
namespace v1 {
class Interface;
struct InterfaceDefaultTypeInternal;
extern InterfaceDefaultTypeInternal _Interface_default_instance_;
class Interface_Config;
struct Interface_ConfigDefaultTypeInternal;
extern Interface_ConfigDefaultTypeInternal _Interface_Config_default_instance_;
class Interface_HoldTime;
struct Interface_HoldTimeDefaultTypeInternal;
extern Interface_HoldTimeDefaultTypeInternal _Interface_HoldTime_default_instance_;
class Interface_HoldTime_Config;
struct Interface_HoldTime_ConfigDefaultTypeInternal;
extern Interface_HoldTime_ConfigDefaultTypeInternal _Interface_HoldTime_Config_default_instance_;
class Interface_HoldTime_State;
struct Interface_HoldTime_StateDefaultTypeInternal;
extern Interface_HoldTime_StateDefaultTypeInternal _Interface_HoldTime_State_default_instance_;
class Interface_State;
struct Interface_StateDefaultTypeInternal;
extern Interface_StateDefaultTypeInternal _Interface_State_default_instance_;
class Interface_State_Counters;
struct Interface_State_CountersDefaultTypeInternal;
extern Interface_State_CountersDefaultTypeInternal _Interface_State_Counters_default_instance_;
class Interface_Subinterfaces;
struct Interface_SubinterfacesDefaultTypeInternal;
extern Interface_SubinterfacesDefaultTypeInternal _Interface_Subinterfaces_default_instance_;
class Interface_Subinterfaces_Subinterface;
struct Interface_Subinterfaces_SubinterfaceDefaultTypeInternal;
extern Interface_Subinterfaces_SubinterfaceDefaultTypeInternal _Interface_Subinterfaces_Subinterface_default_instance_;
class Interface_Subinterfaces_Subinterface_Config;
struct Interface_Subinterfaces_Subinterface_ConfigDefaultTypeInternal;
extern Interface_Subinterfaces_Subinterface_ConfigDefaultTypeInternal _Interface_Subinterfaces_Subinterface_Config_default_instance_;
class Interface_Subinterfaces_Subinterface_State;
struct Interface_Subinterfaces_Subinterface_StateDefaultTypeInternal;
extern Interface_Subinterfaces_Subinterface_StateDefaultTypeInternal _Interface_Subinterfaces_Subinterface_State_default_instance_;
class Interface_Subinterfaces_Subinterface_State_Counters;
struct Interface_Subinterfaces_Subinterface_State_CountersDefaultTypeInternal;
extern Interface_Subinterfaces_Subinterface_State_CountersDefaultTypeInternal _Interface_Subinterfaces_Subinterface_State_Counters_default_instance_;
class Interfaces;
struct InterfacesDefaultTypeInternal;
extern InterfacesDefaultTypeInternal _Interfaces_default_instance_;
class NetInterfaceGetRequest;
struct NetInterfaceGetRequestDefaultTypeInternal;
extern NetInterfaceGetRequestDefaultTypeInternal _NetInterfaceGetRequest_default_instance_;
class NetInterfaceGetResponse;
struct NetInterfaceGetResponseDefaultTypeInternal;
extern NetInterfaceGetResponseDefaultTypeInternal _NetInterfaceGetResponse_default_instance_;
class NetInterfaceListRequest;
struct NetInterfaceListRequestDefaultTypeInternal;
extern NetInterfaceListRequestDefaultTypeInternal _NetInterfaceListRequest_default_instance_;
class NetInterfaceListResponse;
struct NetInterfaceListResponseDefaultTypeInternal;
extern NetInterfaceListResponseDefaultTypeInternal _NetInterfaceListResponse_default_instance_;
class NetInterfaceUpdateRequest;
struct NetInterfaceUpdateRequestDefaultTypeInternal;
extern NetInterfaceUpdateRequestDefaultTypeInternal _NetInterfaceUpdateRequest_default_instance_;
class NetInterfaceUpdateResponse;
struct NetInterfaceUpdateResponseDefaultTypeInternal;
extern NetInterfaceUpdateResponseDefaultTypeInternal _NetInterfaceUpdateResponse_default_instance_;
}  // namespace v1
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::v1::Interface* Arena::CreateMaybeMessage<::opi_api::network::v1::Interface>(Arena*);
template<> ::opi_api::network::v1::Interface_Config* Arena::CreateMaybeMessage<::opi_api::network::v1::Interface_Config>(Arena*);
template<> ::opi_api::network::v1::Interface_HoldTime* Arena::CreateMaybeMessage<::opi_api::network::v1::Interface_HoldTime>(Arena*);
template<> ::opi_api::network::v1::Interface_HoldTime_Config* Arena::CreateMaybeMessage<::opi_api::network::v1::Interface_HoldTime_Config>(Arena*);
template<> ::opi_api::network::v1::Interface_HoldTime_State* Arena::CreateMaybeMessage<::opi_api::network::v1::Interface_HoldTime_State>(Arena*);
template<> ::opi_api::network::v1::Interface_State* Arena::CreateMaybeMessage<::opi_api::network::v1::Interface_State>(Arena*);
template<> ::opi_api::network::v1::Interface_State_Counters* Arena::CreateMaybeMessage<::opi_api::network::v1::Interface_State_Counters>(Arena*);
template<> ::opi_api::network::v1::Interface_Subinterfaces* Arena::CreateMaybeMessage<::opi_api::network::v1::Interface_Subinterfaces>(Arena*);
template<> ::opi_api::network::v1::Interface_Subinterfaces_Subinterface* Arena::CreateMaybeMessage<::opi_api::network::v1::Interface_Subinterfaces_Subinterface>(Arena*);
template<> ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* Arena::CreateMaybeMessage<::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config>(Arena*);
template<> ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* Arena::CreateMaybeMessage<::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State>(Arena*);
template<> ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* Arena::CreateMaybeMessage<::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters>(Arena*);
template<> ::opi_api::network::v1::Interfaces* Arena::CreateMaybeMessage<::opi_api::network::v1::Interfaces>(Arena*);
template<> ::opi_api::network::v1::NetInterfaceGetRequest* Arena::CreateMaybeMessage<::opi_api::network::v1::NetInterfaceGetRequest>(Arena*);
template<> ::opi_api::network::v1::NetInterfaceGetResponse* Arena::CreateMaybeMessage<::opi_api::network::v1::NetInterfaceGetResponse>(Arena*);
template<> ::opi_api::network::v1::NetInterfaceListRequest* Arena::CreateMaybeMessage<::opi_api::network::v1::NetInterfaceListRequest>(Arena*);
template<> ::opi_api::network::v1::NetInterfaceListResponse* Arena::CreateMaybeMessage<::opi_api::network::v1::NetInterfaceListResponse>(Arena*);
template<> ::opi_api::network::v1::NetInterfaceUpdateRequest* Arena::CreateMaybeMessage<::opi_api::network::v1::NetInterfaceUpdateRequest>(Arena*);
template<> ::opi_api::network::v1::NetInterfaceUpdateResponse* Arena::CreateMaybeMessage<::opi_api::network::v1::NetInterfaceUpdateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace v1 {

enum InterfaceType : int {
  ETHERNET = 0,
  LOOPBACK = 1,
  InterfaceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InterfaceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InterfaceType_IsValid(int value);
constexpr InterfaceType InterfaceType_MIN = ETHERNET;
constexpr InterfaceType InterfaceType_MAX = LOOPBACK;
constexpr int InterfaceType_ARRAYSIZE = InterfaceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InterfaceType_descriptor();
template<typename T>
inline const std::string& InterfaceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InterfaceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InterfaceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InterfaceType_descriptor(), enum_t_value);
}
inline bool InterfaceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InterfaceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InterfaceType>(
    InterfaceType_descriptor(), name, value);
}
enum InterfaceState : int {
  DOWN = 0,
  UP = 1,
  InterfaceState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InterfaceState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InterfaceState_IsValid(int value);
constexpr InterfaceState InterfaceState_MIN = DOWN;
constexpr InterfaceState InterfaceState_MAX = UP;
constexpr int InterfaceState_ARRAYSIZE = InterfaceState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InterfaceState_descriptor();
template<typename T>
inline const std::string& InterfaceState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InterfaceState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InterfaceState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InterfaceState_descriptor(), enum_t_value);
}
inline bool InterfaceState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InterfaceState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InterfaceState>(
    InterfaceState_descriptor(), name, value);
}
// ===================================================================

class Interface_Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.Interface.Config) */ {
 public:
  inline Interface_Config() : Interface_Config(nullptr) {}
  ~Interface_Config() override;
  explicit constexpr Interface_Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interface_Config(const Interface_Config& from);
  Interface_Config(Interface_Config&& from) noexcept
    : Interface_Config() {
    *this = ::std::move(from);
  }

  inline Interface_Config& operator=(const Interface_Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface_Config& operator=(Interface_Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interface_Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interface_Config* internal_default_instance() {
    return reinterpret_cast<const Interface_Config*>(
               &_Interface_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Interface_Config& a, Interface_Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface_Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interface_Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interface_Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interface_Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interface_Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Interface_Config& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface_Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.Interface.Config";
  }
  protected:
  explicit Interface_Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 5,
    kTypeFieldNumber = 2,
    kMtuFieldNumber = 3,
    kLoopbackModeFieldNumber = 4,
    kEnabledFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 5;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .opi_api.network.v1.InterfaceType type = 2;
  void clear_type();
  ::opi_api::network::v1::InterfaceType type() const;
  void set_type(::opi_api::network::v1::InterfaceType value);
  private:
  ::opi_api::network::v1::InterfaceType _internal_type() const;
  void _internal_set_type(::opi_api::network::v1::InterfaceType value);
  public:

  // uint32 mtu = 3;
  void clear_mtu();
  uint32_t mtu() const;
  void set_mtu(uint32_t value);
  private:
  uint32_t _internal_mtu() const;
  void _internal_set_mtu(uint32_t value);
  public:

  // bool loopback_mode = 4;
  void clear_loopback_mode();
  bool loopback_mode() const;
  void set_loopback_mode(bool value);
  private:
  bool _internal_loopback_mode() const;
  void _internal_set_loopback_mode(bool value);
  public:

  // bool enabled = 6;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.Interface.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int type_;
  uint32_t mtu_;
  bool loopback_mode_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class Interface_State_Counters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.Interface.State.Counters) */ {
 public:
  inline Interface_State_Counters() : Interface_State_Counters(nullptr) {}
  ~Interface_State_Counters() override;
  explicit constexpr Interface_State_Counters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interface_State_Counters(const Interface_State_Counters& from);
  Interface_State_Counters(Interface_State_Counters&& from) noexcept
    : Interface_State_Counters() {
    *this = ::std::move(from);
  }

  inline Interface_State_Counters& operator=(const Interface_State_Counters& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface_State_Counters& operator=(Interface_State_Counters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interface_State_Counters& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interface_State_Counters* internal_default_instance() {
    return reinterpret_cast<const Interface_State_Counters*>(
               &_Interface_State_Counters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Interface_State_Counters& a, Interface_State_Counters& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface_State_Counters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interface_State_Counters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interface_State_Counters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interface_State_Counters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interface_State_Counters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Interface_State_Counters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface_State_Counters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.Interface.State.Counters";
  }
  protected:
  explicit Interface_State_Counters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInOctetsFieldNumber = 1,
    kInPacketsFieldNumber = 2,
    kInUnicastPktsFieldNumber = 3,
    kInBroadcastPktsFieldNumber = 4,
    kInMulticastPktsFieldNumber = 5,
    kInDiscardsFieldNumber = 6,
    kInErrorsFieldNumber = 7,
    kInUnknownProtosFieldNumber = 8,
    kInFcsErrorsFieldNumber = 9,
    kOutOctetsFieldNumber = 10,
    kOutPacketsFieldNumber = 11,
    kOutUnicastPktsFieldNumber = 12,
    kOutBroadcastPktsFieldNumber = 13,
    kOutMulticastPktsFieldNumber = 14,
    kOutDiscardsFieldNumber = 15,
    kOutErrorsFieldNumber = 16,
    kCarrierTransitionsFieldNumber = 17,
    kLastClearFieldNumber = 18,
  };
  // uint64 in_octets = 1;
  void clear_in_octets();
  uint64_t in_octets() const;
  void set_in_octets(uint64_t value);
  private:
  uint64_t _internal_in_octets() const;
  void _internal_set_in_octets(uint64_t value);
  public:

  // uint64 in_packets = 2;
  void clear_in_packets();
  uint64_t in_packets() const;
  void set_in_packets(uint64_t value);
  private:
  uint64_t _internal_in_packets() const;
  void _internal_set_in_packets(uint64_t value);
  public:

  // uint64 in_unicast_pkts = 3;
  void clear_in_unicast_pkts();
  uint64_t in_unicast_pkts() const;
  void set_in_unicast_pkts(uint64_t value);
  private:
  uint64_t _internal_in_unicast_pkts() const;
  void _internal_set_in_unicast_pkts(uint64_t value);
  public:

  // uint64 in_broadcast_pkts = 4;
  void clear_in_broadcast_pkts();
  uint64_t in_broadcast_pkts() const;
  void set_in_broadcast_pkts(uint64_t value);
  private:
  uint64_t _internal_in_broadcast_pkts() const;
  void _internal_set_in_broadcast_pkts(uint64_t value);
  public:

  // uint64 in_multicast_pkts = 5;
  void clear_in_multicast_pkts();
  uint64_t in_multicast_pkts() const;
  void set_in_multicast_pkts(uint64_t value);
  private:
  uint64_t _internal_in_multicast_pkts() const;
  void _internal_set_in_multicast_pkts(uint64_t value);
  public:

  // uint64 in_discards = 6;
  void clear_in_discards();
  uint64_t in_discards() const;
  void set_in_discards(uint64_t value);
  private:
  uint64_t _internal_in_discards() const;
  void _internal_set_in_discards(uint64_t value);
  public:

  // uint64 in_errors = 7;
  void clear_in_errors();
  uint64_t in_errors() const;
  void set_in_errors(uint64_t value);
  private:
  uint64_t _internal_in_errors() const;
  void _internal_set_in_errors(uint64_t value);
  public:

  // uint64 in_unknown_protos = 8;
  void clear_in_unknown_protos();
  uint64_t in_unknown_protos() const;
  void set_in_unknown_protos(uint64_t value);
  private:
  uint64_t _internal_in_unknown_protos() const;
  void _internal_set_in_unknown_protos(uint64_t value);
  public:

  // uint64 in_fcs_errors = 9;
  void clear_in_fcs_errors();
  uint64_t in_fcs_errors() const;
  void set_in_fcs_errors(uint64_t value);
  private:
  uint64_t _internal_in_fcs_errors() const;
  void _internal_set_in_fcs_errors(uint64_t value);
  public:

  // uint64 out_octets = 10;
  void clear_out_octets();
  uint64_t out_octets() const;
  void set_out_octets(uint64_t value);
  private:
  uint64_t _internal_out_octets() const;
  void _internal_set_out_octets(uint64_t value);
  public:

  // uint64 out_packets = 11;
  void clear_out_packets();
  uint64_t out_packets() const;
  void set_out_packets(uint64_t value);
  private:
  uint64_t _internal_out_packets() const;
  void _internal_set_out_packets(uint64_t value);
  public:

  // uint64 out_unicast_pkts = 12;
  void clear_out_unicast_pkts();
  uint64_t out_unicast_pkts() const;
  void set_out_unicast_pkts(uint64_t value);
  private:
  uint64_t _internal_out_unicast_pkts() const;
  void _internal_set_out_unicast_pkts(uint64_t value);
  public:

  // uint64 out_broadcast_pkts = 13;
  void clear_out_broadcast_pkts();
  uint64_t out_broadcast_pkts() const;
  void set_out_broadcast_pkts(uint64_t value);
  private:
  uint64_t _internal_out_broadcast_pkts() const;
  void _internal_set_out_broadcast_pkts(uint64_t value);
  public:

  // uint64 out_multicast_pkts = 14;
  void clear_out_multicast_pkts();
  uint64_t out_multicast_pkts() const;
  void set_out_multicast_pkts(uint64_t value);
  private:
  uint64_t _internal_out_multicast_pkts() const;
  void _internal_set_out_multicast_pkts(uint64_t value);
  public:

  // uint64 out_discards = 15;
  void clear_out_discards();
  uint64_t out_discards() const;
  void set_out_discards(uint64_t value);
  private:
  uint64_t _internal_out_discards() const;
  void _internal_set_out_discards(uint64_t value);
  public:

  // uint64 out_errors = 16;
  void clear_out_errors();
  uint64_t out_errors() const;
  void set_out_errors(uint64_t value);
  private:
  uint64_t _internal_out_errors() const;
  void _internal_set_out_errors(uint64_t value);
  public:

  // uint64 carrier_transitions = 17;
  void clear_carrier_transitions();
  uint64_t carrier_transitions() const;
  void set_carrier_transitions(uint64_t value);
  private:
  uint64_t _internal_carrier_transitions() const;
  void _internal_set_carrier_transitions(uint64_t value);
  public:

  // uint64 last_clear = 18;
  void clear_last_clear();
  uint64_t last_clear() const;
  void set_last_clear(uint64_t value);
  private:
  uint64_t _internal_last_clear() const;
  void _internal_set_last_clear(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.Interface.State.Counters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t in_octets_;
  uint64_t in_packets_;
  uint64_t in_unicast_pkts_;
  uint64_t in_broadcast_pkts_;
  uint64_t in_multicast_pkts_;
  uint64_t in_discards_;
  uint64_t in_errors_;
  uint64_t in_unknown_protos_;
  uint64_t in_fcs_errors_;
  uint64_t out_octets_;
  uint64_t out_packets_;
  uint64_t out_unicast_pkts_;
  uint64_t out_broadcast_pkts_;
  uint64_t out_multicast_pkts_;
  uint64_t out_discards_;
  uint64_t out_errors_;
  uint64_t carrier_transitions_;
  uint64_t last_clear_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class Interface_State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.Interface.State) */ {
 public:
  inline Interface_State() : Interface_State(nullptr) {}
  ~Interface_State() override;
  explicit constexpr Interface_State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interface_State(const Interface_State& from);
  Interface_State(Interface_State&& from) noexcept
    : Interface_State() {
    *this = ::std::move(from);
  }

  inline Interface_State& operator=(const Interface_State& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface_State& operator=(Interface_State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interface_State& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interface_State* internal_default_instance() {
    return reinterpret_cast<const Interface_State*>(
               &_Interface_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Interface_State& a, Interface_State& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface_State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interface_State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interface_State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interface_State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interface_State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Interface_State& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface_State* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.Interface.State";
  }
  protected:
  explicit Interface_State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Interface_State_Counters Counters;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 5,
    kCountersFieldNumber = 14,
    kTypeFieldNumber = 2,
    kMtuFieldNumber = 3,
    kIfindexFieldNumber = 7,
    kAdminStatusFieldNumber = 8,
    kLoopbackModeFieldNumber = 4,
    kEnabledFieldNumber = 6,
    kLogicalFieldNumber = 11,
    kManagementFieldNumber = 12,
    kOperStatusFieldNumber = 9,
    kLastChangeFieldNumber = 10,
    kCpuFieldNumber = 13,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 5;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .opi_api.network.v1.Interface.State.Counters counters = 14;
  bool has_counters() const;
  private:
  bool _internal_has_counters() const;
  public:
  void clear_counters();
  const ::opi_api::network::v1::Interface_State_Counters& counters() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1::Interface_State_Counters* release_counters();
  ::opi_api::network::v1::Interface_State_Counters* mutable_counters();
  void set_allocated_counters(::opi_api::network::v1::Interface_State_Counters* counters);
  private:
  const ::opi_api::network::v1::Interface_State_Counters& _internal_counters() const;
  ::opi_api::network::v1::Interface_State_Counters* _internal_mutable_counters();
  public:
  void unsafe_arena_set_allocated_counters(
      ::opi_api::network::v1::Interface_State_Counters* counters);
  ::opi_api::network::v1::Interface_State_Counters* unsafe_arena_release_counters();

  // .opi_api.network.v1.InterfaceType type = 2;
  void clear_type();
  ::opi_api::network::v1::InterfaceType type() const;
  void set_type(::opi_api::network::v1::InterfaceType value);
  private:
  ::opi_api::network::v1::InterfaceType _internal_type() const;
  void _internal_set_type(::opi_api::network::v1::InterfaceType value);
  public:

  // uint32 mtu = 3;
  void clear_mtu();
  uint32_t mtu() const;
  void set_mtu(uint32_t value);
  private:
  uint32_t _internal_mtu() const;
  void _internal_set_mtu(uint32_t value);
  public:

  // uint32 ifindex = 7;
  void clear_ifindex();
  uint32_t ifindex() const;
  void set_ifindex(uint32_t value);
  private:
  uint32_t _internal_ifindex() const;
  void _internal_set_ifindex(uint32_t value);
  public:

  // .opi_api.network.v1.InterfaceState admin_status = 8;
  void clear_admin_status();
  ::opi_api::network::v1::InterfaceState admin_status() const;
  void set_admin_status(::opi_api::network::v1::InterfaceState value);
  private:
  ::opi_api::network::v1::InterfaceState _internal_admin_status() const;
  void _internal_set_admin_status(::opi_api::network::v1::InterfaceState value);
  public:

  // bool loopback_mode = 4;
  void clear_loopback_mode();
  bool loopback_mode() const;
  void set_loopback_mode(bool value);
  private:
  bool _internal_loopback_mode() const;
  void _internal_set_loopback_mode(bool value);
  public:

  // bool enabled = 6;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // bool logical = 11;
  void clear_logical();
  bool logical() const;
  void set_logical(bool value);
  private:
  bool _internal_logical() const;
  void _internal_set_logical(bool value);
  public:

  // bool management = 12;
  void clear_management();
  bool management() const;
  void set_management(bool value);
  private:
  bool _internal_management() const;
  void _internal_set_management(bool value);
  public:

  // .opi_api.network.v1.InterfaceState oper_status = 9;
  void clear_oper_status();
  ::opi_api::network::v1::InterfaceState oper_status() const;
  void set_oper_status(::opi_api::network::v1::InterfaceState value);
  private:
  ::opi_api::network::v1::InterfaceState _internal_oper_status() const;
  void _internal_set_oper_status(::opi_api::network::v1::InterfaceState value);
  public:

  // uint64 last_change = 10;
  void clear_last_change();
  uint64_t last_change() const;
  void set_last_change(uint64_t value);
  private:
  uint64_t _internal_last_change() const;
  void _internal_set_last_change(uint64_t value);
  public:

  // bool cpu = 13;
  void clear_cpu();
  bool cpu() const;
  void set_cpu(bool value);
  private:
  bool _internal_cpu() const;
  void _internal_set_cpu(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.Interface.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::opi_api::network::v1::Interface_State_Counters* counters_;
  int type_;
  uint32_t mtu_;
  uint32_t ifindex_;
  int admin_status_;
  bool loopback_mode_;
  bool enabled_;
  bool logical_;
  bool management_;
  int oper_status_;
  uint64_t last_change_;
  bool cpu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class Interface_HoldTime_Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.Interface.HoldTime.Config) */ {
 public:
  inline Interface_HoldTime_Config() : Interface_HoldTime_Config(nullptr) {}
  ~Interface_HoldTime_Config() override;
  explicit constexpr Interface_HoldTime_Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interface_HoldTime_Config(const Interface_HoldTime_Config& from);
  Interface_HoldTime_Config(Interface_HoldTime_Config&& from) noexcept
    : Interface_HoldTime_Config() {
    *this = ::std::move(from);
  }

  inline Interface_HoldTime_Config& operator=(const Interface_HoldTime_Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface_HoldTime_Config& operator=(Interface_HoldTime_Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interface_HoldTime_Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interface_HoldTime_Config* internal_default_instance() {
    return reinterpret_cast<const Interface_HoldTime_Config*>(
               &_Interface_HoldTime_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Interface_HoldTime_Config& a, Interface_HoldTime_Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface_HoldTime_Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interface_HoldTime_Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interface_HoldTime_Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interface_HoldTime_Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interface_HoldTime_Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Interface_HoldTime_Config& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface_HoldTime_Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.Interface.HoldTime.Config";
  }
  protected:
  explicit Interface_HoldTime_Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpFieldNumber = 1,
    kDownFieldNumber = 2,
  };
  // uint32 up = 1;
  void clear_up();
  uint32_t up() const;
  void set_up(uint32_t value);
  private:
  uint32_t _internal_up() const;
  void _internal_set_up(uint32_t value);
  public:

  // uint32 down = 2;
  void clear_down();
  uint32_t down() const;
  void set_down(uint32_t value);
  private:
  uint32_t _internal_down() const;
  void _internal_set_down(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.Interface.HoldTime.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t up_;
  uint32_t down_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class Interface_HoldTime_State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.Interface.HoldTime.State) */ {
 public:
  inline Interface_HoldTime_State() : Interface_HoldTime_State(nullptr) {}
  ~Interface_HoldTime_State() override;
  explicit constexpr Interface_HoldTime_State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interface_HoldTime_State(const Interface_HoldTime_State& from);
  Interface_HoldTime_State(Interface_HoldTime_State&& from) noexcept
    : Interface_HoldTime_State() {
    *this = ::std::move(from);
  }

  inline Interface_HoldTime_State& operator=(const Interface_HoldTime_State& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface_HoldTime_State& operator=(Interface_HoldTime_State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interface_HoldTime_State& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interface_HoldTime_State* internal_default_instance() {
    return reinterpret_cast<const Interface_HoldTime_State*>(
               &_Interface_HoldTime_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Interface_HoldTime_State& a, Interface_HoldTime_State& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface_HoldTime_State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interface_HoldTime_State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interface_HoldTime_State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interface_HoldTime_State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interface_HoldTime_State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Interface_HoldTime_State& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface_HoldTime_State* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.Interface.HoldTime.State";
  }
  protected:
  explicit Interface_HoldTime_State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpFieldNumber = 1,
    kDownFieldNumber = 2,
  };
  // uint32 up = 1;
  void clear_up();
  uint32_t up() const;
  void set_up(uint32_t value);
  private:
  uint32_t _internal_up() const;
  void _internal_set_up(uint32_t value);
  public:

  // uint32 down = 2;
  void clear_down();
  uint32_t down() const;
  void set_down(uint32_t value);
  private:
  uint32_t _internal_down() const;
  void _internal_set_down(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.Interface.HoldTime.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t up_;
  uint32_t down_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class Interface_HoldTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.Interface.HoldTime) */ {
 public:
  inline Interface_HoldTime() : Interface_HoldTime(nullptr) {}
  ~Interface_HoldTime() override;
  explicit constexpr Interface_HoldTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interface_HoldTime(const Interface_HoldTime& from);
  Interface_HoldTime(Interface_HoldTime&& from) noexcept
    : Interface_HoldTime() {
    *this = ::std::move(from);
  }

  inline Interface_HoldTime& operator=(const Interface_HoldTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface_HoldTime& operator=(Interface_HoldTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interface_HoldTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interface_HoldTime* internal_default_instance() {
    return reinterpret_cast<const Interface_HoldTime*>(
               &_Interface_HoldTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Interface_HoldTime& a, Interface_HoldTime& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface_HoldTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interface_HoldTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interface_HoldTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interface_HoldTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interface_HoldTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Interface_HoldTime& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface_HoldTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.Interface.HoldTime";
  }
  protected:
  explicit Interface_HoldTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Interface_HoldTime_Config Config;
  typedef Interface_HoldTime_State State;

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .opi_api.network.v1.Interface.HoldTime.Config config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::opi_api::network::v1::Interface_HoldTime_Config& config() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1::Interface_HoldTime_Config* release_config();
  ::opi_api::network::v1::Interface_HoldTime_Config* mutable_config();
  void set_allocated_config(::opi_api::network::v1::Interface_HoldTime_Config* config);
  private:
  const ::opi_api::network::v1::Interface_HoldTime_Config& _internal_config() const;
  ::opi_api::network::v1::Interface_HoldTime_Config* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::opi_api::network::v1::Interface_HoldTime_Config* config);
  ::opi_api::network::v1::Interface_HoldTime_Config* unsafe_arena_release_config();

  // .opi_api.network.v1.Interface.HoldTime.State state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::opi_api::network::v1::Interface_HoldTime_State& state() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1::Interface_HoldTime_State* release_state();
  ::opi_api::network::v1::Interface_HoldTime_State* mutable_state();
  void set_allocated_state(::opi_api::network::v1::Interface_HoldTime_State* state);
  private:
  const ::opi_api::network::v1::Interface_HoldTime_State& _internal_state() const;
  ::opi_api::network::v1::Interface_HoldTime_State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::opi_api::network::v1::Interface_HoldTime_State* state);
  ::opi_api::network::v1::Interface_HoldTime_State* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.Interface.HoldTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::v1::Interface_HoldTime_Config* config_;
  ::opi_api::network::v1::Interface_HoldTime_State* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class Interface_Subinterfaces_Subinterface_Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config) */ {
 public:
  inline Interface_Subinterfaces_Subinterface_Config() : Interface_Subinterfaces_Subinterface_Config(nullptr) {}
  ~Interface_Subinterfaces_Subinterface_Config() override;
  explicit constexpr Interface_Subinterfaces_Subinterface_Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interface_Subinterfaces_Subinterface_Config(const Interface_Subinterfaces_Subinterface_Config& from);
  Interface_Subinterfaces_Subinterface_Config(Interface_Subinterfaces_Subinterface_Config&& from) noexcept
    : Interface_Subinterfaces_Subinterface_Config() {
    *this = ::std::move(from);
  }

  inline Interface_Subinterfaces_Subinterface_Config& operator=(const Interface_Subinterfaces_Subinterface_Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface_Subinterfaces_Subinterface_Config& operator=(Interface_Subinterfaces_Subinterface_Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interface_Subinterfaces_Subinterface_Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interface_Subinterfaces_Subinterface_Config* internal_default_instance() {
    return reinterpret_cast<const Interface_Subinterfaces_Subinterface_Config*>(
               &_Interface_Subinterfaces_Subinterface_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Interface_Subinterfaces_Subinterface_Config& a, Interface_Subinterfaces_Subinterface_Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface_Subinterfaces_Subinterface_Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interface_Subinterfaces_Subinterface_Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interface_Subinterfaces_Subinterface_Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interface_Subinterfaces_Subinterface_Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interface_Subinterfaces_Subinterface_Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Interface_Subinterfaces_Subinterface_Config& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface_Subinterfaces_Subinterface_Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config";
  }
  protected:
  explicit Interface_Subinterfaces_Subinterface_Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kIndexFieldNumber = 1,
    kEnabledFieldNumber = 3,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint64 index = 1;
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // bool enabled = 3;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  uint64_t index_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class Interface_Subinterfaces_Subinterface_State_Counters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters) */ {
 public:
  inline Interface_Subinterfaces_Subinterface_State_Counters() : Interface_Subinterfaces_Subinterface_State_Counters(nullptr) {}
  ~Interface_Subinterfaces_Subinterface_State_Counters() override;
  explicit constexpr Interface_Subinterfaces_Subinterface_State_Counters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interface_Subinterfaces_Subinterface_State_Counters(const Interface_Subinterfaces_Subinterface_State_Counters& from);
  Interface_Subinterfaces_Subinterface_State_Counters(Interface_Subinterfaces_Subinterface_State_Counters&& from) noexcept
    : Interface_Subinterfaces_Subinterface_State_Counters() {
    *this = ::std::move(from);
  }

  inline Interface_Subinterfaces_Subinterface_State_Counters& operator=(const Interface_Subinterfaces_Subinterface_State_Counters& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface_Subinterfaces_Subinterface_State_Counters& operator=(Interface_Subinterfaces_Subinterface_State_Counters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interface_Subinterfaces_Subinterface_State_Counters& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interface_Subinterfaces_Subinterface_State_Counters* internal_default_instance() {
    return reinterpret_cast<const Interface_Subinterfaces_Subinterface_State_Counters*>(
               &_Interface_Subinterfaces_Subinterface_State_Counters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Interface_Subinterfaces_Subinterface_State_Counters& a, Interface_Subinterfaces_Subinterface_State_Counters& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface_Subinterfaces_Subinterface_State_Counters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interface_Subinterfaces_Subinterface_State_Counters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interface_Subinterfaces_Subinterface_State_Counters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interface_Subinterfaces_Subinterface_State_Counters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interface_Subinterfaces_Subinterface_State_Counters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Interface_Subinterfaces_Subinterface_State_Counters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface_Subinterfaces_Subinterface_State_Counters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters";
  }
  protected:
  explicit Interface_Subinterfaces_Subinterface_State_Counters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInOctetsFieldNumber = 1,
    kInPacketsFieldNumber = 2,
    kInUnicastPktsFieldNumber = 3,
    kInBroadcastPktsFieldNumber = 4,
    kInMulticastPktsFieldNumber = 5,
    kInDiscardsFieldNumber = 6,
    kInErrorsFieldNumber = 7,
    kInUnknownProtosFieldNumber = 8,
    kInFcsErrorsFieldNumber = 9,
    kOutOctetsFieldNumber = 10,
    kOutPacketsFieldNumber = 11,
    kOutUnicastPktsFieldNumber = 12,
    kOutBroadcastPktsFieldNumber = 13,
    kOutMulticastPktsFieldNumber = 14,
    kOutDiscardsFieldNumber = 15,
    kOutErrorsFieldNumber = 16,
    kCarrierTransitionsFieldNumber = 17,
    kLastClearFieldNumber = 18,
  };
  // uint64 in_octets = 1;
  void clear_in_octets();
  uint64_t in_octets() const;
  void set_in_octets(uint64_t value);
  private:
  uint64_t _internal_in_octets() const;
  void _internal_set_in_octets(uint64_t value);
  public:

  // uint64 in_packets = 2;
  void clear_in_packets();
  uint64_t in_packets() const;
  void set_in_packets(uint64_t value);
  private:
  uint64_t _internal_in_packets() const;
  void _internal_set_in_packets(uint64_t value);
  public:

  // uint64 in_unicast_pkts = 3;
  void clear_in_unicast_pkts();
  uint64_t in_unicast_pkts() const;
  void set_in_unicast_pkts(uint64_t value);
  private:
  uint64_t _internal_in_unicast_pkts() const;
  void _internal_set_in_unicast_pkts(uint64_t value);
  public:

  // uint64 in_broadcast_pkts = 4;
  void clear_in_broadcast_pkts();
  uint64_t in_broadcast_pkts() const;
  void set_in_broadcast_pkts(uint64_t value);
  private:
  uint64_t _internal_in_broadcast_pkts() const;
  void _internal_set_in_broadcast_pkts(uint64_t value);
  public:

  // uint64 in_multicast_pkts = 5;
  void clear_in_multicast_pkts();
  uint64_t in_multicast_pkts() const;
  void set_in_multicast_pkts(uint64_t value);
  private:
  uint64_t _internal_in_multicast_pkts() const;
  void _internal_set_in_multicast_pkts(uint64_t value);
  public:

  // uint64 in_discards = 6;
  void clear_in_discards();
  uint64_t in_discards() const;
  void set_in_discards(uint64_t value);
  private:
  uint64_t _internal_in_discards() const;
  void _internal_set_in_discards(uint64_t value);
  public:

  // uint64 in_errors = 7;
  void clear_in_errors();
  uint64_t in_errors() const;
  void set_in_errors(uint64_t value);
  private:
  uint64_t _internal_in_errors() const;
  void _internal_set_in_errors(uint64_t value);
  public:

  // uint64 in_unknown_protos = 8;
  void clear_in_unknown_protos();
  uint64_t in_unknown_protos() const;
  void set_in_unknown_protos(uint64_t value);
  private:
  uint64_t _internal_in_unknown_protos() const;
  void _internal_set_in_unknown_protos(uint64_t value);
  public:

  // uint64 in_fcs_errors = 9;
  void clear_in_fcs_errors();
  uint64_t in_fcs_errors() const;
  void set_in_fcs_errors(uint64_t value);
  private:
  uint64_t _internal_in_fcs_errors() const;
  void _internal_set_in_fcs_errors(uint64_t value);
  public:

  // uint64 out_octets = 10;
  void clear_out_octets();
  uint64_t out_octets() const;
  void set_out_octets(uint64_t value);
  private:
  uint64_t _internal_out_octets() const;
  void _internal_set_out_octets(uint64_t value);
  public:

  // uint64 out_packets = 11;
  void clear_out_packets();
  uint64_t out_packets() const;
  void set_out_packets(uint64_t value);
  private:
  uint64_t _internal_out_packets() const;
  void _internal_set_out_packets(uint64_t value);
  public:

  // uint64 out_unicast_pkts = 12;
  void clear_out_unicast_pkts();
  uint64_t out_unicast_pkts() const;
  void set_out_unicast_pkts(uint64_t value);
  private:
  uint64_t _internal_out_unicast_pkts() const;
  void _internal_set_out_unicast_pkts(uint64_t value);
  public:

  // uint64 out_broadcast_pkts = 13;
  void clear_out_broadcast_pkts();
  uint64_t out_broadcast_pkts() const;
  void set_out_broadcast_pkts(uint64_t value);
  private:
  uint64_t _internal_out_broadcast_pkts() const;
  void _internal_set_out_broadcast_pkts(uint64_t value);
  public:

  // uint64 out_multicast_pkts = 14;
  void clear_out_multicast_pkts();
  uint64_t out_multicast_pkts() const;
  void set_out_multicast_pkts(uint64_t value);
  private:
  uint64_t _internal_out_multicast_pkts() const;
  void _internal_set_out_multicast_pkts(uint64_t value);
  public:

  // uint64 out_discards = 15;
  void clear_out_discards();
  uint64_t out_discards() const;
  void set_out_discards(uint64_t value);
  private:
  uint64_t _internal_out_discards() const;
  void _internal_set_out_discards(uint64_t value);
  public:

  // uint64 out_errors = 16;
  void clear_out_errors();
  uint64_t out_errors() const;
  void set_out_errors(uint64_t value);
  private:
  uint64_t _internal_out_errors() const;
  void _internal_set_out_errors(uint64_t value);
  public:

  // uint64 carrier_transitions = 17;
  void clear_carrier_transitions();
  uint64_t carrier_transitions() const;
  void set_carrier_transitions(uint64_t value);
  private:
  uint64_t _internal_carrier_transitions() const;
  void _internal_set_carrier_transitions(uint64_t value);
  public:

  // uint64 last_clear = 18;
  void clear_last_clear();
  uint64_t last_clear() const;
  void set_last_clear(uint64_t value);
  private:
  uint64_t _internal_last_clear() const;
  void _internal_set_last_clear(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t in_octets_;
  uint64_t in_packets_;
  uint64_t in_unicast_pkts_;
  uint64_t in_broadcast_pkts_;
  uint64_t in_multicast_pkts_;
  uint64_t in_discards_;
  uint64_t in_errors_;
  uint64_t in_unknown_protos_;
  uint64_t in_fcs_errors_;
  uint64_t out_octets_;
  uint64_t out_packets_;
  uint64_t out_unicast_pkts_;
  uint64_t out_broadcast_pkts_;
  uint64_t out_multicast_pkts_;
  uint64_t out_discards_;
  uint64_t out_errors_;
  uint64_t carrier_transitions_;
  uint64_t last_clear_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class Interface_Subinterfaces_Subinterface_State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State) */ {
 public:
  inline Interface_Subinterfaces_Subinterface_State() : Interface_Subinterfaces_Subinterface_State(nullptr) {}
  ~Interface_Subinterfaces_Subinterface_State() override;
  explicit constexpr Interface_Subinterfaces_Subinterface_State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interface_Subinterfaces_Subinterface_State(const Interface_Subinterfaces_Subinterface_State& from);
  Interface_Subinterfaces_Subinterface_State(Interface_Subinterfaces_Subinterface_State&& from) noexcept
    : Interface_Subinterfaces_Subinterface_State() {
    *this = ::std::move(from);
  }

  inline Interface_Subinterfaces_Subinterface_State& operator=(const Interface_Subinterfaces_Subinterface_State& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface_Subinterfaces_Subinterface_State& operator=(Interface_Subinterfaces_Subinterface_State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interface_Subinterfaces_Subinterface_State& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interface_Subinterfaces_Subinterface_State* internal_default_instance() {
    return reinterpret_cast<const Interface_Subinterfaces_Subinterface_State*>(
               &_Interface_Subinterfaces_Subinterface_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Interface_Subinterfaces_Subinterface_State& a, Interface_Subinterfaces_Subinterface_State& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface_Subinterfaces_Subinterface_State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interface_Subinterfaces_Subinterface_State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interface_Subinterfaces_Subinterface_State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interface_Subinterfaces_Subinterface_State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interface_Subinterfaces_Subinterface_State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Interface_Subinterfaces_Subinterface_State& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface_Subinterfaces_Subinterface_State* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.Interface.Subinterfaces.Subinterface.State";
  }
  protected:
  explicit Interface_Subinterfaces_Subinterface_State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Interface_Subinterfaces_Subinterface_State_Counters Counters;

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kNameFieldNumber = 4,
    kCountersFieldNumber = 14,
    kIndexFieldNumber = 1,
    kIfindexFieldNumber = 5,
    kAdminStatusFieldNumber = 6,
    kOperStatusFieldNumber = 7,
    kLastChangeFieldNumber = 10,
    kEnabledFieldNumber = 3,
    kLogicalFieldNumber = 11,
    kManagementFieldNumber = 12,
    kCpuFieldNumber = 13,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters counters = 14;
  bool has_counters() const;
  private:
  bool _internal_has_counters() const;
  public:
  void clear_counters();
  const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters& counters() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* release_counters();
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* mutable_counters();
  void set_allocated_counters(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* counters);
  private:
  const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters& _internal_counters() const;
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* _internal_mutable_counters();
  public:
  void unsafe_arena_set_allocated_counters(
      ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* counters);
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* unsafe_arena_release_counters();

  // uint32 index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // uint32 ifindex = 5;
  void clear_ifindex();
  uint32_t ifindex() const;
  void set_ifindex(uint32_t value);
  private:
  uint32_t _internal_ifindex() const;
  void _internal_set_ifindex(uint32_t value);
  public:

  // .opi_api.network.v1.InterfaceState admin_status = 6;
  void clear_admin_status();
  ::opi_api::network::v1::InterfaceState admin_status() const;
  void set_admin_status(::opi_api::network::v1::InterfaceState value);
  private:
  ::opi_api::network::v1::InterfaceState _internal_admin_status() const;
  void _internal_set_admin_status(::opi_api::network::v1::InterfaceState value);
  public:

  // .opi_api.network.v1.InterfaceState oper_status = 7;
  void clear_oper_status();
  ::opi_api::network::v1::InterfaceState oper_status() const;
  void set_oper_status(::opi_api::network::v1::InterfaceState value);
  private:
  ::opi_api::network::v1::InterfaceState _internal_oper_status() const;
  void _internal_set_oper_status(::opi_api::network::v1::InterfaceState value);
  public:

  // uint64 last_change = 10;
  void clear_last_change();
  uint64_t last_change() const;
  void set_last_change(uint64_t value);
  private:
  uint64_t _internal_last_change() const;
  void _internal_set_last_change(uint64_t value);
  public:

  // bool enabled = 3;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // bool logical = 11;
  void clear_logical();
  bool logical() const;
  void set_logical(bool value);
  private:
  bool _internal_logical() const;
  void _internal_set_logical(bool value);
  public:

  // bool management = 12;
  void clear_management();
  bool management() const;
  void set_management(bool value);
  private:
  bool _internal_management() const;
  void _internal_set_management(bool value);
  public:

  // bool cpu = 13;
  void clear_cpu();
  bool cpu() const;
  void set_cpu(bool value);
  private:
  bool _internal_cpu() const;
  void _internal_set_cpu(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* counters_;
  uint32_t index_;
  uint32_t ifindex_;
  int admin_status_;
  int oper_status_;
  uint64_t last_change_;
  bool enabled_;
  bool logical_;
  bool management_;
  bool cpu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class Interface_Subinterfaces_Subinterface final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.Interface.Subinterfaces.Subinterface) */ {
 public:
  inline Interface_Subinterfaces_Subinterface() : Interface_Subinterfaces_Subinterface(nullptr) {}
  ~Interface_Subinterfaces_Subinterface() override;
  explicit constexpr Interface_Subinterfaces_Subinterface(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interface_Subinterfaces_Subinterface(const Interface_Subinterfaces_Subinterface& from);
  Interface_Subinterfaces_Subinterface(Interface_Subinterfaces_Subinterface&& from) noexcept
    : Interface_Subinterfaces_Subinterface() {
    *this = ::std::move(from);
  }

  inline Interface_Subinterfaces_Subinterface& operator=(const Interface_Subinterfaces_Subinterface& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface_Subinterfaces_Subinterface& operator=(Interface_Subinterfaces_Subinterface&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interface_Subinterfaces_Subinterface& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interface_Subinterfaces_Subinterface* internal_default_instance() {
    return reinterpret_cast<const Interface_Subinterfaces_Subinterface*>(
               &_Interface_Subinterfaces_Subinterface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Interface_Subinterfaces_Subinterface& a, Interface_Subinterfaces_Subinterface& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface_Subinterfaces_Subinterface* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interface_Subinterfaces_Subinterface* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interface_Subinterfaces_Subinterface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interface_Subinterfaces_Subinterface>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interface_Subinterfaces_Subinterface& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Interface_Subinterfaces_Subinterface& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface_Subinterfaces_Subinterface* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.Interface.Subinterfaces.Subinterface";
  }
  protected:
  explicit Interface_Subinterfaces_Subinterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Interface_Subinterfaces_Subinterface_Config Config;
  typedef Interface_Subinterfaces_Subinterface_State State;

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 2,
    kStateFieldNumber = 3,
    kIndexFieldNumber = 1,
  };
  // .opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config& config() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* release_config();
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* mutable_config();
  void set_allocated_config(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* config);
  private:
  const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config& _internal_config() const;
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* config);
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* unsafe_arena_release_config();

  // .opi_api.network.v1.Interface.Subinterfaces.Subinterface.State state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State& state() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* release_state();
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* mutable_state();
  void set_allocated_state(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* state);
  private:
  const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State& _internal_state() const;
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* state);
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* unsafe_arena_release_state();

  // uint64 index = 1;
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.Interface.Subinterfaces.Subinterface)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* config_;
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* state_;
  uint64_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class Interface_Subinterfaces final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.Interface.Subinterfaces) */ {
 public:
  inline Interface_Subinterfaces() : Interface_Subinterfaces(nullptr) {}
  ~Interface_Subinterfaces() override;
  explicit constexpr Interface_Subinterfaces(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interface_Subinterfaces(const Interface_Subinterfaces& from);
  Interface_Subinterfaces(Interface_Subinterfaces&& from) noexcept
    : Interface_Subinterfaces() {
    *this = ::std::move(from);
  }

  inline Interface_Subinterfaces& operator=(const Interface_Subinterfaces& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface_Subinterfaces& operator=(Interface_Subinterfaces&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interface_Subinterfaces& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interface_Subinterfaces* internal_default_instance() {
    return reinterpret_cast<const Interface_Subinterfaces*>(
               &_Interface_Subinterfaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Interface_Subinterfaces& a, Interface_Subinterfaces& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface_Subinterfaces* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interface_Subinterfaces* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interface_Subinterfaces* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interface_Subinterfaces>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interface_Subinterfaces& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Interface_Subinterfaces& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface_Subinterfaces* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.Interface.Subinterfaces";
  }
  protected:
  explicit Interface_Subinterfaces(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Interface_Subinterfaces_Subinterface Subinterface;

  // accessors -------------------------------------------------------

  enum : int {
    kSubinterfaceFieldNumber = 2,
  };
  // repeated .opi_api.network.v1.Interface.Subinterfaces.Subinterface subinterface = 2;
  int subinterface_size() const;
  private:
  int _internal_subinterface_size() const;
  public:
  void clear_subinterface();
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface* mutable_subinterface(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1::Interface_Subinterfaces_Subinterface >*
      mutable_subinterface();
  private:
  const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface& _internal_subinterface(int index) const;
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface* _internal_add_subinterface();
  public:
  const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface& subinterface(int index) const;
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface* add_subinterface();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1::Interface_Subinterfaces_Subinterface >&
      subinterface() const;

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.Interface.Subinterfaces)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1::Interface_Subinterfaces_Subinterface > subinterface_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class Interface final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.Interface) */ {
 public:
  inline Interface() : Interface(nullptr) {}
  ~Interface() override;
  explicit constexpr Interface(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interface(const Interface& from);
  Interface(Interface&& from) noexcept
    : Interface() {
    *this = ::std::move(from);
  }

  inline Interface& operator=(const Interface& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface& operator=(Interface&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interface& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interface* internal_default_instance() {
    return reinterpret_cast<const Interface*>(
               &_Interface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Interface& a, Interface& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interface* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interface>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interface& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Interface& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.Interface";
  }
  protected:
  explicit Interface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Interface_Config Config;
  typedef Interface_State State;
  typedef Interface_HoldTime HoldTime;
  typedef Interface_Subinterfaces Subinterfaces;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConfigFieldNumber = 2,
    kStateFieldNumber = 3,
    kHoldtimeFieldNumber = 4,
    kSubinterfacesFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .opi_api.network.v1.Interface.Config config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::opi_api::network::v1::Interface_Config& config() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1::Interface_Config* release_config();
  ::opi_api::network::v1::Interface_Config* mutable_config();
  void set_allocated_config(::opi_api::network::v1::Interface_Config* config);
  private:
  const ::opi_api::network::v1::Interface_Config& _internal_config() const;
  ::opi_api::network::v1::Interface_Config* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::opi_api::network::v1::Interface_Config* config);
  ::opi_api::network::v1::Interface_Config* unsafe_arena_release_config();

  // .opi_api.network.v1.Interface.State state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::opi_api::network::v1::Interface_State& state() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1::Interface_State* release_state();
  ::opi_api::network::v1::Interface_State* mutable_state();
  void set_allocated_state(::opi_api::network::v1::Interface_State* state);
  private:
  const ::opi_api::network::v1::Interface_State& _internal_state() const;
  ::opi_api::network::v1::Interface_State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::opi_api::network::v1::Interface_State* state);
  ::opi_api::network::v1::Interface_State* unsafe_arena_release_state();

  // .opi_api.network.v1.Interface.HoldTime holdtime = 4;
  bool has_holdtime() const;
  private:
  bool _internal_has_holdtime() const;
  public:
  void clear_holdtime();
  const ::opi_api::network::v1::Interface_HoldTime& holdtime() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1::Interface_HoldTime* release_holdtime();
  ::opi_api::network::v1::Interface_HoldTime* mutable_holdtime();
  void set_allocated_holdtime(::opi_api::network::v1::Interface_HoldTime* holdtime);
  private:
  const ::opi_api::network::v1::Interface_HoldTime& _internal_holdtime() const;
  ::opi_api::network::v1::Interface_HoldTime* _internal_mutable_holdtime();
  public:
  void unsafe_arena_set_allocated_holdtime(
      ::opi_api::network::v1::Interface_HoldTime* holdtime);
  ::opi_api::network::v1::Interface_HoldTime* unsafe_arena_release_holdtime();

  // .opi_api.network.v1.Interface.Subinterfaces subinterfaces = 5;
  bool has_subinterfaces() const;
  private:
  bool _internal_has_subinterfaces() const;
  public:
  void clear_subinterfaces();
  const ::opi_api::network::v1::Interface_Subinterfaces& subinterfaces() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1::Interface_Subinterfaces* release_subinterfaces();
  ::opi_api::network::v1::Interface_Subinterfaces* mutable_subinterfaces();
  void set_allocated_subinterfaces(::opi_api::network::v1::Interface_Subinterfaces* subinterfaces);
  private:
  const ::opi_api::network::v1::Interface_Subinterfaces& _internal_subinterfaces() const;
  ::opi_api::network::v1::Interface_Subinterfaces* _internal_mutable_subinterfaces();
  public:
  void unsafe_arena_set_allocated_subinterfaces(
      ::opi_api::network::v1::Interface_Subinterfaces* subinterfaces);
  ::opi_api::network::v1::Interface_Subinterfaces* unsafe_arena_release_subinterfaces();

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.Interface)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::opi_api::network::v1::Interface_Config* config_;
  ::opi_api::network::v1::Interface_State* state_;
  ::opi_api::network::v1::Interface_HoldTime* holdtime_;
  ::opi_api::network::v1::Interface_Subinterfaces* subinterfaces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class Interfaces final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.Interfaces) */ {
 public:
  inline Interfaces() : Interfaces(nullptr) {}
  ~Interfaces() override;
  explicit constexpr Interfaces(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interfaces(const Interfaces& from);
  Interfaces(Interfaces&& from) noexcept
    : Interfaces() {
    *this = ::std::move(from);
  }

  inline Interfaces& operator=(const Interfaces& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interfaces& operator=(Interfaces&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interfaces& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interfaces* internal_default_instance() {
    return reinterpret_cast<const Interfaces*>(
               &_Interfaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Interfaces& a, Interfaces& b) {
    a.Swap(&b);
  }
  inline void Swap(Interfaces* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interfaces* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interfaces* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interfaces>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interfaces& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Interfaces& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interfaces* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.Interfaces";
  }
  protected:
  explicit Interfaces(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
  };
  // repeated .opi_api.network.v1.Interface interface = 1;
  int interface_size() const;
  private:
  int _internal_interface_size() const;
  public:
  void clear_interface();
  ::opi_api::network::v1::Interface* mutable_interface(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1::Interface >*
      mutable_interface();
  private:
  const ::opi_api::network::v1::Interface& _internal_interface(int index) const;
  ::opi_api::network::v1::Interface* _internal_add_interface();
  public:
  const ::opi_api::network::v1::Interface& interface(int index) const;
  ::opi_api::network::v1::Interface* add_interface();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1::Interface >&
      interface() const;

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.Interfaces)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1::Interface > interface_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class NetInterfaceGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.NetInterfaceGetRequest) */ {
 public:
  inline NetInterfaceGetRequest() : NetInterfaceGetRequest(nullptr) {}
  ~NetInterfaceGetRequest() override;
  explicit constexpr NetInterfaceGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInterfaceGetRequest(const NetInterfaceGetRequest& from);
  NetInterfaceGetRequest(NetInterfaceGetRequest&& from) noexcept
    : NetInterfaceGetRequest() {
    *this = ::std::move(from);
  }

  inline NetInterfaceGetRequest& operator=(const NetInterfaceGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInterfaceGetRequest& operator=(NetInterfaceGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInterfaceGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInterfaceGetRequest* internal_default_instance() {
    return reinterpret_cast<const NetInterfaceGetRequest*>(
               &_NetInterfaceGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(NetInterfaceGetRequest& a, NetInterfaceGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInterfaceGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInterfaceGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInterfaceGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInterfaceGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInterfaceGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetInterfaceGetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInterfaceGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.NetInterfaceGetRequest";
  }
  protected:
  explicit NetInterfaceGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.NetInterfaceGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class NetInterfaceGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.NetInterfaceGetResponse) */ {
 public:
  inline NetInterfaceGetResponse() : NetInterfaceGetResponse(nullptr) {}
  ~NetInterfaceGetResponse() override;
  explicit constexpr NetInterfaceGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInterfaceGetResponse(const NetInterfaceGetResponse& from);
  NetInterfaceGetResponse(NetInterfaceGetResponse&& from) noexcept
    : NetInterfaceGetResponse() {
    *this = ::std::move(from);
  }

  inline NetInterfaceGetResponse& operator=(const NetInterfaceGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInterfaceGetResponse& operator=(NetInterfaceGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInterfaceGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInterfaceGetResponse* internal_default_instance() {
    return reinterpret_cast<const NetInterfaceGetResponse*>(
               &_NetInterfaceGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(NetInterfaceGetResponse& a, NetInterfaceGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInterfaceGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInterfaceGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInterfaceGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInterfaceGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInterfaceGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetInterfaceGetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInterfaceGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.NetInterfaceGetResponse";
  }
  protected:
  explicit NetInterfaceGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
  };
  // .opi_api.network.v1.Interface interface = 1;
  bool has_interface() const;
  private:
  bool _internal_has_interface() const;
  public:
  void clear_interface();
  const ::opi_api::network::v1::Interface& interface() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1::Interface* release_interface();
  ::opi_api::network::v1::Interface* mutable_interface();
  void set_allocated_interface(::opi_api::network::v1::Interface* interface);
  private:
  const ::opi_api::network::v1::Interface& _internal_interface() const;
  ::opi_api::network::v1::Interface* _internal_mutable_interface();
  public:
  void unsafe_arena_set_allocated_interface(
      ::opi_api::network::v1::Interface* interface);
  ::opi_api::network::v1::Interface* unsafe_arena_release_interface();

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.NetInterfaceGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::v1::Interface* interface_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class NetInterfaceListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.network.v1.NetInterfaceListRequest) */ {
 public:
  inline NetInterfaceListRequest() : NetInterfaceListRequest(nullptr) {}
  explicit constexpr NetInterfaceListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInterfaceListRequest(const NetInterfaceListRequest& from);
  NetInterfaceListRequest(NetInterfaceListRequest&& from) noexcept
    : NetInterfaceListRequest() {
    *this = ::std::move(from);
  }

  inline NetInterfaceListRequest& operator=(const NetInterfaceListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInterfaceListRequest& operator=(NetInterfaceListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInterfaceListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInterfaceListRequest* internal_default_instance() {
    return reinterpret_cast<const NetInterfaceListRequest*>(
               &_NetInterfaceListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(NetInterfaceListRequest& a, NetInterfaceListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInterfaceListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInterfaceListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInterfaceListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInterfaceListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NetInterfaceListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NetInterfaceListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.NetInterfaceListRequest";
  }
  protected:
  explicit NetInterfaceListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.NetInterfaceListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class NetInterfaceListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.NetInterfaceListResponse) */ {
 public:
  inline NetInterfaceListResponse() : NetInterfaceListResponse(nullptr) {}
  ~NetInterfaceListResponse() override;
  explicit constexpr NetInterfaceListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInterfaceListResponse(const NetInterfaceListResponse& from);
  NetInterfaceListResponse(NetInterfaceListResponse&& from) noexcept
    : NetInterfaceListResponse() {
    *this = ::std::move(from);
  }

  inline NetInterfaceListResponse& operator=(const NetInterfaceListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInterfaceListResponse& operator=(NetInterfaceListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInterfaceListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInterfaceListResponse* internal_default_instance() {
    return reinterpret_cast<const NetInterfaceListResponse*>(
               &_NetInterfaceListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(NetInterfaceListResponse& a, NetInterfaceListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInterfaceListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInterfaceListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInterfaceListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInterfaceListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInterfaceListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetInterfaceListResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInterfaceListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.NetInterfaceListResponse";
  }
  protected:
  explicit NetInterfaceListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
  };
  // repeated .opi_api.network.v1.Interface interface = 1;
  int interface_size() const;
  private:
  int _internal_interface_size() const;
  public:
  void clear_interface();
  ::opi_api::network::v1::Interface* mutable_interface(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1::Interface >*
      mutable_interface();
  private:
  const ::opi_api::network::v1::Interface& _internal_interface(int index) const;
  ::opi_api::network::v1::Interface* _internal_add_interface();
  public:
  const ::opi_api::network::v1::Interface& interface(int index) const;
  ::opi_api::network::v1::Interface* add_interface();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1::Interface >&
      interface() const;

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.NetInterfaceListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1::Interface > interface_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class NetInterfaceUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.NetInterfaceUpdateRequest) */ {
 public:
  inline NetInterfaceUpdateRequest() : NetInterfaceUpdateRequest(nullptr) {}
  ~NetInterfaceUpdateRequest() override;
  explicit constexpr NetInterfaceUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInterfaceUpdateRequest(const NetInterfaceUpdateRequest& from);
  NetInterfaceUpdateRequest(NetInterfaceUpdateRequest&& from) noexcept
    : NetInterfaceUpdateRequest() {
    *this = ::std::move(from);
  }

  inline NetInterfaceUpdateRequest& operator=(const NetInterfaceUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInterfaceUpdateRequest& operator=(NetInterfaceUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInterfaceUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInterfaceUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const NetInterfaceUpdateRequest*>(
               &_NetInterfaceUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(NetInterfaceUpdateRequest& a, NetInterfaceUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInterfaceUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInterfaceUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInterfaceUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInterfaceUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInterfaceUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetInterfaceUpdateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInterfaceUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.NetInterfaceUpdateRequest";
  }
  protected:
  explicit NetInterfaceUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
  };
  // .opi_api.network.v1.Interface interface = 1;
  bool has_interface() const;
  private:
  bool _internal_has_interface() const;
  public:
  void clear_interface();
  const ::opi_api::network::v1::Interface& interface() const;
  PROTOBUF_NODISCARD ::opi_api::network::v1::Interface* release_interface();
  ::opi_api::network::v1::Interface* mutable_interface();
  void set_allocated_interface(::opi_api::network::v1::Interface* interface);
  private:
  const ::opi_api::network::v1::Interface& _internal_interface() const;
  ::opi_api::network::v1::Interface* _internal_mutable_interface();
  public:
  void unsafe_arena_set_allocated_interface(
      ::opi_api::network::v1::Interface* interface);
  ::opi_api::network::v1::Interface* unsafe_arena_release_interface();

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.NetInterfaceUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::v1::Interface* interface_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// -------------------------------------------------------------------

class NetInterfaceUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.v1.NetInterfaceUpdateResponse) */ {
 public:
  inline NetInterfaceUpdateResponse() : NetInterfaceUpdateResponse(nullptr) {}
  ~NetInterfaceUpdateResponse() override;
  explicit constexpr NetInterfaceUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInterfaceUpdateResponse(const NetInterfaceUpdateResponse& from);
  NetInterfaceUpdateResponse(NetInterfaceUpdateResponse&& from) noexcept
    : NetInterfaceUpdateResponse() {
    *this = ::std::move(from);
  }

  inline NetInterfaceUpdateResponse& operator=(const NetInterfaceUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInterfaceUpdateResponse& operator=(NetInterfaceUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInterfaceUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInterfaceUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const NetInterfaceUpdateResponse*>(
               &_NetInterfaceUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(NetInterfaceUpdateResponse& a, NetInterfaceUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInterfaceUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInterfaceUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetInterfaceUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetInterfaceUpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInterfaceUpdateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetInterfaceUpdateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInterfaceUpdateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.v1.NetInterfaceUpdateResponse";
  }
  protected:
  explicit NetInterfaceUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.v1.NetInterfaceUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_openconfig_5finterfaces_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Interface_Config

// string name = 1;
inline void Interface_Config::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Interface_Config::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Config.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Interface_Config::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Config.name)
}
inline std::string* Interface_Config::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.Config.name)
  return _s;
}
inline const std::string& Interface_Config::_internal_name() const {
  return name_.Get();
}
inline void Interface_Config::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Interface_Config::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Interface_Config::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.Config.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Interface_Config::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.Config.name)
}

// .opi_api.network.v1.InterfaceType type = 2;
inline void Interface_Config::clear_type() {
  type_ = 0;
}
inline ::opi_api::network::v1::InterfaceType Interface_Config::_internal_type() const {
  return static_cast< ::opi_api::network::v1::InterfaceType >(type_);
}
inline ::opi_api::network::v1::InterfaceType Interface_Config::type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Config.type)
  return _internal_type();
}
inline void Interface_Config::_internal_set_type(::opi_api::network::v1::InterfaceType value) {
  
  type_ = value;
}
inline void Interface_Config::set_type(::opi_api::network::v1::InterfaceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Config.type)
}

// uint32 mtu = 3;
inline void Interface_Config::clear_mtu() {
  mtu_ = 0u;
}
inline uint32_t Interface_Config::_internal_mtu() const {
  return mtu_;
}
inline uint32_t Interface_Config::mtu() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Config.mtu)
  return _internal_mtu();
}
inline void Interface_Config::_internal_set_mtu(uint32_t value) {
  
  mtu_ = value;
}
inline void Interface_Config::set_mtu(uint32_t value) {
  _internal_set_mtu(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Config.mtu)
}

// bool loopback_mode = 4;
inline void Interface_Config::clear_loopback_mode() {
  loopback_mode_ = false;
}
inline bool Interface_Config::_internal_loopback_mode() const {
  return loopback_mode_;
}
inline bool Interface_Config::loopback_mode() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Config.loopback_mode)
  return _internal_loopback_mode();
}
inline void Interface_Config::_internal_set_loopback_mode(bool value) {
  
  loopback_mode_ = value;
}
inline void Interface_Config::set_loopback_mode(bool value) {
  _internal_set_loopback_mode(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Config.loopback_mode)
}

// string description = 5;
inline void Interface_Config::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Interface_Config::description() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Config.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Interface_Config::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Config.description)
}
inline std::string* Interface_Config::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.Config.description)
  return _s;
}
inline const std::string& Interface_Config::_internal_description() const {
  return description_.Get();
}
inline void Interface_Config::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Interface_Config::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Interface_Config::release_description() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.Config.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Interface_Config::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.Config.description)
}

// bool enabled = 6;
inline void Interface_Config::clear_enabled() {
  enabled_ = false;
}
inline bool Interface_Config::_internal_enabled() const {
  return enabled_;
}
inline bool Interface_Config::enabled() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Config.enabled)
  return _internal_enabled();
}
inline void Interface_Config::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Interface_Config::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Config.enabled)
}

// -------------------------------------------------------------------

// Interface_State_Counters

// uint64 in_octets = 1;
inline void Interface_State_Counters::clear_in_octets() {
  in_octets_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_in_octets() const {
  return in_octets_;
}
inline uint64_t Interface_State_Counters::in_octets() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.in_octets)
  return _internal_in_octets();
}
inline void Interface_State_Counters::_internal_set_in_octets(uint64_t value) {
  
  in_octets_ = value;
}
inline void Interface_State_Counters::set_in_octets(uint64_t value) {
  _internal_set_in_octets(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.in_octets)
}

// uint64 in_packets = 2;
inline void Interface_State_Counters::clear_in_packets() {
  in_packets_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_in_packets() const {
  return in_packets_;
}
inline uint64_t Interface_State_Counters::in_packets() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.in_packets)
  return _internal_in_packets();
}
inline void Interface_State_Counters::_internal_set_in_packets(uint64_t value) {
  
  in_packets_ = value;
}
inline void Interface_State_Counters::set_in_packets(uint64_t value) {
  _internal_set_in_packets(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.in_packets)
}

// uint64 in_unicast_pkts = 3;
inline void Interface_State_Counters::clear_in_unicast_pkts() {
  in_unicast_pkts_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_in_unicast_pkts() const {
  return in_unicast_pkts_;
}
inline uint64_t Interface_State_Counters::in_unicast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.in_unicast_pkts)
  return _internal_in_unicast_pkts();
}
inline void Interface_State_Counters::_internal_set_in_unicast_pkts(uint64_t value) {
  
  in_unicast_pkts_ = value;
}
inline void Interface_State_Counters::set_in_unicast_pkts(uint64_t value) {
  _internal_set_in_unicast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.in_unicast_pkts)
}

// uint64 in_broadcast_pkts = 4;
inline void Interface_State_Counters::clear_in_broadcast_pkts() {
  in_broadcast_pkts_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_in_broadcast_pkts() const {
  return in_broadcast_pkts_;
}
inline uint64_t Interface_State_Counters::in_broadcast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.in_broadcast_pkts)
  return _internal_in_broadcast_pkts();
}
inline void Interface_State_Counters::_internal_set_in_broadcast_pkts(uint64_t value) {
  
  in_broadcast_pkts_ = value;
}
inline void Interface_State_Counters::set_in_broadcast_pkts(uint64_t value) {
  _internal_set_in_broadcast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.in_broadcast_pkts)
}

// uint64 in_multicast_pkts = 5;
inline void Interface_State_Counters::clear_in_multicast_pkts() {
  in_multicast_pkts_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_in_multicast_pkts() const {
  return in_multicast_pkts_;
}
inline uint64_t Interface_State_Counters::in_multicast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.in_multicast_pkts)
  return _internal_in_multicast_pkts();
}
inline void Interface_State_Counters::_internal_set_in_multicast_pkts(uint64_t value) {
  
  in_multicast_pkts_ = value;
}
inline void Interface_State_Counters::set_in_multicast_pkts(uint64_t value) {
  _internal_set_in_multicast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.in_multicast_pkts)
}

// uint64 in_discards = 6;
inline void Interface_State_Counters::clear_in_discards() {
  in_discards_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_in_discards() const {
  return in_discards_;
}
inline uint64_t Interface_State_Counters::in_discards() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.in_discards)
  return _internal_in_discards();
}
inline void Interface_State_Counters::_internal_set_in_discards(uint64_t value) {
  
  in_discards_ = value;
}
inline void Interface_State_Counters::set_in_discards(uint64_t value) {
  _internal_set_in_discards(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.in_discards)
}

// uint64 in_errors = 7;
inline void Interface_State_Counters::clear_in_errors() {
  in_errors_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_in_errors() const {
  return in_errors_;
}
inline uint64_t Interface_State_Counters::in_errors() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.in_errors)
  return _internal_in_errors();
}
inline void Interface_State_Counters::_internal_set_in_errors(uint64_t value) {
  
  in_errors_ = value;
}
inline void Interface_State_Counters::set_in_errors(uint64_t value) {
  _internal_set_in_errors(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.in_errors)
}

// uint64 in_unknown_protos = 8;
inline void Interface_State_Counters::clear_in_unknown_protos() {
  in_unknown_protos_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_in_unknown_protos() const {
  return in_unknown_protos_;
}
inline uint64_t Interface_State_Counters::in_unknown_protos() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.in_unknown_protos)
  return _internal_in_unknown_protos();
}
inline void Interface_State_Counters::_internal_set_in_unknown_protos(uint64_t value) {
  
  in_unknown_protos_ = value;
}
inline void Interface_State_Counters::set_in_unknown_protos(uint64_t value) {
  _internal_set_in_unknown_protos(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.in_unknown_protos)
}

// uint64 in_fcs_errors = 9;
inline void Interface_State_Counters::clear_in_fcs_errors() {
  in_fcs_errors_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_in_fcs_errors() const {
  return in_fcs_errors_;
}
inline uint64_t Interface_State_Counters::in_fcs_errors() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.in_fcs_errors)
  return _internal_in_fcs_errors();
}
inline void Interface_State_Counters::_internal_set_in_fcs_errors(uint64_t value) {
  
  in_fcs_errors_ = value;
}
inline void Interface_State_Counters::set_in_fcs_errors(uint64_t value) {
  _internal_set_in_fcs_errors(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.in_fcs_errors)
}

// uint64 out_octets = 10;
inline void Interface_State_Counters::clear_out_octets() {
  out_octets_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_out_octets() const {
  return out_octets_;
}
inline uint64_t Interface_State_Counters::out_octets() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.out_octets)
  return _internal_out_octets();
}
inline void Interface_State_Counters::_internal_set_out_octets(uint64_t value) {
  
  out_octets_ = value;
}
inline void Interface_State_Counters::set_out_octets(uint64_t value) {
  _internal_set_out_octets(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.out_octets)
}

// uint64 out_packets = 11;
inline void Interface_State_Counters::clear_out_packets() {
  out_packets_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_out_packets() const {
  return out_packets_;
}
inline uint64_t Interface_State_Counters::out_packets() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.out_packets)
  return _internal_out_packets();
}
inline void Interface_State_Counters::_internal_set_out_packets(uint64_t value) {
  
  out_packets_ = value;
}
inline void Interface_State_Counters::set_out_packets(uint64_t value) {
  _internal_set_out_packets(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.out_packets)
}

// uint64 out_unicast_pkts = 12;
inline void Interface_State_Counters::clear_out_unicast_pkts() {
  out_unicast_pkts_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_out_unicast_pkts() const {
  return out_unicast_pkts_;
}
inline uint64_t Interface_State_Counters::out_unicast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.out_unicast_pkts)
  return _internal_out_unicast_pkts();
}
inline void Interface_State_Counters::_internal_set_out_unicast_pkts(uint64_t value) {
  
  out_unicast_pkts_ = value;
}
inline void Interface_State_Counters::set_out_unicast_pkts(uint64_t value) {
  _internal_set_out_unicast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.out_unicast_pkts)
}

// uint64 out_broadcast_pkts = 13;
inline void Interface_State_Counters::clear_out_broadcast_pkts() {
  out_broadcast_pkts_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_out_broadcast_pkts() const {
  return out_broadcast_pkts_;
}
inline uint64_t Interface_State_Counters::out_broadcast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.out_broadcast_pkts)
  return _internal_out_broadcast_pkts();
}
inline void Interface_State_Counters::_internal_set_out_broadcast_pkts(uint64_t value) {
  
  out_broadcast_pkts_ = value;
}
inline void Interface_State_Counters::set_out_broadcast_pkts(uint64_t value) {
  _internal_set_out_broadcast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.out_broadcast_pkts)
}

// uint64 out_multicast_pkts = 14;
inline void Interface_State_Counters::clear_out_multicast_pkts() {
  out_multicast_pkts_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_out_multicast_pkts() const {
  return out_multicast_pkts_;
}
inline uint64_t Interface_State_Counters::out_multicast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.out_multicast_pkts)
  return _internal_out_multicast_pkts();
}
inline void Interface_State_Counters::_internal_set_out_multicast_pkts(uint64_t value) {
  
  out_multicast_pkts_ = value;
}
inline void Interface_State_Counters::set_out_multicast_pkts(uint64_t value) {
  _internal_set_out_multicast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.out_multicast_pkts)
}

// uint64 out_discards = 15;
inline void Interface_State_Counters::clear_out_discards() {
  out_discards_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_out_discards() const {
  return out_discards_;
}
inline uint64_t Interface_State_Counters::out_discards() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.out_discards)
  return _internal_out_discards();
}
inline void Interface_State_Counters::_internal_set_out_discards(uint64_t value) {
  
  out_discards_ = value;
}
inline void Interface_State_Counters::set_out_discards(uint64_t value) {
  _internal_set_out_discards(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.out_discards)
}

// uint64 out_errors = 16;
inline void Interface_State_Counters::clear_out_errors() {
  out_errors_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_out_errors() const {
  return out_errors_;
}
inline uint64_t Interface_State_Counters::out_errors() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.out_errors)
  return _internal_out_errors();
}
inline void Interface_State_Counters::_internal_set_out_errors(uint64_t value) {
  
  out_errors_ = value;
}
inline void Interface_State_Counters::set_out_errors(uint64_t value) {
  _internal_set_out_errors(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.out_errors)
}

// uint64 carrier_transitions = 17;
inline void Interface_State_Counters::clear_carrier_transitions() {
  carrier_transitions_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_carrier_transitions() const {
  return carrier_transitions_;
}
inline uint64_t Interface_State_Counters::carrier_transitions() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.carrier_transitions)
  return _internal_carrier_transitions();
}
inline void Interface_State_Counters::_internal_set_carrier_transitions(uint64_t value) {
  
  carrier_transitions_ = value;
}
inline void Interface_State_Counters::set_carrier_transitions(uint64_t value) {
  _internal_set_carrier_transitions(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.carrier_transitions)
}

// uint64 last_clear = 18;
inline void Interface_State_Counters::clear_last_clear() {
  last_clear_ = uint64_t{0u};
}
inline uint64_t Interface_State_Counters::_internal_last_clear() const {
  return last_clear_;
}
inline uint64_t Interface_State_Counters::last_clear() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.Counters.last_clear)
  return _internal_last_clear();
}
inline void Interface_State_Counters::_internal_set_last_clear(uint64_t value) {
  
  last_clear_ = value;
}
inline void Interface_State_Counters::set_last_clear(uint64_t value) {
  _internal_set_last_clear(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.Counters.last_clear)
}

// -------------------------------------------------------------------

// Interface_State

// string name = 1;
inline void Interface_State::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Interface_State::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Interface_State::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.name)
}
inline std::string* Interface_State::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.State.name)
  return _s;
}
inline const std::string& Interface_State::_internal_name() const {
  return name_.Get();
}
inline void Interface_State::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Interface_State::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Interface_State::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.State.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Interface_State::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.State.name)
}

// .opi_api.network.v1.InterfaceType type = 2;
inline void Interface_State::clear_type() {
  type_ = 0;
}
inline ::opi_api::network::v1::InterfaceType Interface_State::_internal_type() const {
  return static_cast< ::opi_api::network::v1::InterfaceType >(type_);
}
inline ::opi_api::network::v1::InterfaceType Interface_State::type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.type)
  return _internal_type();
}
inline void Interface_State::_internal_set_type(::opi_api::network::v1::InterfaceType value) {
  
  type_ = value;
}
inline void Interface_State::set_type(::opi_api::network::v1::InterfaceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.type)
}

// uint32 mtu = 3;
inline void Interface_State::clear_mtu() {
  mtu_ = 0u;
}
inline uint32_t Interface_State::_internal_mtu() const {
  return mtu_;
}
inline uint32_t Interface_State::mtu() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.mtu)
  return _internal_mtu();
}
inline void Interface_State::_internal_set_mtu(uint32_t value) {
  
  mtu_ = value;
}
inline void Interface_State::set_mtu(uint32_t value) {
  _internal_set_mtu(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.mtu)
}

// bool loopback_mode = 4;
inline void Interface_State::clear_loopback_mode() {
  loopback_mode_ = false;
}
inline bool Interface_State::_internal_loopback_mode() const {
  return loopback_mode_;
}
inline bool Interface_State::loopback_mode() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.loopback_mode)
  return _internal_loopback_mode();
}
inline void Interface_State::_internal_set_loopback_mode(bool value) {
  
  loopback_mode_ = value;
}
inline void Interface_State::set_loopback_mode(bool value) {
  _internal_set_loopback_mode(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.loopback_mode)
}

// string description = 5;
inline void Interface_State::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Interface_State::description() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Interface_State::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.description)
}
inline std::string* Interface_State::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.State.description)
  return _s;
}
inline const std::string& Interface_State::_internal_description() const {
  return description_.Get();
}
inline void Interface_State::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Interface_State::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Interface_State::release_description() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.State.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Interface_State::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.State.description)
}

// bool enabled = 6;
inline void Interface_State::clear_enabled() {
  enabled_ = false;
}
inline bool Interface_State::_internal_enabled() const {
  return enabled_;
}
inline bool Interface_State::enabled() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.enabled)
  return _internal_enabled();
}
inline void Interface_State::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Interface_State::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.enabled)
}

// uint32 ifindex = 7;
inline void Interface_State::clear_ifindex() {
  ifindex_ = 0u;
}
inline uint32_t Interface_State::_internal_ifindex() const {
  return ifindex_;
}
inline uint32_t Interface_State::ifindex() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.ifindex)
  return _internal_ifindex();
}
inline void Interface_State::_internal_set_ifindex(uint32_t value) {
  
  ifindex_ = value;
}
inline void Interface_State::set_ifindex(uint32_t value) {
  _internal_set_ifindex(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.ifindex)
}

// .opi_api.network.v1.InterfaceState admin_status = 8;
inline void Interface_State::clear_admin_status() {
  admin_status_ = 0;
}
inline ::opi_api::network::v1::InterfaceState Interface_State::_internal_admin_status() const {
  return static_cast< ::opi_api::network::v1::InterfaceState >(admin_status_);
}
inline ::opi_api::network::v1::InterfaceState Interface_State::admin_status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.admin_status)
  return _internal_admin_status();
}
inline void Interface_State::_internal_set_admin_status(::opi_api::network::v1::InterfaceState value) {
  
  admin_status_ = value;
}
inline void Interface_State::set_admin_status(::opi_api::network::v1::InterfaceState value) {
  _internal_set_admin_status(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.admin_status)
}

// .opi_api.network.v1.InterfaceState oper_status = 9;
inline void Interface_State::clear_oper_status() {
  oper_status_ = 0;
}
inline ::opi_api::network::v1::InterfaceState Interface_State::_internal_oper_status() const {
  return static_cast< ::opi_api::network::v1::InterfaceState >(oper_status_);
}
inline ::opi_api::network::v1::InterfaceState Interface_State::oper_status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.oper_status)
  return _internal_oper_status();
}
inline void Interface_State::_internal_set_oper_status(::opi_api::network::v1::InterfaceState value) {
  
  oper_status_ = value;
}
inline void Interface_State::set_oper_status(::opi_api::network::v1::InterfaceState value) {
  _internal_set_oper_status(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.oper_status)
}

// uint64 last_change = 10;
inline void Interface_State::clear_last_change() {
  last_change_ = uint64_t{0u};
}
inline uint64_t Interface_State::_internal_last_change() const {
  return last_change_;
}
inline uint64_t Interface_State::last_change() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.last_change)
  return _internal_last_change();
}
inline void Interface_State::_internal_set_last_change(uint64_t value) {
  
  last_change_ = value;
}
inline void Interface_State::set_last_change(uint64_t value) {
  _internal_set_last_change(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.last_change)
}

// bool logical = 11;
inline void Interface_State::clear_logical() {
  logical_ = false;
}
inline bool Interface_State::_internal_logical() const {
  return logical_;
}
inline bool Interface_State::logical() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.logical)
  return _internal_logical();
}
inline void Interface_State::_internal_set_logical(bool value) {
  
  logical_ = value;
}
inline void Interface_State::set_logical(bool value) {
  _internal_set_logical(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.logical)
}

// bool management = 12;
inline void Interface_State::clear_management() {
  management_ = false;
}
inline bool Interface_State::_internal_management() const {
  return management_;
}
inline bool Interface_State::management() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.management)
  return _internal_management();
}
inline void Interface_State::_internal_set_management(bool value) {
  
  management_ = value;
}
inline void Interface_State::set_management(bool value) {
  _internal_set_management(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.management)
}

// bool cpu = 13;
inline void Interface_State::clear_cpu() {
  cpu_ = false;
}
inline bool Interface_State::_internal_cpu() const {
  return cpu_;
}
inline bool Interface_State::cpu() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.cpu)
  return _internal_cpu();
}
inline void Interface_State::_internal_set_cpu(bool value) {
  
  cpu_ = value;
}
inline void Interface_State::set_cpu(bool value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.State.cpu)
}

// .opi_api.network.v1.Interface.State.Counters counters = 14;
inline bool Interface_State::_internal_has_counters() const {
  return this != internal_default_instance() && counters_ != nullptr;
}
inline bool Interface_State::has_counters() const {
  return _internal_has_counters();
}
inline void Interface_State::clear_counters() {
  if (GetArenaForAllocation() == nullptr && counters_ != nullptr) {
    delete counters_;
  }
  counters_ = nullptr;
}
inline const ::opi_api::network::v1::Interface_State_Counters& Interface_State::_internal_counters() const {
  const ::opi_api::network::v1::Interface_State_Counters* p = counters_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1::Interface_State_Counters&>(
      ::opi_api::network::v1::_Interface_State_Counters_default_instance_);
}
inline const ::opi_api::network::v1::Interface_State_Counters& Interface_State::counters() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.State.counters)
  return _internal_counters();
}
inline void Interface_State::unsafe_arena_set_allocated_counters(
    ::opi_api::network::v1::Interface_State_Counters* counters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counters_);
  }
  counters_ = counters;
  if (counters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1.Interface.State.counters)
}
inline ::opi_api::network::v1::Interface_State_Counters* Interface_State::release_counters() {
  
  ::opi_api::network::v1::Interface_State_Counters* temp = counters_;
  counters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1::Interface_State_Counters* Interface_State::unsafe_arena_release_counters() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.State.counters)
  
  ::opi_api::network::v1::Interface_State_Counters* temp = counters_;
  counters_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1::Interface_State_Counters* Interface_State::_internal_mutable_counters() {
  
  if (counters_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1::Interface_State_Counters>(GetArenaForAllocation());
    counters_ = p;
  }
  return counters_;
}
inline ::opi_api::network::v1::Interface_State_Counters* Interface_State::mutable_counters() {
  ::opi_api::network::v1::Interface_State_Counters* _msg = _internal_mutable_counters();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.State.counters)
  return _msg;
}
inline void Interface_State::set_allocated_counters(::opi_api::network::v1::Interface_State_Counters* counters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete counters_;
  }
  if (counters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1::Interface_State_Counters>::GetOwningArena(counters);
    if (message_arena != submessage_arena) {
      counters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counters, submessage_arena);
    }
    
  } else {
    
  }
  counters_ = counters;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.State.counters)
}

// -------------------------------------------------------------------

// Interface_HoldTime_Config

// uint32 up = 1;
inline void Interface_HoldTime_Config::clear_up() {
  up_ = 0u;
}
inline uint32_t Interface_HoldTime_Config::_internal_up() const {
  return up_;
}
inline uint32_t Interface_HoldTime_Config::up() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.HoldTime.Config.up)
  return _internal_up();
}
inline void Interface_HoldTime_Config::_internal_set_up(uint32_t value) {
  
  up_ = value;
}
inline void Interface_HoldTime_Config::set_up(uint32_t value) {
  _internal_set_up(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.HoldTime.Config.up)
}

// uint32 down = 2;
inline void Interface_HoldTime_Config::clear_down() {
  down_ = 0u;
}
inline uint32_t Interface_HoldTime_Config::_internal_down() const {
  return down_;
}
inline uint32_t Interface_HoldTime_Config::down() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.HoldTime.Config.down)
  return _internal_down();
}
inline void Interface_HoldTime_Config::_internal_set_down(uint32_t value) {
  
  down_ = value;
}
inline void Interface_HoldTime_Config::set_down(uint32_t value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.HoldTime.Config.down)
}

// -------------------------------------------------------------------

// Interface_HoldTime_State

// uint32 up = 1;
inline void Interface_HoldTime_State::clear_up() {
  up_ = 0u;
}
inline uint32_t Interface_HoldTime_State::_internal_up() const {
  return up_;
}
inline uint32_t Interface_HoldTime_State::up() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.HoldTime.State.up)
  return _internal_up();
}
inline void Interface_HoldTime_State::_internal_set_up(uint32_t value) {
  
  up_ = value;
}
inline void Interface_HoldTime_State::set_up(uint32_t value) {
  _internal_set_up(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.HoldTime.State.up)
}

// uint32 down = 2;
inline void Interface_HoldTime_State::clear_down() {
  down_ = 0u;
}
inline uint32_t Interface_HoldTime_State::_internal_down() const {
  return down_;
}
inline uint32_t Interface_HoldTime_State::down() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.HoldTime.State.down)
  return _internal_down();
}
inline void Interface_HoldTime_State::_internal_set_down(uint32_t value) {
  
  down_ = value;
}
inline void Interface_HoldTime_State::set_down(uint32_t value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.HoldTime.State.down)
}

// -------------------------------------------------------------------

// Interface_HoldTime

// .opi_api.network.v1.Interface.HoldTime.Config config = 1;
inline bool Interface_HoldTime::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool Interface_HoldTime::has_config() const {
  return _internal_has_config();
}
inline void Interface_HoldTime::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::opi_api::network::v1::Interface_HoldTime_Config& Interface_HoldTime::_internal_config() const {
  const ::opi_api::network::v1::Interface_HoldTime_Config* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1::Interface_HoldTime_Config&>(
      ::opi_api::network::v1::_Interface_HoldTime_Config_default_instance_);
}
inline const ::opi_api::network::v1::Interface_HoldTime_Config& Interface_HoldTime::config() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.HoldTime.config)
  return _internal_config();
}
inline void Interface_HoldTime::unsafe_arena_set_allocated_config(
    ::opi_api::network::v1::Interface_HoldTime_Config* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1.Interface.HoldTime.config)
}
inline ::opi_api::network::v1::Interface_HoldTime_Config* Interface_HoldTime::release_config() {
  
  ::opi_api::network::v1::Interface_HoldTime_Config* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1::Interface_HoldTime_Config* Interface_HoldTime::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.HoldTime.config)
  
  ::opi_api::network::v1::Interface_HoldTime_Config* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1::Interface_HoldTime_Config* Interface_HoldTime::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1::Interface_HoldTime_Config>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::opi_api::network::v1::Interface_HoldTime_Config* Interface_HoldTime::mutable_config() {
  ::opi_api::network::v1::Interface_HoldTime_Config* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.HoldTime.config)
  return _msg;
}
inline void Interface_HoldTime::set_allocated_config(::opi_api::network::v1::Interface_HoldTime_Config* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1::Interface_HoldTime_Config>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.HoldTime.config)
}

// .opi_api.network.v1.Interface.HoldTime.State state = 2;
inline bool Interface_HoldTime::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Interface_HoldTime::has_state() const {
  return _internal_has_state();
}
inline void Interface_HoldTime::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::opi_api::network::v1::Interface_HoldTime_State& Interface_HoldTime::_internal_state() const {
  const ::opi_api::network::v1::Interface_HoldTime_State* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1::Interface_HoldTime_State&>(
      ::opi_api::network::v1::_Interface_HoldTime_State_default_instance_);
}
inline const ::opi_api::network::v1::Interface_HoldTime_State& Interface_HoldTime::state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.HoldTime.state)
  return _internal_state();
}
inline void Interface_HoldTime::unsafe_arena_set_allocated_state(
    ::opi_api::network::v1::Interface_HoldTime_State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1.Interface.HoldTime.state)
}
inline ::opi_api::network::v1::Interface_HoldTime_State* Interface_HoldTime::release_state() {
  
  ::opi_api::network::v1::Interface_HoldTime_State* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1::Interface_HoldTime_State* Interface_HoldTime::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.HoldTime.state)
  
  ::opi_api::network::v1::Interface_HoldTime_State* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1::Interface_HoldTime_State* Interface_HoldTime::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1::Interface_HoldTime_State>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::opi_api::network::v1::Interface_HoldTime_State* Interface_HoldTime::mutable_state() {
  ::opi_api::network::v1::Interface_HoldTime_State* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.HoldTime.state)
  return _msg;
}
inline void Interface_HoldTime::set_allocated_state(::opi_api::network::v1::Interface_HoldTime_State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1::Interface_HoldTime_State>::GetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.HoldTime.state)
}

// -------------------------------------------------------------------

// Interface_Subinterfaces_Subinterface_Config

// uint64 index = 1;
inline void Interface_Subinterfaces_Subinterface_Config::clear_index() {
  index_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_Config::_internal_index() const {
  return index_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_Config::index() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config.index)
  return _internal_index();
}
inline void Interface_Subinterfaces_Subinterface_Config::_internal_set_index(uint64_t value) {
  
  index_ = value;
}
inline void Interface_Subinterfaces_Subinterface_Config::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config.index)
}

// string description = 2;
inline void Interface_Subinterfaces_Subinterface_Config::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Interface_Subinterfaces_Subinterface_Config::description() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Interface_Subinterfaces_Subinterface_Config::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config.description)
}
inline std::string* Interface_Subinterfaces_Subinterface_Config::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config.description)
  return _s;
}
inline const std::string& Interface_Subinterfaces_Subinterface_Config::_internal_description() const {
  return description_.Get();
}
inline void Interface_Subinterfaces_Subinterface_Config::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Interface_Subinterfaces_Subinterface_Config::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Interface_Subinterfaces_Subinterface_Config::release_description() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Interface_Subinterfaces_Subinterface_Config::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config.description)
}

// bool enabled = 3;
inline void Interface_Subinterfaces_Subinterface_Config::clear_enabled() {
  enabled_ = false;
}
inline bool Interface_Subinterfaces_Subinterface_Config::_internal_enabled() const {
  return enabled_;
}
inline bool Interface_Subinterfaces_Subinterface_Config::enabled() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config.enabled)
  return _internal_enabled();
}
inline void Interface_Subinterfaces_Subinterface_Config::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Interface_Subinterfaces_Subinterface_Config::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config.enabled)
}

// -------------------------------------------------------------------

// Interface_Subinterfaces_Subinterface_State_Counters

// uint64 in_octets = 1;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_in_octets() {
  in_octets_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_in_octets() const {
  return in_octets_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::in_octets() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_octets)
  return _internal_in_octets();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_in_octets(uint64_t value) {
  
  in_octets_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_in_octets(uint64_t value) {
  _internal_set_in_octets(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_octets)
}

// uint64 in_packets = 2;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_in_packets() {
  in_packets_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_in_packets() const {
  return in_packets_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::in_packets() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_packets)
  return _internal_in_packets();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_in_packets(uint64_t value) {
  
  in_packets_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_in_packets(uint64_t value) {
  _internal_set_in_packets(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_packets)
}

// uint64 in_unicast_pkts = 3;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_in_unicast_pkts() {
  in_unicast_pkts_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_in_unicast_pkts() const {
  return in_unicast_pkts_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::in_unicast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_unicast_pkts)
  return _internal_in_unicast_pkts();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_in_unicast_pkts(uint64_t value) {
  
  in_unicast_pkts_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_in_unicast_pkts(uint64_t value) {
  _internal_set_in_unicast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_unicast_pkts)
}

// uint64 in_broadcast_pkts = 4;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_in_broadcast_pkts() {
  in_broadcast_pkts_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_in_broadcast_pkts() const {
  return in_broadcast_pkts_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::in_broadcast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_broadcast_pkts)
  return _internal_in_broadcast_pkts();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_in_broadcast_pkts(uint64_t value) {
  
  in_broadcast_pkts_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_in_broadcast_pkts(uint64_t value) {
  _internal_set_in_broadcast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_broadcast_pkts)
}

// uint64 in_multicast_pkts = 5;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_in_multicast_pkts() {
  in_multicast_pkts_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_in_multicast_pkts() const {
  return in_multicast_pkts_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::in_multicast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_multicast_pkts)
  return _internal_in_multicast_pkts();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_in_multicast_pkts(uint64_t value) {
  
  in_multicast_pkts_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_in_multicast_pkts(uint64_t value) {
  _internal_set_in_multicast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_multicast_pkts)
}

// uint64 in_discards = 6;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_in_discards() {
  in_discards_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_in_discards() const {
  return in_discards_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::in_discards() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_discards)
  return _internal_in_discards();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_in_discards(uint64_t value) {
  
  in_discards_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_in_discards(uint64_t value) {
  _internal_set_in_discards(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_discards)
}

// uint64 in_errors = 7;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_in_errors() {
  in_errors_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_in_errors() const {
  return in_errors_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::in_errors() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_errors)
  return _internal_in_errors();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_in_errors(uint64_t value) {
  
  in_errors_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_in_errors(uint64_t value) {
  _internal_set_in_errors(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_errors)
}

// uint64 in_unknown_protos = 8;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_in_unknown_protos() {
  in_unknown_protos_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_in_unknown_protos() const {
  return in_unknown_protos_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::in_unknown_protos() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_unknown_protos)
  return _internal_in_unknown_protos();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_in_unknown_protos(uint64_t value) {
  
  in_unknown_protos_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_in_unknown_protos(uint64_t value) {
  _internal_set_in_unknown_protos(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_unknown_protos)
}

// uint64 in_fcs_errors = 9;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_in_fcs_errors() {
  in_fcs_errors_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_in_fcs_errors() const {
  return in_fcs_errors_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::in_fcs_errors() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_fcs_errors)
  return _internal_in_fcs_errors();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_in_fcs_errors(uint64_t value) {
  
  in_fcs_errors_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_in_fcs_errors(uint64_t value) {
  _internal_set_in_fcs_errors(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.in_fcs_errors)
}

// uint64 out_octets = 10;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_out_octets() {
  out_octets_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_out_octets() const {
  return out_octets_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::out_octets() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.out_octets)
  return _internal_out_octets();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_out_octets(uint64_t value) {
  
  out_octets_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_out_octets(uint64_t value) {
  _internal_set_out_octets(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.out_octets)
}

// uint64 out_packets = 11;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_out_packets() {
  out_packets_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_out_packets() const {
  return out_packets_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::out_packets() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.out_packets)
  return _internal_out_packets();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_out_packets(uint64_t value) {
  
  out_packets_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_out_packets(uint64_t value) {
  _internal_set_out_packets(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.out_packets)
}

// uint64 out_unicast_pkts = 12;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_out_unicast_pkts() {
  out_unicast_pkts_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_out_unicast_pkts() const {
  return out_unicast_pkts_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::out_unicast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.out_unicast_pkts)
  return _internal_out_unicast_pkts();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_out_unicast_pkts(uint64_t value) {
  
  out_unicast_pkts_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_out_unicast_pkts(uint64_t value) {
  _internal_set_out_unicast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.out_unicast_pkts)
}

// uint64 out_broadcast_pkts = 13;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_out_broadcast_pkts() {
  out_broadcast_pkts_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_out_broadcast_pkts() const {
  return out_broadcast_pkts_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::out_broadcast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.out_broadcast_pkts)
  return _internal_out_broadcast_pkts();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_out_broadcast_pkts(uint64_t value) {
  
  out_broadcast_pkts_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_out_broadcast_pkts(uint64_t value) {
  _internal_set_out_broadcast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.out_broadcast_pkts)
}

// uint64 out_multicast_pkts = 14;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_out_multicast_pkts() {
  out_multicast_pkts_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_out_multicast_pkts() const {
  return out_multicast_pkts_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::out_multicast_pkts() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.out_multicast_pkts)
  return _internal_out_multicast_pkts();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_out_multicast_pkts(uint64_t value) {
  
  out_multicast_pkts_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_out_multicast_pkts(uint64_t value) {
  _internal_set_out_multicast_pkts(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.out_multicast_pkts)
}

// uint64 out_discards = 15;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_out_discards() {
  out_discards_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_out_discards() const {
  return out_discards_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::out_discards() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.out_discards)
  return _internal_out_discards();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_out_discards(uint64_t value) {
  
  out_discards_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_out_discards(uint64_t value) {
  _internal_set_out_discards(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.out_discards)
}

// uint64 out_errors = 16;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_out_errors() {
  out_errors_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_out_errors() const {
  return out_errors_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::out_errors() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.out_errors)
  return _internal_out_errors();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_out_errors(uint64_t value) {
  
  out_errors_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_out_errors(uint64_t value) {
  _internal_set_out_errors(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.out_errors)
}

// uint64 carrier_transitions = 17;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_carrier_transitions() {
  carrier_transitions_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_carrier_transitions() const {
  return carrier_transitions_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::carrier_transitions() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.carrier_transitions)
  return _internal_carrier_transitions();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_carrier_transitions(uint64_t value) {
  
  carrier_transitions_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_carrier_transitions(uint64_t value) {
  _internal_set_carrier_transitions(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.carrier_transitions)
}

// uint64 last_clear = 18;
inline void Interface_Subinterfaces_Subinterface_State_Counters::clear_last_clear() {
  last_clear_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::_internal_last_clear() const {
  return last_clear_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State_Counters::last_clear() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.last_clear)
  return _internal_last_clear();
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::_internal_set_last_clear(uint64_t value) {
  
  last_clear_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State_Counters::set_last_clear(uint64_t value) {
  _internal_set_last_clear(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters.last_clear)
}

// -------------------------------------------------------------------

// Interface_Subinterfaces_Subinterface_State

// uint32 index = 1;
inline void Interface_Subinterfaces_Subinterface_State::clear_index() {
  index_ = 0u;
}
inline uint32_t Interface_Subinterfaces_Subinterface_State::_internal_index() const {
  return index_;
}
inline uint32_t Interface_Subinterfaces_Subinterface_State::index() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.index)
  return _internal_index();
}
inline void Interface_Subinterfaces_Subinterface_State::_internal_set_index(uint32_t value) {
  
  index_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.index)
}

// string description = 2;
inline void Interface_Subinterfaces_Subinterface_State::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Interface_Subinterfaces_Subinterface_State::description() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Interface_Subinterfaces_Subinterface_State::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.description)
}
inline std::string* Interface_Subinterfaces_Subinterface_State::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.description)
  return _s;
}
inline const std::string& Interface_Subinterfaces_Subinterface_State::_internal_description() const {
  return description_.Get();
}
inline void Interface_Subinterfaces_Subinterface_State::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Interface_Subinterfaces_Subinterface_State::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Interface_Subinterfaces_Subinterface_State::release_description() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Interface_Subinterfaces_Subinterface_State::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.description)
}

// bool enabled = 3;
inline void Interface_Subinterfaces_Subinterface_State::clear_enabled() {
  enabled_ = false;
}
inline bool Interface_Subinterfaces_Subinterface_State::_internal_enabled() const {
  return enabled_;
}
inline bool Interface_Subinterfaces_Subinterface_State::enabled() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.enabled)
  return _internal_enabled();
}
inline void Interface_Subinterfaces_Subinterface_State::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.enabled)
}

// string name = 4;
inline void Interface_Subinterfaces_Subinterface_State::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Interface_Subinterfaces_Subinterface_State::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Interface_Subinterfaces_Subinterface_State::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.name)
}
inline std::string* Interface_Subinterfaces_Subinterface_State::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.name)
  return _s;
}
inline const std::string& Interface_Subinterfaces_Subinterface_State::_internal_name() const {
  return name_.Get();
}
inline void Interface_Subinterfaces_Subinterface_State::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Interface_Subinterfaces_Subinterface_State::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Interface_Subinterfaces_Subinterface_State::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Interface_Subinterfaces_Subinterface_State::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.name)
}

// uint32 ifindex = 5;
inline void Interface_Subinterfaces_Subinterface_State::clear_ifindex() {
  ifindex_ = 0u;
}
inline uint32_t Interface_Subinterfaces_Subinterface_State::_internal_ifindex() const {
  return ifindex_;
}
inline uint32_t Interface_Subinterfaces_Subinterface_State::ifindex() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.ifindex)
  return _internal_ifindex();
}
inline void Interface_Subinterfaces_Subinterface_State::_internal_set_ifindex(uint32_t value) {
  
  ifindex_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State::set_ifindex(uint32_t value) {
  _internal_set_ifindex(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.ifindex)
}

// .opi_api.network.v1.InterfaceState admin_status = 6;
inline void Interface_Subinterfaces_Subinterface_State::clear_admin_status() {
  admin_status_ = 0;
}
inline ::opi_api::network::v1::InterfaceState Interface_Subinterfaces_Subinterface_State::_internal_admin_status() const {
  return static_cast< ::opi_api::network::v1::InterfaceState >(admin_status_);
}
inline ::opi_api::network::v1::InterfaceState Interface_Subinterfaces_Subinterface_State::admin_status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.admin_status)
  return _internal_admin_status();
}
inline void Interface_Subinterfaces_Subinterface_State::_internal_set_admin_status(::opi_api::network::v1::InterfaceState value) {
  
  admin_status_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State::set_admin_status(::opi_api::network::v1::InterfaceState value) {
  _internal_set_admin_status(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.admin_status)
}

// .opi_api.network.v1.InterfaceState oper_status = 7;
inline void Interface_Subinterfaces_Subinterface_State::clear_oper_status() {
  oper_status_ = 0;
}
inline ::opi_api::network::v1::InterfaceState Interface_Subinterfaces_Subinterface_State::_internal_oper_status() const {
  return static_cast< ::opi_api::network::v1::InterfaceState >(oper_status_);
}
inline ::opi_api::network::v1::InterfaceState Interface_Subinterfaces_Subinterface_State::oper_status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.oper_status)
  return _internal_oper_status();
}
inline void Interface_Subinterfaces_Subinterface_State::_internal_set_oper_status(::opi_api::network::v1::InterfaceState value) {
  
  oper_status_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State::set_oper_status(::opi_api::network::v1::InterfaceState value) {
  _internal_set_oper_status(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.oper_status)
}

// uint64 last_change = 10;
inline void Interface_Subinterfaces_Subinterface_State::clear_last_change() {
  last_change_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface_State::_internal_last_change() const {
  return last_change_;
}
inline uint64_t Interface_Subinterfaces_Subinterface_State::last_change() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.last_change)
  return _internal_last_change();
}
inline void Interface_Subinterfaces_Subinterface_State::_internal_set_last_change(uint64_t value) {
  
  last_change_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State::set_last_change(uint64_t value) {
  _internal_set_last_change(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.last_change)
}

// bool logical = 11;
inline void Interface_Subinterfaces_Subinterface_State::clear_logical() {
  logical_ = false;
}
inline bool Interface_Subinterfaces_Subinterface_State::_internal_logical() const {
  return logical_;
}
inline bool Interface_Subinterfaces_Subinterface_State::logical() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.logical)
  return _internal_logical();
}
inline void Interface_Subinterfaces_Subinterface_State::_internal_set_logical(bool value) {
  
  logical_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State::set_logical(bool value) {
  _internal_set_logical(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.logical)
}

// bool management = 12;
inline void Interface_Subinterfaces_Subinterface_State::clear_management() {
  management_ = false;
}
inline bool Interface_Subinterfaces_Subinterface_State::_internal_management() const {
  return management_;
}
inline bool Interface_Subinterfaces_Subinterface_State::management() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.management)
  return _internal_management();
}
inline void Interface_Subinterfaces_Subinterface_State::_internal_set_management(bool value) {
  
  management_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State::set_management(bool value) {
  _internal_set_management(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.management)
}

// bool cpu = 13;
inline void Interface_Subinterfaces_Subinterface_State::clear_cpu() {
  cpu_ = false;
}
inline bool Interface_Subinterfaces_Subinterface_State::_internal_cpu() const {
  return cpu_;
}
inline bool Interface_Subinterfaces_Subinterface_State::cpu() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.cpu)
  return _internal_cpu();
}
inline void Interface_Subinterfaces_Subinterface_State::_internal_set_cpu(bool value) {
  
  cpu_ = value;
}
inline void Interface_Subinterfaces_Subinterface_State::set_cpu(bool value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.cpu)
}

// .opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.Counters counters = 14;
inline bool Interface_Subinterfaces_Subinterface_State::_internal_has_counters() const {
  return this != internal_default_instance() && counters_ != nullptr;
}
inline bool Interface_Subinterfaces_Subinterface_State::has_counters() const {
  return _internal_has_counters();
}
inline void Interface_Subinterfaces_Subinterface_State::clear_counters() {
  if (GetArenaForAllocation() == nullptr && counters_ != nullptr) {
    delete counters_;
  }
  counters_ = nullptr;
}
inline const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters& Interface_Subinterfaces_Subinterface_State::_internal_counters() const {
  const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* p = counters_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters&>(
      ::opi_api::network::v1::_Interface_Subinterfaces_Subinterface_State_Counters_default_instance_);
}
inline const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters& Interface_Subinterfaces_Subinterface_State::counters() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.counters)
  return _internal_counters();
}
inline void Interface_Subinterfaces_Subinterface_State::unsafe_arena_set_allocated_counters(
    ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* counters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counters_);
  }
  counters_ = counters;
  if (counters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.counters)
}
inline ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* Interface_Subinterfaces_Subinterface_State::release_counters() {
  
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* temp = counters_;
  counters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* Interface_Subinterfaces_Subinterface_State::unsafe_arena_release_counters() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.counters)
  
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* temp = counters_;
  counters_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* Interface_Subinterfaces_Subinterface_State::_internal_mutable_counters() {
  
  if (counters_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters>(GetArenaForAllocation());
    counters_ = p;
  }
  return counters_;
}
inline ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* Interface_Subinterfaces_Subinterface_State::mutable_counters() {
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* _msg = _internal_mutable_counters();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.counters)
  return _msg;
}
inline void Interface_Subinterfaces_Subinterface_State::set_allocated_counters(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters* counters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete counters_;
  }
  if (counters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State_Counters>::GetOwningArena(counters);
    if (message_arena != submessage_arena) {
      counters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counters, submessage_arena);
    }
    
  } else {
    
  }
  counters_ = counters;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.Subinterfaces.Subinterface.State.counters)
}

// -------------------------------------------------------------------

// Interface_Subinterfaces_Subinterface

// uint64 index = 1;
inline void Interface_Subinterfaces_Subinterface::clear_index() {
  index_ = uint64_t{0u};
}
inline uint64_t Interface_Subinterfaces_Subinterface::_internal_index() const {
  return index_;
}
inline uint64_t Interface_Subinterfaces_Subinterface::index() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.index)
  return _internal_index();
}
inline void Interface_Subinterfaces_Subinterface::_internal_set_index(uint64_t value) {
  
  index_ = value;
}
inline void Interface_Subinterfaces_Subinterface::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.Subinterfaces.Subinterface.index)
}

// .opi_api.network.v1.Interface.Subinterfaces.Subinterface.Config config = 2;
inline bool Interface_Subinterfaces_Subinterface::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool Interface_Subinterfaces_Subinterface::has_config() const {
  return _internal_has_config();
}
inline void Interface_Subinterfaces_Subinterface::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config& Interface_Subinterfaces_Subinterface::_internal_config() const {
  const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config&>(
      ::opi_api::network::v1::_Interface_Subinterfaces_Subinterface_Config_default_instance_);
}
inline const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config& Interface_Subinterfaces_Subinterface::config() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.config)
  return _internal_config();
}
inline void Interface_Subinterfaces_Subinterface::unsafe_arena_set_allocated_config(
    ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1.Interface.Subinterfaces.Subinterface.config)
}
inline ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* Interface_Subinterfaces_Subinterface::release_config() {
  
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* Interface_Subinterfaces_Subinterface::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.Subinterfaces.Subinterface.config)
  
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* Interface_Subinterfaces_Subinterface::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* Interface_Subinterfaces_Subinterface::mutable_config() {
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.Subinterfaces.Subinterface.config)
  return _msg;
}
inline void Interface_Subinterfaces_Subinterface::set_allocated_config(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1::Interface_Subinterfaces_Subinterface_Config>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.Subinterfaces.Subinterface.config)
}

// .opi_api.network.v1.Interface.Subinterfaces.Subinterface.State state = 3;
inline bool Interface_Subinterfaces_Subinterface::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Interface_Subinterfaces_Subinterface::has_state() const {
  return _internal_has_state();
}
inline void Interface_Subinterfaces_Subinterface::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State& Interface_Subinterfaces_Subinterface::_internal_state() const {
  const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State&>(
      ::opi_api::network::v1::_Interface_Subinterfaces_Subinterface_State_default_instance_);
}
inline const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State& Interface_Subinterfaces_Subinterface::state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.Subinterface.state)
  return _internal_state();
}
inline void Interface_Subinterfaces_Subinterface::unsafe_arena_set_allocated_state(
    ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1.Interface.Subinterfaces.Subinterface.state)
}
inline ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* Interface_Subinterfaces_Subinterface::release_state() {
  
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* Interface_Subinterfaces_Subinterface::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.Subinterfaces.Subinterface.state)
  
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* Interface_Subinterfaces_Subinterface::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* Interface_Subinterfaces_Subinterface::mutable_state() {
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.Subinterfaces.Subinterface.state)
  return _msg;
}
inline void Interface_Subinterfaces_Subinterface::set_allocated_state(::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1::Interface_Subinterfaces_Subinterface_State>::GetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.Subinterfaces.Subinterface.state)
}

// -------------------------------------------------------------------

// Interface_Subinterfaces

// repeated .opi_api.network.v1.Interface.Subinterfaces.Subinterface subinterface = 2;
inline int Interface_Subinterfaces::_internal_subinterface_size() const {
  return subinterface_.size();
}
inline int Interface_Subinterfaces::subinterface_size() const {
  return _internal_subinterface_size();
}
inline void Interface_Subinterfaces::clear_subinterface() {
  subinterface_.Clear();
}
inline ::opi_api::network::v1::Interface_Subinterfaces_Subinterface* Interface_Subinterfaces::mutable_subinterface(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.Subinterfaces.subinterface)
  return subinterface_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1::Interface_Subinterfaces_Subinterface >*
Interface_Subinterfaces::mutable_subinterface() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.v1.Interface.Subinterfaces.subinterface)
  return &subinterface_;
}
inline const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface& Interface_Subinterfaces::_internal_subinterface(int index) const {
  return subinterface_.Get(index);
}
inline const ::opi_api::network::v1::Interface_Subinterfaces_Subinterface& Interface_Subinterfaces::subinterface(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.Subinterfaces.subinterface)
  return _internal_subinterface(index);
}
inline ::opi_api::network::v1::Interface_Subinterfaces_Subinterface* Interface_Subinterfaces::_internal_add_subinterface() {
  return subinterface_.Add();
}
inline ::opi_api::network::v1::Interface_Subinterfaces_Subinterface* Interface_Subinterfaces::add_subinterface() {
  ::opi_api::network::v1::Interface_Subinterfaces_Subinterface* _add = _internal_add_subinterface();
  // @@protoc_insertion_point(field_add:opi_api.network.v1.Interface.Subinterfaces.subinterface)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1::Interface_Subinterfaces_Subinterface >&
Interface_Subinterfaces::subinterface() const {
  // @@protoc_insertion_point(field_list:opi_api.network.v1.Interface.Subinterfaces.subinterface)
  return subinterface_;
}

// -------------------------------------------------------------------

// Interface

// string name = 1;
inline void Interface::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Interface::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Interface::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1.Interface.name)
}
inline std::string* Interface::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.name)
  return _s;
}
inline const std::string& Interface::_internal_name() const {
  return name_.Get();
}
inline void Interface::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Interface::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Interface::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Interface::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.name)
}

// .opi_api.network.v1.Interface.Config config = 2;
inline bool Interface::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool Interface::has_config() const {
  return _internal_has_config();
}
inline void Interface::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::opi_api::network::v1::Interface_Config& Interface::_internal_config() const {
  const ::opi_api::network::v1::Interface_Config* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1::Interface_Config&>(
      ::opi_api::network::v1::_Interface_Config_default_instance_);
}
inline const ::opi_api::network::v1::Interface_Config& Interface::config() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.config)
  return _internal_config();
}
inline void Interface::unsafe_arena_set_allocated_config(
    ::opi_api::network::v1::Interface_Config* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1.Interface.config)
}
inline ::opi_api::network::v1::Interface_Config* Interface::release_config() {
  
  ::opi_api::network::v1::Interface_Config* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1::Interface_Config* Interface::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.config)
  
  ::opi_api::network::v1::Interface_Config* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1::Interface_Config* Interface::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1::Interface_Config>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::opi_api::network::v1::Interface_Config* Interface::mutable_config() {
  ::opi_api::network::v1::Interface_Config* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.config)
  return _msg;
}
inline void Interface::set_allocated_config(::opi_api::network::v1::Interface_Config* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1::Interface_Config>::GetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.config)
}

// .opi_api.network.v1.Interface.State state = 3;
inline bool Interface::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Interface::has_state() const {
  return _internal_has_state();
}
inline void Interface::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::opi_api::network::v1::Interface_State& Interface::_internal_state() const {
  const ::opi_api::network::v1::Interface_State* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1::Interface_State&>(
      ::opi_api::network::v1::_Interface_State_default_instance_);
}
inline const ::opi_api::network::v1::Interface_State& Interface::state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.state)
  return _internal_state();
}
inline void Interface::unsafe_arena_set_allocated_state(
    ::opi_api::network::v1::Interface_State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1.Interface.state)
}
inline ::opi_api::network::v1::Interface_State* Interface::release_state() {
  
  ::opi_api::network::v1::Interface_State* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1::Interface_State* Interface::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.state)
  
  ::opi_api::network::v1::Interface_State* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1::Interface_State* Interface::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1::Interface_State>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::opi_api::network::v1::Interface_State* Interface::mutable_state() {
  ::opi_api::network::v1::Interface_State* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.state)
  return _msg;
}
inline void Interface::set_allocated_state(::opi_api::network::v1::Interface_State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1::Interface_State>::GetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.state)
}

// .opi_api.network.v1.Interface.HoldTime holdtime = 4;
inline bool Interface::_internal_has_holdtime() const {
  return this != internal_default_instance() && holdtime_ != nullptr;
}
inline bool Interface::has_holdtime() const {
  return _internal_has_holdtime();
}
inline void Interface::clear_holdtime() {
  if (GetArenaForAllocation() == nullptr && holdtime_ != nullptr) {
    delete holdtime_;
  }
  holdtime_ = nullptr;
}
inline const ::opi_api::network::v1::Interface_HoldTime& Interface::_internal_holdtime() const {
  const ::opi_api::network::v1::Interface_HoldTime* p = holdtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1::Interface_HoldTime&>(
      ::opi_api::network::v1::_Interface_HoldTime_default_instance_);
}
inline const ::opi_api::network::v1::Interface_HoldTime& Interface::holdtime() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.holdtime)
  return _internal_holdtime();
}
inline void Interface::unsafe_arena_set_allocated_holdtime(
    ::opi_api::network::v1::Interface_HoldTime* holdtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(holdtime_);
  }
  holdtime_ = holdtime;
  if (holdtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1.Interface.holdtime)
}
inline ::opi_api::network::v1::Interface_HoldTime* Interface::release_holdtime() {
  
  ::opi_api::network::v1::Interface_HoldTime* temp = holdtime_;
  holdtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1::Interface_HoldTime* Interface::unsafe_arena_release_holdtime() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.holdtime)
  
  ::opi_api::network::v1::Interface_HoldTime* temp = holdtime_;
  holdtime_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1::Interface_HoldTime* Interface::_internal_mutable_holdtime() {
  
  if (holdtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1::Interface_HoldTime>(GetArenaForAllocation());
    holdtime_ = p;
  }
  return holdtime_;
}
inline ::opi_api::network::v1::Interface_HoldTime* Interface::mutable_holdtime() {
  ::opi_api::network::v1::Interface_HoldTime* _msg = _internal_mutable_holdtime();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.holdtime)
  return _msg;
}
inline void Interface::set_allocated_holdtime(::opi_api::network::v1::Interface_HoldTime* holdtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete holdtime_;
  }
  if (holdtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1::Interface_HoldTime>::GetOwningArena(holdtime);
    if (message_arena != submessage_arena) {
      holdtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, holdtime, submessage_arena);
    }
    
  } else {
    
  }
  holdtime_ = holdtime;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.holdtime)
}

// .opi_api.network.v1.Interface.Subinterfaces subinterfaces = 5;
inline bool Interface::_internal_has_subinterfaces() const {
  return this != internal_default_instance() && subinterfaces_ != nullptr;
}
inline bool Interface::has_subinterfaces() const {
  return _internal_has_subinterfaces();
}
inline void Interface::clear_subinterfaces() {
  if (GetArenaForAllocation() == nullptr && subinterfaces_ != nullptr) {
    delete subinterfaces_;
  }
  subinterfaces_ = nullptr;
}
inline const ::opi_api::network::v1::Interface_Subinterfaces& Interface::_internal_subinterfaces() const {
  const ::opi_api::network::v1::Interface_Subinterfaces* p = subinterfaces_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1::Interface_Subinterfaces&>(
      ::opi_api::network::v1::_Interface_Subinterfaces_default_instance_);
}
inline const ::opi_api::network::v1::Interface_Subinterfaces& Interface::subinterfaces() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interface.subinterfaces)
  return _internal_subinterfaces();
}
inline void Interface::unsafe_arena_set_allocated_subinterfaces(
    ::opi_api::network::v1::Interface_Subinterfaces* subinterfaces) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subinterfaces_);
  }
  subinterfaces_ = subinterfaces;
  if (subinterfaces) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1.Interface.subinterfaces)
}
inline ::opi_api::network::v1::Interface_Subinterfaces* Interface::release_subinterfaces() {
  
  ::opi_api::network::v1::Interface_Subinterfaces* temp = subinterfaces_;
  subinterfaces_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1::Interface_Subinterfaces* Interface::unsafe_arena_release_subinterfaces() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.Interface.subinterfaces)
  
  ::opi_api::network::v1::Interface_Subinterfaces* temp = subinterfaces_;
  subinterfaces_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1::Interface_Subinterfaces* Interface::_internal_mutable_subinterfaces() {
  
  if (subinterfaces_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1::Interface_Subinterfaces>(GetArenaForAllocation());
    subinterfaces_ = p;
  }
  return subinterfaces_;
}
inline ::opi_api::network::v1::Interface_Subinterfaces* Interface::mutable_subinterfaces() {
  ::opi_api::network::v1::Interface_Subinterfaces* _msg = _internal_mutable_subinterfaces();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interface.subinterfaces)
  return _msg;
}
inline void Interface::set_allocated_subinterfaces(::opi_api::network::v1::Interface_Subinterfaces* subinterfaces) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete subinterfaces_;
  }
  if (subinterfaces) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1::Interface_Subinterfaces>::GetOwningArena(subinterfaces);
    if (message_arena != submessage_arena) {
      subinterfaces = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subinterfaces, submessage_arena);
    }
    
  } else {
    
  }
  subinterfaces_ = subinterfaces;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.Interface.subinterfaces)
}

// -------------------------------------------------------------------

// Interfaces

// repeated .opi_api.network.v1.Interface interface = 1;
inline int Interfaces::_internal_interface_size() const {
  return interface_.size();
}
inline int Interfaces::interface_size() const {
  return _internal_interface_size();
}
inline void Interfaces::clear_interface() {
  interface_.Clear();
}
inline ::opi_api::network::v1::Interface* Interfaces::mutable_interface(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.Interfaces.interface)
  return interface_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1::Interface >*
Interfaces::mutable_interface() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.v1.Interfaces.interface)
  return &interface_;
}
inline const ::opi_api::network::v1::Interface& Interfaces::_internal_interface(int index) const {
  return interface_.Get(index);
}
inline const ::opi_api::network::v1::Interface& Interfaces::interface(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.Interfaces.interface)
  return _internal_interface(index);
}
inline ::opi_api::network::v1::Interface* Interfaces::_internal_add_interface() {
  return interface_.Add();
}
inline ::opi_api::network::v1::Interface* Interfaces::add_interface() {
  ::opi_api::network::v1::Interface* _add = _internal_add_interface();
  // @@protoc_insertion_point(field_add:opi_api.network.v1.Interfaces.interface)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1::Interface >&
Interfaces::interface() const {
  // @@protoc_insertion_point(field_list:opi_api.network.v1.Interfaces.interface)
  return interface_;
}

// -------------------------------------------------------------------

// NetInterfaceGetRequest

// string name = 1;
inline void NetInterfaceGetRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NetInterfaceGetRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.NetInterfaceGetRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetInterfaceGetRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.v1.NetInterfaceGetRequest.name)
}
inline std::string* NetInterfaceGetRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.NetInterfaceGetRequest.name)
  return _s;
}
inline const std::string& NetInterfaceGetRequest::_internal_name() const {
  return name_.Get();
}
inline void NetInterfaceGetRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NetInterfaceGetRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NetInterfaceGetRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.NetInterfaceGetRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NetInterfaceGetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.NetInterfaceGetRequest.name)
}

// -------------------------------------------------------------------

// NetInterfaceGetResponse

// .opi_api.network.v1.Interface interface = 1;
inline bool NetInterfaceGetResponse::_internal_has_interface() const {
  return this != internal_default_instance() && interface_ != nullptr;
}
inline bool NetInterfaceGetResponse::has_interface() const {
  return _internal_has_interface();
}
inline void NetInterfaceGetResponse::clear_interface() {
  if (GetArenaForAllocation() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
}
inline const ::opi_api::network::v1::Interface& NetInterfaceGetResponse::_internal_interface() const {
  const ::opi_api::network::v1::Interface* p = interface_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1::Interface&>(
      ::opi_api::network::v1::_Interface_default_instance_);
}
inline const ::opi_api::network::v1::Interface& NetInterfaceGetResponse::interface() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.NetInterfaceGetResponse.interface)
  return _internal_interface();
}
inline void NetInterfaceGetResponse::unsafe_arena_set_allocated_interface(
    ::opi_api::network::v1::Interface* interface) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  interface_ = interface;
  if (interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1.NetInterfaceGetResponse.interface)
}
inline ::opi_api::network::v1::Interface* NetInterfaceGetResponse::release_interface() {
  
  ::opi_api::network::v1::Interface* temp = interface_;
  interface_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1::Interface* NetInterfaceGetResponse::unsafe_arena_release_interface() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.NetInterfaceGetResponse.interface)
  
  ::opi_api::network::v1::Interface* temp = interface_;
  interface_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1::Interface* NetInterfaceGetResponse::_internal_mutable_interface() {
  
  if (interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1::Interface>(GetArenaForAllocation());
    interface_ = p;
  }
  return interface_;
}
inline ::opi_api::network::v1::Interface* NetInterfaceGetResponse::mutable_interface() {
  ::opi_api::network::v1::Interface* _msg = _internal_mutable_interface();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.NetInterfaceGetResponse.interface)
  return _msg;
}
inline void NetInterfaceGetResponse::set_allocated_interface(::opi_api::network::v1::Interface* interface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete interface_;
  }
  if (interface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1::Interface>::GetOwningArena(interface);
    if (message_arena != submessage_arena) {
      interface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.NetInterfaceGetResponse.interface)
}

// -------------------------------------------------------------------

// NetInterfaceListRequest

// -------------------------------------------------------------------

// NetInterfaceListResponse

// repeated .opi_api.network.v1.Interface interface = 1;
inline int NetInterfaceListResponse::_internal_interface_size() const {
  return interface_.size();
}
inline int NetInterfaceListResponse::interface_size() const {
  return _internal_interface_size();
}
inline void NetInterfaceListResponse::clear_interface() {
  interface_.Clear();
}
inline ::opi_api::network::v1::Interface* NetInterfaceListResponse::mutable_interface(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.NetInterfaceListResponse.interface)
  return interface_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1::Interface >*
NetInterfaceListResponse::mutable_interface() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.v1.NetInterfaceListResponse.interface)
  return &interface_;
}
inline const ::opi_api::network::v1::Interface& NetInterfaceListResponse::_internal_interface(int index) const {
  return interface_.Get(index);
}
inline const ::opi_api::network::v1::Interface& NetInterfaceListResponse::interface(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.NetInterfaceListResponse.interface)
  return _internal_interface(index);
}
inline ::opi_api::network::v1::Interface* NetInterfaceListResponse::_internal_add_interface() {
  return interface_.Add();
}
inline ::opi_api::network::v1::Interface* NetInterfaceListResponse::add_interface() {
  ::opi_api::network::v1::Interface* _add = _internal_add_interface();
  // @@protoc_insertion_point(field_add:opi_api.network.v1.NetInterfaceListResponse.interface)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::v1::Interface >&
NetInterfaceListResponse::interface() const {
  // @@protoc_insertion_point(field_list:opi_api.network.v1.NetInterfaceListResponse.interface)
  return interface_;
}

// -------------------------------------------------------------------

// NetInterfaceUpdateRequest

// .opi_api.network.v1.Interface interface = 1;
inline bool NetInterfaceUpdateRequest::_internal_has_interface() const {
  return this != internal_default_instance() && interface_ != nullptr;
}
inline bool NetInterfaceUpdateRequest::has_interface() const {
  return _internal_has_interface();
}
inline void NetInterfaceUpdateRequest::clear_interface() {
  if (GetArenaForAllocation() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
}
inline const ::opi_api::network::v1::Interface& NetInterfaceUpdateRequest::_internal_interface() const {
  const ::opi_api::network::v1::Interface* p = interface_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::v1::Interface&>(
      ::opi_api::network::v1::_Interface_default_instance_);
}
inline const ::opi_api::network::v1::Interface& NetInterfaceUpdateRequest::interface() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.NetInterfaceUpdateRequest.interface)
  return _internal_interface();
}
inline void NetInterfaceUpdateRequest::unsafe_arena_set_allocated_interface(
    ::opi_api::network::v1::Interface* interface) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  interface_ = interface;
  if (interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.v1.NetInterfaceUpdateRequest.interface)
}
inline ::opi_api::network::v1::Interface* NetInterfaceUpdateRequest::release_interface() {
  
  ::opi_api::network::v1::Interface* temp = interface_;
  interface_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::v1::Interface* NetInterfaceUpdateRequest::unsafe_arena_release_interface() {
  // @@protoc_insertion_point(field_release:opi_api.network.v1.NetInterfaceUpdateRequest.interface)
  
  ::opi_api::network::v1::Interface* temp = interface_;
  interface_ = nullptr;
  return temp;
}
inline ::opi_api::network::v1::Interface* NetInterfaceUpdateRequest::_internal_mutable_interface() {
  
  if (interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::v1::Interface>(GetArenaForAllocation());
    interface_ = p;
  }
  return interface_;
}
inline ::opi_api::network::v1::Interface* NetInterfaceUpdateRequest::mutable_interface() {
  ::opi_api::network::v1::Interface* _msg = _internal_mutable_interface();
  // @@protoc_insertion_point(field_mutable:opi_api.network.v1.NetInterfaceUpdateRequest.interface)
  return _msg;
}
inline void NetInterfaceUpdateRequest::set_allocated_interface(::opi_api::network::v1::Interface* interface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete interface_;
  }
  if (interface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::v1::Interface>::GetOwningArena(interface);
    if (message_arena != submessage_arena) {
      interface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.v1.NetInterfaceUpdateRequest.interface)
}

// -------------------------------------------------------------------

// NetInterfaceUpdateResponse

// uint32 result = 1;
inline void NetInterfaceUpdateResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t NetInterfaceUpdateResponse::_internal_result() const {
  return result_;
}
inline uint32_t NetInterfaceUpdateResponse::result() const {
  // @@protoc_insertion_point(field_get:opi_api.network.v1.NetInterfaceUpdateResponse.result)
  return _internal_result();
}
inline void NetInterfaceUpdateResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void NetInterfaceUpdateResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:opi_api.network.v1.NetInterfaceUpdateResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace network
}  // namespace opi_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opi_api::network::v1::InterfaceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::v1::InterfaceType>() {
  return ::opi_api::network::v1::InterfaceType_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::v1::InterfaceState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::v1::InterfaceState>() {
  return ::opi_api::network::v1::InterfaceState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_openconfig_5finterfaces_2eproto
