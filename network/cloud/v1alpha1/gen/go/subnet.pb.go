// Copyright (c) 2023 Pensando, AMD Inc, or its subsidiaries.
// protobuf specification for subnet (IP network) object

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: subnet.proto

package _go

import (
	_go "github.com/opiproject/opi-api/common/v1/gen/go"
	_go1 "github.com/opiproject/opi-api/network/opinetcommon/v1alpha1/gen/go"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// subnet object
type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// configuration
	Spec *SubnetSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// status
	Status *SubnetStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subnet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_subnet_proto_rawDescGZIP(), []int{0}
}

func (x *Subnet) GetSpec() *SubnetSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Subnet) GetStatus() *SubnetStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// SubnetSpec captures subnet specific configuration
type SubnetSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier of the subnet
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// virtual private cloud this subnet is belongs to
	VpcId *_go.ObjectKey `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
	V4Prefix *_go1.IPv4Prefix `protobuf:"bytes,3,opt,name=v4_prefix,json=v4Prefix,proto3" json:"v4_prefix,omitempty"`
	// IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
	V6Prefix *_go1.IPv6Prefix `protobuf:"bytes,4,opt,name=v6_prefix,json=v6Prefix,proto3" json:"v6_prefix,omitempty"`
	// IPv4 Virtual Router (VR) IP of this subnet, this IP is owned by the device
	// and packets originated by this device carry this IP as source IP
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: ipv4 address is unsigned. --)
	Ipv4VirtualRouterIp uint32 `protobuf:"varint,5,opt,name=ipv4_virtual_router_ip,json=ipv4VirtualRouterIp,proto3" json:"ipv4_virtual_router_ip,omitempty"`
	// Ipv6 Virtual Router (VR) IP of this subnet, this IP is owned by the device
	// and packets originated by this device carry this IP as source IP
	Ipv6VirtualRouterIp []byte `protobuf:"bytes,6,opt,name=ipv6_virtual_router_ip,json=ipv6VirtualRouterIp,proto3" json:"ipv6_virtual_router_ip,omitempty"`
	// Virtual Router (VR) MAC address, any packets originated or routed by
	// the device carry this MAC as source MAC
	VirtualRouterMac []byte `protobuf:"bytes,7,opt,name=virtual_router_mac,json=virtualRouterMac,proto3" json:"virtual_router_mac,omitempty"`
	// identifier of the IPv4 route table to be used
	V4RouteTableId *_go.ObjectKey `protobuf:"bytes,8,opt,name=v4_route_table_id,json=v4RouteTableId,proto3" json:"v4_route_table_id,omitempty"`
	// identifier of the IPv6 route table to be used, if any
	V6RouterTableId *_go.ObjectKey `protobuf:"bytes,9,opt,name=v6_router_table_id,json=v6RouterTableId,proto3" json:"v6_router_table_id,omitempty"`
	// security policies per subnet:
	// - all vnics in this subnet will inherit the policies configured under subnet
	// - multiple policies per vnic per direction (ingress/egress) can be specified
	// - an implementation may limit the #policies per subnet in each direction
	// identifier of ingress IPv4 security policy to be enforced
	IngessV4SecurityPolicyId []*_go.ObjectKey `protobuf:"bytes,10,rep,name=ingess_v4_security_policy_id,json=ingessV4SecurityPolicyId,proto3" json:"ingess_v4_security_policy_id,omitempty"`
	// identifier of ingress IPv6 security policy to be enforced
	IngressV6SecurityPolicyId []*_go.ObjectKey `protobuf:"bytes,11,rep,name=ingress_v6_security_policy_id,json=ingressV6SecurityPolicyId,proto3" json:"ingress_v6_security_policy_id,omitempty"`
	// identifier of egress IPv4 security policy to be enforced
	EgressV4SecurityPolicyId []*_go.ObjectKey `protobuf:"bytes,12,rep,name=egress_v4_security_policy_id,json=egressV4SecurityPolicyId,proto3" json:"egress_v4_security_policy_id,omitempty"`
	// identifier of egress IPv6 security policy to be enforced
	EgressV6SecurityPolicyId []*_go.ObjectKey `protobuf:"bytes,13,rep,name=egress_v6_security_policy_id,json=egressV6SecurityPolicyId,proto3" json:"egress_v6_security_policy_id,omitempty"`
	// AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
	// and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
	// traffic with same DOT1Q tag, in which case vnics are identified with
	// their MAC or IP based on the datapath in addition to the DOT1Q tag
	// - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
	//   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
	//   VNIC etc.)
	// - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
	//   all traffic from vnics in that subnet is transmitted with this encap
	//   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
	//   inherit the subnet's encap)
	// - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
	//   certain tag value but some vnic's in that subnet to have different
	//   DOT1Q encap than that of subnet
	AccessEncap *_go1.Encap `protobuf:"bytes,14,opt,name=access_encap,json=accessEncap,proto3" json:"access_encap,omitempty"`
	// encapped traffic coming with the specified encap from fabric side will be
	// mapped to this subnet and traffic from workloads in this subnet will carry
	// this encap towards the fabric side
	FabricEncap *_go1.Encap `protobuf:"bytes,15,opt,name=fabric_encap,json=fabricEncap,proto3" json:"fabric_encap,omitempty"`
	// when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
	// present, subnet needs to be attached to a PF/VF (aka. host interface),
	// HostIf is list of such VF/PFs
	HostInterfaceId []*_go.ObjectKey `protobuf:"bytes,16,rep,name=host_interface_id,json=hostInterfaceId,proto3" json:"host_interface_id,omitempty"`
	// ToS field is 1 byte value that is populated in the DSCP field of IPv4 outer
	// header or in the Traffic Class field of IPv6 outer header, this value, if
	// non-zero, will be used as-is (i.e., not interpreted) during encap time by
	// the dataplane; tunnel objects, if configured with ToS, will override this
	Tos int32 `protobuf:"varint,18,opt,name=tos,proto3" json:"tos,omitempty"`
	// a subnet is marked connected if vnics in this subnet can communicate with
	// external endpoints via routes with some kind of NAT (e.g. 1:1 NAT, NAPT)
	Connected bool `protobuf:"varint,19,opt,name=connected,proto3" json:"connected,omitempty"`
	// default ingress stateful security policy for this subnet
	// if configured, is the 1st policy evaluated before other security policies on a given vnic
	IngressDefaultSgPolicy *_go.ObjectKey `protobuf:"bytes,20,opt,name=ingress_default_sg_policy,json=ingressDefaultSgPolicy,proto3" json:"ingress_default_sg_policy,omitempty"`
	// default egress stateful security policy for this subnet
	// if configured, is the 1st policy evaluated before other security polices on a given vnic
	EgressDefaultSgPolicy *_go.ObjectKey `protobuf:"bytes,21,opt,name=egress_default_sg_policy,json=egressDefaultSgPolicy,proto3" json:"egress_default_sg_policy,omitempty"`
	// remote_subnet, if set, indicates that the subnet does not have any IP
	// mappings in local pod and such subnets are used to program all remote
	// pod IP mappings behind it
	RemoteSubnet bool `protobuf:"varint,22,opt,name=remote_subnet,json=remoteSubnet,proto3" json:"remote_subnet,omitempty"`
}

func (x *SubnetSpec) Reset() {
	*x = SubnetSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subnet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetSpec) ProtoMessage() {}

func (x *SubnetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetSpec.ProtoReflect.Descriptor instead.
func (*SubnetSpec) Descriptor() ([]byte, []int) {
	return file_subnet_proto_rawDescGZIP(), []int{1}
}

func (x *SubnetSpec) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubnetSpec) GetVpcId() *_go.ObjectKey {
	if x != nil {
		return x.VpcId
	}
	return nil
}

func (x *SubnetSpec) GetV4Prefix() *_go1.IPv4Prefix {
	if x != nil {
		return x.V4Prefix
	}
	return nil
}

func (x *SubnetSpec) GetV6Prefix() *_go1.IPv6Prefix {
	if x != nil {
		return x.V6Prefix
	}
	return nil
}

func (x *SubnetSpec) GetIpv4VirtualRouterIp() uint32 {
	if x != nil {
		return x.Ipv4VirtualRouterIp
	}
	return 0
}

func (x *SubnetSpec) GetIpv6VirtualRouterIp() []byte {
	if x != nil {
		return x.Ipv6VirtualRouterIp
	}
	return nil
}

func (x *SubnetSpec) GetVirtualRouterMac() []byte {
	if x != nil {
		return x.VirtualRouterMac
	}
	return nil
}

func (x *SubnetSpec) GetV4RouteTableId() *_go.ObjectKey {
	if x != nil {
		return x.V4RouteTableId
	}
	return nil
}

func (x *SubnetSpec) GetV6RouterTableId() *_go.ObjectKey {
	if x != nil {
		return x.V6RouterTableId
	}
	return nil
}

func (x *SubnetSpec) GetIngessV4SecurityPolicyId() []*_go.ObjectKey {
	if x != nil {
		return x.IngessV4SecurityPolicyId
	}
	return nil
}

func (x *SubnetSpec) GetIngressV6SecurityPolicyId() []*_go.ObjectKey {
	if x != nil {
		return x.IngressV6SecurityPolicyId
	}
	return nil
}

func (x *SubnetSpec) GetEgressV4SecurityPolicyId() []*_go.ObjectKey {
	if x != nil {
		return x.EgressV4SecurityPolicyId
	}
	return nil
}

func (x *SubnetSpec) GetEgressV6SecurityPolicyId() []*_go.ObjectKey {
	if x != nil {
		return x.EgressV6SecurityPolicyId
	}
	return nil
}

func (x *SubnetSpec) GetAccessEncap() *_go1.Encap {
	if x != nil {
		return x.AccessEncap
	}
	return nil
}

func (x *SubnetSpec) GetFabricEncap() *_go1.Encap {
	if x != nil {
		return x.FabricEncap
	}
	return nil
}

func (x *SubnetSpec) GetHostInterfaceId() []*_go.ObjectKey {
	if x != nil {
		return x.HostInterfaceId
	}
	return nil
}

func (x *SubnetSpec) GetTos() int32 {
	if x != nil {
		return x.Tos
	}
	return 0
}

func (x *SubnetSpec) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *SubnetSpec) GetIngressDefaultSgPolicy() *_go.ObjectKey {
	if x != nil {
		return x.IngressDefaultSgPolicy
	}
	return nil
}

func (x *SubnetSpec) GetEgressDefaultSgPolicy() *_go.ObjectKey {
	if x != nil {
		return x.EgressDefaultSgPolicy
	}
	return nil
}

func (x *SubnetSpec) GetRemoteSubnet() bool {
	if x != nil {
		return x.RemoteSubnet
	}
	return false
}

// operational status of the subnet, if any
type SubnetStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subnet's hw handle
	HwIndex int32 `protobuf:"varint,1,opt,name=hw_index,json=hwIndex,proto3" json:"hw_index,omitempty"`
	// number of vnics in the subnet
	VnicCount int32 `protobuf:"varint,2,opt,name=vnic_count,json=vnicCount,proto3" json:"vnic_count,omitempty"`
}

func (x *SubnetStatus) Reset() {
	*x = SubnetStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subnet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetStatus) ProtoMessage() {}

func (x *SubnetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetStatus.ProtoReflect.Descriptor instead.
func (*SubnetStatus) Descriptor() ([]byte, []int) {
	return file_subnet_proto_rawDescGZIP(), []int{2}
}

func (x *SubnetStatus) GetHwIndex() int32 {
	if x != nil {
		return x.HwIndex
	}
	return 0
}

func (x *SubnetStatus) GetVnicCount() int32 {
	if x != nil {
		return x.VnicCount
	}
	return 0
}

var File_subnet_proto protoreflect.FileDescriptor

var file_subnet_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x10,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12,
	0x3e, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa6, 0x0b, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x09, 0x76, 0x34, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69,
	0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x50, 0x76, 0x34, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x08, 0x76,
	0x34, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x4e, 0x0a, 0x09, 0x76, 0x36, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69,
	0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x50, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x08, 0x76,
	0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x70, 0x76, 0x34, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12, 0x33, 0x0a, 0x16,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x69, 0x70,
	0x76, 0x36, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x70, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x12,
	0x47, 0x0a, 0x11, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x76, 0x36, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x0f, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x1c, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x34,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x18, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x73, 0x56,
	0x34, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x64, 0x12, 0x5e, 0x0a, 0x1d, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x36, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x19, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56,
	0x36, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x64, 0x12, 0x5c, 0x0a, 0x1c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x34, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x18, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56, 0x34, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x5c, 0x0a, 0x1c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x36, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x18, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56, 0x36, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x4f, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x4f,
	0x0a, 0x0c, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x52, 0x0b, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x12,
	0x48, 0x0a, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x19, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x67, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x16, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x55, 0x0a, 0x18, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x15, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x48,
	0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x68, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x68, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6e, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76,
	0x6e, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x0a, 0x1e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0b, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_subnet_proto_rawDescOnce sync.Once
	file_subnet_proto_rawDescData = file_subnet_proto_rawDesc
)

func file_subnet_proto_rawDescGZIP() []byte {
	file_subnet_proto_rawDescOnce.Do(func() {
		file_subnet_proto_rawDescData = protoimpl.X.CompressGZIP(file_subnet_proto_rawDescData)
	})
	return file_subnet_proto_rawDescData
}

var file_subnet_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_subnet_proto_goTypes = []interface{}{
	(*Subnet)(nil),          // 0: opi_api.network.cloud.v1alpha1.Subnet
	(*SubnetSpec)(nil),      // 1: opi_api.network.cloud.v1alpha1.SubnetSpec
	(*SubnetStatus)(nil),    // 2: opi_api.network.cloud.v1alpha1.SubnetStatus
	(*_go.ObjectKey)(nil),   // 3: opi_api.common.v1.ObjectKey
	(*_go1.IPv4Prefix)(nil), // 4: opi_api.network.opinetcommon.v1alpha1.IPv4Prefix
	(*_go1.IPv6Prefix)(nil), // 5: opi_api.network.opinetcommon.v1alpha1.IPv6Prefix
	(*_go1.Encap)(nil),      // 6: opi_api.network.opinetcommon.v1alpha1.Encap
}
var file_subnet_proto_depIdxs = []int32{
	1,  // 0: opi_api.network.cloud.v1alpha1.Subnet.spec:type_name -> opi_api.network.cloud.v1alpha1.SubnetSpec
	2,  // 1: opi_api.network.cloud.v1alpha1.Subnet.status:type_name -> opi_api.network.cloud.v1alpha1.SubnetStatus
	3,  // 2: opi_api.network.cloud.v1alpha1.SubnetSpec.id:type_name -> opi_api.common.v1.ObjectKey
	3,  // 3: opi_api.network.cloud.v1alpha1.SubnetSpec.vpc_id:type_name -> opi_api.common.v1.ObjectKey
	4,  // 4: opi_api.network.cloud.v1alpha1.SubnetSpec.v4_prefix:type_name -> opi_api.network.opinetcommon.v1alpha1.IPv4Prefix
	5,  // 5: opi_api.network.cloud.v1alpha1.SubnetSpec.v6_prefix:type_name -> opi_api.network.opinetcommon.v1alpha1.IPv6Prefix
	3,  // 6: opi_api.network.cloud.v1alpha1.SubnetSpec.v4_route_table_id:type_name -> opi_api.common.v1.ObjectKey
	3,  // 7: opi_api.network.cloud.v1alpha1.SubnetSpec.v6_router_table_id:type_name -> opi_api.common.v1.ObjectKey
	3,  // 8: opi_api.network.cloud.v1alpha1.SubnetSpec.ingess_v4_security_policy_id:type_name -> opi_api.common.v1.ObjectKey
	3,  // 9: opi_api.network.cloud.v1alpha1.SubnetSpec.ingress_v6_security_policy_id:type_name -> opi_api.common.v1.ObjectKey
	3,  // 10: opi_api.network.cloud.v1alpha1.SubnetSpec.egress_v4_security_policy_id:type_name -> opi_api.common.v1.ObjectKey
	3,  // 11: opi_api.network.cloud.v1alpha1.SubnetSpec.egress_v6_security_policy_id:type_name -> opi_api.common.v1.ObjectKey
	6,  // 12: opi_api.network.cloud.v1alpha1.SubnetSpec.access_encap:type_name -> opi_api.network.opinetcommon.v1alpha1.Encap
	6,  // 13: opi_api.network.cloud.v1alpha1.SubnetSpec.fabric_encap:type_name -> opi_api.network.opinetcommon.v1alpha1.Encap
	3,  // 14: opi_api.network.cloud.v1alpha1.SubnetSpec.host_interface_id:type_name -> opi_api.common.v1.ObjectKey
	3,  // 15: opi_api.network.cloud.v1alpha1.SubnetSpec.ingress_default_sg_policy:type_name -> opi_api.common.v1.ObjectKey
	3,  // 16: opi_api.network.cloud.v1alpha1.SubnetSpec.egress_default_sg_policy:type_name -> opi_api.common.v1.ObjectKey
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_subnet_proto_init() }
func file_subnet_proto_init() {
	if File_subnet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_subnet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subnet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subnet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_subnet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_subnet_proto_goTypes,
		DependencyIndexes: file_subnet_proto_depIdxs,
		MessageInfos:      file_subnet_proto_msgTypes,
	}.Build()
	File_subnet_proto = out.File
	file_subnet_proto_rawDesc = nil
	file_subnet_proto_goTypes = nil
	file_subnet_proto_depIdxs = nil
}
