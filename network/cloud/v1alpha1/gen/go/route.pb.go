// Copyright (c) 2023 Pensando, AMD Inc, or its subsidiaries.
// protobuf specification for static routing

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: route.proto

package _go

import (
	_go "github.com/opiproject/opi-api/common/v1/gen/go"
	_go1 "github.com/opiproject/opi-api/network/opinetcommon/v1alpha1/gen/go"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RouteClass captures different types/classes of routes
type RouteClass int32

const (
	// unspecified
	RouteClass_ROUTE_CLASS_UNSPECIFIED RouteClass = 0
	// route pointing to Internet
	RouteClass_ROUTE_CLASS_INTERNET RouteClass = 1
	// route used for internal/shared services
	RouteClass_ROUTE_CLASS_SERVICE RouteClass = 2
	// VPC internal routes
	RouteClass_ROUTE_CLASS_VPC RouteClass = 3
)

// Enum value maps for RouteClass.
var (
	RouteClass_name = map[int32]string{
		0: "ROUTE_CLASS_UNSPECIFIED",
		1: "ROUTE_CLASS_INTERNET",
		2: "ROUTE_CLASS_SERVICE",
		3: "ROUTE_CLASS_VPC",
	}
	RouteClass_value = map[string]int32{
		"ROUTE_CLASS_UNSPECIFIED": 0,
		"ROUTE_CLASS_INTERNET":    1,
		"ROUTE_CLASS_SERVICE":     2,
		"ROUTE_CLASS_VPC":         3,
	}
)

func (x RouteClass) Enum() *RouteClass {
	p := new(RouteClass)
	*p = x
	return p
}

func (x RouteClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteClass) Descriptor() protoreflect.EnumDescriptor {
	return file_route_proto_enumTypes[0].Descriptor()
}

func (RouteClass) Type() protoreflect.EnumType {
	return &file_route_proto_enumTypes[0]
}

func (x RouteClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteClass.Descriptor instead.
func (RouteClass) EnumDescriptor() ([]byte, []int) {
	return file_route_proto_rawDescGZIP(), []int{0}
}

// route table object
type RouteTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// route table configuration
	Spec *RouteTableSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// route table status
	Status *RouteTableStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RouteTable) Reset() {
	*x = RouteTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_route_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTable) ProtoMessage() {}

func (x *RouteTable) ProtoReflect() protoreflect.Message {
	mi := &file_route_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTable.ProtoReflect.Descriptor instead.
func (*RouteTable) Descriptor() ([]byte, []int) {
	return file_route_proto_rawDescGZIP(), []int{0}
}

func (x *RouteTable) GetSpec() *RouteTableSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *RouteTable) GetStatus() *RouteTableStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Route table - a prioritized list of static routes/prefixes used for
// forwarding traffic within a VPC, across VPCs or to the outside world
// Individual routes within the route table can be updated using Route object
type RouteTableSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// globally unique route table id
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// IP address family
	Af _go1.IpAf `protobuf:"varint,2,opt,name=af,proto3,enum=opi_api.network.opinetcommon.v1alpha1.IpAf" json:"af,omitempty"`
	// enable or disable priority based routing for the route table
	PriorityEnable bool `protobuf:"varint,3,opt,name=priority_enable,json=priorityEnable,proto3" json:"priority_enable,omitempty"`
	// all routes in this route table
	// In a given route table, same prefix must not appear more than once.
	// For multipathing, use nexthop group instead
	Routes []*RouteInfo `protobuf:"bytes,4,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *RouteTableSpec) Reset() {
	*x = RouteTableSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_route_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteTableSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTableSpec) ProtoMessage() {}

func (x *RouteTableSpec) ProtoReflect() protoreflect.Message {
	mi := &file_route_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTableSpec.ProtoReflect.Descriptor instead.
func (*RouteTableSpec) Descriptor() ([]byte, []int) {
	return file_route_proto_rawDescGZIP(), []int{1}
}

func (x *RouteTableSpec) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RouteTableSpec) GetAf() _go1.IpAf {
	if x != nil {
		return x.Af
	}
	return _go1.IpAf(0)
}

func (x *RouteTableSpec) GetPriorityEnable() bool {
	if x != nil {
		return x.PriorityEnable
	}
	return false
}

func (x *RouteTableSpec) GetRoutes() []*RouteInfo {
	if x != nil {
		return x.Routes
	}
	return nil
}

// route configuration information
type RouteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique id of this specific route (used for specific route update)
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// route attributes
	Attrs *RouteAttrs `protobuf:"bytes,2,opt,name=attrs,proto3" json:"attrs,omitempty"`
}

func (x *RouteInfo) Reset() {
	*x = RouteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_route_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteInfo) ProtoMessage() {}

func (x *RouteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_route_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteInfo.ProtoReflect.Descriptor instead.
func (*RouteInfo) Descriptor() ([]byte, []int) {
	return file_route_proto_rawDescGZIP(), []int{2}
}

func (x *RouteInfo) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RouteInfo) GetAttrs() *RouteAttrs {
	if x != nil {
		return x.Attrs
	}
	return nil
}

// operational status of the route table, if any
type RouteTableStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// no. of VPCs using the route table
	VpcCount int32 `protobuf:"varint,1,opt,name=vpc_count,json=vpcCount,proto3" json:"vpc_count,omitempty"`
	// no. of subnets using the route table
	SubnetCount int32 `protobuf:"varint,2,opt,name=subnet_count,json=subnetCount,proto3" json:"subnet_count,omitempty"`
	// no. of vnics using the route table
	VnicCount int32 `protobuf:"varint,3,opt,name=vnic_count,json=vnicCount,proto3" json:"vnic_count,omitempty"`
	// route table pool
	PoolId int32 `protobuf:"varint,4,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// route table h/w index
	HwIdx int32 `protobuf:"varint,5,opt,name=hw_idx,json=hwIdx,proto3" json:"hw_idx,omitempty"`
	// route table base memory address
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: this is the actual 64bit memory address. --)
	RouteTableBaseAddress uint64 `protobuf:"varint,6,opt,name=route_table_base_address,json=routeTableBaseAddress,proto3" json:"route_table_base_address,omitempty"`
	// LPM memory block id
	HwLpmBlockIdx int32 `protobuf:"varint,7,opt,name=hw_lpm_block_idx,json=hwLpmBlockIdx,proto3" json:"hw_lpm_block_idx,omitempty"`
	// LPM info block id that contains rewrites
	HwLpmRewriteBlockIdx int32 `protobuf:"varint,8,opt,name=hw_lpm_rewrite_block_idx,json=hwLpmRewriteBlockIdx,proto3" json:"hw_lpm_rewrite_block_idx,omitempty"`
}

func (x *RouteTableStatus) Reset() {
	*x = RouteTableStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_route_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteTableStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTableStatus) ProtoMessage() {}

func (x *RouteTableStatus) ProtoReflect() protoreflect.Message {
	mi := &file_route_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTableStatus.ProtoReflect.Descriptor instead.
func (*RouteTableStatus) Descriptor() ([]byte, []int) {
	return file_route_proto_rawDescGZIP(), []int{3}
}

func (x *RouteTableStatus) GetVpcCount() int32 {
	if x != nil {
		return x.VpcCount
	}
	return 0
}

func (x *RouteTableStatus) GetSubnetCount() int32 {
	if x != nil {
		return x.SubnetCount
	}
	return 0
}

func (x *RouteTableStatus) GetVnicCount() int32 {
	if x != nil {
		return x.VnicCount
	}
	return 0
}

func (x *RouteTableStatus) GetPoolId() int32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *RouteTableStatus) GetHwIdx() int32 {
	if x != nil {
		return x.HwIdx
	}
	return 0
}

func (x *RouteTableStatus) GetRouteTableBaseAddress() uint64 {
	if x != nil {
		return x.RouteTableBaseAddress
	}
	return 0
}

func (x *RouteTableStatus) GetHwLpmBlockIdx() int32 {
	if x != nil {
		return x.HwLpmBlockIdx
	}
	return 0
}

func (x *RouteTableStatus) GetHwLpmRewriteBlockIdx() int32 {
	if x != nil {
		return x.HwLpmRewriteBlockIdx
	}
	return 0
}

// route attributes
//
// Routes types: static route, internet route, service routes, etc.
// Priority of a route allows the cloud controller to manage the routes
// based on arbitrary algorithm (vs longest prefix match)
// Route class priority can be used to order the lookup of certain class
// of routes. If priority is same (or not specified for any routes),
// then the lookup is done according to the longest prefix match.
type RouteAttrs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP prefix
	Prefix *_go1.IPPrefix `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// class of the route
	RouteClass RouteClass `protobuf:"varint,2,opt,name=route_class,json=routeClass,proto3,enum=opi_api.network.cloud.v1alpha1.RouteClass" json:"route_class,omitempty"`
	// priority of the route class this route belongs to (range: 0-15)
	// route table must have set priority_enable to true for this to take effect
	ClassPriority int32 `protobuf:"varint,3,opt,name=class_priority,json=classPriority,proto3" json:"class_priority,omitempty"`
	// priority of the route within the class. Priority behavior:
	// - lower the numerical value, higher the priority in the datapath
	// - a route table MUST have either all the routes with priority set or no
	//   priority set on all the routes
	// - if multiple routes have same priority, route with longest prefix length
	//    will take effect
	// - if no priority value is set (i.e. 0) then route priority is computed as
	//    128 - <prefix length>, so longer prefixes will have higher precedence
	//    over shorter ones giving regular LPM semantics
	// - Priority attribute on the route is used only when PriorityEn is set to
	//    true on the corresponding routing table
	// - range:0-1023
	Priority int32 `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	// next hop information
	//
	// Types that are assignable to Nh:
	//	*RouteAttrs_OverlayNhIpInfo
	//	*RouteAttrs_NexthopId
	//	*RouteAttrs_NhGroupId
	//	*RouteAttrs_VpcNhInfo
	//	*RouteAttrs_TunnelId
	//	*RouteAttrs_RouteTableId
	//	*RouteAttrs_EvalMapping
	Nh isRouteAttrs_Nh `protobuf_oneof:"nh"`
	// the ToS value (range: 0-255) configured on the route will override ToS configuration
	// in vpc, subnet and tunnel objects
	Tos int32 `protobuf:"varint,12,opt,name=tos,proto3" json:"tos,omitempty"`
	// override encap for this route (from what is programmed for a subnet or a vpc)
	Encap *_go1.Encap `protobuf:"bytes,13,opt,name=encap,proto3" json:"encap,omitempty"`
	// when a custom overlay MAC is provided in the route configuration, the MAC
	// address is used as inner DMAC in the (VxLAN) encapped packet
	OverlayMac []byte `protobuf:"bytes,14,opt,name=overlay_mac,json=overlayMac,proto3" json:"overlay_mac,omitempty"`
}

func (x *RouteAttrs) Reset() {
	*x = RouteAttrs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_route_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteAttrs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteAttrs) ProtoMessage() {}

func (x *RouteAttrs) ProtoReflect() protoreflect.Message {
	mi := &file_route_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteAttrs.ProtoReflect.Descriptor instead.
func (*RouteAttrs) Descriptor() ([]byte, []int) {
	return file_route_proto_rawDescGZIP(), []int{4}
}

func (x *RouteAttrs) GetPrefix() *_go1.IPPrefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *RouteAttrs) GetRouteClass() RouteClass {
	if x != nil {
		return x.RouteClass
	}
	return RouteClass_ROUTE_CLASS_UNSPECIFIED
}

func (x *RouteAttrs) GetClassPriority() int32 {
	if x != nil {
		return x.ClassPriority
	}
	return 0
}

func (x *RouteAttrs) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (m *RouteAttrs) GetNh() isRouteAttrs_Nh {
	if m != nil {
		return m.Nh
	}
	return nil
}

func (x *RouteAttrs) GetOverlayNhIpInfo() *OverlayNextHopIPInfo {
	if x, ok := x.GetNh().(*RouteAttrs_OverlayNhIpInfo); ok {
		return x.OverlayNhIpInfo
	}
	return nil
}

func (x *RouteAttrs) GetNexthopId() *_go.ObjectKey {
	if x, ok := x.GetNh().(*RouteAttrs_NexthopId); ok {
		return x.NexthopId
	}
	return nil
}

func (x *RouteAttrs) GetNhGroupId() *_go.ObjectKey {
	if x, ok := x.GetNh().(*RouteAttrs_NhGroupId); ok {
		return x.NhGroupId
	}
	return nil
}

func (x *RouteAttrs) GetVpcNhInfo() *VPCPeerNhInfo {
	if x, ok := x.GetNh().(*RouteAttrs_VpcNhInfo); ok {
		return x.VpcNhInfo
	}
	return nil
}

func (x *RouteAttrs) GetTunnelId() *_go.ObjectKey {
	if x, ok := x.GetNh().(*RouteAttrs_TunnelId); ok {
		return x.TunnelId
	}
	return nil
}

func (x *RouteAttrs) GetRouteTableId() *_go.ObjectKey {
	if x, ok := x.GetNh().(*RouteAttrs_RouteTableId); ok {
		return x.RouteTableId
	}
	return nil
}

func (x *RouteAttrs) GetEvalMapping() bool {
	if x, ok := x.GetNh().(*RouteAttrs_EvalMapping); ok {
		return x.EvalMapping
	}
	return false
}

func (x *RouteAttrs) GetTos() int32 {
	if x != nil {
		return x.Tos
	}
	return 0
}

func (x *RouteAttrs) GetEncap() *_go1.Encap {
	if x != nil {
		return x.Encap
	}
	return nil
}

func (x *RouteAttrs) GetOverlayMac() []byte {
	if x != nil {
		return x.OverlayMac
	}
	return nil
}

type isRouteAttrs_Nh interface {
	isRouteAttrs_Nh()
}

type RouteAttrs_OverlayNhIpInfo struct {
	// overlay IP nexthop information for this route
	OverlayNhIpInfo *OverlayNextHopIPInfo `protobuf:"bytes,5,opt,name=overlay_nh_ip_info,json=overlayNhIpInfo,proto3,oneof"`
}

type RouteAttrs_NexthopId struct {
	// nexthop for this route
	NexthopId *_go.ObjectKey `protobuf:"bytes,6,opt,name=nexthop_id,json=nexthopId,proto3,oneof"`
}

type RouteAttrs_NhGroupId struct {
	// ECMP nexthop for this route
	NhGroupId *_go.ObjectKey `protobuf:"bytes,7,opt,name=nh_group_id,json=nhGroupId,proto3,oneof"`
}

type RouteAttrs_VpcNhInfo struct {
	// peer's VPC nexthop info, in case of VPC peering
	VpcNhInfo *VPCPeerNhInfo `protobuf:"bytes,8,opt,name=vpc_nh_info,json=vpcNhInfo,proto3,oneof"`
}

type RouteAttrs_TunnelId struct {
	// Tunnel this prefix is pointing to
	TunnelId *_go.ObjectKey `protobuf:"bytes,9,opt,name=tunnel_id,json=tunnelId,proto3,oneof"`
}

type RouteAttrs_RouteTableId struct {
	// if next hop is a route table: used to create exceptions in hierarchal
	// routing. next hop can't point to same route table (causing rout lookup loop)
	RouteTableId *_go.ObjectKey `protobuf:"bytes,10,opt,name=route_table_id,json=routeTableId,proto3,oneof"`
}

type RouteAttrs_EvalMapping struct {
	// EvalMapping is set in cases where mapping lookup result will provided the
	// forwarding information, this is useful to punch holes in some routes
	// that encompass sub-prefixes that require different forwarding behavior
	// e.g.
	// 10.1.0.0/16 -> Tunnel-X
	// 10.1.1.0/24 -> EvalMapping
	EvalMapping bool `protobuf:"varint,11,opt,name=eval_mapping,json=evalMapping,proto3,oneof"`
}

func (*RouteAttrs_OverlayNhIpInfo) isRouteAttrs_Nh() {}

func (*RouteAttrs_NexthopId) isRouteAttrs_Nh() {}

func (*RouteAttrs_NhGroupId) isRouteAttrs_Nh() {}

func (*RouteAttrs_VpcNhInfo) isRouteAttrs_Nh() {}

func (*RouteAttrs_TunnelId) isRouteAttrs_Nh() {}

func (*RouteAttrs_RouteTableId) isRouteAttrs_Nh() {}

func (*RouteAttrs_EvalMapping) isRouteAttrs_Nh() {}

// Inter VPC routing: if a route in a route table points to VPCPeerNhInfo
// that contains peer VPC's uuid and the route table, to launch a
// lookup in the route table.
type VPCPeerNhInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// peer VPC's id
	VpcId *_go.ObjectKey `protobuf:"bytes,1,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// route table id in the peer VPC
	RouteTableId *_go.ObjectKey `protobuf:"bytes,2,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
}

func (x *VPCPeerNhInfo) Reset() {
	*x = VPCPeerNhInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_route_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPCPeerNhInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPCPeerNhInfo) ProtoMessage() {}

func (x *VPCPeerNhInfo) ProtoReflect() protoreflect.Message {
	mi := &file_route_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPCPeerNhInfo.ProtoReflect.Descriptor instead.
func (*VPCPeerNhInfo) Descriptor() ([]byte, []int) {
	return file_route_proto_rawDescGZIP(), []int{5}
}

func (x *VPCPeerNhInfo) GetVpcId() *_go.ObjectKey {
	if x != nil {
		return x.VpcId
	}
	return nil
}

func (x *VPCPeerNhInfo) GetRouteTableId() *_go.ObjectKey {
	if x != nil {
		return x.RouteTableId
	}
	return nil
}

// OverlayNextHopIPInfo captures list of overlay IP destinations for a given
// route. Overlay destination could be the destinaton TEP or a service node
// - when more than one overlay nexthop IP is configured, one of them is
//   picked based on the flow hash
// - when more than one overlay nexthop IP is configured, IPv4 is considered
// - if VPCId is not set, the lookups will continue in the current VPC
type OverlayNextHopIPInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// overlay nexthop IP list
	NexthopIp []*_go1.IPAddress `protobuf:"bytes,1,rep,name=nexthop_ip,json=nexthopIp,proto3" json:"nexthop_ip,omitempty"`
	// overlay MAC (DMAC inner) to be used when corresponding
	// to the overlay nexthop IP picked
	NexthopMac [][]byte `protobuf:"bytes,2,rep,name=nexthop_mac,json=nexthopMac,proto3" json:"nexthop_mac,omitempty"`
	// if next hop IP (e.g. a mapping entry) is in another/peer VPC, vpc_id is set
	VpcId *_go.ObjectKey `protobuf:"bytes,3,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
}

func (x *OverlayNextHopIPInfo) Reset() {
	*x = OverlayNextHopIPInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_route_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlayNextHopIPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlayNextHopIPInfo) ProtoMessage() {}

func (x *OverlayNextHopIPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_route_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlayNextHopIPInfo.ProtoReflect.Descriptor instead.
func (*OverlayNextHopIPInfo) Descriptor() ([]byte, []int) {
	return file_route_proto_rawDescGZIP(), []int{6}
}

func (x *OverlayNextHopIPInfo) GetNexthopIp() []*_go1.IPAddress {
	if x != nil {
		return x.NexthopIp
	}
	return nil
}

func (x *OverlayNextHopIPInfo) GetNexthopMac() [][]byte {
	if x != nil {
		return x.NexthopMac
	}
	return nil
}

func (x *OverlayNextHopIPInfo) GetVpcId() *_go.ObjectKey {
	if x != nil {
		return x.VpcId
	}
	return nil
}

// route identifier
type RouteId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique route id (this id is not scoped under VPC or subnet)
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// route table this route belongs to
	RouteTableId *_go.ObjectKey `protobuf:"bytes,2,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
}

func (x *RouteId) Reset() {
	*x = RouteId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_route_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteId) ProtoMessage() {}

func (x *RouteId) ProtoReflect() protoreflect.Message {
	mi := &file_route_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteId.ProtoReflect.Descriptor instead.
func (*RouteId) Descriptor() ([]byte, []int) {
	return file_route_proto_rawDescGZIP(), []int{7}
}

func (x *RouteId) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RouteId) GetRouteTableId() *_go.ObjectKey {
	if x != nil {
		return x.RouteTableId
	}
	return nil
}

// route object
type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// route configuration
	Spec *RouteSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// route status
	Status *RouteStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_route_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_route_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_route_proto_rawDescGZIP(), []int{8}
}

func (x *Route) GetSpec() *RouteSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Route) GetStatus() *RouteStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// route specification
type RouteSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// globally unique route table id
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// route table this route belongs to
	RouteTableId *_go.ObjectKey `protobuf:"bytes,2,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
	// route configuration
	Attrs *RouteAttrs `protobuf:"bytes,3,opt,name=attrs,proto3" json:"attrs,omitempty"`
}

func (x *RouteSpec) Reset() {
	*x = RouteSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_route_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSpec) ProtoMessage() {}

func (x *RouteSpec) ProtoReflect() protoreflect.Message {
	mi := &file_route_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSpec.ProtoReflect.Descriptor instead.
func (*RouteSpec) Descriptor() ([]byte, []int) {
	return file_route_proto_rawDescGZIP(), []int{9}
}

func (x *RouteSpec) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RouteSpec) GetRouteTableId() *_go.ObjectKey {
	if x != nil {
		return x.RouteTableId
	}
	return nil
}

func (x *RouteSpec) GetAttrs() *RouteAttrs {
	if x != nil {
		return x.Attrs
	}
	return nil
}

// operational status of the route, if any
type RouteStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RouteStatus) Reset() {
	*x = RouteStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_route_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteStatus) ProtoMessage() {}

func (x *RouteStatus) ProtoReflect() protoreflect.Message {
	mi := &file_route_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteStatus.ProtoReflect.Descriptor instead.
func (*RouteStatus) Descriptor() ([]byte, []int) {
	return file_route_proto_rawDescGZIP(), []int{10}
}

var File_route_proto protoreflect.FileDescriptor

var file_route_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x10, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xe7, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3b, 0x0a, 0x02, 0x61, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x66, 0x52, 0x02, 0x61, 0x66, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x7b, 0x0a, 0x09, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x73,
	0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x70, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x76, 0x70, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x76, 0x6e, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x76, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x68, 0x77, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x68, 0x77, 0x49, 0x64, 0x78, 0x12, 0x37, 0x0a, 0x18, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x68, 0x77, 0x5f, 0x6c, 0x70, 0x6d, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x68, 0x77, 0x4c, 0x70, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x78, 0x12, 0x36, 0x0a,
	0x18, 0x68, 0x77, 0x5f, 0x6c, 0x70, 0x6d, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x68, 0x77, 0x4c, 0x70, 0x6d, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x78, 0x22, 0xbf, 0x06, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x4b, 0x0a,
	0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x63, 0x0a,
	0x12, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x68, 0x5f, 0x69, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x68, 0x49, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x6e, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x76, 0x70, 0x63, 0x5f, 0x6e, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x4e,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x76, 0x70, 0x63, 0x4e, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x65,
	0x76, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x73, 0x12, 0x42, 0x0a, 0x05,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70,
	0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4d, 0x61,
	0x63, 0x42, 0x04, 0x0a, 0x02, 0x6e, 0x68, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x56, 0x50, 0x43, 0x50,
	0x65, 0x65, 0x72, 0x4e, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x06, 0x76, 0x70, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x14, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x0a, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x4d, 0x61, 0x63, 0x12, 0x33, 0x0a,
	0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x76, 0x70, 0x63,
	0x49, 0x64, 0x22, 0x7b, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x8b, 0x01, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbf, 0x01,
	0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x73, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x22,
	0x0d, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x71,
	0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x17,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x56, 0x50, 0x43, 0x10,
	0x03, 0x42, 0x6b, 0x0a, 0x1e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x42, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70,
	0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_route_proto_rawDescOnce sync.Once
	file_route_proto_rawDescData = file_route_proto_rawDesc
)

func file_route_proto_rawDescGZIP() []byte {
	file_route_proto_rawDescOnce.Do(func() {
		file_route_proto_rawDescData = protoimpl.X.CompressGZIP(file_route_proto_rawDescData)
	})
	return file_route_proto_rawDescData
}

var file_route_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_route_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_route_proto_goTypes = []interface{}{
	(RouteClass)(0),              // 0: opi_api.network.cloud.v1alpha1.RouteClass
	(*RouteTable)(nil),           // 1: opi_api.network.cloud.v1alpha1.RouteTable
	(*RouteTableSpec)(nil),       // 2: opi_api.network.cloud.v1alpha1.RouteTableSpec
	(*RouteInfo)(nil),            // 3: opi_api.network.cloud.v1alpha1.RouteInfo
	(*RouteTableStatus)(nil),     // 4: opi_api.network.cloud.v1alpha1.RouteTableStatus
	(*RouteAttrs)(nil),           // 5: opi_api.network.cloud.v1alpha1.RouteAttrs
	(*VPCPeerNhInfo)(nil),        // 6: opi_api.network.cloud.v1alpha1.VPCPeerNhInfo
	(*OverlayNextHopIPInfo)(nil), // 7: opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo
	(*RouteId)(nil),              // 8: opi_api.network.cloud.v1alpha1.RouteId
	(*Route)(nil),                // 9: opi_api.network.cloud.v1alpha1.Route
	(*RouteSpec)(nil),            // 10: opi_api.network.cloud.v1alpha1.RouteSpec
	(*RouteStatus)(nil),          // 11: opi_api.network.cloud.v1alpha1.RouteStatus
	(*_go.ObjectKey)(nil),        // 12: opi_api.common.v1.ObjectKey
	(_go1.IpAf)(0),               // 13: opi_api.network.opinetcommon.v1alpha1.IpAf
	(*_go1.IPPrefix)(nil),        // 14: opi_api.network.opinetcommon.v1alpha1.IPPrefix
	(*_go1.Encap)(nil),           // 15: opi_api.network.opinetcommon.v1alpha1.Encap
	(*_go1.IPAddress)(nil),       // 16: opi_api.network.opinetcommon.v1alpha1.IPAddress
}
var file_route_proto_depIdxs = []int32{
	2,  // 0: opi_api.network.cloud.v1alpha1.RouteTable.spec:type_name -> opi_api.network.cloud.v1alpha1.RouteTableSpec
	4,  // 1: opi_api.network.cloud.v1alpha1.RouteTable.status:type_name -> opi_api.network.cloud.v1alpha1.RouteTableStatus
	12, // 2: opi_api.network.cloud.v1alpha1.RouteTableSpec.id:type_name -> opi_api.common.v1.ObjectKey
	13, // 3: opi_api.network.cloud.v1alpha1.RouteTableSpec.af:type_name -> opi_api.network.opinetcommon.v1alpha1.IpAf
	3,  // 4: opi_api.network.cloud.v1alpha1.RouteTableSpec.routes:type_name -> opi_api.network.cloud.v1alpha1.RouteInfo
	12, // 5: opi_api.network.cloud.v1alpha1.RouteInfo.id:type_name -> opi_api.common.v1.ObjectKey
	5,  // 6: opi_api.network.cloud.v1alpha1.RouteInfo.attrs:type_name -> opi_api.network.cloud.v1alpha1.RouteAttrs
	14, // 7: opi_api.network.cloud.v1alpha1.RouteAttrs.prefix:type_name -> opi_api.network.opinetcommon.v1alpha1.IPPrefix
	0,  // 8: opi_api.network.cloud.v1alpha1.RouteAttrs.route_class:type_name -> opi_api.network.cloud.v1alpha1.RouteClass
	7,  // 9: opi_api.network.cloud.v1alpha1.RouteAttrs.overlay_nh_ip_info:type_name -> opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo
	12, // 10: opi_api.network.cloud.v1alpha1.RouteAttrs.nexthop_id:type_name -> opi_api.common.v1.ObjectKey
	12, // 11: opi_api.network.cloud.v1alpha1.RouteAttrs.nh_group_id:type_name -> opi_api.common.v1.ObjectKey
	6,  // 12: opi_api.network.cloud.v1alpha1.RouteAttrs.vpc_nh_info:type_name -> opi_api.network.cloud.v1alpha1.VPCPeerNhInfo
	12, // 13: opi_api.network.cloud.v1alpha1.RouteAttrs.tunnel_id:type_name -> opi_api.common.v1.ObjectKey
	12, // 14: opi_api.network.cloud.v1alpha1.RouteAttrs.route_table_id:type_name -> opi_api.common.v1.ObjectKey
	15, // 15: opi_api.network.cloud.v1alpha1.RouteAttrs.encap:type_name -> opi_api.network.opinetcommon.v1alpha1.Encap
	12, // 16: opi_api.network.cloud.v1alpha1.VPCPeerNhInfo.vpc_id:type_name -> opi_api.common.v1.ObjectKey
	12, // 17: opi_api.network.cloud.v1alpha1.VPCPeerNhInfo.route_table_id:type_name -> opi_api.common.v1.ObjectKey
	16, // 18: opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo.nexthop_ip:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	12, // 19: opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo.vpc_id:type_name -> opi_api.common.v1.ObjectKey
	12, // 20: opi_api.network.cloud.v1alpha1.RouteId.id:type_name -> opi_api.common.v1.ObjectKey
	12, // 21: opi_api.network.cloud.v1alpha1.RouteId.route_table_id:type_name -> opi_api.common.v1.ObjectKey
	10, // 22: opi_api.network.cloud.v1alpha1.Route.spec:type_name -> opi_api.network.cloud.v1alpha1.RouteSpec
	11, // 23: opi_api.network.cloud.v1alpha1.Route.status:type_name -> opi_api.network.cloud.v1alpha1.RouteStatus
	12, // 24: opi_api.network.cloud.v1alpha1.RouteSpec.id:type_name -> opi_api.common.v1.ObjectKey
	12, // 25: opi_api.network.cloud.v1alpha1.RouteSpec.route_table_id:type_name -> opi_api.common.v1.ObjectKey
	5,  // 26: opi_api.network.cloud.v1alpha1.RouteSpec.attrs:type_name -> opi_api.network.cloud.v1alpha1.RouteAttrs
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_route_proto_init() }
func file_route_proto_init() {
	if File_route_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_route_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_route_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteTableSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_route_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_route_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteTableStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_route_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteAttrs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_route_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPCPeerNhInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_route_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlayNextHopIPInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_route_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_route_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_route_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_route_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_route_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*RouteAttrs_OverlayNhIpInfo)(nil),
		(*RouteAttrs_NexthopId)(nil),
		(*RouteAttrs_NhGroupId)(nil),
		(*RouteAttrs_VpcNhInfo)(nil),
		(*RouteAttrs_TunnelId)(nil),
		(*RouteAttrs_RouteTableId)(nil),
		(*RouteAttrs_EvalMapping)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_route_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_route_proto_goTypes,
		DependencyIndexes: file_route_proto_depIdxs,
		EnumInfos:         file_route_proto_enumTypes,
		MessageInfos:      file_route_proto_msgTypes,
	}.Build()
	File_route_proto = out.File
	file_route_proto_rawDesc = nil
	file_route_proto_goTypes = nil
	file_route_proto_depIdxs = nil
}
