// Copyright (c) 2023 Pensando, AMD Inc, or its subsidiaries.
// protobuf specification for Virtual Private Cloud (VPC) object

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: vpc.proto

package _go

import (
	_go "github.com/opiproject/opi-api/common/v1/gen/go"
	_go1 "github.com/opiproject/opi-api/network/opinetcommon/v1alpha1/gen/go"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// type of the virtual private cloud
type VPCType int32

const (
	// unspecified
	VPCType_VPC_TYPE_UNSPECIFIED VPCType = 0
	// underlay
	VPCType_VPC_TYPE_UNDERLAY VPCType = 1
	// tenant
	VPCType_VPC_TYPE_TENANT VPCType = 2
	// control
	VPCType_VPC_TYPE_CONTROL VPCType = 3
)

// Enum value maps for VPCType.
var (
	VPCType_name = map[int32]string{
		0: "VPC_TYPE_UNSPECIFIED",
		1: "VPC_TYPE_UNDERLAY",
		2: "VPC_TYPE_TENANT",
		3: "VPC_TYPE_CONTROL",
	}
	VPCType_value = map[string]int32{
		"VPC_TYPE_UNSPECIFIED": 0,
		"VPC_TYPE_UNDERLAY":    1,
		"VPC_TYPE_TENANT":      2,
		"VPC_TYPE_CONTROL":     3,
	}
)

func (x VPCType) Enum() *VPCType {
	p := new(VPCType)
	*p = x
	return p
}

func (x VPCType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VPCType) Descriptor() protoreflect.EnumDescriptor {
	return file_vpc_proto_enumTypes[0].Descriptor()
}

func (VPCType) Type() protoreflect.EnumType {
	return &file_vpc_proto_enumTypes[0]
}

func (x VPCType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VPCType.Descriptor instead.
func (VPCType) EnumDescriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{0}
}

// Virtual Private Cloud object
type Vpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// configuration
	Spec *VpcSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// status
	Status *VpcStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Vpc) Reset() {
	*x = Vpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vpc) ProtoMessage() {}

func (x *Vpc) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vpc.ProtoReflect.Descriptor instead.
func (*Vpc) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{0}
}

func (x *Vpc) GetSpec() *VpcSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Vpc) GetStatus() *VpcStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// VpcSpec captures VPC configuration
type VpcSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique key/identifier of VPC
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// type of the VPC
	Type VPCType `protobuf:"varint,2,opt,name=type,proto3,enum=opi_api.network.cloud.v1alpha1.VPCType" json:"type,omitempty"`
	// identifier of the IPv4 route table to be used and this route table is
	// inherited by the subnets under this VPC, if they are created with no route
	// table explicitly
	V4RouteTableId *_go.ObjectKey `protobuf:"bytes,3,opt,name=v4_route_table_id,json=v4RouteTableId,proto3" json:"v4_route_table_id,omitempty"`
	// identifier of the IPv6 route table to be used, if any and this route table
	// is inherited by the subnets under this VPC, if they are created with no
	// route table explicitly
	V6RouteTableId *_go.ObjectKey `protobuf:"bytes,4,opt,name=v6_route_table_id,json=v6RouteTableId,proto3" json:"v6_route_table_id,omitempty"`
	// For various security policies
	// - all vnics in this VPC will inherit the policies configured under VPC
	// - there can be multiple policies per vnic per direction (ingress/egress)
	// - vpc policy in each direction is to be aggregated to contain all rules in a given direction
	// identifier of ingress IPv4 security policy to be enforced
	IngressV4SecurityPolicyId []*_go.ObjectKey `protobuf:"bytes,5,rep,name=ingress_v4_security_policy_id,json=ingressV4SecurityPolicyId,proto3" json:"ingress_v4_security_policy_id,omitempty"`
	// identifier of ingress IPv6 security policy to be enforced
	IngressV6SecurityPolicyId []*_go.ObjectKey `protobuf:"bytes,6,rep,name=ingress_v6_security_policy_id,json=ingressV6SecurityPolicyId,proto3" json:"ingress_v6_security_policy_id,omitempty"`
	// identifier of egress IPv4 security policy to be enforced
	EgressV4SecurityPolicyId []*_go.ObjectKey `protobuf:"bytes,7,rep,name=egress_v4_security_policy_id,json=egressV4SecurityPolicyId,proto3" json:"egress_v4_security_policy_id,omitempty"`
	// identifier of egress IPv6 security policy to be enforced
	EgressV6SecurityPolicyId []*_go.ObjectKey `protobuf:"bytes,8,rep,name=egress_v6_security_policy_id,json=egressV6SecurityPolicyId,proto3" json:"egress_v6_security_policy_id,omitempty"`
	// Virtual Router (VR) MAC address, any packets originated or routed in this
	// VPC carry this MAC as source MAC
	VirtualRouterMac []byte `protobuf:"bytes,9,opt,name=virtual_router_mac,json=virtualRouterMac,proto3" json:"virtual_router_mac,omitempty"`
	// encapped traffic coming with the specified encap from fabric side will be
	// mapped to this VPC. FabricEncap is needed only for VPCs of type VPC_TYPE_TENANT,
	// for other types of VPCs user need not provide fabric encap and will be unused when provided
	FabricEncap *_go1.Encap `protobuf:"bytes,10,opt,name=fabric_encap,json=fabricEncap,proto3" json:"fabric_encap,omitempty"`
	// ToS field is 1 byte value that is populated in the DSCP field of IPv4 outer
	// header or in the Traffic Class field of IPv6 outer header, this value, if
	// non-zero, will be used as-is (i.e., not interpreted) during encap time by
	// the dataplane
	// - subnets under this VPC don't inherit this ToS value, subnets need to
	//   be explicitly configured with same ToS value as that of VPC or
	//   potentially different ToS value of their own
	// - tunnel objects, if configured with tos, will override this tos value
	Tos int32 `protobuf:"varint,13,opt,name=tos,proto3" json:"tos,omitempty"`
}

func (x *VpcSpec) Reset() {
	*x = VpcSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcSpec) ProtoMessage() {}

func (x *VpcSpec) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcSpec.ProtoReflect.Descriptor instead.
func (*VpcSpec) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{1}
}

func (x *VpcSpec) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VpcSpec) GetType() VPCType {
	if x != nil {
		return x.Type
	}
	return VPCType_VPC_TYPE_UNSPECIFIED
}

func (x *VpcSpec) GetV4RouteTableId() *_go.ObjectKey {
	if x != nil {
		return x.V4RouteTableId
	}
	return nil
}

func (x *VpcSpec) GetV6RouteTableId() *_go.ObjectKey {
	if x != nil {
		return x.V6RouteTableId
	}
	return nil
}

func (x *VpcSpec) GetIngressV4SecurityPolicyId() []*_go.ObjectKey {
	if x != nil {
		return x.IngressV4SecurityPolicyId
	}
	return nil
}

func (x *VpcSpec) GetIngressV6SecurityPolicyId() []*_go.ObjectKey {
	if x != nil {
		return x.IngressV6SecurityPolicyId
	}
	return nil
}

func (x *VpcSpec) GetEgressV4SecurityPolicyId() []*_go.ObjectKey {
	if x != nil {
		return x.EgressV4SecurityPolicyId
	}
	return nil
}

func (x *VpcSpec) GetEgressV6SecurityPolicyId() []*_go.ObjectKey {
	if x != nil {
		return x.EgressV6SecurityPolicyId
	}
	return nil
}

func (x *VpcSpec) GetVirtualRouterMac() []byte {
	if x != nil {
		return x.VirtualRouterMac
	}
	return nil
}

func (x *VpcSpec) GetFabricEncap() *_go1.Encap {
	if x != nil {
		return x.FabricEncap
	}
	return nil
}

func (x *VpcSpec) GetTos() int32 {
	if x != nil {
		return x.Tos
	}
	return 0
}

// operational status of a VPC, if any
type VpcStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vpc hw handle
	HwHandle *_go1.HwHandle `protobuf:"bytes,1,opt,name=hw_handle,json=hwHandle,proto3" json:"hw_handle,omitempty"`
	// vpc's layer2 hw handle
	BdHwHandle *_go1.HwHandle `protobuf:"bytes,2,opt,name=bd_hw_handle,json=bdHwHandle,proto3" json:"bd_hw_handle,omitempty"`
	// number of subnets in the vpc
	SubnetCount int32 `protobuf:"varint,3,opt,name=subnet_count,json=subnetCount,proto3" json:"subnet_count,omitempty"`
}

func (x *VpcStatus) Reset() {
	*x = VpcStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcStatus) ProtoMessage() {}

func (x *VpcStatus) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcStatus.ProtoReflect.Descriptor instead.
func (*VpcStatus) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{2}
}

func (x *VpcStatus) GetHwHandle() *_go1.HwHandle {
	if x != nil {
		return x.HwHandle
	}
	return nil
}

func (x *VpcStatus) GetBdHwHandle() *_go1.HwHandle {
	if x != nil {
		return x.BdHwHandle
	}
	return nil
}

func (x *VpcStatus) GetSubnetCount() int32 {
	if x != nil {
		return x.SubnetCount
	}
	return 0
}

// Virtual Private Cloud Peer (aka. pairing) object
type VPCPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// configuration
	Spec *VPCPeerSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// status
	Status *VPCPeerStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *VPCPeer) Reset() {
	*x = VPCPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPCPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPCPeer) ProtoMessage() {}

func (x *VPCPeer) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPCPeer.ProtoReflect.Descriptor instead.
func (*VPCPeer) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{3}
}

func (x *VPCPeer) GetSpec() *VPCPeerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *VPCPeer) GetStatus() *VPCPeerStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// VPCPeerSpec captures configuration for a VPC peering relation
// Given two vpcs, only one vpc peering objects needs to be created as
// the vpc peering is commutative relation
type VPCPeerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique id/key idenitifying this VPC peering relation
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// unique key/identifier of VPC1
	Vpc1Id *_go.ObjectKey `protobuf:"bytes,2,opt,name=vpc1_id,json=vpc1Id,proto3" json:"vpc1_id,omitempty"`
	// unique key/identifier of VPC2
	Vpc2Id *_go.ObjectKey `protobuf:"bytes,3,opt,name=vpc2_id,json=vpc2Id,proto3" json:"vpc2_id,omitempty"`
}

func (x *VPCPeerSpec) Reset() {
	*x = VPCPeerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPCPeerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPCPeerSpec) ProtoMessage() {}

func (x *VPCPeerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPCPeerSpec.ProtoReflect.Descriptor instead.
func (*VPCPeerSpec) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{4}
}

func (x *VPCPeerSpec) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VPCPeerSpec) GetVpc1Id() *_go.ObjectKey {
	if x != nil {
		return x.Vpc1Id
	}
	return nil
}

func (x *VPCPeerSpec) GetVpc2Id() *_go.ObjectKey {
	if x != nil {
		return x.Vpc2Id
	}
	return nil
}

// operational status of a VPC peering, if any
type VPCPeerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VPCPeerStatus) Reset() {
	*x = VPCPeerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPCPeerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPCPeerStatus) ProtoMessage() {}

func (x *VPCPeerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPCPeerStatus.ProtoReflect.Descriptor instead.
func (*VPCPeerStatus) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{5}
}

var File_vpc_proto protoreflect.FileDescriptor

var file_vpc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x76, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x10, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x85, 0x01, 0x0a, 0x03, 0x56, 0x70, 0x63, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x93, 0x06, 0x0a, 0x07, 0x56, 0x70,
	0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x56, 0x50, 0x43, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x47, 0x0a, 0x11, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x76, 0x34, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x76, 0x36, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x0e, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x5e, 0x0a, 0x1d, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x34,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x19, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x56, 0x34, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x5e, 0x0a, 0x1d, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x36,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x19, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x56, 0x36, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x5c, 0x0a, 0x1c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x34, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x18, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56, 0x34,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64,
	0x12, 0x5c, 0x0a, 0x1c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x36, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x18, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56, 0x36, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x12, 0x4f, 0x0a, 0x0c,
	0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x52, 0x0b, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x73, 0x22,
	0xcf, 0x01, 0x0a, 0x09, 0x56, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a,
	0x09, 0x68, 0x77, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x77, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x08, 0x68, 0x77, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x62,
	0x64, 0x5f, 0x68, 0x77, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x77, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x0a, 0x62, 0x64, 0x48, 0x77, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x91, 0x01, 0x0a, 0x07, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x12, 0x3f, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x50, 0x43,
	0x50, 0x65, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x45,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x31, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x06, 0x76, 0x70, 0x63, 0x31, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x70,
	0x63, 0x32, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x76, 0x70, 0x63, 0x32, 0x49,
	0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2a, 0x65, 0x0a, 0x07, 0x56, 0x50, 0x43, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x56, 0x50, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x50, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x56, 0x50, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4e, 0x41, 0x4e,
	0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x50, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x03, 0x42, 0x69, 0x0a, 0x1e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x08, 0x56, 0x70, 0x63,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f,
	0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vpc_proto_rawDescOnce sync.Once
	file_vpc_proto_rawDescData = file_vpc_proto_rawDesc
)

func file_vpc_proto_rawDescGZIP() []byte {
	file_vpc_proto_rawDescOnce.Do(func() {
		file_vpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_vpc_proto_rawDescData)
	})
	return file_vpc_proto_rawDescData
}

var file_vpc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vpc_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_vpc_proto_goTypes = []interface{}{
	(VPCType)(0),          // 0: opi_api.network.cloud.v1alpha1.VPCType
	(*Vpc)(nil),           // 1: opi_api.network.cloud.v1alpha1.Vpc
	(*VpcSpec)(nil),       // 2: opi_api.network.cloud.v1alpha1.VpcSpec
	(*VpcStatus)(nil),     // 3: opi_api.network.cloud.v1alpha1.VpcStatus
	(*VPCPeer)(nil),       // 4: opi_api.network.cloud.v1alpha1.VPCPeer
	(*VPCPeerSpec)(nil),   // 5: opi_api.network.cloud.v1alpha1.VPCPeerSpec
	(*VPCPeerStatus)(nil), // 6: opi_api.network.cloud.v1alpha1.VPCPeerStatus
	(*_go.ObjectKey)(nil), // 7: opi_api.common.v1.ObjectKey
	(*_go1.Encap)(nil),    // 8: opi_api.network.opinetcommon.v1alpha1.Encap
	(*_go1.HwHandle)(nil), // 9: opi_api.network.opinetcommon.v1alpha1.HwHandle
}
var file_vpc_proto_depIdxs = []int32{
	2,  // 0: opi_api.network.cloud.v1alpha1.Vpc.spec:type_name -> opi_api.network.cloud.v1alpha1.VpcSpec
	3,  // 1: opi_api.network.cloud.v1alpha1.Vpc.status:type_name -> opi_api.network.cloud.v1alpha1.VpcStatus
	7,  // 2: opi_api.network.cloud.v1alpha1.VpcSpec.id:type_name -> opi_api.common.v1.ObjectKey
	0,  // 3: opi_api.network.cloud.v1alpha1.VpcSpec.type:type_name -> opi_api.network.cloud.v1alpha1.VPCType
	7,  // 4: opi_api.network.cloud.v1alpha1.VpcSpec.v4_route_table_id:type_name -> opi_api.common.v1.ObjectKey
	7,  // 5: opi_api.network.cloud.v1alpha1.VpcSpec.v6_route_table_id:type_name -> opi_api.common.v1.ObjectKey
	7,  // 6: opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v4_security_policy_id:type_name -> opi_api.common.v1.ObjectKey
	7,  // 7: opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v6_security_policy_id:type_name -> opi_api.common.v1.ObjectKey
	7,  // 8: opi_api.network.cloud.v1alpha1.VpcSpec.egress_v4_security_policy_id:type_name -> opi_api.common.v1.ObjectKey
	7,  // 9: opi_api.network.cloud.v1alpha1.VpcSpec.egress_v6_security_policy_id:type_name -> opi_api.common.v1.ObjectKey
	8,  // 10: opi_api.network.cloud.v1alpha1.VpcSpec.fabric_encap:type_name -> opi_api.network.opinetcommon.v1alpha1.Encap
	9,  // 11: opi_api.network.cloud.v1alpha1.VpcStatus.hw_handle:type_name -> opi_api.network.opinetcommon.v1alpha1.HwHandle
	9,  // 12: opi_api.network.cloud.v1alpha1.VpcStatus.bd_hw_handle:type_name -> opi_api.network.opinetcommon.v1alpha1.HwHandle
	5,  // 13: opi_api.network.cloud.v1alpha1.VPCPeer.spec:type_name -> opi_api.network.cloud.v1alpha1.VPCPeerSpec
	6,  // 14: opi_api.network.cloud.v1alpha1.VPCPeer.status:type_name -> opi_api.network.cloud.v1alpha1.VPCPeerStatus
	7,  // 15: opi_api.network.cloud.v1alpha1.VPCPeerSpec.id:type_name -> opi_api.common.v1.ObjectKey
	7,  // 16: opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc1_id:type_name -> opi_api.common.v1.ObjectKey
	7,  // 17: opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc2_id:type_name -> opi_api.common.v1.ObjectKey
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_vpc_proto_init() }
func file_vpc_proto_init() {
	if File_vpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPCPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPCPeerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPCPeerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vpc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vpc_proto_goTypes,
		DependencyIndexes: file_vpc_proto_depIdxs,
		EnumInfos:         file_vpc_proto_enumTypes,
		MessageInfos:      file_vpc_proto_msgTypes,
	}.Build()
	File_vpc_proto = out.File
	file_vpc_proto_rawDesc = nil
	file_vpc_proto_goTypes = nil
	file_vpc_proto_depIdxs = nil
}
