// Copyright (c) 2023 Pensando, AMD Inc, or its subsidiaries.
// protobuf specification for port related objects

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: port.proto

package _go

import (
	_go "github.com/opiproject/opi-api/common/v1/gen/go"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PortAdminState specifies if the port is enabled (admin up) or disabled (admin down)
type PortAdminState int32

const (
	// port admin state not configured
	PortAdminState_PORT_ADMIN_STATE_UNSPECIFIED PortAdminState = 0
	// port is admin disabled
	PortAdminState_PORT_ADMIN_STATE_DOWN PortAdminState = 1
	// port is admin enabled
	PortAdminState_PORT_ADMIN_STATE_UP PortAdminState = 2
)

// Enum value maps for PortAdminState.
var (
	PortAdminState_name = map[int32]string{
		0: "PORT_ADMIN_STATE_UNSPECIFIED",
		1: "PORT_ADMIN_STATE_DOWN",
		2: "PORT_ADMIN_STATE_UP",
	}
	PortAdminState_value = map[string]int32{
		"PORT_ADMIN_STATE_UNSPECIFIED": 0,
		"PORT_ADMIN_STATE_DOWN":        1,
		"PORT_ADMIN_STATE_UP":          2,
	}
)

func (x PortAdminState) Enum() *PortAdminState {
	p := new(PortAdminState)
	*p = x
	return p
}

func (x PortAdminState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortAdminState) Descriptor() protoreflect.EnumDescriptor {
	return file_port_proto_enumTypes[0].Descriptor()
}

func (PortAdminState) Type() protoreflect.EnumType {
	return &file_port_proto_enumTypes[0]
}

func (x PortAdminState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortAdminState.Descriptor instead.
func (PortAdminState) EnumDescriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{0}
}

// port's transceiver state
type PortXcvrState int32

const (
	// state - removed
	PortXcvrState_PORT_XCVR_STATE_UNSPECIFIED PortXcvrState = 0
	// state - inserted
	PortXcvrState_PORT_XCVR_STATE_INSERTED PortXcvrState = 1
	// state - pending
	PortXcvrState_PORT_XCVR_STATE_PENDING PortXcvrState = 2
	// state - sprom read
	PortXcvrState_PORT_XCVR_STATE_SPROM_READ PortXcvrState = 3
	// state - sprom read error
	PortXcvrState_PORT_XCVR_STATE_SPROM_READ_ERR PortXcvrState = 4
)

// Enum value maps for PortXcvrState.
var (
	PortXcvrState_name = map[int32]string{
		0: "PORT_XCVR_STATE_UNSPECIFIED",
		1: "PORT_XCVR_STATE_INSERTED",
		2: "PORT_XCVR_STATE_PENDING",
		3: "PORT_XCVR_STATE_SPROM_READ",
		4: "PORT_XCVR_STATE_SPROM_READ_ERR",
	}
	PortXcvrState_value = map[string]int32{
		"PORT_XCVR_STATE_UNSPECIFIED":    0,
		"PORT_XCVR_STATE_INSERTED":       1,
		"PORT_XCVR_STATE_PENDING":        2,
		"PORT_XCVR_STATE_SPROM_READ":     3,
		"PORT_XCVR_STATE_SPROM_READ_ERR": 4,
	}
)

func (x PortXcvrState) Enum() *PortXcvrState {
	p := new(PortXcvrState)
	*p = x
	return p
}

func (x PortXcvrState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortXcvrState) Descriptor() protoreflect.EnumDescriptor {
	return file_port_proto_enumTypes[1].Descriptor()
}

func (PortXcvrState) Type() protoreflect.EnumType {
	return &file_port_proto_enumTypes[1]
}

func (x PortXcvrState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortXcvrState.Descriptor instead.
func (PortXcvrState) EnumDescriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{1}
}

// transciever product id
type PortXcvrPid int32

const (
	// unspecified
	PortXcvrPid_PORT_XCVR_PID_UNSPECIFIED PortXcvrPid = 0
	// Copper
	// QSFP 100G CR4
	PortXcvrPid_PORT_XCVR_PID_QSFP_100G_CR4 PortXcvrPid = 1
	// QSFP 40G CR4
	PortXcvrPid_PORT_XCVR_PID_QSFP_40GBASE_CR4 PortXcvrPid = 2
	// 25G CR S
	PortXcvrPid_PORT_XCVR_PID_SFP_25GBASE_CR_S PortXcvrPid = 3
	// 25G CR L
	PortXcvrPid_PORT_XCVR_PID_SFP_25GBASE_CR_L PortXcvrPid = 4
	// 25G CR N
	PortXcvrPid_PORT_XCVR_PID_SFP_25GBASE_CR_N PortXcvrPid = 5
	// 50G CR2 FC
	PortXcvrPid_PORT_XCVR_PID_QSFP_50G_CR2_FC PortXcvrPid = 6
	// 50G CR2
	PortXcvrPid_PORT_XCVR_PID_QSFP_50G_CR2 PortXcvrPid = 7
	// 200G CR4
	PortXcvrPid_PORT_XCVR_PID_QSFP_200G_CR4 PortXcvrPid = 8
	// Fiber
	// QSFP 100G AOC
	PortXcvrPid_PORT_XCVR_PID_QSFP_100G_AOC PortXcvrPid = 50
	// QSFP 100G ACC
	PortXcvrPid_PORT_XCVR_PID_QSFP_100G_ACC PortXcvrPid = 51
	// QSFP 100G SR4
	PortXcvrPid_PORT_XCVR_PID_QSFP_100G_SR4 PortXcvrPid = 52
	// QSFP 100G LR4
	PortXcvrPid_PORT_XCVR_PID_QSFP_100G_LR4 PortXcvrPid = 53
	// QSFP 100G ER4
	PortXcvrPid_PORT_XCVR_PID_QSFP_100G_ER4 PortXcvrPid = 54
	// QSFP 40G ER4
	PortXcvrPid_PORT_XCVR_PID_QSFP_40GBASE_ER4 PortXcvrPid = 55
	// QSFP 40G SR4
	PortXcvrPid_PORT_XCVR_PID_QSFP_40GBASE_SR4 PortXcvrPid = 56
	// QSFP 40G LR4
	PortXcvrPid_PORT_XCVR_PID_QSFP_40GBASE_LR4 PortXcvrPid = 57
	// QSFP 40G AOC
	PortXcvrPid_PORT_XCVR_PID_QSFP_40GBASE_AOC PortXcvrPid = 58
	// SFP 25G SR
	PortXcvrPid_PORT_XCVR_PID_SFP_25GBASE_SR PortXcvrPid = 59
	// SFP 25G LR
	PortXcvrPid_PORT_XCVR_PID_SFP_25GBASE_LR PortXcvrPid = 60
	// SFP 25G ER
	PortXcvrPid_PORT_XCVR_PID_SFP_25GBASE_ER PortXcvrPid = 61
	// SFP 25G AOC
	PortXcvrPid_PORT_XCVR_PID_SFP_25GBASE_AOC PortXcvrPid = 62
	// SFP 10G SR
	PortXcvrPid_PORT_XCVR_PID_SFP_10GBASE_SR PortXcvrPid = 63
	// SFP 10G LR
	PortXcvrPid_PORT_XCVR_PID_SFP_10GBASE_LR PortXcvrPid = 64
	// SFP 10G LRM
	PortXcvrPid_PORT_XCVR_PID_SFP_10GBASE_LRM PortXcvrPid = 65
	// SFP 10G ER
	PortXcvrPid_PORT_XCVR_PID_SFP_10GBASE_ER PortXcvrPid = 66
	// SFP 10G AOC
	PortXcvrPid_PORT_XCVR_PID_SFP_10GBASE_AOC PortXcvrPid = 67
	// SFP 10G CU
	PortXcvrPid_PORT_XCVR_PID_SFP_10GBASE_CU PortXcvrPid = 68
	// QSFP 100G CXWDM4
	PortXcvrPid_PORT_XCVR_PID_QSFP_100G_CWDM4 PortXcvrPid = 69
	// QSFP 100G PSM4
	PortXcvrPid_PORT_XCVR_PID_QSFP_100G_PSM4 PortXcvrPid = 70
	// SFP 125G ACC
	PortXcvrPid_PORT_XCVR_PID_SFP_25GBASE_ACC PortXcvrPid = 71
	// SFP 10G BASE T
	PortXcvrPid_PORT_XCVR_PID_SFP_10GBASE_T PortXcvrPid = 72
	// SFP 100G BASE T
	PortXcvrPid_PORT_XCVR_PID_SFP_1000BASE_T PortXcvrPid = 73
)

// Enum value maps for PortXcvrPid.
var (
	PortXcvrPid_name = map[int32]string{
		0:  "PORT_XCVR_PID_UNSPECIFIED",
		1:  "PORT_XCVR_PID_QSFP_100G_CR4",
		2:  "PORT_XCVR_PID_QSFP_40GBASE_CR4",
		3:  "PORT_XCVR_PID_SFP_25GBASE_CR_S",
		4:  "PORT_XCVR_PID_SFP_25GBASE_CR_L",
		5:  "PORT_XCVR_PID_SFP_25GBASE_CR_N",
		6:  "PORT_XCVR_PID_QSFP_50G_CR2_FC",
		7:  "PORT_XCVR_PID_QSFP_50G_CR2",
		8:  "PORT_XCVR_PID_QSFP_200G_CR4",
		50: "PORT_XCVR_PID_QSFP_100G_AOC",
		51: "PORT_XCVR_PID_QSFP_100G_ACC",
		52: "PORT_XCVR_PID_QSFP_100G_SR4",
		53: "PORT_XCVR_PID_QSFP_100G_LR4",
		54: "PORT_XCVR_PID_QSFP_100G_ER4",
		55: "PORT_XCVR_PID_QSFP_40GBASE_ER4",
		56: "PORT_XCVR_PID_QSFP_40GBASE_SR4",
		57: "PORT_XCVR_PID_QSFP_40GBASE_LR4",
		58: "PORT_XCVR_PID_QSFP_40GBASE_AOC",
		59: "PORT_XCVR_PID_SFP_25GBASE_SR",
		60: "PORT_XCVR_PID_SFP_25GBASE_LR",
		61: "PORT_XCVR_PID_SFP_25GBASE_ER",
		62: "PORT_XCVR_PID_SFP_25GBASE_AOC",
		63: "PORT_XCVR_PID_SFP_10GBASE_SR",
		64: "PORT_XCVR_PID_SFP_10GBASE_LR",
		65: "PORT_XCVR_PID_SFP_10GBASE_LRM",
		66: "PORT_XCVR_PID_SFP_10GBASE_ER",
		67: "PORT_XCVR_PID_SFP_10GBASE_AOC",
		68: "PORT_XCVR_PID_SFP_10GBASE_CU",
		69: "PORT_XCVR_PID_QSFP_100G_CWDM4",
		70: "PORT_XCVR_PID_QSFP_100G_PSM4",
		71: "PORT_XCVR_PID_SFP_25GBASE_ACC",
		72: "PORT_XCVR_PID_SFP_10GBASE_T",
		73: "PORT_XCVR_PID_SFP_1000BASE_T",
	}
	PortXcvrPid_value = map[string]int32{
		"PORT_XCVR_PID_UNSPECIFIED":      0,
		"PORT_XCVR_PID_QSFP_100G_CR4":    1,
		"PORT_XCVR_PID_QSFP_40GBASE_CR4": 2,
		"PORT_XCVR_PID_SFP_25GBASE_CR_S": 3,
		"PORT_XCVR_PID_SFP_25GBASE_CR_L": 4,
		"PORT_XCVR_PID_SFP_25GBASE_CR_N": 5,
		"PORT_XCVR_PID_QSFP_50G_CR2_FC":  6,
		"PORT_XCVR_PID_QSFP_50G_CR2":     7,
		"PORT_XCVR_PID_QSFP_200G_CR4":    8,
		"PORT_XCVR_PID_QSFP_100G_AOC":    50,
		"PORT_XCVR_PID_QSFP_100G_ACC":    51,
		"PORT_XCVR_PID_QSFP_100G_SR4":    52,
		"PORT_XCVR_PID_QSFP_100G_LR4":    53,
		"PORT_XCVR_PID_QSFP_100G_ER4":    54,
		"PORT_XCVR_PID_QSFP_40GBASE_ER4": 55,
		"PORT_XCVR_PID_QSFP_40GBASE_SR4": 56,
		"PORT_XCVR_PID_QSFP_40GBASE_LR4": 57,
		"PORT_XCVR_PID_QSFP_40GBASE_AOC": 58,
		"PORT_XCVR_PID_SFP_25GBASE_SR":   59,
		"PORT_XCVR_PID_SFP_25GBASE_LR":   60,
		"PORT_XCVR_PID_SFP_25GBASE_ER":   61,
		"PORT_XCVR_PID_SFP_25GBASE_AOC":  62,
		"PORT_XCVR_PID_SFP_10GBASE_SR":   63,
		"PORT_XCVR_PID_SFP_10GBASE_LR":   64,
		"PORT_XCVR_PID_SFP_10GBASE_LRM":  65,
		"PORT_XCVR_PID_SFP_10GBASE_ER":   66,
		"PORT_XCVR_PID_SFP_10GBASE_AOC":  67,
		"PORT_XCVR_PID_SFP_10GBASE_CU":   68,
		"PORT_XCVR_PID_QSFP_100G_CWDM4":  69,
		"PORT_XCVR_PID_QSFP_100G_PSM4":   70,
		"PORT_XCVR_PID_SFP_25GBASE_ACC":  71,
		"PORT_XCVR_PID_SFP_10GBASE_T":    72,
		"PORT_XCVR_PID_SFP_1000BASE_T":   73,
	}
)

func (x PortXcvrPid) Enum() *PortXcvrPid {
	p := new(PortXcvrPid)
	*p = x
	return p
}

func (x PortXcvrPid) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortXcvrPid) Descriptor() protoreflect.EnumDescriptor {
	return file_port_proto_enumTypes[2].Descriptor()
}

func (PortXcvrPid) Type() protoreflect.EnumType {
	return &file_port_proto_enumTypes[2]
}

func (x PortXcvrPid) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortXcvrPid.Descriptor instead.
func (PortXcvrPid) EnumDescriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{2}
}

// port's media type
type MediaType int32

const (
	// media not connected
	MediaType_MEDIA_TYPE_UNSPECIFIED MediaType = 0
	// copper cable
	MediaType_MEDIA_TYPE_COPPER MediaType = 1
	// fiber cable
	MediaType_MEDIA_TYPE_FIBER MediaType = 2
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0: "MEDIA_TYPE_UNSPECIFIED",
		1: "MEDIA_TYPE_COPPER",
		2: "MEDIA_TYPE_FIBER",
	}
	MediaType_value = map[string]int32{
		"MEDIA_TYPE_UNSPECIFIED": 0,
		"MEDIA_TYPE_COPPER":      1,
		"MEDIA_TYPE_FIBER":       2,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_port_proto_enumTypes[3].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_port_proto_enumTypes[3]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{3}
}

// PortOperState reflects the current status of the port
type PortOperState int32

const (
	// unknown
	PortOperState_PORT_OPER_STATE_UNSPECIFIED PortOperState = 0
	// port is linked up
	PortOperState_PORT_OPER_STATE_UP PortOperState = 1
	// port link status is down
	PortOperState_PORT_OPER_STATE_DOWN PortOperState = 2
)

// Enum value maps for PortOperState.
var (
	PortOperState_name = map[int32]string{
		0: "PORT_OPER_STATE_UNSPECIFIED",
		1: "PORT_OPER_STATE_UP",
		2: "PORT_OPER_STATE_DOWN",
	}
	PortOperState_value = map[string]int32{
		"PORT_OPER_STATE_UNSPECIFIED": 0,
		"PORT_OPER_STATE_UP":          1,
		"PORT_OPER_STATE_DOWN":        2,
	}
)

func (x PortOperState) Enum() *PortOperState {
	p := new(PortOperState)
	*p = x
	return p
}

func (x PortOperState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortOperState) Descriptor() protoreflect.EnumDescriptor {
	return file_port_proto_enumTypes[4].Descriptor()
}

func (PortOperState) Type() protoreflect.EnumType {
	return &file_port_proto_enumTypes[4]
}

func (x PortOperState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortOperState.Descriptor instead.
func (PortOperState) EnumDescriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{4}
}

// port pause type
type PortPauseType int32

const (
	// Disable Pause
	PortPauseType_PORT_PAUSE_TYPE_UNSPECIFIED PortPauseType = 0
	// Link level pause
	PortPauseType_PORT_PAUSE_TYPE_LINK PortPauseType = 1
	// PFC
	PortPauseType_PORT_PAUSE_TYPE_PFC PortPauseType = 2
)

// Enum value maps for PortPauseType.
var (
	PortPauseType_name = map[int32]string{
		0: "PORT_PAUSE_TYPE_UNSPECIFIED",
		1: "PORT_PAUSE_TYPE_LINK",
		2: "PORT_PAUSE_TYPE_PFC",
	}
	PortPauseType_value = map[string]int32{
		"PORT_PAUSE_TYPE_UNSPECIFIED": 0,
		"PORT_PAUSE_TYPE_LINK":        1,
		"PORT_PAUSE_TYPE_PFC":         2,
	}
)

func (x PortPauseType) Enum() *PortPauseType {
	p := new(PortPauseType)
	*p = x
	return p
}

func (x PortPauseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortPauseType) Descriptor() protoreflect.EnumDescriptor {
	return file_port_proto_enumTypes[5].Descriptor()
}

func (PortPauseType) Type() protoreflect.EnumType {
	return &file_port_proto_enumTypes[5]
}

func (x PortPauseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortPauseType.Descriptor instead.
func (PortPauseType) EnumDescriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{5}
}

// port link state
type PortLinkFSM int32

const (
	// unspecified1
	PortLinkFSM_PORT_LINK_FSM_UNSPECIFIED PortLinkFSM = 0
	// enabled
	PortLinkFSM_PORT_LINK_FSM_ENABLED PortLinkFSM = 1
	// auto negotiation configured
	PortLinkFSM_PORT_LINK_FSM_AN_CFG PortLinkFSM = 2
	// auto negotiation disabled
	PortLinkFSM_PORT_LINK_FSM_AN_DISABLED PortLinkFSM = 3
	// auto negotiation started
	PortLinkFSM_PORT_LINK_FSM_AN_START PortLinkFSM = 4
	// auto negotiation signal detect
	PortLinkFSM_PORT_LINK_FSM_AN_SIGNAL_DETECT PortLinkFSM = 5
	// auto negotiation wait HCD
	PortLinkFSM_PORT_LINK_FSM_AN_WAIT_HCD PortLinkFSM = 6
	// auto negotiation complete
	PortLinkFSM_PORT_LINK_FSM_AN_COMPLETE PortLinkFSM = 7
	// seredes configured
	PortLinkFSM_PORT_LINK_FSM_SERDES_CFG PortLinkFSM = 8
	// serdes ready
	PortLinkFSM_PORT_LINK_FSM_WAIT_SERDES_RDY PortLinkFSM = 9
	// mac configured
	PortLinkFSM_PORT_LINK_FSM_MAC_CFG PortLinkFSM = 10
	// signal detected
	PortLinkFSM_PORT_LINK_FSM_SIGNAL_DETECT PortLinkFSM = 11
	// auto negotiation dfe tuning
	PortLinkFSM_PORT_LINK_FSM_AN_DFE_TUNING PortLinkFSM = 12
	// dfe tuning enabled
	PortLinkFSM_PORT_LINK_FSM_DFE_TUNING PortLinkFSM = 13
	// dfe disabled
	PortLinkFSM_PORT_LINK_FSM_DFE_DISABLED PortLinkFSM = 14
	// dfe start ical
	PortLinkFSM_PORT_LINK_FSM_DFE_START_ICAL PortLinkFSM = 15
	// dfe wait ical
	PortLinkFSM_PORT_LINK_FSM_DFE_WAIT_ICAL PortLinkFSM = 16
	// dfe start pcal
	PortLinkFSM_PORT_LINK_FSM_DFE_START_PCAL PortLinkFSM = 17
	// dfe wait pcal
	PortLinkFSM_PORT_LINK_FSM_DFE_WAIT_PCAL PortLinkFSM = 18
	// dfe pcal continuous
	PortLinkFSM_PORT_LINK_FSM_DFE_PCAL_CONTINUOUS PortLinkFSM = 19
	// clear mac remote faults
	PortLinkFSM_PORT_LINK_FSM_CLEAR_MAC_REMOTE_FAULTS PortLinkFSM = 20
	// wait mac sync
	PortLinkFSM_PORT_LINK_FSM_WAIT_MAC_SYNC PortLinkFSM = 21
	// mac faults cleared
	PortLinkFSM_PORT_LINK_FSM_WAIT_MAC_FAULTS_CLEAR PortLinkFSM = 22
	// wait phy link up
	PortLinkFSM_PORT_LINK_FSM_WAIT_PHY_LINK_UP PortLinkFSM = 23
	// link up
	PortLinkFSM_PORT_LINK_FSM_UP PortLinkFSM = 24
)

// Enum value maps for PortLinkFSM.
var (
	PortLinkFSM_name = map[int32]string{
		0:  "PORT_LINK_FSM_UNSPECIFIED",
		1:  "PORT_LINK_FSM_ENABLED",
		2:  "PORT_LINK_FSM_AN_CFG",
		3:  "PORT_LINK_FSM_AN_DISABLED",
		4:  "PORT_LINK_FSM_AN_START",
		5:  "PORT_LINK_FSM_AN_SIGNAL_DETECT",
		6:  "PORT_LINK_FSM_AN_WAIT_HCD",
		7:  "PORT_LINK_FSM_AN_COMPLETE",
		8:  "PORT_LINK_FSM_SERDES_CFG",
		9:  "PORT_LINK_FSM_WAIT_SERDES_RDY",
		10: "PORT_LINK_FSM_MAC_CFG",
		11: "PORT_LINK_FSM_SIGNAL_DETECT",
		12: "PORT_LINK_FSM_AN_DFE_TUNING",
		13: "PORT_LINK_FSM_DFE_TUNING",
		14: "PORT_LINK_FSM_DFE_DISABLED",
		15: "PORT_LINK_FSM_DFE_START_ICAL",
		16: "PORT_LINK_FSM_DFE_WAIT_ICAL",
		17: "PORT_LINK_FSM_DFE_START_PCAL",
		18: "PORT_LINK_FSM_DFE_WAIT_PCAL",
		19: "PORT_LINK_FSM_DFE_PCAL_CONTINUOUS",
		20: "PORT_LINK_FSM_CLEAR_MAC_REMOTE_FAULTS",
		21: "PORT_LINK_FSM_WAIT_MAC_SYNC",
		22: "PORT_LINK_FSM_WAIT_MAC_FAULTS_CLEAR",
		23: "PORT_LINK_FSM_WAIT_PHY_LINK_UP",
		24: "PORT_LINK_FSM_UP",
	}
	PortLinkFSM_value = map[string]int32{
		"PORT_LINK_FSM_UNSPECIFIED":             0,
		"PORT_LINK_FSM_ENABLED":                 1,
		"PORT_LINK_FSM_AN_CFG":                  2,
		"PORT_LINK_FSM_AN_DISABLED":             3,
		"PORT_LINK_FSM_AN_START":                4,
		"PORT_LINK_FSM_AN_SIGNAL_DETECT":        5,
		"PORT_LINK_FSM_AN_WAIT_HCD":             6,
		"PORT_LINK_FSM_AN_COMPLETE":             7,
		"PORT_LINK_FSM_SERDES_CFG":              8,
		"PORT_LINK_FSM_WAIT_SERDES_RDY":         9,
		"PORT_LINK_FSM_MAC_CFG":                 10,
		"PORT_LINK_FSM_SIGNAL_DETECT":           11,
		"PORT_LINK_FSM_AN_DFE_TUNING":           12,
		"PORT_LINK_FSM_DFE_TUNING":              13,
		"PORT_LINK_FSM_DFE_DISABLED":            14,
		"PORT_LINK_FSM_DFE_START_ICAL":          15,
		"PORT_LINK_FSM_DFE_WAIT_ICAL":           16,
		"PORT_LINK_FSM_DFE_START_PCAL":          17,
		"PORT_LINK_FSM_DFE_WAIT_PCAL":           18,
		"PORT_LINK_FSM_DFE_PCAL_CONTINUOUS":     19,
		"PORT_LINK_FSM_CLEAR_MAC_REMOTE_FAULTS": 20,
		"PORT_LINK_FSM_WAIT_MAC_SYNC":           21,
		"PORT_LINK_FSM_WAIT_MAC_FAULTS_CLEAR":   22,
		"PORT_LINK_FSM_WAIT_PHY_LINK_UP":        23,
		"PORT_LINK_FSM_UP":                      24,
	}
)

func (x PortLinkFSM) Enum() *PortLinkFSM {
	p := new(PortLinkFSM)
	*p = x
	return p
}

func (x PortLinkFSM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortLinkFSM) Descriptor() protoreflect.EnumDescriptor {
	return file_port_proto_enumTypes[6].Descriptor()
}

func (PortLinkFSM) Type() protoreflect.EnumType {
	return &file_port_proto_enumTypes[6]
}

func (x PortLinkFSM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortLinkFSM.Descriptor instead.
func (PortLinkFSM) EnumDescriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{6}
}

// loop back mode configuration
type PortLoopBackMode int32

const (
	// No loopback
	PortLoopBackMode_PORT_LOOP_BACK_MODE_UNSPECIFIED PortLoopBackMode = 0
	// MAC loopback
	PortLoopBackMode_PORT_LOOP_BACK_MODE_MAC PortLoopBackMode = 1
	// PHY/Serdes loopback
	PortLoopBackMode_PORT_LOOP_BACK_MODE_PHY PortLoopBackMode = 2
)

// Enum value maps for PortLoopBackMode.
var (
	PortLoopBackMode_name = map[int32]string{
		0: "PORT_LOOP_BACK_MODE_UNSPECIFIED",
		1: "PORT_LOOP_BACK_MODE_MAC",
		2: "PORT_LOOP_BACK_MODE_PHY",
	}
	PortLoopBackMode_value = map[string]int32{
		"PORT_LOOP_BACK_MODE_UNSPECIFIED": 0,
		"PORT_LOOP_BACK_MODE_MAC":         1,
		"PORT_LOOP_BACK_MODE_PHY":         2,
	}
)

func (x PortLoopBackMode) Enum() *PortLoopBackMode {
	p := new(PortLoopBackMode)
	*p = x
	return p
}

func (x PortLoopBackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortLoopBackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_port_proto_enumTypes[7].Descriptor()
}

func (PortLoopBackMode) Type() protoreflect.EnumType {
	return &file_port_proto_enumTypes[7]
}

func (x PortLoopBackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortLoopBackMode.Descriptor instead.
func (PortLoopBackMode) EnumDescriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{7}
}

// Forward Error Correction
type PortFecType int32

const (
	// Disable FEC
	PortFecType_PORT_FEC_TYPE_UNSPECIFIED PortFecType = 0
	// FireCode (FC) FEC
	PortFecType_PORT_FEC_TYPE_FC PortFecType = 1
	// ReedSolomon (RS) FEC
	PortFecType_PORT_FEC_TYPE_RS PortFecType = 2
)

// Enum value maps for PortFecType.
var (
	PortFecType_name = map[int32]string{
		0: "PORT_FEC_TYPE_UNSPECIFIED",
		1: "PORT_FEC_TYPE_FC",
		2: "PORT_FEC_TYPE_RS",
	}
	PortFecType_value = map[string]int32{
		"PORT_FEC_TYPE_UNSPECIFIED": 0,
		"PORT_FEC_TYPE_FC":          1,
		"PORT_FEC_TYPE_RS":          2,
	}
)

func (x PortFecType) Enum() *PortFecType {
	p := new(PortFecType)
	*p = x
	return p
}

func (x PortFecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortFecType) Descriptor() protoreflect.EnumDescriptor {
	return file_port_proto_enumTypes[8].Descriptor()
}

func (PortFecType) Type() protoreflect.EnumType {
	return &file_port_proto_enumTypes[8]
}

func (x PortFecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortFecType.Descriptor instead.
func (PortFecType) EnumDescriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{8}
}

// port type - date or management
type PortType int32

const (
	// unspecified
	PortType_PORT_TYPE_UNSPECIFIED PortType = 0
	// data ethernet
	PortType_PORT_TYPE_ETH PortType = 1
	// management ethernet
	PortType_PORT_TYPE_ETH_MGMT PortType = 2
)

// Enum value maps for PortType.
var (
	PortType_name = map[int32]string{
		0: "PORT_TYPE_UNSPECIFIED",
		1: "PORT_TYPE_ETH",
		2: "PORT_TYPE_ETH_MGMT",
	}
	PortType_value = map[string]int32{
		"PORT_TYPE_UNSPECIFIED": 0,
		"PORT_TYPE_ETH":         1,
		"PORT_TYPE_ETH_MGMT":    2,
	}
)

func (x PortType) Enum() *PortType {
	p := new(PortType)
	*p = x
	return p
}

func (x PortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortType) Descriptor() protoreflect.EnumDescriptor {
	return file_port_proto_enumTypes[9].Descriptor()
}

func (PortType) Type() protoreflect.EnumType {
	return &file_port_proto_enumTypes[9]
}

func (x PortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortType.Descriptor instead.
func (PortType) EnumDescriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{9}
}

// PortSpeed specifies the speed of the port
type PortSpeed int32

const (
	// unconfigured
	PortSpeed_PORT_SPEED_UNSPECIFIED PortSpeed = 0
	// port speed is 10Mbps
	PortSpeed_PORT_SPEED_10M PortSpeed = 1
	// port speed is 100Mbps
	PortSpeed_PORT_SPEED_100M PortSpeed = 2
	// port speed is 1Gbps
	PortSpeed_PORT_SPEED_1G PortSpeed = 3
	// port speed is 10Gbps
	PortSpeed_PORT_SPEED_10G PortSpeed = 4
	// port speed is 25Gbps
	PortSpeed_PORT_SPEED_25G PortSpeed = 5
	// port speed is 40Gbps
	PortSpeed_PORT_SPEED_40G PortSpeed = 6
	// port speed is 50Gbps
	PortSpeed_PORT_SPEED_50G PortSpeed = 7
	// port speed is 100Gbps
	PortSpeed_PORT_SPEED_100G PortSpeed = 8
	// port speed is 200Gbps
	PortSpeed_PORT_SPEED_200G PortSpeed = 9
	// port speed is 400Gbps
	PortSpeed_PORT_SPEED_400G PortSpeed = 10
)

// Enum value maps for PortSpeed.
var (
	PortSpeed_name = map[int32]string{
		0:  "PORT_SPEED_UNSPECIFIED",
		1:  "PORT_SPEED_10M",
		2:  "PORT_SPEED_100M",
		3:  "PORT_SPEED_1G",
		4:  "PORT_SPEED_10G",
		5:  "PORT_SPEED_25G",
		6:  "PORT_SPEED_40G",
		7:  "PORT_SPEED_50G",
		8:  "PORT_SPEED_100G",
		9:  "PORT_SPEED_200G",
		10: "PORT_SPEED_400G",
	}
	PortSpeed_value = map[string]int32{
		"PORT_SPEED_UNSPECIFIED": 0,
		"PORT_SPEED_10M":         1,
		"PORT_SPEED_100M":        2,
		"PORT_SPEED_1G":          3,
		"PORT_SPEED_10G":         4,
		"PORT_SPEED_25G":         5,
		"PORT_SPEED_40G":         6,
		"PORT_SPEED_50G":         7,
		"PORT_SPEED_100G":        8,
		"PORT_SPEED_200G":        9,
		"PORT_SPEED_400G":        10,
	}
)

func (x PortSpeed) Enum() *PortSpeed {
	p := new(PortSpeed)
	*p = x
	return p
}

func (x PortSpeed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortSpeed) Descriptor() protoreflect.EnumDescriptor {
	return file_port_proto_enumTypes[10].Descriptor()
}

func (PortSpeed) Type() protoreflect.EnumType {
	return &file_port_proto_enumTypes[10]
}

func (x PortSpeed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortSpeed.Descriptor instead.
func (PortSpeed) EnumDescriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{10}
}

// link level configuration
type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// port configuration
	Spec *PortSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// status of port
	Status *PortStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{0}
}

func (x *Port) GetSpec() *PortSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Port) GetStatus() *PortStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// port configuration
type PortSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique port id
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// port number is numerical port identifier starting from 1
	PortNumber int32 `protobuf:"varint,2,opt,name=port_number,json=portNumber,proto3" json:"port_number,omitempty"`
	// port admin state
	AdminState PortAdminState `protobuf:"varint,3,opt,name=admin_state,json=adminState,proto3,enum=opi_api.network.cloud.v1alpha1.PortAdminState" json:"admin_state,omitempty"`
	// type of port
	Type PortType `protobuf:"varint,4,opt,name=type,proto3,enum=opi_api.network.cloud.v1alpha1.PortType" json:"type,omitempty"`
	// operational speed of the port
	Speed PortSpeed `protobuf:"varint,5,opt,name=speed,proto3,enum=opi_api.network.cloud.v1alpha1.PortSpeed" json:"speed,omitempty"`
	// Forward Error Correction (FEC) type - ReedSolomon (RS), Firecode (FC) or None
	FecType PortFecType `protobuf:"varint,6,opt,name=fec_type,json=fecType,proto3,enum=opi_api.network.cloud.v1alpha1.PortFecType" json:"fec_type,omitempty"`
	// set AutoNegEn to true to enable auto negotiation
	AutonegEnable bool `protobuf:"varint,7,opt,name=autoneg_enable,json=autonegEnable,proto3" json:"autoneg_enable,omitempty"`
	// values for link debounce timeout in msec (default = 0 ms)
	DebounceTimeout int32 `protobuf:"varint,8,opt,name=debounce_timeout,json=debounceTimeout,proto3" json:"debounce_timeout,omitempty"`
	// MTU size in bytes (64 to 9216)
	Mtu int32 `protobuf:"varint,9,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// pause type - PFC or Link Level or Disable
	PauseType PortPauseType `protobuf:"varint,10,opt,name=pause_type,json=pauseType,proto3,enum=opi_api.network.cloud.v1alpha1.PortPauseType" json:"pause_type,omitempty"`
	// MAC TX pause enable
	TxPauseEn bool `protobuf:"varint,11,opt,name=tx_pause_en,json=txPauseEn,proto3" json:"tx_pause_en,omitempty"`
	// MAC RX pause enable
	RxPauseEn bool `protobuf:"varint,12,opt,name=rx_pause_en,json=rxPauseEn,proto3" json:"rx_pause_en,omitempty"`
	// port loopback mode - MAC or PHY
	LoopbackMode PortLoopBackMode `protobuf:"varint,13,opt,name=loopback_mode,json=loopbackMode,proto3,enum=opi_api.network.cloud.v1alpha1.PortLoopBackMode" json:"loopback_mode,omitempty"`
	// number of serdes lanes for port (range: 1-4)
	LanesCount int32 `protobuf:"varint,14,opt,name=lanes_count,json=lanesCount,proto3" json:"lanes_count,omitempty"`
}

func (x *PortSpec) Reset() {
	*x = PortSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortSpec) ProtoMessage() {}

func (x *PortSpec) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortSpec.ProtoReflect.Descriptor instead.
func (*PortSpec) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{1}
}

func (x *PortSpec) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PortSpec) GetPortNumber() int32 {
	if x != nil {
		return x.PortNumber
	}
	return 0
}

func (x *PortSpec) GetAdminState() PortAdminState {
	if x != nil {
		return x.AdminState
	}
	return PortAdminState_PORT_ADMIN_STATE_UNSPECIFIED
}

func (x *PortSpec) GetType() PortType {
	if x != nil {
		return x.Type
	}
	return PortType_PORT_TYPE_UNSPECIFIED
}

func (x *PortSpec) GetSpeed() PortSpeed {
	if x != nil {
		return x.Speed
	}
	return PortSpeed_PORT_SPEED_UNSPECIFIED
}

func (x *PortSpec) GetFecType() PortFecType {
	if x != nil {
		return x.FecType
	}
	return PortFecType_PORT_FEC_TYPE_UNSPECIFIED
}

func (x *PortSpec) GetAutonegEnable() bool {
	if x != nil {
		return x.AutonegEnable
	}
	return false
}

func (x *PortSpec) GetDebounceTimeout() int32 {
	if x != nil {
		return x.DebounceTimeout
	}
	return 0
}

func (x *PortSpec) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *PortSpec) GetPauseType() PortPauseType {
	if x != nil {
		return x.PauseType
	}
	return PortPauseType_PORT_PAUSE_TYPE_UNSPECIFIED
}

func (x *PortSpec) GetTxPauseEn() bool {
	if x != nil {
		return x.TxPauseEn
	}
	return false
}

func (x *PortSpec) GetRxPauseEn() bool {
	if x != nil {
		return x.RxPauseEn
	}
	return false
}

func (x *PortSpec) GetLoopbackMode() PortLoopBackMode {
	if x != nil {
		return x.LoopbackMode
	}
	return PortLoopBackMode_PORT_LOOP_BACK_MODE_UNSPECIFIED
}

func (x *PortSpec) GetLanesCount() int32 {
	if x != nil {
		return x.LanesCount
	}
	return 0
}

// port status
type PortStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// encoded interface index
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: interface index is an opaque uint32 value. --)
	IfIndex uint32 `protobuf:"varint,1,opt,name=if_index,json=ifIndex,proto3" json:"if_index,omitempty"`
	// operational link status
	LinkStatus *PortLinkStatus `protobuf:"bytes,2,opt,name=link_status,json=linkStatus,proto3" json:"link_status,omitempty"`
	// transceiver status
	XcvrStatus *PortXcvrStatus `protobuf:"bytes,3,opt,name=xcvr_status,json=xcvrStatus,proto3" json:"xcvr_status,omitempty"`
	// internal port link state machine
	FsmState PortLinkFSM `protobuf:"varint,4,opt,name=fsm_state,json=fsmState,proto3,enum=opi_api.network.cloud.v1alpha1.PortLinkFSM" json:"fsm_state,omitempty"`
	// mac associated with the port
	MacId int32 `protobuf:"varint,5,opt,name=mac_id,json=macId,proto3" json:"mac_id,omitempty"`
	// mac channel associated with the port
	MacCh int32 `protobuf:"varint,6,opt,name=mac_ch,json=macCh,proto3" json:"mac_ch,omitempty"`
	// port link state machine record
	FsmRecord []*PortLinkFSMRecord `protobuf:"bytes,7,rep,name=fsm_record,json=fsmRecord,proto3" json:"fsm_record,omitempty"`
}

func (x *PortStatus) Reset() {
	*x = PortStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStatus) ProtoMessage() {}

func (x *PortStatus) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStatus.ProtoReflect.Descriptor instead.
func (*PortStatus) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{2}
}

func (x *PortStatus) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *PortStatus) GetLinkStatus() *PortLinkStatus {
	if x != nil {
		return x.LinkStatus
	}
	return nil
}

func (x *PortStatus) GetXcvrStatus() *PortXcvrStatus {
	if x != nil {
		return x.XcvrStatus
	}
	return nil
}

func (x *PortStatus) GetFsmState() PortLinkFSM {
	if x != nil {
		return x.FsmState
	}
	return PortLinkFSM_PORT_LINK_FSM_UNSPECIFIED
}

func (x *PortStatus) GetMacId() int32 {
	if x != nil {
		return x.MacId
	}
	return 0
}

func (x *PortStatus) GetMacCh() int32 {
	if x != nil {
		return x.MacCh
	}
	return 0
}

func (x *PortStatus) GetFsmRecord() []*PortLinkFSMRecord {
	if x != nil {
		return x.FsmRecord
	}
	return nil
}

// port link status
type PortLinkStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operational state of port
	OperState PortOperState `protobuf:"varint,1,opt,name=oper_state,json=operState,proto3,enum=opi_api.network.cloud.v1alpha1.PortOperState" json:"oper_state,omitempty"`
	// operational speed of the port
	PortSpeed PortSpeed `protobuf:"varint,2,opt,name=port_speed,json=portSpeed,proto3,enum=opi_api.network.cloud.v1alpha1.PortSpeed" json:"port_speed,omitempty"`
	// operational state of AN
	AutonegEn bool `protobuf:"varint,3,opt,name=autoneg_en,json=autonegEn,proto3" json:"autoneg_en,omitempty"`
	// operational value of NumLanes
	LanesCount int32 `protobuf:"varint,4,opt,name=lanes_count,json=lanesCount,proto3" json:"lanes_count,omitempty"`
	// operational fec type of port
	FecType PortFecType `protobuf:"varint,5,opt,name=fec_type,json=fecType,proto3,enum=opi_api.network.cloud.v1alpha1.PortFecType" json:"fec_type,omitempty"`
}

func (x *PortLinkStatus) Reset() {
	*x = PortLinkStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortLinkStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortLinkStatus) ProtoMessage() {}

func (x *PortLinkStatus) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortLinkStatus.ProtoReflect.Descriptor instead.
func (*PortLinkStatus) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{3}
}

func (x *PortLinkStatus) GetOperState() PortOperState {
	if x != nil {
		return x.OperState
	}
	return PortOperState_PORT_OPER_STATE_UNSPECIFIED
}

func (x *PortLinkStatus) GetPortSpeed() PortSpeed {
	if x != nil {
		return x.PortSpeed
	}
	return PortSpeed_PORT_SPEED_UNSPECIFIED
}

func (x *PortLinkStatus) GetAutonegEn() bool {
	if x != nil {
		return x.AutonegEn
	}
	return false
}

func (x *PortLinkStatus) GetLanesCount() int32 {
	if x != nil {
		return x.LanesCount
	}
	return 0
}

func (x *PortLinkStatus) GetFecType() PortFecType {
	if x != nil {
		return x.FecType
	}
	return PortFecType_PORT_FEC_TYPE_UNSPECIFIED
}

// transciever status
type PortXcvrStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// port number
	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// xcvr state
	State PortXcvrState `protobuf:"varint,2,opt,name=state,proto3,enum=opi_api.network.cloud.v1alpha1.PortXcvrState" json:"state,omitempty"`
	// xcvr pid
	Pid PortXcvrPid `protobuf:"varint,3,opt,name=pid,proto3,enum=opi_api.network.cloud.v1alpha1.PortXcvrPid" json:"pid,omitempty"`
	// media type
	MediaType MediaType `protobuf:"varint,4,opt,name=media_type,json=mediaType,proto3,enum=opi_api.network.cloud.v1alpha1.MediaType" json:"media_type,omitempty"`
	// xcvr sprom
	XcvrSprom []byte `protobuf:"bytes,5,opt,name=xcvr_sprom,json=xcvrSprom,proto3" json:"xcvr_sprom,omitempty"`
	// xcvr vendor name
	Vendorname string `protobuf:"bytes,6,opt,name=vendorname,proto3" json:"vendorname,omitempty"`
	// xcvr vendor oui
	VendorOui string `protobuf:"bytes,7,opt,name=vendor_oui,json=vendorOui,proto3" json:"vendor_oui,omitempty"`
	// encoding type
	EncodingType int32 `protobuf:"varint,8,opt,name=encoding_type,json=encodingType,proto3" json:"encoding_type,omitempty"`
	// xcvr serial number
	SerialNumber string `protobuf:"bytes,9,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// xcvr part number
	PartNumber string `protobuf:"bytes,10,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	// xcvr firmware revision
	Revision string `protobuf:"bytes,11,opt,name=revision,proto3" json:"revision,omitempty"`
	// xcvr temperature
	Temperature int32 `protobuf:"varint,12,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// xcvr warning tempreture
	WarnTemperature int32 `protobuf:"varint,13,opt,name=warn_temperature,json=warnTemperature,proto3" json:"warn_temperature,omitempty"`
	// xcvr alarming tempreture
	AlarmTemperature int32 `protobuf:"varint,14,opt,name=alarm_temperature,json=alarmTemperature,proto3" json:"alarm_temperature,omitempty"`
}

func (x *PortXcvrStatus) Reset() {
	*x = PortXcvrStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortXcvrStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortXcvrStatus) ProtoMessage() {}

func (x *PortXcvrStatus) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortXcvrStatus.ProtoReflect.Descriptor instead.
func (*PortXcvrStatus) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{4}
}

func (x *PortXcvrStatus) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PortXcvrStatus) GetState() PortXcvrState {
	if x != nil {
		return x.State
	}
	return PortXcvrState_PORT_XCVR_STATE_UNSPECIFIED
}

func (x *PortXcvrStatus) GetPid() PortXcvrPid {
	if x != nil {
		return x.Pid
	}
	return PortXcvrPid_PORT_XCVR_PID_UNSPECIFIED
}

func (x *PortXcvrStatus) GetMediaType() MediaType {
	if x != nil {
		return x.MediaType
	}
	return MediaType_MEDIA_TYPE_UNSPECIFIED
}

func (x *PortXcvrStatus) GetXcvrSprom() []byte {
	if x != nil {
		return x.XcvrSprom
	}
	return nil
}

func (x *PortXcvrStatus) GetVendorname() string {
	if x != nil {
		return x.Vendorname
	}
	return ""
}

func (x *PortXcvrStatus) GetVendorOui() string {
	if x != nil {
		return x.VendorOui
	}
	return ""
}

func (x *PortXcvrStatus) GetEncodingType() int32 {
	if x != nil {
		return x.EncodingType
	}
	return 0
}

func (x *PortXcvrStatus) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *PortXcvrStatus) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *PortXcvrStatus) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *PortXcvrStatus) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *PortXcvrStatus) GetWarnTemperature() int32 {
	if x != nil {
		return x.WarnTemperature
	}
	return 0
}

func (x *PortXcvrStatus) GetAlarmTemperature() int32 {
	if x != nil {
		return x.AlarmTemperature
	}
	return 0
}

// port's link state machine transition record
type PortLinkFSMRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// internal port link state machine
	FsmState PortLinkFSM `protobuf:"varint,1,opt,name=fsm_state,json=fsmState,proto3,enum=opi_api.network.cloud.v1alpha1.PortLinkFSM" json:"fsm_state,omitempty"`
	// port state time stamp
	StateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=state_time,json=stateTime,proto3" json:"state_time,omitempty"`
	// port state duration
	Duration string `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *PortLinkFSMRecord) Reset() {
	*x = PortLinkFSMRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortLinkFSMRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortLinkFSMRecord) ProtoMessage() {}

func (x *PortLinkFSMRecord) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortLinkFSMRecord.ProtoReflect.Descriptor instead.
func (*PortLinkFSMRecord) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{5}
}

func (x *PortLinkFSMRecord) GetFsmState() PortLinkFSM {
	if x != nil {
		return x.FsmState
	}
	return PortLinkFSM_PORT_LINK_FSM_UNSPECIFIED
}

func (x *PortLinkFSMRecord) GetStateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StateTime
	}
	return nil
}

func (x *PortLinkFSMRecord) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

var File_port_proto protoreflect.FileDescriptor

var file_port_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x10, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x88, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdb, 0x05, 0x0a, 0x08, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x08, 0x66, 0x65, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x66, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x64, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d,
	0x74, 0x75, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x61, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x6e,
	0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x6e,
	0x12, 0x55, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x6f,
	0x70, 0x42, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x61,
	0x6e, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x93, 0x03, 0x0a, 0x0a, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x66, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x4f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x78, 0x63, 0x76, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x58, 0x63,
	0x76, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x78, 0x63, 0x76, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x66, 0x73, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x46, 0x53, 0x4d, 0x52, 0x08, 0x66, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x61, 0x63, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x63, 0x5f, 0x63, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x63, 0x43, 0x68, 0x12, 0x50, 0x0a, 0x0a,
	0x66, 0x73, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x53, 0x4d, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x09, 0x66, 0x73, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xb0,
	0x02, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x48, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x09,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x6f, 0x6e, 0x65, 0x67, 0x5f, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x45, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c,
	0x61, 0x6e, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x66, 0x65, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x46, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x66, 0x65, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xd1, 0x04, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x58, 0x63, 0x76, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x58, 0x63, 0x76,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a,
	0x03, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x58, 0x63, 0x76, 0x72, 0x50, 0x69, 0x64, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0a,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x78, 0x63, 0x76, 0x72, 0x5f, 0x73,
	0x70, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x78, 0x63, 0x76, 0x72,
	0x53, 0x70, 0x72, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f,
	0x6f, 0x75, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4f, 0x75, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x46, 0x53, 0x4d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x09, 0x66,
	0x73, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x53, 0x4d, 0x52, 0x08, 0x66, 0x73, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x66, 0x0a, 0x0e,
	0x50, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x50, 0x10, 0x02, 0x2a, 0xaf, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x58, 0x63, 0x76,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58,
	0x43, 0x56, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x58, 0x43, 0x56, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43,
	0x56, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0x04, 0x2a, 0xf8, 0x08, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x58,
	0x63, 0x76, 0x72, 0x50, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58,
	0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43,
	0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f, 0x31, 0x30, 0x30, 0x47,
	0x5f, 0x43, 0x52, 0x34, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58,
	0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f, 0x34, 0x30, 0x47,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x52, 0x34, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x53, 0x46, 0x50, 0x5f,
	0x32, 0x35, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x52, 0x5f, 0x53, 0x10, 0x03, 0x12, 0x22,
	0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f,
	0x53, 0x46, 0x50, 0x5f, 0x32, 0x35, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x52, 0x5f, 0x4c,
	0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f,
	0x50, 0x49, 0x44, 0x5f, 0x53, 0x46, 0x50, 0x5f, 0x32, 0x35, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x43, 0x52, 0x5f, 0x4e, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58,
	0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f, 0x35, 0x30, 0x47,
	0x5f, 0x43, 0x52, 0x32, 0x5f, 0x46, 0x43, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f,
	0x35, 0x30, 0x47, 0x5f, 0x43, 0x52, 0x32, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f,
	0x32, 0x30, 0x30, 0x47, 0x5f, 0x43, 0x52, 0x34, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x51, 0x53, 0x46, 0x50,
	0x5f, 0x31, 0x30, 0x30, 0x47, 0x5f, 0x41, 0x4f, 0x43, 0x10, 0x32, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x51, 0x53, 0x46,
	0x50, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x10, 0x33, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x51, 0x53,
	0x46, 0x50, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x5f, 0x53, 0x52, 0x34, 0x10, 0x34, 0x12, 0x1f, 0x0a,
	0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x51,
	0x53, 0x46, 0x50, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x5f, 0x4c, 0x52, 0x34, 0x10, 0x35, 0x12, 0x1f,
	0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f,
	0x51, 0x53, 0x46, 0x50, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x5f, 0x45, 0x52, 0x34, 0x10, 0x36, 0x12,
	0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44,
	0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f, 0x34, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x52,
	0x34, 0x10, 0x37, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52,
	0x5f, 0x50, 0x49, 0x44, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f, 0x34, 0x30, 0x47, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x53, 0x52, 0x34, 0x10, 0x38, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f, 0x34, 0x30,
	0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x52, 0x34, 0x10, 0x39, 0x12, 0x22, 0x0a, 0x1e, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x51, 0x53, 0x46,
	0x50, 0x5f, 0x34, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x4f, 0x43, 0x10, 0x3a, 0x12,
	0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44,
	0x5f, 0x53, 0x46, 0x50, 0x5f, 0x32, 0x35, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x52, 0x10,
	0x3b, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50,
	0x49, 0x44, 0x5f, 0x53, 0x46, 0x50, 0x5f, 0x32, 0x35, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c,
	0x52, 0x10, 0x3c, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52,
	0x5f, 0x50, 0x49, 0x44, 0x5f, 0x53, 0x46, 0x50, 0x5f, 0x32, 0x35, 0x47, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x45, 0x52, 0x10, 0x3d, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43,
	0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x53, 0x46, 0x50, 0x5f, 0x32, 0x35, 0x47, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x41, 0x4f, 0x43, 0x10, 0x3e, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x53, 0x46, 0x50, 0x5f, 0x31, 0x30,
	0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x52, 0x10, 0x3f, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x53, 0x46, 0x50, 0x5f,
	0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x52, 0x10, 0x40, 0x12, 0x21, 0x0a, 0x1d,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x53, 0x46,
	0x50, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x52, 0x4d, 0x10, 0x41, 0x12,
	0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44,
	0x5f, 0x53, 0x46, 0x50, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x10,
	0x42, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50,
	0x49, 0x44, 0x5f, 0x53, 0x46, 0x50, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x41,
	0x4f, 0x43, 0x10, 0x43, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56,
	0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x53, 0x46, 0x50, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x43, 0x55, 0x10, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58,
	0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f, 0x31, 0x30, 0x30,
	0x47, 0x5f, 0x43, 0x57, 0x44, 0x4d, 0x34, 0x10, 0x45, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x51, 0x53, 0x46, 0x50, 0x5f,
	0x31, 0x30, 0x30, 0x47, 0x5f, 0x50, 0x53, 0x4d, 0x34, 0x10, 0x46, 0x12, 0x21, 0x0a, 0x1d, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x53, 0x46, 0x50,
	0x5f, 0x32, 0x35, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x10, 0x47, 0x12, 0x1f,
	0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44, 0x5f,
	0x53, 0x46, 0x50, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x10, 0x48, 0x12,
	0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x58, 0x43, 0x56, 0x52, 0x5f, 0x50, 0x49, 0x44,
	0x5f, 0x53, 0x46, 0x50, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x10,
	0x49, 0x2a, 0x54, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x49, 0x42, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x62, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x2a, 0x63, 0x0a, 0x0d, 0x50,
	0x6f, 0x72, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x46, 0x43, 0x10, 0x02,
	0x2a, 0xb6, 0x06, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x53, 0x4d,
	0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x53,
	0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x53, 0x4d,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x41, 0x4e, 0x5f, 0x43,
	0x46, 0x47, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x41, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x04, 0x12,
	0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x53, 0x4d,
	0x5f, 0x41, 0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x41, 0x4e, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x48, 0x43, 0x44,
	0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x46, 0x53, 0x4d, 0x5f, 0x41, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x07, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46,
	0x53, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x44, 0x45, 0x53, 0x5f, 0x43, 0x46, 0x47, 0x10, 0x08, 0x12,
	0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x53, 0x4d,
	0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x44, 0x45, 0x53, 0x5f, 0x52, 0x44, 0x59,
	0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x46, 0x53, 0x4d, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x43, 0x46, 0x47, 0x10, 0x0a, 0x12, 0x1f, 0x0a,
	0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x10, 0x0b, 0x12, 0x1f,
	0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x53, 0x4d, 0x5f,
	0x41, 0x4e, 0x5f, 0x44, 0x46, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x53, 0x4d,
	0x5f, 0x44, 0x46, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x0d, 0x12, 0x1e, 0x0a,
	0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x44,
	0x46, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x20, 0x0a,
	0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x44,
	0x46, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x0f, 0x12,
	0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x53, 0x4d,
	0x5f, 0x44, 0x46, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x10,
	0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x53,
	0x4d, 0x5f, 0x44, 0x46, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x43, 0x41, 0x4c,
	0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x46, 0x53, 0x4d, 0x5f, 0x44, 0x46, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x50, 0x43, 0x41,
	0x4c, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x44, 0x46, 0x45, 0x5f, 0x50, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x10, 0x13, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x43, 0x4c, 0x45, 0x41,
	0x52, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x53, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x43, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x10, 0x15, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x43,
	0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x53, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x16, 0x12,
	0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x46, 0x53, 0x4d,
	0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x55,
	0x50, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x55, 0x50, 0x10, 0x18, 0x2a, 0x71, 0x0a, 0x10, 0x50, 0x6f, 0x72,
	0x74, 0x4c, 0x6f, 0x6f, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x02, 0x2a, 0x58, 0x0a, 0x0b,
	0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x43, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x53, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54,
	0x48, 0x5f, 0x4d, 0x47, 0x4d, 0x54, 0x10, 0x02, 0x2a, 0xf2, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x31, 0x30, 0x4d, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x4d, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x47, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x47,
	0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x32, 0x35, 0x47, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x34, 0x30, 0x47, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x35, 0x30, 0x47, 0x10, 0x07, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x30,
	0x47, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45,
	0x44, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x10, 0x0a, 0x42, 0x6a, 0x0a,
	0x1e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42,
	0x09, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_port_proto_rawDescOnce sync.Once
	file_port_proto_rawDescData = file_port_proto_rawDesc
)

func file_port_proto_rawDescGZIP() []byte {
	file_port_proto_rawDescOnce.Do(func() {
		file_port_proto_rawDescData = protoimpl.X.CompressGZIP(file_port_proto_rawDescData)
	})
	return file_port_proto_rawDescData
}

var file_port_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_port_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_port_proto_goTypes = []interface{}{
	(PortAdminState)(0),           // 0: opi_api.network.cloud.v1alpha1.PortAdminState
	(PortXcvrState)(0),            // 1: opi_api.network.cloud.v1alpha1.PortXcvrState
	(PortXcvrPid)(0),              // 2: opi_api.network.cloud.v1alpha1.PortXcvrPid
	(MediaType)(0),                // 3: opi_api.network.cloud.v1alpha1.MediaType
	(PortOperState)(0),            // 4: opi_api.network.cloud.v1alpha1.PortOperState
	(PortPauseType)(0),            // 5: opi_api.network.cloud.v1alpha1.PortPauseType
	(PortLinkFSM)(0),              // 6: opi_api.network.cloud.v1alpha1.PortLinkFSM
	(PortLoopBackMode)(0),         // 7: opi_api.network.cloud.v1alpha1.PortLoopBackMode
	(PortFecType)(0),              // 8: opi_api.network.cloud.v1alpha1.PortFecType
	(PortType)(0),                 // 9: opi_api.network.cloud.v1alpha1.PortType
	(PortSpeed)(0),                // 10: opi_api.network.cloud.v1alpha1.PortSpeed
	(*Port)(nil),                  // 11: opi_api.network.cloud.v1alpha1.Port
	(*PortSpec)(nil),              // 12: opi_api.network.cloud.v1alpha1.PortSpec
	(*PortStatus)(nil),            // 13: opi_api.network.cloud.v1alpha1.PortStatus
	(*PortLinkStatus)(nil),        // 14: opi_api.network.cloud.v1alpha1.PortLinkStatus
	(*PortXcvrStatus)(nil),        // 15: opi_api.network.cloud.v1alpha1.PortXcvrStatus
	(*PortLinkFSMRecord)(nil),     // 16: opi_api.network.cloud.v1alpha1.PortLinkFSMRecord
	(*_go.ObjectKey)(nil),         // 17: opi_api.common.v1.ObjectKey
	(*timestamppb.Timestamp)(nil), // 18: google.protobuf.Timestamp
}
var file_port_proto_depIdxs = []int32{
	12, // 0: opi_api.network.cloud.v1alpha1.Port.spec:type_name -> opi_api.network.cloud.v1alpha1.PortSpec
	13, // 1: opi_api.network.cloud.v1alpha1.Port.status:type_name -> opi_api.network.cloud.v1alpha1.PortStatus
	17, // 2: opi_api.network.cloud.v1alpha1.PortSpec.id:type_name -> opi_api.common.v1.ObjectKey
	0,  // 3: opi_api.network.cloud.v1alpha1.PortSpec.admin_state:type_name -> opi_api.network.cloud.v1alpha1.PortAdminState
	9,  // 4: opi_api.network.cloud.v1alpha1.PortSpec.type:type_name -> opi_api.network.cloud.v1alpha1.PortType
	10, // 5: opi_api.network.cloud.v1alpha1.PortSpec.speed:type_name -> opi_api.network.cloud.v1alpha1.PortSpeed
	8,  // 6: opi_api.network.cloud.v1alpha1.PortSpec.fec_type:type_name -> opi_api.network.cloud.v1alpha1.PortFecType
	5,  // 7: opi_api.network.cloud.v1alpha1.PortSpec.pause_type:type_name -> opi_api.network.cloud.v1alpha1.PortPauseType
	7,  // 8: opi_api.network.cloud.v1alpha1.PortSpec.loopback_mode:type_name -> opi_api.network.cloud.v1alpha1.PortLoopBackMode
	14, // 9: opi_api.network.cloud.v1alpha1.PortStatus.link_status:type_name -> opi_api.network.cloud.v1alpha1.PortLinkStatus
	15, // 10: opi_api.network.cloud.v1alpha1.PortStatus.xcvr_status:type_name -> opi_api.network.cloud.v1alpha1.PortXcvrStatus
	6,  // 11: opi_api.network.cloud.v1alpha1.PortStatus.fsm_state:type_name -> opi_api.network.cloud.v1alpha1.PortLinkFSM
	16, // 12: opi_api.network.cloud.v1alpha1.PortStatus.fsm_record:type_name -> opi_api.network.cloud.v1alpha1.PortLinkFSMRecord
	4,  // 13: opi_api.network.cloud.v1alpha1.PortLinkStatus.oper_state:type_name -> opi_api.network.cloud.v1alpha1.PortOperState
	10, // 14: opi_api.network.cloud.v1alpha1.PortLinkStatus.port_speed:type_name -> opi_api.network.cloud.v1alpha1.PortSpeed
	8,  // 15: opi_api.network.cloud.v1alpha1.PortLinkStatus.fec_type:type_name -> opi_api.network.cloud.v1alpha1.PortFecType
	1,  // 16: opi_api.network.cloud.v1alpha1.PortXcvrStatus.state:type_name -> opi_api.network.cloud.v1alpha1.PortXcvrState
	2,  // 17: opi_api.network.cloud.v1alpha1.PortXcvrStatus.pid:type_name -> opi_api.network.cloud.v1alpha1.PortXcvrPid
	3,  // 18: opi_api.network.cloud.v1alpha1.PortXcvrStatus.media_type:type_name -> opi_api.network.cloud.v1alpha1.MediaType
	6,  // 19: opi_api.network.cloud.v1alpha1.PortLinkFSMRecord.fsm_state:type_name -> opi_api.network.cloud.v1alpha1.PortLinkFSM
	18, // 20: opi_api.network.cloud.v1alpha1.PortLinkFSMRecord.state_time:type_name -> google.protobuf.Timestamp
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_port_proto_init() }
func file_port_proto_init() {
	if File_port_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_port_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortLinkStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortXcvrStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortLinkFSMRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_port_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_port_proto_goTypes,
		DependencyIndexes: file_port_proto_depIdxs,
		EnumInfos:         file_port_proto_enumTypes,
		MessageInfos:      file_port_proto_msgTypes,
	}.Build()
	File_port_proto = out.File
	file_port_proto_rawDesc = nil
	file_port_proto_goTypes = nil
	file_port_proto_depIdxs = nil
}
