// Copyright (c) 2023 Pensando, AMD Inc, or its subsidiaries.
// protobuf specification for nexthop and nexthop group objects

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: nexthop.proto

package _go

import (
	_go "github.com/opiproject/opi-api/common/v1/gen/go"
	_go1 "github.com/opiproject/opi-api/network/opinetcommon/v1alpha1/gen/go"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// next hop type
type NextHopType int32

const (
	// unspecified
	NextHopType_NEXT_HOP_TYPE_UNSPECIFIED NextHopType = 0
	// ip
	NextHopType_NEXT_HOP_TYPE_IP NextHopType = 1
	// underlay
	NextHopType_NEXT_HOP_TYPE_UNDERLAY NextHopType = 2
	// overlay
	NextHopType_NEXT_HOP_TYPE_OVERLAY NextHopType = 3
)

// Enum value maps for NextHopType.
var (
	NextHopType_name = map[int32]string{
		0: "NEXT_HOP_TYPE_UNSPECIFIED",
		1: "NEXT_HOP_TYPE_IP",
		2: "NEXT_HOP_TYPE_UNDERLAY",
		3: "NEXT_HOP_TYPE_OVERLAY",
	}
	NextHopType_value = map[string]int32{
		"NEXT_HOP_TYPE_UNSPECIFIED": 0,
		"NEXT_HOP_TYPE_IP":          1,
		"NEXT_HOP_TYPE_UNDERLAY":    2,
		"NEXT_HOP_TYPE_OVERLAY":     3,
	}
)

func (x NextHopType) Enum() *NextHopType {
	p := new(NextHopType)
	*p = x
	return p
}

func (x NextHopType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextHopType) Descriptor() protoreflect.EnumDescriptor {
	return file_nexthop_proto_enumTypes[0].Descriptor()
}

func (NextHopType) Type() protoreflect.EnumType {
	return &file_nexthop_proto_enumTypes[0]
}

func (x NextHopType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NextHopType.Descriptor instead.
func (NextHopType) EnumDescriptor() ([]byte, []int) {
	return file_nexthop_proto_rawDescGZIP(), []int{0}
}

// type of the nexthop group
type NextHopGroupType int32

const (
	// unspecified
	NextHopGroupType_NEXT_HOP_GROUP_TYPE_UNSPECIFIED NextHopGroupType = 0
	// ECMP for overlay routes pointing to VTEPs
	NextHopGroupType_NEXT_HOP_GROUP_TYPE_OVERLAY_ECMP NextHopGroupType = 1
	// ECMP for underlay VTEPs pointing to nexthops
	NextHopGroupType_NEXT_HOP_GROUP_TYPE_UNDERLAY_ECMP NextHopGroupType = 2
)

// Enum value maps for NextHopGroupType.
var (
	NextHopGroupType_name = map[int32]string{
		0: "NEXT_HOP_GROUP_TYPE_UNSPECIFIED",
		1: "NEXT_HOP_GROUP_TYPE_OVERLAY_ECMP",
		2: "NEXT_HOP_GROUP_TYPE_UNDERLAY_ECMP",
	}
	NextHopGroupType_value = map[string]int32{
		"NEXT_HOP_GROUP_TYPE_UNSPECIFIED":   0,
		"NEXT_HOP_GROUP_TYPE_OVERLAY_ECMP":  1,
		"NEXT_HOP_GROUP_TYPE_UNDERLAY_ECMP": 2,
	}
)

func (x NextHopGroupType) Enum() *NextHopGroupType {
	p := new(NextHopGroupType)
	*p = x
	return p
}

func (x NextHopGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextHopGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_nexthop_proto_enumTypes[1].Descriptor()
}

func (NextHopGroupType) Type() protoreflect.EnumType {
	return &file_nexthop_proto_enumTypes[1]
}

func (x NextHopGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NextHopGroupType.Descriptor instead.
func (NextHopGroupType) EnumDescriptor() ([]byte, []int) {
	return file_nexthop_proto_rawDescGZIP(), []int{1}
}

// nexthop object
type NextHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// configuration
	Spec *NextHopSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// status
	Status *NextHopStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *NextHop) Reset() {
	*x = NextHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHop) ProtoMessage() {}

func (x *NextHop) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHop.ProtoReflect.Descriptor instead.
func (*NextHop) Descriptor() ([]byte, []int) {
	return file_nexthop_proto_rawDescGZIP(), []int{0}
}

func (x *NextHop) GetSpec() *NextHopSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *NextHop) GetStatus() *NextHopStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// nexthop specification
type NextHopSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique nexthop id
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// nexthop is different for underlay vs. overlay
	//
	// Types that are assignable to Nhinfo:
	//	*NextHopSpec_OverlayNhInfo
	//	*NextHopSpec_UnderlayNhInfo
	//	*NextHopSpec_IpNhInfo
	Nhinfo isNextHopSpec_Nhinfo `protobuf_oneof:"nhinfo"`
}

func (x *NextHopSpec) Reset() {
	*x = NextHopSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopSpec) ProtoMessage() {}

func (x *NextHopSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopSpec.ProtoReflect.Descriptor instead.
func (*NextHopSpec) Descriptor() ([]byte, []int) {
	return file_nexthop_proto_rawDescGZIP(), []int{1}
}

func (x *NextHopSpec) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (m *NextHopSpec) GetNhinfo() isNextHopSpec_Nhinfo {
	if m != nil {
		return m.Nhinfo
	}
	return nil
}

func (x *NextHopSpec) GetOverlayNhInfo() *OverlayNextHopSpec {
	if x, ok := x.GetNhinfo().(*NextHopSpec_OverlayNhInfo); ok {
		return x.OverlayNhInfo
	}
	return nil
}

func (x *NextHopSpec) GetUnderlayNhInfo() *UnderlayNextHopSpec {
	if x, ok := x.GetNhinfo().(*NextHopSpec_UnderlayNhInfo); ok {
		return x.UnderlayNhInfo
	}
	return nil
}

func (x *NextHopSpec) GetIpNhInfo() *IPNextHopSpec {
	if x, ok := x.GetNhinfo().(*NextHopSpec_IpNhInfo); ok {
		return x.IpNhInfo
	}
	return nil
}

type isNextHopSpec_Nhinfo interface {
	isNextHopSpec_Nhinfo()
}

type NextHopSpec_OverlayNhInfo struct {
	// Tunnel/TEP member is used for overlay routing
	OverlayNhInfo *OverlayNextHopSpec `protobuf:"bytes,2,opt,name=overlay_nh_info,json=overlayNhInfo,proto3,oneof"`
}

type NextHopSpec_UnderlayNhInfo struct {
	// Underlay nexthop info is used for a resolved underlay IP
	UnderlayNhInfo *UnderlayNextHopSpec `protobuf:"bytes,3,opt,name=underlay_nh_info,json=underlayNhInfo,proto3,oneof"`
}

type NextHopSpec_IpNhInfo struct {
	// Indirectly resolve to the next hop of another IP
	IpNhInfo *IPNextHopSpec `protobuf:"bytes,4,opt,name=ip_nh_info,json=ipNhInfo,proto3,oneof"`
}

func (*NextHopSpec_OverlayNhInfo) isNextHopSpec_Nhinfo() {}

func (*NextHopSpec_UnderlayNhInfo) isNextHopSpec_Nhinfo() {}

func (*NextHopSpec_IpNhInfo) isNextHopSpec_Nhinfo() {}

// Underlay nexthop information
type UnderlayNextHopSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// L3 interface of this nexthop (outer SMAC, vlan tag and outgoing port
	// are picked from this L3 interface)
	L3InterfaceId *_go.ObjectKey `protobuf:"bytes,1,opt,name=l3_interface_id,json=l3InterfaceId,proto3" json:"l3_interface_id,omitempty"`
	// underlay_nh_mac is the outer DMAC in case of VxLAN fabric
	UnderlayNhMac []byte `protobuf:"bytes,2,opt,name=underlay_nh_mac,json=underlayNhMac,proto3" json:"underlay_nh_mac,omitempty"`
}

func (x *UnderlayNextHopSpec) Reset() {
	*x = UnderlayNextHopSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnderlayNextHopSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnderlayNextHopSpec) ProtoMessage() {}

func (x *UnderlayNextHopSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnderlayNextHopSpec.ProtoReflect.Descriptor instead.
func (*UnderlayNextHopSpec) Descriptor() ([]byte, []int) {
	return file_nexthop_proto_rawDescGZIP(), []int{2}
}

func (x *UnderlayNextHopSpec) GetL3InterfaceId() *_go.ObjectKey {
	if x != nil {
		return x.L3InterfaceId
	}
	return nil
}

func (x *UnderlayNextHopSpec) GetUnderlayNhMac() []byte {
	if x != nil {
		return x.UnderlayNhMac
	}
	return nil
}

// Overlay nexthop information
type OverlayNextHopSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tunnel id
	TunnelId *_go.ObjectKey `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
}

func (x *OverlayNextHopSpec) Reset() {
	*x = OverlayNextHopSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlayNextHopSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlayNextHopSpec) ProtoMessage() {}

func (x *OverlayNextHopSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlayNextHopSpec.ProtoReflect.Descriptor instead.
func (*OverlayNextHopSpec) Descriptor() ([]byte, []int) {
	return file_nexthop_proto_rawDescGZIP(), []int{3}
}

func (x *OverlayNextHopSpec) GetTunnelId() *_go.ObjectKey {
	if x != nil {
		return x.TunnelId
	}
	return nil
}

// IP nexthop information
type IPNextHopSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// egress VRF id
	VpcId *_go.ObjectKey `protobuf:"bytes,1,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// nexthop's IP address
	IpAddress *_go1.IPAddress `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// egress vlan
	Vlan int32 `protobuf:"varint,3,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// mac address
	Mac []byte `protobuf:"bytes,4,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *IPNextHopSpec) Reset() {
	*x = IPNextHopSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPNextHopSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPNextHopSpec) ProtoMessage() {}

func (x *IPNextHopSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPNextHopSpec.ProtoReflect.Descriptor instead.
func (*IPNextHopSpec) Descriptor() ([]byte, []int) {
	return file_nexthop_proto_rawDescGZIP(), []int{4}
}

func (x *IPNextHopSpec) GetVpcId() *_go.ObjectKey {
	if x != nil {
		return x.VpcId
	}
	return nil
}

func (x *IPNextHopSpec) GetIpAddress() *_go1.IPAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *IPNextHopSpec) GetVlan() int32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *IPNextHopSpec) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

// operational status of nexthop, if any
type NextHopStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// nexthop hw id
	HwHandle *_go1.HwHandle `protobuf:"bytes,1,opt,name=hw_handle,json=hwHandle,proto3" json:"hw_handle,omitempty"`
	// next hop info
	//
	// Types that are assignable to Nhinfo:
	//	*NextHopStatus_UnderlayNhInfo
	//	*NextHopStatus_OverlayNhInfo
	Nhinfo isNextHopStatus_Nhinfo `protobuf_oneof:"nhinfo"`
}

func (x *NextHopStatus) Reset() {
	*x = NextHopStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopStatus) ProtoMessage() {}

func (x *NextHopStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopStatus.ProtoReflect.Descriptor instead.
func (*NextHopStatus) Descriptor() ([]byte, []int) {
	return file_nexthop_proto_rawDescGZIP(), []int{5}
}

func (x *NextHopStatus) GetHwHandle() *_go1.HwHandle {
	if x != nil {
		return x.HwHandle
	}
	return nil
}

func (m *NextHopStatus) GetNhinfo() isNextHopStatus_Nhinfo {
	if m != nil {
		return m.Nhinfo
	}
	return nil
}

func (x *NextHopStatus) GetUnderlayNhInfo() *UnderlayNextHopStatus {
	if x, ok := x.GetNhinfo().(*NextHopStatus_UnderlayNhInfo); ok {
		return x.UnderlayNhInfo
	}
	return nil
}

func (x *NextHopStatus) GetOverlayNhInfo() *OverlayNextHopStatus {
	if x, ok := x.GetNhinfo().(*NextHopStatus_OverlayNhInfo); ok {
		return x.OverlayNhInfo
	}
	return nil
}

type isNextHopStatus_Nhinfo interface {
	isNextHopStatus_Nhinfo()
}

type NextHopStatus_UnderlayNhInfo struct {
	// nh is underlay
	UnderlayNhInfo *UnderlayNextHopStatus `protobuf:"bytes,2,opt,name=underlay_nh_info,json=underlayNhInfo,proto3,oneof"`
}

type NextHopStatus_OverlayNhInfo struct {
	// nh is overlay
	OverlayNhInfo *OverlayNextHopStatus `protobuf:"bytes,3,opt,name=overlay_nh_info,json=overlayNhInfo,proto3,oneof"`
}

func (*NextHopStatus_UnderlayNhInfo) isNextHopStatus_Nhinfo() {}

func (*NextHopStatus_OverlayNhInfo) isNextHopStatus_Nhinfo() {}

// underlay next hop status
type UnderlayNextHopStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// port
	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// vlan
	Vlan int32 `protobuf:"varint,2,opt,name=vlan,proto3" json:"vlan,omitempty"`
}

func (x *UnderlayNextHopStatus) Reset() {
	*x = UnderlayNextHopStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnderlayNextHopStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnderlayNextHopStatus) ProtoMessage() {}

func (x *UnderlayNextHopStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnderlayNextHopStatus.ProtoReflect.Descriptor instead.
func (*UnderlayNextHopStatus) Descriptor() ([]byte, []int) {
	return file_nexthop_proto_rawDescGZIP(), []int{6}
}

func (x *UnderlayNextHopStatus) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *UnderlayNextHopStatus) GetVlan() int32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

// overlay next hop status
type OverlayNextHopStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tunnel ip
	TunnelIp *_go1.IPAddress `protobuf:"bytes,1,opt,name=tunnel_ip,json=tunnelIp,proto3" json:"tunnel_ip,omitempty"`
}

func (x *OverlayNextHopStatus) Reset() {
	*x = OverlayNextHopStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlayNextHopStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlayNextHopStatus) ProtoMessage() {}

func (x *OverlayNextHopStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlayNextHopStatus.ProtoReflect.Descriptor instead.
func (*OverlayNextHopStatus) Descriptor() ([]byte, []int) {
	return file_nexthop_proto_rawDescGZIP(), []int{7}
}

func (x *OverlayNextHopStatus) GetTunnelIp() *_go1.IPAddress {
	if x != nil {
		return x.TunnelIp
	}
	return nil
}

// nexthop get request
type NextHopLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Gettype:
	//	*NextHopLookup_Type
	//	*NextHopLookup_NhId
	Gettype isNextHopLookup_Gettype `protobuf_oneof:"gettype"`
}

func (x *NextHopLookup) Reset() {
	*x = NextHopLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopLookup) ProtoMessage() {}

func (x *NextHopLookup) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopLookup.ProtoReflect.Descriptor instead.
func (*NextHopLookup) Descriptor() ([]byte, []int) {
	return file_nexthop_proto_rawDescGZIP(), []int{8}
}

func (m *NextHopLookup) GetGettype() isNextHopLookup_Gettype {
	if m != nil {
		return m.Gettype
	}
	return nil
}

func (x *NextHopLookup) GetType() NextHopType {
	if x, ok := x.GetGettype().(*NextHopLookup_Type); ok {
		return x.Type
	}
	return NextHopType_NEXT_HOP_TYPE_UNSPECIFIED
}

func (x *NextHopLookup) GetNhId() *_go.ObjectKey {
	if x, ok := x.GetGettype().(*NextHopLookup_NhId); ok {
		return x.NhId
	}
	return nil
}

type isNextHopLookup_Gettype interface {
	isNextHopLookup_Gettype()
}

type NextHopLookup_Type struct {
	// nexthop type to be retrieved
	Type NextHopType `protobuf:"varint,1,opt,name=type,proto3,enum=opi_api.network.cloud.v1alpha1.NextHopType,oneof"`
}

type NextHopLookup_NhId struct {
	// nexthop to be retrieved
	NhId *_go.ObjectKey `protobuf:"bytes,2,opt,name=nh_id,json=nhId,proto3,oneof"`
}

func (*NextHopLookup_Type) isNextHopLookup_Gettype() {}

func (*NextHopLookup_NhId) isNextHopLookup_Gettype() {}

// nexthop group object
type NextHopGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// configuration
	Spec *NextHopGroupSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// status
	Status *NextHopGroupStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *NextHopGroup) Reset() {
	*x = NextHopGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopGroup) ProtoMessage() {}

func (x *NextHopGroup) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopGroup.ProtoReflect.Descriptor instead.
func (*NextHopGroup) Descriptor() ([]byte, []int) {
	return file_nexthop_proto_rawDescGZIP(), []int{9}
}

func (x *NextHopGroup) GetSpec() *NextHopGroupSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *NextHopGroup) GetStatus() *NextHopGroupStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// nexthop group specification - a nextgroup consists of bunch of nexthops
type NextHopGroupSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique nexthop group id
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// type of the nexthop
	Type NextHopGroupType `protobuf:"varint,2,opt,name=type,proto3,enum=opi_api.network.cloud.v1alpha1.NextHopGroupType" json:"type,omitempty"`
	// zero or more member nexthops or nexthop groups
	Members []*NextHopSpec `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *NextHopGroupSpec) Reset() {
	*x = NextHopGroupSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopGroupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopGroupSpec) ProtoMessage() {}

func (x *NextHopGroupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopGroupSpec.ProtoReflect.Descriptor instead.
func (*NextHopGroupSpec) Descriptor() ([]byte, []int) {
	return file_nexthop_proto_rawDescGZIP(), []int{10}
}

func (x *NextHopGroupSpec) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NextHopGroupSpec) GetType() NextHopGroupType {
	if x != nil {
		return x.Type
	}
	return NextHopGroupType_NEXT_HOP_GROUP_TYPE_UNSPECIFIED
}

func (x *NextHopGroupSpec) GetMembers() []*NextHopSpec {
	if x != nil {
		return x.Members
	}
	return nil
}

// operational status of nexthop group, if any
type NextHopGroupStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// nexthop group member status
	Members []*NextHopStatus `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	// nexthop group hw id
	HwHandle *_go1.HwHandle `protobuf:"bytes,2,opt,name=hw_handle,json=hwHandle,proto3" json:"hw_handle,omitempty"`
}

func (x *NextHopGroupStatus) Reset() {
	*x = NextHopGroupStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopGroupStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopGroupStatus) ProtoMessage() {}

func (x *NextHopGroupStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopGroupStatus.ProtoReflect.Descriptor instead.
func (*NextHopGroupStatus) Descriptor() ([]byte, []int) {
	return file_nexthop_proto_rawDescGZIP(), []int{11}
}

func (x *NextHopGroupStatus) GetMembers() []*NextHopStatus {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *NextHopGroupStatus) GetHwHandle() *_go1.HwHandle {
	if x != nil {
		return x.HwHandle
	}
	return nil
}

// nexthop group lookup request
type NextHopGroupLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Gettype:
	//	*NextHopGroupLookup_Type
	//	*NextHopGroupLookup_Id
	Gettype isNextHopGroupLookup_Gettype `protobuf_oneof:"gettype"`
}

func (x *NextHopGroupLookup) Reset() {
	*x = NextHopGroupLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopGroupLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopGroupLookup) ProtoMessage() {}

func (x *NextHopGroupLookup) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopGroupLookup.ProtoReflect.Descriptor instead.
func (*NextHopGroupLookup) Descriptor() ([]byte, []int) {
	return file_nexthop_proto_rawDescGZIP(), []int{12}
}

func (m *NextHopGroupLookup) GetGettype() isNextHopGroupLookup_Gettype {
	if m != nil {
		return m.Gettype
	}
	return nil
}

func (x *NextHopGroupLookup) GetType() NextHopGroupType {
	if x, ok := x.GetGettype().(*NextHopGroupLookup_Type); ok {
		return x.Type
	}
	return NextHopGroupType_NEXT_HOP_GROUP_TYPE_UNSPECIFIED
}

func (x *NextHopGroupLookup) GetId() *_go.ObjectKey {
	if x, ok := x.GetGettype().(*NextHopGroupLookup_Id); ok {
		return x.Id
	}
	return nil
}

type isNextHopGroupLookup_Gettype interface {
	isNextHopGroupLookup_Gettype()
}

type NextHopGroupLookup_Type struct {
	// retrieve based on the group type
	Type NextHopGroupType `protobuf:"varint,1,opt,name=type,proto3,enum=opi_api.network.cloud.v1alpha1.NextHopGroupType,oneof"`
}

type NextHopGroupLookup_Id struct {
	// retreive based on nh id
	Id *_go.ObjectKey `protobuf:"bytes,2,opt,name=id,proto3,oneof"`
}

func (*NextHopGroupLookup_Type) isNextHopGroupLookup_Gettype() {}

func (*NextHopGroupLookup_Id) isNextHopGroupLookup_Gettype() {}

var File_nexthop_proto protoreflect.FileDescriptor

var file_nexthop_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a,
	0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x12, 0x3f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd3, 0x02, 0x0a, 0x0b, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5f, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x4e, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x6e, 0x68, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x08, 0x69, 0x70, 0x4e,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x6e, 0x68, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x83, 0x01, 0x0a, 0x13, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x44, 0x0a, 0x0f, 0x6c, 0x33, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0d,
	0x6c, 0x33, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x68, 0x5f, 0x6d, 0x61, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x4e, 0x68, 0x4d, 0x61, 0x63, 0x22, 0x4f, 0x0a, 0x12, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x09, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x0d, 0x49, 0x50, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x4f, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6c,
	0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6d, 0x61, 0x63, 0x22, 0xaa, 0x02, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x09, 0x68, 0x77, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e,
	0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x48, 0x77, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x08, 0x68, 0x77, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x4e, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x4e, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x6e, 0x68, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0x3f, 0x0a, 0x15, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6c,
	0x61, 0x6e, 0x22, 0x65, 0x0a, 0x14, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x70, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x41, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33,
	0x0a, 0x05, 0x6e, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x68, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa0,
	0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x44, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xcd, 0x01, 0x0a, 0x10, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x22, 0xab, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x4c, 0x0a, 0x09, 0x68, 0x77, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x77, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x08, 0x68, 0x77, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22,
	0x97, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x67, 0x65, 0x74, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x79, 0x0a, 0x0b, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x58, 0x54,
	0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x48, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c,
	0x41, 0x59, 0x10, 0x03, 0x2a, 0x84, 0x01, 0x0a, 0x10, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24,
	0x0a, 0x20, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x43,
	0x4d, 0x50, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x52, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x10, 0x02, 0x42, 0x6d, 0x0a, 0x1e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0c, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_nexthop_proto_rawDescOnce sync.Once
	file_nexthop_proto_rawDescData = file_nexthop_proto_rawDesc
)

func file_nexthop_proto_rawDescGZIP() []byte {
	file_nexthop_proto_rawDescOnce.Do(func() {
		file_nexthop_proto_rawDescData = protoimpl.X.CompressGZIP(file_nexthop_proto_rawDescData)
	})
	return file_nexthop_proto_rawDescData
}

var file_nexthop_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_nexthop_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_nexthop_proto_goTypes = []interface{}{
	(NextHopType)(0),              // 0: opi_api.network.cloud.v1alpha1.NextHopType
	(NextHopGroupType)(0),         // 1: opi_api.network.cloud.v1alpha1.NextHopGroupType
	(*NextHop)(nil),               // 2: opi_api.network.cloud.v1alpha1.NextHop
	(*NextHopSpec)(nil),           // 3: opi_api.network.cloud.v1alpha1.NextHopSpec
	(*UnderlayNextHopSpec)(nil),   // 4: opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec
	(*OverlayNextHopSpec)(nil),    // 5: opi_api.network.cloud.v1alpha1.OverlayNextHopSpec
	(*IPNextHopSpec)(nil),         // 6: opi_api.network.cloud.v1alpha1.IPNextHopSpec
	(*NextHopStatus)(nil),         // 7: opi_api.network.cloud.v1alpha1.NextHopStatus
	(*UnderlayNextHopStatus)(nil), // 8: opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus
	(*OverlayNextHopStatus)(nil),  // 9: opi_api.network.cloud.v1alpha1.OverlayNextHopStatus
	(*NextHopLookup)(nil),         // 10: opi_api.network.cloud.v1alpha1.NextHopLookup
	(*NextHopGroup)(nil),          // 11: opi_api.network.cloud.v1alpha1.NextHopGroup
	(*NextHopGroupSpec)(nil),      // 12: opi_api.network.cloud.v1alpha1.NextHopGroupSpec
	(*NextHopGroupStatus)(nil),    // 13: opi_api.network.cloud.v1alpha1.NextHopGroupStatus
	(*NextHopGroupLookup)(nil),    // 14: opi_api.network.cloud.v1alpha1.NextHopGroupLookup
	(*_go.ObjectKey)(nil),         // 15: opi_api.common.v1.ObjectKey
	(*_go1.IPAddress)(nil),        // 16: opi_api.network.opinetcommon.v1alpha1.IPAddress
	(*_go1.HwHandle)(nil),         // 17: opi_api.network.opinetcommon.v1alpha1.HwHandle
}
var file_nexthop_proto_depIdxs = []int32{
	3,  // 0: opi_api.network.cloud.v1alpha1.NextHop.spec:type_name -> opi_api.network.cloud.v1alpha1.NextHopSpec
	7,  // 1: opi_api.network.cloud.v1alpha1.NextHop.status:type_name -> opi_api.network.cloud.v1alpha1.NextHopStatus
	15, // 2: opi_api.network.cloud.v1alpha1.NextHopSpec.id:type_name -> opi_api.common.v1.ObjectKey
	5,  // 3: opi_api.network.cloud.v1alpha1.NextHopSpec.overlay_nh_info:type_name -> opi_api.network.cloud.v1alpha1.OverlayNextHopSpec
	4,  // 4: opi_api.network.cloud.v1alpha1.NextHopSpec.underlay_nh_info:type_name -> opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec
	6,  // 5: opi_api.network.cloud.v1alpha1.NextHopSpec.ip_nh_info:type_name -> opi_api.network.cloud.v1alpha1.IPNextHopSpec
	15, // 6: opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec.l3_interface_id:type_name -> opi_api.common.v1.ObjectKey
	15, // 7: opi_api.network.cloud.v1alpha1.OverlayNextHopSpec.tunnel_id:type_name -> opi_api.common.v1.ObjectKey
	15, // 8: opi_api.network.cloud.v1alpha1.IPNextHopSpec.vpc_id:type_name -> opi_api.common.v1.ObjectKey
	16, // 9: opi_api.network.cloud.v1alpha1.IPNextHopSpec.ip_address:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	17, // 10: opi_api.network.cloud.v1alpha1.NextHopStatus.hw_handle:type_name -> opi_api.network.opinetcommon.v1alpha1.HwHandle
	8,  // 11: opi_api.network.cloud.v1alpha1.NextHopStatus.underlay_nh_info:type_name -> opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus
	9,  // 12: opi_api.network.cloud.v1alpha1.NextHopStatus.overlay_nh_info:type_name -> opi_api.network.cloud.v1alpha1.OverlayNextHopStatus
	16, // 13: opi_api.network.cloud.v1alpha1.OverlayNextHopStatus.tunnel_ip:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	0,  // 14: opi_api.network.cloud.v1alpha1.NextHopLookup.type:type_name -> opi_api.network.cloud.v1alpha1.NextHopType
	15, // 15: opi_api.network.cloud.v1alpha1.NextHopLookup.nh_id:type_name -> opi_api.common.v1.ObjectKey
	12, // 16: opi_api.network.cloud.v1alpha1.NextHopGroup.spec:type_name -> opi_api.network.cloud.v1alpha1.NextHopGroupSpec
	13, // 17: opi_api.network.cloud.v1alpha1.NextHopGroup.status:type_name -> opi_api.network.cloud.v1alpha1.NextHopGroupStatus
	15, // 18: opi_api.network.cloud.v1alpha1.NextHopGroupSpec.id:type_name -> opi_api.common.v1.ObjectKey
	1,  // 19: opi_api.network.cloud.v1alpha1.NextHopGroupSpec.type:type_name -> opi_api.network.cloud.v1alpha1.NextHopGroupType
	3,  // 20: opi_api.network.cloud.v1alpha1.NextHopGroupSpec.members:type_name -> opi_api.network.cloud.v1alpha1.NextHopSpec
	7,  // 21: opi_api.network.cloud.v1alpha1.NextHopGroupStatus.members:type_name -> opi_api.network.cloud.v1alpha1.NextHopStatus
	17, // 22: opi_api.network.cloud.v1alpha1.NextHopGroupStatus.hw_handle:type_name -> opi_api.network.opinetcommon.v1alpha1.HwHandle
	1,  // 23: opi_api.network.cloud.v1alpha1.NextHopGroupLookup.type:type_name -> opi_api.network.cloud.v1alpha1.NextHopGroupType
	15, // 24: opi_api.network.cloud.v1alpha1.NextHopGroupLookup.id:type_name -> opi_api.common.v1.ObjectKey
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_nexthop_proto_init() }
func file_nexthop_proto_init() {
	if File_nexthop_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nexthop_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnderlayNextHopSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlayNextHopSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPNextHopSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnderlayNextHopStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlayNextHopStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopGroupSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopGroupStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopGroupLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nexthop_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*NextHopSpec_OverlayNhInfo)(nil),
		(*NextHopSpec_UnderlayNhInfo)(nil),
		(*NextHopSpec_IpNhInfo)(nil),
	}
	file_nexthop_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*NextHopStatus_UnderlayNhInfo)(nil),
		(*NextHopStatus_OverlayNhInfo)(nil),
	}
	file_nexthop_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*NextHopLookup_Type)(nil),
		(*NextHopLookup_NhId)(nil),
	}
	file_nexthop_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*NextHopGroupLookup_Type)(nil),
		(*NextHopGroupLookup_Id)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nexthop_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nexthop_proto_goTypes,
		DependencyIndexes: file_nexthop_proto_depIdxs,
		EnumInfos:         file_nexthop_proto_enumTypes,
		MessageInfos:      file_nexthop_proto_msgTypes,
	}.Build()
	File_nexthop_proto = out.File
	file_nexthop_proto_rawDesc = nil
	file_nexthop_proto_goTypes = nil
	file_nexthop_proto_depIdxs = nil
}
