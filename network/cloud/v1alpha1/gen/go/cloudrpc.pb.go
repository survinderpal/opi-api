// Copyright (c) 2023 Pensando, AMD Inc, or its subsidiaries.
// device's network configuration

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: cloudrpc.proto

package _go

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Get DeviceCapabilities Request
type GetDeviceCapabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDeviceCapabilitiesRequest) Reset() {
	*x = GetDeviceCapabilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceCapabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceCapabilitiesRequest) ProtoMessage() {}

func (x *GetDeviceCapabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceCapabilitiesRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{0}
}

// Create Device Request
type CreateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// device
	Device *Device `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	// device_id
	DeviceId string `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDeviceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *CreateDeviceRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

// Delete device request
type DeleteDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDeviceRequest) Reset() {
	*x = DeleteDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceRequest) ProtoMessage() {}

func (x *DeleteDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteDeviceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update device request
type UpdateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated device info
	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateDeviceRequest) Reset() {
	*x = UpdateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRequest) ProtoMessage() {}

func (x *UpdateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UpdateDeviceRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List device request
type ListDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListDevicesRequest) Reset() {
	*x = ListDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesRequest) ProtoMessage() {}

func (x *ListDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListDevicesRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{4}
}

func (x *ListDevicesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListDevicesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDevicesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List device response
type ListDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of devices
	Device []*Device `protobuf:"bytes,1,rep,name=device,proto3" json:"device,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDevicesResponse) Reset() {
	*x = ListDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesResponse) ProtoMessage() {}

func (x *ListDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListDevicesResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{5}
}

func (x *ListDevicesResponse) GetDevice() []*Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ListDevicesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get device request
type GetDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDeviceRequest) Reset() {
	*x = GetDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceRequest) ProtoMessage() {}

func (x *GetDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{6}
}

func (x *GetDeviceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update port request
type UpdatePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated port info
	Port *Port `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdatePortRequest) Reset() {
	*x = UpdatePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePortRequest) ProtoMessage() {}

func (x *UpdatePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePortRequest.ProtoReflect.Descriptor instead.
func (*UpdatePortRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePortRequest) GetPort() *Port {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *UpdatePortRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List port request
type ListPortsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListPortsRequest) Reset() {
	*x = ListPortsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPortsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPortsRequest) ProtoMessage() {}

func (x *ListPortsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPortsRequest.ProtoReflect.Descriptor instead.
func (*ListPortsRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{8}
}

func (x *ListPortsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListPortsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPortsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List port response
type ListPortsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of ports
	Port []*Port `protobuf:"bytes,1,rep,name=port,proto3" json:"port,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPortsResponse) Reset() {
	*x = ListPortsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPortsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPortsResponse) ProtoMessage() {}

func (x *ListPortsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPortsResponse.ProtoReflect.Descriptor instead.
func (*ListPortsResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{9}
}

func (x *ListPortsResponse) GetPort() []*Port {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *ListPortsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get port request
type GetPortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPortRequest) Reset() {
	*x = GetPortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortRequest) ProtoMessage() {}

func (x *GetPortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortRequest.ProtoReflect.Descriptor instead.
func (*GetPortRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{10}
}

func (x *GetPortRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create Vnic Request
type CreateVnicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// vnic
	Vnic *Vnic `protobuf:"bytes,2,opt,name=vnic,proto3" json:"vnic,omitempty"`
	// vnic_id
	VnicId string `protobuf:"bytes,3,opt,name=vnic_id,json=vnicId,proto3" json:"vnic_id,omitempty"`
}

func (x *CreateVnicRequest) Reset() {
	*x = CreateVnicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVnicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVnicRequest) ProtoMessage() {}

func (x *CreateVnicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVnicRequest.ProtoReflect.Descriptor instead.
func (*CreateVnicRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{11}
}

func (x *CreateVnicRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateVnicRequest) GetVnic() *Vnic {
	if x != nil {
		return x.Vnic
	}
	return nil
}

func (x *CreateVnicRequest) GetVnicId() string {
	if x != nil {
		return x.VnicId
	}
	return ""
}

// Delete vnic request
type DeleteVnicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vnic id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteVnicRequest) Reset() {
	*x = DeleteVnicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVnicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVnicRequest) ProtoMessage() {}

func (x *DeleteVnicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVnicRequest.ProtoReflect.Descriptor instead.
func (*DeleteVnicRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteVnicRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update vnic request
type UpdateVnicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated vnic info
	Vnic *Vnic `protobuf:"bytes,1,opt,name=vnic,proto3" json:"vnic,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateVnicRequest) Reset() {
	*x = UpdateVnicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVnicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVnicRequest) ProtoMessage() {}

func (x *UpdateVnicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVnicRequest.ProtoReflect.Descriptor instead.
func (*UpdateVnicRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateVnicRequest) GetVnic() *Vnic {
	if x != nil {
		return x.Vnic
	}
	return nil
}

func (x *UpdateVnicRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List vnic request
type ListVnicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListVnicsRequest) Reset() {
	*x = ListVnicsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVnicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVnicsRequest) ProtoMessage() {}

func (x *ListVnicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVnicsRequest.ProtoReflect.Descriptor instead.
func (*ListVnicsRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{14}
}

func (x *ListVnicsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListVnicsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVnicsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List vnic response
type ListVnicsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of vnics
	Vnic []*Vnic `protobuf:"bytes,1,rep,name=vnic,proto3" json:"vnic,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListVnicsResponse) Reset() {
	*x = ListVnicsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVnicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVnicsResponse) ProtoMessage() {}

func (x *ListVnicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVnicsResponse.ProtoReflect.Descriptor instead.
func (*ListVnicsResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{15}
}

func (x *ListVnicsResponse) GetVnic() []*Vnic {
	if x != nil {
		return x.Vnic
	}
	return nil
}

func (x *ListVnicsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get vnic request
type GetVnicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetVnicRequest) Reset() {
	*x = GetVnicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVnicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVnicRequest) ProtoMessage() {}

func (x *GetVnicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVnicRequest.ProtoReflect.Descriptor instead.
func (*GetVnicRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{16}
}

func (x *GetVnicRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create Interface Request
type CreateInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// interface
	Interface *Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	// interface_id
	InterfaceId string `protobuf:"bytes,3,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
}

func (x *CreateInterfaceRequest) Reset() {
	*x = CreateInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInterfaceRequest) ProtoMessage() {}

func (x *CreateInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInterfaceRequest.ProtoReflect.Descriptor instead.
func (*CreateInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{17}
}

func (x *CreateInterfaceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateInterfaceRequest) GetInterface() *Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *CreateInterfaceRequest) GetInterfaceId() string {
	if x != nil {
		return x.InterfaceId
	}
	return ""
}

// Delete interface request
type DeleteInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// interface id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteInterfaceRequest) Reset() {
	*x = DeleteInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInterfaceRequest) ProtoMessage() {}

func (x *DeleteInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInterfaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteInterfaceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update interface request
type UpdateInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated interface info
	Interface *Interface `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateInterfaceRequest) Reset() {
	*x = UpdateInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInterfaceRequest) ProtoMessage() {}

func (x *UpdateInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInterfaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateInterfaceRequest) GetInterface() *Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *UpdateInterfaceRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List interface request
type ListInterfacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListInterfacesRequest) Reset() {
	*x = ListInterfacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInterfacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterfacesRequest) ProtoMessage() {}

func (x *ListInterfacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterfacesRequest.ProtoReflect.Descriptor instead.
func (*ListInterfacesRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{20}
}

func (x *ListInterfacesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListInterfacesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListInterfacesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List interface response
type ListInterfacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of interfaces
	Interface []*Interface `protobuf:"bytes,1,rep,name=interface,proto3" json:"interface,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListInterfacesResponse) Reset() {
	*x = ListInterfacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInterfacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterfacesResponse) ProtoMessage() {}

func (x *ListInterfacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterfacesResponse.ProtoReflect.Descriptor instead.
func (*ListInterfacesResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{21}
}

func (x *ListInterfacesResponse) GetInterface() []*Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *ListInterfacesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get interface request
type GetInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInterfaceRequest) Reset() {
	*x = GetInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterfaceRequest) ProtoMessage() {}

func (x *GetInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterfaceRequest.ProtoReflect.Descriptor instead.
func (*GetInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{22}
}

func (x *GetInterfaceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create RouteTable Request
type CreateRouteTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// routetable
	Routetable *RouteTable `protobuf:"bytes,2,opt,name=routetable,proto3" json:"routetable,omitempty"`
	// routetable_id
	RoutetableId string `protobuf:"bytes,3,opt,name=routetable_id,json=routetableId,proto3" json:"routetable_id,omitempty"`
}

func (x *CreateRouteTableRequest) Reset() {
	*x = CreateRouteTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRouteTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRouteTableRequest) ProtoMessage() {}

func (x *CreateRouteTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRouteTableRequest.ProtoReflect.Descriptor instead.
func (*CreateRouteTableRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{23}
}

func (x *CreateRouteTableRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateRouteTableRequest) GetRoutetable() *RouteTable {
	if x != nil {
		return x.Routetable
	}
	return nil
}

func (x *CreateRouteTableRequest) GetRoutetableId() string {
	if x != nil {
		return x.RoutetableId
	}
	return ""
}

// Delete routetable request
type DeleteRouteTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// routetable id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRouteTableRequest) Reset() {
	*x = DeleteRouteTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRouteTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouteTableRequest) ProtoMessage() {}

func (x *DeleteRouteTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouteTableRequest.ProtoReflect.Descriptor instead.
func (*DeleteRouteTableRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteRouteTableRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update routetable request
type UpdateRouteTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated routetable info
	Routetable *RouteTable `protobuf:"bytes,1,opt,name=routetable,proto3" json:"routetable,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRouteTableRequest) Reset() {
	*x = UpdateRouteTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRouteTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRouteTableRequest) ProtoMessage() {}

func (x *UpdateRouteTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRouteTableRequest.ProtoReflect.Descriptor instead.
func (*UpdateRouteTableRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateRouteTableRequest) GetRoutetable() *RouteTable {
	if x != nil {
		return x.Routetable
	}
	return nil
}

func (x *UpdateRouteTableRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List routetable request
type ListRouteTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListRouteTablesRequest) Reset() {
	*x = ListRouteTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRouteTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRouteTablesRequest) ProtoMessage() {}

func (x *ListRouteTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRouteTablesRequest.ProtoReflect.Descriptor instead.
func (*ListRouteTablesRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{26}
}

func (x *ListRouteTablesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListRouteTablesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRouteTablesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List routetable response
type ListRouteTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of routetables
	Routetable []*RouteTable `protobuf:"bytes,1,rep,name=routetable,proto3" json:"routetable,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRouteTablesResponse) Reset() {
	*x = ListRouteTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRouteTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRouteTablesResponse) ProtoMessage() {}

func (x *ListRouteTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRouteTablesResponse.ProtoReflect.Descriptor instead.
func (*ListRouteTablesResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{27}
}

func (x *ListRouteTablesResponse) GetRoutetable() []*RouteTable {
	if x != nil {
		return x.Routetable
	}
	return nil
}

func (x *ListRouteTablesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get routetable request
type GetRouteTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRouteTableRequest) Reset() {
	*x = GetRouteTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRouteTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouteTableRequest) ProtoMessage() {}

func (x *GetRouteTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouteTableRequest.ProtoReflect.Descriptor instead.
func (*GetRouteTableRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{28}
}

func (x *GetRouteTableRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create Route Request
type CreateRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// route
	Route *Route `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	// route_id
	RouteId string `protobuf:"bytes,3,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
}

func (x *CreateRouteRequest) Reset() {
	*x = CreateRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRouteRequest) ProtoMessage() {}

func (x *CreateRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRouteRequest.ProtoReflect.Descriptor instead.
func (*CreateRouteRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{29}
}

func (x *CreateRouteRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateRouteRequest) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *CreateRouteRequest) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

// Delete route request
type DeleteRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// route id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRouteRequest) Reset() {
	*x = DeleteRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouteRequest) ProtoMessage() {}

func (x *DeleteRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRouteRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteRouteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update route request
type UpdateRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated route info
	Route *Route `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRouteRequest) Reset() {
	*x = UpdateRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRouteRequest) ProtoMessage() {}

func (x *UpdateRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRouteRequest.ProtoReflect.Descriptor instead.
func (*UpdateRouteRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateRouteRequest) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *UpdateRouteRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List route request
type ListRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListRoutesRequest) Reset() {
	*x = ListRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutesRequest) ProtoMessage() {}

func (x *ListRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutesRequest.ProtoReflect.Descriptor instead.
func (*ListRoutesRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{32}
}

func (x *ListRoutesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListRoutesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRoutesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List route response
type ListRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of routes
	Route []*Route `protobuf:"bytes,1,rep,name=route,proto3" json:"route,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRoutesResponse) Reset() {
	*x = ListRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutesResponse) ProtoMessage() {}

func (x *ListRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutesResponse.ProtoReflect.Descriptor instead.
func (*ListRoutesResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{33}
}

func (x *ListRoutesResponse) GetRoute() []*Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *ListRoutesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get route request
type GetRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRouteRequest) Reset() {
	*x = GetRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouteRequest) ProtoMessage() {}

func (x *GetRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouteRequest.ProtoReflect.Descriptor instead.
func (*GetRouteRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{34}
}

func (x *GetRouteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create UnderlayRoute Request
type CreateUnderlayRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// underlayroute
	Underlayroute *UnderlayRoute `protobuf:"bytes,2,opt,name=underlayroute,proto3" json:"underlayroute,omitempty"`
	// underlayroute_id
	UnderlayrouteId string `protobuf:"bytes,3,opt,name=underlayroute_id,json=underlayrouteId,proto3" json:"underlayroute_id,omitempty"`
}

func (x *CreateUnderlayRouteRequest) Reset() {
	*x = CreateUnderlayRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUnderlayRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUnderlayRouteRequest) ProtoMessage() {}

func (x *CreateUnderlayRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUnderlayRouteRequest.ProtoReflect.Descriptor instead.
func (*CreateUnderlayRouteRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{35}
}

func (x *CreateUnderlayRouteRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateUnderlayRouteRequest) GetUnderlayroute() *UnderlayRoute {
	if x != nil {
		return x.Underlayroute
	}
	return nil
}

func (x *CreateUnderlayRouteRequest) GetUnderlayrouteId() string {
	if x != nil {
		return x.UnderlayrouteId
	}
	return ""
}

// Delete underlayroute request
type DeleteUnderlayRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// underlayroute id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteUnderlayRouteRequest) Reset() {
	*x = DeleteUnderlayRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUnderlayRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUnderlayRouteRequest) ProtoMessage() {}

func (x *DeleteUnderlayRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUnderlayRouteRequest.ProtoReflect.Descriptor instead.
func (*DeleteUnderlayRouteRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteUnderlayRouteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update underlayroute request
type UpdateUnderlayRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated underlayroute info
	Underlayroute *UnderlayRoute `protobuf:"bytes,1,opt,name=underlayroute,proto3" json:"underlayroute,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateUnderlayRouteRequest) Reset() {
	*x = UpdateUnderlayRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUnderlayRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUnderlayRouteRequest) ProtoMessage() {}

func (x *UpdateUnderlayRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUnderlayRouteRequest.ProtoReflect.Descriptor instead.
func (*UpdateUnderlayRouteRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateUnderlayRouteRequest) GetUnderlayroute() *UnderlayRoute {
	if x != nil {
		return x.Underlayroute
	}
	return nil
}

func (x *UpdateUnderlayRouteRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List underlayroute request
type ListUnderlayRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListUnderlayRoutesRequest) Reset() {
	*x = ListUnderlayRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnderlayRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnderlayRoutesRequest) ProtoMessage() {}

func (x *ListUnderlayRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnderlayRoutesRequest.ProtoReflect.Descriptor instead.
func (*ListUnderlayRoutesRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{38}
}

func (x *ListUnderlayRoutesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListUnderlayRoutesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUnderlayRoutesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List underlayroute response
type ListUnderlayRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of underlayroutes
	Underlayroute []*UnderlayRoute `protobuf:"bytes,1,rep,name=underlayroute,proto3" json:"underlayroute,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListUnderlayRoutesResponse) Reset() {
	*x = ListUnderlayRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnderlayRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnderlayRoutesResponse) ProtoMessage() {}

func (x *ListUnderlayRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnderlayRoutesResponse.ProtoReflect.Descriptor instead.
func (*ListUnderlayRoutesResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{39}
}

func (x *ListUnderlayRoutesResponse) GetUnderlayroute() []*UnderlayRoute {
	if x != nil {
		return x.Underlayroute
	}
	return nil
}

func (x *ListUnderlayRoutesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get underlayroute request
type GetUnderlayRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetUnderlayRouteRequest) Reset() {
	*x = GetUnderlayRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnderlayRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnderlayRouteRequest) ProtoMessage() {}

func (x *GetUnderlayRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnderlayRouteRequest.ProtoReflect.Descriptor instead.
func (*GetUnderlayRouteRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{40}
}

func (x *GetUnderlayRouteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create Bgp Request
type CreateBgpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// bgp
	Bgp *Bgp `protobuf:"bytes,2,opt,name=bgp,proto3" json:"bgp,omitempty"`
	// bgp_id
	BgpId string `protobuf:"bytes,3,opt,name=bgp_id,json=bgpId,proto3" json:"bgp_id,omitempty"`
}

func (x *CreateBgpRequest) Reset() {
	*x = CreateBgpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBgpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBgpRequest) ProtoMessage() {}

func (x *CreateBgpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBgpRequest.ProtoReflect.Descriptor instead.
func (*CreateBgpRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{41}
}

func (x *CreateBgpRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateBgpRequest) GetBgp() *Bgp {
	if x != nil {
		return x.Bgp
	}
	return nil
}

func (x *CreateBgpRequest) GetBgpId() string {
	if x != nil {
		return x.BgpId
	}
	return ""
}

// Delete bgp request
type DeleteBgpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bgp id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBgpRequest) Reset() {
	*x = DeleteBgpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBgpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBgpRequest) ProtoMessage() {}

func (x *DeleteBgpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBgpRequest.ProtoReflect.Descriptor instead.
func (*DeleteBgpRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteBgpRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update bgp request
type UpdateBgpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated bgp info
	Bgp *Bgp `protobuf:"bytes,1,opt,name=bgp,proto3" json:"bgp,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateBgpRequest) Reset() {
	*x = UpdateBgpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBgpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBgpRequest) ProtoMessage() {}

func (x *UpdateBgpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBgpRequest.ProtoReflect.Descriptor instead.
func (*UpdateBgpRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateBgpRequest) GetBgp() *Bgp {
	if x != nil {
		return x.Bgp
	}
	return nil
}

func (x *UpdateBgpRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List bgp request
type ListBgpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBgpsRequest) Reset() {
	*x = ListBgpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBgpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBgpsRequest) ProtoMessage() {}

func (x *ListBgpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBgpsRequest.ProtoReflect.Descriptor instead.
func (*ListBgpsRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{44}
}

func (x *ListBgpsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListBgpsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBgpsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List bgp response
type ListBgpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of bgps
	Bgp []*Bgp `protobuf:"bytes,1,rep,name=bgp,proto3" json:"bgp,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListBgpsResponse) Reset() {
	*x = ListBgpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBgpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBgpsResponse) ProtoMessage() {}

func (x *ListBgpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBgpsResponse.ProtoReflect.Descriptor instead.
func (*ListBgpsResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{45}
}

func (x *ListBgpsResponse) GetBgp() []*Bgp {
	if x != nil {
		return x.Bgp
	}
	return nil
}

func (x *ListBgpsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get bgp request
type GetBgpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBgpRequest) Reset() {
	*x = GetBgpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBgpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBgpRequest) ProtoMessage() {}

func (x *GetBgpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBgpRequest.ProtoReflect.Descriptor instead.
func (*GetBgpRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{46}
}

func (x *GetBgpRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create BGPPeer Request
type CreateBGPPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// bgppeer
	Bgppeer *BGPPeer `protobuf:"bytes,2,opt,name=bgppeer,proto3" json:"bgppeer,omitempty"`
	// bgppeer_id
	BgppeerId string `protobuf:"bytes,3,opt,name=bgppeer_id,json=bgppeerId,proto3" json:"bgppeer_id,omitempty"`
}

func (x *CreateBGPPeerRequest) Reset() {
	*x = CreateBGPPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBGPPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBGPPeerRequest) ProtoMessage() {}

func (x *CreateBGPPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBGPPeerRequest.ProtoReflect.Descriptor instead.
func (*CreateBGPPeerRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{47}
}

func (x *CreateBGPPeerRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateBGPPeerRequest) GetBgppeer() *BGPPeer {
	if x != nil {
		return x.Bgppeer
	}
	return nil
}

func (x *CreateBGPPeerRequest) GetBgppeerId() string {
	if x != nil {
		return x.BgppeerId
	}
	return ""
}

// Delete bgppeer request
type DeleteBGPPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bgppeer id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBGPPeerRequest) Reset() {
	*x = DeleteBGPPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBGPPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBGPPeerRequest) ProtoMessage() {}

func (x *DeleteBGPPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBGPPeerRequest.ProtoReflect.Descriptor instead.
func (*DeleteBGPPeerRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteBGPPeerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update bgppeer request
type UpdateBGPPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated bgppeer info
	Bgppeer *BGPPeer `protobuf:"bytes,1,opt,name=bgppeer,proto3" json:"bgppeer,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateBGPPeerRequest) Reset() {
	*x = UpdateBGPPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBGPPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBGPPeerRequest) ProtoMessage() {}

func (x *UpdateBGPPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBGPPeerRequest.ProtoReflect.Descriptor instead.
func (*UpdateBGPPeerRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{49}
}

func (x *UpdateBGPPeerRequest) GetBgppeer() *BGPPeer {
	if x != nil {
		return x.Bgppeer
	}
	return nil
}

func (x *UpdateBGPPeerRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List bgppeer request
type ListBGPPeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBGPPeersRequest) Reset() {
	*x = ListBGPPeersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBGPPeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBGPPeersRequest) ProtoMessage() {}

func (x *ListBGPPeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBGPPeersRequest.ProtoReflect.Descriptor instead.
func (*ListBGPPeersRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{50}
}

func (x *ListBGPPeersRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListBGPPeersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBGPPeersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List bgppeer response
type ListBGPPeersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of bgppeers
	Bgppeer []*BGPPeer `protobuf:"bytes,1,rep,name=bgppeer,proto3" json:"bgppeer,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListBGPPeersResponse) Reset() {
	*x = ListBGPPeersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBGPPeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBGPPeersResponse) ProtoMessage() {}

func (x *ListBGPPeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBGPPeersResponse.ProtoReflect.Descriptor instead.
func (*ListBGPPeersResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{51}
}

func (x *ListBGPPeersResponse) GetBgppeer() []*BGPPeer {
	if x != nil {
		return x.Bgppeer
	}
	return nil
}

func (x *ListBGPPeersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get bgppeer request
type GetBGPPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBGPPeerRequest) Reset() {
	*x = GetBGPPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBGPPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBGPPeerRequest) ProtoMessage() {}

func (x *GetBGPPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBGPPeerRequest.ProtoReflect.Descriptor instead.
func (*GetBGPPeerRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{52}
}

func (x *GetBGPPeerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create BGPPeerAf Request
type CreateBGPPeerAfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// bgppeeraf
	Bgppeeraf *BGPPeerAf `protobuf:"bytes,2,opt,name=bgppeeraf,proto3" json:"bgppeeraf,omitempty"`
	// bgppeeraf_id
	BgppeerafId string `protobuf:"bytes,3,opt,name=bgppeeraf_id,json=bgppeerafId,proto3" json:"bgppeeraf_id,omitempty"`
}

func (x *CreateBGPPeerAfRequest) Reset() {
	*x = CreateBGPPeerAfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBGPPeerAfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBGPPeerAfRequest) ProtoMessage() {}

func (x *CreateBGPPeerAfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBGPPeerAfRequest.ProtoReflect.Descriptor instead.
func (*CreateBGPPeerAfRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{53}
}

func (x *CreateBGPPeerAfRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateBGPPeerAfRequest) GetBgppeeraf() *BGPPeerAf {
	if x != nil {
		return x.Bgppeeraf
	}
	return nil
}

func (x *CreateBGPPeerAfRequest) GetBgppeerafId() string {
	if x != nil {
		return x.BgppeerafId
	}
	return ""
}

// Delete bgppeeraf request
type DeleteBGPPeerAfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bgppeeraf id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBGPPeerAfRequest) Reset() {
	*x = DeleteBGPPeerAfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBGPPeerAfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBGPPeerAfRequest) ProtoMessage() {}

func (x *DeleteBGPPeerAfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBGPPeerAfRequest.ProtoReflect.Descriptor instead.
func (*DeleteBGPPeerAfRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{54}
}

func (x *DeleteBGPPeerAfRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update bgppeeraf request
type UpdateBGPPeerAfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated bgppeeraf info
	Bgppeeraf *BGPPeerAf `protobuf:"bytes,1,opt,name=bgppeeraf,proto3" json:"bgppeeraf,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateBGPPeerAfRequest) Reset() {
	*x = UpdateBGPPeerAfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBGPPeerAfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBGPPeerAfRequest) ProtoMessage() {}

func (x *UpdateBGPPeerAfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBGPPeerAfRequest.ProtoReflect.Descriptor instead.
func (*UpdateBGPPeerAfRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{55}
}

func (x *UpdateBGPPeerAfRequest) GetBgppeeraf() *BGPPeerAf {
	if x != nil {
		return x.Bgppeeraf
	}
	return nil
}

func (x *UpdateBGPPeerAfRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List bgppeeraf request
type ListBGPPeerAfsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBGPPeerAfsRequest) Reset() {
	*x = ListBGPPeerAfsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBGPPeerAfsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBGPPeerAfsRequest) ProtoMessage() {}

func (x *ListBGPPeerAfsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBGPPeerAfsRequest.ProtoReflect.Descriptor instead.
func (*ListBGPPeerAfsRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{56}
}

func (x *ListBGPPeerAfsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListBGPPeerAfsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBGPPeerAfsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List bgppeeraf response
type ListBGPPeerAfsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of bgppeerafs
	Bgppeeraf []*BGPPeerAf `protobuf:"bytes,1,rep,name=bgppeeraf,proto3" json:"bgppeeraf,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListBGPPeerAfsResponse) Reset() {
	*x = ListBGPPeerAfsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBGPPeerAfsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBGPPeerAfsResponse) ProtoMessage() {}

func (x *ListBGPPeerAfsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBGPPeerAfsResponse.ProtoReflect.Descriptor instead.
func (*ListBGPPeerAfsResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{57}
}

func (x *ListBGPPeerAfsResponse) GetBgppeeraf() []*BGPPeerAf {
	if x != nil {
		return x.Bgppeeraf
	}
	return nil
}

func (x *ListBGPPeerAfsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get bgppeeraf request
type GetBGPPeerAfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBGPPeerAfRequest) Reset() {
	*x = GetBGPPeerAfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBGPPeerAfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBGPPeerAfRequest) ProtoMessage() {}

func (x *GetBGPPeerAfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBGPPeerAfRequest.ProtoReflect.Descriptor instead.
func (*GetBGPPeerAfRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{58}
}

func (x *GetBGPPeerAfRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create Mapping Request
type CreateMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// mapping
	Mapping *Mapping `protobuf:"bytes,2,opt,name=mapping,proto3" json:"mapping,omitempty"`
	// mapping_id
	MappingId string `protobuf:"bytes,3,opt,name=mapping_id,json=mappingId,proto3" json:"mapping_id,omitempty"`
}

func (x *CreateMappingRequest) Reset() {
	*x = CreateMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMappingRequest) ProtoMessage() {}

func (x *CreateMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMappingRequest.ProtoReflect.Descriptor instead.
func (*CreateMappingRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{59}
}

func (x *CreateMappingRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateMappingRequest) GetMapping() *Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *CreateMappingRequest) GetMappingId() string {
	if x != nil {
		return x.MappingId
	}
	return ""
}

// Delete mapping request
type DeleteMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mapping id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteMappingRequest) Reset() {
	*x = DeleteMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMappingRequest) ProtoMessage() {}

func (x *DeleteMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMappingRequest.ProtoReflect.Descriptor instead.
func (*DeleteMappingRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{60}
}

func (x *DeleteMappingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update mapping request
type UpdateMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated mapping info
	Mapping *Mapping `protobuf:"bytes,1,opt,name=mapping,proto3" json:"mapping,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateMappingRequest) Reset() {
	*x = UpdateMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMappingRequest) ProtoMessage() {}

func (x *UpdateMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMappingRequest.ProtoReflect.Descriptor instead.
func (*UpdateMappingRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateMappingRequest) GetMapping() *Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *UpdateMappingRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List mapping request
type ListMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListMappingsRequest) Reset() {
	*x = ListMappingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMappingsRequest) ProtoMessage() {}

func (x *ListMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMappingsRequest.ProtoReflect.Descriptor instead.
func (*ListMappingsRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{62}
}

func (x *ListMappingsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListMappingsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMappingsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List mapping response
type ListMappingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of mappings
	Mapping []*Mapping `protobuf:"bytes,1,rep,name=mapping,proto3" json:"mapping,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListMappingsResponse) Reset() {
	*x = ListMappingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMappingsResponse) ProtoMessage() {}

func (x *ListMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMappingsResponse.ProtoReflect.Descriptor instead.
func (*ListMappingsResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{63}
}

func (x *ListMappingsResponse) GetMapping() []*Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *ListMappingsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get mapping request
type GetMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetMappingRequest) Reset() {
	*x = GetMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMappingRequest) ProtoMessage() {}

func (x *GetMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMappingRequest.ProtoReflect.Descriptor instead.
func (*GetMappingRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{64}
}

func (x *GetMappingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create NextHop Request
type CreateNextHopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// nexthop
	Nexthop *NextHop `protobuf:"bytes,2,opt,name=nexthop,proto3" json:"nexthop,omitempty"`
	// nexthop_id
	NexthopId string `protobuf:"bytes,3,opt,name=nexthop_id,json=nexthopId,proto3" json:"nexthop_id,omitempty"`
}

func (x *CreateNextHopRequest) Reset() {
	*x = CreateNextHopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNextHopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNextHopRequest) ProtoMessage() {}

func (x *CreateNextHopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNextHopRequest.ProtoReflect.Descriptor instead.
func (*CreateNextHopRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{65}
}

func (x *CreateNextHopRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateNextHopRequest) GetNexthop() *NextHop {
	if x != nil {
		return x.Nexthop
	}
	return nil
}

func (x *CreateNextHopRequest) GetNexthopId() string {
	if x != nil {
		return x.NexthopId
	}
	return ""
}

// Delete nexthop request
type DeleteNextHopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// nexthop id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteNextHopRequest) Reset() {
	*x = DeleteNextHopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNextHopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNextHopRequest) ProtoMessage() {}

func (x *DeleteNextHopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNextHopRequest.ProtoReflect.Descriptor instead.
func (*DeleteNextHopRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{66}
}

func (x *DeleteNextHopRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update nexthop request
type UpdateNextHopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated nexthop info
	Nexthop *NextHop `protobuf:"bytes,1,opt,name=nexthop,proto3" json:"nexthop,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateNextHopRequest) Reset() {
	*x = UpdateNextHopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNextHopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNextHopRequest) ProtoMessage() {}

func (x *UpdateNextHopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNextHopRequest.ProtoReflect.Descriptor instead.
func (*UpdateNextHopRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateNextHopRequest) GetNexthop() *NextHop {
	if x != nil {
		return x.Nexthop
	}
	return nil
}

func (x *UpdateNextHopRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List nexthop request
type ListNextHopsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNextHopsRequest) Reset() {
	*x = ListNextHopsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNextHopsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNextHopsRequest) ProtoMessage() {}

func (x *ListNextHopsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNextHopsRequest.ProtoReflect.Descriptor instead.
func (*ListNextHopsRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{68}
}

func (x *ListNextHopsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListNextHopsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNextHopsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List nexthop response
type ListNextHopsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of nexthops
	Nexthop []*NextHop `protobuf:"bytes,1,rep,name=nexthop,proto3" json:"nexthop,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNextHopsResponse) Reset() {
	*x = ListNextHopsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNextHopsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNextHopsResponse) ProtoMessage() {}

func (x *ListNextHopsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNextHopsResponse.ProtoReflect.Descriptor instead.
func (*ListNextHopsResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{69}
}

func (x *ListNextHopsResponse) GetNexthop() []*NextHop {
	if x != nil {
		return x.Nexthop
	}
	return nil
}

func (x *ListNextHopsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get nexthop request
type GetNextHopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetNextHopRequest) Reset() {
	*x = GetNextHopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextHopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextHopRequest) ProtoMessage() {}

func (x *GetNextHopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextHopRequest.ProtoReflect.Descriptor instead.
func (*GetNextHopRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{70}
}

func (x *GetNextHopRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create NextHopGroup Request
type CreateNextHopGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// nexthopgroup
	Nexthopgroup *NextHopGroup `protobuf:"bytes,2,opt,name=nexthopgroup,proto3" json:"nexthopgroup,omitempty"`
	// nexthopgroup_id
	NexthopgroupId string `protobuf:"bytes,3,opt,name=nexthopgroup_id,json=nexthopgroupId,proto3" json:"nexthopgroup_id,omitempty"`
}

func (x *CreateNextHopGroupRequest) Reset() {
	*x = CreateNextHopGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNextHopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNextHopGroupRequest) ProtoMessage() {}

func (x *CreateNextHopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNextHopGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateNextHopGroupRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{71}
}

func (x *CreateNextHopGroupRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateNextHopGroupRequest) GetNexthopgroup() *NextHopGroup {
	if x != nil {
		return x.Nexthopgroup
	}
	return nil
}

func (x *CreateNextHopGroupRequest) GetNexthopgroupId() string {
	if x != nil {
		return x.NexthopgroupId
	}
	return ""
}

// Delete nexthopgroup request
type DeleteNextHopGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// nexthopgroup id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteNextHopGroupRequest) Reset() {
	*x = DeleteNextHopGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNextHopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNextHopGroupRequest) ProtoMessage() {}

func (x *DeleteNextHopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNextHopGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteNextHopGroupRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteNextHopGroupRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update nexthopgroup request
type UpdateNextHopGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated nexthopgroup info
	Nexthopgroup *NextHopGroup `protobuf:"bytes,1,opt,name=nexthopgroup,proto3" json:"nexthopgroup,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateNextHopGroupRequest) Reset() {
	*x = UpdateNextHopGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNextHopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNextHopGroupRequest) ProtoMessage() {}

func (x *UpdateNextHopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNextHopGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateNextHopGroupRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{73}
}

func (x *UpdateNextHopGroupRequest) GetNexthopgroup() *NextHopGroup {
	if x != nil {
		return x.Nexthopgroup
	}
	return nil
}

func (x *UpdateNextHopGroupRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List nexthopgroup request
type ListNextHopGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNextHopGroupsRequest) Reset() {
	*x = ListNextHopGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNextHopGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNextHopGroupsRequest) ProtoMessage() {}

func (x *ListNextHopGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNextHopGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListNextHopGroupsRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{74}
}

func (x *ListNextHopGroupsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListNextHopGroupsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNextHopGroupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List nexthopgroup response
type ListNextHopGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of nexthopgroups
	Nexthopgroup []*NextHopGroup `protobuf:"bytes,1,rep,name=nexthopgroup,proto3" json:"nexthopgroup,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNextHopGroupsResponse) Reset() {
	*x = ListNextHopGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNextHopGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNextHopGroupsResponse) ProtoMessage() {}

func (x *ListNextHopGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNextHopGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListNextHopGroupsResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{75}
}

func (x *ListNextHopGroupsResponse) GetNexthopgroup() []*NextHopGroup {
	if x != nil {
		return x.Nexthopgroup
	}
	return nil
}

func (x *ListNextHopGroupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get nexthopgroup request
type GetNextHopGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetNextHopGroupRequest) Reset() {
	*x = GetNextHopGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextHopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextHopGroupRequest) ProtoMessage() {}

func (x *GetNextHopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextHopGroupRequest.ProtoReflect.Descriptor instead.
func (*GetNextHopGroupRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{76}
}

func (x *GetNextHopGroupRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create Subnet Request
type CreateSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// subnet
	Subnet *Subnet `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// subnet_id
	SubnetId string `protobuf:"bytes,3,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
}

func (x *CreateSubnetRequest) Reset() {
	*x = CreateSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnetRequest) ProtoMessage() {}

func (x *CreateSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnetRequest.ProtoReflect.Descriptor instead.
func (*CreateSubnetRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{77}
}

func (x *CreateSubnetRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateSubnetRequest) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *CreateSubnetRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

// Delete subnet request
type DeleteSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subnet id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubnetRequest) Reset() {
	*x = DeleteSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnetRequest) ProtoMessage() {}

func (x *DeleteSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnetRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubnetRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{78}
}

func (x *DeleteSubnetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update subnet request
type UpdateSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated subnet info
	Subnet *Subnet `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateSubnetRequest) Reset() {
	*x = UpdateSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubnetRequest) ProtoMessage() {}

func (x *UpdateSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubnetRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubnetRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{79}
}

func (x *UpdateSubnetRequest) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *UpdateSubnetRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List subnet request
type ListSubnetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSubnetsRequest) Reset() {
	*x = ListSubnetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubnetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubnetsRequest) ProtoMessage() {}

func (x *ListSubnetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubnetsRequest.ProtoReflect.Descriptor instead.
func (*ListSubnetsRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{80}
}

func (x *ListSubnetsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListSubnetsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSubnetsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List subnet response
type ListSubnetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of subnets
	Subnet []*Subnet `protobuf:"bytes,1,rep,name=subnet,proto3" json:"subnet,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSubnetsResponse) Reset() {
	*x = ListSubnetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubnetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubnetsResponse) ProtoMessage() {}

func (x *ListSubnetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubnetsResponse.ProtoReflect.Descriptor instead.
func (*ListSubnetsResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{81}
}

func (x *ListSubnetsResponse) GetSubnet() []*Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *ListSubnetsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get subnet request
type GetSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubnetRequest) Reset() {
	*x = GetSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetRequest) ProtoMessage() {}

func (x *GetSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetRequest.ProtoReflect.Descriptor instead.
func (*GetSubnetRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{82}
}

func (x *GetSubnetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create Tunnel Request
type CreateTunnelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// tunnel
	Tunnel *Tunnel `protobuf:"bytes,2,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
	// tunnel_id
	TunnelId string `protobuf:"bytes,3,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
}

func (x *CreateTunnelRequest) Reset() {
	*x = CreateTunnelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelRequest) ProtoMessage() {}

func (x *CreateTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelRequest.ProtoReflect.Descriptor instead.
func (*CreateTunnelRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{83}
}

func (x *CreateTunnelRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateTunnelRequest) GetTunnel() *Tunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *CreateTunnelRequest) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

// Delete Tunnel request
type DeleteTunnelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tunnel id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTunnelRequest) Reset() {
	*x = DeleteTunnelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTunnelRequest) ProtoMessage() {}

func (x *DeleteTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTunnelRequest.ProtoReflect.Descriptor instead.
func (*DeleteTunnelRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{84}
}

func (x *DeleteTunnelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update Tunnel request
type UpdateTunnelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated tunnel info
	Tunnel *Tunnel `protobuf:"bytes,1,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateTunnelRequest) Reset() {
	*x = UpdateTunnelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTunnelRequest) ProtoMessage() {}

func (x *UpdateTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTunnelRequest.ProtoReflect.Descriptor instead.
func (*UpdateTunnelRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{85}
}

func (x *UpdateTunnelRequest) GetTunnel() *Tunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *UpdateTunnelRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List Tunnel request
type ListTunnelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListTunnelsRequest) Reset() {
	*x = ListTunnelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTunnelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTunnelsRequest) ProtoMessage() {}

func (x *ListTunnelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTunnelsRequest.ProtoReflect.Descriptor instead.
func (*ListTunnelsRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{86}
}

func (x *ListTunnelsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListTunnelsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTunnelsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List Tunnel response
type ListTunnelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of tunnels
	Tunnel []*Tunnel `protobuf:"bytes,1,rep,name=tunnel,proto3" json:"tunnel,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTunnelsResponse) Reset() {
	*x = ListTunnelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTunnelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTunnelsResponse) ProtoMessage() {}

func (x *ListTunnelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTunnelsResponse.ProtoReflect.Descriptor instead.
func (*ListTunnelsResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{87}
}

func (x *ListTunnelsResponse) GetTunnel() []*Tunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *ListTunnelsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get Tunnel request
type GetTunnelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTunnelRequest) Reset() {
	*x = GetTunnelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelRequest) ProtoMessage() {}

func (x *GetTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelRequest.ProtoReflect.Descriptor instead.
func (*GetTunnelRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{88}
}

func (x *GetTunnelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create Vpc Request
type CreateVpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// vpc
	Vpc *Vpc `protobuf:"bytes,2,opt,name=vpc,proto3" json:"vpc,omitempty"`
	// vpc_id
	VpcId string `protobuf:"bytes,3,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
}

func (x *CreateVpcRequest) Reset() {
	*x = CreateVpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVpcRequest) ProtoMessage() {}

func (x *CreateVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVpcRequest.ProtoReflect.Descriptor instead.
func (*CreateVpcRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{89}
}

func (x *CreateVpcRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateVpcRequest) GetVpc() *Vpc {
	if x != nil {
		return x.Vpc
	}
	return nil
}

func (x *CreateVpcRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

// Delete vpc request
type DeleteVpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vpc id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteVpcRequest) Reset() {
	*x = DeleteVpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVpcRequest) ProtoMessage() {}

func (x *DeleteVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVpcRequest.ProtoReflect.Descriptor instead.
func (*DeleteVpcRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{90}
}

func (x *DeleteVpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update vpc request
type UpdateVpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated vpc info
	Vpc *Vpc `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateVpcRequest) Reset() {
	*x = UpdateVpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVpcRequest) ProtoMessage() {}

func (x *UpdateVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVpcRequest.ProtoReflect.Descriptor instead.
func (*UpdateVpcRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{91}
}

func (x *UpdateVpcRequest) GetVpc() *Vpc {
	if x != nil {
		return x.Vpc
	}
	return nil
}

func (x *UpdateVpcRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List vpc request
type ListVpcsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListVpcsRequest) Reset() {
	*x = ListVpcsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVpcsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVpcsRequest) ProtoMessage() {}

func (x *ListVpcsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVpcsRequest.ProtoReflect.Descriptor instead.
func (*ListVpcsRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{92}
}

func (x *ListVpcsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListVpcsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVpcsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List vpc response
type ListVpcsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of vpcs
	Vpc []*Vpc `protobuf:"bytes,1,rep,name=vpc,proto3" json:"vpc,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListVpcsResponse) Reset() {
	*x = ListVpcsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVpcsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVpcsResponse) ProtoMessage() {}

func (x *ListVpcsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVpcsResponse.ProtoReflect.Descriptor instead.
func (*ListVpcsResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{93}
}

func (x *ListVpcsResponse) GetVpc() []*Vpc {
	if x != nil {
		return x.Vpc
	}
	return nil
}

func (x *ListVpcsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get vpc request
type GetVpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetVpcRequest) Reset() {
	*x = GetVpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVpcRequest) ProtoMessage() {}

func (x *GetVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVpcRequest.ProtoReflect.Descriptor instead.
func (*GetVpcRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{94}
}

func (x *GetVpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create VPCPeer Request
type CreateVPCPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// vpcpeer
	Vpcpeer *VPCPeer `protobuf:"bytes,2,opt,name=vpcpeer,proto3" json:"vpcpeer,omitempty"`
	// vpcpeer_id
	VpcpeerId string `protobuf:"bytes,3,opt,name=vpcpeer_id,json=vpcpeerId,proto3" json:"vpcpeer_id,omitempty"`
}

func (x *CreateVPCPeerRequest) Reset() {
	*x = CreateVPCPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVPCPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVPCPeerRequest) ProtoMessage() {}

func (x *CreateVPCPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVPCPeerRequest.ProtoReflect.Descriptor instead.
func (*CreateVPCPeerRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{95}
}

func (x *CreateVPCPeerRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateVPCPeerRequest) GetVpcpeer() *VPCPeer {
	if x != nil {
		return x.Vpcpeer
	}
	return nil
}

func (x *CreateVPCPeerRequest) GetVpcpeerId() string {
	if x != nil {
		return x.VpcpeerId
	}
	return ""
}

// Delete vpcpeer request
type DeleteVPCPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vpcpeer id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteVPCPeerRequest) Reset() {
	*x = DeleteVPCPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVPCPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVPCPeerRequest) ProtoMessage() {}

func (x *DeleteVPCPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVPCPeerRequest.ProtoReflect.Descriptor instead.
func (*DeleteVPCPeerRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{96}
}

func (x *DeleteVPCPeerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update vpcpeer request
type UpdateVPCPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated vpcpeer info
	Vpcpeer *VPCPeer `protobuf:"bytes,1,opt,name=vpcpeer,proto3" json:"vpcpeer,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateVPCPeerRequest) Reset() {
	*x = UpdateVPCPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVPCPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVPCPeerRequest) ProtoMessage() {}

func (x *UpdateVPCPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVPCPeerRequest.ProtoReflect.Descriptor instead.
func (*UpdateVPCPeerRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{97}
}

func (x *UpdateVPCPeerRequest) GetVpcpeer() *VPCPeer {
	if x != nil {
		return x.Vpcpeer
	}
	return nil
}

func (x *UpdateVPCPeerRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List vpcpeer request
type ListVPCPeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListVPCPeersRequest) Reset() {
	*x = ListVPCPeersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVPCPeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVPCPeersRequest) ProtoMessage() {}

func (x *ListVPCPeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVPCPeersRequest.ProtoReflect.Descriptor instead.
func (*ListVPCPeersRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{98}
}

func (x *ListVPCPeersRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListVPCPeersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVPCPeersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List vpcpeer response
type ListVPCPeersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of vpcpeers
	Vpcpeer []*VPCPeer `protobuf:"bytes,1,rep,name=vpcpeer,proto3" json:"vpcpeer,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListVPCPeersResponse) Reset() {
	*x = ListVPCPeersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVPCPeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVPCPeersResponse) ProtoMessage() {}

func (x *ListVPCPeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVPCPeersResponse.ProtoReflect.Descriptor instead.
func (*ListVPCPeersResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{99}
}

func (x *ListVPCPeersResponse) GetVpcpeer() []*VPCPeer {
	if x != nil {
		return x.Vpcpeer
	}
	return nil
}

func (x *ListVPCPeersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get vpcpeer request
type GetVPCPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetVPCPeerRequest) Reset() {
	*x = GetVPCPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVPCPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVPCPeerRequest) ProtoMessage() {}

func (x *GetVPCPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVPCPeerRequest.ProtoReflect.Descriptor instead.
func (*GetVPCPeerRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{100}
}

func (x *GetVPCPeerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create SecurityPolicy Request
type CreateSecurityPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// securitypolicy
	Securitypolicy *SecurityPolicy `protobuf:"bytes,2,opt,name=securitypolicy,proto3" json:"securitypolicy,omitempty"`
	// securitypolicy_id
	SecuritypolicyId string `protobuf:"bytes,3,opt,name=securitypolicy_id,json=securitypolicyId,proto3" json:"securitypolicy_id,omitempty"`
}

func (x *CreateSecurityPolicyRequest) Reset() {
	*x = CreateSecurityPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSecurityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSecurityPolicyRequest) ProtoMessage() {}

func (x *CreateSecurityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSecurityPolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateSecurityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{101}
}

func (x *CreateSecurityPolicyRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateSecurityPolicyRequest) GetSecuritypolicy() *SecurityPolicy {
	if x != nil {
		return x.Securitypolicy
	}
	return nil
}

func (x *CreateSecurityPolicyRequest) GetSecuritypolicyId() string {
	if x != nil {
		return x.SecuritypolicyId
	}
	return ""
}

// Delete securitypolicy request
type DeleteSecurityPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// securitypolicy id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSecurityPolicyRequest) Reset() {
	*x = DeleteSecurityPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecurityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecurityPolicyRequest) ProtoMessage() {}

func (x *DeleteSecurityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecurityPolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteSecurityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{102}
}

func (x *DeleteSecurityPolicyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update securitypolicy request
type UpdateSecurityPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated securitypolicy info
	Securitypolicy *SecurityPolicy `protobuf:"bytes,1,opt,name=securitypolicy,proto3" json:"securitypolicy,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateSecurityPolicyRequest) Reset() {
	*x = UpdateSecurityPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSecurityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSecurityPolicyRequest) ProtoMessage() {}

func (x *UpdateSecurityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSecurityPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateSecurityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{103}
}

func (x *UpdateSecurityPolicyRequest) GetSecuritypolicy() *SecurityPolicy {
	if x != nil {
		return x.Securitypolicy
	}
	return nil
}

func (x *UpdateSecurityPolicyRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List securitypolicy request
type ListSecurityPolicysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSecurityPolicysRequest) Reset() {
	*x = ListSecurityPolicysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecurityPolicysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityPolicysRequest) ProtoMessage() {}

func (x *ListSecurityPolicysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityPolicysRequest.ProtoReflect.Descriptor instead.
func (*ListSecurityPolicysRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{104}
}

func (x *ListSecurityPolicysRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListSecurityPolicysRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSecurityPolicysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List securitypolicy response
type ListSecurityPolicysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of securitypolicys
	Securitypolicy []*SecurityPolicy `protobuf:"bytes,1,rep,name=securitypolicy,proto3" json:"securitypolicy,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSecurityPolicysResponse) Reset() {
	*x = ListSecurityPolicysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecurityPolicysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityPolicysResponse) ProtoMessage() {}

func (x *ListSecurityPolicysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityPolicysResponse.ProtoReflect.Descriptor instead.
func (*ListSecurityPolicysResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{105}
}

func (x *ListSecurityPolicysResponse) GetSecuritypolicy() []*SecurityPolicy {
	if x != nil {
		return x.Securitypolicy
	}
	return nil
}

func (x *ListSecurityPolicysResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get securitypolicy request
type GetSecurityPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSecurityPolicyRequest) Reset() {
	*x = GetSecurityPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecurityPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityPolicyRequest) ProtoMessage() {}

func (x *GetSecurityPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetSecurityPolicyRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{106}
}

func (x *GetSecurityPolicyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create SecurityRule Request
type CreateSecurityRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// securityrule
	Securityrule *SecurityRule `protobuf:"bytes,2,opt,name=securityrule,proto3" json:"securityrule,omitempty"`
	// securityrule_id
	SecurityruleId string `protobuf:"bytes,3,opt,name=securityrule_id,json=securityruleId,proto3" json:"securityrule_id,omitempty"`
}

func (x *CreateSecurityRuleRequest) Reset() {
	*x = CreateSecurityRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSecurityRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSecurityRuleRequest) ProtoMessage() {}

func (x *CreateSecurityRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSecurityRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateSecurityRuleRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{107}
}

func (x *CreateSecurityRuleRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateSecurityRuleRequest) GetSecurityrule() *SecurityRule {
	if x != nil {
		return x.Securityrule
	}
	return nil
}

func (x *CreateSecurityRuleRequest) GetSecurityruleId() string {
	if x != nil {
		return x.SecurityruleId
	}
	return ""
}

// Delete securityrule request
type DeleteSecurityRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// securityrule id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSecurityRuleRequest) Reset() {
	*x = DeleteSecurityRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecurityRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecurityRuleRequest) ProtoMessage() {}

func (x *DeleteSecurityRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecurityRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteSecurityRuleRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{108}
}

func (x *DeleteSecurityRuleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update securityrule request
type UpdateSecurityRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated securityrule info
	Securityrule *SecurityRule `protobuf:"bytes,1,opt,name=securityrule,proto3" json:"securityrule,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateSecurityRuleRequest) Reset() {
	*x = UpdateSecurityRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSecurityRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSecurityRuleRequest) ProtoMessage() {}

func (x *UpdateSecurityRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSecurityRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateSecurityRuleRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{109}
}

func (x *UpdateSecurityRuleRequest) GetSecurityrule() *SecurityRule {
	if x != nil {
		return x.Securityrule
	}
	return nil
}

func (x *UpdateSecurityRuleRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List securityrule request
type ListSecurityRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSecurityRulesRequest) Reset() {
	*x = ListSecurityRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecurityRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityRulesRequest) ProtoMessage() {}

func (x *ListSecurityRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityRulesRequest.ProtoReflect.Descriptor instead.
func (*ListSecurityRulesRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{110}
}

func (x *ListSecurityRulesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListSecurityRulesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSecurityRulesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List securityrule response
type ListSecurityRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of securityrules
	Securityrule []*SecurityRule `protobuf:"bytes,1,rep,name=securityrule,proto3" json:"securityrule,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSecurityRulesResponse) Reset() {
	*x = ListSecurityRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecurityRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityRulesResponse) ProtoMessage() {}

func (x *ListSecurityRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityRulesResponse.ProtoReflect.Descriptor instead.
func (*ListSecurityRulesResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{111}
}

func (x *ListSecurityRulesResponse) GetSecurityrule() []*SecurityRule {
	if x != nil {
		return x.Securityrule
	}
	return nil
}

func (x *ListSecurityRulesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get securityrule request
type GetSecurityRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSecurityRuleRequest) Reset() {
	*x = GetSecurityRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecurityRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityRuleRequest) ProtoMessage() {}

func (x *GetSecurityRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityRuleRequest.ProtoReflect.Descriptor instead.
func (*GetSecurityRuleRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{112}
}

func (x *GetSecurityRuleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Create SecurityProfile Request
type CreateSecurityProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// securityprofile
	Securityprofile *SecurityProfile `protobuf:"bytes,2,opt,name=securityprofile,proto3" json:"securityprofile,omitempty"`
	// securityprofile_id
	SecurityprofileId string `protobuf:"bytes,3,opt,name=securityprofile_id,json=securityprofileId,proto3" json:"securityprofile_id,omitempty"`
}

func (x *CreateSecurityProfileRequest) Reset() {
	*x = CreateSecurityProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSecurityProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSecurityProfileRequest) ProtoMessage() {}

func (x *CreateSecurityProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSecurityProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateSecurityProfileRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{113}
}

func (x *CreateSecurityProfileRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateSecurityProfileRequest) GetSecurityprofile() *SecurityProfile {
	if x != nil {
		return x.Securityprofile
	}
	return nil
}

func (x *CreateSecurityProfileRequest) GetSecurityprofileId() string {
	if x != nil {
		return x.SecurityprofileId
	}
	return ""
}

// Delete securityprofile request
type DeleteSecurityProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// securityprofile id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSecurityProfileRequest) Reset() {
	*x = DeleteSecurityProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecurityProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecurityProfileRequest) ProtoMessage() {}

func (x *DeleteSecurityProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecurityProfileRequest.ProtoReflect.Descriptor instead.
func (*DeleteSecurityProfileRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{114}
}

func (x *DeleteSecurityProfileRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Update securityprofile request
type UpdateSecurityProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// updated securityprofile info
	Securityprofile *SecurityProfile `protobuf:"bytes,1,opt,name=securityprofile,proto3" json:"securityprofile,omitempty"`
	// list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateSecurityProfileRequest) Reset() {
	*x = UpdateSecurityProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSecurityProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSecurityProfileRequest) ProtoMessage() {}

func (x *UpdateSecurityProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSecurityProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateSecurityProfileRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{115}
}

func (x *UpdateSecurityProfileRequest) GetSecurityprofile() *SecurityProfile {
	if x != nil {
		return x.Securityprofile
	}
	return nil
}

func (x *UpdateSecurityProfileRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// List securityprofile request
type ListSecurityProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parent
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// pagination: page-size
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// pagination: start token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSecurityProfilesRequest) Reset() {
	*x = ListSecurityProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecurityProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityProfilesRequest) ProtoMessage() {}

func (x *ListSecurityProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityProfilesRequest.ProtoReflect.Descriptor instead.
func (*ListSecurityProfilesRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{116}
}

func (x *ListSecurityProfilesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListSecurityProfilesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSecurityProfilesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// List securityprofile response
type ListSecurityProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of securityprofiles
	Securityprofile []*SecurityProfile `protobuf:"bytes,1,rep,name=securityprofile,proto3" json:"securityprofile,omitempty"`
	// next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSecurityProfilesResponse) Reset() {
	*x = ListSecurityProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecurityProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityProfilesResponse) ProtoMessage() {}

func (x *ListSecurityProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityProfilesResponse.ProtoReflect.Descriptor instead.
func (*ListSecurityProfilesResponse) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{117}
}

func (x *ListSecurityProfilesResponse) GetSecurityprofile() []*SecurityProfile {
	if x != nil {
		return x.Securityprofile
	}
	return nil
}

func (x *ListSecurityProfilesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Get securityprofile request
type GetSecurityProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSecurityProfileRequest) Reset() {
	*x = GetSecurityProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudrpc_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecurityProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityProfileRequest) ProtoMessage() {}

func (x *GetSecurityProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudrpc_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityProfileRequest.ProtoReflect.Descriptor instead.
func (*GetSecurityProfileRequest) Descriptor() ([]byte, []int) {
	return file_cloudrpc_proto_rawDescGZIP(), []int{118}
}

func (x *GetSecurityProfileRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_cloudrpc_proto protoreflect.FileDescriptor

var file_cloudrpc_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x76, 0x6e, 0x69, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x62, 0x67, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x09, 0x76, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xb8, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21,
	0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x91, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a,
	0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7d, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x4b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x8a, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x8d, 0x01,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x75, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x47, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x02, 0x69, 0x64, 0x22, 0xaa, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x76, 0x6e, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x56, 0x6e, 0x69, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x76, 0x6e, 0x69,
	0x63, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x6e,
	0x69, 0x63, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04,
	0x76, 0x6e, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6e, 0x69, 0x63,
	0x52, 0x04, 0x76, 0x6e, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6e, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f,
	0x0a, 0x1d, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x6e, 0x69, 0x63, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x75, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6e, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x76, 0x6e, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x04, 0x76, 0x6e,
	0x69, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x47, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f,
	0x0a, 0x1d, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x6e, 0x69, 0x63, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x51, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x25, 0x0a, 0x23, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x25, 0x0a, 0x23, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x99, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x25, 0x0a, 0x23, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x53, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x25, 0x0a,
	0x23, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x20, 0x0a, 0x1e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x40, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x20, 0x0a, 0x1e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x8f, 0x01, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x26, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x20, 0x0a, 0x1e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x79, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x20, 0x0a,
	0x1e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0d, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22,
	0x5c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x28, 0x0a, 0x26, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0xae, 0x01,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0d,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x9f,
	0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x99, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x59, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x67, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x42,
	0x67, 0x70, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x03, 0x62, 0x67,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x03, 0x62, 0x67, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x67, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x67, 0x70, 0x49, 0x64, 0x22, 0x48, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x67, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x42, 0x67, 0x70, 0x52, 0x02, 0x69, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x67, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x03,
	0x62, 0x67, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x03,
	0x62, 0x67, 0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x67, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x42, 0x67, 0x70, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x71,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x67, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x62, 0x67, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x03, 0x62, 0x67, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x45, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x67, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x42, 0x67, 0x70, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0x96, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x07, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x47,
	0x50, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x52, 0x07,
	0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcd,
	0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72,
	0x41, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x42, 0x47, 0x50, 0x50,
	0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a,
	0x09, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x61, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x61, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x61, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x61, 0x66, 0x49, 0x64, 0x22, 0x54,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x09, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x61, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x09, 0x62,
	0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x61, 0x66, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x47,
	0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x89, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41,
	0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x62, 0x67,
	0x70, 0x70, 0x65, 0x65, 0x72, 0x61, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42,
	0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x09, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65,
	0x72, 0x61, 0x66, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x51, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbf,
	0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a,
	0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x22, 0x50, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x93, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x46, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x52, 0x02, 0x69, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x07, 0x6e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4d, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27,
	0x0a, 0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x55, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x5a, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27,
	0x0a, 0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x02, 0x69, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x6e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x9d, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x57, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a,
	0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x91, 0x01, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7d, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4b, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a,
	0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x91, 0x01, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7d, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4b, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x56, 0x70, 0x63, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x03,
	0x76, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x03, 0x76, 0x70, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x22,
	0x48, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x56, 0x70, 0x63, 0x52, 0x02, 0x69, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x70, 0x63,
	0x52, 0x03, 0x76, 0x70, 0x63, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x70, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x70, 0x63, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x71, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x70, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x52, 0x03, 0x76, 0x70, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x45, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x56, 0x70, 0x63, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0x96,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x07, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x81, 0x01,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x07, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xf0, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x0e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a,
	0x27, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9d, 0x01, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5b, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a,
	0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x55,
	0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x5a,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a,
	0x25, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x9d, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x57, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x2a, 0x0a, 0x28, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x22, 0x60, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xa3, 0x01,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xa1, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x02, 0x69, 0x64, 0x32, 0x8f, 0x82, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xad, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x73, 0xda, 0x41, 0x00, 0x12, 0xab, 0x01,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x7d, 0x3a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0xda, 0x41, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x2a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x7d, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x7d, 0xda, 0x41, 0x02, 0x69,
	0x64, 0x12, 0xaa, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x32, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x3d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x7d,
	0x3a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0xda, 0x41, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x9d,
	0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x32,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12,
	0x14, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x8d,
	0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x7d,
	0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0x9c,
	0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x32, 0x13,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x69, 0x64, 0x3d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x7d, 0x3a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0xda, 0x41, 0x11, 0x70, 0x6f, 0x72, 0x74,
	0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x95, 0x01,
	0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12,
	0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x7d, 0x2f,
	0x7b, 0x70, 0x6f, 0x72, 0x74, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6e, 0x69, 0x63, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56,
	0x6e, 0x69, 0x63, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x12, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x76, 0x6e, 0x69, 0x63, 0x73, 0x7d, 0x3a,
	0x04, 0x76, 0x6e, 0x69, 0x63, 0xda, 0x41, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x76,
	0x6e, 0x69, 0x63, 0x2c, 0x76, 0x6e, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x12, 0x7b, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6e, 0x69, 0x63, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x76, 0x6e, 0x69, 0x63, 0x73, 0x7d, 0x2f, 0x7b, 0x76, 0x6e,
	0x69, 0x63, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0x9c, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x6e, 0x69, 0x63, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6e, 0x69, 0x63,
	0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x32, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76,
	0x6e, 0x69, 0x63, 0x2e, 0x69, 0x64, 0x3d, 0x76, 0x6e, 0x69, 0x63, 0x73, 0x7d, 0x3a, 0x04, 0x76,
	0x6e, 0x69, 0x63, 0xda, 0x41, 0x11, 0x76, 0x6e, 0x69, 0x63, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x95, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x6e, 0x69, 0x63, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6e, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6e, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x76, 0x6e, 0x69, 0x63, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x83, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x56, 0x6e, 0x69, 0x63, 0x12, 0x2e, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x6e, 0x69,
	0x63, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x69, 0x64, 0x3d, 0x76, 0x6e, 0x69, 0x63, 0x73, 0x7d, 0x2f, 0x7b, 0x76, 0x6e, 0x69, 0x63, 0x7d,
	0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xc0, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x4a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x7d, 0x3a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0xda, 0x41, 0x1d, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x2c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x36, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x7d, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xbf, 0x01, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x36,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x32, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x69, 0x64, 0x3d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x7d, 0x3a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0xda, 0x41, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2c,
	0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0xa9, 0x01, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x35, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x7d, 0xda,
	0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x9c, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x7d, 0x2f, 0x7b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xc7, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x7d, 0x3a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0xda,
	0x41, 0x1f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a,
	0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x7d, 0x2f, 0x7b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xc6, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x32, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x69, 0x64, 0x3d, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x7d, 0x3a, 0x0a, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0xda, 0x41, 0x17, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x12, 0xad, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0xa1, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x7d, 0x2f, 0x7b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x7d, 0xda,
	0x41, 0x02, 0x69, 0x64, 0x12, 0xa4, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22,
	0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x7d, 0x3a, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0xda, 0x41, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x7f, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x7d, 0x2f,
	0x7b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xa3, 0x01, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x32,
	0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x3d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x7d, 0x3a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0xda, 0x41, 0x12,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x12, 0x99, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x88,
	0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x7d, 0x2f, 0x7b, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xdc, 0x01, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x3a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x5a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x7d, 0x3a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0xda, 0x41, 0x25, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x9f, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x3a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x2a, 0x27, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x7d, 0x2f, 0x7b, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xdb, 0x01, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x3a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x59, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x36, 0x32, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x3d, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x7d, 0x3a, 0x0d, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0xda, 0x41, 0x1a, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2c, 0x20, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0xb9, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0xb0, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x69, 0x64, 0x3d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x7d, 0x2f, 0x7b, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x67, 0x70, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x22, 0x32, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x62, 0x67, 0x70, 0x73, 0x7d, 0x3a, 0x03, 0x62, 0x67, 0x70, 0xda, 0x41, 0x11, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x62, 0x67, 0x70, 0x2c, 0x62, 0x67, 0x70, 0x5f, 0x69, 0x64,
	0x12, 0x77, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x67, 0x70, 0x12, 0x30, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x67, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a,
	0x13, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x62, 0x67, 0x70, 0x73, 0x7d, 0x2f, 0x7b,
	0x62, 0x67, 0x70, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0x95, 0x01, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x67, 0x70, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x67, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x22, 0x31,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x32, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x62, 0x67, 0x70,
	0x2e, 0x69, 0x64, 0x3d, 0x62, 0x67, 0x70, 0x73, 0x7d, 0x3a, 0x03, 0x62, 0x67, 0x70, 0xda, 0x41,
	0x10, 0x62, 0x67, 0x70, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x12, 0x91, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x67, 0x70, 0x73, 0x12, 0x2f,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x67, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x67, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x62, 0x67, 0x70, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x7e, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x42, 0x67, 0x70, 0x12,
	0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x67, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x42, 0x67, 0x70, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x62, 0x67, 0x70, 0x73, 0x7d, 0x2f, 0x7b, 0x62, 0x67, 0x70, 0x7d,
	0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xb2, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42,
	0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x15,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x62, 0x67, 0x70, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x7d, 0x3a, 0x07, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0xda, 0x41,
	0x19, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2c,
	0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x62, 0x67, 0x70, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x7d, 0x2f, 0x7b, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x7d, 0xda,
	0x41, 0x02, 0x69, 0x64, 0x12, 0xb1, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x47,
	0x50, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47,
	0x50, 0x50, 0x65, 0x65, 0x72, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x32, 0x19, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x3d, 0x62,
	0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x73, 0x7d, 0x3a, 0x07, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65,
	0x72, 0xda, 0x41, 0x14, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2c, 0x20, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x92, 0x01, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12,
	0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x7d, 0x2f, 0x7b, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x7d, 0xda, 0x41, 0x02, 0x69,
	0x64, 0x12, 0xc0, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x47, 0x50, 0x50,
	0x65, 0x65, 0x72, 0x41, 0x66, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x47, 0x50,
	0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42,
	0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x62, 0x67,
	0x70, 0x70, 0x65, 0x65, 0x72, 0x61, 0x66, 0x73, 0x7d, 0x3a, 0x09, 0x62, 0x67, 0x70, 0x70, 0x65,
	0x65, 0x72, 0x61, 0x66, 0xda, 0x41, 0x1d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x62, 0x67,
	0x70, 0x70, 0x65, 0x65, 0x72, 0x61, 0x66, 0x2c, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x61,
	0x66, 0x5f, 0x69, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x2a, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65,
	0x72, 0x61, 0x66, 0x73, 0x7d, 0x2f, 0x7b, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x61, 0x66,
	0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xbf, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x22, 0x49, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x32, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x62, 0x67, 0x70, 0x70,
	0x65, 0x65, 0x72, 0x61, 0x66, 0x2e, 0x69, 0x64, 0x3d, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72,
	0x61, 0x66, 0x73, 0x7d, 0x3a, 0x09, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x61, 0x66, 0xda,
	0x41, 0x16, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x61, 0x66, 0x2c, 0x20, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0xa9, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x73, 0x12, 0x35, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41,
	0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x61, 0x66, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x9c, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x47, 0x50, 0x50,
	0x65, 0x65, 0x72, 0x41, 0x66, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65,
	0x72, 0x41, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x50,
	0x65, 0x65, 0x72, 0x41, 0x66, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x61, 0x66,
	0x73, 0x7d, 0x2f, 0x7b, 0x62, 0x67, 0x70, 0x70, 0x65, 0x65, 0x72, 0x61, 0x66, 0x7d, 0xda, 0x41,
	0x02, 0x69, 0x64, 0x12, 0xb2, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x15, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x7d, 0x3a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0xda, 0x41, 0x19, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2c, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x2a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x7d, 0x2f, 0x7b, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x7d, 0xda, 0x41, 0x02,
	0x69, 0x64, 0x12, 0xb1, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x32, 0x19, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x64, 0x3d, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x7d, 0x3a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0xda,
	0x41, 0x14, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x7d,
	0x2f, 0x7b, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12,
	0xb2, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x7d, 0x3a,
	0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0xda, 0x41, 0x19, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x2c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x2c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x7d, 0x2f,
	0x7b, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xb1,
	0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x22,
	0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x32, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x2e, 0x69, 0x64, 0x3d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x73, 0x7d, 0x3a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0xda, 0x41, 0x14, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x12, 0xa0, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69,
	0x64, 0x3d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x7d, 0x2f, 0x7b, 0x6e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xd5, 0x01, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x7d, 0x3a, 0x0c,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0xda, 0x41, 0x23, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x32, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x7d, 0x2f, 0x7b, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64,
	0x12, 0xd4, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x32, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x69, 0x64, 0x3d, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x7d, 0x3a, 0x0c, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0xda, 0x41, 0x19, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0xb5, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x38, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0xab, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x36, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x6e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x7d, 0x2f, 0x7b, 0x6e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xab, 0x01,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x33,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x3e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x7d, 0x3a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0xda, 0x41, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x2c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x33, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x2a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x7d, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x7d, 0xda, 0x41, 0x02, 0x69,
	0x64, 0x12, 0xaa, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22,
	0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x32, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x2e, 0x69, 0x64, 0x3d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x7d,
	0x3a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0xda, 0x41, 0x13, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x9d,
	0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x32,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12,
	0x14, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x8d,
	0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x7d,
	0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xab,
	0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x3e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x7d, 0x3a, 0x06, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0xda, 0x41, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2c, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x83, 0x01, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x33, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x7d, 0x2f, 0x7b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x7d, 0xda, 0x41, 0x02,
	0x69, 0x64, 0x12, 0xaa, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x32, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x3d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x7d, 0x3a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0xda, 0x41, 0x13, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12,
	0x9d, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x8d, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x30, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12,
	0x19, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x7d, 0x2f, 0x7b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12,
	0x96, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x70, 0x63, 0x12, 0x30, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x56, 0x70, 0x63, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x11, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x76, 0x70, 0x63, 0x73, 0x7d, 0x3a,
	0x03, 0x76, 0x70, 0x63, 0xda, 0x41, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x76, 0x70,
	0x63, 0x2c, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x12, 0x77, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x70, 0x63, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x70, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64,
	0x3d, 0x76, 0x70, 0x63, 0x73, 0x7d, 0x2f, 0x7b, 0x76, 0x70, 0x63, 0x7d, 0xda, 0x41, 0x02, 0x69,
	0x64, 0x12, 0x95, 0x01, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x70, 0x63, 0x12,
	0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x32, 0x11,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x70, 0x63, 0x2e, 0x69, 0x64, 0x3d, 0x76, 0x70, 0x63, 0x73,
	0x7d, 0x3a, 0x03, 0x76, 0x70, 0x63, 0xda, 0x41, 0x10, 0x76, 0x70, 0x63, 0x2c, 0x20, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x91, 0x01, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x70, 0x63, 0x73, 0x12, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x70, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x70, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x76,
	0x70, 0x63, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x7e, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x56, 0x70, 0x63, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x70, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x22, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x76, 0x70, 0x63,
	0x73, 0x7d, 0x2f, 0x7b, 0x76, 0x70, 0x63, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xb2, 0x01,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x12,
	0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x22, 0x42,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x73, 0x7d, 0x3a, 0x07, 0x76,
	0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0xda, 0x41, 0x19, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c,
	0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x2c, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x50, 0x43,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x50, 0x43, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x69, 0x64, 0x3d, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x73, 0x7d, 0x2f, 0x7b, 0x76,
	0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xb1, 0x01, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x12, 0x34,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x22, 0x41, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x32, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x70, 0x63, 0x70,
	0x65, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x3d, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x73, 0x7d,
	0x3a, 0x07, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0xda, 0x41, 0x14, 0x76, 0x70, 0x63, 0x70,
	0x65, 0x65, 0x72, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x50, 0x43, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x50, 0x43, 0x50, 0x65, 0x65, 0x72, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64,
	0x3d, 0x76, 0x70, 0x63, 0x70, 0x65, 0x65, 0x72, 0x73, 0x7d, 0x2f, 0x7b, 0x76, 0x70, 0x63, 0x70,
	0x65, 0x65, 0x72, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xe3, 0x01, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x3b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x73, 0x7d, 0x3a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0xda, 0x41, 0x27, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2c, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x12,
	0xa3, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x2a, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x7d, 0x2f,
	0x7b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d,
	0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xe2, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3b,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x5d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x39, 0x32, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x69, 0x64, 0x3d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x7d, 0x3a, 0x0e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xda, 0x41, 0x1b, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2c, 0x20, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0xbd, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x73, 0x12, 0x3a, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73,
	0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0xb5, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x38, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x73, 0x7d, 0x2f, 0x7b, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0xda, 0x41, 0x02,
	0x69, 0x64, 0x12, 0xd5, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x7d, 0x3a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x72, 0x75, 0x6c, 0x65, 0xda, 0x41, 0x23, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x2c, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a, 0x25, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75,
	0x6c, 0x65, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xd4, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33,
	0x32, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72,
	0x75, 0x6c, 0x65, 0x2e, 0x69, 0x64, 0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x7d, 0x3a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72,
	0x75, 0x6c, 0x65, 0xda, 0x41, 0x19, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75,
	0x6c, 0x65, 0x2c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12,
	0xb5, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x7d, 0xda, 0x41,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x36, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x69, 0x64, 0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x7d,
	0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xea, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x3c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x62,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x7d, 0x3a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0xda, 0x41, 0x29, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2c,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x12, 0xa7, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x69, 0x64, 0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x12, 0xe9, 0x01, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x32, 0x29, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x69, 0x64, 0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x7d, 0x3a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0xda, 0x41, 0x1c, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2c, 0x20, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0xc1, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x3b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x7d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0xba, 0x01, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64,
	0x3d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x7d, 0xda, 0x41, 0x02, 0x69, 0x64, 0x42, 0x69, 0x0a, 0x1e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x08, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x50, 0x43, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6f,
	0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloudrpc_proto_rawDescOnce sync.Once
	file_cloudrpc_proto_rawDescData = file_cloudrpc_proto_rawDesc
)

func file_cloudrpc_proto_rawDescGZIP() []byte {
	file_cloudrpc_proto_rawDescOnce.Do(func() {
		file_cloudrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloudrpc_proto_rawDescData)
	})
	return file_cloudrpc_proto_rawDescData
}

var file_cloudrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 119)
var file_cloudrpc_proto_goTypes = []interface{}{
	(*GetDeviceCapabilitiesRequest)(nil), // 0: opi_api.network.cloud.v1alpha1.GetDeviceCapabilitiesRequest
	(*CreateDeviceRequest)(nil),          // 1: opi_api.network.cloud.v1alpha1.CreateDeviceRequest
	(*DeleteDeviceRequest)(nil),          // 2: opi_api.network.cloud.v1alpha1.DeleteDeviceRequest
	(*UpdateDeviceRequest)(nil),          // 3: opi_api.network.cloud.v1alpha1.UpdateDeviceRequest
	(*ListDevicesRequest)(nil),           // 4: opi_api.network.cloud.v1alpha1.ListDevicesRequest
	(*ListDevicesResponse)(nil),          // 5: opi_api.network.cloud.v1alpha1.ListDevicesResponse
	(*GetDeviceRequest)(nil),             // 6: opi_api.network.cloud.v1alpha1.GetDeviceRequest
	(*UpdatePortRequest)(nil),            // 7: opi_api.network.cloud.v1alpha1.UpdatePortRequest
	(*ListPortsRequest)(nil),             // 8: opi_api.network.cloud.v1alpha1.ListPortsRequest
	(*ListPortsResponse)(nil),            // 9: opi_api.network.cloud.v1alpha1.ListPortsResponse
	(*GetPortRequest)(nil),               // 10: opi_api.network.cloud.v1alpha1.GetPortRequest
	(*CreateVnicRequest)(nil),            // 11: opi_api.network.cloud.v1alpha1.CreateVnicRequest
	(*DeleteVnicRequest)(nil),            // 12: opi_api.network.cloud.v1alpha1.DeleteVnicRequest
	(*UpdateVnicRequest)(nil),            // 13: opi_api.network.cloud.v1alpha1.UpdateVnicRequest
	(*ListVnicsRequest)(nil),             // 14: opi_api.network.cloud.v1alpha1.ListVnicsRequest
	(*ListVnicsResponse)(nil),            // 15: opi_api.network.cloud.v1alpha1.ListVnicsResponse
	(*GetVnicRequest)(nil),               // 16: opi_api.network.cloud.v1alpha1.GetVnicRequest
	(*CreateInterfaceRequest)(nil),       // 17: opi_api.network.cloud.v1alpha1.CreateInterfaceRequest
	(*DeleteInterfaceRequest)(nil),       // 18: opi_api.network.cloud.v1alpha1.DeleteInterfaceRequest
	(*UpdateInterfaceRequest)(nil),       // 19: opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest
	(*ListInterfacesRequest)(nil),        // 20: opi_api.network.cloud.v1alpha1.ListInterfacesRequest
	(*ListInterfacesResponse)(nil),       // 21: opi_api.network.cloud.v1alpha1.ListInterfacesResponse
	(*GetInterfaceRequest)(nil),          // 22: opi_api.network.cloud.v1alpha1.GetInterfaceRequest
	(*CreateRouteTableRequest)(nil),      // 23: opi_api.network.cloud.v1alpha1.CreateRouteTableRequest
	(*DeleteRouteTableRequest)(nil),      // 24: opi_api.network.cloud.v1alpha1.DeleteRouteTableRequest
	(*UpdateRouteTableRequest)(nil),      // 25: opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest
	(*ListRouteTablesRequest)(nil),       // 26: opi_api.network.cloud.v1alpha1.ListRouteTablesRequest
	(*ListRouteTablesResponse)(nil),      // 27: opi_api.network.cloud.v1alpha1.ListRouteTablesResponse
	(*GetRouteTableRequest)(nil),         // 28: opi_api.network.cloud.v1alpha1.GetRouteTableRequest
	(*CreateRouteRequest)(nil),           // 29: opi_api.network.cloud.v1alpha1.CreateRouteRequest
	(*DeleteRouteRequest)(nil),           // 30: opi_api.network.cloud.v1alpha1.DeleteRouteRequest
	(*UpdateRouteRequest)(nil),           // 31: opi_api.network.cloud.v1alpha1.UpdateRouteRequest
	(*ListRoutesRequest)(nil),            // 32: opi_api.network.cloud.v1alpha1.ListRoutesRequest
	(*ListRoutesResponse)(nil),           // 33: opi_api.network.cloud.v1alpha1.ListRoutesResponse
	(*GetRouteRequest)(nil),              // 34: opi_api.network.cloud.v1alpha1.GetRouteRequest
	(*CreateUnderlayRouteRequest)(nil),   // 35: opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest
	(*DeleteUnderlayRouteRequest)(nil),   // 36: opi_api.network.cloud.v1alpha1.DeleteUnderlayRouteRequest
	(*UpdateUnderlayRouteRequest)(nil),   // 37: opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest
	(*ListUnderlayRoutesRequest)(nil),    // 38: opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest
	(*ListUnderlayRoutesResponse)(nil),   // 39: opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse
	(*GetUnderlayRouteRequest)(nil),      // 40: opi_api.network.cloud.v1alpha1.GetUnderlayRouteRequest
	(*CreateBgpRequest)(nil),             // 41: opi_api.network.cloud.v1alpha1.CreateBgpRequest
	(*DeleteBgpRequest)(nil),             // 42: opi_api.network.cloud.v1alpha1.DeleteBgpRequest
	(*UpdateBgpRequest)(nil),             // 43: opi_api.network.cloud.v1alpha1.UpdateBgpRequest
	(*ListBgpsRequest)(nil),              // 44: opi_api.network.cloud.v1alpha1.ListBgpsRequest
	(*ListBgpsResponse)(nil),             // 45: opi_api.network.cloud.v1alpha1.ListBgpsResponse
	(*GetBgpRequest)(nil),                // 46: opi_api.network.cloud.v1alpha1.GetBgpRequest
	(*CreateBGPPeerRequest)(nil),         // 47: opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest
	(*DeleteBGPPeerRequest)(nil),         // 48: opi_api.network.cloud.v1alpha1.DeleteBGPPeerRequest
	(*UpdateBGPPeerRequest)(nil),         // 49: opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest
	(*ListBGPPeersRequest)(nil),          // 50: opi_api.network.cloud.v1alpha1.ListBGPPeersRequest
	(*ListBGPPeersResponse)(nil),         // 51: opi_api.network.cloud.v1alpha1.ListBGPPeersResponse
	(*GetBGPPeerRequest)(nil),            // 52: opi_api.network.cloud.v1alpha1.GetBGPPeerRequest
	(*CreateBGPPeerAfRequest)(nil),       // 53: opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest
	(*DeleteBGPPeerAfRequest)(nil),       // 54: opi_api.network.cloud.v1alpha1.DeleteBGPPeerAfRequest
	(*UpdateBGPPeerAfRequest)(nil),       // 55: opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest
	(*ListBGPPeerAfsRequest)(nil),        // 56: opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest
	(*ListBGPPeerAfsResponse)(nil),       // 57: opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse
	(*GetBGPPeerAfRequest)(nil),          // 58: opi_api.network.cloud.v1alpha1.GetBGPPeerAfRequest
	(*CreateMappingRequest)(nil),         // 59: opi_api.network.cloud.v1alpha1.CreateMappingRequest
	(*DeleteMappingRequest)(nil),         // 60: opi_api.network.cloud.v1alpha1.DeleteMappingRequest
	(*UpdateMappingRequest)(nil),         // 61: opi_api.network.cloud.v1alpha1.UpdateMappingRequest
	(*ListMappingsRequest)(nil),          // 62: opi_api.network.cloud.v1alpha1.ListMappingsRequest
	(*ListMappingsResponse)(nil),         // 63: opi_api.network.cloud.v1alpha1.ListMappingsResponse
	(*GetMappingRequest)(nil),            // 64: opi_api.network.cloud.v1alpha1.GetMappingRequest
	(*CreateNextHopRequest)(nil),         // 65: opi_api.network.cloud.v1alpha1.CreateNextHopRequest
	(*DeleteNextHopRequest)(nil),         // 66: opi_api.network.cloud.v1alpha1.DeleteNextHopRequest
	(*UpdateNextHopRequest)(nil),         // 67: opi_api.network.cloud.v1alpha1.UpdateNextHopRequest
	(*ListNextHopsRequest)(nil),          // 68: opi_api.network.cloud.v1alpha1.ListNextHopsRequest
	(*ListNextHopsResponse)(nil),         // 69: opi_api.network.cloud.v1alpha1.ListNextHopsResponse
	(*GetNextHopRequest)(nil),            // 70: opi_api.network.cloud.v1alpha1.GetNextHopRequest
	(*CreateNextHopGroupRequest)(nil),    // 71: opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest
	(*DeleteNextHopGroupRequest)(nil),    // 72: opi_api.network.cloud.v1alpha1.DeleteNextHopGroupRequest
	(*UpdateNextHopGroupRequest)(nil),    // 73: opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest
	(*ListNextHopGroupsRequest)(nil),     // 74: opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest
	(*ListNextHopGroupsResponse)(nil),    // 75: opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse
	(*GetNextHopGroupRequest)(nil),       // 76: opi_api.network.cloud.v1alpha1.GetNextHopGroupRequest
	(*CreateSubnetRequest)(nil),          // 77: opi_api.network.cloud.v1alpha1.CreateSubnetRequest
	(*DeleteSubnetRequest)(nil),          // 78: opi_api.network.cloud.v1alpha1.DeleteSubnetRequest
	(*UpdateSubnetRequest)(nil),          // 79: opi_api.network.cloud.v1alpha1.UpdateSubnetRequest
	(*ListSubnetsRequest)(nil),           // 80: opi_api.network.cloud.v1alpha1.ListSubnetsRequest
	(*ListSubnetsResponse)(nil),          // 81: opi_api.network.cloud.v1alpha1.ListSubnetsResponse
	(*GetSubnetRequest)(nil),             // 82: opi_api.network.cloud.v1alpha1.GetSubnetRequest
	(*CreateTunnelRequest)(nil),          // 83: opi_api.network.cloud.v1alpha1.CreateTunnelRequest
	(*DeleteTunnelRequest)(nil),          // 84: opi_api.network.cloud.v1alpha1.DeleteTunnelRequest
	(*UpdateTunnelRequest)(nil),          // 85: opi_api.network.cloud.v1alpha1.UpdateTunnelRequest
	(*ListTunnelsRequest)(nil),           // 86: opi_api.network.cloud.v1alpha1.ListTunnelsRequest
	(*ListTunnelsResponse)(nil),          // 87: opi_api.network.cloud.v1alpha1.ListTunnelsResponse
	(*GetTunnelRequest)(nil),             // 88: opi_api.network.cloud.v1alpha1.GetTunnelRequest
	(*CreateVpcRequest)(nil),             // 89: opi_api.network.cloud.v1alpha1.CreateVpcRequest
	(*DeleteVpcRequest)(nil),             // 90: opi_api.network.cloud.v1alpha1.DeleteVpcRequest
	(*UpdateVpcRequest)(nil),             // 91: opi_api.network.cloud.v1alpha1.UpdateVpcRequest
	(*ListVpcsRequest)(nil),              // 92: opi_api.network.cloud.v1alpha1.ListVpcsRequest
	(*ListVpcsResponse)(nil),             // 93: opi_api.network.cloud.v1alpha1.ListVpcsResponse
	(*GetVpcRequest)(nil),                // 94: opi_api.network.cloud.v1alpha1.GetVpcRequest
	(*CreateVPCPeerRequest)(nil),         // 95: opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest
	(*DeleteVPCPeerRequest)(nil),         // 96: opi_api.network.cloud.v1alpha1.DeleteVPCPeerRequest
	(*UpdateVPCPeerRequest)(nil),         // 97: opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest
	(*ListVPCPeersRequest)(nil),          // 98: opi_api.network.cloud.v1alpha1.ListVPCPeersRequest
	(*ListVPCPeersResponse)(nil),         // 99: opi_api.network.cloud.v1alpha1.ListVPCPeersResponse
	(*GetVPCPeerRequest)(nil),            // 100: opi_api.network.cloud.v1alpha1.GetVPCPeerRequest
	(*CreateSecurityPolicyRequest)(nil),  // 101: opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest
	(*DeleteSecurityPolicyRequest)(nil),  // 102: opi_api.network.cloud.v1alpha1.DeleteSecurityPolicyRequest
	(*UpdateSecurityPolicyRequest)(nil),  // 103: opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest
	(*ListSecurityPolicysRequest)(nil),   // 104: opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest
	(*ListSecurityPolicysResponse)(nil),  // 105: opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse
	(*GetSecurityPolicyRequest)(nil),     // 106: opi_api.network.cloud.v1alpha1.GetSecurityPolicyRequest
	(*CreateSecurityRuleRequest)(nil),    // 107: opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest
	(*DeleteSecurityRuleRequest)(nil),    // 108: opi_api.network.cloud.v1alpha1.DeleteSecurityRuleRequest
	(*UpdateSecurityRuleRequest)(nil),    // 109: opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest
	(*ListSecurityRulesRequest)(nil),     // 110: opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest
	(*ListSecurityRulesResponse)(nil),    // 111: opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse
	(*GetSecurityRuleRequest)(nil),       // 112: opi_api.network.cloud.v1alpha1.GetSecurityRuleRequest
	(*CreateSecurityProfileRequest)(nil), // 113: opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest
	(*DeleteSecurityProfileRequest)(nil), // 114: opi_api.network.cloud.v1alpha1.DeleteSecurityProfileRequest
	(*UpdateSecurityProfileRequest)(nil), // 115: opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest
	(*ListSecurityProfilesRequest)(nil),  // 116: opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest
	(*ListSecurityProfilesResponse)(nil), // 117: opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse
	(*GetSecurityProfileRequest)(nil),    // 118: opi_api.network.cloud.v1alpha1.GetSecurityProfileRequest
	(*Device)(nil),                       // 119: opi_api.network.cloud.v1alpha1.Device
	(*fieldmaskpb.FieldMask)(nil),        // 120: google.protobuf.FieldMask
	(*Port)(nil),                         // 121: opi_api.network.cloud.v1alpha1.Port
	(*Vnic)(nil),                         // 122: opi_api.network.cloud.v1alpha1.Vnic
	(*Interface)(nil),                    // 123: opi_api.network.cloud.v1alpha1.Interface
	(*RouteTable)(nil),                   // 124: opi_api.network.cloud.v1alpha1.RouteTable
	(*Route)(nil),                        // 125: opi_api.network.cloud.v1alpha1.Route
	(*UnderlayRoute)(nil),                // 126: opi_api.network.cloud.v1alpha1.UnderlayRoute
	(*Bgp)(nil),                          // 127: opi_api.network.cloud.v1alpha1.Bgp
	(*BGPPeer)(nil),                      // 128: opi_api.network.cloud.v1alpha1.BGPPeer
	(*BGPPeerAf)(nil),                    // 129: opi_api.network.cloud.v1alpha1.BGPPeerAf
	(*Mapping)(nil),                      // 130: opi_api.network.cloud.v1alpha1.Mapping
	(*NextHop)(nil),                      // 131: opi_api.network.cloud.v1alpha1.NextHop
	(*NextHopGroup)(nil),                 // 132: opi_api.network.cloud.v1alpha1.NextHopGroup
	(*Subnet)(nil),                       // 133: opi_api.network.cloud.v1alpha1.Subnet
	(*Tunnel)(nil),                       // 134: opi_api.network.cloud.v1alpha1.Tunnel
	(*Vpc)(nil),                          // 135: opi_api.network.cloud.v1alpha1.Vpc
	(*VPCPeer)(nil),                      // 136: opi_api.network.cloud.v1alpha1.VPCPeer
	(*SecurityPolicy)(nil),               // 137: opi_api.network.cloud.v1alpha1.SecurityPolicy
	(*SecurityRule)(nil),                 // 138: opi_api.network.cloud.v1alpha1.SecurityRule
	(*SecurityProfile)(nil),              // 139: opi_api.network.cloud.v1alpha1.SecurityProfile
	(*DeviceCapabilities)(nil),           // 140: opi_api.network.cloud.v1alpha1.DeviceCapabilities
	(*emptypb.Empty)(nil),                // 141: google.protobuf.Empty
}
var file_cloudrpc_proto_depIdxs = []int32{
	119, // 0: opi_api.network.cloud.v1alpha1.CreateDeviceRequest.device:type_name -> opi_api.network.cloud.v1alpha1.Device
	119, // 1: opi_api.network.cloud.v1alpha1.UpdateDeviceRequest.device:type_name -> opi_api.network.cloud.v1alpha1.Device
	120, // 2: opi_api.network.cloud.v1alpha1.UpdateDeviceRequest.update_mask:type_name -> google.protobuf.FieldMask
	119, // 3: opi_api.network.cloud.v1alpha1.ListDevicesResponse.device:type_name -> opi_api.network.cloud.v1alpha1.Device
	121, // 4: opi_api.network.cloud.v1alpha1.UpdatePortRequest.port:type_name -> opi_api.network.cloud.v1alpha1.Port
	120, // 5: opi_api.network.cloud.v1alpha1.UpdatePortRequest.update_mask:type_name -> google.protobuf.FieldMask
	121, // 6: opi_api.network.cloud.v1alpha1.ListPortsResponse.port:type_name -> opi_api.network.cloud.v1alpha1.Port
	122, // 7: opi_api.network.cloud.v1alpha1.CreateVnicRequest.vnic:type_name -> opi_api.network.cloud.v1alpha1.Vnic
	122, // 8: opi_api.network.cloud.v1alpha1.UpdateVnicRequest.vnic:type_name -> opi_api.network.cloud.v1alpha1.Vnic
	120, // 9: opi_api.network.cloud.v1alpha1.UpdateVnicRequest.update_mask:type_name -> google.protobuf.FieldMask
	122, // 10: opi_api.network.cloud.v1alpha1.ListVnicsResponse.vnic:type_name -> opi_api.network.cloud.v1alpha1.Vnic
	123, // 11: opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.interface:type_name -> opi_api.network.cloud.v1alpha1.Interface
	123, // 12: opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest.interface:type_name -> opi_api.network.cloud.v1alpha1.Interface
	120, // 13: opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest.update_mask:type_name -> google.protobuf.FieldMask
	123, // 14: opi_api.network.cloud.v1alpha1.ListInterfacesResponse.interface:type_name -> opi_api.network.cloud.v1alpha1.Interface
	124, // 15: opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.routetable:type_name -> opi_api.network.cloud.v1alpha1.RouteTable
	124, // 16: opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest.routetable:type_name -> opi_api.network.cloud.v1alpha1.RouteTable
	120, // 17: opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest.update_mask:type_name -> google.protobuf.FieldMask
	124, // 18: opi_api.network.cloud.v1alpha1.ListRouteTablesResponse.routetable:type_name -> opi_api.network.cloud.v1alpha1.RouteTable
	125, // 19: opi_api.network.cloud.v1alpha1.CreateRouteRequest.route:type_name -> opi_api.network.cloud.v1alpha1.Route
	125, // 20: opi_api.network.cloud.v1alpha1.UpdateRouteRequest.route:type_name -> opi_api.network.cloud.v1alpha1.Route
	120, // 21: opi_api.network.cloud.v1alpha1.UpdateRouteRequest.update_mask:type_name -> google.protobuf.FieldMask
	125, // 22: opi_api.network.cloud.v1alpha1.ListRoutesResponse.route:type_name -> opi_api.network.cloud.v1alpha1.Route
	126, // 23: opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.underlayroute:type_name -> opi_api.network.cloud.v1alpha1.UnderlayRoute
	126, // 24: opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest.underlayroute:type_name -> opi_api.network.cloud.v1alpha1.UnderlayRoute
	120, // 25: opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest.update_mask:type_name -> google.protobuf.FieldMask
	126, // 26: opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse.underlayroute:type_name -> opi_api.network.cloud.v1alpha1.UnderlayRoute
	127, // 27: opi_api.network.cloud.v1alpha1.CreateBgpRequest.bgp:type_name -> opi_api.network.cloud.v1alpha1.Bgp
	127, // 28: opi_api.network.cloud.v1alpha1.UpdateBgpRequest.bgp:type_name -> opi_api.network.cloud.v1alpha1.Bgp
	120, // 29: opi_api.network.cloud.v1alpha1.UpdateBgpRequest.update_mask:type_name -> google.protobuf.FieldMask
	127, // 30: opi_api.network.cloud.v1alpha1.ListBgpsResponse.bgp:type_name -> opi_api.network.cloud.v1alpha1.Bgp
	128, // 31: opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.bgppeer:type_name -> opi_api.network.cloud.v1alpha1.BGPPeer
	128, // 32: opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest.bgppeer:type_name -> opi_api.network.cloud.v1alpha1.BGPPeer
	120, // 33: opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest.update_mask:type_name -> google.protobuf.FieldMask
	128, // 34: opi_api.network.cloud.v1alpha1.ListBGPPeersResponse.bgppeer:type_name -> opi_api.network.cloud.v1alpha1.BGPPeer
	129, // 35: opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.bgppeeraf:type_name -> opi_api.network.cloud.v1alpha1.BGPPeerAf
	129, // 36: opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest.bgppeeraf:type_name -> opi_api.network.cloud.v1alpha1.BGPPeerAf
	120, // 37: opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest.update_mask:type_name -> google.protobuf.FieldMask
	129, // 38: opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse.bgppeeraf:type_name -> opi_api.network.cloud.v1alpha1.BGPPeerAf
	130, // 39: opi_api.network.cloud.v1alpha1.CreateMappingRequest.mapping:type_name -> opi_api.network.cloud.v1alpha1.Mapping
	130, // 40: opi_api.network.cloud.v1alpha1.UpdateMappingRequest.mapping:type_name -> opi_api.network.cloud.v1alpha1.Mapping
	120, // 41: opi_api.network.cloud.v1alpha1.UpdateMappingRequest.update_mask:type_name -> google.protobuf.FieldMask
	130, // 42: opi_api.network.cloud.v1alpha1.ListMappingsResponse.mapping:type_name -> opi_api.network.cloud.v1alpha1.Mapping
	131, // 43: opi_api.network.cloud.v1alpha1.CreateNextHopRequest.nexthop:type_name -> opi_api.network.cloud.v1alpha1.NextHop
	131, // 44: opi_api.network.cloud.v1alpha1.UpdateNextHopRequest.nexthop:type_name -> opi_api.network.cloud.v1alpha1.NextHop
	120, // 45: opi_api.network.cloud.v1alpha1.UpdateNextHopRequest.update_mask:type_name -> google.protobuf.FieldMask
	131, // 46: opi_api.network.cloud.v1alpha1.ListNextHopsResponse.nexthop:type_name -> opi_api.network.cloud.v1alpha1.NextHop
	132, // 47: opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.nexthopgroup:type_name -> opi_api.network.cloud.v1alpha1.NextHopGroup
	132, // 48: opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest.nexthopgroup:type_name -> opi_api.network.cloud.v1alpha1.NextHopGroup
	120, // 49: opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest.update_mask:type_name -> google.protobuf.FieldMask
	132, // 50: opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse.nexthopgroup:type_name -> opi_api.network.cloud.v1alpha1.NextHopGroup
	133, // 51: opi_api.network.cloud.v1alpha1.CreateSubnetRequest.subnet:type_name -> opi_api.network.cloud.v1alpha1.Subnet
	133, // 52: opi_api.network.cloud.v1alpha1.UpdateSubnetRequest.subnet:type_name -> opi_api.network.cloud.v1alpha1.Subnet
	120, // 53: opi_api.network.cloud.v1alpha1.UpdateSubnetRequest.update_mask:type_name -> google.protobuf.FieldMask
	133, // 54: opi_api.network.cloud.v1alpha1.ListSubnetsResponse.subnet:type_name -> opi_api.network.cloud.v1alpha1.Subnet
	134, // 55: opi_api.network.cloud.v1alpha1.CreateTunnelRequest.tunnel:type_name -> opi_api.network.cloud.v1alpha1.Tunnel
	134, // 56: opi_api.network.cloud.v1alpha1.UpdateTunnelRequest.tunnel:type_name -> opi_api.network.cloud.v1alpha1.Tunnel
	120, // 57: opi_api.network.cloud.v1alpha1.UpdateTunnelRequest.update_mask:type_name -> google.protobuf.FieldMask
	134, // 58: opi_api.network.cloud.v1alpha1.ListTunnelsResponse.tunnel:type_name -> opi_api.network.cloud.v1alpha1.Tunnel
	135, // 59: opi_api.network.cloud.v1alpha1.CreateVpcRequest.vpc:type_name -> opi_api.network.cloud.v1alpha1.Vpc
	135, // 60: opi_api.network.cloud.v1alpha1.UpdateVpcRequest.vpc:type_name -> opi_api.network.cloud.v1alpha1.Vpc
	120, // 61: opi_api.network.cloud.v1alpha1.UpdateVpcRequest.update_mask:type_name -> google.protobuf.FieldMask
	135, // 62: opi_api.network.cloud.v1alpha1.ListVpcsResponse.vpc:type_name -> opi_api.network.cloud.v1alpha1.Vpc
	136, // 63: opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.vpcpeer:type_name -> opi_api.network.cloud.v1alpha1.VPCPeer
	136, // 64: opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest.vpcpeer:type_name -> opi_api.network.cloud.v1alpha1.VPCPeer
	120, // 65: opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest.update_mask:type_name -> google.protobuf.FieldMask
	136, // 66: opi_api.network.cloud.v1alpha1.ListVPCPeersResponse.vpcpeer:type_name -> opi_api.network.cloud.v1alpha1.VPCPeer
	137, // 67: opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.securitypolicy:type_name -> opi_api.network.cloud.v1alpha1.SecurityPolicy
	137, // 68: opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest.securitypolicy:type_name -> opi_api.network.cloud.v1alpha1.SecurityPolicy
	120, // 69: opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest.update_mask:type_name -> google.protobuf.FieldMask
	137, // 70: opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse.securitypolicy:type_name -> opi_api.network.cloud.v1alpha1.SecurityPolicy
	138, // 71: opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.securityrule:type_name -> opi_api.network.cloud.v1alpha1.SecurityRule
	138, // 72: opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest.securityrule:type_name -> opi_api.network.cloud.v1alpha1.SecurityRule
	120, // 73: opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest.update_mask:type_name -> google.protobuf.FieldMask
	138, // 74: opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse.securityrule:type_name -> opi_api.network.cloud.v1alpha1.SecurityRule
	139, // 75: opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.securityprofile:type_name -> opi_api.network.cloud.v1alpha1.SecurityProfile
	139, // 76: opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest.securityprofile:type_name -> opi_api.network.cloud.v1alpha1.SecurityProfile
	120, // 77: opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest.update_mask:type_name -> google.protobuf.FieldMask
	139, // 78: opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse.securityprofile:type_name -> opi_api.network.cloud.v1alpha1.SecurityProfile
	0,   // 79: opi_api.network.cloud.v1alpha1.CloudInfraService.GetDeviceCapabilities:input_type -> opi_api.network.cloud.v1alpha1.GetDeviceCapabilitiesRequest
	1,   // 80: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateDevice:input_type -> opi_api.network.cloud.v1alpha1.CreateDeviceRequest
	2,   // 81: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteDevice:input_type -> opi_api.network.cloud.v1alpha1.DeleteDeviceRequest
	3,   // 82: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateDevice:input_type -> opi_api.network.cloud.v1alpha1.UpdateDeviceRequest
	4,   // 83: opi_api.network.cloud.v1alpha1.CloudInfraService.ListDevices:input_type -> opi_api.network.cloud.v1alpha1.ListDevicesRequest
	6,   // 84: opi_api.network.cloud.v1alpha1.CloudInfraService.GetDevice:input_type -> opi_api.network.cloud.v1alpha1.GetDeviceRequest
	7,   // 85: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdatePort:input_type -> opi_api.network.cloud.v1alpha1.UpdatePortRequest
	8,   // 86: opi_api.network.cloud.v1alpha1.CloudInfraService.ListPorts:input_type -> opi_api.network.cloud.v1alpha1.ListPortsRequest
	10,  // 87: opi_api.network.cloud.v1alpha1.CloudInfraService.GetPort:input_type -> opi_api.network.cloud.v1alpha1.GetPortRequest
	11,  // 88: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateVnic:input_type -> opi_api.network.cloud.v1alpha1.CreateVnicRequest
	12,  // 89: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteVnic:input_type -> opi_api.network.cloud.v1alpha1.DeleteVnicRequest
	13,  // 90: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateVnic:input_type -> opi_api.network.cloud.v1alpha1.UpdateVnicRequest
	14,  // 91: opi_api.network.cloud.v1alpha1.CloudInfraService.ListVnics:input_type -> opi_api.network.cloud.v1alpha1.ListVnicsRequest
	16,  // 92: opi_api.network.cloud.v1alpha1.CloudInfraService.GetVnic:input_type -> opi_api.network.cloud.v1alpha1.GetVnicRequest
	17,  // 93: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateInterface:input_type -> opi_api.network.cloud.v1alpha1.CreateInterfaceRequest
	18,  // 94: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteInterface:input_type -> opi_api.network.cloud.v1alpha1.DeleteInterfaceRequest
	19,  // 95: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateInterface:input_type -> opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest
	20,  // 96: opi_api.network.cloud.v1alpha1.CloudInfraService.ListInterfaces:input_type -> opi_api.network.cloud.v1alpha1.ListInterfacesRequest
	22,  // 97: opi_api.network.cloud.v1alpha1.CloudInfraService.GetInterface:input_type -> opi_api.network.cloud.v1alpha1.GetInterfaceRequest
	23,  // 98: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateRouteTable:input_type -> opi_api.network.cloud.v1alpha1.CreateRouteTableRequest
	24,  // 99: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteRouteTable:input_type -> opi_api.network.cloud.v1alpha1.DeleteRouteTableRequest
	25,  // 100: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateRouteTable:input_type -> opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest
	26,  // 101: opi_api.network.cloud.v1alpha1.CloudInfraService.ListRouteTables:input_type -> opi_api.network.cloud.v1alpha1.ListRouteTablesRequest
	28,  // 102: opi_api.network.cloud.v1alpha1.CloudInfraService.GetRouteTable:input_type -> opi_api.network.cloud.v1alpha1.GetRouteTableRequest
	29,  // 103: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateRoute:input_type -> opi_api.network.cloud.v1alpha1.CreateRouteRequest
	30,  // 104: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteRoute:input_type -> opi_api.network.cloud.v1alpha1.DeleteRouteRequest
	31,  // 105: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateRoute:input_type -> opi_api.network.cloud.v1alpha1.UpdateRouteRequest
	32,  // 106: opi_api.network.cloud.v1alpha1.CloudInfraService.ListRoutes:input_type -> opi_api.network.cloud.v1alpha1.ListRoutesRequest
	34,  // 107: opi_api.network.cloud.v1alpha1.CloudInfraService.GetRoute:input_type -> opi_api.network.cloud.v1alpha1.GetRouteRequest
	35,  // 108: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateUnderlayRoute:input_type -> opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest
	36,  // 109: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteUnderlayRoute:input_type -> opi_api.network.cloud.v1alpha1.DeleteUnderlayRouteRequest
	37,  // 110: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateUnderlayRoute:input_type -> opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest
	38,  // 111: opi_api.network.cloud.v1alpha1.CloudInfraService.ListUnderlayRoutes:input_type -> opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest
	40,  // 112: opi_api.network.cloud.v1alpha1.CloudInfraService.GetUnderlayRoute:input_type -> opi_api.network.cloud.v1alpha1.GetUnderlayRouteRequest
	41,  // 113: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateBgp:input_type -> opi_api.network.cloud.v1alpha1.CreateBgpRequest
	42,  // 114: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteBgp:input_type -> opi_api.network.cloud.v1alpha1.DeleteBgpRequest
	43,  // 115: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateBgp:input_type -> opi_api.network.cloud.v1alpha1.UpdateBgpRequest
	44,  // 116: opi_api.network.cloud.v1alpha1.CloudInfraService.ListBgps:input_type -> opi_api.network.cloud.v1alpha1.ListBgpsRequest
	46,  // 117: opi_api.network.cloud.v1alpha1.CloudInfraService.GetBgp:input_type -> opi_api.network.cloud.v1alpha1.GetBgpRequest
	47,  // 118: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateBGPPeer:input_type -> opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest
	48,  // 119: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteBGPPeer:input_type -> opi_api.network.cloud.v1alpha1.DeleteBGPPeerRequest
	49,  // 120: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateBGPPeer:input_type -> opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest
	50,  // 121: opi_api.network.cloud.v1alpha1.CloudInfraService.ListBGPPeers:input_type -> opi_api.network.cloud.v1alpha1.ListBGPPeersRequest
	52,  // 122: opi_api.network.cloud.v1alpha1.CloudInfraService.GetBGPPeer:input_type -> opi_api.network.cloud.v1alpha1.GetBGPPeerRequest
	53,  // 123: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateBGPPeerAf:input_type -> opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest
	54,  // 124: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteBGPPeerAf:input_type -> opi_api.network.cloud.v1alpha1.DeleteBGPPeerAfRequest
	55,  // 125: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateBGPPeerAf:input_type -> opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest
	56,  // 126: opi_api.network.cloud.v1alpha1.CloudInfraService.ListBGPPeerAfs:input_type -> opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest
	58,  // 127: opi_api.network.cloud.v1alpha1.CloudInfraService.GetBGPPeerAf:input_type -> opi_api.network.cloud.v1alpha1.GetBGPPeerAfRequest
	59,  // 128: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateMapping:input_type -> opi_api.network.cloud.v1alpha1.CreateMappingRequest
	60,  // 129: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteMapping:input_type -> opi_api.network.cloud.v1alpha1.DeleteMappingRequest
	61,  // 130: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateMapping:input_type -> opi_api.network.cloud.v1alpha1.UpdateMappingRequest
	62,  // 131: opi_api.network.cloud.v1alpha1.CloudInfraService.ListMappings:input_type -> opi_api.network.cloud.v1alpha1.ListMappingsRequest
	64,  // 132: opi_api.network.cloud.v1alpha1.CloudInfraService.GetMapping:input_type -> opi_api.network.cloud.v1alpha1.GetMappingRequest
	65,  // 133: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateNextHop:input_type -> opi_api.network.cloud.v1alpha1.CreateNextHopRequest
	66,  // 134: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteNextHop:input_type -> opi_api.network.cloud.v1alpha1.DeleteNextHopRequest
	67,  // 135: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateNextHop:input_type -> opi_api.network.cloud.v1alpha1.UpdateNextHopRequest
	68,  // 136: opi_api.network.cloud.v1alpha1.CloudInfraService.ListNextHop:input_type -> opi_api.network.cloud.v1alpha1.ListNextHopsRequest
	70,  // 137: opi_api.network.cloud.v1alpha1.CloudInfraService.GetNextHop:input_type -> opi_api.network.cloud.v1alpha1.GetNextHopRequest
	71,  // 138: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateNextHopGroup:input_type -> opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest
	72,  // 139: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteNextHopGroup:input_type -> opi_api.network.cloud.v1alpha1.DeleteNextHopGroupRequest
	73,  // 140: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateNextHopGroup:input_type -> opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest
	74,  // 141: opi_api.network.cloud.v1alpha1.CloudInfraService.ListNextHopGroups:input_type -> opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest
	76,  // 142: opi_api.network.cloud.v1alpha1.CloudInfraService.GetNextHopGroup:input_type -> opi_api.network.cloud.v1alpha1.GetNextHopGroupRequest
	77,  // 143: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSubnet:input_type -> opi_api.network.cloud.v1alpha1.CreateSubnetRequest
	78,  // 144: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSubnet:input_type -> opi_api.network.cloud.v1alpha1.DeleteSubnetRequest
	79,  // 145: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSubnet:input_type -> opi_api.network.cloud.v1alpha1.UpdateSubnetRequest
	80,  // 146: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSubnets:input_type -> opi_api.network.cloud.v1alpha1.ListSubnetsRequest
	82,  // 147: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSubnet:input_type -> opi_api.network.cloud.v1alpha1.GetSubnetRequest
	83,  // 148: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateTunnel:input_type -> opi_api.network.cloud.v1alpha1.CreateTunnelRequest
	84,  // 149: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteTunnel:input_type -> opi_api.network.cloud.v1alpha1.DeleteTunnelRequest
	85,  // 150: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateTunnel:input_type -> opi_api.network.cloud.v1alpha1.UpdateTunnelRequest
	86,  // 151: opi_api.network.cloud.v1alpha1.CloudInfraService.ListTunnels:input_type -> opi_api.network.cloud.v1alpha1.ListTunnelsRequest
	88,  // 152: opi_api.network.cloud.v1alpha1.CloudInfraService.GetTunnel:input_type -> opi_api.network.cloud.v1alpha1.GetTunnelRequest
	89,  // 153: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateVpc:input_type -> opi_api.network.cloud.v1alpha1.CreateVpcRequest
	90,  // 154: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteVpc:input_type -> opi_api.network.cloud.v1alpha1.DeleteVpcRequest
	91,  // 155: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateVpc:input_type -> opi_api.network.cloud.v1alpha1.UpdateVpcRequest
	92,  // 156: opi_api.network.cloud.v1alpha1.CloudInfraService.ListVpcs:input_type -> opi_api.network.cloud.v1alpha1.ListVpcsRequest
	94,  // 157: opi_api.network.cloud.v1alpha1.CloudInfraService.GetVpc:input_type -> opi_api.network.cloud.v1alpha1.GetVpcRequest
	95,  // 158: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateVPCPeer:input_type -> opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest
	96,  // 159: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteVPCPeer:input_type -> opi_api.network.cloud.v1alpha1.DeleteVPCPeerRequest
	97,  // 160: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateVPCPeer:input_type -> opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest
	98,  // 161: opi_api.network.cloud.v1alpha1.CloudInfraService.ListVPCPeers:input_type -> opi_api.network.cloud.v1alpha1.ListVPCPeersRequest
	100, // 162: opi_api.network.cloud.v1alpha1.CloudInfraService.GetVPCPeer:input_type -> opi_api.network.cloud.v1alpha1.GetVPCPeerRequest
	101, // 163: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSecurityPolicy:input_type -> opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest
	102, // 164: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSecurityPolicy:input_type -> opi_api.network.cloud.v1alpha1.DeleteSecurityPolicyRequest
	103, // 165: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSecurityPolicy:input_type -> opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest
	104, // 166: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSecurityPolicys:input_type -> opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest
	106, // 167: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSecurityPolicy:input_type -> opi_api.network.cloud.v1alpha1.GetSecurityPolicyRequest
	107, // 168: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSecurityRule:input_type -> opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest
	108, // 169: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSecurityRule:input_type -> opi_api.network.cloud.v1alpha1.DeleteSecurityRuleRequest
	109, // 170: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSecurityRule:input_type -> opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest
	110, // 171: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSecurityRules:input_type -> opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest
	112, // 172: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSecurityRule:input_type -> opi_api.network.cloud.v1alpha1.GetSecurityRuleRequest
	113, // 173: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSecurityProfile:input_type -> opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest
	114, // 174: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSecurityProfile:input_type -> opi_api.network.cloud.v1alpha1.DeleteSecurityProfileRequest
	115, // 175: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSecurityProfile:input_type -> opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest
	116, // 176: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSecurityProfiles:input_type -> opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest
	118, // 177: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSecurityProfile:input_type -> opi_api.network.cloud.v1alpha1.GetSecurityProfileRequest
	140, // 178: opi_api.network.cloud.v1alpha1.CloudInfraService.GetDeviceCapabilities:output_type -> opi_api.network.cloud.v1alpha1.DeviceCapabilities
	119, // 179: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateDevice:output_type -> opi_api.network.cloud.v1alpha1.Device
	141, // 180: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteDevice:output_type -> google.protobuf.Empty
	119, // 181: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateDevice:output_type -> opi_api.network.cloud.v1alpha1.Device
	5,   // 182: opi_api.network.cloud.v1alpha1.CloudInfraService.ListDevices:output_type -> opi_api.network.cloud.v1alpha1.ListDevicesResponse
	119, // 183: opi_api.network.cloud.v1alpha1.CloudInfraService.GetDevice:output_type -> opi_api.network.cloud.v1alpha1.Device
	121, // 184: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdatePort:output_type -> opi_api.network.cloud.v1alpha1.Port
	9,   // 185: opi_api.network.cloud.v1alpha1.CloudInfraService.ListPorts:output_type -> opi_api.network.cloud.v1alpha1.ListPortsResponse
	121, // 186: opi_api.network.cloud.v1alpha1.CloudInfraService.GetPort:output_type -> opi_api.network.cloud.v1alpha1.Port
	122, // 187: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateVnic:output_type -> opi_api.network.cloud.v1alpha1.Vnic
	141, // 188: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteVnic:output_type -> google.protobuf.Empty
	122, // 189: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateVnic:output_type -> opi_api.network.cloud.v1alpha1.Vnic
	15,  // 190: opi_api.network.cloud.v1alpha1.CloudInfraService.ListVnics:output_type -> opi_api.network.cloud.v1alpha1.ListVnicsResponse
	122, // 191: opi_api.network.cloud.v1alpha1.CloudInfraService.GetVnic:output_type -> opi_api.network.cloud.v1alpha1.Vnic
	123, // 192: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateInterface:output_type -> opi_api.network.cloud.v1alpha1.Interface
	141, // 193: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteInterface:output_type -> google.protobuf.Empty
	123, // 194: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateInterface:output_type -> opi_api.network.cloud.v1alpha1.Interface
	21,  // 195: opi_api.network.cloud.v1alpha1.CloudInfraService.ListInterfaces:output_type -> opi_api.network.cloud.v1alpha1.ListInterfacesResponse
	123, // 196: opi_api.network.cloud.v1alpha1.CloudInfraService.GetInterface:output_type -> opi_api.network.cloud.v1alpha1.Interface
	124, // 197: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateRouteTable:output_type -> opi_api.network.cloud.v1alpha1.RouteTable
	141, // 198: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteRouteTable:output_type -> google.protobuf.Empty
	124, // 199: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateRouteTable:output_type -> opi_api.network.cloud.v1alpha1.RouteTable
	27,  // 200: opi_api.network.cloud.v1alpha1.CloudInfraService.ListRouteTables:output_type -> opi_api.network.cloud.v1alpha1.ListRouteTablesResponse
	124, // 201: opi_api.network.cloud.v1alpha1.CloudInfraService.GetRouteTable:output_type -> opi_api.network.cloud.v1alpha1.RouteTable
	125, // 202: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateRoute:output_type -> opi_api.network.cloud.v1alpha1.Route
	141, // 203: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteRoute:output_type -> google.protobuf.Empty
	125, // 204: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateRoute:output_type -> opi_api.network.cloud.v1alpha1.Route
	33,  // 205: opi_api.network.cloud.v1alpha1.CloudInfraService.ListRoutes:output_type -> opi_api.network.cloud.v1alpha1.ListRoutesResponse
	125, // 206: opi_api.network.cloud.v1alpha1.CloudInfraService.GetRoute:output_type -> opi_api.network.cloud.v1alpha1.Route
	126, // 207: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateUnderlayRoute:output_type -> opi_api.network.cloud.v1alpha1.UnderlayRoute
	141, // 208: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteUnderlayRoute:output_type -> google.protobuf.Empty
	126, // 209: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateUnderlayRoute:output_type -> opi_api.network.cloud.v1alpha1.UnderlayRoute
	39,  // 210: opi_api.network.cloud.v1alpha1.CloudInfraService.ListUnderlayRoutes:output_type -> opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse
	126, // 211: opi_api.network.cloud.v1alpha1.CloudInfraService.GetUnderlayRoute:output_type -> opi_api.network.cloud.v1alpha1.UnderlayRoute
	127, // 212: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateBgp:output_type -> opi_api.network.cloud.v1alpha1.Bgp
	141, // 213: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteBgp:output_type -> google.protobuf.Empty
	127, // 214: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateBgp:output_type -> opi_api.network.cloud.v1alpha1.Bgp
	45,  // 215: opi_api.network.cloud.v1alpha1.CloudInfraService.ListBgps:output_type -> opi_api.network.cloud.v1alpha1.ListBgpsResponse
	127, // 216: opi_api.network.cloud.v1alpha1.CloudInfraService.GetBgp:output_type -> opi_api.network.cloud.v1alpha1.Bgp
	128, // 217: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateBGPPeer:output_type -> opi_api.network.cloud.v1alpha1.BGPPeer
	141, // 218: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteBGPPeer:output_type -> google.protobuf.Empty
	128, // 219: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateBGPPeer:output_type -> opi_api.network.cloud.v1alpha1.BGPPeer
	51,  // 220: opi_api.network.cloud.v1alpha1.CloudInfraService.ListBGPPeers:output_type -> opi_api.network.cloud.v1alpha1.ListBGPPeersResponse
	128, // 221: opi_api.network.cloud.v1alpha1.CloudInfraService.GetBGPPeer:output_type -> opi_api.network.cloud.v1alpha1.BGPPeer
	129, // 222: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateBGPPeerAf:output_type -> opi_api.network.cloud.v1alpha1.BGPPeerAf
	141, // 223: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteBGPPeerAf:output_type -> google.protobuf.Empty
	129, // 224: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateBGPPeerAf:output_type -> opi_api.network.cloud.v1alpha1.BGPPeerAf
	57,  // 225: opi_api.network.cloud.v1alpha1.CloudInfraService.ListBGPPeerAfs:output_type -> opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse
	129, // 226: opi_api.network.cloud.v1alpha1.CloudInfraService.GetBGPPeerAf:output_type -> opi_api.network.cloud.v1alpha1.BGPPeerAf
	130, // 227: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateMapping:output_type -> opi_api.network.cloud.v1alpha1.Mapping
	141, // 228: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteMapping:output_type -> google.protobuf.Empty
	130, // 229: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateMapping:output_type -> opi_api.network.cloud.v1alpha1.Mapping
	63,  // 230: opi_api.network.cloud.v1alpha1.CloudInfraService.ListMappings:output_type -> opi_api.network.cloud.v1alpha1.ListMappingsResponse
	130, // 231: opi_api.network.cloud.v1alpha1.CloudInfraService.GetMapping:output_type -> opi_api.network.cloud.v1alpha1.Mapping
	131, // 232: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateNextHop:output_type -> opi_api.network.cloud.v1alpha1.NextHop
	141, // 233: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteNextHop:output_type -> google.protobuf.Empty
	131, // 234: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateNextHop:output_type -> opi_api.network.cloud.v1alpha1.NextHop
	69,  // 235: opi_api.network.cloud.v1alpha1.CloudInfraService.ListNextHop:output_type -> opi_api.network.cloud.v1alpha1.ListNextHopsResponse
	131, // 236: opi_api.network.cloud.v1alpha1.CloudInfraService.GetNextHop:output_type -> opi_api.network.cloud.v1alpha1.NextHop
	132, // 237: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateNextHopGroup:output_type -> opi_api.network.cloud.v1alpha1.NextHopGroup
	141, // 238: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteNextHopGroup:output_type -> google.protobuf.Empty
	132, // 239: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateNextHopGroup:output_type -> opi_api.network.cloud.v1alpha1.NextHopGroup
	75,  // 240: opi_api.network.cloud.v1alpha1.CloudInfraService.ListNextHopGroups:output_type -> opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse
	132, // 241: opi_api.network.cloud.v1alpha1.CloudInfraService.GetNextHopGroup:output_type -> opi_api.network.cloud.v1alpha1.NextHopGroup
	133, // 242: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSubnet:output_type -> opi_api.network.cloud.v1alpha1.Subnet
	141, // 243: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSubnet:output_type -> google.protobuf.Empty
	133, // 244: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSubnet:output_type -> opi_api.network.cloud.v1alpha1.Subnet
	81,  // 245: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSubnets:output_type -> opi_api.network.cloud.v1alpha1.ListSubnetsResponse
	133, // 246: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSubnet:output_type -> opi_api.network.cloud.v1alpha1.Subnet
	134, // 247: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateTunnel:output_type -> opi_api.network.cloud.v1alpha1.Tunnel
	141, // 248: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteTunnel:output_type -> google.protobuf.Empty
	134, // 249: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateTunnel:output_type -> opi_api.network.cloud.v1alpha1.Tunnel
	87,  // 250: opi_api.network.cloud.v1alpha1.CloudInfraService.ListTunnels:output_type -> opi_api.network.cloud.v1alpha1.ListTunnelsResponse
	134, // 251: opi_api.network.cloud.v1alpha1.CloudInfraService.GetTunnel:output_type -> opi_api.network.cloud.v1alpha1.Tunnel
	135, // 252: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateVpc:output_type -> opi_api.network.cloud.v1alpha1.Vpc
	141, // 253: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteVpc:output_type -> google.protobuf.Empty
	135, // 254: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateVpc:output_type -> opi_api.network.cloud.v1alpha1.Vpc
	93,  // 255: opi_api.network.cloud.v1alpha1.CloudInfraService.ListVpcs:output_type -> opi_api.network.cloud.v1alpha1.ListVpcsResponse
	135, // 256: opi_api.network.cloud.v1alpha1.CloudInfraService.GetVpc:output_type -> opi_api.network.cloud.v1alpha1.Vpc
	136, // 257: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateVPCPeer:output_type -> opi_api.network.cloud.v1alpha1.VPCPeer
	141, // 258: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteVPCPeer:output_type -> google.protobuf.Empty
	136, // 259: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateVPCPeer:output_type -> opi_api.network.cloud.v1alpha1.VPCPeer
	99,  // 260: opi_api.network.cloud.v1alpha1.CloudInfraService.ListVPCPeers:output_type -> opi_api.network.cloud.v1alpha1.ListVPCPeersResponse
	136, // 261: opi_api.network.cloud.v1alpha1.CloudInfraService.GetVPCPeer:output_type -> opi_api.network.cloud.v1alpha1.VPCPeer
	137, // 262: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSecurityPolicy:output_type -> opi_api.network.cloud.v1alpha1.SecurityPolicy
	141, // 263: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSecurityPolicy:output_type -> google.protobuf.Empty
	137, // 264: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSecurityPolicy:output_type -> opi_api.network.cloud.v1alpha1.SecurityPolicy
	105, // 265: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSecurityPolicys:output_type -> opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse
	137, // 266: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSecurityPolicy:output_type -> opi_api.network.cloud.v1alpha1.SecurityPolicy
	138, // 267: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSecurityRule:output_type -> opi_api.network.cloud.v1alpha1.SecurityRule
	141, // 268: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSecurityRule:output_type -> google.protobuf.Empty
	138, // 269: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSecurityRule:output_type -> opi_api.network.cloud.v1alpha1.SecurityRule
	111, // 270: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSecurityRules:output_type -> opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse
	138, // 271: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSecurityRule:output_type -> opi_api.network.cloud.v1alpha1.SecurityRule
	139, // 272: opi_api.network.cloud.v1alpha1.CloudInfraService.CreateSecurityProfile:output_type -> opi_api.network.cloud.v1alpha1.SecurityProfile
	141, // 273: opi_api.network.cloud.v1alpha1.CloudInfraService.DeleteSecurityProfile:output_type -> google.protobuf.Empty
	139, // 274: opi_api.network.cloud.v1alpha1.CloudInfraService.UpdateSecurityProfile:output_type -> opi_api.network.cloud.v1alpha1.SecurityProfile
	117, // 275: opi_api.network.cloud.v1alpha1.CloudInfraService.ListSecurityProfiles:output_type -> opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse
	139, // 276: opi_api.network.cloud.v1alpha1.CloudInfraService.GetSecurityProfile:output_type -> opi_api.network.cloud.v1alpha1.SecurityProfile
	178, // [178:277] is the sub-list for method output_type
	79,  // [79:178] is the sub-list for method input_type
	79,  // [79:79] is the sub-list for extension type_name
	79,  // [79:79] is the sub-list for extension extendee
	0,   // [0:79] is the sub-list for field type_name
}

func init() { file_cloudrpc_proto_init() }
func file_cloudrpc_proto_init() {
	if File_cloudrpc_proto != nil {
		return
	}
	file_device_proto_init()
	file_port_proto_init()
	file_interface_proto_init()
	file_route_proto_init()
	file_vnic_proto_init()
	file_underlayroute_proto_init()
	file_bgp_proto_init()
	file_nexthop_proto_init()
	file_mapping_proto_init()
	file_subnet_proto_init()
	file_tunnel_proto_init()
	file_vpc_proto_init()
	file_networkpolicy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloudrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceCapabilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPortsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPortsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVnicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVnicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVnicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVnicsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVnicsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVnicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInterfacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInterfacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRouteTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRouteTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRouteTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRouteTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRouteTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRouteTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUnderlayRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUnderlayRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUnderlayRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnderlayRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnderlayRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnderlayRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBgpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBgpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBgpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBgpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBgpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBgpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBGPPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBGPPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBGPPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBGPPeersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBGPPeersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBGPPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBGPPeerAfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBGPPeerAfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBGPPeerAfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBGPPeerAfsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBGPPeerAfsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBGPPeerAfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMappingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMappingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNextHopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNextHopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNextHopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNextHopsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNextHopsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextHopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNextHopGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNextHopGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNextHopGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNextHopGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNextHopGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextHopGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubnetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubnetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTunnelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTunnelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTunnelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTunnelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunnelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVpcsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVpcsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVPCPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVPCPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVPCPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVPCPeersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVPCPeersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVPCPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSecurityPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecurityPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSecurityPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecurityPolicysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecurityPolicysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecurityPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSecurityRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecurityRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSecurityRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecurityRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecurityRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecurityRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSecurityProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecurityProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSecurityProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecurityProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecurityProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudrpc_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecurityProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloudrpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   119,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cloudrpc_proto_goTypes,
		DependencyIndexes: file_cloudrpc_proto_depIdxs,
		MessageInfos:      file_cloudrpc_proto_msgTypes,
	}.Build()
	File_cloudrpc_proto = out.File
	file_cloudrpc_proto_rawDesc = nil
	file_cloudrpc_proto_goTypes = nil
	file_cloudrpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CloudInfraServiceClient is the client API for CloudInfraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudInfraServiceClient interface {
	// device capabilities
	GetDeviceCapabilities(ctx context.Context, in *GetDeviceCapabilitiesRequest, opts ...grpc.CallOption) (*DeviceCapabilities, error)
	// device apis
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// port apis
	UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*Port, error)
	ListPorts(ctx context.Context, in *ListPortsRequest, opts ...grpc.CallOption) (*ListPortsResponse, error)
	GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*Port, error)
	// vnic apis
	CreateVnic(ctx context.Context, in *CreateVnicRequest, opts ...grpc.CallOption) (*Vnic, error)
	DeleteVnic(ctx context.Context, in *DeleteVnicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVnic(ctx context.Context, in *UpdateVnicRequest, opts ...grpc.CallOption) (*Vnic, error)
	ListVnics(ctx context.Context, in *ListVnicsRequest, opts ...grpc.CallOption) (*ListVnicsResponse, error)
	GetVnic(ctx context.Context, in *GetVnicRequest, opts ...grpc.CallOption) (*Vnic, error)
	// interface apis
	CreateInterface(ctx context.Context, in *CreateInterfaceRequest, opts ...grpc.CallOption) (*Interface, error)
	DeleteInterface(ctx context.Context, in *DeleteInterfaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc.CallOption) (*Interface, error)
	ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*ListInterfacesResponse, error)
	GetInterface(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*Interface, error)
	// routetable apis
	CreateRouteTable(ctx context.Context, in *CreateRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error)
	DeleteRouteTable(ctx context.Context, in *DeleteRouteTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRouteTable(ctx context.Context, in *UpdateRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error)
	ListRouteTables(ctx context.Context, in *ListRouteTablesRequest, opts ...grpc.CallOption) (*ListRouteTablesResponse, error)
	GetRouteTable(ctx context.Context, in *GetRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error)
	// route apis
	CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*Route, error)
	DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRoute(ctx context.Context, in *UpdateRouteRequest, opts ...grpc.CallOption) (*Route, error)
	ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error)
	GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*Route, error)
	// underlayroute apis
	CreateUnderlayRoute(ctx context.Context, in *CreateUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error)
	DeleteUnderlayRoute(ctx context.Context, in *DeleteUnderlayRouteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateUnderlayRoute(ctx context.Context, in *UpdateUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error)
	ListUnderlayRoutes(ctx context.Context, in *ListUnderlayRoutesRequest, opts ...grpc.CallOption) (*ListUnderlayRoutesResponse, error)
	GetUnderlayRoute(ctx context.Context, in *GetUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error)
	// bgp (optional) apis
	CreateBgp(ctx context.Context, in *CreateBgpRequest, opts ...grpc.CallOption) (*Bgp, error)
	DeleteBgp(ctx context.Context, in *DeleteBgpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBgp(ctx context.Context, in *UpdateBgpRequest, opts ...grpc.CallOption) (*Bgp, error)
	ListBgps(ctx context.Context, in *ListBgpsRequest, opts ...grpc.CallOption) (*ListBgpsResponse, error)
	GetBgp(ctx context.Context, in *GetBgpRequest, opts ...grpc.CallOption) (*Bgp, error)
	// bgppeer (optional) apis
	CreateBGPPeer(ctx context.Context, in *CreateBGPPeerRequest, opts ...grpc.CallOption) (*BGPPeer, error)
	DeleteBGPPeer(ctx context.Context, in *DeleteBGPPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBGPPeer(ctx context.Context, in *UpdateBGPPeerRequest, opts ...grpc.CallOption) (*BGPPeer, error)
	ListBGPPeers(ctx context.Context, in *ListBGPPeersRequest, opts ...grpc.CallOption) (*ListBGPPeersResponse, error)
	GetBGPPeer(ctx context.Context, in *GetBGPPeerRequest, opts ...grpc.CallOption) (*BGPPeer, error)
	// bgppeeraf (optional) apis
	CreateBGPPeerAf(ctx context.Context, in *CreateBGPPeerAfRequest, opts ...grpc.CallOption) (*BGPPeerAf, error)
	DeleteBGPPeerAf(ctx context.Context, in *DeleteBGPPeerAfRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBGPPeerAf(ctx context.Context, in *UpdateBGPPeerAfRequest, opts ...grpc.CallOption) (*BGPPeerAf, error)
	ListBGPPeerAfs(ctx context.Context, in *ListBGPPeerAfsRequest, opts ...grpc.CallOption) (*ListBGPPeerAfsResponse, error)
	GetBGPPeerAf(ctx context.Context, in *GetBGPPeerAfRequest, opts ...grpc.CallOption) (*BGPPeerAf, error)
	// mapping apis
	CreateMapping(ctx context.Context, in *CreateMappingRequest, opts ...grpc.CallOption) (*Mapping, error)
	DeleteMapping(ctx context.Context, in *DeleteMappingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateMapping(ctx context.Context, in *UpdateMappingRequest, opts ...grpc.CallOption) (*Mapping, error)
	ListMappings(ctx context.Context, in *ListMappingsRequest, opts ...grpc.CallOption) (*ListMappingsResponse, error)
	GetMapping(ctx context.Context, in *GetMappingRequest, opts ...grpc.CallOption) (*Mapping, error)
	// nexthop apis
	CreateNextHop(ctx context.Context, in *CreateNextHopRequest, opts ...grpc.CallOption) (*NextHop, error)
	DeleteNextHop(ctx context.Context, in *DeleteNextHopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNextHop(ctx context.Context, in *UpdateNextHopRequest, opts ...grpc.CallOption) (*NextHop, error)
	ListNextHop(ctx context.Context, in *ListNextHopsRequest, opts ...grpc.CallOption) (*ListNextHopsResponse, error)
	GetNextHop(ctx context.Context, in *GetNextHopRequest, opts ...grpc.CallOption) (*NextHop, error)
	// nexthopgroup apis
	CreateNextHopGroup(ctx context.Context, in *CreateNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error)
	DeleteNextHopGroup(ctx context.Context, in *DeleteNextHopGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNextHopGroup(ctx context.Context, in *UpdateNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error)
	ListNextHopGroups(ctx context.Context, in *ListNextHopGroupsRequest, opts ...grpc.CallOption) (*ListNextHopGroupsResponse, error)
	GetNextHopGroup(ctx context.Context, in *GetNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error)
	// subnet apis
	CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	ListSubnets(ctx context.Context, in *ListSubnetsRequest, opts ...grpc.CallOption) (*ListSubnetsResponse, error)
	GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	// tunnel apis
	CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error)
	DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTunnel(ctx context.Context, in *UpdateTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error)
	ListTunnels(ctx context.Context, in *ListTunnelsRequest, opts ...grpc.CallOption) (*ListTunnelsResponse, error)
	GetTunnel(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error)
	// vpc apis
	CreateVpc(ctx context.Context, in *CreateVpcRequest, opts ...grpc.CallOption) (*Vpc, error)
	DeleteVpc(ctx context.Context, in *DeleteVpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVpc(ctx context.Context, in *UpdateVpcRequest, opts ...grpc.CallOption) (*Vpc, error)
	ListVpcs(ctx context.Context, in *ListVpcsRequest, opts ...grpc.CallOption) (*ListVpcsResponse, error)
	GetVpc(ctx context.Context, in *GetVpcRequest, opts ...grpc.CallOption) (*Vpc, error)
	// vpcpeer apis
	CreateVPCPeer(ctx context.Context, in *CreateVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error)
	DeleteVPCPeer(ctx context.Context, in *DeleteVPCPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVPCPeer(ctx context.Context, in *UpdateVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error)
	ListVPCPeers(ctx context.Context, in *ListVPCPeersRequest, opts ...grpc.CallOption) (*ListVPCPeersResponse, error)
	GetVPCPeer(ctx context.Context, in *GetVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error)
	// securitypolicy apis
	CreateSecurityPolicy(ctx context.Context, in *CreateSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error)
	DeleteSecurityPolicy(ctx context.Context, in *DeleteSecurityPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSecurityPolicy(ctx context.Context, in *UpdateSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error)
	ListSecurityPolicys(ctx context.Context, in *ListSecurityPolicysRequest, opts ...grpc.CallOption) (*ListSecurityPolicysResponse, error)
	GetSecurityPolicy(ctx context.Context, in *GetSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error)
	// securityrule apis
	CreateSecurityRule(ctx context.Context, in *CreateSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error)
	DeleteSecurityRule(ctx context.Context, in *DeleteSecurityRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSecurityRule(ctx context.Context, in *UpdateSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error)
	ListSecurityRules(ctx context.Context, in *ListSecurityRulesRequest, opts ...grpc.CallOption) (*ListSecurityRulesResponse, error)
	GetSecurityRule(ctx context.Context, in *GetSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error)
	// securityprofile apis
	CreateSecurityProfile(ctx context.Context, in *CreateSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error)
	DeleteSecurityProfile(ctx context.Context, in *DeleteSecurityProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSecurityProfile(ctx context.Context, in *UpdateSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error)
	ListSecurityProfiles(ctx context.Context, in *ListSecurityProfilesRequest, opts ...grpc.CallOption) (*ListSecurityProfilesResponse, error)
	GetSecurityProfile(ctx context.Context, in *GetSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error)
}

type cloudInfraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudInfraServiceClient(cc grpc.ClientConnInterface) CloudInfraServiceClient {
	return &cloudInfraServiceClient{cc}
}

func (c *cloudInfraServiceClient) GetDeviceCapabilities(ctx context.Context, in *GetDeviceCapabilitiesRequest, opts ...grpc.CallOption) (*DeviceCapabilities, error) {
	out := new(DeviceCapabilities)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetDeviceCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*Port, error) {
	out := new(Port)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdatePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListPorts(ctx context.Context, in *ListPortsRequest, opts ...grpc.CallOption) (*ListPortsResponse, error) {
	out := new(ListPortsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListPorts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*Port, error) {
	out := new(Port)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateVnic(ctx context.Context, in *CreateVnicRequest, opts ...grpc.CallOption) (*Vnic, error) {
	out := new(Vnic)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateVnic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteVnic(ctx context.Context, in *DeleteVnicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteVnic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateVnic(ctx context.Context, in *UpdateVnicRequest, opts ...grpc.CallOption) (*Vnic, error) {
	out := new(Vnic)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateVnic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListVnics(ctx context.Context, in *ListVnicsRequest, opts ...grpc.CallOption) (*ListVnicsResponse, error) {
	out := new(ListVnicsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListVnics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetVnic(ctx context.Context, in *GetVnicRequest, opts ...grpc.CallOption) (*Vnic, error) {
	out := new(Vnic)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetVnic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateInterface(ctx context.Context, in *CreateInterfaceRequest, opts ...grpc.CallOption) (*Interface, error) {
	out := new(Interface)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteInterface(ctx context.Context, in *DeleteInterfaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc.CallOption) (*Interface, error) {
	out := new(Interface)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*ListInterfacesResponse, error) {
	out := new(ListInterfacesResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetInterface(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*Interface, error) {
	out := new(Interface)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateRouteTable(ctx context.Context, in *CreateRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error) {
	out := new(RouteTable)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateRouteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteRouteTable(ctx context.Context, in *DeleteRouteTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteRouteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateRouteTable(ctx context.Context, in *UpdateRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error) {
	out := new(RouteTable)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateRouteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListRouteTables(ctx context.Context, in *ListRouteTablesRequest, opts ...grpc.CallOption) (*ListRouteTablesResponse, error) {
	out := new(ListRouteTablesResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListRouteTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetRouteTable(ctx context.Context, in *GetRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error) {
	out := new(RouteTable)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetRouteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateRoute(ctx context.Context, in *UpdateRouteRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error) {
	out := new(ListRoutesResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateUnderlayRoute(ctx context.Context, in *CreateUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error) {
	out := new(UnderlayRoute)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateUnderlayRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteUnderlayRoute(ctx context.Context, in *DeleteUnderlayRouteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteUnderlayRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateUnderlayRoute(ctx context.Context, in *UpdateUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error) {
	out := new(UnderlayRoute)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateUnderlayRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListUnderlayRoutes(ctx context.Context, in *ListUnderlayRoutesRequest, opts ...grpc.CallOption) (*ListUnderlayRoutesResponse, error) {
	out := new(ListUnderlayRoutesResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListUnderlayRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetUnderlayRoute(ctx context.Context, in *GetUnderlayRouteRequest, opts ...grpc.CallOption) (*UnderlayRoute, error) {
	out := new(UnderlayRoute)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetUnderlayRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateBgp(ctx context.Context, in *CreateBgpRequest, opts ...grpc.CallOption) (*Bgp, error) {
	out := new(Bgp)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateBgp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteBgp(ctx context.Context, in *DeleteBgpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteBgp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateBgp(ctx context.Context, in *UpdateBgpRequest, opts ...grpc.CallOption) (*Bgp, error) {
	out := new(Bgp)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateBgp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListBgps(ctx context.Context, in *ListBgpsRequest, opts ...grpc.CallOption) (*ListBgpsResponse, error) {
	out := new(ListBgpsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListBgps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetBgp(ctx context.Context, in *GetBgpRequest, opts ...grpc.CallOption) (*Bgp, error) {
	out := new(Bgp)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetBgp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateBGPPeer(ctx context.Context, in *CreateBGPPeerRequest, opts ...grpc.CallOption) (*BGPPeer, error) {
	out := new(BGPPeer)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateBGPPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteBGPPeer(ctx context.Context, in *DeleteBGPPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteBGPPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateBGPPeer(ctx context.Context, in *UpdateBGPPeerRequest, opts ...grpc.CallOption) (*BGPPeer, error) {
	out := new(BGPPeer)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateBGPPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListBGPPeers(ctx context.Context, in *ListBGPPeersRequest, opts ...grpc.CallOption) (*ListBGPPeersResponse, error) {
	out := new(ListBGPPeersResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListBGPPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetBGPPeer(ctx context.Context, in *GetBGPPeerRequest, opts ...grpc.CallOption) (*BGPPeer, error) {
	out := new(BGPPeer)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetBGPPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateBGPPeerAf(ctx context.Context, in *CreateBGPPeerAfRequest, opts ...grpc.CallOption) (*BGPPeerAf, error) {
	out := new(BGPPeerAf)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateBGPPeerAf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteBGPPeerAf(ctx context.Context, in *DeleteBGPPeerAfRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteBGPPeerAf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateBGPPeerAf(ctx context.Context, in *UpdateBGPPeerAfRequest, opts ...grpc.CallOption) (*BGPPeerAf, error) {
	out := new(BGPPeerAf)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateBGPPeerAf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListBGPPeerAfs(ctx context.Context, in *ListBGPPeerAfsRequest, opts ...grpc.CallOption) (*ListBGPPeerAfsResponse, error) {
	out := new(ListBGPPeerAfsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListBGPPeerAfs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetBGPPeerAf(ctx context.Context, in *GetBGPPeerAfRequest, opts ...grpc.CallOption) (*BGPPeerAf, error) {
	out := new(BGPPeerAf)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetBGPPeerAf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateMapping(ctx context.Context, in *CreateMappingRequest, opts ...grpc.CallOption) (*Mapping, error) {
	out := new(Mapping)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteMapping(ctx context.Context, in *DeleteMappingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateMapping(ctx context.Context, in *UpdateMappingRequest, opts ...grpc.CallOption) (*Mapping, error) {
	out := new(Mapping)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListMappings(ctx context.Context, in *ListMappingsRequest, opts ...grpc.CallOption) (*ListMappingsResponse, error) {
	out := new(ListMappingsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetMapping(ctx context.Context, in *GetMappingRequest, opts ...grpc.CallOption) (*Mapping, error) {
	out := new(Mapping)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateNextHop(ctx context.Context, in *CreateNextHopRequest, opts ...grpc.CallOption) (*NextHop, error) {
	out := new(NextHop)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateNextHop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteNextHop(ctx context.Context, in *DeleteNextHopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteNextHop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateNextHop(ctx context.Context, in *UpdateNextHopRequest, opts ...grpc.CallOption) (*NextHop, error) {
	out := new(NextHop)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateNextHop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListNextHop(ctx context.Context, in *ListNextHopsRequest, opts ...grpc.CallOption) (*ListNextHopsResponse, error) {
	out := new(ListNextHopsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListNextHop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetNextHop(ctx context.Context, in *GetNextHopRequest, opts ...grpc.CallOption) (*NextHop, error) {
	out := new(NextHop)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetNextHop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateNextHopGroup(ctx context.Context, in *CreateNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error) {
	out := new(NextHopGroup)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateNextHopGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteNextHopGroup(ctx context.Context, in *DeleteNextHopGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteNextHopGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateNextHopGroup(ctx context.Context, in *UpdateNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error) {
	out := new(NextHopGroup)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateNextHopGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListNextHopGroups(ctx context.Context, in *ListNextHopGroupsRequest, opts ...grpc.CallOption) (*ListNextHopGroupsResponse, error) {
	out := new(ListNextHopGroupsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListNextHopGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetNextHopGroup(ctx context.Context, in *GetNextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroup, error) {
	out := new(NextHopGroup)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetNextHopGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	out := new(Subnet)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	out := new(Subnet)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListSubnets(ctx context.Context, in *ListSubnetsRequest, opts ...grpc.CallOption) (*ListSubnetsResponse, error) {
	out := new(ListSubnetsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSubnets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	out := new(Subnet)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error) {
	out := new(Tunnel)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateTunnel(ctx context.Context, in *UpdateTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error) {
	out := new(Tunnel)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListTunnels(ctx context.Context, in *ListTunnelsRequest, opts ...grpc.CallOption) (*ListTunnelsResponse, error) {
	out := new(ListTunnelsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListTunnels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetTunnel(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*Tunnel, error) {
	out := new(Tunnel)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateVpc(ctx context.Context, in *CreateVpcRequest, opts ...grpc.CallOption) (*Vpc, error) {
	out := new(Vpc)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateVpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteVpc(ctx context.Context, in *DeleteVpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteVpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateVpc(ctx context.Context, in *UpdateVpcRequest, opts ...grpc.CallOption) (*Vpc, error) {
	out := new(Vpc)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateVpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListVpcs(ctx context.Context, in *ListVpcsRequest, opts ...grpc.CallOption) (*ListVpcsResponse, error) {
	out := new(ListVpcsResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListVpcs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetVpc(ctx context.Context, in *GetVpcRequest, opts ...grpc.CallOption) (*Vpc, error) {
	out := new(Vpc)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetVpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateVPCPeer(ctx context.Context, in *CreateVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error) {
	out := new(VPCPeer)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateVPCPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteVPCPeer(ctx context.Context, in *DeleteVPCPeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteVPCPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateVPCPeer(ctx context.Context, in *UpdateVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error) {
	out := new(VPCPeer)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateVPCPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListVPCPeers(ctx context.Context, in *ListVPCPeersRequest, opts ...grpc.CallOption) (*ListVPCPeersResponse, error) {
	out := new(ListVPCPeersResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListVPCPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetVPCPeer(ctx context.Context, in *GetVPCPeerRequest, opts ...grpc.CallOption) (*VPCPeer, error) {
	out := new(VPCPeer)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetVPCPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateSecurityPolicy(ctx context.Context, in *CreateSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error) {
	out := new(SecurityPolicy)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSecurityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteSecurityPolicy(ctx context.Context, in *DeleteSecurityPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSecurityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateSecurityPolicy(ctx context.Context, in *UpdateSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error) {
	out := new(SecurityPolicy)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSecurityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListSecurityPolicys(ctx context.Context, in *ListSecurityPolicysRequest, opts ...grpc.CallOption) (*ListSecurityPolicysResponse, error) {
	out := new(ListSecurityPolicysResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSecurityPolicys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetSecurityPolicy(ctx context.Context, in *GetSecurityPolicyRequest, opts ...grpc.CallOption) (*SecurityPolicy, error) {
	out := new(SecurityPolicy)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSecurityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateSecurityRule(ctx context.Context, in *CreateSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error) {
	out := new(SecurityRule)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSecurityRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteSecurityRule(ctx context.Context, in *DeleteSecurityRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSecurityRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateSecurityRule(ctx context.Context, in *UpdateSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error) {
	out := new(SecurityRule)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSecurityRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListSecurityRules(ctx context.Context, in *ListSecurityRulesRequest, opts ...grpc.CallOption) (*ListSecurityRulesResponse, error) {
	out := new(ListSecurityRulesResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSecurityRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetSecurityRule(ctx context.Context, in *GetSecurityRuleRequest, opts ...grpc.CallOption) (*SecurityRule, error) {
	out := new(SecurityRule)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSecurityRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) CreateSecurityProfile(ctx context.Context, in *CreateSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error) {
	out := new(SecurityProfile)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSecurityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) DeleteSecurityProfile(ctx context.Context, in *DeleteSecurityProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSecurityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) UpdateSecurityProfile(ctx context.Context, in *UpdateSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error) {
	out := new(SecurityProfile)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSecurityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) ListSecurityProfiles(ctx context.Context, in *ListSecurityProfilesRequest, opts ...grpc.CallOption) (*ListSecurityProfilesResponse, error) {
	out := new(ListSecurityProfilesResponse)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSecurityProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudInfraServiceClient) GetSecurityProfile(ctx context.Context, in *GetSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error) {
	out := new(SecurityProfile)
	err := c.cc.Invoke(ctx, "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSecurityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudInfraServiceServer is the server API for CloudInfraService service.
type CloudInfraServiceServer interface {
	// device capabilities
	GetDeviceCapabilities(context.Context, *GetDeviceCapabilitiesRequest) (*DeviceCapabilities, error)
	// device apis
	CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*emptypb.Empty, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*Device, error)
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	GetDevice(context.Context, *GetDeviceRequest) (*Device, error)
	// port apis
	UpdatePort(context.Context, *UpdatePortRequest) (*Port, error)
	ListPorts(context.Context, *ListPortsRequest) (*ListPortsResponse, error)
	GetPort(context.Context, *GetPortRequest) (*Port, error)
	// vnic apis
	CreateVnic(context.Context, *CreateVnicRequest) (*Vnic, error)
	DeleteVnic(context.Context, *DeleteVnicRequest) (*emptypb.Empty, error)
	UpdateVnic(context.Context, *UpdateVnicRequest) (*Vnic, error)
	ListVnics(context.Context, *ListVnicsRequest) (*ListVnicsResponse, error)
	GetVnic(context.Context, *GetVnicRequest) (*Vnic, error)
	// interface apis
	CreateInterface(context.Context, *CreateInterfaceRequest) (*Interface, error)
	DeleteInterface(context.Context, *DeleteInterfaceRequest) (*emptypb.Empty, error)
	UpdateInterface(context.Context, *UpdateInterfaceRequest) (*Interface, error)
	ListInterfaces(context.Context, *ListInterfacesRequest) (*ListInterfacesResponse, error)
	GetInterface(context.Context, *GetInterfaceRequest) (*Interface, error)
	// routetable apis
	CreateRouteTable(context.Context, *CreateRouteTableRequest) (*RouteTable, error)
	DeleteRouteTable(context.Context, *DeleteRouteTableRequest) (*emptypb.Empty, error)
	UpdateRouteTable(context.Context, *UpdateRouteTableRequest) (*RouteTable, error)
	ListRouteTables(context.Context, *ListRouteTablesRequest) (*ListRouteTablesResponse, error)
	GetRouteTable(context.Context, *GetRouteTableRequest) (*RouteTable, error)
	// route apis
	CreateRoute(context.Context, *CreateRouteRequest) (*Route, error)
	DeleteRoute(context.Context, *DeleteRouteRequest) (*emptypb.Empty, error)
	UpdateRoute(context.Context, *UpdateRouteRequest) (*Route, error)
	ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error)
	GetRoute(context.Context, *GetRouteRequest) (*Route, error)
	// underlayroute apis
	CreateUnderlayRoute(context.Context, *CreateUnderlayRouteRequest) (*UnderlayRoute, error)
	DeleteUnderlayRoute(context.Context, *DeleteUnderlayRouteRequest) (*emptypb.Empty, error)
	UpdateUnderlayRoute(context.Context, *UpdateUnderlayRouteRequest) (*UnderlayRoute, error)
	ListUnderlayRoutes(context.Context, *ListUnderlayRoutesRequest) (*ListUnderlayRoutesResponse, error)
	GetUnderlayRoute(context.Context, *GetUnderlayRouteRequest) (*UnderlayRoute, error)
	// bgp (optional) apis
	CreateBgp(context.Context, *CreateBgpRequest) (*Bgp, error)
	DeleteBgp(context.Context, *DeleteBgpRequest) (*emptypb.Empty, error)
	UpdateBgp(context.Context, *UpdateBgpRequest) (*Bgp, error)
	ListBgps(context.Context, *ListBgpsRequest) (*ListBgpsResponse, error)
	GetBgp(context.Context, *GetBgpRequest) (*Bgp, error)
	// bgppeer (optional) apis
	CreateBGPPeer(context.Context, *CreateBGPPeerRequest) (*BGPPeer, error)
	DeleteBGPPeer(context.Context, *DeleteBGPPeerRequest) (*emptypb.Empty, error)
	UpdateBGPPeer(context.Context, *UpdateBGPPeerRequest) (*BGPPeer, error)
	ListBGPPeers(context.Context, *ListBGPPeersRequest) (*ListBGPPeersResponse, error)
	GetBGPPeer(context.Context, *GetBGPPeerRequest) (*BGPPeer, error)
	// bgppeeraf (optional) apis
	CreateBGPPeerAf(context.Context, *CreateBGPPeerAfRequest) (*BGPPeerAf, error)
	DeleteBGPPeerAf(context.Context, *DeleteBGPPeerAfRequest) (*emptypb.Empty, error)
	UpdateBGPPeerAf(context.Context, *UpdateBGPPeerAfRequest) (*BGPPeerAf, error)
	ListBGPPeerAfs(context.Context, *ListBGPPeerAfsRequest) (*ListBGPPeerAfsResponse, error)
	GetBGPPeerAf(context.Context, *GetBGPPeerAfRequest) (*BGPPeerAf, error)
	// mapping apis
	CreateMapping(context.Context, *CreateMappingRequest) (*Mapping, error)
	DeleteMapping(context.Context, *DeleteMappingRequest) (*emptypb.Empty, error)
	UpdateMapping(context.Context, *UpdateMappingRequest) (*Mapping, error)
	ListMappings(context.Context, *ListMappingsRequest) (*ListMappingsResponse, error)
	GetMapping(context.Context, *GetMappingRequest) (*Mapping, error)
	// nexthop apis
	CreateNextHop(context.Context, *CreateNextHopRequest) (*NextHop, error)
	DeleteNextHop(context.Context, *DeleteNextHopRequest) (*emptypb.Empty, error)
	UpdateNextHop(context.Context, *UpdateNextHopRequest) (*NextHop, error)
	ListNextHop(context.Context, *ListNextHopsRequest) (*ListNextHopsResponse, error)
	GetNextHop(context.Context, *GetNextHopRequest) (*NextHop, error)
	// nexthopgroup apis
	CreateNextHopGroup(context.Context, *CreateNextHopGroupRequest) (*NextHopGroup, error)
	DeleteNextHopGroup(context.Context, *DeleteNextHopGroupRequest) (*emptypb.Empty, error)
	UpdateNextHopGroup(context.Context, *UpdateNextHopGroupRequest) (*NextHopGroup, error)
	ListNextHopGroups(context.Context, *ListNextHopGroupsRequest) (*ListNextHopGroupsResponse, error)
	GetNextHopGroup(context.Context, *GetNextHopGroupRequest) (*NextHopGroup, error)
	// subnet apis
	CreateSubnet(context.Context, *CreateSubnetRequest) (*Subnet, error)
	DeleteSubnet(context.Context, *DeleteSubnetRequest) (*emptypb.Empty, error)
	UpdateSubnet(context.Context, *UpdateSubnetRequest) (*Subnet, error)
	ListSubnets(context.Context, *ListSubnetsRequest) (*ListSubnetsResponse, error)
	GetSubnet(context.Context, *GetSubnetRequest) (*Subnet, error)
	// tunnel apis
	CreateTunnel(context.Context, *CreateTunnelRequest) (*Tunnel, error)
	DeleteTunnel(context.Context, *DeleteTunnelRequest) (*emptypb.Empty, error)
	UpdateTunnel(context.Context, *UpdateTunnelRequest) (*Tunnel, error)
	ListTunnels(context.Context, *ListTunnelsRequest) (*ListTunnelsResponse, error)
	GetTunnel(context.Context, *GetTunnelRequest) (*Tunnel, error)
	// vpc apis
	CreateVpc(context.Context, *CreateVpcRequest) (*Vpc, error)
	DeleteVpc(context.Context, *DeleteVpcRequest) (*emptypb.Empty, error)
	UpdateVpc(context.Context, *UpdateVpcRequest) (*Vpc, error)
	ListVpcs(context.Context, *ListVpcsRequest) (*ListVpcsResponse, error)
	GetVpc(context.Context, *GetVpcRequest) (*Vpc, error)
	// vpcpeer apis
	CreateVPCPeer(context.Context, *CreateVPCPeerRequest) (*VPCPeer, error)
	DeleteVPCPeer(context.Context, *DeleteVPCPeerRequest) (*emptypb.Empty, error)
	UpdateVPCPeer(context.Context, *UpdateVPCPeerRequest) (*VPCPeer, error)
	ListVPCPeers(context.Context, *ListVPCPeersRequest) (*ListVPCPeersResponse, error)
	GetVPCPeer(context.Context, *GetVPCPeerRequest) (*VPCPeer, error)
	// securitypolicy apis
	CreateSecurityPolicy(context.Context, *CreateSecurityPolicyRequest) (*SecurityPolicy, error)
	DeleteSecurityPolicy(context.Context, *DeleteSecurityPolicyRequest) (*emptypb.Empty, error)
	UpdateSecurityPolicy(context.Context, *UpdateSecurityPolicyRequest) (*SecurityPolicy, error)
	ListSecurityPolicys(context.Context, *ListSecurityPolicysRequest) (*ListSecurityPolicysResponse, error)
	GetSecurityPolicy(context.Context, *GetSecurityPolicyRequest) (*SecurityPolicy, error)
	// securityrule apis
	CreateSecurityRule(context.Context, *CreateSecurityRuleRequest) (*SecurityRule, error)
	DeleteSecurityRule(context.Context, *DeleteSecurityRuleRequest) (*emptypb.Empty, error)
	UpdateSecurityRule(context.Context, *UpdateSecurityRuleRequest) (*SecurityRule, error)
	ListSecurityRules(context.Context, *ListSecurityRulesRequest) (*ListSecurityRulesResponse, error)
	GetSecurityRule(context.Context, *GetSecurityRuleRequest) (*SecurityRule, error)
	// securityprofile apis
	CreateSecurityProfile(context.Context, *CreateSecurityProfileRequest) (*SecurityProfile, error)
	DeleteSecurityProfile(context.Context, *DeleteSecurityProfileRequest) (*emptypb.Empty, error)
	UpdateSecurityProfile(context.Context, *UpdateSecurityProfileRequest) (*SecurityProfile, error)
	ListSecurityProfiles(context.Context, *ListSecurityProfilesRequest) (*ListSecurityProfilesResponse, error)
	GetSecurityProfile(context.Context, *GetSecurityProfileRequest) (*SecurityProfile, error)
}

// UnimplementedCloudInfraServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCloudInfraServiceServer struct {
}

func (*UnimplementedCloudInfraServiceServer) GetDeviceCapabilities(context.Context, *GetDeviceCapabilitiesRequest) (*DeviceCapabilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceCapabilities not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetDevice(context.Context, *GetDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdatePort(context.Context, *UpdatePortRequest) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePort not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListPorts(context.Context, *ListPortsRequest) (*ListPortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPorts not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetPort(context.Context, *GetPortRequest) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateVnic(context.Context, *CreateVnicRequest) (*Vnic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVnic not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteVnic(context.Context, *DeleteVnicRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVnic not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateVnic(context.Context, *UpdateVnicRequest) (*Vnic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVnic not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListVnics(context.Context, *ListVnicsRequest) (*ListVnicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVnics not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetVnic(context.Context, *GetVnicRequest) (*Vnic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVnic not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateInterface(context.Context, *CreateInterfaceRequest) (*Interface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterface not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteInterface(context.Context, *DeleteInterfaceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterface not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateInterface(context.Context, *UpdateInterfaceRequest) (*Interface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInterface not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListInterfaces(context.Context, *ListInterfacesRequest) (*ListInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterfaces not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetInterface(context.Context, *GetInterfaceRequest) (*Interface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterface not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateRouteTable(context.Context, *CreateRouteTableRequest) (*RouteTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouteTable not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteRouteTable(context.Context, *DeleteRouteTableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouteTable not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateRouteTable(context.Context, *UpdateRouteTableRequest) (*RouteTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRouteTable not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListRouteTables(context.Context, *ListRouteTablesRequest) (*ListRouteTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRouteTables not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetRouteTable(context.Context, *GetRouteTableRequest) (*RouteTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteTable not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateRoute(context.Context, *CreateRouteRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoute not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteRoute(context.Context, *DeleteRouteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateRoute(context.Context, *UpdateRouteRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoute not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetRoute(context.Context, *GetRouteRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateUnderlayRoute(context.Context, *CreateUnderlayRouteRequest) (*UnderlayRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnderlayRoute not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteUnderlayRoute(context.Context, *DeleteUnderlayRouteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnderlayRoute not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateUnderlayRoute(context.Context, *UpdateUnderlayRouteRequest) (*UnderlayRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnderlayRoute not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListUnderlayRoutes(context.Context, *ListUnderlayRoutesRequest) (*ListUnderlayRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnderlayRoutes not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetUnderlayRoute(context.Context, *GetUnderlayRouteRequest) (*UnderlayRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnderlayRoute not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateBgp(context.Context, *CreateBgpRequest) (*Bgp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBgp not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteBgp(context.Context, *DeleteBgpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBgp not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateBgp(context.Context, *UpdateBgpRequest) (*Bgp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBgp not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListBgps(context.Context, *ListBgpsRequest) (*ListBgpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBgps not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetBgp(context.Context, *GetBgpRequest) (*Bgp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBgp not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateBGPPeer(context.Context, *CreateBGPPeerRequest) (*BGPPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBGPPeer not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteBGPPeer(context.Context, *DeleteBGPPeerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBGPPeer not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateBGPPeer(context.Context, *UpdateBGPPeerRequest) (*BGPPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBGPPeer not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListBGPPeers(context.Context, *ListBGPPeersRequest) (*ListBGPPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBGPPeers not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetBGPPeer(context.Context, *GetBGPPeerRequest) (*BGPPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBGPPeer not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateBGPPeerAf(context.Context, *CreateBGPPeerAfRequest) (*BGPPeerAf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBGPPeerAf not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteBGPPeerAf(context.Context, *DeleteBGPPeerAfRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBGPPeerAf not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateBGPPeerAf(context.Context, *UpdateBGPPeerAfRequest) (*BGPPeerAf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBGPPeerAf not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListBGPPeerAfs(context.Context, *ListBGPPeerAfsRequest) (*ListBGPPeerAfsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBGPPeerAfs not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetBGPPeerAf(context.Context, *GetBGPPeerAfRequest) (*BGPPeerAf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBGPPeerAf not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateMapping(context.Context, *CreateMappingRequest) (*Mapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMapping not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteMapping(context.Context, *DeleteMappingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMapping not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateMapping(context.Context, *UpdateMappingRequest) (*Mapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMapping not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListMappings(context.Context, *ListMappingsRequest) (*ListMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMappings not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetMapping(context.Context, *GetMappingRequest) (*Mapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapping not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateNextHop(context.Context, *CreateNextHopRequest) (*NextHop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHop not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteNextHop(context.Context, *DeleteNextHopRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNextHop not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateNextHop(context.Context, *UpdateNextHopRequest) (*NextHop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNextHop not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListNextHop(context.Context, *ListNextHopsRequest) (*ListNextHopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNextHop not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetNextHop(context.Context, *GetNextHopRequest) (*NextHop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextHop not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateNextHopGroup(context.Context, *CreateNextHopGroupRequest) (*NextHopGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHopGroup not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteNextHopGroup(context.Context, *DeleteNextHopGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNextHopGroup not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateNextHopGroup(context.Context, *UpdateNextHopGroupRequest) (*NextHopGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNextHopGroup not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListNextHopGroups(context.Context, *ListNextHopGroupsRequest) (*ListNextHopGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNextHopGroups not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetNextHopGroup(context.Context, *GetNextHopGroupRequest) (*NextHopGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextHopGroup not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateSubnet(context.Context, *CreateSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubnet not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteSubnet(context.Context, *DeleteSubnetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubnet not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateSubnet(context.Context, *UpdateSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubnet not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListSubnets(context.Context, *ListSubnetsRequest) (*ListSubnetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubnets not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetSubnet(context.Context, *GetSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateTunnel(context.Context, *CreateTunnelRequest) (*Tunnel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteTunnel(context.Context, *DeleteTunnelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTunnel not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateTunnel(context.Context, *UpdateTunnelRequest) (*Tunnel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTunnel not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListTunnels(context.Context, *ListTunnelsRequest) (*ListTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTunnels not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetTunnel(context.Context, *GetTunnelRequest) (*Tunnel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnel not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateVpc(context.Context, *CreateVpcRequest) (*Vpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVpc not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteVpc(context.Context, *DeleteVpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVpc not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateVpc(context.Context, *UpdateVpcRequest) (*Vpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVpc not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListVpcs(context.Context, *ListVpcsRequest) (*ListVpcsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVpcs not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetVpc(context.Context, *GetVpcRequest) (*Vpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVpc not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateVPCPeer(context.Context, *CreateVPCPeerRequest) (*VPCPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVPCPeer not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteVPCPeer(context.Context, *DeleteVPCPeerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVPCPeer not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateVPCPeer(context.Context, *UpdateVPCPeerRequest) (*VPCPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVPCPeer not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListVPCPeers(context.Context, *ListVPCPeersRequest) (*ListVPCPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVPCPeers not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetVPCPeer(context.Context, *GetVPCPeerRequest) (*VPCPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVPCPeer not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateSecurityPolicy(context.Context, *CreateSecurityPolicyRequest) (*SecurityPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityPolicy not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteSecurityPolicy(context.Context, *DeleteSecurityPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityPolicy not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateSecurityPolicy(context.Context, *UpdateSecurityPolicyRequest) (*SecurityPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityPolicy not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListSecurityPolicys(context.Context, *ListSecurityPolicysRequest) (*ListSecurityPolicysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityPolicys not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetSecurityPolicy(context.Context, *GetSecurityPolicyRequest) (*SecurityPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityPolicy not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateSecurityRule(context.Context, *CreateSecurityRuleRequest) (*SecurityRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityRule not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteSecurityRule(context.Context, *DeleteSecurityRuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityRule not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateSecurityRule(context.Context, *UpdateSecurityRuleRequest) (*SecurityRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityRule not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListSecurityRules(context.Context, *ListSecurityRulesRequest) (*ListSecurityRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityRules not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetSecurityRule(context.Context, *GetSecurityRuleRequest) (*SecurityRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityRule not implemented")
}
func (*UnimplementedCloudInfraServiceServer) CreateSecurityProfile(context.Context, *CreateSecurityProfileRequest) (*SecurityProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityProfile not implemented")
}
func (*UnimplementedCloudInfraServiceServer) DeleteSecurityProfile(context.Context, *DeleteSecurityProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityProfile not implemented")
}
func (*UnimplementedCloudInfraServiceServer) UpdateSecurityProfile(context.Context, *UpdateSecurityProfileRequest) (*SecurityProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityProfile not implemented")
}
func (*UnimplementedCloudInfraServiceServer) ListSecurityProfiles(context.Context, *ListSecurityProfilesRequest) (*ListSecurityProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityProfiles not implemented")
}
func (*UnimplementedCloudInfraServiceServer) GetSecurityProfile(context.Context, *GetSecurityProfileRequest) (*SecurityProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityProfile not implemented")
}

func RegisterCloudInfraServiceServer(s *grpc.Server, srv CloudInfraServiceServer) {
	s.RegisterService(&_CloudInfraService_serviceDesc, srv)
}

func _CloudInfraService_GetDeviceCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetDeviceCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetDeviceCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetDeviceCapabilities(ctx, req.(*GetDeviceCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdatePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdatePort(ctx, req.(*UpdatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListPorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListPorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListPorts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListPorts(ctx, req.(*ListPortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetPort(ctx, req.(*GetPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateVnic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVnicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateVnic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateVnic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateVnic(ctx, req.(*CreateVnicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteVnic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVnicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteVnic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteVnic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteVnic(ctx, req.(*DeleteVnicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateVnic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVnicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateVnic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateVnic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateVnic(ctx, req.(*UpdateVnicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListVnics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVnicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListVnics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListVnics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListVnics(ctx, req.(*ListVnicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetVnic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVnicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetVnic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetVnic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetVnic(ctx, req.(*GetVnicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateInterface(ctx, req.(*CreateInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteInterface(ctx, req.(*DeleteInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateInterface(ctx, req.(*UpdateInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListInterfaces(ctx, req.(*ListInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetInterface(ctx, req.(*GetInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateRouteTable(ctx, req.(*CreateRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteRouteTable(ctx, req.(*DeleteRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateRouteTable(ctx, req.(*UpdateRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListRouteTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRouteTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListRouteTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListRouteTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListRouteTables(ctx, req.(*ListRouteTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetRouteTable(ctx, req.(*GetRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateRoute(ctx, req.(*CreateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteRoute(ctx, req.(*DeleteRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateRoute(ctx, req.(*UpdateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListRoutes(ctx, req.(*ListRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetRoute(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateUnderlayRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUnderlayRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateUnderlayRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateUnderlayRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateUnderlayRoute(ctx, req.(*CreateUnderlayRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteUnderlayRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUnderlayRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteUnderlayRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteUnderlayRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteUnderlayRoute(ctx, req.(*DeleteUnderlayRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateUnderlayRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUnderlayRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateUnderlayRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateUnderlayRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateUnderlayRoute(ctx, req.(*UpdateUnderlayRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListUnderlayRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnderlayRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListUnderlayRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListUnderlayRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListUnderlayRoutes(ctx, req.(*ListUnderlayRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetUnderlayRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnderlayRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetUnderlayRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetUnderlayRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetUnderlayRoute(ctx, req.(*GetUnderlayRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateBgp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBgpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateBgp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateBgp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateBgp(ctx, req.(*CreateBgpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteBgp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBgpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteBgp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteBgp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteBgp(ctx, req.(*DeleteBgpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateBgp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBgpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateBgp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateBgp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateBgp(ctx, req.(*UpdateBgpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListBgps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBgpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListBgps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListBgps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListBgps(ctx, req.(*ListBgpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetBgp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBgpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetBgp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetBgp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetBgp(ctx, req.(*GetBgpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateBGPPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBGPPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateBGPPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateBGPPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateBGPPeer(ctx, req.(*CreateBGPPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteBGPPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBGPPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteBGPPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteBGPPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteBGPPeer(ctx, req.(*DeleteBGPPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateBGPPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBGPPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateBGPPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateBGPPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateBGPPeer(ctx, req.(*UpdateBGPPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListBGPPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBGPPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListBGPPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListBGPPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListBGPPeers(ctx, req.(*ListBGPPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetBGPPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBGPPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetBGPPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetBGPPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetBGPPeer(ctx, req.(*GetBGPPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateBGPPeerAf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBGPPeerAfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateBGPPeerAf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateBGPPeerAf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateBGPPeerAf(ctx, req.(*CreateBGPPeerAfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteBGPPeerAf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBGPPeerAfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteBGPPeerAf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteBGPPeerAf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteBGPPeerAf(ctx, req.(*DeleteBGPPeerAfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateBGPPeerAf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBGPPeerAfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateBGPPeerAf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateBGPPeerAf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateBGPPeerAf(ctx, req.(*UpdateBGPPeerAfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListBGPPeerAfs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBGPPeerAfsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListBGPPeerAfs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListBGPPeerAfs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListBGPPeerAfs(ctx, req.(*ListBGPPeerAfsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetBGPPeerAf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBGPPeerAfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetBGPPeerAf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetBGPPeerAf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetBGPPeerAf(ctx, req.(*GetBGPPeerAfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateMapping(ctx, req.(*CreateMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteMapping(ctx, req.(*DeleteMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateMapping(ctx, req.(*UpdateMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListMappings(ctx, req.(*ListMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetMapping(ctx, req.(*GetMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateNextHop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateNextHop(ctx, req.(*CreateNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteNextHop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteNextHop(ctx, req.(*DeleteNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateNextHop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateNextHop(ctx, req.(*UpdateNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNextHopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListNextHop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListNextHop(ctx, req.(*ListNextHopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetNextHop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetNextHop(ctx, req.(*GetNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateNextHopGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateNextHopGroup(ctx, req.(*CreateNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteNextHopGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteNextHopGroup(ctx, req.(*DeleteNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateNextHopGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateNextHopGroup(ctx, req.(*UpdateNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListNextHopGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNextHopGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListNextHopGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListNextHopGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListNextHopGroups(ctx, req.(*ListNextHopGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetNextHopGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetNextHopGroup(ctx, req.(*GetNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateSubnet(ctx, req.(*CreateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteSubnet(ctx, req.(*DeleteSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateSubnet(ctx, req.(*UpdateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSubnets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListSubnets(ctx, req.(*ListSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetSubnet(ctx, req.(*GetSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateTunnel(ctx, req.(*CreateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteTunnel(ctx, req.(*DeleteTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateTunnel(ctx, req.(*UpdateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListTunnels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListTunnels(ctx, req.(*ListTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetTunnel(ctx, req.(*GetTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateVpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateVpc(ctx, req.(*CreateVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteVpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteVpc(ctx, req.(*DeleteVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateVpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateVpc(ctx, req.(*UpdateVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListVpcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVpcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListVpcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListVpcs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListVpcs(ctx, req.(*ListVpcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetVpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetVpc(ctx, req.(*GetVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateVPCPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVPCPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateVPCPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateVPCPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateVPCPeer(ctx, req.(*CreateVPCPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteVPCPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVPCPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteVPCPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteVPCPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteVPCPeer(ctx, req.(*DeleteVPCPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateVPCPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVPCPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateVPCPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateVPCPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateVPCPeer(ctx, req.(*UpdateVPCPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListVPCPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVPCPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListVPCPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListVPCPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListVPCPeers(ctx, req.(*ListVPCPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetVPCPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVPCPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetVPCPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetVPCPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetVPCPeer(ctx, req.(*GetVPCPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateSecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateSecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSecurityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateSecurityPolicy(ctx, req.(*CreateSecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteSecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteSecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSecurityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteSecurityPolicy(ctx, req.(*DeleteSecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateSecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateSecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSecurityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateSecurityPolicy(ctx, req.(*UpdateSecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListSecurityPolicys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityPolicysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListSecurityPolicys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSecurityPolicys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListSecurityPolicys(ctx, req.(*ListSecurityPolicysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetSecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetSecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSecurityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetSecurityPolicy(ctx, req.(*GetSecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateSecurityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateSecurityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSecurityRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateSecurityRule(ctx, req.(*CreateSecurityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteSecurityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteSecurityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSecurityRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteSecurityRule(ctx, req.(*DeleteSecurityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateSecurityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateSecurityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSecurityRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateSecurityRule(ctx, req.(*UpdateSecurityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListSecurityRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListSecurityRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSecurityRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListSecurityRules(ctx, req.(*ListSecurityRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetSecurityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetSecurityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSecurityRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetSecurityRule(ctx, req.(*GetSecurityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_CreateSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).CreateSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/CreateSecurityProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).CreateSecurityProfile(ctx, req.(*CreateSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_DeleteSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).DeleteSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/DeleteSecurityProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).DeleteSecurityProfile(ctx, req.(*DeleteSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_UpdateSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).UpdateSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/UpdateSecurityProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).UpdateSecurityProfile(ctx, req.(*UpdateSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_ListSecurityProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).ListSecurityProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/ListSecurityProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).ListSecurityProfiles(ctx, req.(*ListSecurityProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudInfraService_GetSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudInfraServiceServer).GetSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi_api.network.cloud.v1alpha1.CloudInfraService/GetSecurityProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudInfraServiceServer).GetSecurityProfile(ctx, req.(*GetSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudInfraService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi_api.network.cloud.v1alpha1.CloudInfraService",
	HandlerType: (*CloudInfraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceCapabilities",
			Handler:    _CloudInfraService_GetDeviceCapabilities_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _CloudInfraService_CreateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _CloudInfraService_DeleteDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _CloudInfraService_UpdateDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _CloudInfraService_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _CloudInfraService_GetDevice_Handler,
		},
		{
			MethodName: "UpdatePort",
			Handler:    _CloudInfraService_UpdatePort_Handler,
		},
		{
			MethodName: "ListPorts",
			Handler:    _CloudInfraService_ListPorts_Handler,
		},
		{
			MethodName: "GetPort",
			Handler:    _CloudInfraService_GetPort_Handler,
		},
		{
			MethodName: "CreateVnic",
			Handler:    _CloudInfraService_CreateVnic_Handler,
		},
		{
			MethodName: "DeleteVnic",
			Handler:    _CloudInfraService_DeleteVnic_Handler,
		},
		{
			MethodName: "UpdateVnic",
			Handler:    _CloudInfraService_UpdateVnic_Handler,
		},
		{
			MethodName: "ListVnics",
			Handler:    _CloudInfraService_ListVnics_Handler,
		},
		{
			MethodName: "GetVnic",
			Handler:    _CloudInfraService_GetVnic_Handler,
		},
		{
			MethodName: "CreateInterface",
			Handler:    _CloudInfraService_CreateInterface_Handler,
		},
		{
			MethodName: "DeleteInterface",
			Handler:    _CloudInfraService_DeleteInterface_Handler,
		},
		{
			MethodName: "UpdateInterface",
			Handler:    _CloudInfraService_UpdateInterface_Handler,
		},
		{
			MethodName: "ListInterfaces",
			Handler:    _CloudInfraService_ListInterfaces_Handler,
		},
		{
			MethodName: "GetInterface",
			Handler:    _CloudInfraService_GetInterface_Handler,
		},
		{
			MethodName: "CreateRouteTable",
			Handler:    _CloudInfraService_CreateRouteTable_Handler,
		},
		{
			MethodName: "DeleteRouteTable",
			Handler:    _CloudInfraService_DeleteRouteTable_Handler,
		},
		{
			MethodName: "UpdateRouteTable",
			Handler:    _CloudInfraService_UpdateRouteTable_Handler,
		},
		{
			MethodName: "ListRouteTables",
			Handler:    _CloudInfraService_ListRouteTables_Handler,
		},
		{
			MethodName: "GetRouteTable",
			Handler:    _CloudInfraService_GetRouteTable_Handler,
		},
		{
			MethodName: "CreateRoute",
			Handler:    _CloudInfraService_CreateRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _CloudInfraService_DeleteRoute_Handler,
		},
		{
			MethodName: "UpdateRoute",
			Handler:    _CloudInfraService_UpdateRoute_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _CloudInfraService_ListRoutes_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _CloudInfraService_GetRoute_Handler,
		},
		{
			MethodName: "CreateUnderlayRoute",
			Handler:    _CloudInfraService_CreateUnderlayRoute_Handler,
		},
		{
			MethodName: "DeleteUnderlayRoute",
			Handler:    _CloudInfraService_DeleteUnderlayRoute_Handler,
		},
		{
			MethodName: "UpdateUnderlayRoute",
			Handler:    _CloudInfraService_UpdateUnderlayRoute_Handler,
		},
		{
			MethodName: "ListUnderlayRoutes",
			Handler:    _CloudInfraService_ListUnderlayRoutes_Handler,
		},
		{
			MethodName: "GetUnderlayRoute",
			Handler:    _CloudInfraService_GetUnderlayRoute_Handler,
		},
		{
			MethodName: "CreateBgp",
			Handler:    _CloudInfraService_CreateBgp_Handler,
		},
		{
			MethodName: "DeleteBgp",
			Handler:    _CloudInfraService_DeleteBgp_Handler,
		},
		{
			MethodName: "UpdateBgp",
			Handler:    _CloudInfraService_UpdateBgp_Handler,
		},
		{
			MethodName: "ListBgps",
			Handler:    _CloudInfraService_ListBgps_Handler,
		},
		{
			MethodName: "GetBgp",
			Handler:    _CloudInfraService_GetBgp_Handler,
		},
		{
			MethodName: "CreateBGPPeer",
			Handler:    _CloudInfraService_CreateBGPPeer_Handler,
		},
		{
			MethodName: "DeleteBGPPeer",
			Handler:    _CloudInfraService_DeleteBGPPeer_Handler,
		},
		{
			MethodName: "UpdateBGPPeer",
			Handler:    _CloudInfraService_UpdateBGPPeer_Handler,
		},
		{
			MethodName: "ListBGPPeers",
			Handler:    _CloudInfraService_ListBGPPeers_Handler,
		},
		{
			MethodName: "GetBGPPeer",
			Handler:    _CloudInfraService_GetBGPPeer_Handler,
		},
		{
			MethodName: "CreateBGPPeerAf",
			Handler:    _CloudInfraService_CreateBGPPeerAf_Handler,
		},
		{
			MethodName: "DeleteBGPPeerAf",
			Handler:    _CloudInfraService_DeleteBGPPeerAf_Handler,
		},
		{
			MethodName: "UpdateBGPPeerAf",
			Handler:    _CloudInfraService_UpdateBGPPeerAf_Handler,
		},
		{
			MethodName: "ListBGPPeerAfs",
			Handler:    _CloudInfraService_ListBGPPeerAfs_Handler,
		},
		{
			MethodName: "GetBGPPeerAf",
			Handler:    _CloudInfraService_GetBGPPeerAf_Handler,
		},
		{
			MethodName: "CreateMapping",
			Handler:    _CloudInfraService_CreateMapping_Handler,
		},
		{
			MethodName: "DeleteMapping",
			Handler:    _CloudInfraService_DeleteMapping_Handler,
		},
		{
			MethodName: "UpdateMapping",
			Handler:    _CloudInfraService_UpdateMapping_Handler,
		},
		{
			MethodName: "ListMappings",
			Handler:    _CloudInfraService_ListMappings_Handler,
		},
		{
			MethodName: "GetMapping",
			Handler:    _CloudInfraService_GetMapping_Handler,
		},
		{
			MethodName: "CreateNextHop",
			Handler:    _CloudInfraService_CreateNextHop_Handler,
		},
		{
			MethodName: "DeleteNextHop",
			Handler:    _CloudInfraService_DeleteNextHop_Handler,
		},
		{
			MethodName: "UpdateNextHop",
			Handler:    _CloudInfraService_UpdateNextHop_Handler,
		},
		{
			MethodName: "ListNextHop",
			Handler:    _CloudInfraService_ListNextHop_Handler,
		},
		{
			MethodName: "GetNextHop",
			Handler:    _CloudInfraService_GetNextHop_Handler,
		},
		{
			MethodName: "CreateNextHopGroup",
			Handler:    _CloudInfraService_CreateNextHopGroup_Handler,
		},
		{
			MethodName: "DeleteNextHopGroup",
			Handler:    _CloudInfraService_DeleteNextHopGroup_Handler,
		},
		{
			MethodName: "UpdateNextHopGroup",
			Handler:    _CloudInfraService_UpdateNextHopGroup_Handler,
		},
		{
			MethodName: "ListNextHopGroups",
			Handler:    _CloudInfraService_ListNextHopGroups_Handler,
		},
		{
			MethodName: "GetNextHopGroup",
			Handler:    _CloudInfraService_GetNextHopGroup_Handler,
		},
		{
			MethodName: "CreateSubnet",
			Handler:    _CloudInfraService_CreateSubnet_Handler,
		},
		{
			MethodName: "DeleteSubnet",
			Handler:    _CloudInfraService_DeleteSubnet_Handler,
		},
		{
			MethodName: "UpdateSubnet",
			Handler:    _CloudInfraService_UpdateSubnet_Handler,
		},
		{
			MethodName: "ListSubnets",
			Handler:    _CloudInfraService_ListSubnets_Handler,
		},
		{
			MethodName: "GetSubnet",
			Handler:    _CloudInfraService_GetSubnet_Handler,
		},
		{
			MethodName: "CreateTunnel",
			Handler:    _CloudInfraService_CreateTunnel_Handler,
		},
		{
			MethodName: "DeleteTunnel",
			Handler:    _CloudInfraService_DeleteTunnel_Handler,
		},
		{
			MethodName: "UpdateTunnel",
			Handler:    _CloudInfraService_UpdateTunnel_Handler,
		},
		{
			MethodName: "ListTunnels",
			Handler:    _CloudInfraService_ListTunnels_Handler,
		},
		{
			MethodName: "GetTunnel",
			Handler:    _CloudInfraService_GetTunnel_Handler,
		},
		{
			MethodName: "CreateVpc",
			Handler:    _CloudInfraService_CreateVpc_Handler,
		},
		{
			MethodName: "DeleteVpc",
			Handler:    _CloudInfraService_DeleteVpc_Handler,
		},
		{
			MethodName: "UpdateVpc",
			Handler:    _CloudInfraService_UpdateVpc_Handler,
		},
		{
			MethodName: "ListVpcs",
			Handler:    _CloudInfraService_ListVpcs_Handler,
		},
		{
			MethodName: "GetVpc",
			Handler:    _CloudInfraService_GetVpc_Handler,
		},
		{
			MethodName: "CreateVPCPeer",
			Handler:    _CloudInfraService_CreateVPCPeer_Handler,
		},
		{
			MethodName: "DeleteVPCPeer",
			Handler:    _CloudInfraService_DeleteVPCPeer_Handler,
		},
		{
			MethodName: "UpdateVPCPeer",
			Handler:    _CloudInfraService_UpdateVPCPeer_Handler,
		},
		{
			MethodName: "ListVPCPeers",
			Handler:    _CloudInfraService_ListVPCPeers_Handler,
		},
		{
			MethodName: "GetVPCPeer",
			Handler:    _CloudInfraService_GetVPCPeer_Handler,
		},
		{
			MethodName: "CreateSecurityPolicy",
			Handler:    _CloudInfraService_CreateSecurityPolicy_Handler,
		},
		{
			MethodName: "DeleteSecurityPolicy",
			Handler:    _CloudInfraService_DeleteSecurityPolicy_Handler,
		},
		{
			MethodName: "UpdateSecurityPolicy",
			Handler:    _CloudInfraService_UpdateSecurityPolicy_Handler,
		},
		{
			MethodName: "ListSecurityPolicys",
			Handler:    _CloudInfraService_ListSecurityPolicys_Handler,
		},
		{
			MethodName: "GetSecurityPolicy",
			Handler:    _CloudInfraService_GetSecurityPolicy_Handler,
		},
		{
			MethodName: "CreateSecurityRule",
			Handler:    _CloudInfraService_CreateSecurityRule_Handler,
		},
		{
			MethodName: "DeleteSecurityRule",
			Handler:    _CloudInfraService_DeleteSecurityRule_Handler,
		},
		{
			MethodName: "UpdateSecurityRule",
			Handler:    _CloudInfraService_UpdateSecurityRule_Handler,
		},
		{
			MethodName: "ListSecurityRules",
			Handler:    _CloudInfraService_ListSecurityRules_Handler,
		},
		{
			MethodName: "GetSecurityRule",
			Handler:    _CloudInfraService_GetSecurityRule_Handler,
		},
		{
			MethodName: "CreateSecurityProfile",
			Handler:    _CloudInfraService_CreateSecurityProfile_Handler,
		},
		{
			MethodName: "DeleteSecurityProfile",
			Handler:    _CloudInfraService_DeleteSecurityProfile_Handler,
		},
		{
			MethodName: "UpdateSecurityProfile",
			Handler:    _CloudInfraService_UpdateSecurityProfile_Handler,
		},
		{
			MethodName: "ListSecurityProfiles",
			Handler:    _CloudInfraService_ListSecurityProfiles_Handler,
		},
		{
			MethodName: "GetSecurityProfile",
			Handler:    _CloudInfraService_GetSecurityProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudrpc.proto",
}
