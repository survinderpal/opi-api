// Copyright (c) 2023 Pensando, AMD Inc, or its subsidiaries.
// protobuf specification for BGP
//
//    This model supports the following BGP configuration level hierarchy:
//      BGP
//        |
//        +-> [ global BGP configuration ]
//        +-> neighbor
//          +-> [ neighbor config ]
//          +-> AFI / SAFI [ per-AFI overrides ]";
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: bgp.proto

package _go

import (
	_go "github.com/opiproject/opi-api/common/v1/gen/go"
	_go1 "github.com/opiproject/opi-api/network/opinetcommon/v1alpha1/gen/go"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BGP address family identifier
type BGPAfi int32

const (
	// AFI_UNSPECIFIED
	BGPAfi_BGP_AFI_UNSPECIFIED BGPAfi = 0
	// AFI_IPV4
	BGPAfi_BGP_AFI_IPV4 BGPAfi = 1
	// AFI_IPv6
	BGPAfi_BGP_AFI_IPV6 BGPAfi = 2
	// AFI_L2VPN
	BGPAfi_BGP_AFI_L2VPN BGPAfi = 25
)

// Enum value maps for BGPAfi.
var (
	BGPAfi_name = map[int32]string{
		0:  "BGP_AFI_UNSPECIFIED",
		1:  "BGP_AFI_IPV4",
		2:  "BGP_AFI_IPV6",
		25: "BGP_AFI_L2VPN",
	}
	BGPAfi_value = map[string]int32{
		"BGP_AFI_UNSPECIFIED": 0,
		"BGP_AFI_IPV4":        1,
		"BGP_AFI_IPV6":        2,
		"BGP_AFI_L2VPN":       25,
	}
)

func (x BGPAfi) Enum() *BGPAfi {
	p := new(BGPAfi)
	*p = x
	return p
}

func (x BGPAfi) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BGPAfi) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_proto_enumTypes[0].Descriptor()
}

func (BGPAfi) Type() protoreflect.EnumType {
	return &file_bgp_proto_enumTypes[0]
}

func (x BGPAfi) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BGPAfi.Descriptor instead.
func (BGPAfi) EnumDescriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{0}
}

// BGP sub-address family identitfier
type BGPSafi int32

const (
	// SAFI_UNSPECIFIED
	BGPSafi_BGP_SAFI_UNSPECIFIED BGPSafi = 0
	// SAFI_UNICAST
	BGPSafi_BGP_SAFI_UNICAST BGPSafi = 1
	// SAFI_EVPN
	BGPSafi_BGP_SAFI_EVPN BGPSafi = 70
)

// Enum value maps for BGPSafi.
var (
	BGPSafi_name = map[int32]string{
		0:  "BGP_SAFI_UNSPECIFIED",
		1:  "BGP_SAFI_UNICAST",
		70: "BGP_SAFI_EVPN",
	}
	BGPSafi_value = map[string]int32{
		"BGP_SAFI_UNSPECIFIED": 0,
		"BGP_SAFI_UNICAST":     1,
		"BGP_SAFI_EVPN":        70,
	}
)

func (x BGPSafi) Enum() *BGPSafi {
	p := new(BGPSafi)
	*p = x
	return p
}

func (x BGPSafi) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BGPSafi) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_proto_enumTypes[1].Descriptor()
}

func (BGPSafi) Type() protoreflect.EnumType {
	return &file_bgp_proto_enumTypes[1]
}

func (x BGPSafi) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BGPSafi.Descriptor instead.
func (BGPSafi) EnumDescriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{1}
}

// BGP peer RR client
type BGPPeerRRClient int32

const (
	// RR_UNSPECIFIED
	BGPPeerRRClient_BGP_PEER_RR_CLIENT_UNSPECIFIED BGPPeerRRClient = 0
	// RR_CLIENT
	BGPPeerRRClient_BGP_PEER_RR_CLIENT BGPPeerRRClient = 1
	// RR_MESHED_CLIENT
	BGPPeerRRClient_BGP_PEER_RR_MESHED_CLIENT BGPPeerRRClient = 2
)

// Enum value maps for BGPPeerRRClient.
var (
	BGPPeerRRClient_name = map[int32]string{
		0: "BGP_PEER_RR_CLIENT_UNSPECIFIED",
		1: "BGP_PEER_RR_CLIENT",
		2: "BGP_PEER_RR_MESHED_CLIENT",
	}
	BGPPeerRRClient_value = map[string]int32{
		"BGP_PEER_RR_CLIENT_UNSPECIFIED": 0,
		"BGP_PEER_RR_CLIENT":             1,
		"BGP_PEER_RR_MESHED_CLIENT":      2,
	}
)

func (x BGPPeerRRClient) Enum() *BGPPeerRRClient {
	p := new(BGPPeerRRClient)
	*p = x
	return p
}

func (x BGPPeerRRClient) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BGPPeerRRClient) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_proto_enumTypes[2].Descriptor()
}

func (BGPPeerRRClient) Type() protoreflect.EnumType {
	return &file_bgp_proto_enumTypes[2]
}

func (x BGPPeerRRClient) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BGPPeerRRClient.Descriptor instead.
func (BGPPeerRRClient) EnumDescriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{2}
}

// BGP peer session's last_state
type BGPPeerSessionState int32

const (
	// unspecified
	BGPPeerSessionState_BGP_PEER_SESSION_STATE_UNSPECIFIED BGPPeerSessionState = 0
	// idle
	BGPPeerSessionState_BGP_PEER_SESSION_STATE_IDLE BGPPeerSessionState = 1
	// connect
	BGPPeerSessionState_BGP_PEER_SESSION_STATE_CONNECT BGPPeerSessionState = 2
	// active
	BGPPeerSessionState_BGP_PEER_SESSION_STATE_ACTIVE BGPPeerSessionState = 3
	// open-sent
	BGPPeerSessionState_BGP_PEER_SESSION_STATE_OPENSENT BGPPeerSessionState = 4
	// open-confirm
	BGPPeerSessionState_BGP_PEER_SESSION_STATE_OPENCONFIRM BGPPeerSessionState = 5
	// open-established
	BGPPeerSessionState_BGP_PEER_SESSION_STATE_ESTABLISHED BGPPeerSessionState = 6
)

// Enum value maps for BGPPeerSessionState.
var (
	BGPPeerSessionState_name = map[int32]string{
		0: "BGP_PEER_SESSION_STATE_UNSPECIFIED",
		1: "BGP_PEER_SESSION_STATE_IDLE",
		2: "BGP_PEER_SESSION_STATE_CONNECT",
		3: "BGP_PEER_SESSION_STATE_ACTIVE",
		4: "BGP_PEER_SESSION_STATE_OPENSENT",
		5: "BGP_PEER_SESSION_STATE_OPENCONFIRM",
		6: "BGP_PEER_SESSION_STATE_ESTABLISHED",
	}
	BGPPeerSessionState_value = map[string]int32{
		"BGP_PEER_SESSION_STATE_UNSPECIFIED": 0,
		"BGP_PEER_SESSION_STATE_IDLE":        1,
		"BGP_PEER_SESSION_STATE_CONNECT":     2,
		"BGP_PEER_SESSION_STATE_ACTIVE":      3,
		"BGP_PEER_SESSION_STATE_OPENSENT":    4,
		"BGP_PEER_SESSION_STATE_OPENCONFIRM": 5,
		"BGP_PEER_SESSION_STATE_ESTABLISHED": 6,
	}
)

func (x BGPPeerSessionState) Enum() *BGPPeerSessionState {
	p := new(BGPPeerSessionState)
	*p = x
	return p
}

func (x BGPPeerSessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BGPPeerSessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_proto_enumTypes[3].Descriptor()
}

func (BGPPeerSessionState) Type() protoreflect.EnumType {
	return &file_bgp_proto_enumTypes[3]
}

func (x BGPPeerSessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BGPPeerSessionState.Descriptor instead.
func (BGPPeerSessionState) EnumDescriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{3}
}

// bgp as size
type BgpAsSize int32

const (
	// unspecified
	BgpAsSize_BGP_AS_SIZE_UNSPECIFIED BgpAsSize = 0
	// two bytes
	BgpAsSize_BGP_AS_SIZE_TWO_OCTET BgpAsSize = 1
	// four bytes
	BgpAsSize_BGP_AS_SIZE_FOUR_OCTET BgpAsSize = 2
)

// Enum value maps for BgpAsSize.
var (
	BgpAsSize_name = map[int32]string{
		0: "BGP_AS_SIZE_UNSPECIFIED",
		1: "BGP_AS_SIZE_TWO_OCTET",
		2: "BGP_AS_SIZE_FOUR_OCTET",
	}
	BgpAsSize_value = map[string]int32{
		"BGP_AS_SIZE_UNSPECIFIED": 0,
		"BGP_AS_SIZE_TWO_OCTET":   1,
		"BGP_AS_SIZE_FOUR_OCTET":  2,
	}
)

func (x BgpAsSize) Enum() *BgpAsSize {
	p := new(BgpAsSize)
	*p = x
	return p
}

func (x BgpAsSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpAsSize) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_proto_enumTypes[4].Descriptor()
}

func (BgpAsSize) Type() protoreflect.EnumType {
	return &file_bgp_proto_enumTypes[4]
}

func (x BgpAsSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpAsSize.Descriptor instead.
func (BgpAsSize) EnumDescriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{4}
}

// bgp address type
type BGPAddrType int32

const (
	// other
	BGPAddrType_BGP_ADDR_TYPE_UNSPECIFIED BGPAddrType = 0
	// ipv4
	BGPAddrType_BGP_ADDR_TYPE_IPV4 BGPAddrType = 1
	// ipv6
	BGPAddrType_BGP_ADDR_TYPE_IPV6 BGPAddrType = 2
	// nsap
	BGPAddrType_BGP_ADDR_TYPE_NSAP BGPAddrType = 3
	// hdlc
	BGPAddrType_BGP_ADDR_TYPE_HDLC BGPAddrType = 4
	// bbn-1822
	BGPAddrType_BGP_ADDR_TYPE_BBN1822 BGPAddrType = 5
	// ieee 802
	BGPAddrType_BGP_ADDR_TYPE_IEEE802 BGPAddrType = 6
	// e163
	BGPAddrType_BGP_ADDR_TYPE_E163 BGPAddrType = 7
	// e164
	BGPAddrType_BGP_ADDR_TYPE_E164 BGPAddrType = 8
	// f69
	BGPAddrType_BGP_ADDR_TYPE_F69 BGPAddrType = 9
	// x121
	BGPAddrType_BGP_ADDR_TYPE_X121 BGPAddrType = 10
	// ipx
	BGPAddrType_BGP_ADDR_TYPE_IPX BGPAddrType = 11
	// apple-talk
	BGPAddrType_BGP_ADDR_TYPE_APPLETALK BGPAddrType = 12
	// dec net
	BGPAddrType_BGP_ADDR_TYPE_DECNETIV BGPAddrType = 13
	// banyan
	BGPAddrType_BGP_ADDR_TYPE_BANYANVIN BGPAddrType = 14
	// nsap
	BGPAddrType_BGP_ADDR_TYPE_E164_NSAP BGPAddrType = 15
	// ipv4 tna
	BGPAddrType_BGP_ADDR_TYPE_IPV4_TNA BGPAddrType = 16
	// ipv6 tna
	BGPAddrType_BGP_ADDR_TYPE_IPV6_TNA BGPAddrType = 17
	// nsap tna
	BGPAddrType_BGP_ADDR_TYPE_NSAP_TNA BGPAddrType = 18
	// vpn ipv4
	BGPAddrType_BGP_ADDR_TYPE_VPN_IPV4 BGPAddrType = 19
	// vpn ipv6
	BGPAddrType_BGP_ADDR_TYPE_VPN_IPV6 BGPAddrType = 20
	// l2vpn
	BGPAddrType_BGP_ADDR_TYPE_L2VPN BGPAddrType = 25
)

// Enum value maps for BGPAddrType.
var (
	BGPAddrType_name = map[int32]string{
		0:  "BGP_ADDR_TYPE_UNSPECIFIED",
		1:  "BGP_ADDR_TYPE_IPV4",
		2:  "BGP_ADDR_TYPE_IPV6",
		3:  "BGP_ADDR_TYPE_NSAP",
		4:  "BGP_ADDR_TYPE_HDLC",
		5:  "BGP_ADDR_TYPE_BBN1822",
		6:  "BGP_ADDR_TYPE_IEEE802",
		7:  "BGP_ADDR_TYPE_E163",
		8:  "BGP_ADDR_TYPE_E164",
		9:  "BGP_ADDR_TYPE_F69",
		10: "BGP_ADDR_TYPE_X121",
		11: "BGP_ADDR_TYPE_IPX",
		12: "BGP_ADDR_TYPE_APPLETALK",
		13: "BGP_ADDR_TYPE_DECNETIV",
		14: "BGP_ADDR_TYPE_BANYANVIN",
		15: "BGP_ADDR_TYPE_E164_NSAP",
		16: "BGP_ADDR_TYPE_IPV4_TNA",
		17: "BGP_ADDR_TYPE_IPV6_TNA",
		18: "BGP_ADDR_TYPE_NSAP_TNA",
		19: "BGP_ADDR_TYPE_VPN_IPV4",
		20: "BGP_ADDR_TYPE_VPN_IPV6",
		25: "BGP_ADDR_TYPE_L2VPN",
	}
	BGPAddrType_value = map[string]int32{
		"BGP_ADDR_TYPE_UNSPECIFIED": 0,
		"BGP_ADDR_TYPE_IPV4":        1,
		"BGP_ADDR_TYPE_IPV6":        2,
		"BGP_ADDR_TYPE_NSAP":        3,
		"BGP_ADDR_TYPE_HDLC":        4,
		"BGP_ADDR_TYPE_BBN1822":     5,
		"BGP_ADDR_TYPE_IEEE802":     6,
		"BGP_ADDR_TYPE_E163":        7,
		"BGP_ADDR_TYPE_E164":        8,
		"BGP_ADDR_TYPE_F69":         9,
		"BGP_ADDR_TYPE_X121":        10,
		"BGP_ADDR_TYPE_IPX":         11,
		"BGP_ADDR_TYPE_APPLETALK":   12,
		"BGP_ADDR_TYPE_DECNETIV":    13,
		"BGP_ADDR_TYPE_BANYANVIN":   14,
		"BGP_ADDR_TYPE_E164_NSAP":   15,
		"BGP_ADDR_TYPE_IPV4_TNA":    16,
		"BGP_ADDR_TYPE_IPV6_TNA":    17,
		"BGP_ADDR_TYPE_NSAP_TNA":    18,
		"BGP_ADDR_TYPE_VPN_IPV4":    19,
		"BGP_ADDR_TYPE_VPN_IPV6":    20,
		"BGP_ADDR_TYPE_L2VPN":       25,
	}
)

func (x BGPAddrType) Enum() *BGPAddrType {
	p := new(BGPAddrType)
	*p = x
	return p
}

func (x BGPAddrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BGPAddrType) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_proto_enumTypes[5].Descriptor()
}

func (BGPAddrType) Type() protoreflect.EnumType {
	return &file_bgp_proto_enumTypes[5]
}

func (x BGPAddrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BGPAddrType.Descriptor instead.
func (BGPAddrType) EnumDescriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{5}
}

// bgp operational status
type BGPOperState int32

const (
	// unspecified
	BGPOperState_BGP_OPER_STATE_UNSPECIFIED BGPOperState = 0
	// up
	BGPOperState_BGP_OPER_STATE_UP BGPOperState = 1
	// down
	BGPOperState_BGP_OPER_STATE_DOWN BGPOperState = 2
	// going up
	BGPOperState_BGP_OPER_STATE_GOING_UP BGPOperState = 3
	// going down
	BGPOperState_BGP_OPER_STATE_GOING_DOWN BGPOperState = 4
	// activation failed
	BGPOperState_BGP_OPER_STATE_ACT_FAILED BGPOperState = 5
)

// Enum value maps for BGPOperState.
var (
	BGPOperState_name = map[int32]string{
		0: "BGP_OPER_STATE_UNSPECIFIED",
		1: "BGP_OPER_STATE_UP",
		2: "BGP_OPER_STATE_DOWN",
		3: "BGP_OPER_STATE_GOING_UP",
		4: "BGP_OPER_STATE_GOING_DOWN",
		5: "BGP_OPER_STATE_ACT_FAILED",
	}
	BGPOperState_value = map[string]int32{
		"BGP_OPER_STATE_UNSPECIFIED": 0,
		"BGP_OPER_STATE_UP":          1,
		"BGP_OPER_STATE_DOWN":        2,
		"BGP_OPER_STATE_GOING_UP":    3,
		"BGP_OPER_STATE_GOING_DOWN":  4,
		"BGP_OPER_STATE_ACT_FAILED":  5,
	}
)

func (x BGPOperState) Enum() *BGPOperState {
	p := new(BGPOperState)
	*p = x
	return p
}

func (x BGPOperState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BGPOperState) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_proto_enumTypes[6].Descriptor()
}

func (BGPOperState) Type() protoreflect.EnumType {
	return &file_bgp_proto_enumTypes[6]
}

func (x BGPOperState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BGPOperState.Descriptor instead.
func (BGPOperState) EnumDescriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{6}
}

// bgp add path capability negotiation
type BgpAddPathCapNegCap int32

const (
	// disabled
	// (-- api-linter: core::0126::unspecified=disabled
	//     aip.dev/not-precedent: zero is disabled, not unspecified. --)
	BgpAddPathCapNegCap_BGP_ADD_PATH_SR_DISABLE BgpAddPathCapNegCap = 0
	// receive
	BgpAddPathCapNegCap_BGP_ADD_PATH_SR_RECEIVE BgpAddPathCapNegCap = 1
	// send
	BgpAddPathCapNegCap_BGP_ADD_PATH_SR_SEND BgpAddPathCapNegCap = 2
	// both
	BgpAddPathCapNegCap_BGP_ADD_PATH_SR_BOTH BgpAddPathCapNegCap = 3
	// inherit
	BgpAddPathCapNegCap_BGP_ADD_PATH_SR_INHERIT BgpAddPathCapNegCap = 4
	// uknown
	BgpAddPathCapNegCap_BGP_ADD_PATH_SR_UNKNOWN BgpAddPathCapNegCap = 5
)

// Enum value maps for BgpAddPathCapNegCap.
var (
	BgpAddPathCapNegCap_name = map[int32]string{
		0: "BGP_ADD_PATH_SR_DISABLE",
		1: "BGP_ADD_PATH_SR_RECEIVE",
		2: "BGP_ADD_PATH_SR_SEND",
		3: "BGP_ADD_PATH_SR_BOTH",
		4: "BGP_ADD_PATH_SR_INHERIT",
		5: "BGP_ADD_PATH_SR_UNKNOWN",
	}
	BgpAddPathCapNegCap_value = map[string]int32{
		"BGP_ADD_PATH_SR_DISABLE": 0,
		"BGP_ADD_PATH_SR_RECEIVE": 1,
		"BGP_ADD_PATH_SR_SEND":    2,
		"BGP_ADD_PATH_SR_BOTH":    3,
		"BGP_ADD_PATH_SR_INHERIT": 4,
		"BGP_ADD_PATH_SR_UNKNOWN": 5,
	}
)

func (x BgpAddPathCapNegCap) Enum() *BgpAddPathCapNegCap {
	p := new(BgpAddPathCapNegCap)
	*p = x
	return p
}

func (x BgpAddPathCapNegCap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpAddPathCapNegCap) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_proto_enumTypes[7].Descriptor()
}

func (BgpAddPathCapNegCap) Type() protoreflect.EnumType {
	return &file_bgp_proto_enumTypes[7]
}

func (x BgpAddPathCapNegCap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpAddPathCapNegCap.Descriptor instead.
func (BgpAddPathCapNegCap) EnumDescriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{7}
}

// clear route request's options
type BGPClearRouteOptions int32

const (
	// unspecified
	BGPClearRouteOptions_BGP_CLEAR_ROUTE_OPTIONS_UNSPECIFIED BGPClearRouteOptions = 0
	// toggle session
	BGPClearRouteOptions_BGP_CLEAR_ROUTE_OPTIONS_HARD BGPClearRouteOptions = 1
	// request route refresh from peer
	BGPClearRouteOptions_BGP_CLEAR_ROUTE_OPTIONS_REFRESH_IN BGPClearRouteOptions = 2
	// send all routes to peer
	BGPClearRouteOptions_BGP_CLEAR_ROUTE_OPTIONS_REFRESH_OUT BGPClearRouteOptions = 3
	// send all routes to peer and request route refresh from peer
	BGPClearRouteOptions_BGP_CLEAR_ROUTE_OPTIONS_REFRESH_BOTH BGPClearRouteOptions = 4
)

// Enum value maps for BGPClearRouteOptions.
var (
	BGPClearRouteOptions_name = map[int32]string{
		0: "BGP_CLEAR_ROUTE_OPTIONS_UNSPECIFIED",
		1: "BGP_CLEAR_ROUTE_OPTIONS_HARD",
		2: "BGP_CLEAR_ROUTE_OPTIONS_REFRESH_IN",
		3: "BGP_CLEAR_ROUTE_OPTIONS_REFRESH_OUT",
		4: "BGP_CLEAR_ROUTE_OPTIONS_REFRESH_BOTH",
	}
	BGPClearRouteOptions_value = map[string]int32{
		"BGP_CLEAR_ROUTE_OPTIONS_UNSPECIFIED":  0,
		"BGP_CLEAR_ROUTE_OPTIONS_HARD":         1,
		"BGP_CLEAR_ROUTE_OPTIONS_REFRESH_IN":   2,
		"BGP_CLEAR_ROUTE_OPTIONS_REFRESH_OUT":  3,
		"BGP_CLEAR_ROUTE_OPTIONS_REFRESH_BOTH": 4,
	}
)

func (x BGPClearRouteOptions) Enum() *BGPClearRouteOptions {
	p := new(BGPClearRouteOptions)
	*p = x
	return p
}

func (x BGPClearRouteOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BGPClearRouteOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_proto_enumTypes[8].Descriptor()
}

func (BGPClearRouteOptions) Type() protoreflect.EnumType {
	return &file_bgp_proto_enumTypes[8]
}

func (x BGPClearRouteOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BGPClearRouteOptions.Descriptor instead.
func (BGPClearRouteOptions) EnumDescriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{8}
}

// NLRI source
type NLRISrc int32

const (
	// unspecified
	NLRISrc_NLRI_SRC_UNSPECIFIED NLRISrc = 0
	// learned from peer
	NLRISrc_NLRI_SRC_PEER NLRISrc = 1
	// learned from AFM
	NLRISrc_NLRI_SRC_AFM NLRISrc = 2
	// created by itself
	NLRISrc_NLRI_SRC_SELF NLRISrc = 3
)

// Enum value maps for NLRISrc.
var (
	NLRISrc_name = map[int32]string{
		0: "NLRI_SRC_UNSPECIFIED",
		1: "NLRI_SRC_PEER",
		2: "NLRI_SRC_AFM",
		3: "NLRI_SRC_SELF",
	}
	NLRISrc_value = map[string]int32{
		"NLRI_SRC_UNSPECIFIED": 0,
		"NLRI_SRC_PEER":        1,
		"NLRI_SRC_AFM":         2,
		"NLRI_SRC_SELF":        3,
	}
)

func (x NLRISrc) Enum() *NLRISrc {
	p := new(NLRISrc)
	*p = x
	return p
}

func (x NLRISrc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NLRISrc) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_proto_enumTypes[9].Descriptor()
}

func (NLRISrc) Type() protoreflect.EnumType {
	return &file_bgp_proto_enumTypes[9]
}

func (x NLRISrc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NLRISrc.Descriptor instead.
func (NLRISrc) EnumDescriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{9}
}

// NLRI active values
type BgpNlriIsActive int32

const (
	// unspecified
	BgpNlriIsActive_BGP_NLRI_IS_ACTIVE_UNSPECIFIED BgpNlriIsActive = 0
	// not tracked
	BgpNlriIsActive_BGP_NLRI_IS_ACTIVE_NOT_TRACKED BgpNlriIsActive = 1
	// inactive
	BgpNlriIsActive_BGP_NLRI_IS_ACTIVE_INACTIVE BgpNlriIsActive = 2
	// active
	BgpNlriIsActive_BGP_NLRI_IS_ACTIVE_ACTIVE BgpNlriIsActive = 3
)

// Enum value maps for BgpNlriIsActive.
var (
	BgpNlriIsActive_name = map[int32]string{
		0: "BGP_NLRI_IS_ACTIVE_UNSPECIFIED",
		1: "BGP_NLRI_IS_ACTIVE_NOT_TRACKED",
		2: "BGP_NLRI_IS_ACTIVE_INACTIVE",
		3: "BGP_NLRI_IS_ACTIVE_ACTIVE",
	}
	BgpNlriIsActive_value = map[string]int32{
		"BGP_NLRI_IS_ACTIVE_UNSPECIFIED": 0,
		"BGP_NLRI_IS_ACTIVE_NOT_TRACKED": 1,
		"BGP_NLRI_IS_ACTIVE_INACTIVE":    2,
		"BGP_NLRI_IS_ACTIVE_ACTIVE":      3,
	}
)

func (x BgpNlriIsActive) Enum() *BgpNlriIsActive {
	p := new(BgpNlriIsActive)
	*p = x
	return p
}

func (x BgpNlriIsActive) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpNlriIsActive) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_proto_enumTypes[10].Descriptor()
}

func (BgpNlriIsActive) Type() protoreflect.EnumType {
	return &file_bgp_proto_enumTypes[10]
}

func (x BgpNlriIsActive) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpNlriIsActive.Descriptor instead.
func (BgpNlriIsActive) EnumDescriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{10}
}

// BGP Reason for not best route
type BGPRsnNotBest int32

const (
	// not considered
	// (-- api-linter: core::0126::unspecified=disabled
	//     aip.dev/not-precedent: zero is not-considered, not unspecified. --)
	BGPRsnNotBest_BGP_REASON_NOT_CONSIDERED BGPRsnNotBest = 0
	// route is best
	BGPRsnNotBest_BGP_REASON_ROUTE_IS_BEST BGPRsnNotBest = 1
	// weight based
	BGPRsnNotBest_BGP_REASON_WEIGHT BGPRsnNotBest = 2
	// local preference
	BGPRsnNotBest_BGP_REASON_LOCAL_PREF BGPRsnNotBest = 3
	// local origin preferred
	BGPRsnNotBest_BGP_REASON_LCL_ORIG_PRFRRED BGPRsnNotBest = 4
	// as path lengt
	BGPRsnNotBest_BGP_REASON_AS_PATH_LEN BGPRsnNotBest = 5
	// origin based
	BGPRsnNotBest_BGP_REASON_ORIGIN BGPRsnNotBest = 6
	// med
	BGPRsnNotBest_BGP_REASON_MED BGPRsnNotBest = 7
	// origin tie
	BGPRsnNotBest_BGP_REASON_LOCAL_ORIG_TIE BGPRsnNotBest = 8
	// ebpg vs. ibgp peer
	BGPRsnNotBest_BGP_REASON_EBGP_V_IBGP_PEER BGPRsnNotBest = 9
	// admin distance
	BGPRsnNotBest_BGP_REASON_ADMIN_DISTANCE BGPRsnNotBest = 10
	// path next to cst
	BGPRsnNotBest_BGP_REASON_PATH_TO_NEXT_CST BGPRsnNotBest = 11
	// preferenc existing
	BGPRsnNotBest_BGP_REASON_PREF_EXISTING BGPRsnNotBest = 12
	// reason identifier
	// (-- api-linter: core::0140::abbreviations=disabled
	//     aip.dev/not-precedent: --)
	BGPRsnNotBest_BGP_REASON_IDENTIFIER BGPRsnNotBest = 13
	// cluster length
	BGPRsnNotBest_BGP_REASON_CLUSTER_LEN BGPRsnNotBest = 14
	// peer address type
	BGPRsnNotBest_BGP_REASON_PEER_ADDR_TYPE BGPRsnNotBest = 15
	// peer address
	BGPRsnNotBest_BGP_REASON_PEER_ADDR BGPRsnNotBest = 16
	// peer port
	BGPRsnNotBest_BGP_REASON_PEER_PORT BGPRsnNotBest = 17
	// path id
	BGPRsnNotBest_BGP_REASON_PATH_ID BGPRsnNotBest = 18
)

// Enum value maps for BGPRsnNotBest.
var (
	BGPRsnNotBest_name = map[int32]string{
		0:  "BGP_REASON_NOT_CONSIDERED",
		1:  "BGP_REASON_ROUTE_IS_BEST",
		2:  "BGP_REASON_WEIGHT",
		3:  "BGP_REASON_LOCAL_PREF",
		4:  "BGP_REASON_LCL_ORIG_PRFRRED",
		5:  "BGP_REASON_AS_PATH_LEN",
		6:  "BGP_REASON_ORIGIN",
		7:  "BGP_REASON_MED",
		8:  "BGP_REASON_LOCAL_ORIG_TIE",
		9:  "BGP_REASON_EBGP_V_IBGP_PEER",
		10: "BGP_REASON_ADMIN_DISTANCE",
		11: "BGP_REASON_PATH_TO_NEXT_CST",
		12: "BGP_REASON_PREF_EXISTING",
		13: "BGP_REASON_IDENTIFIER",
		14: "BGP_REASON_CLUSTER_LEN",
		15: "BGP_REASON_PEER_ADDR_TYPE",
		16: "BGP_REASON_PEER_ADDR",
		17: "BGP_REASON_PEER_PORT",
		18: "BGP_REASON_PATH_ID",
	}
	BGPRsnNotBest_value = map[string]int32{
		"BGP_REASON_NOT_CONSIDERED":   0,
		"BGP_REASON_ROUTE_IS_BEST":    1,
		"BGP_REASON_WEIGHT":           2,
		"BGP_REASON_LOCAL_PREF":       3,
		"BGP_REASON_LCL_ORIG_PRFRRED": 4,
		"BGP_REASON_AS_PATH_LEN":      5,
		"BGP_REASON_ORIGIN":           6,
		"BGP_REASON_MED":              7,
		"BGP_REASON_LOCAL_ORIG_TIE":   8,
		"BGP_REASON_EBGP_V_IBGP_PEER": 9,
		"BGP_REASON_ADMIN_DISTANCE":   10,
		"BGP_REASON_PATH_TO_NEXT_CST": 11,
		"BGP_REASON_PREF_EXISTING":    12,
		"BGP_REASON_IDENTIFIER":       13,
		"BGP_REASON_CLUSTER_LEN":      14,
		"BGP_REASON_PEER_ADDR_TYPE":   15,
		"BGP_REASON_PEER_ADDR":        16,
		"BGP_REASON_PEER_PORT":        17,
		"BGP_REASON_PATH_ID":          18,
	}
)

func (x BGPRsnNotBest) Enum() *BGPRsnNotBest {
	p := new(BGPRsnNotBest)
	*p = x
	return p
}

func (x BGPRsnNotBest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BGPRsnNotBest) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_proto_enumTypes[11].Descriptor()
}

func (BGPRsnNotBest) Type() protoreflect.EnumType {
	return &file_bgp_proto_enumTypes[11]
}

func (x BGPRsnNotBest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BGPRsnNotBest.Descriptor instead.
func (BGPRsnNotBest) EnumDescriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{11}
}

// bgp origin attribute
type BGPOriginAttr int32

const (
	// unspecified
	BGPOriginAttr_BGP_ORIGIN_ATTR_UNSPECIFIED BGPOriginAttr = 0
	// igp
	BGPOriginAttr_BGP_ORIGIN_ATTR_IGP BGPOriginAttr = 1
	// egp
	BGPOriginAttr_BGP_ORIGIN_ATTR_EGP BGPOriginAttr = 2
	// incomplete
	BGPOriginAttr_BGP_ORIGIN_ATTR_INCOMPLETE BGPOriginAttr = 3
)

// Enum value maps for BGPOriginAttr.
var (
	BGPOriginAttr_name = map[int32]string{
		0: "BGP_ORIGIN_ATTR_UNSPECIFIED",
		1: "BGP_ORIGIN_ATTR_IGP",
		2: "BGP_ORIGIN_ATTR_EGP",
		3: "BGP_ORIGIN_ATTR_INCOMPLETE",
	}
	BGPOriginAttr_value = map[string]int32{
		"BGP_ORIGIN_ATTR_UNSPECIFIED": 0,
		"BGP_ORIGIN_ATTR_IGP":         1,
		"BGP_ORIGIN_ATTR_EGP":         2,
		"BGP_ORIGIN_ATTR_INCOMPLETE":  3,
	}
)

func (x BGPOriginAttr) Enum() *BGPOriginAttr {
	p := new(BGPOriginAttr)
	*p = x
	return p
}

func (x BGPOriginAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BGPOriginAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_proto_enumTypes[12].Descriptor()
}

func (BGPOriginAttr) Type() protoreflect.EnumType {
	return &file_bgp_proto_enumTypes[12]
}

func (x BGPOriginAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BGPOriginAttr.Descriptor instead.
func (BGPOriginAttr) EnumDescriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{12}
}

// bgp peer type
type BGPPeerType int32

const (
	// unspecified
	BGPPeerType_BGP_PEER_TYPE_UNSPECIFIED BGPPeerType = 0
	// none (per protocol)
	BGPPeerType_BGP_PEER_TYPE_NONE BGPPeerType = 1
	// ibgp
	BGPPeerType_BGP_PEER_TYPE_IBGP BGPPeerType = 2
	// ebgp
	BGPPeerType_BGP_PEER_TYPE_EBGP BGPPeerType = 3
)

// Enum value maps for BGPPeerType.
var (
	BGPPeerType_name = map[int32]string{
		0: "BGP_PEER_TYPE_UNSPECIFIED",
		1: "BGP_PEER_TYPE_NONE",
		2: "BGP_PEER_TYPE_IBGP",
		3: "BGP_PEER_TYPE_EBGP",
	}
	BGPPeerType_value = map[string]int32{
		"BGP_PEER_TYPE_UNSPECIFIED": 0,
		"BGP_PEER_TYPE_NONE":        1,
		"BGP_PEER_TYPE_IBGP":        2,
		"BGP_PEER_TYPE_EBGP":        3,
	}
)

func (x BGPPeerType) Enum() *BGPPeerType {
	p := new(BGPPeerType)
	*p = x
	return p
}

func (x BGPPeerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BGPPeerType) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_proto_enumTypes[13].Descriptor()
}

func (BGPPeerType) Type() protoreflect.EnumType {
	return &file_bgp_proto_enumTypes[13]
}

func (x BGPPeerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BGPPeerType.Descriptor instead.
func (BGPPeerType) EnumDescriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{13}
}

// BGP ARO Advertisement State
type BgpAroAdvertState int32

const (
	// unspecified
	BgpAroAdvertState_BGP_ARO_ADVERT_STATE_UNSPECIFIED BgpAroAdvertState = 0
	// advertised
	BgpAroAdvertState_BGP_ARO_ADVERT_STATE_ADVERTISED BgpAroAdvertState = 1
	// suppressed
	BgpAroAdvertState_BGP_ARO_ADVERT_STATE_SUPPRESSED BgpAroAdvertState = 2
	// pending withdrawal
	BgpAroAdvertState_BGP_ARO_ADVERT_STATE_PENDING_WITHDRAWAL BgpAroAdvertState = 3
	// withdrawn
	BgpAroAdvertState_BGP_ARO_ADVERT_STATE_WITHDRAWN BgpAroAdvertState = 4
)

// Enum value maps for BgpAroAdvertState.
var (
	BgpAroAdvertState_name = map[int32]string{
		0: "BGP_ARO_ADVERT_STATE_UNSPECIFIED",
		1: "BGP_ARO_ADVERT_STATE_ADVERTISED",
		2: "BGP_ARO_ADVERT_STATE_SUPPRESSED",
		3: "BGP_ARO_ADVERT_STATE_PENDING_WITHDRAWAL",
		4: "BGP_ARO_ADVERT_STATE_WITHDRAWN",
	}
	BgpAroAdvertState_value = map[string]int32{
		"BGP_ARO_ADVERT_STATE_UNSPECIFIED":        0,
		"BGP_ARO_ADVERT_STATE_ADVERTISED":         1,
		"BGP_ARO_ADVERT_STATE_SUPPRESSED":         2,
		"BGP_ARO_ADVERT_STATE_PENDING_WITHDRAWAL": 3,
		"BGP_ARO_ADVERT_STATE_WITHDRAWN":          4,
	}
)

func (x BgpAroAdvertState) Enum() *BgpAroAdvertState {
	p := new(BgpAroAdvertState)
	*p = x
	return p
}

func (x BgpAroAdvertState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpAroAdvertState) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_proto_enumTypes[14].Descriptor()
}

func (BgpAroAdvertState) Type() protoreflect.EnumType {
	return &file_bgp_proto_enumTypes[14]
}

func (x BgpAroAdvertState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpAroAdvertState.Descriptor instead.
func (BgpAroAdvertState) EnumDescriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{14}
}

// BGP object
type Bgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP Configuration
	Spec *BgpSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// BGP Status
	Status *BgpStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Bgp) Reset() {
	*x = Bgp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp) ProtoMessage() {}

func (x *Bgp) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp.ProtoReflect.Descriptor instead.
func (*Bgp) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{0}
}

func (x *Bgp) GetSpec() *BgpSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Bgp) GetStatus() *BgpStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// BGP configuration
type BgpSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique key/identifier of BGP config
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the local autonomous system number
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: must use uint32 per BGP spec. --)
	LocalAsn uint32 `protobuf:"varint,2,opt,name=local_asn,json=localAsn,proto3" json:"local_asn,omitempty"`
	// router ID for this bgp instance
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: must use fixed32 per BGP spec. --)
	RouterId uint32 `protobuf:"fixed32,3,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	// cluster ID of the local router. router ID will be used as cluster ID
	// if cluster ID is not configured or configured to zero
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: must use fixed32 per BGP spec. --)
	ClusterId uint32 `protobuf:"fixed32,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// disable/enable BGP
	Disable bool `protobuf:"varint,5,opt,name=disable,proto3" json:"disable,omitempty"`
	// exclude default route from being used to resolve nexthop reachability in the underlay
	// changing this will deactivate and activate the routing stack RIB
	SuppressDefaultResolution bool `protobuf:"varint,6,opt,name=suppress_default_resolution,json=suppressDefaultResolution,proto3" json:"suppress_default_resolution,omitempty"`
}

func (x *BgpSpec) Reset() {
	*x = BgpSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSpec) ProtoMessage() {}

func (x *BgpSpec) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSpec.ProtoReflect.Descriptor instead.
func (*BgpSpec) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{1}
}

func (x *BgpSpec) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BgpSpec) GetLocalAsn() uint32 {
	if x != nil {
		return x.LocalAsn
	}
	return 0
}

func (x *BgpSpec) GetRouterId() uint32 {
	if x != nil {
		return x.RouterId
	}
	return 0
}

func (x *BgpSpec) GetClusterId() uint32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *BgpSpec) GetDisable() bool {
	if x != nil {
		return x.Disable
	}
	return false
}

func (x *BgpSpec) GetSuppressDefaultResolution() bool {
	if x != nil {
		return x.SuppressDefaultResolution
	}
	return false
}

// operational status of BGP
type BgpStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP current oper status
	OperState BGPOperState `protobuf:"varint,1,opt,name=oper_state,json=operState,proto3,enum=opi_api.network.cloud.v1alpha1.BGPOperState" json:"oper_state,omitempty"`
	// The total number of Adj-RIB-Out routes currently allocated
	AdjRibOutRoutesCount int32 `protobuf:"varint,2,opt,name=adj_rib_out_routes_count,json=adjRibOutRoutesCount,proto3" json:"adj_rib_out_routes_count,omitempty"`
	// The peak number of Adj-RIB-Out routes that have been allocated at any one time
	PeakNumAdjRibOutRoutes int32 `protobuf:"varint,3,opt,name=peak_num_adj_rib_out_routes,json=peakNumAdjRibOutRoutes,proto3" json:"peak_num_adj_rib_out_routes,omitempty"`
	// The maximum time remaining until route selection takes place following a restart, in hundredths of a second.
	RemDelaytime int32 `protobuf:"varint,4,opt,name=rem_delaytime,json=remDelaytime,proto3" json:"rem_delaytime,omitempty"`
	// The table version number of the Loc-RIB
	TableVer int32 `protobuf:"varint,5,opt,name=table_ver,json=tableVer,proto3" json:"table_ver,omitempty"`
}

func (x *BgpStatus) Reset() {
	*x = BgpStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpStatus) ProtoMessage() {}

func (x *BgpStatus) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpStatus.ProtoReflect.Descriptor instead.
func (*BgpStatus) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{2}
}

func (x *BgpStatus) GetOperState() BGPOperState {
	if x != nil {
		return x.OperState
	}
	return BGPOperState_BGP_OPER_STATE_UNSPECIFIED
}

func (x *BgpStatus) GetAdjRibOutRoutesCount() int32 {
	if x != nil {
		return x.AdjRibOutRoutesCount
	}
	return 0
}

func (x *BgpStatus) GetPeakNumAdjRibOutRoutes() int32 {
	if x != nil {
		return x.PeakNumAdjRibOutRoutes
	}
	return 0
}

func (x *BgpStatus) GetRemDelaytime() int32 {
	if x != nil {
		return x.RemDelaytime
	}
	return 0
}

func (x *BgpStatus) GetTableVer() int32 {
	if x != nil {
		return x.TableVer
	}
	return 0
}

// BGP peer object
type BGPPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bgp peer configuration
	Spec *BGPPeerSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// bgp peer status
	Status *BGPPeerStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BGPPeer) Reset() {
	*x = BGPPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BGPPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPPeer) ProtoMessage() {}

func (x *BGPPeer) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPPeer.ProtoReflect.Descriptor instead.
func (*BGPPeer) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{3}
}

func (x *BGPPeer) GetSpec() *BGPPeerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *BGPPeer) GetStatus() *BGPPeerStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// BGP peer configurations
type BGPPeerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique key/identifier of peer
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// peer enable/disable admin state. if peer is not enabled then local router
	// must not initiate connections to the neighbor and must not respond to
	// TCP connections attempts from neighbor
	State _go1.AdminState `protobuf:"varint,2,opt,name=state,proto3,enum=opi_api.network.opinetcommon.v1alpha1.AdminState" json:"state,omitempty"`
	// BGP local IP address. control plane chooses the local IP address of the
	// session if an all 0 IP address is provided
	LocalAddress *_go1.IPAddress `protobuf:"bytes,3,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	// BGP peer IP address
	PeerAddr *_go1.IPAddress `protobuf:"bytes,4,opt,name=peer_addr,json=peerAddr,proto3" json:"peer_addr,omitempty"`
	// remote 4-byte AS number
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: must use uint32 per BGP spec. --)
	RemoteAsn uint32 `protobuf:"varint,5,opt,name=remote_asn,json=remoteAsn,proto3" json:"remote_asn,omitempty"`
	// send regular community attributes to neighbor
	SendComm bool `protobuf:"varint,6,opt,name=send_comm,json=sendComm,proto3" json:"send_comm,omitempty"`
	// send extended community attributes to neighbor
	SendExtComm bool `protobuf:"varint,7,opt,name=send_ext_comm,json=sendExtComm,proto3" json:"send_ext_comm,omitempty"`
	// peer is a route reflector client
	RrClient BGPPeerRRClient `protobuf:"varint,8,opt,name=rr_client,json=rrClient,proto3,enum=opi_api.network.cloud.v1alpha1.BGPPeerRRClient" json:"rr_client,omitempty"`
	// BGP session connect-retry timer in seconds
	ConnectRetry int32 `protobuf:"varint,9,opt,name=connect_retry,json=connectRetry,proto3" json:"connect_retry,omitempty"`
	// BGP session configured holdtime timer in seconds
	Holdtime int32 `protobuf:"varint,10,opt,name=holdtime,proto3" json:"holdtime,omitempty"`
	// BGP session configured keepalive timer in seconds
	KeepAlive int32 `protobuf:"varint,11,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
	// MD5 authentication
	Password []byte `protobuf:"bytes,12,opt,name=password,proto3" json:"password,omitempty"`
	// TTL, set 1 to enable fast-external-fallover for directly connected eBGP sessions
	// range:1-255, default 64
	// (-- api-linter: core::0214::ttl-type=disabled
	//     aip.dev/not-precedent: ttl is not a duration. --)
	Ttl int32 `protobuf:"varint,13,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// IdleHoldTime in seconds, range:1-32767, default 15
	IdleHoldtime int32 `protobuf:"varint,14,opt,name=idle_holdtime,json=idleHoldtime,proto3" json:"idle_holdtime,omitempty"`
	// The number of instances of the local AS identifier that may be contained in the route's
	// AS-Path without rejecting the route. Changing the value of this object while the peer
	// is active triggers BGP to refresh its routes from the peer
	// range:0-255, default 0
	AllowLocalAs int32 `protobuf:"varint,15,opt,name=allow_local_as,json=allowLocalAs,proto3" json:"allow_local_as,omitempty"`
}

func (x *BGPPeerSpec) Reset() {
	*x = BGPPeerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BGPPeerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPPeerSpec) ProtoMessage() {}

func (x *BGPPeerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPPeerSpec.ProtoReflect.Descriptor instead.
func (*BGPPeerSpec) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{4}
}

func (x *BGPPeerSpec) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BGPPeerSpec) GetState() _go1.AdminState {
	if x != nil {
		return x.State
	}
	return _go1.AdminState(0)
}

func (x *BGPPeerSpec) GetLocalAddress() *_go1.IPAddress {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *BGPPeerSpec) GetPeerAddr() *_go1.IPAddress {
	if x != nil {
		return x.PeerAddr
	}
	return nil
}

func (x *BGPPeerSpec) GetRemoteAsn() uint32 {
	if x != nil {
		return x.RemoteAsn
	}
	return 0
}

func (x *BGPPeerSpec) GetSendComm() bool {
	if x != nil {
		return x.SendComm
	}
	return false
}

func (x *BGPPeerSpec) GetSendExtComm() bool {
	if x != nil {
		return x.SendExtComm
	}
	return false
}

func (x *BGPPeerSpec) GetRrClient() BGPPeerRRClient {
	if x != nil {
		return x.RrClient
	}
	return BGPPeerRRClient_BGP_PEER_RR_CLIENT_UNSPECIFIED
}

func (x *BGPPeerSpec) GetConnectRetry() int32 {
	if x != nil {
		return x.ConnectRetry
	}
	return 0
}

func (x *BGPPeerSpec) GetHoldtime() int32 {
	if x != nil {
		return x.Holdtime
	}
	return 0
}

func (x *BGPPeerSpec) GetKeepAlive() int32 {
	if x != nil {
		return x.KeepAlive
	}
	return 0
}

func (x *BGPPeerSpec) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *BGPPeerSpec) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *BGPPeerSpec) GetIdleHoldtime() int32 {
	if x != nil {
		return x.IdleHoldtime
	}
	return 0
}

func (x *BGPPeerSpec) GetAllowLocalAs() int32 {
	if x != nil {
		return x.AllowLocalAs
	}
	return 0
}

// BGP peer status
type BGPPeerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP session state
	SessionState BGPPeerSessionState `protobuf:"varint,1,opt,name=session_state,json=sessionState,proto3,enum=opi_api.network.cloud.v1alpha1.BGPPeerSessionState" json:"session_state,omitempty"`
	// BGP session previous status
	PrevSessionState BGPPeerSessionState `protobuf:"varint,2,opt,name=prev_session_state,json=prevSessionState,proto3,enum=opi_api.network.cloud.v1alpha1.BGPPeerSessionState" json:"prev_session_state,omitempty"`
	// last error received
	LastErrorRcvd []byte `protobuf:"bytes,3,opt,name=last_error_rcvd,json=lastErrorRcvd,proto3" json:"last_error_rcvd,omitempty"`
	// Last error sent
	LastErrorSent []byte `protobuf:"bytes,4,opt,name=last_error_sent,json=lastErrorSent,proto3" json:"last_error_sent,omitempty"`
	// selected local address of the peer
	LocalAddr *_go1.IPAddress `protobuf:"bytes,5,opt,name=local_addr,json=localAddr,proto3" json:"local_addr,omitempty"`
	// BGP session holdtime in seconds established with peer
	Holdtime int32 `protobuf:"varint,6,opt,name=holdtime,proto3" json:"holdtime,omitempty"`
	// BGP session keepalive in seconds established with peer
	Keepalive int32 `protobuf:"varint,7,opt,name=keepalive,proto3" json:"keepalive,omitempty"`
	// BGP The capabilities announced to the peer on the most recent open message sent to the peer.
	CapsSent int32 `protobuf:"varint,8,opt,name=caps_sent,json=capsSent,proto3" json:"caps_sent,omitempty"`
	// BGP The capabilities received on the most recent open message received from the peer.
	CapsRcvd int32 `protobuf:"varint,9,opt,name=caps_rcvd,json=capsRcvd,proto3" json:"caps_rcvd,omitempty"`
	// BGP The capabilities negotiated for the session with the peer
	CapsNeg int32 `protobuf:"varint,10,opt,name=caps_neg,json=capsNeg,proto3" json:"caps_neg,omitempty"`
	// BGP The address family of the local address used by the transport connection for the peering session.
	SelLocalAddrType BGPAddrType `protobuf:"varint,11,opt,name=sel_local_addr_type,json=selLocalAddrType,proto3,enum=opi_api.network.cloud.v1alpha1.BGPAddrType" json:"sel_local_addr_type,omitempty"`
	// Number of BGP Notifications received for this connection.
	IncomingNotifications int32 `protobuf:"varint,12,opt,name=incoming_notifications,json=incomingNotifications,proto3" json:"incoming_notifications,omitempty"`
	// Number of BGP Notifications sent for this connection.
	OutboundNotifications int32 `protobuf:"varint,13,opt,name=outbound_notifications,json=outboundNotifications,proto3" json:"outbound_notifications,omitempty"`
	// Number of BGP Updates received for this connection.
	IncomingUpdates int32 `protobuf:"varint,14,opt,name=incoming_updates,json=incomingUpdates,proto3" json:"incoming_updates,omitempty"`
	// Number of BGP Updates received for this connection.
	OutgoingUpdates int32 `protobuf:"varint,15,opt,name=outgoing_updates,json=outgoingUpdates,proto3" json:"outgoing_updates,omitempty"`
	// Number of BGP Keepalives received for this connection.
	IncomingKeepalives int32 `protobuf:"varint,16,opt,name=incoming_keepalives,json=incomingKeepalives,proto3" json:"incoming_keepalives,omitempty"`
	// Number of BGP Opens sent for this connection.
	OutgoingKeepalives int32 `protobuf:"varint,17,opt,name=outgoing_keepalives,json=outgoingKeepalives,proto3" json:"outgoing_keepalives,omitempty"`
	// Number of BGP Route Refreshes received for this connection.
	IncomingRefreshes int32 `protobuf:"varint,18,opt,name=incoming_refreshes,json=incomingRefreshes,proto3" json:"incoming_refreshes,omitempty"`
	// Number of BGP Route Refreshes sent for this connection.
	OutgoingRefreshes int32 `protobuf:"varint,19,opt,name=outgoing_refreshes,json=outgoingRefreshes,proto3" json:"outgoing_refreshes,omitempty"`
	// Total number of BGP messages received for this connection.
	IncomingTotalMessages int32 `protobuf:"varint,20,opt,name=incoming_total_messages,json=incomingTotalMessages,proto3" json:"incoming_total_messages,omitempty"`
	// Total number of BGP messages sent for this connection.
	OutgoingTotalMessages int32 `protobuf:"varint,21,opt,name=outgoing_total_messages,json=outgoingTotalMessages,proto3" json:"outgoing_total_messages,omitempty"`
	// Number of times BGP FSM transitioned to established state.
	FsmEstTransitions int32 `protobuf:"varint,22,opt,name=fsm_est_transitions,json=fsmEstTransitions,proto3" json:"fsm_est_transitions,omitempty"`
	// Number of retries after a flap.
	ConnectRetryCount int32 `protobuf:"varint,23,opt,name=connect_retry_count,json=connectRetryCount,proto3" json:"connect_retry_count,omitempty"`
	// Peer Group ID.
	Peergr int32 `protobuf:"varint,24,opt,name=peergr,proto3" json:"peergr,omitempty"`
	// Number of sec to stale the routes before deleting them.
	StalePathtime int32 `protobuf:"varint,25,opt,name=stale_pathtime,json=stalePathtime,proto3" json:"stale_pathtime,omitempty"`
	// Number of ORF entries of all types received from the peer.
	OrfEntryCount int32 `protobuf:"varint,26,opt,name=orf_entry_count,json=orfEntryCount,proto3" json:"orf_entry_count,omitempty"`
	// Number of received message elapsed time.
	RcvdMsgElpstime int32 `protobuf:"varint,27,opt,name=rcvd_msg_elpstime,json=rcvdMsgElpstime,proto3" json:"rcvd_msg_elpstime,omitempty"`
	// Number of Route Refreshes sent to the peer.
	RouteRefrSent int32 `protobuf:"varint,28,opt,name=route_refr_sent,json=routeRefrSent,proto3" json:"route_refr_sent,omitempty"`
	// Number of Route Refreshes received from the peer.
	RouteRefrRcvd int32 `protobuf:"varint,29,opt,name=route_refr_rcvd,json=routeRefrRcvd,proto3" json:"route_refr_rcvd,omitempty"`
	// Number of prefixes received from the peer.
	IncomingPrfxes int32 `protobuf:"varint,30,opt,name=incoming_prfxes,json=incomingPrfxes,proto3" json:"incoming_prfxes,omitempty"`
	// Number of prefixes advertised to the peer including withdrawn prefixes.
	OutgoingPrfxes int32 `protobuf:"varint,31,opt,name=outgoing_prfxes,json=outgoingPrfxes,proto3" json:"outgoing_prfxes,omitempty"`
	// Number of prefixes advertised to the peer.
	OutgoingPrfxesAdvertised int32 `protobuf:"varint,32,opt,name=outgoing_prfxes_advertised,json=outgoingPrfxesAdvertised,proto3" json:"outgoing_prfxes_advertised,omitempty"`
	// Connection retry time interval.
	ConnectRetryInt int32 `protobuf:"varint,33,opt,name=connect_retry_int,json=connectRetryInt,proto3" json:"connect_retry_int,omitempty"`
	// Time in sec since last update was sent to the peer.
	OutgoingUpdateElpstime int32 `protobuf:"varint,34,opt,name=outgoing_update_elpstime,json=outgoingUpdateElpstime,proto3" json:"outgoing_update_elpstime,omitempty"`
	// Number of prefixes failed export policy.
	OutgoingPrfxesDenied int32 `protobuf:"varint,35,opt,name=outgoing_prfxes_denied,json=outgoingPrfxesDenied,proto3" json:"outgoing_prfxes_denied,omitempty"`
	// Number of prefixes for which implicit withdraw has been sent.
	OutgoingPrfxesImpWdr int32 `protobuf:"varint,36,opt,name=outgoing_prfxes_imp_wdr,json=outgoingPrfxesImpWdr,proto3" json:"outgoing_prfxes_imp_wdr,omitempty"`
	// Number of prefixes for which explicit withdraw has been sent.
	OutgoingPrfxesExpWdr int32 `protobuf:"varint,37,opt,name=outgoing_prfxes_exp_wdr,json=outgoingPrfxesExpWdr,proto3" json:"outgoing_prfxes_exp_wdr,omitempty"`
	// Number of prefixes for which implicit withdraw has been rcvd.
	IncomingPrfxesImpWdr int32 `protobuf:"varint,38,opt,name=incoming_prfxes_imp_wdr,json=incomingPrfxesImpWdr,proto3" json:"incoming_prfxes_imp_wdr,omitempty"`
	// Number of prefixes for which explicit withdraw has been rcvd.
	IncomingPrfxesExpWdr int32 `protobuf:"varint,39,opt,name=incoming_prfxes_exp_wdr,json=incomingPrfxesExpWdr,proto3" json:"incoming_prfxes_exp_wdr,omitempty"`
	// Hold time received in open message.
	ReceivedHoldtime int32 `protobuf:"varint,40,opt,name=received_holdtime,json=receivedHoldtime,proto3" json:"received_holdtime,omitempty"`
	// For how long is this peer in established state in sec.
	FsmEstablishedtime int32 `protobuf:"varint,41,opt,name=fsm_establishedtime,json=fsmEstablishedtime,proto3" json:"fsm_establishedtime,omitempty"`
	// Elapsed time in sec since the last BGP message is received.
	IncomingUpdatesElpstime int32 `protobuf:"varint,42,opt,name=incoming_updates_elpstime,json=incomingUpdatesElpstime,proto3" json:"incoming_updates_elpstime,omitempty"`
	// Number of BGP Opens received for this connection.
	IncomingOpens int32 `protobuf:"varint,43,opt,name=incoming_opens,json=incomingOpens,proto3" json:"incoming_opens,omitempty"`
	// Number of BGP Opens sent for this connection.
	OutgoingOpens int32 `protobuf:"varint,44,opt,name=outgoing_opens,json=outgoingOpens,proto3" json:"outgoing_opens,omitempty"`
	// Peer Index
	PeerIndex int32 `protobuf:"varint,45,opt,name=peer_index,json=peerIndex,proto3" json:"peer_index,omitempty"`
	// Current TTL value in use
	// (-- api-linter: core::0214::ttl-type=disabled
	//     aip.dev/not-precedent: ttl is not a duration. --)
	Ttl int32 `protobuf:"varint,46,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Operational status of this peer
	OperState BGPOperState `protobuf:"varint,47,opt,name=oper_state,json=operState,proto3,enum=opi_api.network.cloud.v1alpha1.BGPOperState" json:"oper_state,omitempty"`
}

func (x *BGPPeerStatus) Reset() {
	*x = BGPPeerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BGPPeerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPPeerStatus) ProtoMessage() {}

func (x *BGPPeerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPPeerStatus.ProtoReflect.Descriptor instead.
func (*BGPPeerStatus) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{5}
}

func (x *BGPPeerStatus) GetSessionState() BGPPeerSessionState {
	if x != nil {
		return x.SessionState
	}
	return BGPPeerSessionState_BGP_PEER_SESSION_STATE_UNSPECIFIED
}

func (x *BGPPeerStatus) GetPrevSessionState() BGPPeerSessionState {
	if x != nil {
		return x.PrevSessionState
	}
	return BGPPeerSessionState_BGP_PEER_SESSION_STATE_UNSPECIFIED
}

func (x *BGPPeerStatus) GetLastErrorRcvd() []byte {
	if x != nil {
		return x.LastErrorRcvd
	}
	return nil
}

func (x *BGPPeerStatus) GetLastErrorSent() []byte {
	if x != nil {
		return x.LastErrorSent
	}
	return nil
}

func (x *BGPPeerStatus) GetLocalAddr() *_go1.IPAddress {
	if x != nil {
		return x.LocalAddr
	}
	return nil
}

func (x *BGPPeerStatus) GetHoldtime() int32 {
	if x != nil {
		return x.Holdtime
	}
	return 0
}

func (x *BGPPeerStatus) GetKeepalive() int32 {
	if x != nil {
		return x.Keepalive
	}
	return 0
}

func (x *BGPPeerStatus) GetCapsSent() int32 {
	if x != nil {
		return x.CapsSent
	}
	return 0
}

func (x *BGPPeerStatus) GetCapsRcvd() int32 {
	if x != nil {
		return x.CapsRcvd
	}
	return 0
}

func (x *BGPPeerStatus) GetCapsNeg() int32 {
	if x != nil {
		return x.CapsNeg
	}
	return 0
}

func (x *BGPPeerStatus) GetSelLocalAddrType() BGPAddrType {
	if x != nil {
		return x.SelLocalAddrType
	}
	return BGPAddrType_BGP_ADDR_TYPE_UNSPECIFIED
}

func (x *BGPPeerStatus) GetIncomingNotifications() int32 {
	if x != nil {
		return x.IncomingNotifications
	}
	return 0
}

func (x *BGPPeerStatus) GetOutboundNotifications() int32 {
	if x != nil {
		return x.OutboundNotifications
	}
	return 0
}

func (x *BGPPeerStatus) GetIncomingUpdates() int32 {
	if x != nil {
		return x.IncomingUpdates
	}
	return 0
}

func (x *BGPPeerStatus) GetOutgoingUpdates() int32 {
	if x != nil {
		return x.OutgoingUpdates
	}
	return 0
}

func (x *BGPPeerStatus) GetIncomingKeepalives() int32 {
	if x != nil {
		return x.IncomingKeepalives
	}
	return 0
}

func (x *BGPPeerStatus) GetOutgoingKeepalives() int32 {
	if x != nil {
		return x.OutgoingKeepalives
	}
	return 0
}

func (x *BGPPeerStatus) GetIncomingRefreshes() int32 {
	if x != nil {
		return x.IncomingRefreshes
	}
	return 0
}

func (x *BGPPeerStatus) GetOutgoingRefreshes() int32 {
	if x != nil {
		return x.OutgoingRefreshes
	}
	return 0
}

func (x *BGPPeerStatus) GetIncomingTotalMessages() int32 {
	if x != nil {
		return x.IncomingTotalMessages
	}
	return 0
}

func (x *BGPPeerStatus) GetOutgoingTotalMessages() int32 {
	if x != nil {
		return x.OutgoingTotalMessages
	}
	return 0
}

func (x *BGPPeerStatus) GetFsmEstTransitions() int32 {
	if x != nil {
		return x.FsmEstTransitions
	}
	return 0
}

func (x *BGPPeerStatus) GetConnectRetryCount() int32 {
	if x != nil {
		return x.ConnectRetryCount
	}
	return 0
}

func (x *BGPPeerStatus) GetPeergr() int32 {
	if x != nil {
		return x.Peergr
	}
	return 0
}

func (x *BGPPeerStatus) GetStalePathtime() int32 {
	if x != nil {
		return x.StalePathtime
	}
	return 0
}

func (x *BGPPeerStatus) GetOrfEntryCount() int32 {
	if x != nil {
		return x.OrfEntryCount
	}
	return 0
}

func (x *BGPPeerStatus) GetRcvdMsgElpstime() int32 {
	if x != nil {
		return x.RcvdMsgElpstime
	}
	return 0
}

func (x *BGPPeerStatus) GetRouteRefrSent() int32 {
	if x != nil {
		return x.RouteRefrSent
	}
	return 0
}

func (x *BGPPeerStatus) GetRouteRefrRcvd() int32 {
	if x != nil {
		return x.RouteRefrRcvd
	}
	return 0
}

func (x *BGPPeerStatus) GetIncomingPrfxes() int32 {
	if x != nil {
		return x.IncomingPrfxes
	}
	return 0
}

func (x *BGPPeerStatus) GetOutgoingPrfxes() int32 {
	if x != nil {
		return x.OutgoingPrfxes
	}
	return 0
}

func (x *BGPPeerStatus) GetOutgoingPrfxesAdvertised() int32 {
	if x != nil {
		return x.OutgoingPrfxesAdvertised
	}
	return 0
}

func (x *BGPPeerStatus) GetConnectRetryInt() int32 {
	if x != nil {
		return x.ConnectRetryInt
	}
	return 0
}

func (x *BGPPeerStatus) GetOutgoingUpdateElpstime() int32 {
	if x != nil {
		return x.OutgoingUpdateElpstime
	}
	return 0
}

func (x *BGPPeerStatus) GetOutgoingPrfxesDenied() int32 {
	if x != nil {
		return x.OutgoingPrfxesDenied
	}
	return 0
}

func (x *BGPPeerStatus) GetOutgoingPrfxesImpWdr() int32 {
	if x != nil {
		return x.OutgoingPrfxesImpWdr
	}
	return 0
}

func (x *BGPPeerStatus) GetOutgoingPrfxesExpWdr() int32 {
	if x != nil {
		return x.OutgoingPrfxesExpWdr
	}
	return 0
}

func (x *BGPPeerStatus) GetIncomingPrfxesImpWdr() int32 {
	if x != nil {
		return x.IncomingPrfxesImpWdr
	}
	return 0
}

func (x *BGPPeerStatus) GetIncomingPrfxesExpWdr() int32 {
	if x != nil {
		return x.IncomingPrfxesExpWdr
	}
	return 0
}

func (x *BGPPeerStatus) GetReceivedHoldtime() int32 {
	if x != nil {
		return x.ReceivedHoldtime
	}
	return 0
}

func (x *BGPPeerStatus) GetFsmEstablishedtime() int32 {
	if x != nil {
		return x.FsmEstablishedtime
	}
	return 0
}

func (x *BGPPeerStatus) GetIncomingUpdatesElpstime() int32 {
	if x != nil {
		return x.IncomingUpdatesElpstime
	}
	return 0
}

func (x *BGPPeerStatus) GetIncomingOpens() int32 {
	if x != nil {
		return x.IncomingOpens
	}
	return 0
}

func (x *BGPPeerStatus) GetOutgoingOpens() int32 {
	if x != nil {
		return x.OutgoingOpens
	}
	return 0
}

func (x *BGPPeerStatus) GetPeerIndex() int32 {
	if x != nil {
		return x.PeerIndex
	}
	return 0
}

func (x *BGPPeerStatus) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *BGPPeerStatus) GetOperState() BGPOperState {
	if x != nil {
		return x.OperState
	}
	return BGPOperState_BGP_OPER_STATE_UNSPECIFIED
}

// BGP peer AF object
type BGPPeerAf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// configuration
	Spec *BGPPeerAfSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// status
	State *BGPPeerAfStatus `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BGPPeerAf) Reset() {
	*x = BGPPeerAf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BGPPeerAf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPPeerAf) ProtoMessage() {}

func (x *BGPPeerAf) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPPeerAf.ProtoReflect.Descriptor instead.
func (*BGPPeerAf) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{6}
}

func (x *BGPPeerAf) GetSpec() *BGPPeerAfSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *BGPPeerAf) GetState() *BGPPeerAfStatus {
	if x != nil {
		return x.State
	}
	return nil
}

// BGP peer AF configurations
type BGPPeerAfSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique key/identifier of peer AF config
	Id *_go.ObjectKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// BGP local IP address
	LocalAddr *_go1.IPAddress `protobuf:"bytes,2,opt,name=local_addr,json=localAddr,proto3" json:"local_addr,omitempty"`
	// BGP peer IP address
	PeerAddr *_go1.IPAddress `protobuf:"bytes,3,opt,name=peer_addr,json=peerAddr,proto3" json:"peer_addr,omitempty"`
	// BGP address family
	Afi BGPAfi `protobuf:"varint,4,opt,name=afi,proto3,enum=opi_api.network.cloud.v1alpha1.BGPAfi" json:"afi,omitempty"`
	// BGP sub-address family
	Safi BGPSafi `protobuf:"varint,5,opt,name=safi,proto3,enum=opi_api.network.cloud.v1alpha1.BGPSafi" json:"safi,omitempty"`
	// enforce this router to set self as next-hop for advertised routes
	NexthopSelf bool `protobuf:"varint,6,opt,name=nexthop_self,json=nexthopSelf,proto3" json:"nexthop_self,omitempty"`
	// originate a default route to this peer
	DefaultOrig bool `protobuf:"varint,7,opt,name=default_orig,json=defaultOrig,proto3" json:"default_orig,omitempty"`
	// The local port configured for the peering session
	LocalPort int32 `protobuf:"varint,8,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	// The remote port configured for the peering session
	RemotePort int32 `protobuf:"varint,9,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
	// For a peer identified by a link-local IPv6 addresses, this is the scope ID
	// of bgpPeerLocalAddr and bgpPeerRemoteAddr. For a peer identified only by
	// interface (bgpPeerLocalAddr and bgpPeerRemoteAddr are both zero), this is
	// the interface index of the local point-to-point interface through which the
	// peer is reachable
	LocalAddrScopeId int32 `protobuf:"varint,10,opt,name=local_addr_scope_id,json=localAddrScopeId,proto3" json:"local_addr_scope_id,omitempty"`
}

func (x *BGPPeerAfSpec) Reset() {
	*x = BGPPeerAfSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BGPPeerAfSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPPeerAfSpec) ProtoMessage() {}

func (x *BGPPeerAfSpec) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPPeerAfSpec.ProtoReflect.Descriptor instead.
func (*BGPPeerAfSpec) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{7}
}

func (x *BGPPeerAfSpec) GetId() *_go.ObjectKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BGPPeerAfSpec) GetLocalAddr() *_go1.IPAddress {
	if x != nil {
		return x.LocalAddr
	}
	return nil
}

func (x *BGPPeerAfSpec) GetPeerAddr() *_go1.IPAddress {
	if x != nil {
		return x.PeerAddr
	}
	return nil
}

func (x *BGPPeerAfSpec) GetAfi() BGPAfi {
	if x != nil {
		return x.Afi
	}
	return BGPAfi_BGP_AFI_UNSPECIFIED
}

func (x *BGPPeerAfSpec) GetSafi() BGPSafi {
	if x != nil {
		return x.Safi
	}
	return BGPSafi_BGP_SAFI_UNSPECIFIED
}

func (x *BGPPeerAfSpec) GetNexthopSelf() bool {
	if x != nil {
		return x.NexthopSelf
	}
	return false
}

func (x *BGPPeerAfSpec) GetDefaultOrig() bool {
	if x != nil {
		return x.DefaultOrig
	}
	return false
}

func (x *BGPPeerAfSpec) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *BGPPeerAfSpec) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *BGPPeerAfSpec) GetLocalAddrScopeId() int32 {
	if x != nil {
		return x.LocalAddrScopeId
	}
	return 0
}

// BGP peer AF status
type BGPPeerAfStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP The index of the update group that the peer is a member of for this AFI/SAFI
	UpdateGroup int32 `protobuf:"varint,1,opt,name=update_group,json=updateGroup,proto3" json:"update_group,omitempty"`
	// For a peer identified by a link-local IPv6 addresses, this is the scope ID
	// of bgpPeerLocalAddr and bgpPeerRemoteAddr.
	LocalAddrScopeId int32 `protobuf:"varint,2,opt,name=local_addr_scope_id,json=localAddrScopeId,proto3" json:"local_addr_scope_id,omitempty"`
	// send a Route Refresh request to the peer for this AFI/SAFI.
	RouteRefresh bool `protobuf:"varint,3,opt,name=route_refresh,json=routeRefresh,proto3" json:"route_refresh,omitempty"`
	//The BGP additional path capability negotiated with this peer for this AFI/SAFI.
	AddPathCapNeg BgpAddPathCapNegCap `protobuf:"varint,4,opt,name=add_path_cap_neg,json=addPathCapNeg,proto3,enum=opi_api.network.cloud.v1alpha1.BgpAddPathCapNegCap" json:"add_path_cap_neg,omitempty"`
	// This value indicates whether the given peer is a reflector client of this
	// router for this AFI/SAFI, or not
	ReflectorClient BGPPeerRRClient `protobuf:"varint,5,opt,name=reflector_client,json=reflectorClient,proto3,enum=opi_api.network.cloud.v1alpha1.BGPPeerRRClient" json:"reflector_client,omitempty"`
}

func (x *BGPPeerAfStatus) Reset() {
	*x = BGPPeerAfStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BGPPeerAfStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPPeerAfStatus) ProtoMessage() {}

func (x *BGPPeerAfStatus) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPPeerAfStatus.ProtoReflect.Descriptor instead.
func (*BGPPeerAfStatus) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{8}
}

func (x *BGPPeerAfStatus) GetUpdateGroup() int32 {
	if x != nil {
		return x.UpdateGroup
	}
	return 0
}

func (x *BGPPeerAfStatus) GetLocalAddrScopeId() int32 {
	if x != nil {
		return x.LocalAddrScopeId
	}
	return 0
}

func (x *BGPPeerAfStatus) GetRouteRefresh() bool {
	if x != nil {
		return x.RouteRefresh
	}
	return false
}

func (x *BGPPeerAfStatus) GetAddPathCapNeg() BgpAddPathCapNegCap {
	if x != nil {
		return x.AddPathCapNeg
	}
	return BgpAddPathCapNegCap_BGP_ADD_PATH_SR_DISABLE
}

func (x *BGPPeerAfStatus) GetReflectorClient() BGPPeerRRClient {
	if x != nil {
		return x.ReflectorClient
	}
	return BGPPeerRRClient_BGP_PEER_RR_CLIENT_UNSPECIFIED
}

// BGP NLRI prefix object, this object is not conifgured by the user
// rather populated by the BGP automatically, spec is defined for get operations
type BGPNLRIPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// configuration
	Spec *BGPNLRIPrefixSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// status
	State *BGPNLRIPrefixStatus `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BGPNLRIPrefix) Reset() {
	*x = BGPNLRIPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BGPNLRIPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPNLRIPrefix) ProtoMessage() {}

func (x *BGPNLRIPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPNLRIPrefix.ProtoReflect.Descriptor instead.
func (*BGPNLRIPrefix) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{9}
}

func (x *BGPNLRIPrefix) GetSpec() *BGPNLRIPrefixSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *BGPNLRIPrefix) GetState() *BGPNLRIPrefixStatus {
	if x != nil {
		return x.State
	}
	return nil
}

// BGP NLRI prefix spec object
type BGPNLRIPrefixSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP address family
	Afi BGPAfi `protobuf:"varint,1,opt,name=afi,proto3,enum=opi_api.network.cloud.v1alpha1.BGPAfi" json:"afi,omitempty"`
	// BGP sub-address family
	Safi BGPSafi `protobuf:"varint,2,opt,name=safi,proto3,enum=opi_api.network.cloud.v1alpha1.BGPSafi" json:"safi,omitempty"`
	// prefix in NLRI
	Prefix []byte `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// prefix length
	PrefixLen int32 `protobuf:"varint,4,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	// route source (learned from BGP peer or AFM)
	RouteSource NLRISrc `protobuf:"varint,5,opt,name=route_source,json=routeSource,proto3,enum=opi_api.network.cloud.v1alpha1.NLRISrc" json:"route_source,omitempty"`
	// route source index
	RouteSourceIndex int32 `protobuf:"varint,6,opt,name=route_source_index,json=routeSourceIndex,proto3" json:"route_source_index,omitempty"`
	// path ID
	PathId int32 `protobuf:"varint,7,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
}

func (x *BGPNLRIPrefixSpec) Reset() {
	*x = BGPNLRIPrefixSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BGPNLRIPrefixSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPNLRIPrefixSpec) ProtoMessage() {}

func (x *BGPNLRIPrefixSpec) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPNLRIPrefixSpec.ProtoReflect.Descriptor instead.
func (*BGPNLRIPrefixSpec) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{10}
}

func (x *BGPNLRIPrefixSpec) GetAfi() BGPAfi {
	if x != nil {
		return x.Afi
	}
	return BGPAfi_BGP_AFI_UNSPECIFIED
}

func (x *BGPNLRIPrefixSpec) GetSafi() BGPSafi {
	if x != nil {
		return x.Safi
	}
	return BGPSafi_BGP_SAFI_UNSPECIFIED
}

func (x *BGPNLRIPrefixSpec) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BGPNLRIPrefixSpec) GetPrefixLen() int32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *BGPNLRIPrefixSpec) GetRouteSource() NLRISrc {
	if x != nil {
		return x.RouteSource
	}
	return NLRISrc_NLRI_SRC_UNSPECIFIED
}

func (x *BGPNLRIPrefixSpec) GetRouteSourceIndex() int32 {
	if x != nil {
		return x.RouteSourceIndex
	}
	return 0
}

func (x *BGPNLRIPrefixSpec) GetPathId() int32 {
	if x != nil {
		return x.PathId
	}
	return 0
}

// BGP NLRI prefix table
type BGPNLRIPrefixStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP address family
	Afi BGPAfi `protobuf:"varint,1,opt,name=afi,proto3,enum=opi_api.network.cloud.v1alpha1.BGPAfi" json:"afi,omitempty"`
	// BGP sub-address family
	Safi BGPSafi `protobuf:"varint,2,opt,name=safi,proto3,enum=opi_api.network.cloud.v1alpha1.BGPSafi" json:"safi,omitempty"`
	// prefix in NLRI
	Prefix []byte `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// prefix length
	PrefixLen int32 `protobuf:"varint,4,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	// route source (learned from BGP peer or AFM)
	RouteSource NLRISrc `protobuf:"varint,5,opt,name=route_source,json=routeSource,proto3,enum=opi_api.network.cloud.v1alpha1.NLRISrc" json:"route_source,omitempty"`
	// route source index
	RouteSourceIndex int32 `protobuf:"varint,6,opt,name=route_source_index,json=routeSourceIndex,proto3" json:"route_source_index,omitempty"`
	// path ID
	PathId int32 `protobuf:"varint,7,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	// chosen as BGP best route or not
	BestRoute bool `protobuf:"varint,8,opt,name=best_route,json=bestRoute,proto3" json:"best_route,omitempty"`
	// AS path string
	AsPathStr []byte `protobuf:"bytes,9,opt,name=as_path_str,json=asPathStr,proto3" json:"as_path_str,omitempty"`
	// originator ID
	PathOrigId []byte `protobuf:"bytes,10,opt,name=path_orig_id,json=pathOrigId,proto3" json:"path_orig_id,omitempty"`
	// next-hop address
	NextHopAddr []byte `protobuf:"bytes,11,opt,name=next_hop_addr,json=nextHopAddr,proto3" json:"next_hop_addr,omitempty"`
	// Size of each ASN in the AS path string
	AsSize BgpAsSize `protobuf:"varint,12,opt,name=as_size,json=asSize,proto3,enum=opi_api.network.cloud.v1alpha1.BgpAsSize" json:"as_size,omitempty"`
	// Is this route part of an ECMP set
	EcmpRoute bool `protobuf:"varint,13,opt,name=ecmp_route,json=ecmpRoute,proto3" json:"ecmp_route,omitempty"`
	// Peer IP
	PeerAddr *_go1.IPAddress `protobuf:"bytes,14,opt,name=peer_addr,json=peerAddr,proto3" json:"peer_addr,omitempty"`
	// The number of times this route has flapped since statistics were last cleared.
	FlapStatsFlapcnt int32 `protobuf:"varint,15,opt,name=flap_stats_flapcnt,json=flapStatsFlapcnt,proto3" json:"flap_stats_flapcnt,omitempty"`
	// Whether or not this route is suppressed.
	FlapStatsSupprsd bool `protobuf:"varint,16,opt,name=flap_stats_supprsd,json=flapStatsSupprsd,proto3" json:"flap_stats_supprsd,omitempty"`
	// An indication of whether or not this route is installed in the forwarding table
	IsActive BgpNlriIsActive `protobuf:"varint,17,opt,name=is_active,json=isActive,proto3,enum=opi_api.network.cloud.v1alpha1.BgpNlriIsActive" json:"is_active,omitempty"`
	// Whether or not this route was last sent by the peer before BGP detected that the peer was restarting.
	Stale bool `protobuf:"varint,18,opt,name=stale,proto3" json:"stale,omitempty"`
	// The value of sysUpTime when this route flapped
	FlapStarttime int32 `protobuf:"varint,19,opt,name=flap_starttime,json=flapStarttime,proto3" json:"flap_starttime,omitempty"`
	// If bgpNlriPrefixBest is 'true', then this field is set to 'routeIsBest'.
	// Otherwise, it reports the stage in the decision process when the route was determined to be non-best.
	ReasonNotBest BGPRsnNotBest `protobuf:"varint,20,opt,name=reason_not_best,json=reasonNotBest,proto3,enum=opi_api.network.cloud.v1alpha1.BGPRsnNotBest" json:"reason_not_best,omitempty"`
	// The extended community membership associated with the route after import policy has been applied.
	ExtComm [][]byte `protobuf:"bytes,21,rep,name=ext_comm,json=extComm,proto3" json:"ext_comm,omitempty"`
	// The community list associated with the route after import policy has been applied.
	Comm [][]byte `protobuf:"bytes,22,rep,name=comm,proto3" json:"comm,omitempty"`
	// Calculated local preference
	LocalPref int32 `protobuf:"varint,23,opt,name=local_pref,json=localPref,proto3" json:"local_pref,omitempty"`
	// Origin attribute
	Origin BGPOriginAttr `protobuf:"varint,24,opt,name=origin,proto3,enum=opi_api.network.cloud.v1alpha1.BGPOriginAttr" json:"origin,omitempty"`
	// Multi-Exit Discriminator present, med value can't be used to indicate this
	MedPresent bool `protobuf:"varint,25,opt,name=med_present,json=medPresent,proto3" json:"med_present,omitempty"`
	// med value
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: must use uint32 per BGP spec. --)
	Med uint32 `protobuf:"varint,26,opt,name=med,proto3" json:"med,omitempty"`
	// Peer type
	PeerType BGPPeerType `protobuf:"varint,27,opt,name=peer_type,json=peerType,proto3,enum=opi_api.network.cloud.v1alpha1.BGPPeerType" json:"peer_type,omitempty"`
}

func (x *BGPNLRIPrefixStatus) Reset() {
	*x = BGPNLRIPrefixStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BGPNLRIPrefixStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPNLRIPrefixStatus) ProtoMessage() {}

func (x *BGPNLRIPrefixStatus) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPNLRIPrefixStatus.ProtoReflect.Descriptor instead.
func (*BGPNLRIPrefixStatus) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{11}
}

func (x *BGPNLRIPrefixStatus) GetAfi() BGPAfi {
	if x != nil {
		return x.Afi
	}
	return BGPAfi_BGP_AFI_UNSPECIFIED
}

func (x *BGPNLRIPrefixStatus) GetSafi() BGPSafi {
	if x != nil {
		return x.Safi
	}
	return BGPSafi_BGP_SAFI_UNSPECIFIED
}

func (x *BGPNLRIPrefixStatus) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BGPNLRIPrefixStatus) GetPrefixLen() int32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *BGPNLRIPrefixStatus) GetRouteSource() NLRISrc {
	if x != nil {
		return x.RouteSource
	}
	return NLRISrc_NLRI_SRC_UNSPECIFIED
}

func (x *BGPNLRIPrefixStatus) GetRouteSourceIndex() int32 {
	if x != nil {
		return x.RouteSourceIndex
	}
	return 0
}

func (x *BGPNLRIPrefixStatus) GetPathId() int32 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *BGPNLRIPrefixStatus) GetBestRoute() bool {
	if x != nil {
		return x.BestRoute
	}
	return false
}

func (x *BGPNLRIPrefixStatus) GetAsPathStr() []byte {
	if x != nil {
		return x.AsPathStr
	}
	return nil
}

func (x *BGPNLRIPrefixStatus) GetPathOrigId() []byte {
	if x != nil {
		return x.PathOrigId
	}
	return nil
}

func (x *BGPNLRIPrefixStatus) GetNextHopAddr() []byte {
	if x != nil {
		return x.NextHopAddr
	}
	return nil
}

func (x *BGPNLRIPrefixStatus) GetAsSize() BgpAsSize {
	if x != nil {
		return x.AsSize
	}
	return BgpAsSize_BGP_AS_SIZE_UNSPECIFIED
}

func (x *BGPNLRIPrefixStatus) GetEcmpRoute() bool {
	if x != nil {
		return x.EcmpRoute
	}
	return false
}

func (x *BGPNLRIPrefixStatus) GetPeerAddr() *_go1.IPAddress {
	if x != nil {
		return x.PeerAddr
	}
	return nil
}

func (x *BGPNLRIPrefixStatus) GetFlapStatsFlapcnt() int32 {
	if x != nil {
		return x.FlapStatsFlapcnt
	}
	return 0
}

func (x *BGPNLRIPrefixStatus) GetFlapStatsSupprsd() bool {
	if x != nil {
		return x.FlapStatsSupprsd
	}
	return false
}

func (x *BGPNLRIPrefixStatus) GetIsActive() BgpNlriIsActive {
	if x != nil {
		return x.IsActive
	}
	return BgpNlriIsActive_BGP_NLRI_IS_ACTIVE_UNSPECIFIED
}

func (x *BGPNLRIPrefixStatus) GetStale() bool {
	if x != nil {
		return x.Stale
	}
	return false
}

func (x *BGPNLRIPrefixStatus) GetFlapStarttime() int32 {
	if x != nil {
		return x.FlapStarttime
	}
	return 0
}

func (x *BGPNLRIPrefixStatus) GetReasonNotBest() BGPRsnNotBest {
	if x != nil {
		return x.ReasonNotBest
	}
	return BGPRsnNotBest_BGP_REASON_NOT_CONSIDERED
}

func (x *BGPNLRIPrefixStatus) GetExtComm() [][]byte {
	if x != nil {
		return x.ExtComm
	}
	return nil
}

func (x *BGPNLRIPrefixStatus) GetComm() [][]byte {
	if x != nil {
		return x.Comm
	}
	return nil
}

func (x *BGPNLRIPrefixStatus) GetLocalPref() int32 {
	if x != nil {
		return x.LocalPref
	}
	return 0
}

func (x *BGPNLRIPrefixStatus) GetOrigin() BGPOriginAttr {
	if x != nil {
		return x.Origin
	}
	return BGPOriginAttr_BGP_ORIGIN_ATTR_UNSPECIFIED
}

func (x *BGPNLRIPrefixStatus) GetMedPresent() bool {
	if x != nil {
		return x.MedPresent
	}
	return false
}

func (x *BGPNLRIPrefixStatus) GetMed() uint32 {
	if x != nil {
		return x.Med
	}
	return 0
}

func (x *BGPNLRIPrefixStatus) GetPeerType() BGPPeerType {
	if x != nil {
		return x.PeerType
	}
	return BGPPeerType_BGP_PEER_TYPE_UNSPECIFIED
}

// BGP NLRI prefix filter object, returned in get response for BGP prefixes
type BGPNLRIPrefixFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filter based on extended communities
	ExtComm []byte `protobuf:"bytes,1,opt,name=ext_comm,json=extComm,proto3" json:"ext_comm,omitempty"`
	// filter based on l2vni/l3vni
	Vnid int32 `protobuf:"varint,2,opt,name=vnid,proto3" json:"vnid,omitempty"`
	// filter based on route type
	RouteType int32 `protobuf:"varint,3,opt,name=route_type,json=routeType,proto3" json:"route_type,omitempty"`
	// filter based on next-hop address
	NextHop *_go1.IPAddress `protobuf:"bytes,4,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	// filter based on ip address
	IpAddress *_go1.IPAddress `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// filter to include only best routes
	Best bool `protobuf:"varint,6,opt,name=best,proto3" json:"best,omitempty"`
}

func (x *BGPNLRIPrefixFilter) Reset() {
	*x = BGPNLRIPrefixFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BGPNLRIPrefixFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPNLRIPrefixFilter) ProtoMessage() {}

func (x *BGPNLRIPrefixFilter) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPNLRIPrefixFilter.ProtoReflect.Descriptor instead.
func (*BGPNLRIPrefixFilter) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{12}
}

func (x *BGPNLRIPrefixFilter) GetExtComm() []byte {
	if x != nil {
		return x.ExtComm
	}
	return nil
}

func (x *BGPNLRIPrefixFilter) GetVnid() int32 {
	if x != nil {
		return x.Vnid
	}
	return 0
}

func (x *BGPNLRIPrefixFilter) GetRouteType() int32 {
	if x != nil {
		return x.RouteType
	}
	return 0
}

func (x *BGPNLRIPrefixFilter) GetNextHop() *_go1.IPAddress {
	if x != nil {
		return x.NextHop
	}
	return nil
}

func (x *BGPNLRIPrefixFilter) GetIpAddress() *_go1.IPAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *BGPNLRIPrefixFilter) GetBest() bool {
	if x != nil {
		return x.Best
	}
	return false
}

// BGP AdjRibOut object, is a read only object specifiying BGP RIB adjacencies
// spec is used to query specific adjacencies
type BGPAdjRibOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filter for get operations
	Spec *BGPAdjRibOutSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// adjacency information
	Status *BGPAdjRibOutStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BGPAdjRibOut) Reset() {
	*x = BGPAdjRibOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BGPAdjRibOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPAdjRibOut) ProtoMessage() {}

func (x *BGPAdjRibOut) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPAdjRibOut.ProtoReflect.Descriptor instead.
func (*BGPAdjRibOut) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{13}
}

func (x *BGPAdjRibOut) GetSpec() *BGPAdjRibOutSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *BGPAdjRibOut) GetStatus() *BGPAdjRibOutStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// BGP Adj-RIB-Out spec for get operations
type BGPAdjRibOutSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BGPAdjRibOutSpec) Reset() {
	*x = BGPAdjRibOutSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BGPAdjRibOutSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPAdjRibOutSpec) ProtoMessage() {}

func (x *BGPAdjRibOutSpec) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPAdjRibOutSpec.ProtoReflect.Descriptor instead.
func (*BGPAdjRibOutSpec) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{14}
}

// BGP Adj-RIB-Out table contains set of routes advertised to all peers
type BGPAdjRibOutStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP peer IP address
	PeerAddr *_go1.IPAddress `protobuf:"bytes,1,opt,name=peer_addr,json=peerAddr,proto3" json:"peer_addr,omitempty"`
	// BGP address family
	Afi BGPAfi `protobuf:"varint,2,opt,name=afi,proto3,enum=opi_api.network.cloud.v1alpha1.BGPAfi" json:"afi,omitempty"`
	// BGP sub-address family
	Safi BGPSafi `protobuf:"varint,3,opt,name=safi,proto3,enum=opi_api.network.cloud.v1alpha1.BGPSafi" json:"safi,omitempty"`
	// Prefix in NLRI
	Prefix []byte `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Prefix length
	PrefixLen int32 `protobuf:"varint,5,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	// Advertisement status
	State BgpAroAdvertState `protobuf:"varint,6,opt,name=state,proto3,enum=opi_api.network.cloud.v1alpha1.BgpAroAdvertState" json:"state,omitempty"`
	// AS size
	AsSize BgpAsSize `protobuf:"varint,7,opt,name=as_size,json=asSize,proto3,enum=opi_api.network.cloud.v1alpha1.BgpAsSize" json:"as_size,omitempty"`
	// AS path string
	AsPathStr []byte `protobuf:"bytes,8,opt,name=as_path_str,json=asPathStr,proto3" json:"as_path_str,omitempty"`
	// The community list associated with the route after export policy has been applied
	Comm [][]byte `protobuf:"bytes,9,rep,name=comm,proto3" json:"comm,omitempty"`
	// The extended community membership associated with the route after export policy has been applied
	ExtComm [][]byte `protobuf:"bytes,10,rep,name=ext_comm,json=extComm,proto3" json:"ext_comm,omitempty"`
	// BGP Multi-Exit Discriminator value advertised to the peer
	MedPresent bool `protobuf:"varint,11,opt,name=med_present,json=medPresent,proto3" json:"med_present,omitempty"`
	// med value
	// (-- api-linter: core::0141::forbidden-types=disabled
	//     aip.dev/not-precedent: must use uint32 per BGP spec. --)
	Med uint32 `protobuf:"varint,12,opt,name=med,proto3" json:"med,omitempty"`
}

func (x *BGPAdjRibOutStatus) Reset() {
	*x = BGPAdjRibOutStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BGPAdjRibOutStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BGPAdjRibOutStatus) ProtoMessage() {}

func (x *BGPAdjRibOutStatus) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BGPAdjRibOutStatus.ProtoReflect.Descriptor instead.
func (*BGPAdjRibOutStatus) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{15}
}

func (x *BGPAdjRibOutStatus) GetPeerAddr() *_go1.IPAddress {
	if x != nil {
		return x.PeerAddr
	}
	return nil
}

func (x *BGPAdjRibOutStatus) GetAfi() BGPAfi {
	if x != nil {
		return x.Afi
	}
	return BGPAfi_BGP_AFI_UNSPECIFIED
}

func (x *BGPAdjRibOutStatus) GetSafi() BGPSafi {
	if x != nil {
		return x.Safi
	}
	return BGPSafi_BGP_SAFI_UNSPECIFIED
}

func (x *BGPAdjRibOutStatus) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BGPAdjRibOutStatus) GetPrefixLen() int32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *BGPAdjRibOutStatus) GetState() BgpAroAdvertState {
	if x != nil {
		return x.State
	}
	return BgpAroAdvertState_BGP_ARO_ADVERT_STATE_UNSPECIFIED
}

func (x *BGPAdjRibOutStatus) GetAsSize() BgpAsSize {
	if x != nil {
		return x.AsSize
	}
	return BgpAsSize_BGP_AS_SIZE_UNSPECIFIED
}

func (x *BGPAdjRibOutStatus) GetAsPathStr() []byte {
	if x != nil {
		return x.AsPathStr
	}
	return nil
}

func (x *BGPAdjRibOutStatus) GetComm() [][]byte {
	if x != nil {
		return x.Comm
	}
	return nil
}

func (x *BGPAdjRibOutStatus) GetExtComm() [][]byte {
	if x != nil {
		return x.ExtComm
	}
	return nil
}

func (x *BGPAdjRibOutStatus) GetMedPresent() bool {
	if x != nil {
		return x.MedPresent
	}
	return false
}

func (x *BGPAdjRibOutStatus) GetMed() uint32 {
	if x != nil {
		return x.Med
	}
	return 0
}

var File_bgp_proto protoreflect.FileDescriptor

var file_bgp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x62, 0x67, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x10, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x85, 0x01, 0x0a, 0x03, 0x42, 0x67, 0x70, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x07, 0x42, 0x67,
	0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x02, 0x0a, 0x09, 0x42, 0x67, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x4f, 0x70, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x36, 0x0a, 0x18, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1b, 0x70, 0x65, 0x61,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x70, 0x65, 0x61, 0x6b, 0x4e, 0x75, 0x6d, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72,
	0x65, 0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x07, 0x42, 0x47, 0x50,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb1, 0x05, 0x0a,
	0x0b, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e,
	0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69,
	0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x65,
	0x6e, 0x64, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x4c, 0x0a, 0x09, 0x72, 0x72, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47,
	0x50, 0x50, 0x65, 0x65, 0x72, 0x52, 0x52, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x72,
	0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70,
	0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x65,
	0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x64,
	0x6c, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73,
	0x22, 0xfd, 0x11, 0x0a, 0x0d, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x58, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x50, 0x65,
	0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x61, 0x0a, 0x12,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65,
	0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x70,
	0x72, 0x65, 0x76, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x63,
	0x76, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x63, 0x76, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x12,
	0x4f, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61,
	0x70, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x61, 0x70, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x70, 0x73, 0x5f,
	0x72, 0x63, 0x76, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x73,
	0x52, 0x63, 0x76, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x73, 0x5f, 0x6e, 0x65, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x70, 0x73, 0x4e, 0x65, 0x67, 0x12,
	0x5a, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x65, 0x70,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6f,
	0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x73,
	0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x75, 0x74, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x66, 0x73, 0x6d, 0x5f, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x66, 0x73,
	0x6d, 0x45, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x67, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x70, 0x65, 0x65, 0x72, 0x67, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x6f, 0x72, 0x66, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x72, 0x66, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x63, 0x76, 0x64, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x65, 0x6c, 0x70, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x72, 0x63, 0x76, 0x64, 0x4d, 0x73, 0x67, 0x45, 0x6c, 0x70, 0x73, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x5f, 0x72, 0x63, 0x76, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x52, 0x63,
	0x76, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x66, 0x78, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x66, 0x78, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x66, 0x78, 0x65, 0x73, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x66, 0x78, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x66, 0x78, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x66, 0x78, 0x65, 0x73, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x18, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x6c, 0x70, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6c, 0x70, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x75, 0x74, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x66, 0x78, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x66, 0x78, 0x65, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x12, 0x35,
	0x0a, 0x17, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x66, 0x78, 0x65,
	0x73, 0x5f, 0x69, 0x6d, 0x70, 0x5f, 0x77, 0x64, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x66, 0x78, 0x65, 0x73, 0x49,
	0x6d, 0x70, 0x57, 0x64, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x66, 0x78, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x77, 0x64, 0x72,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x66, 0x78, 0x65, 0x73, 0x45, 0x78, 0x70, 0x57, 0x64, 0x72, 0x12, 0x35, 0x0a, 0x17,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x66, 0x78, 0x65, 0x73, 0x5f,
	0x69, 0x6d, 0x70, 0x5f, 0x77, 0x64, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x66, 0x78, 0x65, 0x73, 0x49, 0x6d, 0x70,
	0x57, 0x64, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x66, 0x78, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x77, 0x64, 0x72, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x66, 0x78, 0x65, 0x73, 0x45, 0x78, 0x70, 0x57, 0x64, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x48,
	0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x73, 0x6d, 0x5f, 0x65,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x73, 0x6d, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6c, 0x70,
	0x73, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6c, 0x70, 0x73,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f,
	0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65,
	0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x74, 0x74, 0x6c, 0x12, 0x4b, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x4f, 0x70, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x95, 0x01, 0x0a, 0x09, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x12, 0x41,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47,
	0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x89, 0x04, 0x0a, 0x0d, 0x42, 0x47, 0x50,
	0x50, 0x65, 0x65, 0x72, 0x41, 0x66, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f,
	0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x4d, 0x0a, 0x09, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f,
	0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08,
	0x70, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x61, 0x66, 0x69, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x41, 0x66, 0x69, 0x52, 0x03, 0x61,
	0x66, 0x69, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x61, 0x66, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x47, 0x50, 0x53, 0x61, 0x66, 0x69, 0x52, 0x04, 0x73, 0x61, 0x66, 0x69, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x53, 0x65,
	0x6c, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4f, 0x72, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x0f, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72,
	0x41, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x13, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12,
	0x5c, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x70, 0x5f,
	0x6e, 0x65, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x64,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x43, 0x61, 0x70, 0x4e, 0x65, 0x67, 0x43, 0x61, 0x70, 0x52, 0x0d,
	0x61, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x43, 0x61, 0x70, 0x4e, 0x65, 0x67, 0x12, 0x5a, 0x0a,
	0x10, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x52, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x0d, 0x42, 0x47,
	0x50, 0x4e, 0x4c, 0x52, 0x49, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x45, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x4e, 0x4c,
	0x52, 0x49, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x49, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x4e, 0x4c, 0x52, 0x49, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd4, 0x02,
	0x0a, 0x11, 0x42, 0x47, 0x50, 0x4e, 0x4c, 0x52, 0x49, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x03, 0x61, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x47, 0x50, 0x41, 0x66, 0x69, 0x52, 0x03, 0x61, 0x66, 0x69, 0x12, 0x3b, 0x0a,
	0x04, 0x73, 0x61, 0x66, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50,
	0x53, 0x61, 0x66, 0x69, 0x52, 0x04, 0x73, 0x61, 0x66, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65,
	0x6e, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x4c, 0x52, 0x49, 0x53, 0x72, 0x63,
	0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61,
	0x74, 0x68, 0x49, 0x64, 0x22, 0xdd, 0x09, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x4e, 0x4c, 0x52, 0x49,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x03,
	0x61, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x41, 0x66,
	0x69, 0x52, 0x03, 0x61, 0x66, 0x69, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x61, 0x66, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x53, 0x61, 0x66, 0x69, 0x52, 0x04, 0x73,
	0x61, 0x66, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4e, 0x4c, 0x52, 0x49, 0x53, 0x72, 0x63, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b,
	0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x0c,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x42, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x06,
	0x61, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x63, 0x6d, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x65,
	0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x63, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x66, 0x6c, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x6c, 0x61, 0x70, 0x63,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x73, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x66, 0x6c, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x75, 0x70, 0x70, 0x72, 0x73, 0x64,
	0x12, 0x4c, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x6c, 0x72, 0x69, 0x49, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x6c,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x52, 0x73, 0x6e, 0x4e, 0x6f, 0x74, 0x42,
	0x65, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x42, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x6d,
	0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66,
	0x12, 0x45, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x47, 0x50, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x65,
	0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42,
	0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x4e, 0x4c, 0x52, 0x49,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6e, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6e, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f,
	0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f,
	0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07,
	0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x4f, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6f, 0x70,
	0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x65, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x65, 0x73, 0x74, 0x22, 0xa0, 0x01, 0x0a,
	0x0c, 0x42, 0x47, 0x50, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x12, 0x44, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50,
	0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x12, 0x0a, 0x10, 0x42, 0x47, 0x50, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x22, 0xa0, 0x04, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x6f, 0x70, 0x69, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x61, 0x66, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x41, 0x66, 0x69, 0x52, 0x03,
	0x61, 0x66, 0x69, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x61, 0x66, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x42, 0x47, 0x50, 0x53, 0x61, 0x66, 0x69, 0x52, 0x04, 0x73, 0x61, 0x66, 0x69,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x72, 0x6f, 0x41, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x42, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x06, 0x61, 0x73,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6d, 0x65, 0x64, 0x2a, 0x58, 0x0a, 0x06, 0x42, 0x47, 0x50, 0x41, 0x66, 0x69,
	0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x46, 0x49, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x47, 0x50,
	0x5f, 0x41, 0x46, 0x49, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x47, 0x50, 0x5f, 0x41, 0x46, 0x49, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x46, 0x49, 0x5f, 0x4c, 0x32, 0x56, 0x50, 0x4e, 0x10, 0x19,
	0x2a, 0x4c, 0x0a, 0x07, 0x42, 0x47, 0x50, 0x53, 0x61, 0x66, 0x69, 0x12, 0x18, 0x0a, 0x14, 0x42,
	0x47, 0x50, 0x5f, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x41, 0x46,
	0x49, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42,
	0x47, 0x50, 0x5f, 0x53, 0x41, 0x46, 0x49, 0x5f, 0x45, 0x56, 0x50, 0x4e, 0x10, 0x46, 0x2a, 0x6c,
	0x0a, 0x0f, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x52, 0x52, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x52, 0x52,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45,
	0x52, 0x5f, 0x52, 0x52, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x52, 0x52, 0x5f, 0x4d, 0x45, 0x53,
	0x48, 0x45, 0x44, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x9a, 0x02, 0x0a,
	0x13, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x47, 0x50,
	0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10,
	0x05, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x53, 0x54, 0x41,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x5f, 0x0a, 0x09, 0x42, 0x67, 0x70,
	0x41, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x53,
	0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x53, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x53, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x46, 0x4f,
	0x55, 0x52, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x10, 0x02, 0x2a, 0xd0, 0x04, 0x0a, 0x0b, 0x42,
	0x47, 0x50, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x47,
	0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x53, 0x41, 0x50, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x44, 0x4c, 0x43, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x47, 0x50,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x42, 0x4e, 0x31, 0x38,
	0x32, 0x32, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x45, 0x45, 0x45, 0x38, 0x30, 0x32, 0x10, 0x06, 0x12,
	0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x31, 0x36, 0x33, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x31, 0x36, 0x34, 0x10, 0x08, 0x12,
	0x15, 0x0a, 0x11, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x36, 0x39, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x31, 0x32, 0x31, 0x10, 0x0a, 0x12, 0x15,
	0x0a, 0x11, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x58, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x54, 0x41, 0x4c, 0x4b,
	0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x4e, 0x45, 0x54, 0x49, 0x56, 0x10, 0x0d, 0x12, 0x1b,
	0x0a, 0x17, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x41, 0x4e, 0x59, 0x41, 0x4e, 0x56, 0x49, 0x4e, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x42,
	0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x31, 0x36,
	0x34, 0x5f, 0x4e, 0x53, 0x41, 0x50, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x47, 0x50, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x54,
	0x4e, 0x41, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x54, 0x4e, 0x41, 0x10, 0x11,
	0x12, 0x1a, 0x0a, 0x16, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x53, 0x41, 0x50, 0x5f, 0x54, 0x4e, 0x41, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16,
	0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x50,
	0x4e, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x13, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x47, 0x50, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x32, 0x56, 0x50, 0x4e, 0x10, 0x19, 0x2a, 0xb9, 0x01,
	0x0a, 0x0c, 0x42, 0x47, 0x50, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x42, 0x47, 0x50, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x42, 0x47, 0x50, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x42, 0x47, 0x50, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x42,
	0x47, 0x50, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x4f,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x47,
	0x50, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xbd, 0x01, 0x0a, 0x13, 0x42, 0x67,
	0x70, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x43, 0x61, 0x70, 0x4e, 0x65, 0x67, 0x43, 0x61,
	0x70, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x41, 0x54,
	0x48, 0x5f, 0x53, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53,
	0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x42,
	0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x52, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x52, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x03, 0x12,
	0x1b, 0x0a, 0x17, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f,
	0x53, 0x52, 0x5f, 0x49, 0x4e, 0x48, 0x45, 0x52, 0x49, 0x54, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17,
	0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x53, 0x52, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x2a, 0xdc, 0x01, 0x0a, 0x14, 0x42, 0x47,
	0x50, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x47, 0x50, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x42,
	0x47, 0x50, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x26, 0x0a,
	0x22, 0x42, 0x47, 0x50, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48,
	0x5f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x47, 0x50, 0x5f, 0x43, 0x4c, 0x45,
	0x41, 0x52, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x28,
	0x0a, 0x24, 0x42, 0x47, 0x50, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53,
	0x48, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x04, 0x2a, 0x5b, 0x0a, 0x07, 0x4e, 0x4c, 0x52, 0x49,
	0x53, 0x72, 0x63, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x53, 0x52, 0x43, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x41, 0x46, 0x4d,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x53,
	0x45, 0x4c, 0x46, 0x10, 0x03, 0x2a, 0x99, 0x01, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x4e, 0x6c, 0x72,
	0x69, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x47, 0x50,
	0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x49, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x42, 0x47, 0x50, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x49, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x47, 0x50, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x49, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x47, 0x50, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x49,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x03, 0x2a, 0xa6, 0x04, 0x0a, 0x0d, 0x42, 0x47, 0x50, 0x52, 0x73, 0x6e, 0x4e, 0x6f, 0x74, 0x42,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x52, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x57,
	0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x47, 0x50, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x4c, 0x43, 0x4c, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x5f, 0x50, 0x52, 0x46, 0x52, 0x52, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x41, 0x53, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x05, 0x12,
	0x15, 0x0a, 0x11, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x52,
	0x49, 0x47, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x47,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x4f,
	0x52, 0x49, 0x47, 0x5f, 0x54, 0x49, 0x45, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x47, 0x50,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x42, 0x47, 0x50, 0x5f, 0x56, 0x5f, 0x49,
	0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x47,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44,
	0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x47, 0x50,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x54, 0x4f, 0x5f,
	0x4e, 0x45, 0x58, 0x54, 0x5f, 0x43, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x47,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x47, 0x50, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x4e, 0x10, 0x0e, 0x12,
	0x1d, 0x0a, 0x19, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x45,
	0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0f, 0x12, 0x18,
	0x0a, 0x14, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x45,
	0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x47, 0x50, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x49, 0x44, 0x10, 0x12, 0x2a, 0x82, 0x01, 0x0a, 0x0d, 0x42,
	0x47, 0x50, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1f, 0x0a, 0x1b,
	0x42, 0x47, 0x50, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x42, 0x47, 0x50, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x49, 0x47, 0x50, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f, 0x4f, 0x52,
	0x49, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x47, 0x50, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x1a, 0x42, 0x47, 0x50, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x2a,
	0x74, 0x0a, 0x0b, 0x42, 0x47, 0x50, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x19, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x42, 0x47, 0x50, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x47, 0x50, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x42, 0x47, 0x50, 0x10, 0x03, 0x2a, 0xd4, 0x01, 0x0a, 0x11, 0x42, 0x67, 0x70, 0x41, 0x72, 0x6f,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x42,
	0x47, 0x50, 0x5f, 0x41, 0x52, 0x4f, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x52, 0x4f, 0x5f, 0x41, 0x44, 0x56,
	0x45, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54,
	0x49, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x52,
	0x4f, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x42,
	0x47, 0x50, 0x5f, 0x41, 0x52, 0x4f, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x47, 0x50, 0x5f,
	0x41, 0x52, 0x4f, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x4e, 0x10, 0x04, 0x42, 0x69, 0x0a, 0x1e,
	0x6f, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x08,
	0x42, 0x47, 0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x6f, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bgp_proto_rawDescOnce sync.Once
	file_bgp_proto_rawDescData = file_bgp_proto_rawDesc
)

func file_bgp_proto_rawDescGZIP() []byte {
	file_bgp_proto_rawDescOnce.Do(func() {
		file_bgp_proto_rawDescData = protoimpl.X.CompressGZIP(file_bgp_proto_rawDescData)
	})
	return file_bgp_proto_rawDescData
}

var file_bgp_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_bgp_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_bgp_proto_goTypes = []interface{}{
	(BGPAfi)(0),                 // 0: opi_api.network.cloud.v1alpha1.BGPAfi
	(BGPSafi)(0),                // 1: opi_api.network.cloud.v1alpha1.BGPSafi
	(BGPPeerRRClient)(0),        // 2: opi_api.network.cloud.v1alpha1.BGPPeerRRClient
	(BGPPeerSessionState)(0),    // 3: opi_api.network.cloud.v1alpha1.BGPPeerSessionState
	(BgpAsSize)(0),              // 4: opi_api.network.cloud.v1alpha1.BgpAsSize
	(BGPAddrType)(0),            // 5: opi_api.network.cloud.v1alpha1.BGPAddrType
	(BGPOperState)(0),           // 6: opi_api.network.cloud.v1alpha1.BGPOperState
	(BgpAddPathCapNegCap)(0),    // 7: opi_api.network.cloud.v1alpha1.BgpAddPathCapNegCap
	(BGPClearRouteOptions)(0),   // 8: opi_api.network.cloud.v1alpha1.BGPClearRouteOptions
	(NLRISrc)(0),                // 9: opi_api.network.cloud.v1alpha1.NLRISrc
	(BgpNlriIsActive)(0),        // 10: opi_api.network.cloud.v1alpha1.BgpNlriIsActive
	(BGPRsnNotBest)(0),          // 11: opi_api.network.cloud.v1alpha1.BGPRsnNotBest
	(BGPOriginAttr)(0),          // 12: opi_api.network.cloud.v1alpha1.BGPOriginAttr
	(BGPPeerType)(0),            // 13: opi_api.network.cloud.v1alpha1.BGPPeerType
	(BgpAroAdvertState)(0),      // 14: opi_api.network.cloud.v1alpha1.BgpAroAdvertState
	(*Bgp)(nil),                 // 15: opi_api.network.cloud.v1alpha1.Bgp
	(*BgpSpec)(nil),             // 16: opi_api.network.cloud.v1alpha1.BgpSpec
	(*BgpStatus)(nil),           // 17: opi_api.network.cloud.v1alpha1.BgpStatus
	(*BGPPeer)(nil),             // 18: opi_api.network.cloud.v1alpha1.BGPPeer
	(*BGPPeerSpec)(nil),         // 19: opi_api.network.cloud.v1alpha1.BGPPeerSpec
	(*BGPPeerStatus)(nil),       // 20: opi_api.network.cloud.v1alpha1.BGPPeerStatus
	(*BGPPeerAf)(nil),           // 21: opi_api.network.cloud.v1alpha1.BGPPeerAf
	(*BGPPeerAfSpec)(nil),       // 22: opi_api.network.cloud.v1alpha1.BGPPeerAfSpec
	(*BGPPeerAfStatus)(nil),     // 23: opi_api.network.cloud.v1alpha1.BGPPeerAfStatus
	(*BGPNLRIPrefix)(nil),       // 24: opi_api.network.cloud.v1alpha1.BGPNLRIPrefix
	(*BGPNLRIPrefixSpec)(nil),   // 25: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec
	(*BGPNLRIPrefixStatus)(nil), // 26: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus
	(*BGPNLRIPrefixFilter)(nil), // 27: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter
	(*BGPAdjRibOut)(nil),        // 28: opi_api.network.cloud.v1alpha1.BGPAdjRibOut
	(*BGPAdjRibOutSpec)(nil),    // 29: opi_api.network.cloud.v1alpha1.BGPAdjRibOutSpec
	(*BGPAdjRibOutStatus)(nil),  // 30: opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus
	(*_go.ObjectKey)(nil),       // 31: opi_api.common.v1.ObjectKey
	(_go1.AdminState)(0),        // 32: opi_api.network.opinetcommon.v1alpha1.AdminState
	(*_go1.IPAddress)(nil),      // 33: opi_api.network.opinetcommon.v1alpha1.IPAddress
}
var file_bgp_proto_depIdxs = []int32{
	16, // 0: opi_api.network.cloud.v1alpha1.Bgp.spec:type_name -> opi_api.network.cloud.v1alpha1.BgpSpec
	17, // 1: opi_api.network.cloud.v1alpha1.Bgp.status:type_name -> opi_api.network.cloud.v1alpha1.BgpStatus
	31, // 2: opi_api.network.cloud.v1alpha1.BgpSpec.id:type_name -> opi_api.common.v1.ObjectKey
	6,  // 3: opi_api.network.cloud.v1alpha1.BgpStatus.oper_state:type_name -> opi_api.network.cloud.v1alpha1.BGPOperState
	19, // 4: opi_api.network.cloud.v1alpha1.BGPPeer.spec:type_name -> opi_api.network.cloud.v1alpha1.BGPPeerSpec
	20, // 5: opi_api.network.cloud.v1alpha1.BGPPeer.status:type_name -> opi_api.network.cloud.v1alpha1.BGPPeerStatus
	31, // 6: opi_api.network.cloud.v1alpha1.BGPPeerSpec.id:type_name -> opi_api.common.v1.ObjectKey
	32, // 7: opi_api.network.cloud.v1alpha1.BGPPeerSpec.state:type_name -> opi_api.network.opinetcommon.v1alpha1.AdminState
	33, // 8: opi_api.network.cloud.v1alpha1.BGPPeerSpec.local_address:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	33, // 9: opi_api.network.cloud.v1alpha1.BGPPeerSpec.peer_addr:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	2,  // 10: opi_api.network.cloud.v1alpha1.BGPPeerSpec.rr_client:type_name -> opi_api.network.cloud.v1alpha1.BGPPeerRRClient
	3,  // 11: opi_api.network.cloud.v1alpha1.BGPPeerStatus.session_state:type_name -> opi_api.network.cloud.v1alpha1.BGPPeerSessionState
	3,  // 12: opi_api.network.cloud.v1alpha1.BGPPeerStatus.prev_session_state:type_name -> opi_api.network.cloud.v1alpha1.BGPPeerSessionState
	33, // 13: opi_api.network.cloud.v1alpha1.BGPPeerStatus.local_addr:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	5,  // 14: opi_api.network.cloud.v1alpha1.BGPPeerStatus.sel_local_addr_type:type_name -> opi_api.network.cloud.v1alpha1.BGPAddrType
	6,  // 15: opi_api.network.cloud.v1alpha1.BGPPeerStatus.oper_state:type_name -> opi_api.network.cloud.v1alpha1.BGPOperState
	22, // 16: opi_api.network.cloud.v1alpha1.BGPPeerAf.spec:type_name -> opi_api.network.cloud.v1alpha1.BGPPeerAfSpec
	23, // 17: opi_api.network.cloud.v1alpha1.BGPPeerAf.state:type_name -> opi_api.network.cloud.v1alpha1.BGPPeerAfStatus
	31, // 18: opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.id:type_name -> opi_api.common.v1.ObjectKey
	33, // 19: opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.local_addr:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	33, // 20: opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.peer_addr:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	0,  // 21: opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.afi:type_name -> opi_api.network.cloud.v1alpha1.BGPAfi
	1,  // 22: opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.safi:type_name -> opi_api.network.cloud.v1alpha1.BGPSafi
	7,  // 23: opi_api.network.cloud.v1alpha1.BGPPeerAfStatus.add_path_cap_neg:type_name -> opi_api.network.cloud.v1alpha1.BgpAddPathCapNegCap
	2,  // 24: opi_api.network.cloud.v1alpha1.BGPPeerAfStatus.reflector_client:type_name -> opi_api.network.cloud.v1alpha1.BGPPeerRRClient
	25, // 25: opi_api.network.cloud.v1alpha1.BGPNLRIPrefix.spec:type_name -> opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec
	26, // 26: opi_api.network.cloud.v1alpha1.BGPNLRIPrefix.state:type_name -> opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus
	0,  // 27: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.afi:type_name -> opi_api.network.cloud.v1alpha1.BGPAfi
	1,  // 28: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.safi:type_name -> opi_api.network.cloud.v1alpha1.BGPSafi
	9,  // 29: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.route_source:type_name -> opi_api.network.cloud.v1alpha1.NLRISrc
	0,  // 30: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.afi:type_name -> opi_api.network.cloud.v1alpha1.BGPAfi
	1,  // 31: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.safi:type_name -> opi_api.network.cloud.v1alpha1.BGPSafi
	9,  // 32: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.route_source:type_name -> opi_api.network.cloud.v1alpha1.NLRISrc
	4,  // 33: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.as_size:type_name -> opi_api.network.cloud.v1alpha1.BgpAsSize
	33, // 34: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.peer_addr:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	10, // 35: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.is_active:type_name -> opi_api.network.cloud.v1alpha1.BgpNlriIsActive
	11, // 36: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.reason_not_best:type_name -> opi_api.network.cloud.v1alpha1.BGPRsnNotBest
	12, // 37: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.origin:type_name -> opi_api.network.cloud.v1alpha1.BGPOriginAttr
	13, // 38: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.peer_type:type_name -> opi_api.network.cloud.v1alpha1.BGPPeerType
	33, // 39: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.next_hop:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	33, // 40: opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.ip_address:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	29, // 41: opi_api.network.cloud.v1alpha1.BGPAdjRibOut.spec:type_name -> opi_api.network.cloud.v1alpha1.BGPAdjRibOutSpec
	30, // 42: opi_api.network.cloud.v1alpha1.BGPAdjRibOut.status:type_name -> opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus
	33, // 43: opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.peer_addr:type_name -> opi_api.network.opinetcommon.v1alpha1.IPAddress
	0,  // 44: opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.afi:type_name -> opi_api.network.cloud.v1alpha1.BGPAfi
	1,  // 45: opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.safi:type_name -> opi_api.network.cloud.v1alpha1.BGPSafi
	14, // 46: opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.state:type_name -> opi_api.network.cloud.v1alpha1.BgpAroAdvertState
	4,  // 47: opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.as_size:type_name -> opi_api.network.cloud.v1alpha1.BgpAsSize
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_bgp_proto_init() }
func file_bgp_proto_init() {
	if File_bgp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bgp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BGPPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BGPPeerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BGPPeerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BGPPeerAf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BGPPeerAfSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BGPPeerAfStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BGPNLRIPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BGPNLRIPrefixSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BGPNLRIPrefixStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BGPNLRIPrefixFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BGPAdjRibOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BGPAdjRibOutSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BGPAdjRibOutStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bgp_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bgp_proto_goTypes,
		DependencyIndexes: file_bgp_proto_depIdxs,
		EnumInfos:         file_bgp_proto_enumTypes,
		MessageInfos:      file_bgp_proto_msgTypes,
	}.Build()
	File_bgp_proto = out.File
	file_bgp_proto_rawDesc = nil
	file_bgp_proto_goTypes = nil
	file_bgp_proto_depIdxs = nil
}
