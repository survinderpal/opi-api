// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bgp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bgp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "object_key.pb.h"
#include "networktypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bgp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bgp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgp_2eproto;
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
class BGPAdjRibOut;
struct BGPAdjRibOutDefaultTypeInternal;
extern BGPAdjRibOutDefaultTypeInternal _BGPAdjRibOut_default_instance_;
class BGPAdjRibOutSpec;
struct BGPAdjRibOutSpecDefaultTypeInternal;
extern BGPAdjRibOutSpecDefaultTypeInternal _BGPAdjRibOutSpec_default_instance_;
class BGPAdjRibOutStatus;
struct BGPAdjRibOutStatusDefaultTypeInternal;
extern BGPAdjRibOutStatusDefaultTypeInternal _BGPAdjRibOutStatus_default_instance_;
class BGPNLRIPrefix;
struct BGPNLRIPrefixDefaultTypeInternal;
extern BGPNLRIPrefixDefaultTypeInternal _BGPNLRIPrefix_default_instance_;
class BGPNLRIPrefixFilter;
struct BGPNLRIPrefixFilterDefaultTypeInternal;
extern BGPNLRIPrefixFilterDefaultTypeInternal _BGPNLRIPrefixFilter_default_instance_;
class BGPNLRIPrefixSpec;
struct BGPNLRIPrefixSpecDefaultTypeInternal;
extern BGPNLRIPrefixSpecDefaultTypeInternal _BGPNLRIPrefixSpec_default_instance_;
class BGPNLRIPrefixStatus;
struct BGPNLRIPrefixStatusDefaultTypeInternal;
extern BGPNLRIPrefixStatusDefaultTypeInternal _BGPNLRIPrefixStatus_default_instance_;
class BGPPeer;
struct BGPPeerDefaultTypeInternal;
extern BGPPeerDefaultTypeInternal _BGPPeer_default_instance_;
class BGPPeerAf;
struct BGPPeerAfDefaultTypeInternal;
extern BGPPeerAfDefaultTypeInternal _BGPPeerAf_default_instance_;
class BGPPeerAfSpec;
struct BGPPeerAfSpecDefaultTypeInternal;
extern BGPPeerAfSpecDefaultTypeInternal _BGPPeerAfSpec_default_instance_;
class BGPPeerAfStatus;
struct BGPPeerAfStatusDefaultTypeInternal;
extern BGPPeerAfStatusDefaultTypeInternal _BGPPeerAfStatus_default_instance_;
class BGPPeerSpec;
struct BGPPeerSpecDefaultTypeInternal;
extern BGPPeerSpecDefaultTypeInternal _BGPPeerSpec_default_instance_;
class BGPPeerStatus;
struct BGPPeerStatusDefaultTypeInternal;
extern BGPPeerStatusDefaultTypeInternal _BGPPeerStatus_default_instance_;
class Bgp;
struct BgpDefaultTypeInternal;
extern BgpDefaultTypeInternal _Bgp_default_instance_;
class BgpSpec;
struct BgpSpecDefaultTypeInternal;
extern BgpSpecDefaultTypeInternal _BgpSpec_default_instance_;
class BgpStatus;
struct BgpStatusDefaultTypeInternal;
extern BgpStatusDefaultTypeInternal _BgpStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::cloud::v1alpha1::BGPAdjRibOut* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPAdjRibOut>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefix* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPNLRIPrefix>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixFilter* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixFilter>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::BGPPeer* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPPeer>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::BGPPeerAf* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPPeerAf>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPPeerSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPPeerStatus>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::Bgp* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Bgp>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::BgpSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BgpSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::BgpStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BgpStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {

enum BGPAfi : int {
  BGP_AFI_UNSPECIFIED = 0,
  BGP_AFI_IPV4 = 1,
  BGP_AFI_IPV6 = 2,
  BGP_AFI_L2VPN = 25,
  BGPAfi_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BGPAfi_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BGPAfi_IsValid(int value);
constexpr BGPAfi BGPAfi_MIN = BGP_AFI_UNSPECIFIED;
constexpr BGPAfi BGPAfi_MAX = BGP_AFI_L2VPN;
constexpr int BGPAfi_ARRAYSIZE = BGPAfi_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPAfi_descriptor();
template<typename T>
inline const std::string& BGPAfi_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BGPAfi>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BGPAfi_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BGPAfi_descriptor(), enum_t_value);
}
inline bool BGPAfi_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BGPAfi* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BGPAfi>(
    BGPAfi_descriptor(), name, value);
}
enum BGPSafi : int {
  BGP_SAFI_UNSPECIFIED = 0,
  BGP_SAFI_UNICAST = 1,
  BGP_SAFI_EVPN = 70,
  BGPSafi_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BGPSafi_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BGPSafi_IsValid(int value);
constexpr BGPSafi BGPSafi_MIN = BGP_SAFI_UNSPECIFIED;
constexpr BGPSafi BGPSafi_MAX = BGP_SAFI_EVPN;
constexpr int BGPSafi_ARRAYSIZE = BGPSafi_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPSafi_descriptor();
template<typename T>
inline const std::string& BGPSafi_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BGPSafi>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BGPSafi_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BGPSafi_descriptor(), enum_t_value);
}
inline bool BGPSafi_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BGPSafi* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BGPSafi>(
    BGPSafi_descriptor(), name, value);
}
enum BGPPeerRRClient : int {
  BGP_PEER_RR_CLIENT_UNSPECIFIED = 0,
  BGP_PEER_RR_CLIENT = 1,
  BGP_PEER_RR_MESHED_CLIENT = 2,
  BGPPeerRRClient_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BGPPeerRRClient_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BGPPeerRRClient_IsValid(int value);
constexpr BGPPeerRRClient BGPPeerRRClient_MIN = BGP_PEER_RR_CLIENT_UNSPECIFIED;
constexpr BGPPeerRRClient BGPPeerRRClient_MAX = BGP_PEER_RR_MESHED_CLIENT;
constexpr int BGPPeerRRClient_ARRAYSIZE = BGPPeerRRClient_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPPeerRRClient_descriptor();
template<typename T>
inline const std::string& BGPPeerRRClient_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BGPPeerRRClient>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BGPPeerRRClient_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BGPPeerRRClient_descriptor(), enum_t_value);
}
inline bool BGPPeerRRClient_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BGPPeerRRClient* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BGPPeerRRClient>(
    BGPPeerRRClient_descriptor(), name, value);
}
enum BGPPeerSessionState : int {
  BGP_PEER_SESSION_STATE_UNSPECIFIED = 0,
  BGP_PEER_SESSION_STATE_IDLE = 1,
  BGP_PEER_SESSION_STATE_CONNECT = 2,
  BGP_PEER_SESSION_STATE_ACTIVE = 3,
  BGP_PEER_SESSION_STATE_OPENSENT = 4,
  BGP_PEER_SESSION_STATE_OPENCONFIRM = 5,
  BGP_PEER_SESSION_STATE_ESTABLISHED = 6,
  BGPPeerSessionState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BGPPeerSessionState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BGPPeerSessionState_IsValid(int value);
constexpr BGPPeerSessionState BGPPeerSessionState_MIN = BGP_PEER_SESSION_STATE_UNSPECIFIED;
constexpr BGPPeerSessionState BGPPeerSessionState_MAX = BGP_PEER_SESSION_STATE_ESTABLISHED;
constexpr int BGPPeerSessionState_ARRAYSIZE = BGPPeerSessionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPPeerSessionState_descriptor();
template<typename T>
inline const std::string& BGPPeerSessionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BGPPeerSessionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BGPPeerSessionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BGPPeerSessionState_descriptor(), enum_t_value);
}
inline bool BGPPeerSessionState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BGPPeerSessionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BGPPeerSessionState>(
    BGPPeerSessionState_descriptor(), name, value);
}
enum BgpAsSize : int {
  BGP_AS_SIZE_UNSPECIFIED = 0,
  BGP_AS_SIZE_TWO_OCTET = 1,
  BGP_AS_SIZE_FOUR_OCTET = 2,
  BgpAsSize_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BgpAsSize_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BgpAsSize_IsValid(int value);
constexpr BgpAsSize BgpAsSize_MIN = BGP_AS_SIZE_UNSPECIFIED;
constexpr BgpAsSize BgpAsSize_MAX = BGP_AS_SIZE_FOUR_OCTET;
constexpr int BgpAsSize_ARRAYSIZE = BgpAsSize_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BgpAsSize_descriptor();
template<typename T>
inline const std::string& BgpAsSize_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BgpAsSize>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BgpAsSize_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BgpAsSize_descriptor(), enum_t_value);
}
inline bool BgpAsSize_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BgpAsSize* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BgpAsSize>(
    BgpAsSize_descriptor(), name, value);
}
enum BGPAddrType : int {
  BGP_ADDR_TYPE_UNSPECIFIED = 0,
  BGP_ADDR_TYPE_IPV4 = 1,
  BGP_ADDR_TYPE_IPV6 = 2,
  BGP_ADDR_TYPE_NSAP = 3,
  BGP_ADDR_TYPE_HDLC = 4,
  BGP_ADDR_TYPE_BBN1822 = 5,
  BGP_ADDR_TYPE_IEEE802 = 6,
  BGP_ADDR_TYPE_E163 = 7,
  BGP_ADDR_TYPE_E164 = 8,
  BGP_ADDR_TYPE_F69 = 9,
  BGP_ADDR_TYPE_X121 = 10,
  BGP_ADDR_TYPE_IPX = 11,
  BGP_ADDR_TYPE_APPLETALK = 12,
  BGP_ADDR_TYPE_DECNETIV = 13,
  BGP_ADDR_TYPE_BANYANVIN = 14,
  BGP_ADDR_TYPE_E164_NSAP = 15,
  BGP_ADDR_TYPE_IPV4_TNA = 16,
  BGP_ADDR_TYPE_IPV6_TNA = 17,
  BGP_ADDR_TYPE_NSAP_TNA = 18,
  BGP_ADDR_TYPE_VPN_IPV4 = 19,
  BGP_ADDR_TYPE_VPN_IPV6 = 20,
  BGP_ADDR_TYPE_L2VPN = 25,
  BGPAddrType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BGPAddrType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BGPAddrType_IsValid(int value);
constexpr BGPAddrType BGPAddrType_MIN = BGP_ADDR_TYPE_UNSPECIFIED;
constexpr BGPAddrType BGPAddrType_MAX = BGP_ADDR_TYPE_L2VPN;
constexpr int BGPAddrType_ARRAYSIZE = BGPAddrType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPAddrType_descriptor();
template<typename T>
inline const std::string& BGPAddrType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BGPAddrType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BGPAddrType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BGPAddrType_descriptor(), enum_t_value);
}
inline bool BGPAddrType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BGPAddrType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BGPAddrType>(
    BGPAddrType_descriptor(), name, value);
}
enum BGPOperState : int {
  BGP_OPER_STATE_UNSPECIFIED = 0,
  BGP_OPER_STATE_UP = 1,
  BGP_OPER_STATE_DOWN = 2,
  BGP_OPER_STATE_GOING_UP = 3,
  BGP_OPER_STATE_GOING_DOWN = 4,
  BGP_OPER_STATE_ACT_FAILED = 5,
  BGPOperState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BGPOperState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BGPOperState_IsValid(int value);
constexpr BGPOperState BGPOperState_MIN = BGP_OPER_STATE_UNSPECIFIED;
constexpr BGPOperState BGPOperState_MAX = BGP_OPER_STATE_ACT_FAILED;
constexpr int BGPOperState_ARRAYSIZE = BGPOperState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPOperState_descriptor();
template<typename T>
inline const std::string& BGPOperState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BGPOperState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BGPOperState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BGPOperState_descriptor(), enum_t_value);
}
inline bool BGPOperState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BGPOperState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BGPOperState>(
    BGPOperState_descriptor(), name, value);
}
enum BgpAddPathCapNegCap : int {
  BGP_ADD_PATH_SR_DISABLE = 0,
  BGP_ADD_PATH_SR_RECEIVE = 1,
  BGP_ADD_PATH_SR_SEND = 2,
  BGP_ADD_PATH_SR_BOTH = 3,
  BGP_ADD_PATH_SR_INHERIT = 4,
  BGP_ADD_PATH_SR_UNKNOWN = 5,
  BgpAddPathCapNegCap_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BgpAddPathCapNegCap_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BgpAddPathCapNegCap_IsValid(int value);
constexpr BgpAddPathCapNegCap BgpAddPathCapNegCap_MIN = BGP_ADD_PATH_SR_DISABLE;
constexpr BgpAddPathCapNegCap BgpAddPathCapNegCap_MAX = BGP_ADD_PATH_SR_UNKNOWN;
constexpr int BgpAddPathCapNegCap_ARRAYSIZE = BgpAddPathCapNegCap_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BgpAddPathCapNegCap_descriptor();
template<typename T>
inline const std::string& BgpAddPathCapNegCap_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BgpAddPathCapNegCap>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BgpAddPathCapNegCap_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BgpAddPathCapNegCap_descriptor(), enum_t_value);
}
inline bool BgpAddPathCapNegCap_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BgpAddPathCapNegCap* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BgpAddPathCapNegCap>(
    BgpAddPathCapNegCap_descriptor(), name, value);
}
enum BGPClearRouteOptions : int {
  BGP_CLEAR_ROUTE_OPTIONS_UNSPECIFIED = 0,
  BGP_CLEAR_ROUTE_OPTIONS_HARD = 1,
  BGP_CLEAR_ROUTE_OPTIONS_REFRESH_IN = 2,
  BGP_CLEAR_ROUTE_OPTIONS_REFRESH_OUT = 3,
  BGP_CLEAR_ROUTE_OPTIONS_REFRESH_BOTH = 4,
  BGPClearRouteOptions_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BGPClearRouteOptions_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BGPClearRouteOptions_IsValid(int value);
constexpr BGPClearRouteOptions BGPClearRouteOptions_MIN = BGP_CLEAR_ROUTE_OPTIONS_UNSPECIFIED;
constexpr BGPClearRouteOptions BGPClearRouteOptions_MAX = BGP_CLEAR_ROUTE_OPTIONS_REFRESH_BOTH;
constexpr int BGPClearRouteOptions_ARRAYSIZE = BGPClearRouteOptions_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPClearRouteOptions_descriptor();
template<typename T>
inline const std::string& BGPClearRouteOptions_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BGPClearRouteOptions>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BGPClearRouteOptions_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BGPClearRouteOptions_descriptor(), enum_t_value);
}
inline bool BGPClearRouteOptions_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BGPClearRouteOptions* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BGPClearRouteOptions>(
    BGPClearRouteOptions_descriptor(), name, value);
}
enum NLRISrc : int {
  NLRI_SRC_UNSPECIFIED = 0,
  NLRI_SRC_PEER = 1,
  NLRI_SRC_AFM = 2,
  NLRI_SRC_SELF = 3,
  NLRISrc_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NLRISrc_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NLRISrc_IsValid(int value);
constexpr NLRISrc NLRISrc_MIN = NLRI_SRC_UNSPECIFIED;
constexpr NLRISrc NLRISrc_MAX = NLRI_SRC_SELF;
constexpr int NLRISrc_ARRAYSIZE = NLRISrc_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NLRISrc_descriptor();
template<typename T>
inline const std::string& NLRISrc_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NLRISrc>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NLRISrc_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NLRISrc_descriptor(), enum_t_value);
}
inline bool NLRISrc_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NLRISrc* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NLRISrc>(
    NLRISrc_descriptor(), name, value);
}
enum BgpNlriIsActive : int {
  BGP_NLRI_IS_ACTIVE_UNSPECIFIED = 0,
  BGP_NLRI_IS_ACTIVE_NOT_TRACKED = 1,
  BGP_NLRI_IS_ACTIVE_INACTIVE = 2,
  BGP_NLRI_IS_ACTIVE_ACTIVE = 3,
  BgpNlriIsActive_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BgpNlriIsActive_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BgpNlriIsActive_IsValid(int value);
constexpr BgpNlriIsActive BgpNlriIsActive_MIN = BGP_NLRI_IS_ACTIVE_UNSPECIFIED;
constexpr BgpNlriIsActive BgpNlriIsActive_MAX = BGP_NLRI_IS_ACTIVE_ACTIVE;
constexpr int BgpNlriIsActive_ARRAYSIZE = BgpNlriIsActive_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BgpNlriIsActive_descriptor();
template<typename T>
inline const std::string& BgpNlriIsActive_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BgpNlriIsActive>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BgpNlriIsActive_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BgpNlriIsActive_descriptor(), enum_t_value);
}
inline bool BgpNlriIsActive_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BgpNlriIsActive* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BgpNlriIsActive>(
    BgpNlriIsActive_descriptor(), name, value);
}
enum BGPRsnNotBest : int {
  BGP_REASON_NOT_CONSIDERED = 0,
  BGP_REASON_ROUTE_IS_BEST = 1,
  BGP_REASON_WEIGHT = 2,
  BGP_REASON_LOCAL_PREF = 3,
  BGP_REASON_LCL_ORIG_PRFRRED = 4,
  BGP_REASON_AS_PATH_LEN = 5,
  BGP_REASON_ORIGIN = 6,
  BGP_REASON_MED = 7,
  BGP_REASON_LOCAL_ORIG_TIE = 8,
  BGP_REASON_EBGP_V_IBGP_PEER = 9,
  BGP_REASON_ADMIN_DISTANCE = 10,
  BGP_REASON_PATH_TO_NEXT_CST = 11,
  BGP_REASON_PREF_EXISTING = 12,
  BGP_REASON_IDENTIFIER = 13,
  BGP_REASON_CLUSTER_LEN = 14,
  BGP_REASON_PEER_ADDR_TYPE = 15,
  BGP_REASON_PEER_ADDR = 16,
  BGP_REASON_PEER_PORT = 17,
  BGP_REASON_PATH_ID = 18,
  BGPRsnNotBest_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BGPRsnNotBest_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BGPRsnNotBest_IsValid(int value);
constexpr BGPRsnNotBest BGPRsnNotBest_MIN = BGP_REASON_NOT_CONSIDERED;
constexpr BGPRsnNotBest BGPRsnNotBest_MAX = BGP_REASON_PATH_ID;
constexpr int BGPRsnNotBest_ARRAYSIZE = BGPRsnNotBest_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPRsnNotBest_descriptor();
template<typename T>
inline const std::string& BGPRsnNotBest_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BGPRsnNotBest>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BGPRsnNotBest_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BGPRsnNotBest_descriptor(), enum_t_value);
}
inline bool BGPRsnNotBest_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BGPRsnNotBest* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BGPRsnNotBest>(
    BGPRsnNotBest_descriptor(), name, value);
}
enum BGPOriginAttr : int {
  BGP_ORIGIN_ATTR_UNSPECIFIED = 0,
  BGP_ORIGIN_ATTR_IGP = 1,
  BGP_ORIGIN_ATTR_EGP = 2,
  BGP_ORIGIN_ATTR_INCOMPLETE = 3,
  BGPOriginAttr_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BGPOriginAttr_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BGPOriginAttr_IsValid(int value);
constexpr BGPOriginAttr BGPOriginAttr_MIN = BGP_ORIGIN_ATTR_UNSPECIFIED;
constexpr BGPOriginAttr BGPOriginAttr_MAX = BGP_ORIGIN_ATTR_INCOMPLETE;
constexpr int BGPOriginAttr_ARRAYSIZE = BGPOriginAttr_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPOriginAttr_descriptor();
template<typename T>
inline const std::string& BGPOriginAttr_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BGPOriginAttr>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BGPOriginAttr_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BGPOriginAttr_descriptor(), enum_t_value);
}
inline bool BGPOriginAttr_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BGPOriginAttr* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BGPOriginAttr>(
    BGPOriginAttr_descriptor(), name, value);
}
enum BGPPeerType : int {
  BGP_PEER_TYPE_UNSPECIFIED = 0,
  BGP_PEER_TYPE_NONE = 1,
  BGP_PEER_TYPE_IBGP = 2,
  BGP_PEER_TYPE_EBGP = 3,
  BGPPeerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BGPPeerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BGPPeerType_IsValid(int value);
constexpr BGPPeerType BGPPeerType_MIN = BGP_PEER_TYPE_UNSPECIFIED;
constexpr BGPPeerType BGPPeerType_MAX = BGP_PEER_TYPE_EBGP;
constexpr int BGPPeerType_ARRAYSIZE = BGPPeerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPPeerType_descriptor();
template<typename T>
inline const std::string& BGPPeerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BGPPeerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BGPPeerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BGPPeerType_descriptor(), enum_t_value);
}
inline bool BGPPeerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BGPPeerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BGPPeerType>(
    BGPPeerType_descriptor(), name, value);
}
enum BgpAroAdvertState : int {
  BGP_ARO_ADVERT_STATE_UNSPECIFIED = 0,
  BGP_ARO_ADVERT_STATE_ADVERTISED = 1,
  BGP_ARO_ADVERT_STATE_SUPPRESSED = 2,
  BGP_ARO_ADVERT_STATE_PENDING_WITHDRAWAL = 3,
  BGP_ARO_ADVERT_STATE_WITHDRAWN = 4,
  BgpAroAdvertState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BgpAroAdvertState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BgpAroAdvertState_IsValid(int value);
constexpr BgpAroAdvertState BgpAroAdvertState_MIN = BGP_ARO_ADVERT_STATE_UNSPECIFIED;
constexpr BgpAroAdvertState BgpAroAdvertState_MAX = BGP_ARO_ADVERT_STATE_WITHDRAWN;
constexpr int BgpAroAdvertState_ARRAYSIZE = BgpAroAdvertState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BgpAroAdvertState_descriptor();
template<typename T>
inline const std::string& BgpAroAdvertState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BgpAroAdvertState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BgpAroAdvertState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BgpAroAdvertState_descriptor(), enum_t_value);
}
inline bool BgpAroAdvertState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BgpAroAdvertState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BgpAroAdvertState>(
    BgpAroAdvertState_descriptor(), name, value);
}
// ===================================================================

class Bgp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.Bgp) */ {
 public:
  inline Bgp() : Bgp(nullptr) {}
  ~Bgp() override;
  explicit constexpr Bgp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bgp(const Bgp& from);
  Bgp(Bgp&& from) noexcept
    : Bgp() {
    *this = ::std::move(from);
  }

  inline Bgp& operator=(const Bgp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bgp& operator=(Bgp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bgp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bgp* internal_default_instance() {
    return reinterpret_cast<const Bgp*>(
               &_Bgp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Bgp& a, Bgp& b) {
    a.Swap(&b);
  }
  inline void Swap(Bgp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bgp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bgp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bgp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bgp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Bgp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bgp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.Bgp";
  }
  protected:
  explicit Bgp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.BgpSpec spec = 1;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::BgpSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::BgpSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::BgpSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::BgpSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::BgpSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::BgpSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::BgpSpec* spec);
  ::opi_api::network::cloud::v1alpha1::BgpSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.BgpStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::cloud::v1alpha1::BgpStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::BgpStatus* release_status();
  ::opi_api::network::cloud::v1alpha1::BgpStatus* mutable_status();
  void set_allocated_status(::opi_api::network::cloud::v1alpha1::BgpStatus* status);
  private:
  const ::opi_api::network::cloud::v1alpha1::BgpStatus& _internal_status() const;
  ::opi_api::network::cloud::v1alpha1::BgpStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::cloud::v1alpha1::BgpStatus* status);
  ::opi_api::network::cloud::v1alpha1::BgpStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.Bgp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::BgpSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::BgpStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// -------------------------------------------------------------------

class BgpSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.BgpSpec) */ {
 public:
  inline BgpSpec() : BgpSpec(nullptr) {}
  ~BgpSpec() override;
  explicit constexpr BgpSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BgpSpec(const BgpSpec& from);
  BgpSpec(BgpSpec&& from) noexcept
    : BgpSpec() {
    *this = ::std::move(from);
  }

  inline BgpSpec& operator=(const BgpSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline BgpSpec& operator=(BgpSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BgpSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const BgpSpec* internal_default_instance() {
    return reinterpret_cast<const BgpSpec*>(
               &_BgpSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BgpSpec& a, BgpSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(BgpSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BgpSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BgpSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BgpSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BgpSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BgpSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BgpSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.BgpSpec";
  }
  protected:
  explicit BgpSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLocalAsnFieldNumber = 2,
    kRouterIdFieldNumber = 3,
    kClusterIdFieldNumber = 4,
    kDisableFieldNumber = 5,
    kSuppressDefaultResolutionFieldNumber = 6,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // uint32 local_asn = 2;
  void clear_local_asn();
  uint32_t local_asn() const;
  void set_local_asn(uint32_t value);
  private:
  uint32_t _internal_local_asn() const;
  void _internal_set_local_asn(uint32_t value);
  public:

  // fixed32 router_id = 3;
  void clear_router_id();
  uint32_t router_id() const;
  void set_router_id(uint32_t value);
  private:
  uint32_t _internal_router_id() const;
  void _internal_set_router_id(uint32_t value);
  public:

  // fixed32 cluster_id = 4;
  void clear_cluster_id();
  uint32_t cluster_id() const;
  void set_cluster_id(uint32_t value);
  private:
  uint32_t _internal_cluster_id() const;
  void _internal_set_cluster_id(uint32_t value);
  public:

  // bool disable = 5;
  void clear_disable();
  bool disable() const;
  void set_disable(bool value);
  private:
  bool _internal_disable() const;
  void _internal_set_disable(bool value);
  public:

  // bool suppress_default_resolution = 6;
  void clear_suppress_default_resolution();
  bool suppress_default_resolution() const;
  void set_suppress_default_resolution(bool value);
  private:
  bool _internal_suppress_default_resolution() const;
  void _internal_set_suppress_default_resolution(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.BgpSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  uint32_t local_asn_;
  uint32_t router_id_;
  uint32_t cluster_id_;
  bool disable_;
  bool suppress_default_resolution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// -------------------------------------------------------------------

class BgpStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.BgpStatus) */ {
 public:
  inline BgpStatus() : BgpStatus(nullptr) {}
  ~BgpStatus() override;
  explicit constexpr BgpStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BgpStatus(const BgpStatus& from);
  BgpStatus(BgpStatus&& from) noexcept
    : BgpStatus() {
    *this = ::std::move(from);
  }

  inline BgpStatus& operator=(const BgpStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline BgpStatus& operator=(BgpStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BgpStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const BgpStatus* internal_default_instance() {
    return reinterpret_cast<const BgpStatus*>(
               &_BgpStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BgpStatus& a, BgpStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(BgpStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BgpStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BgpStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BgpStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BgpStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BgpStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BgpStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.BgpStatus";
  }
  protected:
  explicit BgpStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperStateFieldNumber = 1,
    kAdjRibOutRoutesCountFieldNumber = 2,
    kPeakNumAdjRibOutRoutesFieldNumber = 3,
    kRemDelaytimeFieldNumber = 4,
    kTableVerFieldNumber = 5,
  };
  // .opi_api.network.cloud.v1alpha1.BGPOperState oper_state = 1;
  void clear_oper_state();
  ::opi_api::network::cloud::v1alpha1::BGPOperState oper_state() const;
  void set_oper_state(::opi_api::network::cloud::v1alpha1::BGPOperState value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPOperState _internal_oper_state() const;
  void _internal_set_oper_state(::opi_api::network::cloud::v1alpha1::BGPOperState value);
  public:

  // int32 adj_rib_out_routes_count = 2;
  void clear_adj_rib_out_routes_count();
  int32_t adj_rib_out_routes_count() const;
  void set_adj_rib_out_routes_count(int32_t value);
  private:
  int32_t _internal_adj_rib_out_routes_count() const;
  void _internal_set_adj_rib_out_routes_count(int32_t value);
  public:

  // int32 peak_num_adj_rib_out_routes = 3;
  void clear_peak_num_adj_rib_out_routes();
  int32_t peak_num_adj_rib_out_routes() const;
  void set_peak_num_adj_rib_out_routes(int32_t value);
  private:
  int32_t _internal_peak_num_adj_rib_out_routes() const;
  void _internal_set_peak_num_adj_rib_out_routes(int32_t value);
  public:

  // int32 rem_delaytime = 4;
  void clear_rem_delaytime();
  int32_t rem_delaytime() const;
  void set_rem_delaytime(int32_t value);
  private:
  int32_t _internal_rem_delaytime() const;
  void _internal_set_rem_delaytime(int32_t value);
  public:

  // int32 table_ver = 5;
  void clear_table_ver();
  int32_t table_ver() const;
  void set_table_ver(int32_t value);
  private:
  int32_t _internal_table_ver() const;
  void _internal_set_table_ver(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.BgpStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int oper_state_;
  int32_t adj_rib_out_routes_count_;
  int32_t peak_num_adj_rib_out_routes_;
  int32_t rem_delaytime_;
  int32_t table_ver_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// -------------------------------------------------------------------

class BGPPeer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.BGPPeer) */ {
 public:
  inline BGPPeer() : BGPPeer(nullptr) {}
  ~BGPPeer() override;
  explicit constexpr BGPPeer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BGPPeer(const BGPPeer& from);
  BGPPeer(BGPPeer&& from) noexcept
    : BGPPeer() {
    *this = ::std::move(from);
  }

  inline BGPPeer& operator=(const BGPPeer& from) {
    CopyFrom(from);
    return *this;
  }
  inline BGPPeer& operator=(BGPPeer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BGPPeer& default_instance() {
    return *internal_default_instance();
  }
  static inline const BGPPeer* internal_default_instance() {
    return reinterpret_cast<const BGPPeer*>(
               &_BGPPeer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BGPPeer& a, BGPPeer& b) {
    a.Swap(&b);
  }
  inline void Swap(BGPPeer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BGPPeer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BGPPeer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BGPPeer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BGPPeer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BGPPeer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BGPPeer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.BGPPeer";
  }
  protected:
  explicit BGPPeer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.BGPPeerSpec spec = 1;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::BGPPeerSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::BGPPeerSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::BGPPeerSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* spec);
  ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.BGPPeerStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::cloud::v1alpha1::BGPPeerStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* release_status();
  ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* mutable_status();
  void set_allocated_status(::opi_api::network::cloud::v1alpha1::BGPPeerStatus* status);
  private:
  const ::opi_api::network::cloud::v1alpha1::BGPPeerStatus& _internal_status() const;
  ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* status);
  ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.BGPPeer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// -------------------------------------------------------------------

class BGPPeerSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.BGPPeerSpec) */ {
 public:
  inline BGPPeerSpec() : BGPPeerSpec(nullptr) {}
  ~BGPPeerSpec() override;
  explicit constexpr BGPPeerSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BGPPeerSpec(const BGPPeerSpec& from);
  BGPPeerSpec(BGPPeerSpec&& from) noexcept
    : BGPPeerSpec() {
    *this = ::std::move(from);
  }

  inline BGPPeerSpec& operator=(const BGPPeerSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline BGPPeerSpec& operator=(BGPPeerSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BGPPeerSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const BGPPeerSpec* internal_default_instance() {
    return reinterpret_cast<const BGPPeerSpec*>(
               &_BGPPeerSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BGPPeerSpec& a, BGPPeerSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(BGPPeerSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BGPPeerSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BGPPeerSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BGPPeerSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BGPPeerSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BGPPeerSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BGPPeerSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.BGPPeerSpec";
  }
  protected:
  explicit BGPPeerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 12,
    kIdFieldNumber = 1,
    kLocalAddressFieldNumber = 3,
    kPeerAddrFieldNumber = 4,
    kStateFieldNumber = 2,
    kRemoteAsnFieldNumber = 5,
    kSendCommFieldNumber = 6,
    kSendExtCommFieldNumber = 7,
    kRrClientFieldNumber = 8,
    kConnectRetryFieldNumber = 9,
    kHoldtimeFieldNumber = 10,
    kKeepAliveFieldNumber = 11,
    kTtlFieldNumber = 13,
    kIdleHoldtimeFieldNumber = 14,
    kAllowLocalAsFieldNumber = 15,
  };
  // bytes password = 12;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_address = 3;
  bool has_local_address() const;
  private:
  bool _internal_has_local_address() const;
  public:
  void clear_local_address();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& local_address() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_local_address();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_local_address();
  void set_allocated_local_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_address);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_local_address() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_local_address();
  public:
  void unsafe_arena_set_allocated_local_address(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_address);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_local_address();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 4;
  bool has_peer_addr() const;
  private:
  bool _internal_has_peer_addr() const;
  public:
  void clear_peer_addr();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& peer_addr() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_peer_addr();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_peer_addr();
  void set_allocated_peer_addr(::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_peer_addr() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_peer_addr();
  public:
  void unsafe_arena_set_allocated_peer_addr(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_peer_addr();

  // .opi_api.network.opinetcommon.v1alpha1.AdminState state = 2;
  void clear_state();
  ::opi_api::network::opinetcommon::v1alpha1::AdminState state() const;
  void set_state(::opi_api::network::opinetcommon::v1alpha1::AdminState value);
  private:
  ::opi_api::network::opinetcommon::v1alpha1::AdminState _internal_state() const;
  void _internal_set_state(::opi_api::network::opinetcommon::v1alpha1::AdminState value);
  public:

  // uint32 remote_asn = 5;
  void clear_remote_asn();
  uint32_t remote_asn() const;
  void set_remote_asn(uint32_t value);
  private:
  uint32_t _internal_remote_asn() const;
  void _internal_set_remote_asn(uint32_t value);
  public:

  // bool send_comm = 6;
  void clear_send_comm();
  bool send_comm() const;
  void set_send_comm(bool value);
  private:
  bool _internal_send_comm() const;
  void _internal_set_send_comm(bool value);
  public:

  // bool send_ext_comm = 7;
  void clear_send_ext_comm();
  bool send_ext_comm() const;
  void set_send_ext_comm(bool value);
  private:
  bool _internal_send_ext_comm() const;
  void _internal_set_send_ext_comm(bool value);
  public:

  // .opi_api.network.cloud.v1alpha1.BGPPeerRRClient rr_client = 8;
  void clear_rr_client();
  ::opi_api::network::cloud::v1alpha1::BGPPeerRRClient rr_client() const;
  void set_rr_client(::opi_api::network::cloud::v1alpha1::BGPPeerRRClient value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPPeerRRClient _internal_rr_client() const;
  void _internal_set_rr_client(::opi_api::network::cloud::v1alpha1::BGPPeerRRClient value);
  public:

  // int32 connect_retry = 9;
  void clear_connect_retry();
  int32_t connect_retry() const;
  void set_connect_retry(int32_t value);
  private:
  int32_t _internal_connect_retry() const;
  void _internal_set_connect_retry(int32_t value);
  public:

  // int32 holdtime = 10;
  void clear_holdtime();
  int32_t holdtime() const;
  void set_holdtime(int32_t value);
  private:
  int32_t _internal_holdtime() const;
  void _internal_set_holdtime(int32_t value);
  public:

  // int32 keep_alive = 11;
  void clear_keep_alive();
  int32_t keep_alive() const;
  void set_keep_alive(int32_t value);
  private:
  int32_t _internal_keep_alive() const;
  void _internal_set_keep_alive(int32_t value);
  public:

  // int32 ttl = 13;
  void clear_ttl();
  int32_t ttl() const;
  void set_ttl(int32_t value);
  private:
  int32_t _internal_ttl() const;
  void _internal_set_ttl(int32_t value);
  public:

  // int32 idle_holdtime = 14;
  void clear_idle_holdtime();
  int32_t idle_holdtime() const;
  void set_idle_holdtime(int32_t value);
  private:
  int32_t _internal_idle_holdtime() const;
  void _internal_set_idle_holdtime(int32_t value);
  public:

  // int32 allow_local_as = 15;
  void clear_allow_local_as();
  int32_t allow_local_as() const;
  void set_allow_local_as(int32_t value);
  private:
  int32_t _internal_allow_local_as() const;
  void _internal_set_allow_local_as(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.BGPPeerSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_address_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr_;
  int state_;
  uint32_t remote_asn_;
  bool send_comm_;
  bool send_ext_comm_;
  int rr_client_;
  int32_t connect_retry_;
  int32_t holdtime_;
  int32_t keep_alive_;
  int32_t ttl_;
  int32_t idle_holdtime_;
  int32_t allow_local_as_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// -------------------------------------------------------------------

class BGPPeerStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.BGPPeerStatus) */ {
 public:
  inline BGPPeerStatus() : BGPPeerStatus(nullptr) {}
  ~BGPPeerStatus() override;
  explicit constexpr BGPPeerStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BGPPeerStatus(const BGPPeerStatus& from);
  BGPPeerStatus(BGPPeerStatus&& from) noexcept
    : BGPPeerStatus() {
    *this = ::std::move(from);
  }

  inline BGPPeerStatus& operator=(const BGPPeerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline BGPPeerStatus& operator=(BGPPeerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BGPPeerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const BGPPeerStatus* internal_default_instance() {
    return reinterpret_cast<const BGPPeerStatus*>(
               &_BGPPeerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BGPPeerStatus& a, BGPPeerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(BGPPeerStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BGPPeerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BGPPeerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BGPPeerStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BGPPeerStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BGPPeerStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BGPPeerStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.BGPPeerStatus";
  }
  protected:
  explicit BGPPeerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastErrorRcvdFieldNumber = 3,
    kLastErrorSentFieldNumber = 4,
    kLocalAddrFieldNumber = 5,
    kSessionStateFieldNumber = 1,
    kPrevSessionStateFieldNumber = 2,
    kHoldtimeFieldNumber = 6,
    kKeepaliveFieldNumber = 7,
    kCapsSentFieldNumber = 8,
    kCapsRcvdFieldNumber = 9,
    kCapsNegFieldNumber = 10,
    kSelLocalAddrTypeFieldNumber = 11,
    kIncomingNotificationsFieldNumber = 12,
    kOutboundNotificationsFieldNumber = 13,
    kIncomingUpdatesFieldNumber = 14,
    kOutgoingUpdatesFieldNumber = 15,
    kIncomingKeepalivesFieldNumber = 16,
    kOutgoingKeepalivesFieldNumber = 17,
    kIncomingRefreshesFieldNumber = 18,
    kOutgoingRefreshesFieldNumber = 19,
    kIncomingTotalMessagesFieldNumber = 20,
    kOutgoingTotalMessagesFieldNumber = 21,
    kFsmEstTransitionsFieldNumber = 22,
    kConnectRetryCountFieldNumber = 23,
    kPeergrFieldNumber = 24,
    kStalePathtimeFieldNumber = 25,
    kOrfEntryCountFieldNumber = 26,
    kRcvdMsgElpstimeFieldNumber = 27,
    kRouteRefrSentFieldNumber = 28,
    kRouteRefrRcvdFieldNumber = 29,
    kIncomingPrfxesFieldNumber = 30,
    kOutgoingPrfxesFieldNumber = 31,
    kOutgoingPrfxesAdvertisedFieldNumber = 32,
    kConnectRetryIntFieldNumber = 33,
    kOutgoingUpdateElpstimeFieldNumber = 34,
    kOutgoingPrfxesDeniedFieldNumber = 35,
    kOutgoingPrfxesImpWdrFieldNumber = 36,
    kOutgoingPrfxesExpWdrFieldNumber = 37,
    kIncomingPrfxesImpWdrFieldNumber = 38,
    kIncomingPrfxesExpWdrFieldNumber = 39,
    kReceivedHoldtimeFieldNumber = 40,
    kFsmEstablishedtimeFieldNumber = 41,
    kIncomingUpdatesElpstimeFieldNumber = 42,
    kIncomingOpensFieldNumber = 43,
    kOutgoingOpensFieldNumber = 44,
    kPeerIndexFieldNumber = 45,
    kTtlFieldNumber = 46,
    kOperStateFieldNumber = 47,
  };
  // bytes last_error_rcvd = 3;
  void clear_last_error_rcvd();
  const std::string& last_error_rcvd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_error_rcvd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_error_rcvd();
  PROTOBUF_NODISCARD std::string* release_last_error_rcvd();
  void set_allocated_last_error_rcvd(std::string* last_error_rcvd);
  private:
  const std::string& _internal_last_error_rcvd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_error_rcvd(const std::string& value);
  std::string* _internal_mutable_last_error_rcvd();
  public:

  // bytes last_error_sent = 4;
  void clear_last_error_sent();
  const std::string& last_error_sent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_error_sent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_error_sent();
  PROTOBUF_NODISCARD std::string* release_last_error_sent();
  void set_allocated_last_error_sent(std::string* last_error_sent);
  private:
  const std::string& _internal_last_error_sent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_error_sent(const std::string& value);
  std::string* _internal_mutable_last_error_sent();
  public:

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 5;
  bool has_local_addr() const;
  private:
  bool _internal_has_local_addr() const;
  public:
  void clear_local_addr();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& local_addr() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_local_addr();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_local_addr();
  void set_allocated_local_addr(::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_addr);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_local_addr() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_local_addr();
  public:
  void unsafe_arena_set_allocated_local_addr(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_addr);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_local_addr();

  // .opi_api.network.cloud.v1alpha1.BGPPeerSessionState session_state = 1;
  void clear_session_state();
  ::opi_api::network::cloud::v1alpha1::BGPPeerSessionState session_state() const;
  void set_session_state(::opi_api::network::cloud::v1alpha1::BGPPeerSessionState value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPPeerSessionState _internal_session_state() const;
  void _internal_set_session_state(::opi_api::network::cloud::v1alpha1::BGPPeerSessionState value);
  public:

  // .opi_api.network.cloud.v1alpha1.BGPPeerSessionState prev_session_state = 2;
  void clear_prev_session_state();
  ::opi_api::network::cloud::v1alpha1::BGPPeerSessionState prev_session_state() const;
  void set_prev_session_state(::opi_api::network::cloud::v1alpha1::BGPPeerSessionState value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPPeerSessionState _internal_prev_session_state() const;
  void _internal_set_prev_session_state(::opi_api::network::cloud::v1alpha1::BGPPeerSessionState value);
  public:

  // int32 holdtime = 6;
  void clear_holdtime();
  int32_t holdtime() const;
  void set_holdtime(int32_t value);
  private:
  int32_t _internal_holdtime() const;
  void _internal_set_holdtime(int32_t value);
  public:

  // int32 keepalive = 7;
  void clear_keepalive();
  int32_t keepalive() const;
  void set_keepalive(int32_t value);
  private:
  int32_t _internal_keepalive() const;
  void _internal_set_keepalive(int32_t value);
  public:

  // int32 caps_sent = 8;
  void clear_caps_sent();
  int32_t caps_sent() const;
  void set_caps_sent(int32_t value);
  private:
  int32_t _internal_caps_sent() const;
  void _internal_set_caps_sent(int32_t value);
  public:

  // int32 caps_rcvd = 9;
  void clear_caps_rcvd();
  int32_t caps_rcvd() const;
  void set_caps_rcvd(int32_t value);
  private:
  int32_t _internal_caps_rcvd() const;
  void _internal_set_caps_rcvd(int32_t value);
  public:

  // int32 caps_neg = 10;
  void clear_caps_neg();
  int32_t caps_neg() const;
  void set_caps_neg(int32_t value);
  private:
  int32_t _internal_caps_neg() const;
  void _internal_set_caps_neg(int32_t value);
  public:

  // .opi_api.network.cloud.v1alpha1.BGPAddrType sel_local_addr_type = 11;
  void clear_sel_local_addr_type();
  ::opi_api::network::cloud::v1alpha1::BGPAddrType sel_local_addr_type() const;
  void set_sel_local_addr_type(::opi_api::network::cloud::v1alpha1::BGPAddrType value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPAddrType _internal_sel_local_addr_type() const;
  void _internal_set_sel_local_addr_type(::opi_api::network::cloud::v1alpha1::BGPAddrType value);
  public:

  // int32 incoming_notifications = 12;
  void clear_incoming_notifications();
  int32_t incoming_notifications() const;
  void set_incoming_notifications(int32_t value);
  private:
  int32_t _internal_incoming_notifications() const;
  void _internal_set_incoming_notifications(int32_t value);
  public:

  // int32 outbound_notifications = 13;
  void clear_outbound_notifications();
  int32_t outbound_notifications() const;
  void set_outbound_notifications(int32_t value);
  private:
  int32_t _internal_outbound_notifications() const;
  void _internal_set_outbound_notifications(int32_t value);
  public:

  // int32 incoming_updates = 14;
  void clear_incoming_updates();
  int32_t incoming_updates() const;
  void set_incoming_updates(int32_t value);
  private:
  int32_t _internal_incoming_updates() const;
  void _internal_set_incoming_updates(int32_t value);
  public:

  // int32 outgoing_updates = 15;
  void clear_outgoing_updates();
  int32_t outgoing_updates() const;
  void set_outgoing_updates(int32_t value);
  private:
  int32_t _internal_outgoing_updates() const;
  void _internal_set_outgoing_updates(int32_t value);
  public:

  // int32 incoming_keepalives = 16;
  void clear_incoming_keepalives();
  int32_t incoming_keepalives() const;
  void set_incoming_keepalives(int32_t value);
  private:
  int32_t _internal_incoming_keepalives() const;
  void _internal_set_incoming_keepalives(int32_t value);
  public:

  // int32 outgoing_keepalives = 17;
  void clear_outgoing_keepalives();
  int32_t outgoing_keepalives() const;
  void set_outgoing_keepalives(int32_t value);
  private:
  int32_t _internal_outgoing_keepalives() const;
  void _internal_set_outgoing_keepalives(int32_t value);
  public:

  // int32 incoming_refreshes = 18;
  void clear_incoming_refreshes();
  int32_t incoming_refreshes() const;
  void set_incoming_refreshes(int32_t value);
  private:
  int32_t _internal_incoming_refreshes() const;
  void _internal_set_incoming_refreshes(int32_t value);
  public:

  // int32 outgoing_refreshes = 19;
  void clear_outgoing_refreshes();
  int32_t outgoing_refreshes() const;
  void set_outgoing_refreshes(int32_t value);
  private:
  int32_t _internal_outgoing_refreshes() const;
  void _internal_set_outgoing_refreshes(int32_t value);
  public:

  // int32 incoming_total_messages = 20;
  void clear_incoming_total_messages();
  int32_t incoming_total_messages() const;
  void set_incoming_total_messages(int32_t value);
  private:
  int32_t _internal_incoming_total_messages() const;
  void _internal_set_incoming_total_messages(int32_t value);
  public:

  // int32 outgoing_total_messages = 21;
  void clear_outgoing_total_messages();
  int32_t outgoing_total_messages() const;
  void set_outgoing_total_messages(int32_t value);
  private:
  int32_t _internal_outgoing_total_messages() const;
  void _internal_set_outgoing_total_messages(int32_t value);
  public:

  // int32 fsm_est_transitions = 22;
  void clear_fsm_est_transitions();
  int32_t fsm_est_transitions() const;
  void set_fsm_est_transitions(int32_t value);
  private:
  int32_t _internal_fsm_est_transitions() const;
  void _internal_set_fsm_est_transitions(int32_t value);
  public:

  // int32 connect_retry_count = 23;
  void clear_connect_retry_count();
  int32_t connect_retry_count() const;
  void set_connect_retry_count(int32_t value);
  private:
  int32_t _internal_connect_retry_count() const;
  void _internal_set_connect_retry_count(int32_t value);
  public:

  // int32 peergr = 24;
  void clear_peergr();
  int32_t peergr() const;
  void set_peergr(int32_t value);
  private:
  int32_t _internal_peergr() const;
  void _internal_set_peergr(int32_t value);
  public:

  // int32 stale_pathtime = 25;
  void clear_stale_pathtime();
  int32_t stale_pathtime() const;
  void set_stale_pathtime(int32_t value);
  private:
  int32_t _internal_stale_pathtime() const;
  void _internal_set_stale_pathtime(int32_t value);
  public:

  // int32 orf_entry_count = 26;
  void clear_orf_entry_count();
  int32_t orf_entry_count() const;
  void set_orf_entry_count(int32_t value);
  private:
  int32_t _internal_orf_entry_count() const;
  void _internal_set_orf_entry_count(int32_t value);
  public:

  // int32 rcvd_msg_elpstime = 27;
  void clear_rcvd_msg_elpstime();
  int32_t rcvd_msg_elpstime() const;
  void set_rcvd_msg_elpstime(int32_t value);
  private:
  int32_t _internal_rcvd_msg_elpstime() const;
  void _internal_set_rcvd_msg_elpstime(int32_t value);
  public:

  // int32 route_refr_sent = 28;
  void clear_route_refr_sent();
  int32_t route_refr_sent() const;
  void set_route_refr_sent(int32_t value);
  private:
  int32_t _internal_route_refr_sent() const;
  void _internal_set_route_refr_sent(int32_t value);
  public:

  // int32 route_refr_rcvd = 29;
  void clear_route_refr_rcvd();
  int32_t route_refr_rcvd() const;
  void set_route_refr_rcvd(int32_t value);
  private:
  int32_t _internal_route_refr_rcvd() const;
  void _internal_set_route_refr_rcvd(int32_t value);
  public:

  // int32 incoming_prfxes = 30;
  void clear_incoming_prfxes();
  int32_t incoming_prfxes() const;
  void set_incoming_prfxes(int32_t value);
  private:
  int32_t _internal_incoming_prfxes() const;
  void _internal_set_incoming_prfxes(int32_t value);
  public:

  // int32 outgoing_prfxes = 31;
  void clear_outgoing_prfxes();
  int32_t outgoing_prfxes() const;
  void set_outgoing_prfxes(int32_t value);
  private:
  int32_t _internal_outgoing_prfxes() const;
  void _internal_set_outgoing_prfxes(int32_t value);
  public:

  // int32 outgoing_prfxes_advertised = 32;
  void clear_outgoing_prfxes_advertised();
  int32_t outgoing_prfxes_advertised() const;
  void set_outgoing_prfxes_advertised(int32_t value);
  private:
  int32_t _internal_outgoing_prfxes_advertised() const;
  void _internal_set_outgoing_prfxes_advertised(int32_t value);
  public:

  // int32 connect_retry_int = 33;
  void clear_connect_retry_int();
  int32_t connect_retry_int() const;
  void set_connect_retry_int(int32_t value);
  private:
  int32_t _internal_connect_retry_int() const;
  void _internal_set_connect_retry_int(int32_t value);
  public:

  // int32 outgoing_update_elpstime = 34;
  void clear_outgoing_update_elpstime();
  int32_t outgoing_update_elpstime() const;
  void set_outgoing_update_elpstime(int32_t value);
  private:
  int32_t _internal_outgoing_update_elpstime() const;
  void _internal_set_outgoing_update_elpstime(int32_t value);
  public:

  // int32 outgoing_prfxes_denied = 35;
  void clear_outgoing_prfxes_denied();
  int32_t outgoing_prfxes_denied() const;
  void set_outgoing_prfxes_denied(int32_t value);
  private:
  int32_t _internal_outgoing_prfxes_denied() const;
  void _internal_set_outgoing_prfxes_denied(int32_t value);
  public:

  // int32 outgoing_prfxes_imp_wdr = 36;
  void clear_outgoing_prfxes_imp_wdr();
  int32_t outgoing_prfxes_imp_wdr() const;
  void set_outgoing_prfxes_imp_wdr(int32_t value);
  private:
  int32_t _internal_outgoing_prfxes_imp_wdr() const;
  void _internal_set_outgoing_prfxes_imp_wdr(int32_t value);
  public:

  // int32 outgoing_prfxes_exp_wdr = 37;
  void clear_outgoing_prfxes_exp_wdr();
  int32_t outgoing_prfxes_exp_wdr() const;
  void set_outgoing_prfxes_exp_wdr(int32_t value);
  private:
  int32_t _internal_outgoing_prfxes_exp_wdr() const;
  void _internal_set_outgoing_prfxes_exp_wdr(int32_t value);
  public:

  // int32 incoming_prfxes_imp_wdr = 38;
  void clear_incoming_prfxes_imp_wdr();
  int32_t incoming_prfxes_imp_wdr() const;
  void set_incoming_prfxes_imp_wdr(int32_t value);
  private:
  int32_t _internal_incoming_prfxes_imp_wdr() const;
  void _internal_set_incoming_prfxes_imp_wdr(int32_t value);
  public:

  // int32 incoming_prfxes_exp_wdr = 39;
  void clear_incoming_prfxes_exp_wdr();
  int32_t incoming_prfxes_exp_wdr() const;
  void set_incoming_prfxes_exp_wdr(int32_t value);
  private:
  int32_t _internal_incoming_prfxes_exp_wdr() const;
  void _internal_set_incoming_prfxes_exp_wdr(int32_t value);
  public:

  // int32 received_holdtime = 40;
  void clear_received_holdtime();
  int32_t received_holdtime() const;
  void set_received_holdtime(int32_t value);
  private:
  int32_t _internal_received_holdtime() const;
  void _internal_set_received_holdtime(int32_t value);
  public:

  // int32 fsm_establishedtime = 41;
  void clear_fsm_establishedtime();
  int32_t fsm_establishedtime() const;
  void set_fsm_establishedtime(int32_t value);
  private:
  int32_t _internal_fsm_establishedtime() const;
  void _internal_set_fsm_establishedtime(int32_t value);
  public:

  // int32 incoming_updates_elpstime = 42;
  void clear_incoming_updates_elpstime();
  int32_t incoming_updates_elpstime() const;
  void set_incoming_updates_elpstime(int32_t value);
  private:
  int32_t _internal_incoming_updates_elpstime() const;
  void _internal_set_incoming_updates_elpstime(int32_t value);
  public:

  // int32 incoming_opens = 43;
  void clear_incoming_opens();
  int32_t incoming_opens() const;
  void set_incoming_opens(int32_t value);
  private:
  int32_t _internal_incoming_opens() const;
  void _internal_set_incoming_opens(int32_t value);
  public:

  // int32 outgoing_opens = 44;
  void clear_outgoing_opens();
  int32_t outgoing_opens() const;
  void set_outgoing_opens(int32_t value);
  private:
  int32_t _internal_outgoing_opens() const;
  void _internal_set_outgoing_opens(int32_t value);
  public:

  // int32 peer_index = 45;
  void clear_peer_index();
  int32_t peer_index() const;
  void set_peer_index(int32_t value);
  private:
  int32_t _internal_peer_index() const;
  void _internal_set_peer_index(int32_t value);
  public:

  // int32 ttl = 46;
  void clear_ttl();
  int32_t ttl() const;
  void set_ttl(int32_t value);
  private:
  int32_t _internal_ttl() const;
  void _internal_set_ttl(int32_t value);
  public:

  // .opi_api.network.cloud.v1alpha1.BGPOperState oper_state = 47;
  void clear_oper_state();
  ::opi_api::network::cloud::v1alpha1::BGPOperState oper_state() const;
  void set_oper_state(::opi_api::network::cloud::v1alpha1::BGPOperState value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPOperState _internal_oper_state() const;
  void _internal_set_oper_state(::opi_api::network::cloud::v1alpha1::BGPOperState value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.BGPPeerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_error_rcvd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_error_sent_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_addr_;
  int session_state_;
  int prev_session_state_;
  int32_t holdtime_;
  int32_t keepalive_;
  int32_t caps_sent_;
  int32_t caps_rcvd_;
  int32_t caps_neg_;
  int sel_local_addr_type_;
  int32_t incoming_notifications_;
  int32_t outbound_notifications_;
  int32_t incoming_updates_;
  int32_t outgoing_updates_;
  int32_t incoming_keepalives_;
  int32_t outgoing_keepalives_;
  int32_t incoming_refreshes_;
  int32_t outgoing_refreshes_;
  int32_t incoming_total_messages_;
  int32_t outgoing_total_messages_;
  int32_t fsm_est_transitions_;
  int32_t connect_retry_count_;
  int32_t peergr_;
  int32_t stale_pathtime_;
  int32_t orf_entry_count_;
  int32_t rcvd_msg_elpstime_;
  int32_t route_refr_sent_;
  int32_t route_refr_rcvd_;
  int32_t incoming_prfxes_;
  int32_t outgoing_prfxes_;
  int32_t outgoing_prfxes_advertised_;
  int32_t connect_retry_int_;
  int32_t outgoing_update_elpstime_;
  int32_t outgoing_prfxes_denied_;
  int32_t outgoing_prfxes_imp_wdr_;
  int32_t outgoing_prfxes_exp_wdr_;
  int32_t incoming_prfxes_imp_wdr_;
  int32_t incoming_prfxes_exp_wdr_;
  int32_t received_holdtime_;
  int32_t fsm_establishedtime_;
  int32_t incoming_updates_elpstime_;
  int32_t incoming_opens_;
  int32_t outgoing_opens_;
  int32_t peer_index_;
  int32_t ttl_;
  int oper_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// -------------------------------------------------------------------

class BGPPeerAf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.BGPPeerAf) */ {
 public:
  inline BGPPeerAf() : BGPPeerAf(nullptr) {}
  ~BGPPeerAf() override;
  explicit constexpr BGPPeerAf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BGPPeerAf(const BGPPeerAf& from);
  BGPPeerAf(BGPPeerAf&& from) noexcept
    : BGPPeerAf() {
    *this = ::std::move(from);
  }

  inline BGPPeerAf& operator=(const BGPPeerAf& from) {
    CopyFrom(from);
    return *this;
  }
  inline BGPPeerAf& operator=(BGPPeerAf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BGPPeerAf& default_instance() {
    return *internal_default_instance();
  }
  static inline const BGPPeerAf* internal_default_instance() {
    return reinterpret_cast<const BGPPeerAf*>(
               &_BGPPeerAf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BGPPeerAf& a, BGPPeerAf& b) {
    a.Swap(&b);
  }
  inline void Swap(BGPPeerAf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BGPPeerAf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BGPPeerAf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BGPPeerAf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BGPPeerAf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BGPPeerAf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BGPPeerAf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.BGPPeerAf";
  }
  protected:
  explicit BGPPeerAf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.BGPPeerAfSpec spec = 1;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* spec);
  ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.BGPPeerAfStatus state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus& state() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* release_state();
  ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* mutable_state();
  void set_allocated_state(::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* state);
  private:
  const ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus& _internal_state() const;
  ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* state);
  ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.BGPPeerAf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// -------------------------------------------------------------------

class BGPPeerAfSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec) */ {
 public:
  inline BGPPeerAfSpec() : BGPPeerAfSpec(nullptr) {}
  ~BGPPeerAfSpec() override;
  explicit constexpr BGPPeerAfSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BGPPeerAfSpec(const BGPPeerAfSpec& from);
  BGPPeerAfSpec(BGPPeerAfSpec&& from) noexcept
    : BGPPeerAfSpec() {
    *this = ::std::move(from);
  }

  inline BGPPeerAfSpec& operator=(const BGPPeerAfSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline BGPPeerAfSpec& operator=(BGPPeerAfSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BGPPeerAfSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const BGPPeerAfSpec* internal_default_instance() {
    return reinterpret_cast<const BGPPeerAfSpec*>(
               &_BGPPeerAfSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BGPPeerAfSpec& a, BGPPeerAfSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(BGPPeerAfSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BGPPeerAfSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BGPPeerAfSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BGPPeerAfSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BGPPeerAfSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BGPPeerAfSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BGPPeerAfSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.BGPPeerAfSpec";
  }
  protected:
  explicit BGPPeerAfSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLocalAddrFieldNumber = 2,
    kPeerAddrFieldNumber = 3,
    kAfiFieldNumber = 4,
    kSafiFieldNumber = 5,
    kNexthopSelfFieldNumber = 6,
    kDefaultOrigFieldNumber = 7,
    kLocalPortFieldNumber = 8,
    kRemotePortFieldNumber = 9,
    kLocalAddrScopeIdFieldNumber = 10,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 2;
  bool has_local_addr() const;
  private:
  bool _internal_has_local_addr() const;
  public:
  void clear_local_addr();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& local_addr() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_local_addr();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_local_addr();
  void set_allocated_local_addr(::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_addr);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_local_addr() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_local_addr();
  public:
  void unsafe_arena_set_allocated_local_addr(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_addr);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_local_addr();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 3;
  bool has_peer_addr() const;
  private:
  bool _internal_has_peer_addr() const;
  public:
  void clear_peer_addr();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& peer_addr() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_peer_addr();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_peer_addr();
  void set_allocated_peer_addr(::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_peer_addr() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_peer_addr();
  public:
  void unsafe_arena_set_allocated_peer_addr(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_peer_addr();

  // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 4;
  void clear_afi();
  ::opi_api::network::cloud::v1alpha1::BGPAfi afi() const;
  void set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPAfi _internal_afi() const;
  void _internal_set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value);
  public:

  // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 5;
  void clear_safi();
  ::opi_api::network::cloud::v1alpha1::BGPSafi safi() const;
  void set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPSafi _internal_safi() const;
  void _internal_set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value);
  public:

  // bool nexthop_self = 6;
  void clear_nexthop_self();
  bool nexthop_self() const;
  void set_nexthop_self(bool value);
  private:
  bool _internal_nexthop_self() const;
  void _internal_set_nexthop_self(bool value);
  public:

  // bool default_orig = 7;
  void clear_default_orig();
  bool default_orig() const;
  void set_default_orig(bool value);
  private:
  bool _internal_default_orig() const;
  void _internal_set_default_orig(bool value);
  public:

  // int32 local_port = 8;
  void clear_local_port();
  int32_t local_port() const;
  void set_local_port(int32_t value);
  private:
  int32_t _internal_local_port() const;
  void _internal_set_local_port(int32_t value);
  public:

  // int32 remote_port = 9;
  void clear_remote_port();
  int32_t remote_port() const;
  void set_remote_port(int32_t value);
  private:
  int32_t _internal_remote_port() const;
  void _internal_set_remote_port(int32_t value);
  public:

  // int32 local_addr_scope_id = 10;
  void clear_local_addr_scope_id();
  int32_t local_addr_scope_id() const;
  void set_local_addr_scope_id(int32_t value);
  private:
  int32_t _internal_local_addr_scope_id() const;
  void _internal_set_local_addr_scope_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_addr_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr_;
  int afi_;
  int safi_;
  bool nexthop_self_;
  bool default_orig_;
  int32_t local_port_;
  int32_t remote_port_;
  int32_t local_addr_scope_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// -------------------------------------------------------------------

class BGPPeerAfStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus) */ {
 public:
  inline BGPPeerAfStatus() : BGPPeerAfStatus(nullptr) {}
  ~BGPPeerAfStatus() override;
  explicit constexpr BGPPeerAfStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BGPPeerAfStatus(const BGPPeerAfStatus& from);
  BGPPeerAfStatus(BGPPeerAfStatus&& from) noexcept
    : BGPPeerAfStatus() {
    *this = ::std::move(from);
  }

  inline BGPPeerAfStatus& operator=(const BGPPeerAfStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline BGPPeerAfStatus& operator=(BGPPeerAfStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BGPPeerAfStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const BGPPeerAfStatus* internal_default_instance() {
    return reinterpret_cast<const BGPPeerAfStatus*>(
               &_BGPPeerAfStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BGPPeerAfStatus& a, BGPPeerAfStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(BGPPeerAfStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BGPPeerAfStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BGPPeerAfStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BGPPeerAfStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BGPPeerAfStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BGPPeerAfStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BGPPeerAfStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.BGPPeerAfStatus";
  }
  protected:
  explicit BGPPeerAfStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateGroupFieldNumber = 1,
    kLocalAddrScopeIdFieldNumber = 2,
    kRouteRefreshFieldNumber = 3,
    kAddPathCapNegFieldNumber = 4,
    kReflectorClientFieldNumber = 5,
  };
  // int32 update_group = 1;
  void clear_update_group();
  int32_t update_group() const;
  void set_update_group(int32_t value);
  private:
  int32_t _internal_update_group() const;
  void _internal_set_update_group(int32_t value);
  public:

  // int32 local_addr_scope_id = 2;
  void clear_local_addr_scope_id();
  int32_t local_addr_scope_id() const;
  void set_local_addr_scope_id(int32_t value);
  private:
  int32_t _internal_local_addr_scope_id() const;
  void _internal_set_local_addr_scope_id(int32_t value);
  public:

  // bool route_refresh = 3;
  void clear_route_refresh();
  bool route_refresh() const;
  void set_route_refresh(bool value);
  private:
  bool _internal_route_refresh() const;
  void _internal_set_route_refresh(bool value);
  public:

  // .opi_api.network.cloud.v1alpha1.BgpAddPathCapNegCap add_path_cap_neg = 4;
  void clear_add_path_cap_neg();
  ::opi_api::network::cloud::v1alpha1::BgpAddPathCapNegCap add_path_cap_neg() const;
  void set_add_path_cap_neg(::opi_api::network::cloud::v1alpha1::BgpAddPathCapNegCap value);
  private:
  ::opi_api::network::cloud::v1alpha1::BgpAddPathCapNegCap _internal_add_path_cap_neg() const;
  void _internal_set_add_path_cap_neg(::opi_api::network::cloud::v1alpha1::BgpAddPathCapNegCap value);
  public:

  // .opi_api.network.cloud.v1alpha1.BGPPeerRRClient reflector_client = 5;
  void clear_reflector_client();
  ::opi_api::network::cloud::v1alpha1::BGPPeerRRClient reflector_client() const;
  void set_reflector_client(::opi_api::network::cloud::v1alpha1::BGPPeerRRClient value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPPeerRRClient _internal_reflector_client() const;
  void _internal_set_reflector_client(::opi_api::network::cloud::v1alpha1::BGPPeerRRClient value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t update_group_;
  int32_t local_addr_scope_id_;
  bool route_refresh_;
  int add_path_cap_neg_;
  int reflector_client_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// -------------------------------------------------------------------

class BGPNLRIPrefix final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix) */ {
 public:
  inline BGPNLRIPrefix() : BGPNLRIPrefix(nullptr) {}
  ~BGPNLRIPrefix() override;
  explicit constexpr BGPNLRIPrefix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BGPNLRIPrefix(const BGPNLRIPrefix& from);
  BGPNLRIPrefix(BGPNLRIPrefix&& from) noexcept
    : BGPNLRIPrefix() {
    *this = ::std::move(from);
  }

  inline BGPNLRIPrefix& operator=(const BGPNLRIPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline BGPNLRIPrefix& operator=(BGPNLRIPrefix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BGPNLRIPrefix& default_instance() {
    return *internal_default_instance();
  }
  static inline const BGPNLRIPrefix* internal_default_instance() {
    return reinterpret_cast<const BGPNLRIPrefix*>(
               &_BGPNLRIPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BGPNLRIPrefix& a, BGPNLRIPrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(BGPNLRIPrefix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BGPNLRIPrefix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BGPNLRIPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BGPNLRIPrefix>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BGPNLRIPrefix& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BGPNLRIPrefix& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BGPNLRIPrefix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.BGPNLRIPrefix";
  }
  protected:
  explicit BGPNLRIPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec spec = 1;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* spec);
  ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus& state() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* release_state();
  ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* mutable_state();
  void set_allocated_state(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* state);
  private:
  const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus& _internal_state() const;
  ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* state);
  ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// -------------------------------------------------------------------

class BGPNLRIPrefixSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec) */ {
 public:
  inline BGPNLRIPrefixSpec() : BGPNLRIPrefixSpec(nullptr) {}
  ~BGPNLRIPrefixSpec() override;
  explicit constexpr BGPNLRIPrefixSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BGPNLRIPrefixSpec(const BGPNLRIPrefixSpec& from);
  BGPNLRIPrefixSpec(BGPNLRIPrefixSpec&& from) noexcept
    : BGPNLRIPrefixSpec() {
    *this = ::std::move(from);
  }

  inline BGPNLRIPrefixSpec& operator=(const BGPNLRIPrefixSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline BGPNLRIPrefixSpec& operator=(BGPNLRIPrefixSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BGPNLRIPrefixSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const BGPNLRIPrefixSpec* internal_default_instance() {
    return reinterpret_cast<const BGPNLRIPrefixSpec*>(
               &_BGPNLRIPrefixSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BGPNLRIPrefixSpec& a, BGPNLRIPrefixSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(BGPNLRIPrefixSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BGPNLRIPrefixSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BGPNLRIPrefixSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BGPNLRIPrefixSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BGPNLRIPrefixSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BGPNLRIPrefixSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BGPNLRIPrefixSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec";
  }
  protected:
  explicit BGPNLRIPrefixSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 3,
    kAfiFieldNumber = 1,
    kSafiFieldNumber = 2,
    kPrefixLenFieldNumber = 4,
    kRouteSourceFieldNumber = 5,
    kRouteSourceIndexFieldNumber = 6,
    kPathIdFieldNumber = 7,
  };
  // bytes prefix = 3;
  void clear_prefix();
  const std::string& prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 1;
  void clear_afi();
  ::opi_api::network::cloud::v1alpha1::BGPAfi afi() const;
  void set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPAfi _internal_afi() const;
  void _internal_set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value);
  public:

  // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 2;
  void clear_safi();
  ::opi_api::network::cloud::v1alpha1::BGPSafi safi() const;
  void set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPSafi _internal_safi() const;
  void _internal_set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value);
  public:

  // int32 prefix_len = 4;
  void clear_prefix_len();
  int32_t prefix_len() const;
  void set_prefix_len(int32_t value);
  private:
  int32_t _internal_prefix_len() const;
  void _internal_set_prefix_len(int32_t value);
  public:

  // .opi_api.network.cloud.v1alpha1.NLRISrc route_source = 5;
  void clear_route_source();
  ::opi_api::network::cloud::v1alpha1::NLRISrc route_source() const;
  void set_route_source(::opi_api::network::cloud::v1alpha1::NLRISrc value);
  private:
  ::opi_api::network::cloud::v1alpha1::NLRISrc _internal_route_source() const;
  void _internal_set_route_source(::opi_api::network::cloud::v1alpha1::NLRISrc value);
  public:

  // int32 route_source_index = 6;
  void clear_route_source_index();
  int32_t route_source_index() const;
  void set_route_source_index(int32_t value);
  private:
  int32_t _internal_route_source_index() const;
  void _internal_set_route_source_index(int32_t value);
  public:

  // int32 path_id = 7;
  void clear_path_id();
  int32_t path_id() const;
  void set_path_id(int32_t value);
  private:
  int32_t _internal_path_id() const;
  void _internal_set_path_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  int afi_;
  int safi_;
  int32_t prefix_len_;
  int route_source_;
  int32_t route_source_index_;
  int32_t path_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// -------------------------------------------------------------------

class BGPNLRIPrefixStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus) */ {
 public:
  inline BGPNLRIPrefixStatus() : BGPNLRIPrefixStatus(nullptr) {}
  ~BGPNLRIPrefixStatus() override;
  explicit constexpr BGPNLRIPrefixStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BGPNLRIPrefixStatus(const BGPNLRIPrefixStatus& from);
  BGPNLRIPrefixStatus(BGPNLRIPrefixStatus&& from) noexcept
    : BGPNLRIPrefixStatus() {
    *this = ::std::move(from);
  }

  inline BGPNLRIPrefixStatus& operator=(const BGPNLRIPrefixStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline BGPNLRIPrefixStatus& operator=(BGPNLRIPrefixStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BGPNLRIPrefixStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const BGPNLRIPrefixStatus* internal_default_instance() {
    return reinterpret_cast<const BGPNLRIPrefixStatus*>(
               &_BGPNLRIPrefixStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BGPNLRIPrefixStatus& a, BGPNLRIPrefixStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(BGPNLRIPrefixStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BGPNLRIPrefixStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BGPNLRIPrefixStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BGPNLRIPrefixStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BGPNLRIPrefixStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BGPNLRIPrefixStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BGPNLRIPrefixStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus";
  }
  protected:
  explicit BGPNLRIPrefixStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtCommFieldNumber = 21,
    kCommFieldNumber = 22,
    kPrefixFieldNumber = 3,
    kAsPathStrFieldNumber = 9,
    kPathOrigIdFieldNumber = 10,
    kNextHopAddrFieldNumber = 11,
    kPeerAddrFieldNumber = 14,
    kAfiFieldNumber = 1,
    kSafiFieldNumber = 2,
    kPrefixLenFieldNumber = 4,
    kRouteSourceFieldNumber = 5,
    kRouteSourceIndexFieldNumber = 6,
    kPathIdFieldNumber = 7,
    kAsSizeFieldNumber = 12,
    kBestRouteFieldNumber = 8,
    kEcmpRouteFieldNumber = 13,
    kFlapStatsSupprsdFieldNumber = 16,
    kStaleFieldNumber = 18,
    kFlapStatsFlapcntFieldNumber = 15,
    kIsActiveFieldNumber = 17,
    kFlapStarttimeFieldNumber = 19,
    kReasonNotBestFieldNumber = 20,
    kLocalPrefFieldNumber = 23,
    kOriginFieldNumber = 24,
    kMedPresentFieldNumber = 25,
    kMedFieldNumber = 26,
    kPeerTypeFieldNumber = 27,
  };
  // repeated bytes ext_comm = 21;
  int ext_comm_size() const;
  private:
  int _internal_ext_comm_size() const;
  public:
  void clear_ext_comm();
  const std::string& ext_comm(int index) const;
  std::string* mutable_ext_comm(int index);
  void set_ext_comm(int index, const std::string& value);
  void set_ext_comm(int index, std::string&& value);
  void set_ext_comm(int index, const char* value);
  void set_ext_comm(int index, const void* value, size_t size);
  std::string* add_ext_comm();
  void add_ext_comm(const std::string& value);
  void add_ext_comm(std::string&& value);
  void add_ext_comm(const char* value);
  void add_ext_comm(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ext_comm() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ext_comm();
  private:
  const std::string& _internal_ext_comm(int index) const;
  std::string* _internal_add_ext_comm();
  public:

  // repeated bytes comm = 22;
  int comm_size() const;
  private:
  int _internal_comm_size() const;
  public:
  void clear_comm();
  const std::string& comm(int index) const;
  std::string* mutable_comm(int index);
  void set_comm(int index, const std::string& value);
  void set_comm(int index, std::string&& value);
  void set_comm(int index, const char* value);
  void set_comm(int index, const void* value, size_t size);
  std::string* add_comm();
  void add_comm(const std::string& value);
  void add_comm(std::string&& value);
  void add_comm(const char* value);
  void add_comm(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& comm() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_comm();
  private:
  const std::string& _internal_comm(int index) const;
  std::string* _internal_add_comm();
  public:

  // bytes prefix = 3;
  void clear_prefix();
  const std::string& prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // bytes as_path_str = 9;
  void clear_as_path_str();
  const std::string& as_path_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_as_path_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_as_path_str();
  PROTOBUF_NODISCARD std::string* release_as_path_str();
  void set_allocated_as_path_str(std::string* as_path_str);
  private:
  const std::string& _internal_as_path_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_as_path_str(const std::string& value);
  std::string* _internal_mutable_as_path_str();
  public:

  // bytes path_orig_id = 10;
  void clear_path_orig_id();
  const std::string& path_orig_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path_orig_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path_orig_id();
  PROTOBUF_NODISCARD std::string* release_path_orig_id();
  void set_allocated_path_orig_id(std::string* path_orig_id);
  private:
  const std::string& _internal_path_orig_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path_orig_id(const std::string& value);
  std::string* _internal_mutable_path_orig_id();
  public:

  // bytes next_hop_addr = 11;
  void clear_next_hop_addr();
  const std::string& next_hop_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_hop_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_hop_addr();
  PROTOBUF_NODISCARD std::string* release_next_hop_addr();
  void set_allocated_next_hop_addr(std::string* next_hop_addr);
  private:
  const std::string& _internal_next_hop_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_hop_addr(const std::string& value);
  std::string* _internal_mutable_next_hop_addr();
  public:

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 14;
  bool has_peer_addr() const;
  private:
  bool _internal_has_peer_addr() const;
  public:
  void clear_peer_addr();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& peer_addr() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_peer_addr();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_peer_addr();
  void set_allocated_peer_addr(::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_peer_addr() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_peer_addr();
  public:
  void unsafe_arena_set_allocated_peer_addr(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_peer_addr();

  // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 1;
  void clear_afi();
  ::opi_api::network::cloud::v1alpha1::BGPAfi afi() const;
  void set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPAfi _internal_afi() const;
  void _internal_set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value);
  public:

  // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 2;
  void clear_safi();
  ::opi_api::network::cloud::v1alpha1::BGPSafi safi() const;
  void set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPSafi _internal_safi() const;
  void _internal_set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value);
  public:

  // int32 prefix_len = 4;
  void clear_prefix_len();
  int32_t prefix_len() const;
  void set_prefix_len(int32_t value);
  private:
  int32_t _internal_prefix_len() const;
  void _internal_set_prefix_len(int32_t value);
  public:

  // .opi_api.network.cloud.v1alpha1.NLRISrc route_source = 5;
  void clear_route_source();
  ::opi_api::network::cloud::v1alpha1::NLRISrc route_source() const;
  void set_route_source(::opi_api::network::cloud::v1alpha1::NLRISrc value);
  private:
  ::opi_api::network::cloud::v1alpha1::NLRISrc _internal_route_source() const;
  void _internal_set_route_source(::opi_api::network::cloud::v1alpha1::NLRISrc value);
  public:

  // int32 route_source_index = 6;
  void clear_route_source_index();
  int32_t route_source_index() const;
  void set_route_source_index(int32_t value);
  private:
  int32_t _internal_route_source_index() const;
  void _internal_set_route_source_index(int32_t value);
  public:

  // int32 path_id = 7;
  void clear_path_id();
  int32_t path_id() const;
  void set_path_id(int32_t value);
  private:
  int32_t _internal_path_id() const;
  void _internal_set_path_id(int32_t value);
  public:

  // .opi_api.network.cloud.v1alpha1.BgpAsSize as_size = 12;
  void clear_as_size();
  ::opi_api::network::cloud::v1alpha1::BgpAsSize as_size() const;
  void set_as_size(::opi_api::network::cloud::v1alpha1::BgpAsSize value);
  private:
  ::opi_api::network::cloud::v1alpha1::BgpAsSize _internal_as_size() const;
  void _internal_set_as_size(::opi_api::network::cloud::v1alpha1::BgpAsSize value);
  public:

  // bool best_route = 8;
  void clear_best_route();
  bool best_route() const;
  void set_best_route(bool value);
  private:
  bool _internal_best_route() const;
  void _internal_set_best_route(bool value);
  public:

  // bool ecmp_route = 13;
  void clear_ecmp_route();
  bool ecmp_route() const;
  void set_ecmp_route(bool value);
  private:
  bool _internal_ecmp_route() const;
  void _internal_set_ecmp_route(bool value);
  public:

  // bool flap_stats_supprsd = 16;
  void clear_flap_stats_supprsd();
  bool flap_stats_supprsd() const;
  void set_flap_stats_supprsd(bool value);
  private:
  bool _internal_flap_stats_supprsd() const;
  void _internal_set_flap_stats_supprsd(bool value);
  public:

  // bool stale = 18;
  void clear_stale();
  bool stale() const;
  void set_stale(bool value);
  private:
  bool _internal_stale() const;
  void _internal_set_stale(bool value);
  public:

  // int32 flap_stats_flapcnt = 15;
  void clear_flap_stats_flapcnt();
  int32_t flap_stats_flapcnt() const;
  void set_flap_stats_flapcnt(int32_t value);
  private:
  int32_t _internal_flap_stats_flapcnt() const;
  void _internal_set_flap_stats_flapcnt(int32_t value);
  public:

  // .opi_api.network.cloud.v1alpha1.BgpNlriIsActive is_active = 17;
  void clear_is_active();
  ::opi_api::network::cloud::v1alpha1::BgpNlriIsActive is_active() const;
  void set_is_active(::opi_api::network::cloud::v1alpha1::BgpNlriIsActive value);
  private:
  ::opi_api::network::cloud::v1alpha1::BgpNlriIsActive _internal_is_active() const;
  void _internal_set_is_active(::opi_api::network::cloud::v1alpha1::BgpNlriIsActive value);
  public:

  // int32 flap_starttime = 19;
  void clear_flap_starttime();
  int32_t flap_starttime() const;
  void set_flap_starttime(int32_t value);
  private:
  int32_t _internal_flap_starttime() const;
  void _internal_set_flap_starttime(int32_t value);
  public:

  // .opi_api.network.cloud.v1alpha1.BGPRsnNotBest reason_not_best = 20;
  void clear_reason_not_best();
  ::opi_api::network::cloud::v1alpha1::BGPRsnNotBest reason_not_best() const;
  void set_reason_not_best(::opi_api::network::cloud::v1alpha1::BGPRsnNotBest value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPRsnNotBest _internal_reason_not_best() const;
  void _internal_set_reason_not_best(::opi_api::network::cloud::v1alpha1::BGPRsnNotBest value);
  public:

  // int32 local_pref = 23;
  void clear_local_pref();
  int32_t local_pref() const;
  void set_local_pref(int32_t value);
  private:
  int32_t _internal_local_pref() const;
  void _internal_set_local_pref(int32_t value);
  public:

  // .opi_api.network.cloud.v1alpha1.BGPOriginAttr origin = 24;
  void clear_origin();
  ::opi_api::network::cloud::v1alpha1::BGPOriginAttr origin() const;
  void set_origin(::opi_api::network::cloud::v1alpha1::BGPOriginAttr value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPOriginAttr _internal_origin() const;
  void _internal_set_origin(::opi_api::network::cloud::v1alpha1::BGPOriginAttr value);
  public:

  // bool med_present = 25;
  void clear_med_present();
  bool med_present() const;
  void set_med_present(bool value);
  private:
  bool _internal_med_present() const;
  void _internal_set_med_present(bool value);
  public:

  // uint32 med = 26;
  void clear_med();
  uint32_t med() const;
  void set_med(uint32_t value);
  private:
  uint32_t _internal_med() const;
  void _internal_set_med(uint32_t value);
  public:

  // .opi_api.network.cloud.v1alpha1.BGPPeerType peer_type = 27;
  void clear_peer_type();
  ::opi_api::network::cloud::v1alpha1::BGPPeerType peer_type() const;
  void set_peer_type(::opi_api::network::cloud::v1alpha1::BGPPeerType value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPPeerType _internal_peer_type() const;
  void _internal_set_peer_type(::opi_api::network::cloud::v1alpha1::BGPPeerType value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ext_comm_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> comm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr as_path_str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_orig_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_hop_addr_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr_;
  int afi_;
  int safi_;
  int32_t prefix_len_;
  int route_source_;
  int32_t route_source_index_;
  int32_t path_id_;
  int as_size_;
  bool best_route_;
  bool ecmp_route_;
  bool flap_stats_supprsd_;
  bool stale_;
  int32_t flap_stats_flapcnt_;
  int is_active_;
  int32_t flap_starttime_;
  int reason_not_best_;
  int32_t local_pref_;
  int origin_;
  bool med_present_;
  uint32_t med_;
  int peer_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// -------------------------------------------------------------------

class BGPNLRIPrefixFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter) */ {
 public:
  inline BGPNLRIPrefixFilter() : BGPNLRIPrefixFilter(nullptr) {}
  ~BGPNLRIPrefixFilter() override;
  explicit constexpr BGPNLRIPrefixFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BGPNLRIPrefixFilter(const BGPNLRIPrefixFilter& from);
  BGPNLRIPrefixFilter(BGPNLRIPrefixFilter&& from) noexcept
    : BGPNLRIPrefixFilter() {
    *this = ::std::move(from);
  }

  inline BGPNLRIPrefixFilter& operator=(const BGPNLRIPrefixFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BGPNLRIPrefixFilter& operator=(BGPNLRIPrefixFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BGPNLRIPrefixFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const BGPNLRIPrefixFilter* internal_default_instance() {
    return reinterpret_cast<const BGPNLRIPrefixFilter*>(
               &_BGPNLRIPrefixFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BGPNLRIPrefixFilter& a, BGPNLRIPrefixFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(BGPNLRIPrefixFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BGPNLRIPrefixFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BGPNLRIPrefixFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BGPNLRIPrefixFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BGPNLRIPrefixFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BGPNLRIPrefixFilter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BGPNLRIPrefixFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter";
  }
  protected:
  explicit BGPNLRIPrefixFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtCommFieldNumber = 1,
    kNextHopFieldNumber = 4,
    kIpAddressFieldNumber = 5,
    kVnidFieldNumber = 2,
    kRouteTypeFieldNumber = 3,
    kBestFieldNumber = 6,
  };
  // bytes ext_comm = 1;
  void clear_ext_comm();
  const std::string& ext_comm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ext_comm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ext_comm();
  PROTOBUF_NODISCARD std::string* release_ext_comm();
  void set_allocated_ext_comm(std::string* ext_comm);
  private:
  const std::string& _internal_ext_comm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ext_comm(const std::string& value);
  std::string* _internal_mutable_ext_comm();
  public:

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop = 4;
  bool has_next_hop() const;
  private:
  bool _internal_has_next_hop() const;
  public:
  void clear_next_hop();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& next_hop() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_next_hop();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_next_hop();
  void set_allocated_next_hop(::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_next_hop() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_next_hop();
  public:
  void unsafe_arena_set_allocated_next_hop(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_next_hop();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 5;
  bool has_ip_address() const;
  private:
  bool _internal_has_ip_address() const;
  public:
  void clear_ip_address();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& ip_address() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_ip_address();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_ip_address();
  void set_allocated_ip_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* ip_address);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_ip_address() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_ip_address();
  public:
  void unsafe_arena_set_allocated_ip_address(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* ip_address);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_ip_address();

  // int32 vnid = 2;
  void clear_vnid();
  int32_t vnid() const;
  void set_vnid(int32_t value);
  private:
  int32_t _internal_vnid() const;
  void _internal_set_vnid(int32_t value);
  public:

  // int32 route_type = 3;
  void clear_route_type();
  int32_t route_type() const;
  void set_route_type(int32_t value);
  private:
  int32_t _internal_route_type() const;
  void _internal_set_route_type(int32_t value);
  public:

  // bool best = 6;
  void clear_best();
  bool best() const;
  void set_best(bool value);
  private:
  bool _internal_best() const;
  void _internal_set_best(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_comm_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* ip_address_;
  int32_t vnid_;
  int32_t route_type_;
  bool best_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// -------------------------------------------------------------------

class BGPAdjRibOut final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.BGPAdjRibOut) */ {
 public:
  inline BGPAdjRibOut() : BGPAdjRibOut(nullptr) {}
  ~BGPAdjRibOut() override;
  explicit constexpr BGPAdjRibOut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BGPAdjRibOut(const BGPAdjRibOut& from);
  BGPAdjRibOut(BGPAdjRibOut&& from) noexcept
    : BGPAdjRibOut() {
    *this = ::std::move(from);
  }

  inline BGPAdjRibOut& operator=(const BGPAdjRibOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline BGPAdjRibOut& operator=(BGPAdjRibOut&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BGPAdjRibOut& default_instance() {
    return *internal_default_instance();
  }
  static inline const BGPAdjRibOut* internal_default_instance() {
    return reinterpret_cast<const BGPAdjRibOut*>(
               &_BGPAdjRibOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BGPAdjRibOut& a, BGPAdjRibOut& b) {
    a.Swap(&b);
  }
  inline void Swap(BGPAdjRibOut* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BGPAdjRibOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BGPAdjRibOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BGPAdjRibOut>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BGPAdjRibOut& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BGPAdjRibOut& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BGPAdjRibOut* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.BGPAdjRibOut";
  }
  protected:
  explicit BGPAdjRibOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.BGPAdjRibOutSpec spec = 1;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* spec);
  ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* release_status();
  ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* mutable_status();
  void set_allocated_status(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* status);
  private:
  const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus& _internal_status() const;
  ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* status);
  ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.BGPAdjRibOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// -------------------------------------------------------------------

class BGPAdjRibOutSpec final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.BGPAdjRibOutSpec) */ {
 public:
  inline BGPAdjRibOutSpec() : BGPAdjRibOutSpec(nullptr) {}
  explicit constexpr BGPAdjRibOutSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BGPAdjRibOutSpec(const BGPAdjRibOutSpec& from);
  BGPAdjRibOutSpec(BGPAdjRibOutSpec&& from) noexcept
    : BGPAdjRibOutSpec() {
    *this = ::std::move(from);
  }

  inline BGPAdjRibOutSpec& operator=(const BGPAdjRibOutSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline BGPAdjRibOutSpec& operator=(BGPAdjRibOutSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BGPAdjRibOutSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const BGPAdjRibOutSpec* internal_default_instance() {
    return reinterpret_cast<const BGPAdjRibOutSpec*>(
               &_BGPAdjRibOutSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BGPAdjRibOutSpec& a, BGPAdjRibOutSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(BGPAdjRibOutSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BGPAdjRibOutSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BGPAdjRibOutSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BGPAdjRibOutSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BGPAdjRibOutSpec& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BGPAdjRibOutSpec& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.BGPAdjRibOutSpec";
  }
  protected:
  explicit BGPAdjRibOutSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.BGPAdjRibOutSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// -------------------------------------------------------------------

class BGPAdjRibOutStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus) */ {
 public:
  inline BGPAdjRibOutStatus() : BGPAdjRibOutStatus(nullptr) {}
  ~BGPAdjRibOutStatus() override;
  explicit constexpr BGPAdjRibOutStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BGPAdjRibOutStatus(const BGPAdjRibOutStatus& from);
  BGPAdjRibOutStatus(BGPAdjRibOutStatus&& from) noexcept
    : BGPAdjRibOutStatus() {
    *this = ::std::move(from);
  }

  inline BGPAdjRibOutStatus& operator=(const BGPAdjRibOutStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline BGPAdjRibOutStatus& operator=(BGPAdjRibOutStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BGPAdjRibOutStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const BGPAdjRibOutStatus* internal_default_instance() {
    return reinterpret_cast<const BGPAdjRibOutStatus*>(
               &_BGPAdjRibOutStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BGPAdjRibOutStatus& a, BGPAdjRibOutStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(BGPAdjRibOutStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BGPAdjRibOutStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BGPAdjRibOutStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BGPAdjRibOutStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BGPAdjRibOutStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BGPAdjRibOutStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BGPAdjRibOutStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus";
  }
  protected:
  explicit BGPAdjRibOutStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommFieldNumber = 9,
    kExtCommFieldNumber = 10,
    kPrefixFieldNumber = 4,
    kAsPathStrFieldNumber = 8,
    kPeerAddrFieldNumber = 1,
    kAfiFieldNumber = 2,
    kSafiFieldNumber = 3,
    kPrefixLenFieldNumber = 5,
    kStateFieldNumber = 6,
    kAsSizeFieldNumber = 7,
    kMedPresentFieldNumber = 11,
    kMedFieldNumber = 12,
  };
  // repeated bytes comm = 9;
  int comm_size() const;
  private:
  int _internal_comm_size() const;
  public:
  void clear_comm();
  const std::string& comm(int index) const;
  std::string* mutable_comm(int index);
  void set_comm(int index, const std::string& value);
  void set_comm(int index, std::string&& value);
  void set_comm(int index, const char* value);
  void set_comm(int index, const void* value, size_t size);
  std::string* add_comm();
  void add_comm(const std::string& value);
  void add_comm(std::string&& value);
  void add_comm(const char* value);
  void add_comm(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& comm() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_comm();
  private:
  const std::string& _internal_comm(int index) const;
  std::string* _internal_add_comm();
  public:

  // repeated bytes ext_comm = 10;
  int ext_comm_size() const;
  private:
  int _internal_ext_comm_size() const;
  public:
  void clear_ext_comm();
  const std::string& ext_comm(int index) const;
  std::string* mutable_ext_comm(int index);
  void set_ext_comm(int index, const std::string& value);
  void set_ext_comm(int index, std::string&& value);
  void set_ext_comm(int index, const char* value);
  void set_ext_comm(int index, const void* value, size_t size);
  std::string* add_ext_comm();
  void add_ext_comm(const std::string& value);
  void add_ext_comm(std::string&& value);
  void add_ext_comm(const char* value);
  void add_ext_comm(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ext_comm() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ext_comm();
  private:
  const std::string& _internal_ext_comm(int index) const;
  std::string* _internal_add_ext_comm();
  public:

  // bytes prefix = 4;
  void clear_prefix();
  const std::string& prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // bytes as_path_str = 8;
  void clear_as_path_str();
  const std::string& as_path_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_as_path_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_as_path_str();
  PROTOBUF_NODISCARD std::string* release_as_path_str();
  void set_allocated_as_path_str(std::string* as_path_str);
  private:
  const std::string& _internal_as_path_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_as_path_str(const std::string& value);
  std::string* _internal_mutable_as_path_str();
  public:

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 1;
  bool has_peer_addr() const;
  private:
  bool _internal_has_peer_addr() const;
  public:
  void clear_peer_addr();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& peer_addr() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_peer_addr();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_peer_addr();
  void set_allocated_peer_addr(::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_peer_addr() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_peer_addr();
  public:
  void unsafe_arena_set_allocated_peer_addr(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_peer_addr();

  // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 2;
  void clear_afi();
  ::opi_api::network::cloud::v1alpha1::BGPAfi afi() const;
  void set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPAfi _internal_afi() const;
  void _internal_set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value);
  public:

  // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 3;
  void clear_safi();
  ::opi_api::network::cloud::v1alpha1::BGPSafi safi() const;
  void set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value);
  private:
  ::opi_api::network::cloud::v1alpha1::BGPSafi _internal_safi() const;
  void _internal_set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value);
  public:

  // int32 prefix_len = 5;
  void clear_prefix_len();
  int32_t prefix_len() const;
  void set_prefix_len(int32_t value);
  private:
  int32_t _internal_prefix_len() const;
  void _internal_set_prefix_len(int32_t value);
  public:

  // .opi_api.network.cloud.v1alpha1.BgpAroAdvertState state = 6;
  void clear_state();
  ::opi_api::network::cloud::v1alpha1::BgpAroAdvertState state() const;
  void set_state(::opi_api::network::cloud::v1alpha1::BgpAroAdvertState value);
  private:
  ::opi_api::network::cloud::v1alpha1::BgpAroAdvertState _internal_state() const;
  void _internal_set_state(::opi_api::network::cloud::v1alpha1::BgpAroAdvertState value);
  public:

  // .opi_api.network.cloud.v1alpha1.BgpAsSize as_size = 7;
  void clear_as_size();
  ::opi_api::network::cloud::v1alpha1::BgpAsSize as_size() const;
  void set_as_size(::opi_api::network::cloud::v1alpha1::BgpAsSize value);
  private:
  ::opi_api::network::cloud::v1alpha1::BgpAsSize _internal_as_size() const;
  void _internal_set_as_size(::opi_api::network::cloud::v1alpha1::BgpAsSize value);
  public:

  // bool med_present = 11;
  void clear_med_present();
  bool med_present() const;
  void set_med_present(bool value);
  private:
  bool _internal_med_present() const;
  void _internal_set_med_present(bool value);
  public:

  // uint32 med = 12;
  void clear_med();
  uint32_t med() const;
  void set_med(uint32_t value);
  private:
  uint32_t _internal_med() const;
  void _internal_set_med(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> comm_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ext_comm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr as_path_str_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr_;
  int afi_;
  int safi_;
  int32_t prefix_len_;
  int state_;
  int as_size_;
  bool med_present_;
  uint32_t med_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bgp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Bgp

// .opi_api.network.cloud.v1alpha1.BgpSpec spec = 1;
inline bool Bgp::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool Bgp::has_spec() const {
  return _internal_has_spec();
}
inline void Bgp::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::BgpSpec& Bgp::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::BgpSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::BgpSpec&>(
      ::opi_api::network::cloud::v1alpha1::_BgpSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::BgpSpec& Bgp::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.Bgp.spec)
  return _internal_spec();
}
inline void Bgp::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::BgpSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.Bgp.spec)
}
inline ::opi_api::network::cloud::v1alpha1::BgpSpec* Bgp::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::BgpSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BgpSpec* Bgp::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.Bgp.spec)
  
  ::opi_api::network::cloud::v1alpha1::BgpSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BgpSpec* Bgp::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BgpSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::BgpSpec* Bgp::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::BgpSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.Bgp.spec)
  return _msg;
}
inline void Bgp::set_allocated_spec(::opi_api::network::cloud::v1alpha1::BgpSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::BgpSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.Bgp.spec)
}

// .opi_api.network.cloud.v1alpha1.BgpStatus status = 2;
inline bool Bgp::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Bgp::has_status() const {
  return _internal_has_status();
}
inline void Bgp::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::BgpStatus& Bgp::_internal_status() const {
  const ::opi_api::network::cloud::v1alpha1::BgpStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::BgpStatus&>(
      ::opi_api::network::cloud::v1alpha1::_BgpStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::BgpStatus& Bgp::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.Bgp.status)
  return _internal_status();
}
inline void Bgp::unsafe_arena_set_allocated_status(
    ::opi_api::network::cloud::v1alpha1::BgpStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.Bgp.status)
}
inline ::opi_api::network::cloud::v1alpha1::BgpStatus* Bgp::release_status() {
  
  ::opi_api::network::cloud::v1alpha1::BgpStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BgpStatus* Bgp::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.Bgp.status)
  
  ::opi_api::network::cloud::v1alpha1::BgpStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BgpStatus* Bgp::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BgpStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::cloud::v1alpha1::BgpStatus* Bgp::mutable_status() {
  ::opi_api::network::cloud::v1alpha1::BgpStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.Bgp.status)
  return _msg;
}
inline void Bgp::set_allocated_status(::opi_api::network::cloud::v1alpha1::BgpStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::BgpStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.Bgp.status)
}

// -------------------------------------------------------------------

// BgpSpec

// .opi_api.common.v1.ObjectKey id = 1;
inline bool BgpSpec::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool BgpSpec::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& BgpSpec::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& BgpSpec::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BgpSpec.id)
  return _internal_id();
}
inline void BgpSpec::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BgpSpec.id)
}
inline ::opi_api::common::v1::ObjectKey* BgpSpec::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* BgpSpec::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BgpSpec.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* BgpSpec::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* BgpSpec::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BgpSpec.id)
  return _msg;
}
inline void BgpSpec::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BgpSpec.id)
}

// uint32 local_asn = 2;
inline void BgpSpec::clear_local_asn() {
  local_asn_ = 0u;
}
inline uint32_t BgpSpec::_internal_local_asn() const {
  return local_asn_;
}
inline uint32_t BgpSpec::local_asn() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BgpSpec.local_asn)
  return _internal_local_asn();
}
inline void BgpSpec::_internal_set_local_asn(uint32_t value) {
  
  local_asn_ = value;
}
inline void BgpSpec::set_local_asn(uint32_t value) {
  _internal_set_local_asn(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BgpSpec.local_asn)
}

// fixed32 router_id = 3;
inline void BgpSpec::clear_router_id() {
  router_id_ = 0u;
}
inline uint32_t BgpSpec::_internal_router_id() const {
  return router_id_;
}
inline uint32_t BgpSpec::router_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BgpSpec.router_id)
  return _internal_router_id();
}
inline void BgpSpec::_internal_set_router_id(uint32_t value) {
  
  router_id_ = value;
}
inline void BgpSpec::set_router_id(uint32_t value) {
  _internal_set_router_id(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BgpSpec.router_id)
}

// fixed32 cluster_id = 4;
inline void BgpSpec::clear_cluster_id() {
  cluster_id_ = 0u;
}
inline uint32_t BgpSpec::_internal_cluster_id() const {
  return cluster_id_;
}
inline uint32_t BgpSpec::cluster_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BgpSpec.cluster_id)
  return _internal_cluster_id();
}
inline void BgpSpec::_internal_set_cluster_id(uint32_t value) {
  
  cluster_id_ = value;
}
inline void BgpSpec::set_cluster_id(uint32_t value) {
  _internal_set_cluster_id(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BgpSpec.cluster_id)
}

// bool disable = 5;
inline void BgpSpec::clear_disable() {
  disable_ = false;
}
inline bool BgpSpec::_internal_disable() const {
  return disable_;
}
inline bool BgpSpec::disable() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BgpSpec.disable)
  return _internal_disable();
}
inline void BgpSpec::_internal_set_disable(bool value) {
  
  disable_ = value;
}
inline void BgpSpec::set_disable(bool value) {
  _internal_set_disable(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BgpSpec.disable)
}

// bool suppress_default_resolution = 6;
inline void BgpSpec::clear_suppress_default_resolution() {
  suppress_default_resolution_ = false;
}
inline bool BgpSpec::_internal_suppress_default_resolution() const {
  return suppress_default_resolution_;
}
inline bool BgpSpec::suppress_default_resolution() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BgpSpec.suppress_default_resolution)
  return _internal_suppress_default_resolution();
}
inline void BgpSpec::_internal_set_suppress_default_resolution(bool value) {
  
  suppress_default_resolution_ = value;
}
inline void BgpSpec::set_suppress_default_resolution(bool value) {
  _internal_set_suppress_default_resolution(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BgpSpec.suppress_default_resolution)
}

// -------------------------------------------------------------------

// BgpStatus

// .opi_api.network.cloud.v1alpha1.BGPOperState oper_state = 1;
inline void BgpStatus::clear_oper_state() {
  oper_state_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPOperState BgpStatus::_internal_oper_state() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPOperState >(oper_state_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPOperState BgpStatus::oper_state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BgpStatus.oper_state)
  return _internal_oper_state();
}
inline void BgpStatus::_internal_set_oper_state(::opi_api::network::cloud::v1alpha1::BGPOperState value) {
  
  oper_state_ = value;
}
inline void BgpStatus::set_oper_state(::opi_api::network::cloud::v1alpha1::BGPOperState value) {
  _internal_set_oper_state(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BgpStatus.oper_state)
}

// int32 adj_rib_out_routes_count = 2;
inline void BgpStatus::clear_adj_rib_out_routes_count() {
  adj_rib_out_routes_count_ = 0;
}
inline int32_t BgpStatus::_internal_adj_rib_out_routes_count() const {
  return adj_rib_out_routes_count_;
}
inline int32_t BgpStatus::adj_rib_out_routes_count() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BgpStatus.adj_rib_out_routes_count)
  return _internal_adj_rib_out_routes_count();
}
inline void BgpStatus::_internal_set_adj_rib_out_routes_count(int32_t value) {
  
  adj_rib_out_routes_count_ = value;
}
inline void BgpStatus::set_adj_rib_out_routes_count(int32_t value) {
  _internal_set_adj_rib_out_routes_count(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BgpStatus.adj_rib_out_routes_count)
}

// int32 peak_num_adj_rib_out_routes = 3;
inline void BgpStatus::clear_peak_num_adj_rib_out_routes() {
  peak_num_adj_rib_out_routes_ = 0;
}
inline int32_t BgpStatus::_internal_peak_num_adj_rib_out_routes() const {
  return peak_num_adj_rib_out_routes_;
}
inline int32_t BgpStatus::peak_num_adj_rib_out_routes() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BgpStatus.peak_num_adj_rib_out_routes)
  return _internal_peak_num_adj_rib_out_routes();
}
inline void BgpStatus::_internal_set_peak_num_adj_rib_out_routes(int32_t value) {
  
  peak_num_adj_rib_out_routes_ = value;
}
inline void BgpStatus::set_peak_num_adj_rib_out_routes(int32_t value) {
  _internal_set_peak_num_adj_rib_out_routes(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BgpStatus.peak_num_adj_rib_out_routes)
}

// int32 rem_delaytime = 4;
inline void BgpStatus::clear_rem_delaytime() {
  rem_delaytime_ = 0;
}
inline int32_t BgpStatus::_internal_rem_delaytime() const {
  return rem_delaytime_;
}
inline int32_t BgpStatus::rem_delaytime() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BgpStatus.rem_delaytime)
  return _internal_rem_delaytime();
}
inline void BgpStatus::_internal_set_rem_delaytime(int32_t value) {
  
  rem_delaytime_ = value;
}
inline void BgpStatus::set_rem_delaytime(int32_t value) {
  _internal_set_rem_delaytime(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BgpStatus.rem_delaytime)
}

// int32 table_ver = 5;
inline void BgpStatus::clear_table_ver() {
  table_ver_ = 0;
}
inline int32_t BgpStatus::_internal_table_ver() const {
  return table_ver_;
}
inline int32_t BgpStatus::table_ver() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BgpStatus.table_ver)
  return _internal_table_ver();
}
inline void BgpStatus::_internal_set_table_ver(int32_t value) {
  
  table_ver_ = value;
}
inline void BgpStatus::set_table_ver(int32_t value) {
  _internal_set_table_ver(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BgpStatus.table_ver)
}

// -------------------------------------------------------------------

// BGPPeer

// .opi_api.network.cloud.v1alpha1.BGPPeerSpec spec = 1;
inline bool BGPPeer::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool BGPPeer::has_spec() const {
  return _internal_has_spec();
}
inline void BGPPeer::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeerSpec& BGPPeer::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::BGPPeerSpec&>(
      ::opi_api::network::cloud::v1alpha1::_BGPPeerSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeerSpec& BGPPeer::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeer.spec)
  return _internal_spec();
}
inline void BGPPeer::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeer.spec)
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* BGPPeer::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* BGPPeer::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPPeer.spec)
  
  ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* BGPPeer::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPPeerSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* BGPPeer::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPPeer.spec)
  return _msg;
}
inline void BGPPeer::set_allocated_spec(::opi_api::network::cloud::v1alpha1::BGPPeerSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::BGPPeerSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeer.spec)
}

// .opi_api.network.cloud.v1alpha1.BGPPeerStatus status = 2;
inline bool BGPPeer::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BGPPeer::has_status() const {
  return _internal_has_status();
}
inline void BGPPeer::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeerStatus& BGPPeer::_internal_status() const {
  const ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::BGPPeerStatus&>(
      ::opi_api::network::cloud::v1alpha1::_BGPPeerStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeerStatus& BGPPeer::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeer.status)
  return _internal_status();
}
inline void BGPPeer::unsafe_arena_set_allocated_status(
    ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeer.status)
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* BGPPeer::release_status() {
  
  ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* BGPPeer::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPPeer.status)
  
  ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* BGPPeer::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPPeerStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* BGPPeer::mutable_status() {
  ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPPeer.status)
  return _msg;
}
inline void BGPPeer::set_allocated_status(::opi_api::network::cloud::v1alpha1::BGPPeerStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::BGPPeerStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeer.status)
}

// -------------------------------------------------------------------

// BGPPeerSpec

// .opi_api.common.v1.ObjectKey id = 1;
inline bool BGPPeerSpec::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool BGPPeerSpec::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& BGPPeerSpec::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& BGPPeerSpec::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerSpec.id)
  return _internal_id();
}
inline void BGPPeerSpec::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerSpec.id)
}
inline ::opi_api::common::v1::ObjectKey* BGPPeerSpec::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* BGPPeerSpec::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPPeerSpec.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* BGPPeerSpec::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* BGPPeerSpec::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPPeerSpec.id)
  return _msg;
}
inline void BGPPeerSpec::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerSpec.id)
}

// .opi_api.network.opinetcommon.v1alpha1.AdminState state = 2;
inline void BGPPeerSpec::clear_state() {
  state_ = 0;
}
inline ::opi_api::network::opinetcommon::v1alpha1::AdminState BGPPeerSpec::_internal_state() const {
  return static_cast< ::opi_api::network::opinetcommon::v1alpha1::AdminState >(state_);
}
inline ::opi_api::network::opinetcommon::v1alpha1::AdminState BGPPeerSpec::state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerSpec.state)
  return _internal_state();
}
inline void BGPPeerSpec::_internal_set_state(::opi_api::network::opinetcommon::v1alpha1::AdminState value) {
  
  state_ = value;
}
inline void BGPPeerSpec::set_state(::opi_api::network::opinetcommon::v1alpha1::AdminState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerSpec.state)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress local_address = 3;
inline bool BGPPeerSpec::_internal_has_local_address() const {
  return this != internal_default_instance() && local_address_ != nullptr;
}
inline bool BGPPeerSpec::has_local_address() const {
  return _internal_has_local_address();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPPeerSpec::_internal_local_address() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = local_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPPeerSpec::local_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerSpec.local_address)
  return _internal_local_address();
}
inline void BGPPeerSpec::unsafe_arena_set_allocated_local_address(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_address_);
  }
  local_address_ = local_address;
  if (local_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerSpec.local_address)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerSpec::release_local_address() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = local_address_;
  local_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerSpec::unsafe_arena_release_local_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPPeerSpec.local_address)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = local_address_;
  local_address_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerSpec::_internal_mutable_local_address() {
  
  if (local_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    local_address_ = p;
  }
  return local_address_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerSpec::mutable_local_address() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_local_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPPeerSpec.local_address)
  return _msg;
}
inline void BGPPeerSpec::set_allocated_local_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_address_);
  }
  if (local_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_address));
    if (message_arena != submessage_arena) {
      local_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_address, submessage_arena);
    }
    
  } else {
    
  }
  local_address_ = local_address;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerSpec.local_address)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 4;
inline bool BGPPeerSpec::_internal_has_peer_addr() const {
  return this != internal_default_instance() && peer_addr_ != nullptr;
}
inline bool BGPPeerSpec::has_peer_addr() const {
  return _internal_has_peer_addr();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPPeerSpec::_internal_peer_addr() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = peer_addr_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPPeerSpec::peer_addr() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerSpec.peer_addr)
  return _internal_peer_addr();
}
inline void BGPPeerSpec::unsafe_arena_set_allocated_peer_addr(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_addr_);
  }
  peer_addr_ = peer_addr;
  if (peer_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerSpec.peer_addr)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerSpec::release_peer_addr() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = peer_addr_;
  peer_addr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerSpec::unsafe_arena_release_peer_addr() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPPeerSpec.peer_addr)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = peer_addr_;
  peer_addr_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerSpec::_internal_mutable_peer_addr() {
  
  if (peer_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    peer_addr_ = p;
  }
  return peer_addr_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerSpec::mutable_peer_addr() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_peer_addr();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPPeerSpec.peer_addr)
  return _msg;
}
inline void BGPPeerSpec::set_allocated_peer_addr(::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_addr_);
  }
  if (peer_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_addr));
    if (message_arena != submessage_arena) {
      peer_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_addr, submessage_arena);
    }
    
  } else {
    
  }
  peer_addr_ = peer_addr;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerSpec.peer_addr)
}

// uint32 remote_asn = 5;
inline void BGPPeerSpec::clear_remote_asn() {
  remote_asn_ = 0u;
}
inline uint32_t BGPPeerSpec::_internal_remote_asn() const {
  return remote_asn_;
}
inline uint32_t BGPPeerSpec::remote_asn() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerSpec.remote_asn)
  return _internal_remote_asn();
}
inline void BGPPeerSpec::_internal_set_remote_asn(uint32_t value) {
  
  remote_asn_ = value;
}
inline void BGPPeerSpec::set_remote_asn(uint32_t value) {
  _internal_set_remote_asn(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerSpec.remote_asn)
}

// bool send_comm = 6;
inline void BGPPeerSpec::clear_send_comm() {
  send_comm_ = false;
}
inline bool BGPPeerSpec::_internal_send_comm() const {
  return send_comm_;
}
inline bool BGPPeerSpec::send_comm() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerSpec.send_comm)
  return _internal_send_comm();
}
inline void BGPPeerSpec::_internal_set_send_comm(bool value) {
  
  send_comm_ = value;
}
inline void BGPPeerSpec::set_send_comm(bool value) {
  _internal_set_send_comm(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerSpec.send_comm)
}

// bool send_ext_comm = 7;
inline void BGPPeerSpec::clear_send_ext_comm() {
  send_ext_comm_ = false;
}
inline bool BGPPeerSpec::_internal_send_ext_comm() const {
  return send_ext_comm_;
}
inline bool BGPPeerSpec::send_ext_comm() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerSpec.send_ext_comm)
  return _internal_send_ext_comm();
}
inline void BGPPeerSpec::_internal_set_send_ext_comm(bool value) {
  
  send_ext_comm_ = value;
}
inline void BGPPeerSpec::set_send_ext_comm(bool value) {
  _internal_set_send_ext_comm(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerSpec.send_ext_comm)
}

// .opi_api.network.cloud.v1alpha1.BGPPeerRRClient rr_client = 8;
inline void BGPPeerSpec::clear_rr_client() {
  rr_client_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerRRClient BGPPeerSpec::_internal_rr_client() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPPeerRRClient >(rr_client_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerRRClient BGPPeerSpec::rr_client() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerSpec.rr_client)
  return _internal_rr_client();
}
inline void BGPPeerSpec::_internal_set_rr_client(::opi_api::network::cloud::v1alpha1::BGPPeerRRClient value) {
  
  rr_client_ = value;
}
inline void BGPPeerSpec::set_rr_client(::opi_api::network::cloud::v1alpha1::BGPPeerRRClient value) {
  _internal_set_rr_client(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerSpec.rr_client)
}

// int32 connect_retry = 9;
inline void BGPPeerSpec::clear_connect_retry() {
  connect_retry_ = 0;
}
inline int32_t BGPPeerSpec::_internal_connect_retry() const {
  return connect_retry_;
}
inline int32_t BGPPeerSpec::connect_retry() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerSpec.connect_retry)
  return _internal_connect_retry();
}
inline void BGPPeerSpec::_internal_set_connect_retry(int32_t value) {
  
  connect_retry_ = value;
}
inline void BGPPeerSpec::set_connect_retry(int32_t value) {
  _internal_set_connect_retry(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerSpec.connect_retry)
}

// int32 holdtime = 10;
inline void BGPPeerSpec::clear_holdtime() {
  holdtime_ = 0;
}
inline int32_t BGPPeerSpec::_internal_holdtime() const {
  return holdtime_;
}
inline int32_t BGPPeerSpec::holdtime() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerSpec.holdtime)
  return _internal_holdtime();
}
inline void BGPPeerSpec::_internal_set_holdtime(int32_t value) {
  
  holdtime_ = value;
}
inline void BGPPeerSpec::set_holdtime(int32_t value) {
  _internal_set_holdtime(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerSpec.holdtime)
}

// int32 keep_alive = 11;
inline void BGPPeerSpec::clear_keep_alive() {
  keep_alive_ = 0;
}
inline int32_t BGPPeerSpec::_internal_keep_alive() const {
  return keep_alive_;
}
inline int32_t BGPPeerSpec::keep_alive() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerSpec.keep_alive)
  return _internal_keep_alive();
}
inline void BGPPeerSpec::_internal_set_keep_alive(int32_t value) {
  
  keep_alive_ = value;
}
inline void BGPPeerSpec::set_keep_alive(int32_t value) {
  _internal_set_keep_alive(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerSpec.keep_alive)
}

// bytes password = 12;
inline void BGPPeerSpec::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& BGPPeerSpec::password() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerSpec.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BGPPeerSpec::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerSpec.password)
}
inline std::string* BGPPeerSpec::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPPeerSpec.password)
  return _s;
}
inline const std::string& BGPPeerSpec::_internal_password() const {
  return password_.Get();
}
inline void BGPPeerSpec::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BGPPeerSpec::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BGPPeerSpec::release_password() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPPeerSpec.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BGPPeerSpec::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerSpec.password)
}

// int32 ttl = 13;
inline void BGPPeerSpec::clear_ttl() {
  ttl_ = 0;
}
inline int32_t BGPPeerSpec::_internal_ttl() const {
  return ttl_;
}
inline int32_t BGPPeerSpec::ttl() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerSpec.ttl)
  return _internal_ttl();
}
inline void BGPPeerSpec::_internal_set_ttl(int32_t value) {
  
  ttl_ = value;
}
inline void BGPPeerSpec::set_ttl(int32_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerSpec.ttl)
}

// int32 idle_holdtime = 14;
inline void BGPPeerSpec::clear_idle_holdtime() {
  idle_holdtime_ = 0;
}
inline int32_t BGPPeerSpec::_internal_idle_holdtime() const {
  return idle_holdtime_;
}
inline int32_t BGPPeerSpec::idle_holdtime() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerSpec.idle_holdtime)
  return _internal_idle_holdtime();
}
inline void BGPPeerSpec::_internal_set_idle_holdtime(int32_t value) {
  
  idle_holdtime_ = value;
}
inline void BGPPeerSpec::set_idle_holdtime(int32_t value) {
  _internal_set_idle_holdtime(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerSpec.idle_holdtime)
}

// int32 allow_local_as = 15;
inline void BGPPeerSpec::clear_allow_local_as() {
  allow_local_as_ = 0;
}
inline int32_t BGPPeerSpec::_internal_allow_local_as() const {
  return allow_local_as_;
}
inline int32_t BGPPeerSpec::allow_local_as() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerSpec.allow_local_as)
  return _internal_allow_local_as();
}
inline void BGPPeerSpec::_internal_set_allow_local_as(int32_t value) {
  
  allow_local_as_ = value;
}
inline void BGPPeerSpec::set_allow_local_as(int32_t value) {
  _internal_set_allow_local_as(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerSpec.allow_local_as)
}

// -------------------------------------------------------------------

// BGPPeerStatus

// .opi_api.network.cloud.v1alpha1.BGPPeerSessionState session_state = 1;
inline void BGPPeerStatus::clear_session_state() {
  session_state_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerSessionState BGPPeerStatus::_internal_session_state() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPPeerSessionState >(session_state_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerSessionState BGPPeerStatus::session_state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.session_state)
  return _internal_session_state();
}
inline void BGPPeerStatus::_internal_set_session_state(::opi_api::network::cloud::v1alpha1::BGPPeerSessionState value) {
  
  session_state_ = value;
}
inline void BGPPeerStatus::set_session_state(::opi_api::network::cloud::v1alpha1::BGPPeerSessionState value) {
  _internal_set_session_state(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.session_state)
}

// .opi_api.network.cloud.v1alpha1.BGPPeerSessionState prev_session_state = 2;
inline void BGPPeerStatus::clear_prev_session_state() {
  prev_session_state_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerSessionState BGPPeerStatus::_internal_prev_session_state() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPPeerSessionState >(prev_session_state_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerSessionState BGPPeerStatus::prev_session_state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.prev_session_state)
  return _internal_prev_session_state();
}
inline void BGPPeerStatus::_internal_set_prev_session_state(::opi_api::network::cloud::v1alpha1::BGPPeerSessionState value) {
  
  prev_session_state_ = value;
}
inline void BGPPeerStatus::set_prev_session_state(::opi_api::network::cloud::v1alpha1::BGPPeerSessionState value) {
  _internal_set_prev_session_state(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.prev_session_state)
}

// bytes last_error_rcvd = 3;
inline void BGPPeerStatus::clear_last_error_rcvd() {
  last_error_rcvd_.ClearToEmpty();
}
inline const std::string& BGPPeerStatus::last_error_rcvd() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.last_error_rcvd)
  return _internal_last_error_rcvd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BGPPeerStatus::set_last_error_rcvd(ArgT0&& arg0, ArgT... args) {
 
 last_error_rcvd_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.last_error_rcvd)
}
inline std::string* BGPPeerStatus::mutable_last_error_rcvd() {
  std::string* _s = _internal_mutable_last_error_rcvd();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPPeerStatus.last_error_rcvd)
  return _s;
}
inline const std::string& BGPPeerStatus::_internal_last_error_rcvd() const {
  return last_error_rcvd_.Get();
}
inline void BGPPeerStatus::_internal_set_last_error_rcvd(const std::string& value) {
  
  last_error_rcvd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BGPPeerStatus::_internal_mutable_last_error_rcvd() {
  
  return last_error_rcvd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BGPPeerStatus::release_last_error_rcvd() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPPeerStatus.last_error_rcvd)
  return last_error_rcvd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BGPPeerStatus::set_allocated_last_error_rcvd(std::string* last_error_rcvd) {
  if (last_error_rcvd != nullptr) {
    
  } else {
    
  }
  last_error_rcvd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_error_rcvd,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_error_rcvd_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    last_error_rcvd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerStatus.last_error_rcvd)
}

// bytes last_error_sent = 4;
inline void BGPPeerStatus::clear_last_error_sent() {
  last_error_sent_.ClearToEmpty();
}
inline const std::string& BGPPeerStatus::last_error_sent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.last_error_sent)
  return _internal_last_error_sent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BGPPeerStatus::set_last_error_sent(ArgT0&& arg0, ArgT... args) {
 
 last_error_sent_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.last_error_sent)
}
inline std::string* BGPPeerStatus::mutable_last_error_sent() {
  std::string* _s = _internal_mutable_last_error_sent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPPeerStatus.last_error_sent)
  return _s;
}
inline const std::string& BGPPeerStatus::_internal_last_error_sent() const {
  return last_error_sent_.Get();
}
inline void BGPPeerStatus::_internal_set_last_error_sent(const std::string& value) {
  
  last_error_sent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BGPPeerStatus::_internal_mutable_last_error_sent() {
  
  return last_error_sent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BGPPeerStatus::release_last_error_sent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPPeerStatus.last_error_sent)
  return last_error_sent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BGPPeerStatus::set_allocated_last_error_sent(std::string* last_error_sent) {
  if (last_error_sent != nullptr) {
    
  } else {
    
  }
  last_error_sent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_error_sent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_error_sent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    last_error_sent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerStatus.last_error_sent)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 5;
inline bool BGPPeerStatus::_internal_has_local_addr() const {
  return this != internal_default_instance() && local_addr_ != nullptr;
}
inline bool BGPPeerStatus::has_local_addr() const {
  return _internal_has_local_addr();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPPeerStatus::_internal_local_addr() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = local_addr_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPPeerStatus::local_addr() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.local_addr)
  return _internal_local_addr();
}
inline void BGPPeerStatus::unsafe_arena_set_allocated_local_addr(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_addr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_addr_);
  }
  local_addr_ = local_addr;
  if (local_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerStatus.local_addr)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerStatus::release_local_addr() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = local_addr_;
  local_addr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerStatus::unsafe_arena_release_local_addr() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPPeerStatus.local_addr)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = local_addr_;
  local_addr_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerStatus::_internal_mutable_local_addr() {
  
  if (local_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    local_addr_ = p;
  }
  return local_addr_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerStatus::mutable_local_addr() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_local_addr();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPPeerStatus.local_addr)
  return _msg;
}
inline void BGPPeerStatus::set_allocated_local_addr(::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_addr_);
  }
  if (local_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_addr));
    if (message_arena != submessage_arena) {
      local_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_addr, submessage_arena);
    }
    
  } else {
    
  }
  local_addr_ = local_addr;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerStatus.local_addr)
}

// int32 holdtime = 6;
inline void BGPPeerStatus::clear_holdtime() {
  holdtime_ = 0;
}
inline int32_t BGPPeerStatus::_internal_holdtime() const {
  return holdtime_;
}
inline int32_t BGPPeerStatus::holdtime() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.holdtime)
  return _internal_holdtime();
}
inline void BGPPeerStatus::_internal_set_holdtime(int32_t value) {
  
  holdtime_ = value;
}
inline void BGPPeerStatus::set_holdtime(int32_t value) {
  _internal_set_holdtime(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.holdtime)
}

// int32 keepalive = 7;
inline void BGPPeerStatus::clear_keepalive() {
  keepalive_ = 0;
}
inline int32_t BGPPeerStatus::_internal_keepalive() const {
  return keepalive_;
}
inline int32_t BGPPeerStatus::keepalive() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.keepalive)
  return _internal_keepalive();
}
inline void BGPPeerStatus::_internal_set_keepalive(int32_t value) {
  
  keepalive_ = value;
}
inline void BGPPeerStatus::set_keepalive(int32_t value) {
  _internal_set_keepalive(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.keepalive)
}

// int32 caps_sent = 8;
inline void BGPPeerStatus::clear_caps_sent() {
  caps_sent_ = 0;
}
inline int32_t BGPPeerStatus::_internal_caps_sent() const {
  return caps_sent_;
}
inline int32_t BGPPeerStatus::caps_sent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.caps_sent)
  return _internal_caps_sent();
}
inline void BGPPeerStatus::_internal_set_caps_sent(int32_t value) {
  
  caps_sent_ = value;
}
inline void BGPPeerStatus::set_caps_sent(int32_t value) {
  _internal_set_caps_sent(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.caps_sent)
}

// int32 caps_rcvd = 9;
inline void BGPPeerStatus::clear_caps_rcvd() {
  caps_rcvd_ = 0;
}
inline int32_t BGPPeerStatus::_internal_caps_rcvd() const {
  return caps_rcvd_;
}
inline int32_t BGPPeerStatus::caps_rcvd() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.caps_rcvd)
  return _internal_caps_rcvd();
}
inline void BGPPeerStatus::_internal_set_caps_rcvd(int32_t value) {
  
  caps_rcvd_ = value;
}
inline void BGPPeerStatus::set_caps_rcvd(int32_t value) {
  _internal_set_caps_rcvd(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.caps_rcvd)
}

// int32 caps_neg = 10;
inline void BGPPeerStatus::clear_caps_neg() {
  caps_neg_ = 0;
}
inline int32_t BGPPeerStatus::_internal_caps_neg() const {
  return caps_neg_;
}
inline int32_t BGPPeerStatus::caps_neg() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.caps_neg)
  return _internal_caps_neg();
}
inline void BGPPeerStatus::_internal_set_caps_neg(int32_t value) {
  
  caps_neg_ = value;
}
inline void BGPPeerStatus::set_caps_neg(int32_t value) {
  _internal_set_caps_neg(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.caps_neg)
}

// .opi_api.network.cloud.v1alpha1.BGPAddrType sel_local_addr_type = 11;
inline void BGPPeerStatus::clear_sel_local_addr_type() {
  sel_local_addr_type_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPAddrType BGPPeerStatus::_internal_sel_local_addr_type() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPAddrType >(sel_local_addr_type_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPAddrType BGPPeerStatus::sel_local_addr_type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.sel_local_addr_type)
  return _internal_sel_local_addr_type();
}
inline void BGPPeerStatus::_internal_set_sel_local_addr_type(::opi_api::network::cloud::v1alpha1::BGPAddrType value) {
  
  sel_local_addr_type_ = value;
}
inline void BGPPeerStatus::set_sel_local_addr_type(::opi_api::network::cloud::v1alpha1::BGPAddrType value) {
  _internal_set_sel_local_addr_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.sel_local_addr_type)
}

// int32 incoming_notifications = 12;
inline void BGPPeerStatus::clear_incoming_notifications() {
  incoming_notifications_ = 0;
}
inline int32_t BGPPeerStatus::_internal_incoming_notifications() const {
  return incoming_notifications_;
}
inline int32_t BGPPeerStatus::incoming_notifications() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_notifications)
  return _internal_incoming_notifications();
}
inline void BGPPeerStatus::_internal_set_incoming_notifications(int32_t value) {
  
  incoming_notifications_ = value;
}
inline void BGPPeerStatus::set_incoming_notifications(int32_t value) {
  _internal_set_incoming_notifications(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_notifications)
}

// int32 outbound_notifications = 13;
inline void BGPPeerStatus::clear_outbound_notifications() {
  outbound_notifications_ = 0;
}
inline int32_t BGPPeerStatus::_internal_outbound_notifications() const {
  return outbound_notifications_;
}
inline int32_t BGPPeerStatus::outbound_notifications() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outbound_notifications)
  return _internal_outbound_notifications();
}
inline void BGPPeerStatus::_internal_set_outbound_notifications(int32_t value) {
  
  outbound_notifications_ = value;
}
inline void BGPPeerStatus::set_outbound_notifications(int32_t value) {
  _internal_set_outbound_notifications(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outbound_notifications)
}

// int32 incoming_updates = 14;
inline void BGPPeerStatus::clear_incoming_updates() {
  incoming_updates_ = 0;
}
inline int32_t BGPPeerStatus::_internal_incoming_updates() const {
  return incoming_updates_;
}
inline int32_t BGPPeerStatus::incoming_updates() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_updates)
  return _internal_incoming_updates();
}
inline void BGPPeerStatus::_internal_set_incoming_updates(int32_t value) {
  
  incoming_updates_ = value;
}
inline void BGPPeerStatus::set_incoming_updates(int32_t value) {
  _internal_set_incoming_updates(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_updates)
}

// int32 outgoing_updates = 15;
inline void BGPPeerStatus::clear_outgoing_updates() {
  outgoing_updates_ = 0;
}
inline int32_t BGPPeerStatus::_internal_outgoing_updates() const {
  return outgoing_updates_;
}
inline int32_t BGPPeerStatus::outgoing_updates() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_updates)
  return _internal_outgoing_updates();
}
inline void BGPPeerStatus::_internal_set_outgoing_updates(int32_t value) {
  
  outgoing_updates_ = value;
}
inline void BGPPeerStatus::set_outgoing_updates(int32_t value) {
  _internal_set_outgoing_updates(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_updates)
}

// int32 incoming_keepalives = 16;
inline void BGPPeerStatus::clear_incoming_keepalives() {
  incoming_keepalives_ = 0;
}
inline int32_t BGPPeerStatus::_internal_incoming_keepalives() const {
  return incoming_keepalives_;
}
inline int32_t BGPPeerStatus::incoming_keepalives() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_keepalives)
  return _internal_incoming_keepalives();
}
inline void BGPPeerStatus::_internal_set_incoming_keepalives(int32_t value) {
  
  incoming_keepalives_ = value;
}
inline void BGPPeerStatus::set_incoming_keepalives(int32_t value) {
  _internal_set_incoming_keepalives(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_keepalives)
}

// int32 outgoing_keepalives = 17;
inline void BGPPeerStatus::clear_outgoing_keepalives() {
  outgoing_keepalives_ = 0;
}
inline int32_t BGPPeerStatus::_internal_outgoing_keepalives() const {
  return outgoing_keepalives_;
}
inline int32_t BGPPeerStatus::outgoing_keepalives() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_keepalives)
  return _internal_outgoing_keepalives();
}
inline void BGPPeerStatus::_internal_set_outgoing_keepalives(int32_t value) {
  
  outgoing_keepalives_ = value;
}
inline void BGPPeerStatus::set_outgoing_keepalives(int32_t value) {
  _internal_set_outgoing_keepalives(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_keepalives)
}

// int32 incoming_refreshes = 18;
inline void BGPPeerStatus::clear_incoming_refreshes() {
  incoming_refreshes_ = 0;
}
inline int32_t BGPPeerStatus::_internal_incoming_refreshes() const {
  return incoming_refreshes_;
}
inline int32_t BGPPeerStatus::incoming_refreshes() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_refreshes)
  return _internal_incoming_refreshes();
}
inline void BGPPeerStatus::_internal_set_incoming_refreshes(int32_t value) {
  
  incoming_refreshes_ = value;
}
inline void BGPPeerStatus::set_incoming_refreshes(int32_t value) {
  _internal_set_incoming_refreshes(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_refreshes)
}

// int32 outgoing_refreshes = 19;
inline void BGPPeerStatus::clear_outgoing_refreshes() {
  outgoing_refreshes_ = 0;
}
inline int32_t BGPPeerStatus::_internal_outgoing_refreshes() const {
  return outgoing_refreshes_;
}
inline int32_t BGPPeerStatus::outgoing_refreshes() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_refreshes)
  return _internal_outgoing_refreshes();
}
inline void BGPPeerStatus::_internal_set_outgoing_refreshes(int32_t value) {
  
  outgoing_refreshes_ = value;
}
inline void BGPPeerStatus::set_outgoing_refreshes(int32_t value) {
  _internal_set_outgoing_refreshes(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_refreshes)
}

// int32 incoming_total_messages = 20;
inline void BGPPeerStatus::clear_incoming_total_messages() {
  incoming_total_messages_ = 0;
}
inline int32_t BGPPeerStatus::_internal_incoming_total_messages() const {
  return incoming_total_messages_;
}
inline int32_t BGPPeerStatus::incoming_total_messages() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_total_messages)
  return _internal_incoming_total_messages();
}
inline void BGPPeerStatus::_internal_set_incoming_total_messages(int32_t value) {
  
  incoming_total_messages_ = value;
}
inline void BGPPeerStatus::set_incoming_total_messages(int32_t value) {
  _internal_set_incoming_total_messages(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_total_messages)
}

// int32 outgoing_total_messages = 21;
inline void BGPPeerStatus::clear_outgoing_total_messages() {
  outgoing_total_messages_ = 0;
}
inline int32_t BGPPeerStatus::_internal_outgoing_total_messages() const {
  return outgoing_total_messages_;
}
inline int32_t BGPPeerStatus::outgoing_total_messages() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_total_messages)
  return _internal_outgoing_total_messages();
}
inline void BGPPeerStatus::_internal_set_outgoing_total_messages(int32_t value) {
  
  outgoing_total_messages_ = value;
}
inline void BGPPeerStatus::set_outgoing_total_messages(int32_t value) {
  _internal_set_outgoing_total_messages(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_total_messages)
}

// int32 fsm_est_transitions = 22;
inline void BGPPeerStatus::clear_fsm_est_transitions() {
  fsm_est_transitions_ = 0;
}
inline int32_t BGPPeerStatus::_internal_fsm_est_transitions() const {
  return fsm_est_transitions_;
}
inline int32_t BGPPeerStatus::fsm_est_transitions() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.fsm_est_transitions)
  return _internal_fsm_est_transitions();
}
inline void BGPPeerStatus::_internal_set_fsm_est_transitions(int32_t value) {
  
  fsm_est_transitions_ = value;
}
inline void BGPPeerStatus::set_fsm_est_transitions(int32_t value) {
  _internal_set_fsm_est_transitions(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.fsm_est_transitions)
}

// int32 connect_retry_count = 23;
inline void BGPPeerStatus::clear_connect_retry_count() {
  connect_retry_count_ = 0;
}
inline int32_t BGPPeerStatus::_internal_connect_retry_count() const {
  return connect_retry_count_;
}
inline int32_t BGPPeerStatus::connect_retry_count() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.connect_retry_count)
  return _internal_connect_retry_count();
}
inline void BGPPeerStatus::_internal_set_connect_retry_count(int32_t value) {
  
  connect_retry_count_ = value;
}
inline void BGPPeerStatus::set_connect_retry_count(int32_t value) {
  _internal_set_connect_retry_count(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.connect_retry_count)
}

// int32 peergr = 24;
inline void BGPPeerStatus::clear_peergr() {
  peergr_ = 0;
}
inline int32_t BGPPeerStatus::_internal_peergr() const {
  return peergr_;
}
inline int32_t BGPPeerStatus::peergr() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.peergr)
  return _internal_peergr();
}
inline void BGPPeerStatus::_internal_set_peergr(int32_t value) {
  
  peergr_ = value;
}
inline void BGPPeerStatus::set_peergr(int32_t value) {
  _internal_set_peergr(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.peergr)
}

// int32 stale_pathtime = 25;
inline void BGPPeerStatus::clear_stale_pathtime() {
  stale_pathtime_ = 0;
}
inline int32_t BGPPeerStatus::_internal_stale_pathtime() const {
  return stale_pathtime_;
}
inline int32_t BGPPeerStatus::stale_pathtime() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.stale_pathtime)
  return _internal_stale_pathtime();
}
inline void BGPPeerStatus::_internal_set_stale_pathtime(int32_t value) {
  
  stale_pathtime_ = value;
}
inline void BGPPeerStatus::set_stale_pathtime(int32_t value) {
  _internal_set_stale_pathtime(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.stale_pathtime)
}

// int32 orf_entry_count = 26;
inline void BGPPeerStatus::clear_orf_entry_count() {
  orf_entry_count_ = 0;
}
inline int32_t BGPPeerStatus::_internal_orf_entry_count() const {
  return orf_entry_count_;
}
inline int32_t BGPPeerStatus::orf_entry_count() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.orf_entry_count)
  return _internal_orf_entry_count();
}
inline void BGPPeerStatus::_internal_set_orf_entry_count(int32_t value) {
  
  orf_entry_count_ = value;
}
inline void BGPPeerStatus::set_orf_entry_count(int32_t value) {
  _internal_set_orf_entry_count(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.orf_entry_count)
}

// int32 rcvd_msg_elpstime = 27;
inline void BGPPeerStatus::clear_rcvd_msg_elpstime() {
  rcvd_msg_elpstime_ = 0;
}
inline int32_t BGPPeerStatus::_internal_rcvd_msg_elpstime() const {
  return rcvd_msg_elpstime_;
}
inline int32_t BGPPeerStatus::rcvd_msg_elpstime() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.rcvd_msg_elpstime)
  return _internal_rcvd_msg_elpstime();
}
inline void BGPPeerStatus::_internal_set_rcvd_msg_elpstime(int32_t value) {
  
  rcvd_msg_elpstime_ = value;
}
inline void BGPPeerStatus::set_rcvd_msg_elpstime(int32_t value) {
  _internal_set_rcvd_msg_elpstime(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.rcvd_msg_elpstime)
}

// int32 route_refr_sent = 28;
inline void BGPPeerStatus::clear_route_refr_sent() {
  route_refr_sent_ = 0;
}
inline int32_t BGPPeerStatus::_internal_route_refr_sent() const {
  return route_refr_sent_;
}
inline int32_t BGPPeerStatus::route_refr_sent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.route_refr_sent)
  return _internal_route_refr_sent();
}
inline void BGPPeerStatus::_internal_set_route_refr_sent(int32_t value) {
  
  route_refr_sent_ = value;
}
inline void BGPPeerStatus::set_route_refr_sent(int32_t value) {
  _internal_set_route_refr_sent(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.route_refr_sent)
}

// int32 route_refr_rcvd = 29;
inline void BGPPeerStatus::clear_route_refr_rcvd() {
  route_refr_rcvd_ = 0;
}
inline int32_t BGPPeerStatus::_internal_route_refr_rcvd() const {
  return route_refr_rcvd_;
}
inline int32_t BGPPeerStatus::route_refr_rcvd() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.route_refr_rcvd)
  return _internal_route_refr_rcvd();
}
inline void BGPPeerStatus::_internal_set_route_refr_rcvd(int32_t value) {
  
  route_refr_rcvd_ = value;
}
inline void BGPPeerStatus::set_route_refr_rcvd(int32_t value) {
  _internal_set_route_refr_rcvd(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.route_refr_rcvd)
}

// int32 incoming_prfxes = 30;
inline void BGPPeerStatus::clear_incoming_prfxes() {
  incoming_prfxes_ = 0;
}
inline int32_t BGPPeerStatus::_internal_incoming_prfxes() const {
  return incoming_prfxes_;
}
inline int32_t BGPPeerStatus::incoming_prfxes() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_prfxes)
  return _internal_incoming_prfxes();
}
inline void BGPPeerStatus::_internal_set_incoming_prfxes(int32_t value) {
  
  incoming_prfxes_ = value;
}
inline void BGPPeerStatus::set_incoming_prfxes(int32_t value) {
  _internal_set_incoming_prfxes(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_prfxes)
}

// int32 outgoing_prfxes = 31;
inline void BGPPeerStatus::clear_outgoing_prfxes() {
  outgoing_prfxes_ = 0;
}
inline int32_t BGPPeerStatus::_internal_outgoing_prfxes() const {
  return outgoing_prfxes_;
}
inline int32_t BGPPeerStatus::outgoing_prfxes() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_prfxes)
  return _internal_outgoing_prfxes();
}
inline void BGPPeerStatus::_internal_set_outgoing_prfxes(int32_t value) {
  
  outgoing_prfxes_ = value;
}
inline void BGPPeerStatus::set_outgoing_prfxes(int32_t value) {
  _internal_set_outgoing_prfxes(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_prfxes)
}

// int32 outgoing_prfxes_advertised = 32;
inline void BGPPeerStatus::clear_outgoing_prfxes_advertised() {
  outgoing_prfxes_advertised_ = 0;
}
inline int32_t BGPPeerStatus::_internal_outgoing_prfxes_advertised() const {
  return outgoing_prfxes_advertised_;
}
inline int32_t BGPPeerStatus::outgoing_prfxes_advertised() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_prfxes_advertised)
  return _internal_outgoing_prfxes_advertised();
}
inline void BGPPeerStatus::_internal_set_outgoing_prfxes_advertised(int32_t value) {
  
  outgoing_prfxes_advertised_ = value;
}
inline void BGPPeerStatus::set_outgoing_prfxes_advertised(int32_t value) {
  _internal_set_outgoing_prfxes_advertised(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_prfxes_advertised)
}

// int32 connect_retry_int = 33;
inline void BGPPeerStatus::clear_connect_retry_int() {
  connect_retry_int_ = 0;
}
inline int32_t BGPPeerStatus::_internal_connect_retry_int() const {
  return connect_retry_int_;
}
inline int32_t BGPPeerStatus::connect_retry_int() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.connect_retry_int)
  return _internal_connect_retry_int();
}
inline void BGPPeerStatus::_internal_set_connect_retry_int(int32_t value) {
  
  connect_retry_int_ = value;
}
inline void BGPPeerStatus::set_connect_retry_int(int32_t value) {
  _internal_set_connect_retry_int(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.connect_retry_int)
}

// int32 outgoing_update_elpstime = 34;
inline void BGPPeerStatus::clear_outgoing_update_elpstime() {
  outgoing_update_elpstime_ = 0;
}
inline int32_t BGPPeerStatus::_internal_outgoing_update_elpstime() const {
  return outgoing_update_elpstime_;
}
inline int32_t BGPPeerStatus::outgoing_update_elpstime() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_update_elpstime)
  return _internal_outgoing_update_elpstime();
}
inline void BGPPeerStatus::_internal_set_outgoing_update_elpstime(int32_t value) {
  
  outgoing_update_elpstime_ = value;
}
inline void BGPPeerStatus::set_outgoing_update_elpstime(int32_t value) {
  _internal_set_outgoing_update_elpstime(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_update_elpstime)
}

// int32 outgoing_prfxes_denied = 35;
inline void BGPPeerStatus::clear_outgoing_prfxes_denied() {
  outgoing_prfxes_denied_ = 0;
}
inline int32_t BGPPeerStatus::_internal_outgoing_prfxes_denied() const {
  return outgoing_prfxes_denied_;
}
inline int32_t BGPPeerStatus::outgoing_prfxes_denied() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_prfxes_denied)
  return _internal_outgoing_prfxes_denied();
}
inline void BGPPeerStatus::_internal_set_outgoing_prfxes_denied(int32_t value) {
  
  outgoing_prfxes_denied_ = value;
}
inline void BGPPeerStatus::set_outgoing_prfxes_denied(int32_t value) {
  _internal_set_outgoing_prfxes_denied(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_prfxes_denied)
}

// int32 outgoing_prfxes_imp_wdr = 36;
inline void BGPPeerStatus::clear_outgoing_prfxes_imp_wdr() {
  outgoing_prfxes_imp_wdr_ = 0;
}
inline int32_t BGPPeerStatus::_internal_outgoing_prfxes_imp_wdr() const {
  return outgoing_prfxes_imp_wdr_;
}
inline int32_t BGPPeerStatus::outgoing_prfxes_imp_wdr() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_prfxes_imp_wdr)
  return _internal_outgoing_prfxes_imp_wdr();
}
inline void BGPPeerStatus::_internal_set_outgoing_prfxes_imp_wdr(int32_t value) {
  
  outgoing_prfxes_imp_wdr_ = value;
}
inline void BGPPeerStatus::set_outgoing_prfxes_imp_wdr(int32_t value) {
  _internal_set_outgoing_prfxes_imp_wdr(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_prfxes_imp_wdr)
}

// int32 outgoing_prfxes_exp_wdr = 37;
inline void BGPPeerStatus::clear_outgoing_prfxes_exp_wdr() {
  outgoing_prfxes_exp_wdr_ = 0;
}
inline int32_t BGPPeerStatus::_internal_outgoing_prfxes_exp_wdr() const {
  return outgoing_prfxes_exp_wdr_;
}
inline int32_t BGPPeerStatus::outgoing_prfxes_exp_wdr() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_prfxes_exp_wdr)
  return _internal_outgoing_prfxes_exp_wdr();
}
inline void BGPPeerStatus::_internal_set_outgoing_prfxes_exp_wdr(int32_t value) {
  
  outgoing_prfxes_exp_wdr_ = value;
}
inline void BGPPeerStatus::set_outgoing_prfxes_exp_wdr(int32_t value) {
  _internal_set_outgoing_prfxes_exp_wdr(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_prfxes_exp_wdr)
}

// int32 incoming_prfxes_imp_wdr = 38;
inline void BGPPeerStatus::clear_incoming_prfxes_imp_wdr() {
  incoming_prfxes_imp_wdr_ = 0;
}
inline int32_t BGPPeerStatus::_internal_incoming_prfxes_imp_wdr() const {
  return incoming_prfxes_imp_wdr_;
}
inline int32_t BGPPeerStatus::incoming_prfxes_imp_wdr() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_prfxes_imp_wdr)
  return _internal_incoming_prfxes_imp_wdr();
}
inline void BGPPeerStatus::_internal_set_incoming_prfxes_imp_wdr(int32_t value) {
  
  incoming_prfxes_imp_wdr_ = value;
}
inline void BGPPeerStatus::set_incoming_prfxes_imp_wdr(int32_t value) {
  _internal_set_incoming_prfxes_imp_wdr(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_prfxes_imp_wdr)
}

// int32 incoming_prfxes_exp_wdr = 39;
inline void BGPPeerStatus::clear_incoming_prfxes_exp_wdr() {
  incoming_prfxes_exp_wdr_ = 0;
}
inline int32_t BGPPeerStatus::_internal_incoming_prfxes_exp_wdr() const {
  return incoming_prfxes_exp_wdr_;
}
inline int32_t BGPPeerStatus::incoming_prfxes_exp_wdr() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_prfxes_exp_wdr)
  return _internal_incoming_prfxes_exp_wdr();
}
inline void BGPPeerStatus::_internal_set_incoming_prfxes_exp_wdr(int32_t value) {
  
  incoming_prfxes_exp_wdr_ = value;
}
inline void BGPPeerStatus::set_incoming_prfxes_exp_wdr(int32_t value) {
  _internal_set_incoming_prfxes_exp_wdr(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_prfxes_exp_wdr)
}

// int32 received_holdtime = 40;
inline void BGPPeerStatus::clear_received_holdtime() {
  received_holdtime_ = 0;
}
inline int32_t BGPPeerStatus::_internal_received_holdtime() const {
  return received_holdtime_;
}
inline int32_t BGPPeerStatus::received_holdtime() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.received_holdtime)
  return _internal_received_holdtime();
}
inline void BGPPeerStatus::_internal_set_received_holdtime(int32_t value) {
  
  received_holdtime_ = value;
}
inline void BGPPeerStatus::set_received_holdtime(int32_t value) {
  _internal_set_received_holdtime(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.received_holdtime)
}

// int32 fsm_establishedtime = 41;
inline void BGPPeerStatus::clear_fsm_establishedtime() {
  fsm_establishedtime_ = 0;
}
inline int32_t BGPPeerStatus::_internal_fsm_establishedtime() const {
  return fsm_establishedtime_;
}
inline int32_t BGPPeerStatus::fsm_establishedtime() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.fsm_establishedtime)
  return _internal_fsm_establishedtime();
}
inline void BGPPeerStatus::_internal_set_fsm_establishedtime(int32_t value) {
  
  fsm_establishedtime_ = value;
}
inline void BGPPeerStatus::set_fsm_establishedtime(int32_t value) {
  _internal_set_fsm_establishedtime(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.fsm_establishedtime)
}

// int32 incoming_updates_elpstime = 42;
inline void BGPPeerStatus::clear_incoming_updates_elpstime() {
  incoming_updates_elpstime_ = 0;
}
inline int32_t BGPPeerStatus::_internal_incoming_updates_elpstime() const {
  return incoming_updates_elpstime_;
}
inline int32_t BGPPeerStatus::incoming_updates_elpstime() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_updates_elpstime)
  return _internal_incoming_updates_elpstime();
}
inline void BGPPeerStatus::_internal_set_incoming_updates_elpstime(int32_t value) {
  
  incoming_updates_elpstime_ = value;
}
inline void BGPPeerStatus::set_incoming_updates_elpstime(int32_t value) {
  _internal_set_incoming_updates_elpstime(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_updates_elpstime)
}

// int32 incoming_opens = 43;
inline void BGPPeerStatus::clear_incoming_opens() {
  incoming_opens_ = 0;
}
inline int32_t BGPPeerStatus::_internal_incoming_opens() const {
  return incoming_opens_;
}
inline int32_t BGPPeerStatus::incoming_opens() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_opens)
  return _internal_incoming_opens();
}
inline void BGPPeerStatus::_internal_set_incoming_opens(int32_t value) {
  
  incoming_opens_ = value;
}
inline void BGPPeerStatus::set_incoming_opens(int32_t value) {
  _internal_set_incoming_opens(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.incoming_opens)
}

// int32 outgoing_opens = 44;
inline void BGPPeerStatus::clear_outgoing_opens() {
  outgoing_opens_ = 0;
}
inline int32_t BGPPeerStatus::_internal_outgoing_opens() const {
  return outgoing_opens_;
}
inline int32_t BGPPeerStatus::outgoing_opens() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_opens)
  return _internal_outgoing_opens();
}
inline void BGPPeerStatus::_internal_set_outgoing_opens(int32_t value) {
  
  outgoing_opens_ = value;
}
inline void BGPPeerStatus::set_outgoing_opens(int32_t value) {
  _internal_set_outgoing_opens(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.outgoing_opens)
}

// int32 peer_index = 45;
inline void BGPPeerStatus::clear_peer_index() {
  peer_index_ = 0;
}
inline int32_t BGPPeerStatus::_internal_peer_index() const {
  return peer_index_;
}
inline int32_t BGPPeerStatus::peer_index() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.peer_index)
  return _internal_peer_index();
}
inline void BGPPeerStatus::_internal_set_peer_index(int32_t value) {
  
  peer_index_ = value;
}
inline void BGPPeerStatus::set_peer_index(int32_t value) {
  _internal_set_peer_index(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.peer_index)
}

// int32 ttl = 46;
inline void BGPPeerStatus::clear_ttl() {
  ttl_ = 0;
}
inline int32_t BGPPeerStatus::_internal_ttl() const {
  return ttl_;
}
inline int32_t BGPPeerStatus::ttl() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.ttl)
  return _internal_ttl();
}
inline void BGPPeerStatus::_internal_set_ttl(int32_t value) {
  
  ttl_ = value;
}
inline void BGPPeerStatus::set_ttl(int32_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.ttl)
}

// .opi_api.network.cloud.v1alpha1.BGPOperState oper_state = 47;
inline void BGPPeerStatus::clear_oper_state() {
  oper_state_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPOperState BGPPeerStatus::_internal_oper_state() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPOperState >(oper_state_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPOperState BGPPeerStatus::oper_state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerStatus.oper_state)
  return _internal_oper_state();
}
inline void BGPPeerStatus::_internal_set_oper_state(::opi_api::network::cloud::v1alpha1::BGPOperState value) {
  
  oper_state_ = value;
}
inline void BGPPeerStatus::set_oper_state(::opi_api::network::cloud::v1alpha1::BGPOperState value) {
  _internal_set_oper_state(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerStatus.oper_state)
}

// -------------------------------------------------------------------

// BGPPeerAf

// .opi_api.network.cloud.v1alpha1.BGPPeerAfSpec spec = 1;
inline bool BGPPeerAf::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool BGPPeerAf::has_spec() const {
  return _internal_has_spec();
}
inline void BGPPeerAf::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec& BGPPeerAf::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec&>(
      ::opi_api::network::cloud::v1alpha1::_BGPPeerAfSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec& BGPPeerAf::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAf.spec)
  return _internal_spec();
}
inline void BGPPeerAf::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerAf.spec)
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* BGPPeerAf::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* BGPPeerAf::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPPeerAf.spec)
  
  ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* BGPPeerAf::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* BGPPeerAf::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPPeerAf.spec)
  return _msg;
}
inline void BGPPeerAf::set_allocated_spec(::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerAf.spec)
}

// .opi_api.network.cloud.v1alpha1.BGPPeerAfStatus state = 2;
inline bool BGPPeerAf::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool BGPPeerAf::has_state() const {
  return _internal_has_state();
}
inline void BGPPeerAf::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus& BGPPeerAf::_internal_state() const {
  const ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus&>(
      ::opi_api::network::cloud::v1alpha1::_BGPPeerAfStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus& BGPPeerAf::state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAf.state)
  return _internal_state();
}
inline void BGPPeerAf::unsafe_arena_set_allocated_state(
    ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerAf.state)
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* BGPPeerAf::release_state() {
  
  ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* BGPPeerAf::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPPeerAf.state)
  
  ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* BGPPeerAf::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* BGPPeerAf::mutable_state() {
  ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPPeerAf.state)
  return _msg;
}
inline void BGPPeerAf::set_allocated_state(::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus>::GetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerAf.state)
}

// -------------------------------------------------------------------

// BGPPeerAfSpec

// .opi_api.common.v1.ObjectKey id = 1;
inline bool BGPPeerAfSpec::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool BGPPeerAfSpec::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& BGPPeerAfSpec::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& BGPPeerAfSpec::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.id)
  return _internal_id();
}
inline void BGPPeerAfSpec::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.id)
}
inline ::opi_api::common::v1::ObjectKey* BGPPeerAfSpec::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* BGPPeerAfSpec::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* BGPPeerAfSpec::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* BGPPeerAfSpec::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.id)
  return _msg;
}
inline void BGPPeerAfSpec::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.id)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 2;
inline bool BGPPeerAfSpec::_internal_has_local_addr() const {
  return this != internal_default_instance() && local_addr_ != nullptr;
}
inline bool BGPPeerAfSpec::has_local_addr() const {
  return _internal_has_local_addr();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPPeerAfSpec::_internal_local_addr() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = local_addr_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPPeerAfSpec::local_addr() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.local_addr)
  return _internal_local_addr();
}
inline void BGPPeerAfSpec::unsafe_arena_set_allocated_local_addr(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_addr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_addr_);
  }
  local_addr_ = local_addr;
  if (local_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.local_addr)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerAfSpec::release_local_addr() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = local_addr_;
  local_addr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerAfSpec::unsafe_arena_release_local_addr() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.local_addr)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = local_addr_;
  local_addr_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerAfSpec::_internal_mutable_local_addr() {
  
  if (local_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    local_addr_ = p;
  }
  return local_addr_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerAfSpec::mutable_local_addr() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_local_addr();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.local_addr)
  return _msg;
}
inline void BGPPeerAfSpec::set_allocated_local_addr(::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_addr_);
  }
  if (local_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_addr));
    if (message_arena != submessage_arena) {
      local_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_addr, submessage_arena);
    }
    
  } else {
    
  }
  local_addr_ = local_addr;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.local_addr)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 3;
inline bool BGPPeerAfSpec::_internal_has_peer_addr() const {
  return this != internal_default_instance() && peer_addr_ != nullptr;
}
inline bool BGPPeerAfSpec::has_peer_addr() const {
  return _internal_has_peer_addr();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPPeerAfSpec::_internal_peer_addr() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = peer_addr_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPPeerAfSpec::peer_addr() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.peer_addr)
  return _internal_peer_addr();
}
inline void BGPPeerAfSpec::unsafe_arena_set_allocated_peer_addr(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_addr_);
  }
  peer_addr_ = peer_addr;
  if (peer_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.peer_addr)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerAfSpec::release_peer_addr() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = peer_addr_;
  peer_addr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerAfSpec::unsafe_arena_release_peer_addr() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.peer_addr)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = peer_addr_;
  peer_addr_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerAfSpec::_internal_mutable_peer_addr() {
  
  if (peer_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    peer_addr_ = p;
  }
  return peer_addr_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPPeerAfSpec::mutable_peer_addr() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_peer_addr();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.peer_addr)
  return _msg;
}
inline void BGPPeerAfSpec::set_allocated_peer_addr(::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_addr_);
  }
  if (peer_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_addr));
    if (message_arena != submessage_arena) {
      peer_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_addr, submessage_arena);
    }
    
  } else {
    
  }
  peer_addr_ = peer_addr;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.peer_addr)
}

// .opi_api.network.cloud.v1alpha1.BGPAfi afi = 4;
inline void BGPPeerAfSpec::clear_afi() {
  afi_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPAfi BGPPeerAfSpec::_internal_afi() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPAfi >(afi_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPAfi BGPPeerAfSpec::afi() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.afi)
  return _internal_afi();
}
inline void BGPPeerAfSpec::_internal_set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value) {
  
  afi_ = value;
}
inline void BGPPeerAfSpec::set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value) {
  _internal_set_afi(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.afi)
}

// .opi_api.network.cloud.v1alpha1.BGPSafi safi = 5;
inline void BGPPeerAfSpec::clear_safi() {
  safi_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPSafi BGPPeerAfSpec::_internal_safi() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPSafi >(safi_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPSafi BGPPeerAfSpec::safi() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.safi)
  return _internal_safi();
}
inline void BGPPeerAfSpec::_internal_set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value) {
  
  safi_ = value;
}
inline void BGPPeerAfSpec::set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value) {
  _internal_set_safi(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.safi)
}

// bool nexthop_self = 6;
inline void BGPPeerAfSpec::clear_nexthop_self() {
  nexthop_self_ = false;
}
inline bool BGPPeerAfSpec::_internal_nexthop_self() const {
  return nexthop_self_;
}
inline bool BGPPeerAfSpec::nexthop_self() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.nexthop_self)
  return _internal_nexthop_self();
}
inline void BGPPeerAfSpec::_internal_set_nexthop_self(bool value) {
  
  nexthop_self_ = value;
}
inline void BGPPeerAfSpec::set_nexthop_self(bool value) {
  _internal_set_nexthop_self(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.nexthop_self)
}

// bool default_orig = 7;
inline void BGPPeerAfSpec::clear_default_orig() {
  default_orig_ = false;
}
inline bool BGPPeerAfSpec::_internal_default_orig() const {
  return default_orig_;
}
inline bool BGPPeerAfSpec::default_orig() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.default_orig)
  return _internal_default_orig();
}
inline void BGPPeerAfSpec::_internal_set_default_orig(bool value) {
  
  default_orig_ = value;
}
inline void BGPPeerAfSpec::set_default_orig(bool value) {
  _internal_set_default_orig(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.default_orig)
}

// int32 local_port = 8;
inline void BGPPeerAfSpec::clear_local_port() {
  local_port_ = 0;
}
inline int32_t BGPPeerAfSpec::_internal_local_port() const {
  return local_port_;
}
inline int32_t BGPPeerAfSpec::local_port() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.local_port)
  return _internal_local_port();
}
inline void BGPPeerAfSpec::_internal_set_local_port(int32_t value) {
  
  local_port_ = value;
}
inline void BGPPeerAfSpec::set_local_port(int32_t value) {
  _internal_set_local_port(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.local_port)
}

// int32 remote_port = 9;
inline void BGPPeerAfSpec::clear_remote_port() {
  remote_port_ = 0;
}
inline int32_t BGPPeerAfSpec::_internal_remote_port() const {
  return remote_port_;
}
inline int32_t BGPPeerAfSpec::remote_port() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.remote_port)
  return _internal_remote_port();
}
inline void BGPPeerAfSpec::_internal_set_remote_port(int32_t value) {
  
  remote_port_ = value;
}
inline void BGPPeerAfSpec::set_remote_port(int32_t value) {
  _internal_set_remote_port(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.remote_port)
}

// int32 local_addr_scope_id = 10;
inline void BGPPeerAfSpec::clear_local_addr_scope_id() {
  local_addr_scope_id_ = 0;
}
inline int32_t BGPPeerAfSpec::_internal_local_addr_scope_id() const {
  return local_addr_scope_id_;
}
inline int32_t BGPPeerAfSpec::local_addr_scope_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.local_addr_scope_id)
  return _internal_local_addr_scope_id();
}
inline void BGPPeerAfSpec::_internal_set_local_addr_scope_id(int32_t value) {
  
  local_addr_scope_id_ = value;
}
inline void BGPPeerAfSpec::set_local_addr_scope_id(int32_t value) {
  _internal_set_local_addr_scope_id(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec.local_addr_scope_id)
}

// -------------------------------------------------------------------

// BGPPeerAfStatus

// int32 update_group = 1;
inline void BGPPeerAfStatus::clear_update_group() {
  update_group_ = 0;
}
inline int32_t BGPPeerAfStatus::_internal_update_group() const {
  return update_group_;
}
inline int32_t BGPPeerAfStatus::update_group() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus.update_group)
  return _internal_update_group();
}
inline void BGPPeerAfStatus::_internal_set_update_group(int32_t value) {
  
  update_group_ = value;
}
inline void BGPPeerAfStatus::set_update_group(int32_t value) {
  _internal_set_update_group(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus.update_group)
}

// int32 local_addr_scope_id = 2;
inline void BGPPeerAfStatus::clear_local_addr_scope_id() {
  local_addr_scope_id_ = 0;
}
inline int32_t BGPPeerAfStatus::_internal_local_addr_scope_id() const {
  return local_addr_scope_id_;
}
inline int32_t BGPPeerAfStatus::local_addr_scope_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus.local_addr_scope_id)
  return _internal_local_addr_scope_id();
}
inline void BGPPeerAfStatus::_internal_set_local_addr_scope_id(int32_t value) {
  
  local_addr_scope_id_ = value;
}
inline void BGPPeerAfStatus::set_local_addr_scope_id(int32_t value) {
  _internal_set_local_addr_scope_id(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus.local_addr_scope_id)
}

// bool route_refresh = 3;
inline void BGPPeerAfStatus::clear_route_refresh() {
  route_refresh_ = false;
}
inline bool BGPPeerAfStatus::_internal_route_refresh() const {
  return route_refresh_;
}
inline bool BGPPeerAfStatus::route_refresh() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus.route_refresh)
  return _internal_route_refresh();
}
inline void BGPPeerAfStatus::_internal_set_route_refresh(bool value) {
  
  route_refresh_ = value;
}
inline void BGPPeerAfStatus::set_route_refresh(bool value) {
  _internal_set_route_refresh(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus.route_refresh)
}

// .opi_api.network.cloud.v1alpha1.BgpAddPathCapNegCap add_path_cap_neg = 4;
inline void BGPPeerAfStatus::clear_add_path_cap_neg() {
  add_path_cap_neg_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BgpAddPathCapNegCap BGPPeerAfStatus::_internal_add_path_cap_neg() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BgpAddPathCapNegCap >(add_path_cap_neg_);
}
inline ::opi_api::network::cloud::v1alpha1::BgpAddPathCapNegCap BGPPeerAfStatus::add_path_cap_neg() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus.add_path_cap_neg)
  return _internal_add_path_cap_neg();
}
inline void BGPPeerAfStatus::_internal_set_add_path_cap_neg(::opi_api::network::cloud::v1alpha1::BgpAddPathCapNegCap value) {
  
  add_path_cap_neg_ = value;
}
inline void BGPPeerAfStatus::set_add_path_cap_neg(::opi_api::network::cloud::v1alpha1::BgpAddPathCapNegCap value) {
  _internal_set_add_path_cap_neg(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus.add_path_cap_neg)
}

// .opi_api.network.cloud.v1alpha1.BGPPeerRRClient reflector_client = 5;
inline void BGPPeerAfStatus::clear_reflector_client() {
  reflector_client_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerRRClient BGPPeerAfStatus::_internal_reflector_client() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPPeerRRClient >(reflector_client_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerRRClient BGPPeerAfStatus::reflector_client() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus.reflector_client)
  return _internal_reflector_client();
}
inline void BGPPeerAfStatus::_internal_set_reflector_client(::opi_api::network::cloud::v1alpha1::BGPPeerRRClient value) {
  
  reflector_client_ = value;
}
inline void BGPPeerAfStatus::set_reflector_client(::opi_api::network::cloud::v1alpha1::BGPPeerRRClient value) {
  _internal_set_reflector_client(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus.reflector_client)
}

// -------------------------------------------------------------------

// BGPNLRIPrefix

// .opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec spec = 1;
inline bool BGPNLRIPrefix::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool BGPNLRIPrefix::has_spec() const {
  return _internal_has_spec();
}
inline void BGPNLRIPrefix::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec& BGPNLRIPrefix::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec&>(
      ::opi_api::network::cloud::v1alpha1::_BGPNLRIPrefixSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec& BGPNLRIPrefix::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix.spec)
  return _internal_spec();
}
inline void BGPNLRIPrefix::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix.spec)
}
inline ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* BGPNLRIPrefix::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* BGPNLRIPrefix::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix.spec)
  
  ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* BGPNLRIPrefix::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* BGPNLRIPrefix::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix.spec)
  return _msg;
}
inline void BGPNLRIPrefix::set_allocated_spec(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix.spec)
}

// .opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus state = 2;
inline bool BGPNLRIPrefix::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool BGPNLRIPrefix::has_state() const {
  return _internal_has_state();
}
inline void BGPNLRIPrefix::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus& BGPNLRIPrefix::_internal_state() const {
  const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus&>(
      ::opi_api::network::cloud::v1alpha1::_BGPNLRIPrefixStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus& BGPNLRIPrefix::state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix.state)
  return _internal_state();
}
inline void BGPNLRIPrefix::unsafe_arena_set_allocated_state(
    ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix.state)
}
inline ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* BGPNLRIPrefix::release_state() {
  
  ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* BGPNLRIPrefix::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix.state)
  
  ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* BGPNLRIPrefix::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* BGPNLRIPrefix::mutable_state() {
  ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix.state)
  return _msg;
}
inline void BGPNLRIPrefix::set_allocated_state(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus>::GetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix.state)
}

// -------------------------------------------------------------------

// BGPNLRIPrefixSpec

// .opi_api.network.cloud.v1alpha1.BGPAfi afi = 1;
inline void BGPNLRIPrefixSpec::clear_afi() {
  afi_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPAfi BGPNLRIPrefixSpec::_internal_afi() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPAfi >(afi_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPAfi BGPNLRIPrefixSpec::afi() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.afi)
  return _internal_afi();
}
inline void BGPNLRIPrefixSpec::_internal_set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value) {
  
  afi_ = value;
}
inline void BGPNLRIPrefixSpec::set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value) {
  _internal_set_afi(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.afi)
}

// .opi_api.network.cloud.v1alpha1.BGPSafi safi = 2;
inline void BGPNLRIPrefixSpec::clear_safi() {
  safi_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPSafi BGPNLRIPrefixSpec::_internal_safi() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPSafi >(safi_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPSafi BGPNLRIPrefixSpec::safi() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.safi)
  return _internal_safi();
}
inline void BGPNLRIPrefixSpec::_internal_set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value) {
  
  safi_ = value;
}
inline void BGPNLRIPrefixSpec::set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value) {
  _internal_set_safi(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.safi)
}

// bytes prefix = 3;
inline void BGPNLRIPrefixSpec::clear_prefix() {
  prefix_.ClearToEmpty();
}
inline const std::string& BGPNLRIPrefixSpec::prefix() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.prefix)
  return _internal_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BGPNLRIPrefixSpec::set_prefix(ArgT0&& arg0, ArgT... args) {
 
 prefix_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.prefix)
}
inline std::string* BGPNLRIPrefixSpec::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.prefix)
  return _s;
}
inline const std::string& BGPNLRIPrefixSpec::_internal_prefix() const {
  return prefix_.Get();
}
inline void BGPNLRIPrefixSpec::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BGPNLRIPrefixSpec::_internal_mutable_prefix() {
  
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BGPNLRIPrefixSpec::release_prefix() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BGPNLRIPrefixSpec::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prefix_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.prefix)
}

// int32 prefix_len = 4;
inline void BGPNLRIPrefixSpec::clear_prefix_len() {
  prefix_len_ = 0;
}
inline int32_t BGPNLRIPrefixSpec::_internal_prefix_len() const {
  return prefix_len_;
}
inline int32_t BGPNLRIPrefixSpec::prefix_len() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.prefix_len)
  return _internal_prefix_len();
}
inline void BGPNLRIPrefixSpec::_internal_set_prefix_len(int32_t value) {
  
  prefix_len_ = value;
}
inline void BGPNLRIPrefixSpec::set_prefix_len(int32_t value) {
  _internal_set_prefix_len(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.prefix_len)
}

// .opi_api.network.cloud.v1alpha1.NLRISrc route_source = 5;
inline void BGPNLRIPrefixSpec::clear_route_source() {
  route_source_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::NLRISrc BGPNLRIPrefixSpec::_internal_route_source() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::NLRISrc >(route_source_);
}
inline ::opi_api::network::cloud::v1alpha1::NLRISrc BGPNLRIPrefixSpec::route_source() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.route_source)
  return _internal_route_source();
}
inline void BGPNLRIPrefixSpec::_internal_set_route_source(::opi_api::network::cloud::v1alpha1::NLRISrc value) {
  
  route_source_ = value;
}
inline void BGPNLRIPrefixSpec::set_route_source(::opi_api::network::cloud::v1alpha1::NLRISrc value) {
  _internal_set_route_source(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.route_source)
}

// int32 route_source_index = 6;
inline void BGPNLRIPrefixSpec::clear_route_source_index() {
  route_source_index_ = 0;
}
inline int32_t BGPNLRIPrefixSpec::_internal_route_source_index() const {
  return route_source_index_;
}
inline int32_t BGPNLRIPrefixSpec::route_source_index() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.route_source_index)
  return _internal_route_source_index();
}
inline void BGPNLRIPrefixSpec::_internal_set_route_source_index(int32_t value) {
  
  route_source_index_ = value;
}
inline void BGPNLRIPrefixSpec::set_route_source_index(int32_t value) {
  _internal_set_route_source_index(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.route_source_index)
}

// int32 path_id = 7;
inline void BGPNLRIPrefixSpec::clear_path_id() {
  path_id_ = 0;
}
inline int32_t BGPNLRIPrefixSpec::_internal_path_id() const {
  return path_id_;
}
inline int32_t BGPNLRIPrefixSpec::path_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.path_id)
  return _internal_path_id();
}
inline void BGPNLRIPrefixSpec::_internal_set_path_id(int32_t value) {
  
  path_id_ = value;
}
inline void BGPNLRIPrefixSpec::set_path_id(int32_t value) {
  _internal_set_path_id(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec.path_id)
}

// -------------------------------------------------------------------

// BGPNLRIPrefixStatus

// .opi_api.network.cloud.v1alpha1.BGPAfi afi = 1;
inline void BGPNLRIPrefixStatus::clear_afi() {
  afi_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPAfi BGPNLRIPrefixStatus::_internal_afi() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPAfi >(afi_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPAfi BGPNLRIPrefixStatus::afi() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.afi)
  return _internal_afi();
}
inline void BGPNLRIPrefixStatus::_internal_set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value) {
  
  afi_ = value;
}
inline void BGPNLRIPrefixStatus::set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value) {
  _internal_set_afi(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.afi)
}

// .opi_api.network.cloud.v1alpha1.BGPSafi safi = 2;
inline void BGPNLRIPrefixStatus::clear_safi() {
  safi_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPSafi BGPNLRIPrefixStatus::_internal_safi() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPSafi >(safi_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPSafi BGPNLRIPrefixStatus::safi() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.safi)
  return _internal_safi();
}
inline void BGPNLRIPrefixStatus::_internal_set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value) {
  
  safi_ = value;
}
inline void BGPNLRIPrefixStatus::set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value) {
  _internal_set_safi(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.safi)
}

// bytes prefix = 3;
inline void BGPNLRIPrefixStatus::clear_prefix() {
  prefix_.ClearToEmpty();
}
inline const std::string& BGPNLRIPrefixStatus::prefix() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.prefix)
  return _internal_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BGPNLRIPrefixStatus::set_prefix(ArgT0&& arg0, ArgT... args) {
 
 prefix_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.prefix)
}
inline std::string* BGPNLRIPrefixStatus::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.prefix)
  return _s;
}
inline const std::string& BGPNLRIPrefixStatus::_internal_prefix() const {
  return prefix_.Get();
}
inline void BGPNLRIPrefixStatus::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BGPNLRIPrefixStatus::_internal_mutable_prefix() {
  
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BGPNLRIPrefixStatus::release_prefix() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BGPNLRIPrefixStatus::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prefix_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.prefix)
}

// int32 prefix_len = 4;
inline void BGPNLRIPrefixStatus::clear_prefix_len() {
  prefix_len_ = 0;
}
inline int32_t BGPNLRIPrefixStatus::_internal_prefix_len() const {
  return prefix_len_;
}
inline int32_t BGPNLRIPrefixStatus::prefix_len() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.prefix_len)
  return _internal_prefix_len();
}
inline void BGPNLRIPrefixStatus::_internal_set_prefix_len(int32_t value) {
  
  prefix_len_ = value;
}
inline void BGPNLRIPrefixStatus::set_prefix_len(int32_t value) {
  _internal_set_prefix_len(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.prefix_len)
}

// .opi_api.network.cloud.v1alpha1.NLRISrc route_source = 5;
inline void BGPNLRIPrefixStatus::clear_route_source() {
  route_source_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::NLRISrc BGPNLRIPrefixStatus::_internal_route_source() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::NLRISrc >(route_source_);
}
inline ::opi_api::network::cloud::v1alpha1::NLRISrc BGPNLRIPrefixStatus::route_source() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.route_source)
  return _internal_route_source();
}
inline void BGPNLRIPrefixStatus::_internal_set_route_source(::opi_api::network::cloud::v1alpha1::NLRISrc value) {
  
  route_source_ = value;
}
inline void BGPNLRIPrefixStatus::set_route_source(::opi_api::network::cloud::v1alpha1::NLRISrc value) {
  _internal_set_route_source(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.route_source)
}

// int32 route_source_index = 6;
inline void BGPNLRIPrefixStatus::clear_route_source_index() {
  route_source_index_ = 0;
}
inline int32_t BGPNLRIPrefixStatus::_internal_route_source_index() const {
  return route_source_index_;
}
inline int32_t BGPNLRIPrefixStatus::route_source_index() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.route_source_index)
  return _internal_route_source_index();
}
inline void BGPNLRIPrefixStatus::_internal_set_route_source_index(int32_t value) {
  
  route_source_index_ = value;
}
inline void BGPNLRIPrefixStatus::set_route_source_index(int32_t value) {
  _internal_set_route_source_index(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.route_source_index)
}

// int32 path_id = 7;
inline void BGPNLRIPrefixStatus::clear_path_id() {
  path_id_ = 0;
}
inline int32_t BGPNLRIPrefixStatus::_internal_path_id() const {
  return path_id_;
}
inline int32_t BGPNLRIPrefixStatus::path_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.path_id)
  return _internal_path_id();
}
inline void BGPNLRIPrefixStatus::_internal_set_path_id(int32_t value) {
  
  path_id_ = value;
}
inline void BGPNLRIPrefixStatus::set_path_id(int32_t value) {
  _internal_set_path_id(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.path_id)
}

// bool best_route = 8;
inline void BGPNLRIPrefixStatus::clear_best_route() {
  best_route_ = false;
}
inline bool BGPNLRIPrefixStatus::_internal_best_route() const {
  return best_route_;
}
inline bool BGPNLRIPrefixStatus::best_route() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.best_route)
  return _internal_best_route();
}
inline void BGPNLRIPrefixStatus::_internal_set_best_route(bool value) {
  
  best_route_ = value;
}
inline void BGPNLRIPrefixStatus::set_best_route(bool value) {
  _internal_set_best_route(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.best_route)
}

// bytes as_path_str = 9;
inline void BGPNLRIPrefixStatus::clear_as_path_str() {
  as_path_str_.ClearToEmpty();
}
inline const std::string& BGPNLRIPrefixStatus::as_path_str() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.as_path_str)
  return _internal_as_path_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BGPNLRIPrefixStatus::set_as_path_str(ArgT0&& arg0, ArgT... args) {
 
 as_path_str_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.as_path_str)
}
inline std::string* BGPNLRIPrefixStatus::mutable_as_path_str() {
  std::string* _s = _internal_mutable_as_path_str();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.as_path_str)
  return _s;
}
inline const std::string& BGPNLRIPrefixStatus::_internal_as_path_str() const {
  return as_path_str_.Get();
}
inline void BGPNLRIPrefixStatus::_internal_set_as_path_str(const std::string& value) {
  
  as_path_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BGPNLRIPrefixStatus::_internal_mutable_as_path_str() {
  
  return as_path_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BGPNLRIPrefixStatus::release_as_path_str() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.as_path_str)
  return as_path_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BGPNLRIPrefixStatus::set_allocated_as_path_str(std::string* as_path_str) {
  if (as_path_str != nullptr) {
    
  } else {
    
  }
  as_path_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), as_path_str,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (as_path_str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    as_path_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.as_path_str)
}

// bytes path_orig_id = 10;
inline void BGPNLRIPrefixStatus::clear_path_orig_id() {
  path_orig_id_.ClearToEmpty();
}
inline const std::string& BGPNLRIPrefixStatus::path_orig_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.path_orig_id)
  return _internal_path_orig_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BGPNLRIPrefixStatus::set_path_orig_id(ArgT0&& arg0, ArgT... args) {
 
 path_orig_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.path_orig_id)
}
inline std::string* BGPNLRIPrefixStatus::mutable_path_orig_id() {
  std::string* _s = _internal_mutable_path_orig_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.path_orig_id)
  return _s;
}
inline const std::string& BGPNLRIPrefixStatus::_internal_path_orig_id() const {
  return path_orig_id_.Get();
}
inline void BGPNLRIPrefixStatus::_internal_set_path_orig_id(const std::string& value) {
  
  path_orig_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BGPNLRIPrefixStatus::_internal_mutable_path_orig_id() {
  
  return path_orig_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BGPNLRIPrefixStatus::release_path_orig_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.path_orig_id)
  return path_orig_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BGPNLRIPrefixStatus::set_allocated_path_orig_id(std::string* path_orig_id) {
  if (path_orig_id != nullptr) {
    
  } else {
    
  }
  path_orig_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path_orig_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_orig_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_orig_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.path_orig_id)
}

// bytes next_hop_addr = 11;
inline void BGPNLRIPrefixStatus::clear_next_hop_addr() {
  next_hop_addr_.ClearToEmpty();
}
inline const std::string& BGPNLRIPrefixStatus::next_hop_addr() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.next_hop_addr)
  return _internal_next_hop_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BGPNLRIPrefixStatus::set_next_hop_addr(ArgT0&& arg0, ArgT... args) {
 
 next_hop_addr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.next_hop_addr)
}
inline std::string* BGPNLRIPrefixStatus::mutable_next_hop_addr() {
  std::string* _s = _internal_mutable_next_hop_addr();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.next_hop_addr)
  return _s;
}
inline const std::string& BGPNLRIPrefixStatus::_internal_next_hop_addr() const {
  return next_hop_addr_.Get();
}
inline void BGPNLRIPrefixStatus::_internal_set_next_hop_addr(const std::string& value) {
  
  next_hop_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BGPNLRIPrefixStatus::_internal_mutable_next_hop_addr() {
  
  return next_hop_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BGPNLRIPrefixStatus::release_next_hop_addr() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.next_hop_addr)
  return next_hop_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BGPNLRIPrefixStatus::set_allocated_next_hop_addr(std::string* next_hop_addr) {
  if (next_hop_addr != nullptr) {
    
  } else {
    
  }
  next_hop_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_hop_addr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_hop_addr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_hop_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.next_hop_addr)
}

// .opi_api.network.cloud.v1alpha1.BgpAsSize as_size = 12;
inline void BGPNLRIPrefixStatus::clear_as_size() {
  as_size_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BgpAsSize BGPNLRIPrefixStatus::_internal_as_size() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BgpAsSize >(as_size_);
}
inline ::opi_api::network::cloud::v1alpha1::BgpAsSize BGPNLRIPrefixStatus::as_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.as_size)
  return _internal_as_size();
}
inline void BGPNLRIPrefixStatus::_internal_set_as_size(::opi_api::network::cloud::v1alpha1::BgpAsSize value) {
  
  as_size_ = value;
}
inline void BGPNLRIPrefixStatus::set_as_size(::opi_api::network::cloud::v1alpha1::BgpAsSize value) {
  _internal_set_as_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.as_size)
}

// bool ecmp_route = 13;
inline void BGPNLRIPrefixStatus::clear_ecmp_route() {
  ecmp_route_ = false;
}
inline bool BGPNLRIPrefixStatus::_internal_ecmp_route() const {
  return ecmp_route_;
}
inline bool BGPNLRIPrefixStatus::ecmp_route() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.ecmp_route)
  return _internal_ecmp_route();
}
inline void BGPNLRIPrefixStatus::_internal_set_ecmp_route(bool value) {
  
  ecmp_route_ = value;
}
inline void BGPNLRIPrefixStatus::set_ecmp_route(bool value) {
  _internal_set_ecmp_route(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.ecmp_route)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 14;
inline bool BGPNLRIPrefixStatus::_internal_has_peer_addr() const {
  return this != internal_default_instance() && peer_addr_ != nullptr;
}
inline bool BGPNLRIPrefixStatus::has_peer_addr() const {
  return _internal_has_peer_addr();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPNLRIPrefixStatus::_internal_peer_addr() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = peer_addr_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPNLRIPrefixStatus::peer_addr() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.peer_addr)
  return _internal_peer_addr();
}
inline void BGPNLRIPrefixStatus::unsafe_arena_set_allocated_peer_addr(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_addr_);
  }
  peer_addr_ = peer_addr;
  if (peer_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.peer_addr)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPNLRIPrefixStatus::release_peer_addr() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = peer_addr_;
  peer_addr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPNLRIPrefixStatus::unsafe_arena_release_peer_addr() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.peer_addr)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = peer_addr_;
  peer_addr_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPNLRIPrefixStatus::_internal_mutable_peer_addr() {
  
  if (peer_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    peer_addr_ = p;
  }
  return peer_addr_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPNLRIPrefixStatus::mutable_peer_addr() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_peer_addr();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.peer_addr)
  return _msg;
}
inline void BGPNLRIPrefixStatus::set_allocated_peer_addr(::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_addr_);
  }
  if (peer_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_addr));
    if (message_arena != submessage_arena) {
      peer_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_addr, submessage_arena);
    }
    
  } else {
    
  }
  peer_addr_ = peer_addr;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.peer_addr)
}

// int32 flap_stats_flapcnt = 15;
inline void BGPNLRIPrefixStatus::clear_flap_stats_flapcnt() {
  flap_stats_flapcnt_ = 0;
}
inline int32_t BGPNLRIPrefixStatus::_internal_flap_stats_flapcnt() const {
  return flap_stats_flapcnt_;
}
inline int32_t BGPNLRIPrefixStatus::flap_stats_flapcnt() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.flap_stats_flapcnt)
  return _internal_flap_stats_flapcnt();
}
inline void BGPNLRIPrefixStatus::_internal_set_flap_stats_flapcnt(int32_t value) {
  
  flap_stats_flapcnt_ = value;
}
inline void BGPNLRIPrefixStatus::set_flap_stats_flapcnt(int32_t value) {
  _internal_set_flap_stats_flapcnt(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.flap_stats_flapcnt)
}

// bool flap_stats_supprsd = 16;
inline void BGPNLRIPrefixStatus::clear_flap_stats_supprsd() {
  flap_stats_supprsd_ = false;
}
inline bool BGPNLRIPrefixStatus::_internal_flap_stats_supprsd() const {
  return flap_stats_supprsd_;
}
inline bool BGPNLRIPrefixStatus::flap_stats_supprsd() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.flap_stats_supprsd)
  return _internal_flap_stats_supprsd();
}
inline void BGPNLRIPrefixStatus::_internal_set_flap_stats_supprsd(bool value) {
  
  flap_stats_supprsd_ = value;
}
inline void BGPNLRIPrefixStatus::set_flap_stats_supprsd(bool value) {
  _internal_set_flap_stats_supprsd(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.flap_stats_supprsd)
}

// .opi_api.network.cloud.v1alpha1.BgpNlriIsActive is_active = 17;
inline void BGPNLRIPrefixStatus::clear_is_active() {
  is_active_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BgpNlriIsActive BGPNLRIPrefixStatus::_internal_is_active() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BgpNlriIsActive >(is_active_);
}
inline ::opi_api::network::cloud::v1alpha1::BgpNlriIsActive BGPNLRIPrefixStatus::is_active() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.is_active)
  return _internal_is_active();
}
inline void BGPNLRIPrefixStatus::_internal_set_is_active(::opi_api::network::cloud::v1alpha1::BgpNlriIsActive value) {
  
  is_active_ = value;
}
inline void BGPNLRIPrefixStatus::set_is_active(::opi_api::network::cloud::v1alpha1::BgpNlriIsActive value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.is_active)
}

// bool stale = 18;
inline void BGPNLRIPrefixStatus::clear_stale() {
  stale_ = false;
}
inline bool BGPNLRIPrefixStatus::_internal_stale() const {
  return stale_;
}
inline bool BGPNLRIPrefixStatus::stale() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.stale)
  return _internal_stale();
}
inline void BGPNLRIPrefixStatus::_internal_set_stale(bool value) {
  
  stale_ = value;
}
inline void BGPNLRIPrefixStatus::set_stale(bool value) {
  _internal_set_stale(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.stale)
}

// int32 flap_starttime = 19;
inline void BGPNLRIPrefixStatus::clear_flap_starttime() {
  flap_starttime_ = 0;
}
inline int32_t BGPNLRIPrefixStatus::_internal_flap_starttime() const {
  return flap_starttime_;
}
inline int32_t BGPNLRIPrefixStatus::flap_starttime() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.flap_starttime)
  return _internal_flap_starttime();
}
inline void BGPNLRIPrefixStatus::_internal_set_flap_starttime(int32_t value) {
  
  flap_starttime_ = value;
}
inline void BGPNLRIPrefixStatus::set_flap_starttime(int32_t value) {
  _internal_set_flap_starttime(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.flap_starttime)
}

// .opi_api.network.cloud.v1alpha1.BGPRsnNotBest reason_not_best = 20;
inline void BGPNLRIPrefixStatus::clear_reason_not_best() {
  reason_not_best_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPRsnNotBest BGPNLRIPrefixStatus::_internal_reason_not_best() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPRsnNotBest >(reason_not_best_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPRsnNotBest BGPNLRIPrefixStatus::reason_not_best() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.reason_not_best)
  return _internal_reason_not_best();
}
inline void BGPNLRIPrefixStatus::_internal_set_reason_not_best(::opi_api::network::cloud::v1alpha1::BGPRsnNotBest value) {
  
  reason_not_best_ = value;
}
inline void BGPNLRIPrefixStatus::set_reason_not_best(::opi_api::network::cloud::v1alpha1::BGPRsnNotBest value) {
  _internal_set_reason_not_best(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.reason_not_best)
}

// repeated bytes ext_comm = 21;
inline int BGPNLRIPrefixStatus::_internal_ext_comm_size() const {
  return ext_comm_.size();
}
inline int BGPNLRIPrefixStatus::ext_comm_size() const {
  return _internal_ext_comm_size();
}
inline void BGPNLRIPrefixStatus::clear_ext_comm() {
  ext_comm_.Clear();
}
inline std::string* BGPNLRIPrefixStatus::add_ext_comm() {
  std::string* _s = _internal_add_ext_comm();
  // @@protoc_insertion_point(field_add_mutable:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.ext_comm)
  return _s;
}
inline const std::string& BGPNLRIPrefixStatus::_internal_ext_comm(int index) const {
  return ext_comm_.Get(index);
}
inline const std::string& BGPNLRIPrefixStatus::ext_comm(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.ext_comm)
  return _internal_ext_comm(index);
}
inline std::string* BGPNLRIPrefixStatus::mutable_ext_comm(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.ext_comm)
  return ext_comm_.Mutable(index);
}
inline void BGPNLRIPrefixStatus::set_ext_comm(int index, const std::string& value) {
  ext_comm_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.ext_comm)
}
inline void BGPNLRIPrefixStatus::set_ext_comm(int index, std::string&& value) {
  ext_comm_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.ext_comm)
}
inline void BGPNLRIPrefixStatus::set_ext_comm(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ext_comm_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.ext_comm)
}
inline void BGPNLRIPrefixStatus::set_ext_comm(int index, const void* value, size_t size) {
  ext_comm_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.ext_comm)
}
inline std::string* BGPNLRIPrefixStatus::_internal_add_ext_comm() {
  return ext_comm_.Add();
}
inline void BGPNLRIPrefixStatus::add_ext_comm(const std::string& value) {
  ext_comm_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.ext_comm)
}
inline void BGPNLRIPrefixStatus::add_ext_comm(std::string&& value) {
  ext_comm_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.ext_comm)
}
inline void BGPNLRIPrefixStatus::add_ext_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ext_comm_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.ext_comm)
}
inline void BGPNLRIPrefixStatus::add_ext_comm(const void* value, size_t size) {
  ext_comm_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.ext_comm)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BGPNLRIPrefixStatus::ext_comm() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.ext_comm)
  return ext_comm_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BGPNLRIPrefixStatus::mutable_ext_comm() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.ext_comm)
  return &ext_comm_;
}

// repeated bytes comm = 22;
inline int BGPNLRIPrefixStatus::_internal_comm_size() const {
  return comm_.size();
}
inline int BGPNLRIPrefixStatus::comm_size() const {
  return _internal_comm_size();
}
inline void BGPNLRIPrefixStatus::clear_comm() {
  comm_.Clear();
}
inline std::string* BGPNLRIPrefixStatus::add_comm() {
  std::string* _s = _internal_add_comm();
  // @@protoc_insertion_point(field_add_mutable:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.comm)
  return _s;
}
inline const std::string& BGPNLRIPrefixStatus::_internal_comm(int index) const {
  return comm_.Get(index);
}
inline const std::string& BGPNLRIPrefixStatus::comm(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.comm)
  return _internal_comm(index);
}
inline std::string* BGPNLRIPrefixStatus::mutable_comm(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.comm)
  return comm_.Mutable(index);
}
inline void BGPNLRIPrefixStatus::set_comm(int index, const std::string& value) {
  comm_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.comm)
}
inline void BGPNLRIPrefixStatus::set_comm(int index, std::string&& value) {
  comm_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.comm)
}
inline void BGPNLRIPrefixStatus::set_comm(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  comm_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.comm)
}
inline void BGPNLRIPrefixStatus::set_comm(int index, const void* value, size_t size) {
  comm_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.comm)
}
inline std::string* BGPNLRIPrefixStatus::_internal_add_comm() {
  return comm_.Add();
}
inline void BGPNLRIPrefixStatus::add_comm(const std::string& value) {
  comm_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.comm)
}
inline void BGPNLRIPrefixStatus::add_comm(std::string&& value) {
  comm_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.comm)
}
inline void BGPNLRIPrefixStatus::add_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  comm_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.comm)
}
inline void BGPNLRIPrefixStatus::add_comm(const void* value, size_t size) {
  comm_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.comm)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BGPNLRIPrefixStatus::comm() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.comm)
  return comm_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BGPNLRIPrefixStatus::mutable_comm() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.comm)
  return &comm_;
}

// int32 local_pref = 23;
inline void BGPNLRIPrefixStatus::clear_local_pref() {
  local_pref_ = 0;
}
inline int32_t BGPNLRIPrefixStatus::_internal_local_pref() const {
  return local_pref_;
}
inline int32_t BGPNLRIPrefixStatus::local_pref() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.local_pref)
  return _internal_local_pref();
}
inline void BGPNLRIPrefixStatus::_internal_set_local_pref(int32_t value) {
  
  local_pref_ = value;
}
inline void BGPNLRIPrefixStatus::set_local_pref(int32_t value) {
  _internal_set_local_pref(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.local_pref)
}

// .opi_api.network.cloud.v1alpha1.BGPOriginAttr origin = 24;
inline void BGPNLRIPrefixStatus::clear_origin() {
  origin_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPOriginAttr BGPNLRIPrefixStatus::_internal_origin() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPOriginAttr >(origin_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPOriginAttr BGPNLRIPrefixStatus::origin() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.origin)
  return _internal_origin();
}
inline void BGPNLRIPrefixStatus::_internal_set_origin(::opi_api::network::cloud::v1alpha1::BGPOriginAttr value) {
  
  origin_ = value;
}
inline void BGPNLRIPrefixStatus::set_origin(::opi_api::network::cloud::v1alpha1::BGPOriginAttr value) {
  _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.origin)
}

// bool med_present = 25;
inline void BGPNLRIPrefixStatus::clear_med_present() {
  med_present_ = false;
}
inline bool BGPNLRIPrefixStatus::_internal_med_present() const {
  return med_present_;
}
inline bool BGPNLRIPrefixStatus::med_present() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.med_present)
  return _internal_med_present();
}
inline void BGPNLRIPrefixStatus::_internal_set_med_present(bool value) {
  
  med_present_ = value;
}
inline void BGPNLRIPrefixStatus::set_med_present(bool value) {
  _internal_set_med_present(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.med_present)
}

// uint32 med = 26;
inline void BGPNLRIPrefixStatus::clear_med() {
  med_ = 0u;
}
inline uint32_t BGPNLRIPrefixStatus::_internal_med() const {
  return med_;
}
inline uint32_t BGPNLRIPrefixStatus::med() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.med)
  return _internal_med();
}
inline void BGPNLRIPrefixStatus::_internal_set_med(uint32_t value) {
  
  med_ = value;
}
inline void BGPNLRIPrefixStatus::set_med(uint32_t value) {
  _internal_set_med(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.med)
}

// .opi_api.network.cloud.v1alpha1.BGPPeerType peer_type = 27;
inline void BGPNLRIPrefixStatus::clear_peer_type() {
  peer_type_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerType BGPNLRIPrefixStatus::_internal_peer_type() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPPeerType >(peer_type_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerType BGPNLRIPrefixStatus::peer_type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.peer_type)
  return _internal_peer_type();
}
inline void BGPNLRIPrefixStatus::_internal_set_peer_type(::opi_api::network::cloud::v1alpha1::BGPPeerType value) {
  
  peer_type_ = value;
}
inline void BGPNLRIPrefixStatus::set_peer_type(::opi_api::network::cloud::v1alpha1::BGPPeerType value) {
  _internal_set_peer_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus.peer_type)
}

// -------------------------------------------------------------------

// BGPNLRIPrefixFilter

// bytes ext_comm = 1;
inline void BGPNLRIPrefixFilter::clear_ext_comm() {
  ext_comm_.ClearToEmpty();
}
inline const std::string& BGPNLRIPrefixFilter::ext_comm() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.ext_comm)
  return _internal_ext_comm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BGPNLRIPrefixFilter::set_ext_comm(ArgT0&& arg0, ArgT... args) {
 
 ext_comm_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.ext_comm)
}
inline std::string* BGPNLRIPrefixFilter::mutable_ext_comm() {
  std::string* _s = _internal_mutable_ext_comm();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.ext_comm)
  return _s;
}
inline const std::string& BGPNLRIPrefixFilter::_internal_ext_comm() const {
  return ext_comm_.Get();
}
inline void BGPNLRIPrefixFilter::_internal_set_ext_comm(const std::string& value) {
  
  ext_comm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BGPNLRIPrefixFilter::_internal_mutable_ext_comm() {
  
  return ext_comm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BGPNLRIPrefixFilter::release_ext_comm() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.ext_comm)
  return ext_comm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BGPNLRIPrefixFilter::set_allocated_ext_comm(std::string* ext_comm) {
  if (ext_comm != nullptr) {
    
  } else {
    
  }
  ext_comm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_comm,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ext_comm_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ext_comm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.ext_comm)
}

// int32 vnid = 2;
inline void BGPNLRIPrefixFilter::clear_vnid() {
  vnid_ = 0;
}
inline int32_t BGPNLRIPrefixFilter::_internal_vnid() const {
  return vnid_;
}
inline int32_t BGPNLRIPrefixFilter::vnid() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.vnid)
  return _internal_vnid();
}
inline void BGPNLRIPrefixFilter::_internal_set_vnid(int32_t value) {
  
  vnid_ = value;
}
inline void BGPNLRIPrefixFilter::set_vnid(int32_t value) {
  _internal_set_vnid(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.vnid)
}

// int32 route_type = 3;
inline void BGPNLRIPrefixFilter::clear_route_type() {
  route_type_ = 0;
}
inline int32_t BGPNLRIPrefixFilter::_internal_route_type() const {
  return route_type_;
}
inline int32_t BGPNLRIPrefixFilter::route_type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.route_type)
  return _internal_route_type();
}
inline void BGPNLRIPrefixFilter::_internal_set_route_type(int32_t value) {
  
  route_type_ = value;
}
inline void BGPNLRIPrefixFilter::set_route_type(int32_t value) {
  _internal_set_route_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.route_type)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop = 4;
inline bool BGPNLRIPrefixFilter::_internal_has_next_hop() const {
  return this != internal_default_instance() && next_hop_ != nullptr;
}
inline bool BGPNLRIPrefixFilter::has_next_hop() const {
  return _internal_has_next_hop();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPNLRIPrefixFilter::_internal_next_hop() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = next_hop_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPNLRIPrefixFilter::next_hop() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.next_hop)
  return _internal_next_hop();
}
inline void BGPNLRIPrefixFilter::unsafe_arena_set_allocated_next_hop(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hop_);
  }
  next_hop_ = next_hop;
  if (next_hop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.next_hop)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPNLRIPrefixFilter::release_next_hop() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = next_hop_;
  next_hop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPNLRIPrefixFilter::unsafe_arena_release_next_hop() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.next_hop)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = next_hop_;
  next_hop_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPNLRIPrefixFilter::_internal_mutable_next_hop() {
  
  if (next_hop_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    next_hop_ = p;
  }
  return next_hop_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPNLRIPrefixFilter::mutable_next_hop() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_next_hop();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.next_hop)
  return _msg;
}
inline void BGPNLRIPrefixFilter::set_allocated_next_hop(::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hop_);
  }
  if (next_hop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hop));
    if (message_arena != submessage_arena) {
      next_hop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_hop, submessage_arena);
    }
    
  } else {
    
  }
  next_hop_ = next_hop;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.next_hop)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 5;
inline bool BGPNLRIPrefixFilter::_internal_has_ip_address() const {
  return this != internal_default_instance() && ip_address_ != nullptr;
}
inline bool BGPNLRIPrefixFilter::has_ip_address() const {
  return _internal_has_ip_address();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPNLRIPrefixFilter::_internal_ip_address() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = ip_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPNLRIPrefixFilter::ip_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.ip_address)
  return _internal_ip_address();
}
inline void BGPNLRIPrefixFilter::unsafe_arena_set_allocated_ip_address(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* ip_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_address_);
  }
  ip_address_ = ip_address;
  if (ip_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.ip_address)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPNLRIPrefixFilter::release_ip_address() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = ip_address_;
  ip_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPNLRIPrefixFilter::unsafe_arena_release_ip_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.ip_address)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = ip_address_;
  ip_address_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPNLRIPrefixFilter::_internal_mutable_ip_address() {
  
  if (ip_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    ip_address_ = p;
  }
  return ip_address_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPNLRIPrefixFilter::mutable_ip_address() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.ip_address)
  return _msg;
}
inline void BGPNLRIPrefixFilter::set_allocated_ip_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* ip_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_address_);
  }
  if (ip_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_address));
    if (message_arena != submessage_arena) {
      ip_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_address, submessage_arena);
    }
    
  } else {
    
  }
  ip_address_ = ip_address;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.ip_address)
}

// bool best = 6;
inline void BGPNLRIPrefixFilter::clear_best() {
  best_ = false;
}
inline bool BGPNLRIPrefixFilter::_internal_best() const {
  return best_;
}
inline bool BGPNLRIPrefixFilter::best() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.best)
  return _internal_best();
}
inline void BGPNLRIPrefixFilter::_internal_set_best(bool value) {
  
  best_ = value;
}
inline void BGPNLRIPrefixFilter::set_best(bool value) {
  _internal_set_best(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter.best)
}

// -------------------------------------------------------------------

// BGPAdjRibOut

// .opi_api.network.cloud.v1alpha1.BGPAdjRibOutSpec spec = 1;
inline bool BGPAdjRibOut::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool BGPAdjRibOut::has_spec() const {
  return _internal_has_spec();
}
inline void BGPAdjRibOut::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec& BGPAdjRibOut::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec&>(
      ::opi_api::network::cloud::v1alpha1::_BGPAdjRibOutSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec& BGPAdjRibOut::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPAdjRibOut.spec)
  return _internal_spec();
}
inline void BGPAdjRibOut::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPAdjRibOut.spec)
}
inline ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* BGPAdjRibOut::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* BGPAdjRibOut::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPAdjRibOut.spec)
  
  ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* BGPAdjRibOut::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* BGPAdjRibOut::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPAdjRibOut.spec)
  return _msg;
}
inline void BGPAdjRibOut::set_allocated_spec(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPAdjRibOut.spec)
}

// .opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus status = 2;
inline bool BGPAdjRibOut::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BGPAdjRibOut::has_status() const {
  return _internal_has_status();
}
inline void BGPAdjRibOut::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus& BGPAdjRibOut::_internal_status() const {
  const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus&>(
      ::opi_api::network::cloud::v1alpha1::_BGPAdjRibOutStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus& BGPAdjRibOut::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPAdjRibOut.status)
  return _internal_status();
}
inline void BGPAdjRibOut::unsafe_arena_set_allocated_status(
    ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPAdjRibOut.status)
}
inline ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* BGPAdjRibOut::release_status() {
  
  ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* BGPAdjRibOut::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPAdjRibOut.status)
  
  ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* BGPAdjRibOut::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* BGPAdjRibOut::mutable_status() {
  ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPAdjRibOut.status)
  return _msg;
}
inline void BGPAdjRibOut::set_allocated_status(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPAdjRibOut.status)
}

// -------------------------------------------------------------------

// BGPAdjRibOutSpec

// -------------------------------------------------------------------

// BGPAdjRibOutStatus

// .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 1;
inline bool BGPAdjRibOutStatus::_internal_has_peer_addr() const {
  return this != internal_default_instance() && peer_addr_ != nullptr;
}
inline bool BGPAdjRibOutStatus::has_peer_addr() const {
  return _internal_has_peer_addr();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPAdjRibOutStatus::_internal_peer_addr() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = peer_addr_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& BGPAdjRibOutStatus::peer_addr() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.peer_addr)
  return _internal_peer_addr();
}
inline void BGPAdjRibOutStatus::unsafe_arena_set_allocated_peer_addr(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_addr_);
  }
  peer_addr_ = peer_addr;
  if (peer_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.peer_addr)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPAdjRibOutStatus::release_peer_addr() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = peer_addr_;
  peer_addr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPAdjRibOutStatus::unsafe_arena_release_peer_addr() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.peer_addr)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = peer_addr_;
  peer_addr_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPAdjRibOutStatus::_internal_mutable_peer_addr() {
  
  if (peer_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    peer_addr_ = p;
  }
  return peer_addr_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* BGPAdjRibOutStatus::mutable_peer_addr() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_peer_addr();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.peer_addr)
  return _msg;
}
inline void BGPAdjRibOutStatus::set_allocated_peer_addr(::opi_api::network::opinetcommon::v1alpha1::IPAddress* peer_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_addr_);
  }
  if (peer_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_addr));
    if (message_arena != submessage_arena) {
      peer_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_addr, submessage_arena);
    }
    
  } else {
    
  }
  peer_addr_ = peer_addr;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.peer_addr)
}

// .opi_api.network.cloud.v1alpha1.BGPAfi afi = 2;
inline void BGPAdjRibOutStatus::clear_afi() {
  afi_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPAfi BGPAdjRibOutStatus::_internal_afi() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPAfi >(afi_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPAfi BGPAdjRibOutStatus::afi() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.afi)
  return _internal_afi();
}
inline void BGPAdjRibOutStatus::_internal_set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value) {
  
  afi_ = value;
}
inline void BGPAdjRibOutStatus::set_afi(::opi_api::network::cloud::v1alpha1::BGPAfi value) {
  _internal_set_afi(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.afi)
}

// .opi_api.network.cloud.v1alpha1.BGPSafi safi = 3;
inline void BGPAdjRibOutStatus::clear_safi() {
  safi_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BGPSafi BGPAdjRibOutStatus::_internal_safi() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BGPSafi >(safi_);
}
inline ::opi_api::network::cloud::v1alpha1::BGPSafi BGPAdjRibOutStatus::safi() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.safi)
  return _internal_safi();
}
inline void BGPAdjRibOutStatus::_internal_set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value) {
  
  safi_ = value;
}
inline void BGPAdjRibOutStatus::set_safi(::opi_api::network::cloud::v1alpha1::BGPSafi value) {
  _internal_set_safi(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.safi)
}

// bytes prefix = 4;
inline void BGPAdjRibOutStatus::clear_prefix() {
  prefix_.ClearToEmpty();
}
inline const std::string& BGPAdjRibOutStatus::prefix() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.prefix)
  return _internal_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BGPAdjRibOutStatus::set_prefix(ArgT0&& arg0, ArgT... args) {
 
 prefix_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.prefix)
}
inline std::string* BGPAdjRibOutStatus::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.prefix)
  return _s;
}
inline const std::string& BGPAdjRibOutStatus::_internal_prefix() const {
  return prefix_.Get();
}
inline void BGPAdjRibOutStatus::_internal_set_prefix(const std::string& value) {
  
  prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BGPAdjRibOutStatus::_internal_mutable_prefix() {
  
  return prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BGPAdjRibOutStatus::release_prefix() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.prefix)
  return prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BGPAdjRibOutStatus::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prefix_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.prefix)
}

// int32 prefix_len = 5;
inline void BGPAdjRibOutStatus::clear_prefix_len() {
  prefix_len_ = 0;
}
inline int32_t BGPAdjRibOutStatus::_internal_prefix_len() const {
  return prefix_len_;
}
inline int32_t BGPAdjRibOutStatus::prefix_len() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.prefix_len)
  return _internal_prefix_len();
}
inline void BGPAdjRibOutStatus::_internal_set_prefix_len(int32_t value) {
  
  prefix_len_ = value;
}
inline void BGPAdjRibOutStatus::set_prefix_len(int32_t value) {
  _internal_set_prefix_len(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.prefix_len)
}

// .opi_api.network.cloud.v1alpha1.BgpAroAdvertState state = 6;
inline void BGPAdjRibOutStatus::clear_state() {
  state_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BgpAroAdvertState BGPAdjRibOutStatus::_internal_state() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BgpAroAdvertState >(state_);
}
inline ::opi_api::network::cloud::v1alpha1::BgpAroAdvertState BGPAdjRibOutStatus::state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.state)
  return _internal_state();
}
inline void BGPAdjRibOutStatus::_internal_set_state(::opi_api::network::cloud::v1alpha1::BgpAroAdvertState value) {
  
  state_ = value;
}
inline void BGPAdjRibOutStatus::set_state(::opi_api::network::cloud::v1alpha1::BgpAroAdvertState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.state)
}

// .opi_api.network.cloud.v1alpha1.BgpAsSize as_size = 7;
inline void BGPAdjRibOutStatus::clear_as_size() {
  as_size_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::BgpAsSize BGPAdjRibOutStatus::_internal_as_size() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::BgpAsSize >(as_size_);
}
inline ::opi_api::network::cloud::v1alpha1::BgpAsSize BGPAdjRibOutStatus::as_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.as_size)
  return _internal_as_size();
}
inline void BGPAdjRibOutStatus::_internal_set_as_size(::opi_api::network::cloud::v1alpha1::BgpAsSize value) {
  
  as_size_ = value;
}
inline void BGPAdjRibOutStatus::set_as_size(::opi_api::network::cloud::v1alpha1::BgpAsSize value) {
  _internal_set_as_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.as_size)
}

// bytes as_path_str = 8;
inline void BGPAdjRibOutStatus::clear_as_path_str() {
  as_path_str_.ClearToEmpty();
}
inline const std::string& BGPAdjRibOutStatus::as_path_str() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.as_path_str)
  return _internal_as_path_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BGPAdjRibOutStatus::set_as_path_str(ArgT0&& arg0, ArgT... args) {
 
 as_path_str_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.as_path_str)
}
inline std::string* BGPAdjRibOutStatus::mutable_as_path_str() {
  std::string* _s = _internal_mutable_as_path_str();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.as_path_str)
  return _s;
}
inline const std::string& BGPAdjRibOutStatus::_internal_as_path_str() const {
  return as_path_str_.Get();
}
inline void BGPAdjRibOutStatus::_internal_set_as_path_str(const std::string& value) {
  
  as_path_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BGPAdjRibOutStatus::_internal_mutable_as_path_str() {
  
  return as_path_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BGPAdjRibOutStatus::release_as_path_str() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.as_path_str)
  return as_path_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BGPAdjRibOutStatus::set_allocated_as_path_str(std::string* as_path_str) {
  if (as_path_str != nullptr) {
    
  } else {
    
  }
  as_path_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), as_path_str,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (as_path_str_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    as_path_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.as_path_str)
}

// repeated bytes comm = 9;
inline int BGPAdjRibOutStatus::_internal_comm_size() const {
  return comm_.size();
}
inline int BGPAdjRibOutStatus::comm_size() const {
  return _internal_comm_size();
}
inline void BGPAdjRibOutStatus::clear_comm() {
  comm_.Clear();
}
inline std::string* BGPAdjRibOutStatus::add_comm() {
  std::string* _s = _internal_add_comm();
  // @@protoc_insertion_point(field_add_mutable:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.comm)
  return _s;
}
inline const std::string& BGPAdjRibOutStatus::_internal_comm(int index) const {
  return comm_.Get(index);
}
inline const std::string& BGPAdjRibOutStatus::comm(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.comm)
  return _internal_comm(index);
}
inline std::string* BGPAdjRibOutStatus::mutable_comm(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.comm)
  return comm_.Mutable(index);
}
inline void BGPAdjRibOutStatus::set_comm(int index, const std::string& value) {
  comm_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.comm)
}
inline void BGPAdjRibOutStatus::set_comm(int index, std::string&& value) {
  comm_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.comm)
}
inline void BGPAdjRibOutStatus::set_comm(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  comm_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.comm)
}
inline void BGPAdjRibOutStatus::set_comm(int index, const void* value, size_t size) {
  comm_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.comm)
}
inline std::string* BGPAdjRibOutStatus::_internal_add_comm() {
  return comm_.Add();
}
inline void BGPAdjRibOutStatus::add_comm(const std::string& value) {
  comm_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.comm)
}
inline void BGPAdjRibOutStatus::add_comm(std::string&& value) {
  comm_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.comm)
}
inline void BGPAdjRibOutStatus::add_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  comm_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.comm)
}
inline void BGPAdjRibOutStatus::add_comm(const void* value, size_t size) {
  comm_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.comm)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BGPAdjRibOutStatus::comm() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.comm)
  return comm_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BGPAdjRibOutStatus::mutable_comm() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.comm)
  return &comm_;
}

// repeated bytes ext_comm = 10;
inline int BGPAdjRibOutStatus::_internal_ext_comm_size() const {
  return ext_comm_.size();
}
inline int BGPAdjRibOutStatus::ext_comm_size() const {
  return _internal_ext_comm_size();
}
inline void BGPAdjRibOutStatus::clear_ext_comm() {
  ext_comm_.Clear();
}
inline std::string* BGPAdjRibOutStatus::add_ext_comm() {
  std::string* _s = _internal_add_ext_comm();
  // @@protoc_insertion_point(field_add_mutable:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.ext_comm)
  return _s;
}
inline const std::string& BGPAdjRibOutStatus::_internal_ext_comm(int index) const {
  return ext_comm_.Get(index);
}
inline const std::string& BGPAdjRibOutStatus::ext_comm(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.ext_comm)
  return _internal_ext_comm(index);
}
inline std::string* BGPAdjRibOutStatus::mutable_ext_comm(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.ext_comm)
  return ext_comm_.Mutable(index);
}
inline void BGPAdjRibOutStatus::set_ext_comm(int index, const std::string& value) {
  ext_comm_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.ext_comm)
}
inline void BGPAdjRibOutStatus::set_ext_comm(int index, std::string&& value) {
  ext_comm_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.ext_comm)
}
inline void BGPAdjRibOutStatus::set_ext_comm(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ext_comm_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.ext_comm)
}
inline void BGPAdjRibOutStatus::set_ext_comm(int index, const void* value, size_t size) {
  ext_comm_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.ext_comm)
}
inline std::string* BGPAdjRibOutStatus::_internal_add_ext_comm() {
  return ext_comm_.Add();
}
inline void BGPAdjRibOutStatus::add_ext_comm(const std::string& value) {
  ext_comm_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.ext_comm)
}
inline void BGPAdjRibOutStatus::add_ext_comm(std::string&& value) {
  ext_comm_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.ext_comm)
}
inline void BGPAdjRibOutStatus::add_ext_comm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ext_comm_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.ext_comm)
}
inline void BGPAdjRibOutStatus::add_ext_comm(const void* value, size_t size) {
  ext_comm_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.ext_comm)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BGPAdjRibOutStatus::ext_comm() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.ext_comm)
  return ext_comm_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BGPAdjRibOutStatus::mutable_ext_comm() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.ext_comm)
  return &ext_comm_;
}

// bool med_present = 11;
inline void BGPAdjRibOutStatus::clear_med_present() {
  med_present_ = false;
}
inline bool BGPAdjRibOutStatus::_internal_med_present() const {
  return med_present_;
}
inline bool BGPAdjRibOutStatus::med_present() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.med_present)
  return _internal_med_present();
}
inline void BGPAdjRibOutStatus::_internal_set_med_present(bool value) {
  
  med_present_ = value;
}
inline void BGPAdjRibOutStatus::set_med_present(bool value) {
  _internal_set_med_present(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.med_present)
}

// uint32 med = 12;
inline void BGPAdjRibOutStatus::clear_med() {
  med_ = 0u;
}
inline uint32_t BGPAdjRibOutStatus::_internal_med() const {
  return med_;
}
inline uint32_t BGPAdjRibOutStatus::med() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.med)
  return _internal_med();
}
inline void BGPAdjRibOutStatus::_internal_set_med(uint32_t value) {
  
  med_ = value;
}
inline void BGPAdjRibOutStatus::set_med(uint32_t value) {
  _internal_set_med(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus.med)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::BGPAfi> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::BGPAfi>() {
  return ::opi_api::network::cloud::v1alpha1::BGPAfi_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::BGPSafi> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::BGPSafi>() {
  return ::opi_api::network::cloud::v1alpha1::BGPSafi_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::BGPPeerRRClient> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::BGPPeerRRClient>() {
  return ::opi_api::network::cloud::v1alpha1::BGPPeerRRClient_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::BGPPeerSessionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::BGPPeerSessionState>() {
  return ::opi_api::network::cloud::v1alpha1::BGPPeerSessionState_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::BgpAsSize> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::BgpAsSize>() {
  return ::opi_api::network::cloud::v1alpha1::BgpAsSize_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::BGPAddrType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::BGPAddrType>() {
  return ::opi_api::network::cloud::v1alpha1::BGPAddrType_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::BGPOperState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::BGPOperState>() {
  return ::opi_api::network::cloud::v1alpha1::BGPOperState_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::BgpAddPathCapNegCap> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::BgpAddPathCapNegCap>() {
  return ::opi_api::network::cloud::v1alpha1::BgpAddPathCapNegCap_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::BGPClearRouteOptions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::BGPClearRouteOptions>() {
  return ::opi_api::network::cloud::v1alpha1::BGPClearRouteOptions_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::NLRISrc> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::NLRISrc>() {
  return ::opi_api::network::cloud::v1alpha1::NLRISrc_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::BgpNlriIsActive> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::BgpNlriIsActive>() {
  return ::opi_api::network::cloud::v1alpha1::BgpNlriIsActive_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::BGPRsnNotBest> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::BGPRsnNotBest>() {
  return ::opi_api::network::cloud::v1alpha1::BGPRsnNotBest_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::BGPOriginAttr> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::BGPOriginAttr>() {
  return ::opi_api::network::cloud::v1alpha1::BGPOriginAttr_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::BGPPeerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::BGPPeerType>() {
  return ::opi_api::network::cloud::v1alpha1::BGPPeerType_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::BgpAroAdvertState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::BgpAroAdvertState>() {
  return ::opi_api::network::cloud::v1alpha1::BgpAroAdvertState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bgp_2eproto
