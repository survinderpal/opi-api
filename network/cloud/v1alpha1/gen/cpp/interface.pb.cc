// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interface.proto

#include "interface.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
constexpr Interface::Interface(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , status_(nullptr){}
struct InterfaceDefaultTypeInternal {
  constexpr InterfaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InterfaceDefaultTypeInternal() {}
  union {
    Interface _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InterfaceDefaultTypeInternal _Interface_default_instance_;
constexpr InterfaceSpec::InterfaceSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , ifid_(0)
  , admin_status_(0)

  , _oneof_case_{}{}
struct InterfaceSpecDefaultTypeInternal {
  constexpr InterfaceSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InterfaceSpecDefaultTypeInternal() {}
  union {
    InterfaceSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InterfaceSpecDefaultTypeInternal _InterfaceSpec_default_instance_;
constexpr UplinkSpec::UplinkSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_id_(nullptr)
  , native_vlanid_(0){}
struct UplinkSpecDefaultTypeInternal {
  constexpr UplinkSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UplinkSpecDefaultTypeInternal() {}
  union {
    UplinkSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UplinkSpecDefaultTypeInternal _UplinkSpec_default_instance_;
constexpr UplinkPCSpec::UplinkPCSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : member_ifids_bitmap_(uint64_t{0u})
  , native_vlanid_(0){}
struct UplinkPCSpecDefaultTypeInternal {
  constexpr UplinkPCSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UplinkPCSpecDefaultTypeInternal() {}
  union {
    UplinkPCSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UplinkPCSpecDefaultTypeInternal _UplinkPCSpec_default_instance_;
constexpr L3IfSpec::L3IfSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prefix_()
  , mac_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vpc_id_(nullptr)
  , port_id_(nullptr)
  , encap_(nullptr){}
struct L3IfSpecDefaultTypeInternal {
  constexpr L3IfSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~L3IfSpecDefaultTypeInternal() {}
  union {
    L3IfSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT L3IfSpecDefaultTypeInternal _L3IfSpec_default_instance_;
constexpr BGPCommunity::BGPCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asn_(0)
  , community_(0){}
struct BGPCommunityDefaultTypeInternal {
  constexpr BGPCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPCommunityDefaultTypeInternal() {}
  union {
    BGPCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPCommunityDefaultTypeInternal _BGPCommunity_default_instance_;
constexpr LoopbackIfSpec::LoopbackIfSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : communities_()
  , prefix_(nullptr){}
struct LoopbackIfSpecDefaultTypeInternal {
  constexpr LoopbackIfSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoopbackIfSpecDefaultTypeInternal() {}
  union {
    LoopbackIfSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoopbackIfSpecDefaultTypeInternal _LoopbackIfSpec_default_instance_;
constexpr ControlIfSpec::ControlIfSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mac_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prefix_(nullptr){}
struct ControlIfSpecDefaultTypeInternal {
  constexpr ControlIfSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlIfSpecDefaultTypeInternal() {}
  union {
    ControlIfSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlIfSpecDefaultTypeInternal _ControlIfSpec_default_instance_;
constexpr HostIfSpec::HostIfSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mac_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ifname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vf_(false)
  , enable_connection_tracking_(false){}
struct HostIfSpecDefaultTypeInternal {
  constexpr HostIfSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HostIfSpecDefaultTypeInternal() {}
  union {
    HostIfSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HostIfSpecDefaultTypeInternal _HostIfSpec_default_instance_;
constexpr UplinkIfStatus::UplinkIfStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hw_if_idx_(0)
  , hw_port_number_(0){}
struct UplinkIfStatusDefaultTypeInternal {
  constexpr UplinkIfStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UplinkIfStatusDefaultTypeInternal() {}
  union {
    UplinkIfStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UplinkIfStatusDefaultTypeInternal _UplinkIfStatus_default_instance_;
constexpr LoopbackIfStatus::LoopbackIfStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ifname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LoopbackIfStatusDefaultTypeInternal {
  constexpr LoopbackIfStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoopbackIfStatusDefaultTypeInternal() {}
  union {
    LoopbackIfStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoopbackIfStatusDefaultTypeInternal _LoopbackIfStatus_default_instance_;
constexpr HostIfStatus::HostIfStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hw_if_idxes_()
  , mac_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ifname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)
{}
struct HostIfStatusDefaultTypeInternal {
  constexpr HostIfStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HostIfStatusDefaultTypeInternal() {}
  union {
    HostIfStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HostIfStatusDefaultTypeInternal _HostIfStatus_default_instance_;
constexpr InterfaceStatus::InterfaceStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : if_index_(0u)
  , oper_status_(0)

  , _oneof_case_{}{}
struct InterfaceStatusDefaultTypeInternal {
  constexpr InterfaceStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InterfaceStatusDefaultTypeInternal() {}
  union {
    InterfaceStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InterfaceStatusDefaultTypeInternal _InterfaceStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_interface_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_interface_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_interface_2eproto = nullptr;

const uint32_t TableStruct_interface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Interface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Interface, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Interface, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::InterfaceSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::InterfaceSpec, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::InterfaceSpec, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::InterfaceSpec, ifid_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::InterfaceSpec, admin_status_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::InterfaceSpec, ifinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UplinkSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UplinkSpec, port_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UplinkSpec, native_vlanid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UplinkPCSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UplinkPCSpec, member_ifids_bitmap_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UplinkPCSpec, native_vlanid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::L3IfSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::L3IfSpec, vpc_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::L3IfSpec, port_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::L3IfSpec, prefix_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::L3IfSpec, encap_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::L3IfSpec, mac_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPCommunity, asn_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPCommunity, community_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::LoopbackIfSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::LoopbackIfSpec, prefix_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::LoopbackIfSpec, communities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::ControlIfSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::ControlIfSpec, prefix_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::ControlIfSpec, mac_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::HostIfSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::HostIfSpec, vf_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::HostIfSpec, enable_connection_tracking_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::HostIfSpec, mac_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::HostIfSpec, ifname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UplinkIfStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UplinkIfStatus, hw_if_idx_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UplinkIfStatus, hw_port_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::LoopbackIfStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::LoopbackIfStatus, ifname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::HostIfStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::HostIfStatus, hw_if_idxes_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::HostIfStatus, mac_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::HostIfStatus, status_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::HostIfStatus, ifname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::InterfaceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::InterfaceStatus, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::InterfaceStatus, if_index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::InterfaceStatus, oper_status_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::InterfaceStatus, ifstatus_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::Interface)},
  { 8, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::InterfaceSpec)},
  { 24, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::UplinkSpec)},
  { 32, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::UplinkPCSpec)},
  { 40, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::L3IfSpec)},
  { 51, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BGPCommunity)},
  { 59, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::LoopbackIfSpec)},
  { 67, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::ControlIfSpec)},
  { 75, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::HostIfSpec)},
  { 85, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::UplinkIfStatus)},
  { 93, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::LoopbackIfStatus)},
  { 100, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::HostIfStatus)},
  { 110, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::InterfaceStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_Interface_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_InterfaceSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_UplinkSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_UplinkPCSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_L3IfSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BGPCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_LoopbackIfSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_ControlIfSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_HostIfSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_UplinkIfStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_LoopbackIfStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_HostIfStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_InterfaceStatus_default_instance_),
};

const char descriptor_table_protodef_interface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017interface.proto\022\036opi_api.network.cloud"
  ".v1alpha1\032\020object_key.proto\032\022networktype"
  "s.proto\"\211\001\n\tInterface\022;\n\004spec\030\001 \001(\0132-.op"
  "i_api.network.cloud.v1alpha1.InterfaceSp"
  "ec\022\?\n\006status\030\002 \001(\0132/.opi_api.network.clo"
  "ud.v1alpha1.InterfaceStatus\"\266\004\n\rInterfac"
  "eSpec\022(\n\002id\030\001 \001(\0132\034.opi_api.common.v1.Ob"
  "jectKey\022\014\n\004ifid\030\002 \001(\005\022>\n\014admin_status\030\003 "
  "\001(\0162(.opi_api.network.cloud.v1alpha1.IfS"
  "tatus\022A\n\013uplink_spec\030\004 \001(\0132*.opi_api.net"
  "work.cloud.v1alpha1.UplinkSpecH\000\022F\n\016upli"
  "nk_pc_spec\030\005 \001(\0132,.opi_api.network.cloud"
  ".v1alpha1.UplinkPCSpecH\000\022>\n\nl3_if_spec\030\006"
  " \001(\0132(.opi_api.network.cloud.v1alpha1.L3"
  "IfSpecH\000\022J\n\020loopback_if_spec\030\007 \001(\0132..opi"
  "_api.network.cloud.v1alpha1.LoopbackIfSp"
  "ecH\000\022H\n\017control_if_spec\030\010 \001(\0132-.opi_api."
  "network.cloud.v1alpha1.ControlIfSpecH\000\022B"
  "\n\014host_if_spec\030\t \001(\0132*.opi_api.network.c"
  "loud.v1alpha1.HostIfSpecH\000B\010\n\006ifinfo\"R\n\n"
  "UplinkSpec\022-\n\007port_id\030\001 \001(\0132\034.opi_api.co"
  "mmon.v1.ObjectKey\022\025\n\rnative_vlanid\030\002 \001(\005"
  "\"B\n\014UplinkPCSpec\022\033\n\023member_ifids_bitmap\030"
  "\001 \001(\004\022\025\n\rnative_vlanid\030\002 \001(\005\"\372\001\n\010L3IfSpe"
  "c\022,\n\006vpc_id\030\001 \001(\0132\034.opi_api.common.v1.Ob"
  "jectKey\022-\n\007port_id\030\003 \001(\0132\034.opi_api.commo"
  "n.v1.ObjectKey\022\?\n\006prefix\030\002 \003(\0132/.opi_api"
  ".network.opinetcommon.v1alpha1.IPPrefix\022"
  ";\n\005encap\030\004 \001(\0132,.opi_api.network.opinetc"
  "ommon.v1alpha1.Encap\022\023\n\013mac_address\030\005 \001("
  "\014\".\n\014BGPCommunity\022\013\n\003asn\030\001 \001(\005\022\021\n\tcommun"
  "ity\030\002 \001(\005\"\224\001\n\016LoopbackIfSpec\022\?\n\006prefix\030\001"
  " \001(\0132/.opi_api.network.opinetcommon.v1al"
  "pha1.IPPrefix\022A\n\013communities\030\002 \003(\0132,.opi"
  "_api.network.cloud.v1alpha1.BGPCommunity"
  "\"e\n\rControlIfSpec\022\?\n\006prefix\030\001 \001(\0132/.opi_"
  "api.network.opinetcommon.v1alpha1.IPPref"
  "ix\022\023\n\013mac_address\030\002 \001(\014\"a\n\nHostIfSpec\022\n\n"
  "\002vf\030\001 \001(\010\022\"\n\032enable_connection_tracking\030"
  "\002 \001(\010\022\023\n\013mac_address\030\003 \001(\014\022\016\n\006ifname\030\004 \001"
  "(\t\";\n\016UplinkIfStatus\022\021\n\thw_if_idx\030\001 \001(\005\022"
  "\026\n\016hw_port_number\030\002 \001(\005\"\"\n\020LoopbackIfSta"
  "tus\022\016\n\006ifname\030\001 \001(\t\"\202\001\n\014HostIfStatus\022\023\n\013"
  "hw_if_idxes\030\001 \003(\014\022\023\n\013mac_address\030\002 \001(\014\0228"
  "\n\006status\030\003 \001(\0162(.opi_api.network.cloud.v"
  "1alpha1.IfStatus\022\016\n\006ifname\030\004 \001(\t\"\322\002\n\017Int"
  "erfaceStatus\022\020\n\010if_index\030\001 \001(\r\022=\n\013oper_s"
  "tatus\030\002 \001(\0162(.opi_api.network.cloud.v1al"
  "pha1.IfStatus\022J\n\020uplink_if_status\030\003 \001(\0132"
  "..opi_api.network.cloud.v1alpha1.UplinkI"
  "fStatusH\000\022N\n\022loopback_if_status\030\004 \001(\01320."
  "opi_api.network.cloud.v1alpha1.LoopbackI"
  "fStatusH\000\022F\n\016host_if_status\030\005 \001(\0132,.opi_"
  "api.network.cloud.v1alpha1.HostIfStatusH"
  "\000B\n\n\010ifstatus*\231\001\n\006IfType\022\027\n\023IF_TYPE_UNSP"
  "ECIFIED\020\000\022\022\n\016IF_TYPE_UPLINK\020\001\022\025\n\021IF_TYPE"
  "_UPLINK_PC\020\002\022\016\n\nIF_TYPE_L3\020\003\022\024\n\020IF_TYPE_"
  "LOOPBACK\020\004\022\023\n\017IF_TYPE_CONTROL\020\005\022\020\n\014IF_TY"
  "PE_HOST\020\006*K\n\010IfStatus\022\031\n\025IF_STATUS_UNSPE"
  "CIFIED\020\000\022\020\n\014IF_STATUS_UP\020\001\022\022\n\016IF_STATUS_"
  "DOWN\020\002Bo\n\036opi_api.network.cloud.v1alpha1"
  "B\016InterfaceProtoP\001Z;github.com/opiprojec"
  "t/opi-api/network/cloud/v1alpha1/gen/gob"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_interface_2eproto_deps[2] = {
  &::descriptor_table_networktypes_2eproto,
  &::descriptor_table_object_5fkey_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_interface_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_interface_2eproto = {
  false, false, 2527, descriptor_table_protodef_interface_2eproto, "interface.proto", 
  &descriptor_table_interface_2eproto_once, descriptor_table_interface_2eproto_deps, 2, 13,
  schemas, file_default_instances, TableStruct_interface_2eproto::offsets,
  file_level_metadata_interface_2eproto, file_level_enum_descriptors_interface_2eproto, file_level_service_descriptors_interface_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_interface_2eproto_getter() {
  return &descriptor_table_interface_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_interface_2eproto(&descriptor_table_interface_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IfType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_interface_2eproto);
  return file_level_enum_descriptors_interface_2eproto[0];
}
bool IfType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IfStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_interface_2eproto);
  return file_level_enum_descriptors_interface_2eproto[1];
}
bool IfStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Interface::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::InterfaceSpec& spec(const Interface* msg);
  static const ::opi_api::network::cloud::v1alpha1::InterfaceStatus& status(const Interface* msg);
};

const ::opi_api::network::cloud::v1alpha1::InterfaceSpec&
Interface::_Internal::spec(const Interface* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::InterfaceStatus&
Interface::_Internal::status(const Interface* msg) {
  return *msg->status_;
}
Interface::Interface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.Interface)
}
Interface::Interface(const Interface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::InterfaceSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::cloud::v1alpha1::InterfaceStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.Interface)
}

inline void Interface::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

Interface::~Interface() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.Interface)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interface::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void Interface::ArenaDtor(void* object) {
  Interface* _this = reinterpret_cast< Interface* >(object);
  (void)_this;
}
void Interface::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interface::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.Interface)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.InterfaceSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.InterfaceStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.Interface)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.InterfaceSpec spec = 1;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.InterfaceStatus status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.Interface)
  return target;
}

size_t Interface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.Interface)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.InterfaceSpec spec = 1;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.InterfaceStatus status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface::GetClassData() const { return &_class_data_; }

void Interface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interface *>(to)->MergeFrom(
      static_cast<const Interface &>(from));
}


void Interface::MergeFrom(const Interface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.Interface)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::InterfaceSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::cloud::v1alpha1::InterfaceStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface::CopyFrom(const Interface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.Interface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface::IsInitialized() const {
  return true;
}

void Interface::InternalSwap(Interface* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interface, status_)
      + sizeof(Interface::status_)
      - PROTOBUF_FIELD_OFFSET(Interface, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[0]);
}

// ===================================================================

class InterfaceSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const InterfaceSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::UplinkSpec& uplink_spec(const InterfaceSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::UplinkPCSpec& uplink_pc_spec(const InterfaceSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::L3IfSpec& l3_if_spec(const InterfaceSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::LoopbackIfSpec& loopback_if_spec(const InterfaceSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::ControlIfSpec& control_if_spec(const InterfaceSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::HostIfSpec& host_if_spec(const InterfaceSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
InterfaceSpec::_Internal::id(const InterfaceSpec* msg) {
  return *msg->id_;
}
const ::opi_api::network::cloud::v1alpha1::UplinkSpec&
InterfaceSpec::_Internal::uplink_spec(const InterfaceSpec* msg) {
  return *msg->ifinfo_.uplink_spec_;
}
const ::opi_api::network::cloud::v1alpha1::UplinkPCSpec&
InterfaceSpec::_Internal::uplink_pc_spec(const InterfaceSpec* msg) {
  return *msg->ifinfo_.uplink_pc_spec_;
}
const ::opi_api::network::cloud::v1alpha1::L3IfSpec&
InterfaceSpec::_Internal::l3_if_spec(const InterfaceSpec* msg) {
  return *msg->ifinfo_.l3_if_spec_;
}
const ::opi_api::network::cloud::v1alpha1::LoopbackIfSpec&
InterfaceSpec::_Internal::loopback_if_spec(const InterfaceSpec* msg) {
  return *msg->ifinfo_.loopback_if_spec_;
}
const ::opi_api::network::cloud::v1alpha1::ControlIfSpec&
InterfaceSpec::_Internal::control_if_spec(const InterfaceSpec* msg) {
  return *msg->ifinfo_.control_if_spec_;
}
const ::opi_api::network::cloud::v1alpha1::HostIfSpec&
InterfaceSpec::_Internal::host_if_spec(const InterfaceSpec* msg) {
  return *msg->ifinfo_.host_if_spec_;
}
void InterfaceSpec::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void InterfaceSpec::set_allocated_uplink_spec(::opi_api::network::cloud::v1alpha1::UplinkSpec* uplink_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ifinfo();
  if (uplink_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::UplinkSpec>::GetOwningArena(uplink_spec);
    if (message_arena != submessage_arena) {
      uplink_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uplink_spec, submessage_arena);
    }
    set_has_uplink_spec();
    ifinfo_.uplink_spec_ = uplink_spec;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.InterfaceSpec.uplink_spec)
}
void InterfaceSpec::set_allocated_uplink_pc_spec(::opi_api::network::cloud::v1alpha1::UplinkPCSpec* uplink_pc_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ifinfo();
  if (uplink_pc_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::UplinkPCSpec>::GetOwningArena(uplink_pc_spec);
    if (message_arena != submessage_arena) {
      uplink_pc_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uplink_pc_spec, submessage_arena);
    }
    set_has_uplink_pc_spec();
    ifinfo_.uplink_pc_spec_ = uplink_pc_spec;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.InterfaceSpec.uplink_pc_spec)
}
void InterfaceSpec::set_allocated_l3_if_spec(::opi_api::network::cloud::v1alpha1::L3IfSpec* l3_if_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ifinfo();
  if (l3_if_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::L3IfSpec>::GetOwningArena(l3_if_spec);
    if (message_arena != submessage_arena) {
      l3_if_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, l3_if_spec, submessage_arena);
    }
    set_has_l3_if_spec();
    ifinfo_.l3_if_spec_ = l3_if_spec;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.InterfaceSpec.l3_if_spec)
}
void InterfaceSpec::set_allocated_loopback_if_spec(::opi_api::network::cloud::v1alpha1::LoopbackIfSpec* loopback_if_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ifinfo();
  if (loopback_if_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::LoopbackIfSpec>::GetOwningArena(loopback_if_spec);
    if (message_arena != submessage_arena) {
      loopback_if_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loopback_if_spec, submessage_arena);
    }
    set_has_loopback_if_spec();
    ifinfo_.loopback_if_spec_ = loopback_if_spec;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.InterfaceSpec.loopback_if_spec)
}
void InterfaceSpec::set_allocated_control_if_spec(::opi_api::network::cloud::v1alpha1::ControlIfSpec* control_if_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ifinfo();
  if (control_if_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::ControlIfSpec>::GetOwningArena(control_if_spec);
    if (message_arena != submessage_arena) {
      control_if_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_if_spec, submessage_arena);
    }
    set_has_control_if_spec();
    ifinfo_.control_if_spec_ = control_if_spec;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.InterfaceSpec.control_if_spec)
}
void InterfaceSpec::set_allocated_host_if_spec(::opi_api::network::cloud::v1alpha1::HostIfSpec* host_if_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ifinfo();
  if (host_if_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::HostIfSpec>::GetOwningArena(host_if_spec);
    if (message_arena != submessage_arena) {
      host_if_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_if_spec, submessage_arena);
    }
    set_has_host_if_spec();
    ifinfo_.host_if_spec_ = host_if_spec;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.InterfaceSpec.host_if_spec)
}
InterfaceSpec::InterfaceSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.InterfaceSpec)
}
InterfaceSpec::InterfaceSpec(const InterfaceSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&ifid_, &from.ifid_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_status_) -
    reinterpret_cast<char*>(&ifid_)) + sizeof(admin_status_));
  clear_has_ifinfo();
  switch (from.ifinfo_case()) {
    case kUplinkSpec: {
      _internal_mutable_uplink_spec()->::opi_api::network::cloud::v1alpha1::UplinkSpec::MergeFrom(from._internal_uplink_spec());
      break;
    }
    case kUplinkPcSpec: {
      _internal_mutable_uplink_pc_spec()->::opi_api::network::cloud::v1alpha1::UplinkPCSpec::MergeFrom(from._internal_uplink_pc_spec());
      break;
    }
    case kL3IfSpec: {
      _internal_mutable_l3_if_spec()->::opi_api::network::cloud::v1alpha1::L3IfSpec::MergeFrom(from._internal_l3_if_spec());
      break;
    }
    case kLoopbackIfSpec: {
      _internal_mutable_loopback_if_spec()->::opi_api::network::cloud::v1alpha1::LoopbackIfSpec::MergeFrom(from._internal_loopback_if_spec());
      break;
    }
    case kControlIfSpec: {
      _internal_mutable_control_if_spec()->::opi_api::network::cloud::v1alpha1::ControlIfSpec::MergeFrom(from._internal_control_if_spec());
      break;
    }
    case kHostIfSpec: {
      _internal_mutable_host_if_spec()->::opi_api::network::cloud::v1alpha1::HostIfSpec::MergeFrom(from._internal_host_if_spec());
      break;
    }
    case IFINFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.InterfaceSpec)
}

inline void InterfaceSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&admin_status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(admin_status_));
clear_has_ifinfo();
}

InterfaceSpec::~InterfaceSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.InterfaceSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InterfaceSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (has_ifinfo()) {
    clear_ifinfo();
  }
}

void InterfaceSpec::ArenaDtor(void* object) {
  InterfaceSpec* _this = reinterpret_cast< InterfaceSpec* >(object);
  (void)_this;
}
void InterfaceSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterfaceSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InterfaceSpec::clear_ifinfo() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.InterfaceSpec)
  switch (ifinfo_case()) {
    case kUplinkSpec: {
      if (GetArenaForAllocation() == nullptr) {
        delete ifinfo_.uplink_spec_;
      }
      break;
    }
    case kUplinkPcSpec: {
      if (GetArenaForAllocation() == nullptr) {
        delete ifinfo_.uplink_pc_spec_;
      }
      break;
    }
    case kL3IfSpec: {
      if (GetArenaForAllocation() == nullptr) {
        delete ifinfo_.l3_if_spec_;
      }
      break;
    }
    case kLoopbackIfSpec: {
      if (GetArenaForAllocation() == nullptr) {
        delete ifinfo_.loopback_if_spec_;
      }
      break;
    }
    case kControlIfSpec: {
      if (GetArenaForAllocation() == nullptr) {
        delete ifinfo_.control_if_spec_;
      }
      break;
    }
    case kHostIfSpec: {
      if (GetArenaForAllocation() == nullptr) {
        delete ifinfo_.host_if_spec_;
      }
      break;
    }
    case IFINFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IFINFO_NOT_SET;
}


void InterfaceSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.InterfaceSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&ifid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_status_) -
      reinterpret_cast<char*>(&ifid_)) + sizeof(admin_status_));
  clear_ifinfo();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterfaceSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ifid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ifid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.IfStatus admin_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_admin_status(static_cast<::opi_api::network::cloud::v1alpha1::IfStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.UplinkSpec uplink_spec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_uplink_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.UplinkPCSpec uplink_pc_spec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_uplink_pc_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.L3IfSpec l3_if_spec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_l3_if_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.LoopbackIfSpec loopback_if_spec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_loopback_if_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.ControlIfSpec control_if_spec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_if_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.HostIfSpec host_if_spec = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_if_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InterfaceSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.InterfaceSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // int32 ifid = 2;
  if (this->_internal_ifid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ifid(), target);
  }

  // .opi_api.network.cloud.v1alpha1.IfStatus admin_status = 3;
  if (this->_internal_admin_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_admin_status(), target);
  }

  // .opi_api.network.cloud.v1alpha1.UplinkSpec uplink_spec = 4;
  if (_internal_has_uplink_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::uplink_spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.UplinkPCSpec uplink_pc_spec = 5;
  if (_internal_has_uplink_pc_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::uplink_pc_spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.L3IfSpec l3_if_spec = 6;
  if (_internal_has_l3_if_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::l3_if_spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.LoopbackIfSpec loopback_if_spec = 7;
  if (_internal_has_loopback_if_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::loopback_if_spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.ControlIfSpec control_if_spec = 8;
  if (_internal_has_control_if_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::control_if_spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.HostIfSpec host_if_spec = 9;
  if (_internal_has_host_if_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::host_if_spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.InterfaceSpec)
  return target;
}

size_t InterfaceSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.InterfaceSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 ifid = 2;
  if (this->_internal_ifid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ifid());
  }

  // .opi_api.network.cloud.v1alpha1.IfStatus admin_status = 3;
  if (this->_internal_admin_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_admin_status());
  }

  switch (ifinfo_case()) {
    // .opi_api.network.cloud.v1alpha1.UplinkSpec uplink_spec = 4;
    case kUplinkSpec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ifinfo_.uplink_spec_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.UplinkPCSpec uplink_pc_spec = 5;
    case kUplinkPcSpec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ifinfo_.uplink_pc_spec_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.L3IfSpec l3_if_spec = 6;
    case kL3IfSpec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ifinfo_.l3_if_spec_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.LoopbackIfSpec loopback_if_spec = 7;
    case kLoopbackIfSpec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ifinfo_.loopback_if_spec_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.ControlIfSpec control_if_spec = 8;
    case kControlIfSpec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ifinfo_.control_if_spec_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.HostIfSpec host_if_spec = 9;
    case kHostIfSpec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ifinfo_.host_if_spec_);
      break;
    }
    case IFINFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InterfaceSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InterfaceSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InterfaceSpec::GetClassData() const { return &_class_data_; }

void InterfaceSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InterfaceSpec *>(to)->MergeFrom(
      static_cast<const InterfaceSpec &>(from));
}


void InterfaceSpec::MergeFrom(const InterfaceSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.InterfaceSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_ifid() != 0) {
    _internal_set_ifid(from._internal_ifid());
  }
  if (from._internal_admin_status() != 0) {
    _internal_set_admin_status(from._internal_admin_status());
  }
  switch (from.ifinfo_case()) {
    case kUplinkSpec: {
      _internal_mutable_uplink_spec()->::opi_api::network::cloud::v1alpha1::UplinkSpec::MergeFrom(from._internal_uplink_spec());
      break;
    }
    case kUplinkPcSpec: {
      _internal_mutable_uplink_pc_spec()->::opi_api::network::cloud::v1alpha1::UplinkPCSpec::MergeFrom(from._internal_uplink_pc_spec());
      break;
    }
    case kL3IfSpec: {
      _internal_mutable_l3_if_spec()->::opi_api::network::cloud::v1alpha1::L3IfSpec::MergeFrom(from._internal_l3_if_spec());
      break;
    }
    case kLoopbackIfSpec: {
      _internal_mutable_loopback_if_spec()->::opi_api::network::cloud::v1alpha1::LoopbackIfSpec::MergeFrom(from._internal_loopback_if_spec());
      break;
    }
    case kControlIfSpec: {
      _internal_mutable_control_if_spec()->::opi_api::network::cloud::v1alpha1::ControlIfSpec::MergeFrom(from._internal_control_if_spec());
      break;
    }
    case kHostIfSpec: {
      _internal_mutable_host_if_spec()->::opi_api::network::cloud::v1alpha1::HostIfSpec::MergeFrom(from._internal_host_if_spec());
      break;
    }
    case IFINFO_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InterfaceSpec::CopyFrom(const InterfaceSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.InterfaceSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceSpec::IsInitialized() const {
  return true;
}

void InterfaceSpec::InternalSwap(InterfaceSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterfaceSpec, admin_status_)
      + sizeof(InterfaceSpec::admin_status_)
      - PROTOBUF_FIELD_OFFSET(InterfaceSpec, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(ifinfo_, other->ifinfo_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterfaceSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[1]);
}

// ===================================================================

class UplinkSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& port_id(const UplinkSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
UplinkSpec::_Internal::port_id(const UplinkSpec* msg) {
  return *msg->port_id_;
}
void UplinkSpec::clear_port_id() {
  if (GetArenaForAllocation() == nullptr && port_id_ != nullptr) {
    delete port_id_;
  }
  port_id_ = nullptr;
}
UplinkSpec::UplinkSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.UplinkSpec)
}
UplinkSpec::UplinkSpec(const UplinkSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_port_id()) {
    port_id_ = new ::opi_api::common::v1::ObjectKey(*from.port_id_);
  } else {
    port_id_ = nullptr;
  }
  native_vlanid_ = from.native_vlanid_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.UplinkSpec)
}

inline void UplinkSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&native_vlanid_) -
    reinterpret_cast<char*>(&port_id_)) + sizeof(native_vlanid_));
}

UplinkSpec::~UplinkSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.UplinkSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UplinkSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete port_id_;
}

void UplinkSpec::ArenaDtor(void* object) {
  UplinkSpec* _this = reinterpret_cast< UplinkSpec* >(object);
  (void)_this;
}
void UplinkSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UplinkSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UplinkSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.UplinkSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && port_id_ != nullptr) {
    delete port_id_;
  }
  port_id_ = nullptr;
  native_vlanid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UplinkSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey port_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_port_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 native_vlanid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          native_vlanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UplinkSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.UplinkSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey port_id = 1;
  if (this->_internal_has_port_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::port_id(this), target, stream);
  }

  // int32 native_vlanid = 2;
  if (this->_internal_native_vlanid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_native_vlanid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.UplinkSpec)
  return target;
}

size_t UplinkSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.UplinkSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey port_id = 1;
  if (this->_internal_has_port_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *port_id_);
  }

  // int32 native_vlanid = 2;
  if (this->_internal_native_vlanid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_native_vlanid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UplinkSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UplinkSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UplinkSpec::GetClassData() const { return &_class_data_; }

void UplinkSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UplinkSpec *>(to)->MergeFrom(
      static_cast<const UplinkSpec &>(from));
}


void UplinkSpec::MergeFrom(const UplinkSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.UplinkSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_port_id()) {
    _internal_mutable_port_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_port_id());
  }
  if (from._internal_native_vlanid() != 0) {
    _internal_set_native_vlanid(from._internal_native_vlanid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UplinkSpec::CopyFrom(const UplinkSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.UplinkSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UplinkSpec::IsInitialized() const {
  return true;
}

void UplinkSpec::InternalSwap(UplinkSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UplinkSpec, native_vlanid_)
      + sizeof(UplinkSpec::native_vlanid_)
      - PROTOBUF_FIELD_OFFSET(UplinkSpec, port_id_)>(
          reinterpret_cast<char*>(&port_id_),
          reinterpret_cast<char*>(&other->port_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UplinkSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[2]);
}

// ===================================================================

class UplinkPCSpec::_Internal {
 public:
};

UplinkPCSpec::UplinkPCSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.UplinkPCSpec)
}
UplinkPCSpec::UplinkPCSpec(const UplinkPCSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&member_ifids_bitmap_, &from.member_ifids_bitmap_,
    static_cast<size_t>(reinterpret_cast<char*>(&native_vlanid_) -
    reinterpret_cast<char*>(&member_ifids_bitmap_)) + sizeof(native_vlanid_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.UplinkPCSpec)
}

inline void UplinkPCSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&member_ifids_bitmap_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&native_vlanid_) -
    reinterpret_cast<char*>(&member_ifids_bitmap_)) + sizeof(native_vlanid_));
}

UplinkPCSpec::~UplinkPCSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.UplinkPCSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UplinkPCSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UplinkPCSpec::ArenaDtor(void* object) {
  UplinkPCSpec* _this = reinterpret_cast< UplinkPCSpec* >(object);
  (void)_this;
}
void UplinkPCSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UplinkPCSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UplinkPCSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.UplinkPCSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&member_ifids_bitmap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&native_vlanid_) -
      reinterpret_cast<char*>(&member_ifids_bitmap_)) + sizeof(native_vlanid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UplinkPCSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 member_ifids_bitmap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          member_ifids_bitmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 native_vlanid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          native_vlanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UplinkPCSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.UplinkPCSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 member_ifids_bitmap = 1;
  if (this->_internal_member_ifids_bitmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_member_ifids_bitmap(), target);
  }

  // int32 native_vlanid = 2;
  if (this->_internal_native_vlanid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_native_vlanid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.UplinkPCSpec)
  return target;
}

size_t UplinkPCSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.UplinkPCSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 member_ifids_bitmap = 1;
  if (this->_internal_member_ifids_bitmap() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_member_ifids_bitmap());
  }

  // int32 native_vlanid = 2;
  if (this->_internal_native_vlanid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_native_vlanid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UplinkPCSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UplinkPCSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UplinkPCSpec::GetClassData() const { return &_class_data_; }

void UplinkPCSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UplinkPCSpec *>(to)->MergeFrom(
      static_cast<const UplinkPCSpec &>(from));
}


void UplinkPCSpec::MergeFrom(const UplinkPCSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.UplinkPCSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_member_ifids_bitmap() != 0) {
    _internal_set_member_ifids_bitmap(from._internal_member_ifids_bitmap());
  }
  if (from._internal_native_vlanid() != 0) {
    _internal_set_native_vlanid(from._internal_native_vlanid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UplinkPCSpec::CopyFrom(const UplinkPCSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.UplinkPCSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UplinkPCSpec::IsInitialized() const {
  return true;
}

void UplinkPCSpec::InternalSwap(UplinkPCSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UplinkPCSpec, native_vlanid_)
      + sizeof(UplinkPCSpec::native_vlanid_)
      - PROTOBUF_FIELD_OFFSET(UplinkPCSpec, member_ifids_bitmap_)>(
          reinterpret_cast<char*>(&member_ifids_bitmap_),
          reinterpret_cast<char*>(&other->member_ifids_bitmap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UplinkPCSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[3]);
}

// ===================================================================

class L3IfSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& vpc_id(const L3IfSpec* msg);
  static const ::opi_api::common::v1::ObjectKey& port_id(const L3IfSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::Encap& encap(const L3IfSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
L3IfSpec::_Internal::vpc_id(const L3IfSpec* msg) {
  return *msg->vpc_id_;
}
const ::opi_api::common::v1::ObjectKey&
L3IfSpec::_Internal::port_id(const L3IfSpec* msg) {
  return *msg->port_id_;
}
const ::opi_api::network::opinetcommon::v1alpha1::Encap&
L3IfSpec::_Internal::encap(const L3IfSpec* msg) {
  return *msg->encap_;
}
void L3IfSpec::clear_vpc_id() {
  if (GetArenaForAllocation() == nullptr && vpc_id_ != nullptr) {
    delete vpc_id_;
  }
  vpc_id_ = nullptr;
}
void L3IfSpec::clear_port_id() {
  if (GetArenaForAllocation() == nullptr && port_id_ != nullptr) {
    delete port_id_;
  }
  port_id_ = nullptr;
}
void L3IfSpec::clear_prefix() {
  prefix_.Clear();
}
void L3IfSpec::clear_encap() {
  if (GetArenaForAllocation() == nullptr && encap_ != nullptr) {
    delete encap_;
  }
  encap_ = nullptr;
}
L3IfSpec::L3IfSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  prefix_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.L3IfSpec)
}
L3IfSpec::L3IfSpec(const L3IfSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      prefix_(from.prefix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_vpc_id()) {
    vpc_id_ = new ::opi_api::common::v1::ObjectKey(*from.vpc_id_);
  } else {
    vpc_id_ = nullptr;
  }
  if (from._internal_has_port_id()) {
    port_id_ = new ::opi_api::common::v1::ObjectKey(*from.port_id_);
  } else {
    port_id_ = nullptr;
  }
  if (from._internal_has_encap()) {
    encap_ = new ::opi_api::network::opinetcommon::v1alpha1::Encap(*from.encap_);
  } else {
    encap_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.L3IfSpec)
}

inline void L3IfSpec::SharedCtor() {
mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vpc_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encap_) -
    reinterpret_cast<char*>(&vpc_id_)) + sizeof(encap_));
}

L3IfSpec::~L3IfSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.L3IfSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void L3IfSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vpc_id_;
  if (this != internal_default_instance()) delete port_id_;
  if (this != internal_default_instance()) delete encap_;
}

void L3IfSpec::ArenaDtor(void* object) {
  L3IfSpec* _this = reinterpret_cast< L3IfSpec* >(object);
  (void)_this;
}
void L3IfSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void L3IfSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void L3IfSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.L3IfSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.Clear();
  mac_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && vpc_id_ != nullptr) {
    delete vpc_id_;
  }
  vpc_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && port_id_ != nullptr) {
    delete port_id_;
  }
  port_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && encap_ != nullptr) {
    delete encap_;
  }
  encap_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* L3IfSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey vpc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpc_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prefix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey port_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_port_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_encap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mac_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* L3IfSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.L3IfSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey vpc_id = 1;
  if (this->_internal_has_vpc_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vpc_id(this), target, stream);
  }

  // repeated .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prefix_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_prefix(i), target, stream);
  }

  // .opi_api.common.v1.ObjectKey port_id = 3;
  if (this->_internal_has_port_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::port_id(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 4;
  if (this->_internal_has_encap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::encap(this), target, stream);
  }

  // bytes mac_address = 5;
  if (!this->_internal_mac_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_mac_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.L3IfSpec)
  return target;
}

size_t L3IfSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.L3IfSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 2;
  total_size += 1UL * this->_internal_prefix_size();
  for (const auto& msg : this->prefix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes mac_address = 5;
  if (!this->_internal_mac_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac_address());
  }

  // .opi_api.common.v1.ObjectKey vpc_id = 1;
  if (this->_internal_has_vpc_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vpc_id_);
  }

  // .opi_api.common.v1.ObjectKey port_id = 3;
  if (this->_internal_has_port_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *port_id_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 4;
  if (this->_internal_has_encap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encap_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData L3IfSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    L3IfSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*L3IfSpec::GetClassData() const { return &_class_data_; }

void L3IfSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<L3IfSpec *>(to)->MergeFrom(
      static_cast<const L3IfSpec &>(from));
}


void L3IfSpec::MergeFrom(const L3IfSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.L3IfSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  prefix_.MergeFrom(from.prefix_);
  if (!from._internal_mac_address().empty()) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (from._internal_has_vpc_id()) {
    _internal_mutable_vpc_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_vpc_id());
  }
  if (from._internal_has_port_id()) {
    _internal_mutable_port_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_port_id());
  }
  if (from._internal_has_encap()) {
    _internal_mutable_encap()->::opi_api::network::opinetcommon::v1alpha1::Encap::MergeFrom(from._internal_encap());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void L3IfSpec::CopyFrom(const L3IfSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.L3IfSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L3IfSpec::IsInitialized() const {
  return true;
}

void L3IfSpec::InternalSwap(L3IfSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  prefix_.InternalSwap(&other->prefix_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_address_, lhs_arena,
      &other->mac_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(L3IfSpec, encap_)
      + sizeof(L3IfSpec::encap_)
      - PROTOBUF_FIELD_OFFSET(L3IfSpec, vpc_id_)>(
          reinterpret_cast<char*>(&vpc_id_),
          reinterpret_cast<char*>(&other->vpc_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata L3IfSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[4]);
}

// ===================================================================

class BGPCommunity::_Internal {
 public:
};

BGPCommunity::BGPCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BGPCommunity)
}
BGPCommunity::BGPCommunity(const BGPCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&community_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(community_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BGPCommunity)
}

inline void BGPCommunity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&asn_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&community_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(community_));
}

BGPCommunity::~BGPCommunity() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.BGPCommunity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BGPCommunity::ArenaDtor(void* object) {
  BGPCommunity* _this = reinterpret_cast< BGPCommunity* >(object);
  (void)_this;
}
void BGPCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.BGPCommunity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&community_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(community_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 community = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          community_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BGPCommunity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.BGPCommunity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 asn = 1;
  if (this->_internal_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_asn(), target);
  }

  // int32 community = 2;
  if (this->_internal_community() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.BGPCommunity)
  return target;
}

size_t BGPCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.BGPCommunity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 asn = 1;
  if (this->_internal_asn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_asn());
  }

  // int32 community = 2;
  if (this->_internal_community() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_community());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPCommunity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPCommunity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPCommunity::GetClassData() const { return &_class_data_; }

void BGPCommunity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BGPCommunity *>(to)->MergeFrom(
      static_cast<const BGPCommunity &>(from));
}


void BGPCommunity::MergeFrom(const BGPCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.BGPCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from._internal_community() != 0) {
    _internal_set_community(from._internal_community());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPCommunity::CopyFrom(const BGPCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.BGPCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPCommunity::IsInitialized() const {
  return true;
}

void BGPCommunity::InternalSwap(BGPCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPCommunity, community_)
      + sizeof(BGPCommunity::community_)
      - PROTOBUF_FIELD_OFFSET(BGPCommunity, asn_)>(
          reinterpret_cast<char*>(&asn_),
          reinterpret_cast<char*>(&other->asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[5]);
}

// ===================================================================

class LoopbackIfSpec::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& prefix(const LoopbackIfSpec* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&
LoopbackIfSpec::_Internal::prefix(const LoopbackIfSpec* msg) {
  return *msg->prefix_;
}
void LoopbackIfSpec::clear_prefix() {
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
}
LoopbackIfSpec::LoopbackIfSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  communities_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.LoopbackIfSpec)
}
LoopbackIfSpec::LoopbackIfSpec(const LoopbackIfSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      communities_(from.communities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prefix()) {
    prefix_ = new ::opi_api::network::opinetcommon::v1alpha1::IPPrefix(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.LoopbackIfSpec)
}

inline void LoopbackIfSpec::SharedCtor() {
prefix_ = nullptr;
}

LoopbackIfSpec::~LoopbackIfSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.LoopbackIfSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoopbackIfSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete prefix_;
}

void LoopbackIfSpec::ArenaDtor(void* object) {
  LoopbackIfSpec* _this = reinterpret_cast< LoopbackIfSpec* >(object);
  (void)_this;
}
void LoopbackIfSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoopbackIfSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoopbackIfSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.LoopbackIfSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communities_.Clear();
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoopbackIfSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.network.cloud.v1alpha1.BGPCommunity communities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_communities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoopbackIfSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.LoopbackIfSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 1;
  if (this->_internal_has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prefix(this), target, stream);
  }

  // repeated .opi_api.network.cloud.v1alpha1.BGPCommunity communities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_communities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_communities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.LoopbackIfSpec)
  return target;
}

size_t LoopbackIfSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.LoopbackIfSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.cloud.v1alpha1.BGPCommunity communities = 2;
  total_size += 1UL * this->_internal_communities_size();
  for (const auto& msg : this->communities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 1;
  if (this->_internal_has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoopbackIfSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoopbackIfSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoopbackIfSpec::GetClassData() const { return &_class_data_; }

void LoopbackIfSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoopbackIfSpec *>(to)->MergeFrom(
      static_cast<const LoopbackIfSpec &>(from));
}


void LoopbackIfSpec::MergeFrom(const LoopbackIfSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.LoopbackIfSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  communities_.MergeFrom(from.communities_);
  if (from._internal_has_prefix()) {
    _internal_mutable_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(from._internal_prefix());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoopbackIfSpec::CopyFrom(const LoopbackIfSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.LoopbackIfSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopbackIfSpec::IsInitialized() const {
  return true;
}

void LoopbackIfSpec::InternalSwap(LoopbackIfSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  communities_.InternalSwap(&other->communities_);
  swap(prefix_, other->prefix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoopbackIfSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[6]);
}

// ===================================================================

class ControlIfSpec::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& prefix(const ControlIfSpec* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&
ControlIfSpec::_Internal::prefix(const ControlIfSpec* msg) {
  return *msg->prefix_;
}
void ControlIfSpec::clear_prefix() {
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
}
ControlIfSpec::ControlIfSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.ControlIfSpec)
}
ControlIfSpec::ControlIfSpec(const ControlIfSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_prefix()) {
    prefix_ = new ::opi_api::network::opinetcommon::v1alpha1::IPPrefix(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.ControlIfSpec)
}

inline void ControlIfSpec::SharedCtor() {
mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prefix_ = nullptr;
}

ControlIfSpec::~ControlIfSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.ControlIfSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlIfSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete prefix_;
}

void ControlIfSpec::ArenaDtor(void* object) {
  ControlIfSpec* _this = reinterpret_cast< ControlIfSpec* >(object);
  (void)_this;
}
void ControlIfSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlIfSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlIfSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.ControlIfSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlIfSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mac_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlIfSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.ControlIfSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 1;
  if (this->_internal_has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prefix(this), target, stream);
  }

  // bytes mac_address = 2;
  if (!this->_internal_mac_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_mac_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.ControlIfSpec)
  return target;
}

size_t ControlIfSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.ControlIfSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes mac_address = 2;
  if (!this->_internal_mac_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac_address());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 1;
  if (this->_internal_has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlIfSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlIfSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlIfSpec::GetClassData() const { return &_class_data_; }

void ControlIfSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlIfSpec *>(to)->MergeFrom(
      static_cast<const ControlIfSpec &>(from));
}


void ControlIfSpec::MergeFrom(const ControlIfSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.ControlIfSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mac_address().empty()) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (from._internal_has_prefix()) {
    _internal_mutable_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(from._internal_prefix());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlIfSpec::CopyFrom(const ControlIfSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.ControlIfSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlIfSpec::IsInitialized() const {
  return true;
}

void ControlIfSpec::InternalSwap(ControlIfSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_address_, lhs_arena,
      &other->mac_address_, rhs_arena
  );
  swap(prefix_, other->prefix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlIfSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[7]);
}

// ===================================================================

class HostIfSpec::_Internal {
 public:
};

HostIfSpec::HostIfSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.HostIfSpec)
}
HostIfSpec::HostIfSpec(const HostIfSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac_address(), 
      GetArenaForAllocation());
  }
  ifname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ifname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ifname().empty()) {
    ifname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ifname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&vf_, &from.vf_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_connection_tracking_) -
    reinterpret_cast<char*>(&vf_)) + sizeof(enable_connection_tracking_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.HostIfSpec)
}

inline void HostIfSpec::SharedCtor() {
mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ifname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ifname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vf_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_connection_tracking_) -
    reinterpret_cast<char*>(&vf_)) + sizeof(enable_connection_tracking_));
}

HostIfSpec::~HostIfSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.HostIfSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HostIfSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ifname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostIfSpec::ArenaDtor(void* object) {
  HostIfSpec* _this = reinterpret_cast< HostIfSpec* >(object);
  (void)_this;
}
void HostIfSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostIfSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostIfSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.HostIfSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_address_.ClearToEmpty();
  ifname_.ClearToEmpty();
  ::memset(&vf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_connection_tracking_) -
      reinterpret_cast<char*>(&vf_)) + sizeof(enable_connection_tracking_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostIfSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool vf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          vf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_connection_tracking = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          enable_connection_tracking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mac_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ifname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ifname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.HostIfSpec.ifname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostIfSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.HostIfSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool vf = 1;
  if (this->_internal_vf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_vf(), target);
  }

  // bool enable_connection_tracking = 2;
  if (this->_internal_enable_connection_tracking() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_connection_tracking(), target);
  }

  // bytes mac_address = 3;
  if (!this->_internal_mac_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_mac_address(), target);
  }

  // string ifname = 4;
  if (!this->_internal_ifname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ifname().data(), static_cast<int>(this->_internal_ifname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.HostIfSpec.ifname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ifname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.HostIfSpec)
  return target;
}

size_t HostIfSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.HostIfSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes mac_address = 3;
  if (!this->_internal_mac_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac_address());
  }

  // string ifname = 4;
  if (!this->_internal_ifname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ifname());
  }

  // bool vf = 1;
  if (this->_internal_vf() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_connection_tracking = 2;
  if (this->_internal_enable_connection_tracking() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostIfSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HostIfSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostIfSpec::GetClassData() const { return &_class_data_; }

void HostIfSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HostIfSpec *>(to)->MergeFrom(
      static_cast<const HostIfSpec &>(from));
}


void HostIfSpec::MergeFrom(const HostIfSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.HostIfSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mac_address().empty()) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (!from._internal_ifname().empty()) {
    _internal_set_ifname(from._internal_ifname());
  }
  if (from._internal_vf() != 0) {
    _internal_set_vf(from._internal_vf());
  }
  if (from._internal_enable_connection_tracking() != 0) {
    _internal_set_enable_connection_tracking(from._internal_enable_connection_tracking());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostIfSpec::CopyFrom(const HostIfSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.HostIfSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostIfSpec::IsInitialized() const {
  return true;
}

void HostIfSpec::InternalSwap(HostIfSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_address_, lhs_arena,
      &other->mac_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ifname_, lhs_arena,
      &other->ifname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostIfSpec, enable_connection_tracking_)
      + sizeof(HostIfSpec::enable_connection_tracking_)
      - PROTOBUF_FIELD_OFFSET(HostIfSpec, vf_)>(
          reinterpret_cast<char*>(&vf_),
          reinterpret_cast<char*>(&other->vf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostIfSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[8]);
}

// ===================================================================

class UplinkIfStatus::_Internal {
 public:
};

UplinkIfStatus::UplinkIfStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.UplinkIfStatus)
}
UplinkIfStatus::UplinkIfStatus(const UplinkIfStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hw_if_idx_, &from.hw_if_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&hw_port_number_) -
    reinterpret_cast<char*>(&hw_if_idx_)) + sizeof(hw_port_number_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.UplinkIfStatus)
}

inline void UplinkIfStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hw_if_idx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hw_port_number_) -
    reinterpret_cast<char*>(&hw_if_idx_)) + sizeof(hw_port_number_));
}

UplinkIfStatus::~UplinkIfStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.UplinkIfStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UplinkIfStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UplinkIfStatus::ArenaDtor(void* object) {
  UplinkIfStatus* _this = reinterpret_cast< UplinkIfStatus* >(object);
  (void)_this;
}
void UplinkIfStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UplinkIfStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UplinkIfStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.UplinkIfStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hw_if_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hw_port_number_) -
      reinterpret_cast<char*>(&hw_if_idx_)) + sizeof(hw_port_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UplinkIfStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 hw_if_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          hw_if_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hw_port_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          hw_port_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UplinkIfStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.UplinkIfStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hw_if_idx = 1;
  if (this->_internal_hw_if_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hw_if_idx(), target);
  }

  // int32 hw_port_number = 2;
  if (this->_internal_hw_port_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hw_port_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.UplinkIfStatus)
  return target;
}

size_t UplinkIfStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.UplinkIfStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 hw_if_idx = 1;
  if (this->_internal_hw_if_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hw_if_idx());
  }

  // int32 hw_port_number = 2;
  if (this->_internal_hw_port_number() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hw_port_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UplinkIfStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UplinkIfStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UplinkIfStatus::GetClassData() const { return &_class_data_; }

void UplinkIfStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UplinkIfStatus *>(to)->MergeFrom(
      static_cast<const UplinkIfStatus &>(from));
}


void UplinkIfStatus::MergeFrom(const UplinkIfStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.UplinkIfStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hw_if_idx() != 0) {
    _internal_set_hw_if_idx(from._internal_hw_if_idx());
  }
  if (from._internal_hw_port_number() != 0) {
    _internal_set_hw_port_number(from._internal_hw_port_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UplinkIfStatus::CopyFrom(const UplinkIfStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.UplinkIfStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UplinkIfStatus::IsInitialized() const {
  return true;
}

void UplinkIfStatus::InternalSwap(UplinkIfStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UplinkIfStatus, hw_port_number_)
      + sizeof(UplinkIfStatus::hw_port_number_)
      - PROTOBUF_FIELD_OFFSET(UplinkIfStatus, hw_if_idx_)>(
          reinterpret_cast<char*>(&hw_if_idx_),
          reinterpret_cast<char*>(&other->hw_if_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UplinkIfStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[9]);
}

// ===================================================================

class LoopbackIfStatus::_Internal {
 public:
};

LoopbackIfStatus::LoopbackIfStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.LoopbackIfStatus)
}
LoopbackIfStatus::LoopbackIfStatus(const LoopbackIfStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ifname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ifname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ifname().empty()) {
    ifname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ifname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.LoopbackIfStatus)
}

inline void LoopbackIfStatus::SharedCtor() {
ifname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ifname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoopbackIfStatus::~LoopbackIfStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.LoopbackIfStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoopbackIfStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ifname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoopbackIfStatus::ArenaDtor(void* object) {
  LoopbackIfStatus* _this = reinterpret_cast< LoopbackIfStatus* >(object);
  (void)_this;
}
void LoopbackIfStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoopbackIfStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoopbackIfStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.LoopbackIfStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ifname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoopbackIfStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ifname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ifname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.LoopbackIfStatus.ifname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoopbackIfStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.LoopbackIfStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ifname = 1;
  if (!this->_internal_ifname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ifname().data(), static_cast<int>(this->_internal_ifname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.LoopbackIfStatus.ifname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ifname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.LoopbackIfStatus)
  return target;
}

size_t LoopbackIfStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.LoopbackIfStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ifname = 1;
  if (!this->_internal_ifname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ifname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoopbackIfStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoopbackIfStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoopbackIfStatus::GetClassData() const { return &_class_data_; }

void LoopbackIfStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoopbackIfStatus *>(to)->MergeFrom(
      static_cast<const LoopbackIfStatus &>(from));
}


void LoopbackIfStatus::MergeFrom(const LoopbackIfStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.LoopbackIfStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ifname().empty()) {
    _internal_set_ifname(from._internal_ifname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoopbackIfStatus::CopyFrom(const LoopbackIfStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.LoopbackIfStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopbackIfStatus::IsInitialized() const {
  return true;
}

void LoopbackIfStatus::InternalSwap(LoopbackIfStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ifname_, lhs_arena,
      &other->ifname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoopbackIfStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[10]);
}

// ===================================================================

class HostIfStatus::_Internal {
 public:
};

HostIfStatus::HostIfStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hw_if_idxes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.HostIfStatus)
}
HostIfStatus::HostIfStatus(const HostIfStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hw_if_idxes_(from.hw_if_idxes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac_address(), 
      GetArenaForAllocation());
  }
  ifname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ifname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ifname().empty()) {
    ifname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ifname(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.HostIfStatus)
}

inline void HostIfStatus::SharedCtor() {
mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ifname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ifname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = 0;
}

HostIfStatus::~HostIfStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.HostIfStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HostIfStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ifname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostIfStatus::ArenaDtor(void* object) {
  HostIfStatus* _this = reinterpret_cast< HostIfStatus* >(object);
  (void)_this;
}
void HostIfStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostIfStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostIfStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.HostIfStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hw_if_idxes_.Clear();
  mac_address_.ClearToEmpty();
  ifname_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostIfStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes hw_if_idxes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hw_if_idxes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes mac_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.IfStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::opi_api::network::cloud::v1alpha1::IfStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string ifname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ifname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.HostIfStatus.ifname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostIfStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.HostIfStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes hw_if_idxes = 1;
  for (int i = 0, n = this->_internal_hw_if_idxes_size(); i < n; i++) {
    const auto& s = this->_internal_hw_if_idxes(i);
    target = stream->WriteBytes(1, s, target);
  }

  // bytes mac_address = 2;
  if (!this->_internal_mac_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_mac_address(), target);
  }

  // .opi_api.network.cloud.v1alpha1.IfStatus status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string ifname = 4;
  if (!this->_internal_ifname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ifname().data(), static_cast<int>(this->_internal_ifname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.HostIfStatus.ifname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ifname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.HostIfStatus)
  return target;
}

size_t HostIfStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.HostIfStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes hw_if_idxes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hw_if_idxes_.size());
  for (int i = 0, n = hw_if_idxes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      hw_if_idxes_.Get(i));
  }

  // bytes mac_address = 2;
  if (!this->_internal_mac_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac_address());
  }

  // string ifname = 4;
  if (!this->_internal_ifname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ifname());
  }

  // .opi_api.network.cloud.v1alpha1.IfStatus status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostIfStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HostIfStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostIfStatus::GetClassData() const { return &_class_data_; }

void HostIfStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HostIfStatus *>(to)->MergeFrom(
      static_cast<const HostIfStatus &>(from));
}


void HostIfStatus::MergeFrom(const HostIfStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.HostIfStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  hw_if_idxes_.MergeFrom(from.hw_if_idxes_);
  if (!from._internal_mac_address().empty()) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (!from._internal_ifname().empty()) {
    _internal_set_ifname(from._internal_ifname());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostIfStatus::CopyFrom(const HostIfStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.HostIfStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostIfStatus::IsInitialized() const {
  return true;
}

void HostIfStatus::InternalSwap(HostIfStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  hw_if_idxes_.InternalSwap(&other->hw_if_idxes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_address_, lhs_arena,
      &other->mac_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ifname_, lhs_arena,
      &other->ifname_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostIfStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[11]);
}

// ===================================================================

class InterfaceStatus::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::UplinkIfStatus& uplink_if_status(const InterfaceStatus* msg);
  static const ::opi_api::network::cloud::v1alpha1::LoopbackIfStatus& loopback_if_status(const InterfaceStatus* msg);
  static const ::opi_api::network::cloud::v1alpha1::HostIfStatus& host_if_status(const InterfaceStatus* msg);
};

const ::opi_api::network::cloud::v1alpha1::UplinkIfStatus&
InterfaceStatus::_Internal::uplink_if_status(const InterfaceStatus* msg) {
  return *msg->ifstatus_.uplink_if_status_;
}
const ::opi_api::network::cloud::v1alpha1::LoopbackIfStatus&
InterfaceStatus::_Internal::loopback_if_status(const InterfaceStatus* msg) {
  return *msg->ifstatus_.loopback_if_status_;
}
const ::opi_api::network::cloud::v1alpha1::HostIfStatus&
InterfaceStatus::_Internal::host_if_status(const InterfaceStatus* msg) {
  return *msg->ifstatus_.host_if_status_;
}
void InterfaceStatus::set_allocated_uplink_if_status(::opi_api::network::cloud::v1alpha1::UplinkIfStatus* uplink_if_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ifstatus();
  if (uplink_if_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::UplinkIfStatus>::GetOwningArena(uplink_if_status);
    if (message_arena != submessage_arena) {
      uplink_if_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uplink_if_status, submessage_arena);
    }
    set_has_uplink_if_status();
    ifstatus_.uplink_if_status_ = uplink_if_status;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.InterfaceStatus.uplink_if_status)
}
void InterfaceStatus::set_allocated_loopback_if_status(::opi_api::network::cloud::v1alpha1::LoopbackIfStatus* loopback_if_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ifstatus();
  if (loopback_if_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::LoopbackIfStatus>::GetOwningArena(loopback_if_status);
    if (message_arena != submessage_arena) {
      loopback_if_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loopback_if_status, submessage_arena);
    }
    set_has_loopback_if_status();
    ifstatus_.loopback_if_status_ = loopback_if_status;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.InterfaceStatus.loopback_if_status)
}
void InterfaceStatus::set_allocated_host_if_status(::opi_api::network::cloud::v1alpha1::HostIfStatus* host_if_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ifstatus();
  if (host_if_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::HostIfStatus>::GetOwningArena(host_if_status);
    if (message_arena != submessage_arena) {
      host_if_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_if_status, submessage_arena);
    }
    set_has_host_if_status();
    ifstatus_.host_if_status_ = host_if_status;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.InterfaceStatus.host_if_status)
}
InterfaceStatus::InterfaceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.InterfaceStatus)
}
InterfaceStatus::InterfaceStatus(const InterfaceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&if_index_, &from.if_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_status_) -
    reinterpret_cast<char*>(&if_index_)) + sizeof(oper_status_));
  clear_has_ifstatus();
  switch (from.ifstatus_case()) {
    case kUplinkIfStatus: {
      _internal_mutable_uplink_if_status()->::opi_api::network::cloud::v1alpha1::UplinkIfStatus::MergeFrom(from._internal_uplink_if_status());
      break;
    }
    case kLoopbackIfStatus: {
      _internal_mutable_loopback_if_status()->::opi_api::network::cloud::v1alpha1::LoopbackIfStatus::MergeFrom(from._internal_loopback_if_status());
      break;
    }
    case kHostIfStatus: {
      _internal_mutable_host_if_status()->::opi_api::network::cloud::v1alpha1::HostIfStatus::MergeFrom(from._internal_host_if_status());
      break;
    }
    case IFSTATUS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.InterfaceStatus)
}

inline void InterfaceStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&if_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oper_status_) -
    reinterpret_cast<char*>(&if_index_)) + sizeof(oper_status_));
clear_has_ifstatus();
}

InterfaceStatus::~InterfaceStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.InterfaceStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InterfaceStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_ifstatus()) {
    clear_ifstatus();
  }
}

void InterfaceStatus::ArenaDtor(void* object) {
  InterfaceStatus* _this = reinterpret_cast< InterfaceStatus* >(object);
  (void)_this;
}
void InterfaceStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterfaceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InterfaceStatus::clear_ifstatus() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.InterfaceStatus)
  switch (ifstatus_case()) {
    case kUplinkIfStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete ifstatus_.uplink_if_status_;
      }
      break;
    }
    case kLoopbackIfStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete ifstatus_.loopback_if_status_;
      }
      break;
    }
    case kHostIfStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete ifstatus_.host_if_status_;
      }
      break;
    }
    case IFSTATUS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IFSTATUS_NOT_SET;
}


void InterfaceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.InterfaceStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&if_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_status_) -
      reinterpret_cast<char*>(&if_index_)) + sizeof(oper_status_));
  clear_ifstatus();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterfaceStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 if_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          if_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.IfStatus oper_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper_status(static_cast<::opi_api::network::cloud::v1alpha1::IfStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.UplinkIfStatus uplink_if_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_uplink_if_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.LoopbackIfStatus loopback_if_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_loopback_if_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.HostIfStatus host_if_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_if_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InterfaceStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.InterfaceStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 if_index = 1;
  if (this->_internal_if_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_if_index(), target);
  }

  // .opi_api.network.cloud.v1alpha1.IfStatus oper_status = 2;
  if (this->_internal_oper_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_oper_status(), target);
  }

  // .opi_api.network.cloud.v1alpha1.UplinkIfStatus uplink_if_status = 3;
  if (_internal_has_uplink_if_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::uplink_if_status(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.LoopbackIfStatus loopback_if_status = 4;
  if (_internal_has_loopback_if_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::loopback_if_status(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.HostIfStatus host_if_status = 5;
  if (_internal_has_host_if_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::host_if_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.InterfaceStatus)
  return target;
}

size_t InterfaceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.InterfaceStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 if_index = 1;
  if (this->_internal_if_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_if_index());
  }

  // .opi_api.network.cloud.v1alpha1.IfStatus oper_status = 2;
  if (this->_internal_oper_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper_status());
  }

  switch (ifstatus_case()) {
    // .opi_api.network.cloud.v1alpha1.UplinkIfStatus uplink_if_status = 3;
    case kUplinkIfStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ifstatus_.uplink_if_status_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.LoopbackIfStatus loopback_if_status = 4;
    case kLoopbackIfStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ifstatus_.loopback_if_status_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.HostIfStatus host_if_status = 5;
    case kHostIfStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ifstatus_.host_if_status_);
      break;
    }
    case IFSTATUS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InterfaceStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InterfaceStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InterfaceStatus::GetClassData() const { return &_class_data_; }

void InterfaceStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InterfaceStatus *>(to)->MergeFrom(
      static_cast<const InterfaceStatus &>(from));
}


void InterfaceStatus::MergeFrom(const InterfaceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.InterfaceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_if_index() != 0) {
    _internal_set_if_index(from._internal_if_index());
  }
  if (from._internal_oper_status() != 0) {
    _internal_set_oper_status(from._internal_oper_status());
  }
  switch (from.ifstatus_case()) {
    case kUplinkIfStatus: {
      _internal_mutable_uplink_if_status()->::opi_api::network::cloud::v1alpha1::UplinkIfStatus::MergeFrom(from._internal_uplink_if_status());
      break;
    }
    case kLoopbackIfStatus: {
      _internal_mutable_loopback_if_status()->::opi_api::network::cloud::v1alpha1::LoopbackIfStatus::MergeFrom(from._internal_loopback_if_status());
      break;
    }
    case kHostIfStatus: {
      _internal_mutable_host_if_status()->::opi_api::network::cloud::v1alpha1::HostIfStatus::MergeFrom(from._internal_host_if_status());
      break;
    }
    case IFSTATUS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InterfaceStatus::CopyFrom(const InterfaceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.InterfaceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceStatus::IsInitialized() const {
  return true;
}

void InterfaceStatus::InternalSwap(InterfaceStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterfaceStatus, oper_status_)
      + sizeof(InterfaceStatus::oper_status_)
      - PROTOBUF_FIELD_OFFSET(InterfaceStatus, if_index_)>(
          reinterpret_cast<char*>(&if_index_),
          reinterpret_cast<char*>(&other->if_index_));
  swap(ifstatus_, other->ifstatus_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterfaceStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2eproto_getter, &descriptor_table_interface_2eproto_once,
      file_level_metadata_interface_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::Interface* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::Interface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::Interface >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::InterfaceSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::InterfaceSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::InterfaceSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::UplinkSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UplinkSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::UplinkSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::UplinkPCSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UplinkPCSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::UplinkPCSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::L3IfSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::L3IfSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::L3IfSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BGPCommunity* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BGPCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BGPCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::LoopbackIfSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::LoopbackIfSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::LoopbackIfSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::ControlIfSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::ControlIfSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::ControlIfSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::HostIfSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::HostIfSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::HostIfSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::UplinkIfStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UplinkIfStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::UplinkIfStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::LoopbackIfStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::LoopbackIfStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::LoopbackIfStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::HostIfStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::HostIfStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::HostIfStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::InterfaceStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::InterfaceStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::InterfaceStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
