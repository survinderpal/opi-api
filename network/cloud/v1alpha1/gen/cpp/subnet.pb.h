// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subnet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_subnet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_subnet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "object_key.pb.h"
#include "networktypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_subnet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_subnet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_subnet_2eproto;
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
class Subnet;
struct SubnetDefaultTypeInternal;
extern SubnetDefaultTypeInternal _Subnet_default_instance_;
class SubnetSpec;
struct SubnetSpecDefaultTypeInternal;
extern SubnetSpecDefaultTypeInternal _SubnetSpec_default_instance_;
class SubnetStatus;
struct SubnetStatusDefaultTypeInternal;
extern SubnetStatusDefaultTypeInternal _SubnetStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::cloud::v1alpha1::Subnet* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Subnet>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SubnetSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SubnetSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SubnetStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SubnetStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {

// ===================================================================

class Subnet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.Subnet) */ {
 public:
  inline Subnet() : Subnet(nullptr) {}
  ~Subnet() override;
  explicit constexpr Subnet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subnet(const Subnet& from);
  Subnet(Subnet&& from) noexcept
    : Subnet() {
    *this = ::std::move(from);
  }

  inline Subnet& operator=(const Subnet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subnet& operator=(Subnet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subnet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subnet* internal_default_instance() {
    return reinterpret_cast<const Subnet*>(
               &_Subnet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Subnet& a, Subnet& b) {
    a.Swap(&b);
  }
  inline void Swap(Subnet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subnet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Subnet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Subnet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Subnet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Subnet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subnet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.Subnet";
  }
  protected:
  explicit Subnet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // .opi_api.network.cloud.v1alpha1.SubnetSpec spec = 3;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::SubnetSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SubnetSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::SubnetSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::SubnetSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::SubnetSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::SubnetSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::SubnetSpec* spec);
  ::opi_api::network::cloud::v1alpha1::SubnetSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.SubnetStatus status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::cloud::v1alpha1::SubnetStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SubnetStatus* release_status();
  ::opi_api::network::cloud::v1alpha1::SubnetStatus* mutable_status();
  void set_allocated_status(::opi_api::network::cloud::v1alpha1::SubnetStatus* status);
  private:
  const ::opi_api::network::cloud::v1alpha1::SubnetStatus& _internal_status() const;
  ::opi_api::network::cloud::v1alpha1::SubnetStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::cloud::v1alpha1::SubnetStatus* status);
  ::opi_api::network::cloud::v1alpha1::SubnetStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.Subnet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::SubnetSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::SubnetStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_subnet_2eproto;
};
// -------------------------------------------------------------------

class SubnetSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SubnetSpec) */ {
 public:
  inline SubnetSpec() : SubnetSpec(nullptr) {}
  ~SubnetSpec() override;
  explicit constexpr SubnetSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubnetSpec(const SubnetSpec& from);
  SubnetSpec(SubnetSpec&& from) noexcept
    : SubnetSpec() {
    *this = ::std::move(from);
  }

  inline SubnetSpec& operator=(const SubnetSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubnetSpec& operator=(SubnetSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubnetSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubnetSpec* internal_default_instance() {
    return reinterpret_cast<const SubnetSpec*>(
               &_SubnetSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubnetSpec& a, SubnetSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(SubnetSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubnetSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubnetSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubnetSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubnetSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubnetSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubnetSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SubnetSpec";
  }
  protected:
  explicit SubnetSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIngessV4SecurityPolicyIdFieldNumber = 10,
    kIngressV6SecurityPolicyIdFieldNumber = 11,
    kEgressV4SecurityPolicyIdFieldNumber = 12,
    kEgressV6SecurityPolicyIdFieldNumber = 13,
    kHostInterfaceIdFieldNumber = 16,
    kIpv6VirtualRouterIpFieldNumber = 6,
    kVirtualRouterMacFieldNumber = 7,
    kIdFieldNumber = 1,
    kVpcIdFieldNumber = 2,
    kV4PrefixFieldNumber = 3,
    kV6PrefixFieldNumber = 4,
    kV4RouteTableIdFieldNumber = 8,
    kV6RouterTableIdFieldNumber = 9,
    kAccessEncapFieldNumber = 14,
    kFabricEncapFieldNumber = 15,
    kIngressDefaultSgPolicyFieldNumber = 20,
    kEgressDefaultSgPolicyFieldNumber = 21,
    kIpv4VirtualRouterIpFieldNumber = 5,
    kTosFieldNumber = 18,
    kConnectedFieldNumber = 19,
    kRemoteSubnetFieldNumber = 22,
  };
  // repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;
  int ingess_v4_security_policy_id_size() const;
  private:
  int _internal_ingess_v4_security_policy_id_size() const;
  public:
  void clear_ingess_v4_security_policy_id();
  ::opi_api::common::v1::ObjectKey* mutable_ingess_v4_security_policy_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
      mutable_ingess_v4_security_policy_id();
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_ingess_v4_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* _internal_add_ingess_v4_security_policy_id();
  public:
  const ::opi_api::common::v1::ObjectKey& ingess_v4_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* add_ingess_v4_security_policy_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
      ingess_v4_security_policy_id() const;

  // repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;
  int ingress_v6_security_policy_id_size() const;
  private:
  int _internal_ingress_v6_security_policy_id_size() const;
  public:
  void clear_ingress_v6_security_policy_id();
  ::opi_api::common::v1::ObjectKey* mutable_ingress_v6_security_policy_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
      mutable_ingress_v6_security_policy_id();
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_ingress_v6_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* _internal_add_ingress_v6_security_policy_id();
  public:
  const ::opi_api::common::v1::ObjectKey& ingress_v6_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* add_ingress_v6_security_policy_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
      ingress_v6_security_policy_id() const;

  // repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;
  int egress_v4_security_policy_id_size() const;
  private:
  int _internal_egress_v4_security_policy_id_size() const;
  public:
  void clear_egress_v4_security_policy_id();
  ::opi_api::common::v1::ObjectKey* mutable_egress_v4_security_policy_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
      mutable_egress_v4_security_policy_id();
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_egress_v4_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* _internal_add_egress_v4_security_policy_id();
  public:
  const ::opi_api::common::v1::ObjectKey& egress_v4_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* add_egress_v4_security_policy_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
      egress_v4_security_policy_id() const;

  // repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;
  int egress_v6_security_policy_id_size() const;
  private:
  int _internal_egress_v6_security_policy_id_size() const;
  public:
  void clear_egress_v6_security_policy_id();
  ::opi_api::common::v1::ObjectKey* mutable_egress_v6_security_policy_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
      mutable_egress_v6_security_policy_id();
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_egress_v6_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* _internal_add_egress_v6_security_policy_id();
  public:
  const ::opi_api::common::v1::ObjectKey& egress_v6_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* add_egress_v6_security_policy_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
      egress_v6_security_policy_id() const;

  // repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;
  int host_interface_id_size() const;
  private:
  int _internal_host_interface_id_size() const;
  public:
  void clear_host_interface_id();
  ::opi_api::common::v1::ObjectKey* mutable_host_interface_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
      mutable_host_interface_id();
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_host_interface_id(int index) const;
  ::opi_api::common::v1::ObjectKey* _internal_add_host_interface_id();
  public:
  const ::opi_api::common::v1::ObjectKey& host_interface_id(int index) const;
  ::opi_api::common::v1::ObjectKey* add_host_interface_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
      host_interface_id() const;

  // bytes ipv6_virtual_router_ip = 6;
  void clear_ipv6_virtual_router_ip();
  const std::string& ipv6_virtual_router_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6_virtual_router_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6_virtual_router_ip();
  PROTOBUF_NODISCARD std::string* release_ipv6_virtual_router_ip();
  void set_allocated_ipv6_virtual_router_ip(std::string* ipv6_virtual_router_ip);
  private:
  const std::string& _internal_ipv6_virtual_router_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6_virtual_router_ip(const std::string& value);
  std::string* _internal_mutable_ipv6_virtual_router_ip();
  public:

  // bytes virtual_router_mac = 7;
  void clear_virtual_router_mac();
  const std::string& virtual_router_mac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_virtual_router_mac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_virtual_router_mac();
  PROTOBUF_NODISCARD std::string* release_virtual_router_mac();
  void set_allocated_virtual_router_mac(std::string* virtual_router_mac);
  private:
  const std::string& _internal_virtual_router_mac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtual_router_mac(const std::string& value);
  std::string* _internal_mutable_virtual_router_mac();
  public:

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.common.v1.ObjectKey vpc_id = 2;
  bool has_vpc_id() const;
  private:
  bool _internal_has_vpc_id() const;
  public:
  void clear_vpc_id();
  const ::opi_api::common::v1::ObjectKey& vpc_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_vpc_id();
  ::opi_api::common::v1::ObjectKey* mutable_vpc_id();
  void set_allocated_vpc_id(::opi_api::common::v1::ObjectKey* vpc_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_vpc_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_vpc_id();
  public:
  void unsafe_arena_set_allocated_vpc_id(
      ::opi_api::common::v1::ObjectKey* vpc_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_vpc_id();

  // .opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 3;
  bool has_v4_prefix() const;
  private:
  bool _internal_has_v4_prefix() const;
  public:
  void clear_v4_prefix();
  const ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix& v4_prefix() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* release_v4_prefix();
  ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* mutable_v4_prefix();
  void set_allocated_v4_prefix(::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* v4_prefix);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix& _internal_v4_prefix() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* _internal_mutable_v4_prefix();
  public:
  void unsafe_arena_set_allocated_v4_prefix(
      ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* v4_prefix);
  ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* unsafe_arena_release_v4_prefix();

  // .opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 4;
  bool has_v6_prefix() const;
  private:
  bool _internal_has_v6_prefix() const;
  public:
  void clear_v6_prefix();
  const ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix& v6_prefix() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* release_v6_prefix();
  ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* mutable_v6_prefix();
  void set_allocated_v6_prefix(::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* v6_prefix);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix& _internal_v6_prefix() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* _internal_mutable_v6_prefix();
  public:
  void unsafe_arena_set_allocated_v6_prefix(
      ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* v6_prefix);
  ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* unsafe_arena_release_v6_prefix();

  // .opi_api.common.v1.ObjectKey v4_route_table_id = 8;
  bool has_v4_route_table_id() const;
  private:
  bool _internal_has_v4_route_table_id() const;
  public:
  void clear_v4_route_table_id();
  const ::opi_api::common::v1::ObjectKey& v4_route_table_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_v4_route_table_id();
  ::opi_api::common::v1::ObjectKey* mutable_v4_route_table_id();
  void set_allocated_v4_route_table_id(::opi_api::common::v1::ObjectKey* v4_route_table_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_v4_route_table_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_v4_route_table_id();
  public:
  void unsafe_arena_set_allocated_v4_route_table_id(
      ::opi_api::common::v1::ObjectKey* v4_route_table_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_v4_route_table_id();

  // .opi_api.common.v1.ObjectKey v6_router_table_id = 9;
  bool has_v6_router_table_id() const;
  private:
  bool _internal_has_v6_router_table_id() const;
  public:
  void clear_v6_router_table_id();
  const ::opi_api::common::v1::ObjectKey& v6_router_table_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_v6_router_table_id();
  ::opi_api::common::v1::ObjectKey* mutable_v6_router_table_id();
  void set_allocated_v6_router_table_id(::opi_api::common::v1::ObjectKey* v6_router_table_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_v6_router_table_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_v6_router_table_id();
  public:
  void unsafe_arena_set_allocated_v6_router_table_id(
      ::opi_api::common::v1::ObjectKey* v6_router_table_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_v6_router_table_id();

  // .opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 14;
  bool has_access_encap() const;
  private:
  bool _internal_has_access_encap() const;
  public:
  void clear_access_encap();
  const ::opi_api::network::opinetcommon::v1alpha1::Encap& access_encap() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::Encap* release_access_encap();
  ::opi_api::network::opinetcommon::v1alpha1::Encap* mutable_access_encap();
  void set_allocated_access_encap(::opi_api::network::opinetcommon::v1alpha1::Encap* access_encap);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::Encap& _internal_access_encap() const;
  ::opi_api::network::opinetcommon::v1alpha1::Encap* _internal_mutable_access_encap();
  public:
  void unsafe_arena_set_allocated_access_encap(
      ::opi_api::network::opinetcommon::v1alpha1::Encap* access_encap);
  ::opi_api::network::opinetcommon::v1alpha1::Encap* unsafe_arena_release_access_encap();

  // .opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 15;
  bool has_fabric_encap() const;
  private:
  bool _internal_has_fabric_encap() const;
  public:
  void clear_fabric_encap();
  const ::opi_api::network::opinetcommon::v1alpha1::Encap& fabric_encap() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::Encap* release_fabric_encap();
  ::opi_api::network::opinetcommon::v1alpha1::Encap* mutable_fabric_encap();
  void set_allocated_fabric_encap(::opi_api::network::opinetcommon::v1alpha1::Encap* fabric_encap);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::Encap& _internal_fabric_encap() const;
  ::opi_api::network::opinetcommon::v1alpha1::Encap* _internal_mutable_fabric_encap();
  public:
  void unsafe_arena_set_allocated_fabric_encap(
      ::opi_api::network::opinetcommon::v1alpha1::Encap* fabric_encap);
  ::opi_api::network::opinetcommon::v1alpha1::Encap* unsafe_arena_release_fabric_encap();

  // .opi_api.common.v1.ObjectKey ingress_default_sg_policy = 20;
  bool has_ingress_default_sg_policy() const;
  private:
  bool _internal_has_ingress_default_sg_policy() const;
  public:
  void clear_ingress_default_sg_policy();
  const ::opi_api::common::v1::ObjectKey& ingress_default_sg_policy() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_ingress_default_sg_policy();
  ::opi_api::common::v1::ObjectKey* mutable_ingress_default_sg_policy();
  void set_allocated_ingress_default_sg_policy(::opi_api::common::v1::ObjectKey* ingress_default_sg_policy);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_ingress_default_sg_policy() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_ingress_default_sg_policy();
  public:
  void unsafe_arena_set_allocated_ingress_default_sg_policy(
      ::opi_api::common::v1::ObjectKey* ingress_default_sg_policy);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_ingress_default_sg_policy();

  // .opi_api.common.v1.ObjectKey egress_default_sg_policy = 21;
  bool has_egress_default_sg_policy() const;
  private:
  bool _internal_has_egress_default_sg_policy() const;
  public:
  void clear_egress_default_sg_policy();
  const ::opi_api::common::v1::ObjectKey& egress_default_sg_policy() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_egress_default_sg_policy();
  ::opi_api::common::v1::ObjectKey* mutable_egress_default_sg_policy();
  void set_allocated_egress_default_sg_policy(::opi_api::common::v1::ObjectKey* egress_default_sg_policy);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_egress_default_sg_policy() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_egress_default_sg_policy();
  public:
  void unsafe_arena_set_allocated_egress_default_sg_policy(
      ::opi_api::common::v1::ObjectKey* egress_default_sg_policy);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_egress_default_sg_policy();

  // uint32 ipv4_virtual_router_ip = 5;
  void clear_ipv4_virtual_router_ip();
  uint32_t ipv4_virtual_router_ip() const;
  void set_ipv4_virtual_router_ip(uint32_t value);
  private:
  uint32_t _internal_ipv4_virtual_router_ip() const;
  void _internal_set_ipv4_virtual_router_ip(uint32_t value);
  public:

  // int32 tos = 18;
  void clear_tos();
  int32_t tos() const;
  void set_tos(int32_t value);
  private:
  int32_t _internal_tos() const;
  void _internal_set_tos(int32_t value);
  public:

  // bool connected = 19;
  void clear_connected();
  bool connected() const;
  void set_connected(bool value);
  private:
  bool _internal_connected() const;
  void _internal_set_connected(bool value);
  public:

  // bool remote_subnet = 22;
  void clear_remote_subnet();
  bool remote_subnet() const;
  void set_remote_subnet(bool value);
  private:
  bool _internal_remote_subnet() const;
  void _internal_set_remote_subnet(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SubnetSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey > ingess_v4_security_policy_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey > ingress_v6_security_policy_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey > egress_v4_security_policy_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey > egress_v6_security_policy_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey > host_interface_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_virtual_router_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtual_router_mac_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::common::v1::ObjectKey* vpc_id_;
  ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* v4_prefix_;
  ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* v6_prefix_;
  ::opi_api::common::v1::ObjectKey* v4_route_table_id_;
  ::opi_api::common::v1::ObjectKey* v6_router_table_id_;
  ::opi_api::network::opinetcommon::v1alpha1::Encap* access_encap_;
  ::opi_api::network::opinetcommon::v1alpha1::Encap* fabric_encap_;
  ::opi_api::common::v1::ObjectKey* ingress_default_sg_policy_;
  ::opi_api::common::v1::ObjectKey* egress_default_sg_policy_;
  uint32_t ipv4_virtual_router_ip_;
  int32_t tos_;
  bool connected_;
  bool remote_subnet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_subnet_2eproto;
};
// -------------------------------------------------------------------

class SubnetStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SubnetStatus) */ {
 public:
  inline SubnetStatus() : SubnetStatus(nullptr) {}
  ~SubnetStatus() override;
  explicit constexpr SubnetStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubnetStatus(const SubnetStatus& from);
  SubnetStatus(SubnetStatus&& from) noexcept
    : SubnetStatus() {
    *this = ::std::move(from);
  }

  inline SubnetStatus& operator=(const SubnetStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubnetStatus& operator=(SubnetStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubnetStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubnetStatus* internal_default_instance() {
    return reinterpret_cast<const SubnetStatus*>(
               &_SubnetStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubnetStatus& a, SubnetStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SubnetStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubnetStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubnetStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubnetStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubnetStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubnetStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubnetStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SubnetStatus";
  }
  protected:
  explicit SubnetStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHwIndexFieldNumber = 1,
    kVnicCountFieldNumber = 2,
  };
  // int32 hw_index = 1;
  void clear_hw_index();
  int32_t hw_index() const;
  void set_hw_index(int32_t value);
  private:
  int32_t _internal_hw_index() const;
  void _internal_set_hw_index(int32_t value);
  public:

  // int32 vnic_count = 2;
  void clear_vnic_count();
  int32_t vnic_count() const;
  void set_vnic_count(int32_t value);
  private:
  int32_t _internal_vnic_count() const;
  void _internal_set_vnic_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SubnetStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t hw_index_;
  int32_t vnic_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_subnet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Subnet

// .opi_api.network.cloud.v1alpha1.SubnetSpec spec = 3;
inline bool Subnet::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool Subnet::has_spec() const {
  return _internal_has_spec();
}
inline void Subnet::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::SubnetSpec& Subnet::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::SubnetSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SubnetSpec&>(
      ::opi_api::network::cloud::v1alpha1::_SubnetSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SubnetSpec& Subnet::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.Subnet.spec)
  return _internal_spec();
}
inline void Subnet::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::SubnetSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.Subnet.spec)
}
inline ::opi_api::network::cloud::v1alpha1::SubnetSpec* Subnet::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::SubnetSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SubnetSpec* Subnet::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.Subnet.spec)
  
  ::opi_api::network::cloud::v1alpha1::SubnetSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SubnetSpec* Subnet::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SubnetSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::SubnetSpec* Subnet::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::SubnetSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.Subnet.spec)
  return _msg;
}
inline void Subnet::set_allocated_spec(::opi_api::network::cloud::v1alpha1::SubnetSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::SubnetSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.Subnet.spec)
}

// .opi_api.network.cloud.v1alpha1.SubnetStatus status = 4;
inline bool Subnet::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Subnet::has_status() const {
  return _internal_has_status();
}
inline void Subnet::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::SubnetStatus& Subnet::_internal_status() const {
  const ::opi_api::network::cloud::v1alpha1::SubnetStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SubnetStatus&>(
      ::opi_api::network::cloud::v1alpha1::_SubnetStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SubnetStatus& Subnet::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.Subnet.status)
  return _internal_status();
}
inline void Subnet::unsafe_arena_set_allocated_status(
    ::opi_api::network::cloud::v1alpha1::SubnetStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.Subnet.status)
}
inline ::opi_api::network::cloud::v1alpha1::SubnetStatus* Subnet::release_status() {
  
  ::opi_api::network::cloud::v1alpha1::SubnetStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SubnetStatus* Subnet::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.Subnet.status)
  
  ::opi_api::network::cloud::v1alpha1::SubnetStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SubnetStatus* Subnet::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SubnetStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::cloud::v1alpha1::SubnetStatus* Subnet::mutable_status() {
  ::opi_api::network::cloud::v1alpha1::SubnetStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.Subnet.status)
  return _msg;
}
inline void Subnet::set_allocated_status(::opi_api::network::cloud::v1alpha1::SubnetStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::SubnetStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.Subnet.status)
}

// -------------------------------------------------------------------

// SubnetSpec

// .opi_api.common.v1.ObjectKey id = 1;
inline bool SubnetSpec::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool SubnetSpec::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.id)
  return _internal_id();
}
inline void SubnetSpec::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.id)
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SubnetSpec.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.id)
  return _msg;
}
inline void SubnetSpec::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.id)
}

// .opi_api.common.v1.ObjectKey vpc_id = 2;
inline bool SubnetSpec::_internal_has_vpc_id() const {
  return this != internal_default_instance() && vpc_id_ != nullptr;
}
inline bool SubnetSpec::has_vpc_id() const {
  return _internal_has_vpc_id();
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::_internal_vpc_id() const {
  const ::opi_api::common::v1::ObjectKey* p = vpc_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::vpc_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.vpc_id)
  return _internal_vpc_id();
}
inline void SubnetSpec::unsafe_arena_set_allocated_vpc_id(
    ::opi_api::common::v1::ObjectKey* vpc_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc_id_);
  }
  vpc_id_ = vpc_id;
  if (vpc_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.vpc_id)
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::release_vpc_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = vpc_id_;
  vpc_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::unsafe_arena_release_vpc_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SubnetSpec.vpc_id)
  
  ::opi_api::common::v1::ObjectKey* temp = vpc_id_;
  vpc_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::_internal_mutable_vpc_id() {
  
  if (vpc_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    vpc_id_ = p;
  }
  return vpc_id_;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::mutable_vpc_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_vpc_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.vpc_id)
  return _msg;
}
inline void SubnetSpec::set_allocated_vpc_id(::opi_api::common::v1::ObjectKey* vpc_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc_id_);
  }
  if (vpc_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc_id));
    if (message_arena != submessage_arena) {
      vpc_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpc_id, submessage_arena);
    }
    
  } else {
    
  }
  vpc_id_ = vpc_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.vpc_id)
}

// .opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 3;
inline bool SubnetSpec::_internal_has_v4_prefix() const {
  return this != internal_default_instance() && v4_prefix_ != nullptr;
}
inline bool SubnetSpec::has_v4_prefix() const {
  return _internal_has_v4_prefix();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix& SubnetSpec::_internal_v4_prefix() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* p = v4_prefix_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPv4Prefix_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix& SubnetSpec::v4_prefix() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.v4_prefix)
  return _internal_v4_prefix();
}
inline void SubnetSpec::unsafe_arena_set_allocated_v4_prefix(
    ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* v4_prefix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v4_prefix_);
  }
  v4_prefix_ = v4_prefix;
  if (v4_prefix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.v4_prefix)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* SubnetSpec::release_v4_prefix() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* temp = v4_prefix_;
  v4_prefix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* SubnetSpec::unsafe_arena_release_v4_prefix() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SubnetSpec.v4_prefix)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* temp = v4_prefix_;
  v4_prefix_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* SubnetSpec::_internal_mutable_v4_prefix() {
  
  if (v4_prefix_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix>(GetArenaForAllocation());
    v4_prefix_ = p;
  }
  return v4_prefix_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* SubnetSpec::mutable_v4_prefix() {
  ::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* _msg = _internal_mutable_v4_prefix();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.v4_prefix)
  return _msg;
}
inline void SubnetSpec::set_allocated_v4_prefix(::opi_api::network::opinetcommon::v1alpha1::IPv4Prefix* v4_prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(v4_prefix_);
  }
  if (v4_prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v4_prefix));
    if (message_arena != submessage_arena) {
      v4_prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v4_prefix, submessage_arena);
    }
    
  } else {
    
  }
  v4_prefix_ = v4_prefix;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.v4_prefix)
}

// .opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 4;
inline bool SubnetSpec::_internal_has_v6_prefix() const {
  return this != internal_default_instance() && v6_prefix_ != nullptr;
}
inline bool SubnetSpec::has_v6_prefix() const {
  return _internal_has_v6_prefix();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix& SubnetSpec::_internal_v6_prefix() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* p = v6_prefix_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPv6Prefix_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix& SubnetSpec::v6_prefix() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.v6_prefix)
  return _internal_v6_prefix();
}
inline void SubnetSpec::unsafe_arena_set_allocated_v6_prefix(
    ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* v6_prefix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v6_prefix_);
  }
  v6_prefix_ = v6_prefix;
  if (v6_prefix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.v6_prefix)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* SubnetSpec::release_v6_prefix() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* temp = v6_prefix_;
  v6_prefix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* SubnetSpec::unsafe_arena_release_v6_prefix() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SubnetSpec.v6_prefix)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* temp = v6_prefix_;
  v6_prefix_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* SubnetSpec::_internal_mutable_v6_prefix() {
  
  if (v6_prefix_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix>(GetArenaForAllocation());
    v6_prefix_ = p;
  }
  return v6_prefix_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* SubnetSpec::mutable_v6_prefix() {
  ::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* _msg = _internal_mutable_v6_prefix();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.v6_prefix)
  return _msg;
}
inline void SubnetSpec::set_allocated_v6_prefix(::opi_api::network::opinetcommon::v1alpha1::IPv6Prefix* v6_prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(v6_prefix_);
  }
  if (v6_prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v6_prefix));
    if (message_arena != submessage_arena) {
      v6_prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v6_prefix, submessage_arena);
    }
    
  } else {
    
  }
  v6_prefix_ = v6_prefix;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.v6_prefix)
}

// uint32 ipv4_virtual_router_ip = 5;
inline void SubnetSpec::clear_ipv4_virtual_router_ip() {
  ipv4_virtual_router_ip_ = 0u;
}
inline uint32_t SubnetSpec::_internal_ipv4_virtual_router_ip() const {
  return ipv4_virtual_router_ip_;
}
inline uint32_t SubnetSpec::ipv4_virtual_router_ip() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.ipv4_virtual_router_ip)
  return _internal_ipv4_virtual_router_ip();
}
inline void SubnetSpec::_internal_set_ipv4_virtual_router_ip(uint32_t value) {
  
  ipv4_virtual_router_ip_ = value;
}
inline void SubnetSpec::set_ipv4_virtual_router_ip(uint32_t value) {
  _internal_set_ipv4_virtual_router_ip(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SubnetSpec.ipv4_virtual_router_ip)
}

// bytes ipv6_virtual_router_ip = 6;
inline void SubnetSpec::clear_ipv6_virtual_router_ip() {
  ipv6_virtual_router_ip_.ClearToEmpty();
}
inline const std::string& SubnetSpec::ipv6_virtual_router_ip() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.ipv6_virtual_router_ip)
  return _internal_ipv6_virtual_router_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubnetSpec::set_ipv6_virtual_router_ip(ArgT0&& arg0, ArgT... args) {
 
 ipv6_virtual_router_ip_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SubnetSpec.ipv6_virtual_router_ip)
}
inline std::string* SubnetSpec::mutable_ipv6_virtual_router_ip() {
  std::string* _s = _internal_mutable_ipv6_virtual_router_ip();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.ipv6_virtual_router_ip)
  return _s;
}
inline const std::string& SubnetSpec::_internal_ipv6_virtual_router_ip() const {
  return ipv6_virtual_router_ip_.Get();
}
inline void SubnetSpec::_internal_set_ipv6_virtual_router_ip(const std::string& value) {
  
  ipv6_virtual_router_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SubnetSpec::_internal_mutable_ipv6_virtual_router_ip() {
  
  return ipv6_virtual_router_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SubnetSpec::release_ipv6_virtual_router_ip() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SubnetSpec.ipv6_virtual_router_ip)
  return ipv6_virtual_router_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SubnetSpec::set_allocated_ipv6_virtual_router_ip(std::string* ipv6_virtual_router_ip) {
  if (ipv6_virtual_router_ip != nullptr) {
    
  } else {
    
  }
  ipv6_virtual_router_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6_virtual_router_ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipv6_virtual_router_ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipv6_virtual_router_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.ipv6_virtual_router_ip)
}

// bytes virtual_router_mac = 7;
inline void SubnetSpec::clear_virtual_router_mac() {
  virtual_router_mac_.ClearToEmpty();
}
inline const std::string& SubnetSpec::virtual_router_mac() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.virtual_router_mac)
  return _internal_virtual_router_mac();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubnetSpec::set_virtual_router_mac(ArgT0&& arg0, ArgT... args) {
 
 virtual_router_mac_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SubnetSpec.virtual_router_mac)
}
inline std::string* SubnetSpec::mutable_virtual_router_mac() {
  std::string* _s = _internal_mutable_virtual_router_mac();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.virtual_router_mac)
  return _s;
}
inline const std::string& SubnetSpec::_internal_virtual_router_mac() const {
  return virtual_router_mac_.Get();
}
inline void SubnetSpec::_internal_set_virtual_router_mac(const std::string& value) {
  
  virtual_router_mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SubnetSpec::_internal_mutable_virtual_router_mac() {
  
  return virtual_router_mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SubnetSpec::release_virtual_router_mac() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SubnetSpec.virtual_router_mac)
  return virtual_router_mac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SubnetSpec::set_allocated_virtual_router_mac(std::string* virtual_router_mac) {
  if (virtual_router_mac != nullptr) {
    
  } else {
    
  }
  virtual_router_mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), virtual_router_mac,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (virtual_router_mac_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    virtual_router_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.virtual_router_mac)
}

// .opi_api.common.v1.ObjectKey v4_route_table_id = 8;
inline bool SubnetSpec::_internal_has_v4_route_table_id() const {
  return this != internal_default_instance() && v4_route_table_id_ != nullptr;
}
inline bool SubnetSpec::has_v4_route_table_id() const {
  return _internal_has_v4_route_table_id();
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::_internal_v4_route_table_id() const {
  const ::opi_api::common::v1::ObjectKey* p = v4_route_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::v4_route_table_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.v4_route_table_id)
  return _internal_v4_route_table_id();
}
inline void SubnetSpec::unsafe_arena_set_allocated_v4_route_table_id(
    ::opi_api::common::v1::ObjectKey* v4_route_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v4_route_table_id_);
  }
  v4_route_table_id_ = v4_route_table_id;
  if (v4_route_table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.v4_route_table_id)
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::release_v4_route_table_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = v4_route_table_id_;
  v4_route_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::unsafe_arena_release_v4_route_table_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SubnetSpec.v4_route_table_id)
  
  ::opi_api::common::v1::ObjectKey* temp = v4_route_table_id_;
  v4_route_table_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::_internal_mutable_v4_route_table_id() {
  
  if (v4_route_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    v4_route_table_id_ = p;
  }
  return v4_route_table_id_;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::mutable_v4_route_table_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_v4_route_table_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.v4_route_table_id)
  return _msg;
}
inline void SubnetSpec::set_allocated_v4_route_table_id(::opi_api::common::v1::ObjectKey* v4_route_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(v4_route_table_id_);
  }
  if (v4_route_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v4_route_table_id));
    if (message_arena != submessage_arena) {
      v4_route_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v4_route_table_id, submessage_arena);
    }
    
  } else {
    
  }
  v4_route_table_id_ = v4_route_table_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.v4_route_table_id)
}

// .opi_api.common.v1.ObjectKey v6_router_table_id = 9;
inline bool SubnetSpec::_internal_has_v6_router_table_id() const {
  return this != internal_default_instance() && v6_router_table_id_ != nullptr;
}
inline bool SubnetSpec::has_v6_router_table_id() const {
  return _internal_has_v6_router_table_id();
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::_internal_v6_router_table_id() const {
  const ::opi_api::common::v1::ObjectKey* p = v6_router_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::v6_router_table_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.v6_router_table_id)
  return _internal_v6_router_table_id();
}
inline void SubnetSpec::unsafe_arena_set_allocated_v6_router_table_id(
    ::opi_api::common::v1::ObjectKey* v6_router_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v6_router_table_id_);
  }
  v6_router_table_id_ = v6_router_table_id;
  if (v6_router_table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.v6_router_table_id)
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::release_v6_router_table_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = v6_router_table_id_;
  v6_router_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::unsafe_arena_release_v6_router_table_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SubnetSpec.v6_router_table_id)
  
  ::opi_api::common::v1::ObjectKey* temp = v6_router_table_id_;
  v6_router_table_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::_internal_mutable_v6_router_table_id() {
  
  if (v6_router_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    v6_router_table_id_ = p;
  }
  return v6_router_table_id_;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::mutable_v6_router_table_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_v6_router_table_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.v6_router_table_id)
  return _msg;
}
inline void SubnetSpec::set_allocated_v6_router_table_id(::opi_api::common::v1::ObjectKey* v6_router_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(v6_router_table_id_);
  }
  if (v6_router_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v6_router_table_id));
    if (message_arena != submessage_arena) {
      v6_router_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v6_router_table_id, submessage_arena);
    }
    
  } else {
    
  }
  v6_router_table_id_ = v6_router_table_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.v6_router_table_id)
}

// repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;
inline int SubnetSpec::_internal_ingess_v4_security_policy_id_size() const {
  return ingess_v4_security_policy_id_.size();
}
inline int SubnetSpec::ingess_v4_security_policy_id_size() const {
  return _internal_ingess_v4_security_policy_id_size();
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::mutable_ingess_v4_security_policy_id(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.ingess_v4_security_policy_id)
  return ingess_v4_security_policy_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
SubnetSpec::mutable_ingess_v4_security_policy_id() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.SubnetSpec.ingess_v4_security_policy_id)
  return &ingess_v4_security_policy_id_;
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::_internal_ingess_v4_security_policy_id(int index) const {
  return ingess_v4_security_policy_id_.Get(index);
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::ingess_v4_security_policy_id(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.ingess_v4_security_policy_id)
  return _internal_ingess_v4_security_policy_id(index);
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::_internal_add_ingess_v4_security_policy_id() {
  return ingess_v4_security_policy_id_.Add();
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::add_ingess_v4_security_policy_id() {
  ::opi_api::common::v1::ObjectKey* _add = _internal_add_ingess_v4_security_policy_id();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.SubnetSpec.ingess_v4_security_policy_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
SubnetSpec::ingess_v4_security_policy_id() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.SubnetSpec.ingess_v4_security_policy_id)
  return ingess_v4_security_policy_id_;
}

// repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;
inline int SubnetSpec::_internal_ingress_v6_security_policy_id_size() const {
  return ingress_v6_security_policy_id_.size();
}
inline int SubnetSpec::ingress_v6_security_policy_id_size() const {
  return _internal_ingress_v6_security_policy_id_size();
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::mutable_ingress_v6_security_policy_id(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.ingress_v6_security_policy_id)
  return ingress_v6_security_policy_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
SubnetSpec::mutable_ingress_v6_security_policy_id() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.SubnetSpec.ingress_v6_security_policy_id)
  return &ingress_v6_security_policy_id_;
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::_internal_ingress_v6_security_policy_id(int index) const {
  return ingress_v6_security_policy_id_.Get(index);
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::ingress_v6_security_policy_id(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.ingress_v6_security_policy_id)
  return _internal_ingress_v6_security_policy_id(index);
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::_internal_add_ingress_v6_security_policy_id() {
  return ingress_v6_security_policy_id_.Add();
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::add_ingress_v6_security_policy_id() {
  ::opi_api::common::v1::ObjectKey* _add = _internal_add_ingress_v6_security_policy_id();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.SubnetSpec.ingress_v6_security_policy_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
SubnetSpec::ingress_v6_security_policy_id() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.SubnetSpec.ingress_v6_security_policy_id)
  return ingress_v6_security_policy_id_;
}

// repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;
inline int SubnetSpec::_internal_egress_v4_security_policy_id_size() const {
  return egress_v4_security_policy_id_.size();
}
inline int SubnetSpec::egress_v4_security_policy_id_size() const {
  return _internal_egress_v4_security_policy_id_size();
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::mutable_egress_v4_security_policy_id(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.egress_v4_security_policy_id)
  return egress_v4_security_policy_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
SubnetSpec::mutable_egress_v4_security_policy_id() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.SubnetSpec.egress_v4_security_policy_id)
  return &egress_v4_security_policy_id_;
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::_internal_egress_v4_security_policy_id(int index) const {
  return egress_v4_security_policy_id_.Get(index);
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::egress_v4_security_policy_id(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.egress_v4_security_policy_id)
  return _internal_egress_v4_security_policy_id(index);
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::_internal_add_egress_v4_security_policy_id() {
  return egress_v4_security_policy_id_.Add();
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::add_egress_v4_security_policy_id() {
  ::opi_api::common::v1::ObjectKey* _add = _internal_add_egress_v4_security_policy_id();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.SubnetSpec.egress_v4_security_policy_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
SubnetSpec::egress_v4_security_policy_id() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.SubnetSpec.egress_v4_security_policy_id)
  return egress_v4_security_policy_id_;
}

// repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;
inline int SubnetSpec::_internal_egress_v6_security_policy_id_size() const {
  return egress_v6_security_policy_id_.size();
}
inline int SubnetSpec::egress_v6_security_policy_id_size() const {
  return _internal_egress_v6_security_policy_id_size();
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::mutable_egress_v6_security_policy_id(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.egress_v6_security_policy_id)
  return egress_v6_security_policy_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
SubnetSpec::mutable_egress_v6_security_policy_id() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.SubnetSpec.egress_v6_security_policy_id)
  return &egress_v6_security_policy_id_;
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::_internal_egress_v6_security_policy_id(int index) const {
  return egress_v6_security_policy_id_.Get(index);
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::egress_v6_security_policy_id(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.egress_v6_security_policy_id)
  return _internal_egress_v6_security_policy_id(index);
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::_internal_add_egress_v6_security_policy_id() {
  return egress_v6_security_policy_id_.Add();
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::add_egress_v6_security_policy_id() {
  ::opi_api::common::v1::ObjectKey* _add = _internal_add_egress_v6_security_policy_id();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.SubnetSpec.egress_v6_security_policy_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
SubnetSpec::egress_v6_security_policy_id() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.SubnetSpec.egress_v6_security_policy_id)
  return egress_v6_security_policy_id_;
}

// .opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 14;
inline bool SubnetSpec::_internal_has_access_encap() const {
  return this != internal_default_instance() && access_encap_ != nullptr;
}
inline bool SubnetSpec::has_access_encap() const {
  return _internal_has_access_encap();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::Encap& SubnetSpec::_internal_access_encap() const {
  const ::opi_api::network::opinetcommon::v1alpha1::Encap* p = access_encap_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::Encap&>(
      ::opi_api::network::opinetcommon::v1alpha1::_Encap_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::Encap& SubnetSpec::access_encap() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.access_encap)
  return _internal_access_encap();
}
inline void SubnetSpec::unsafe_arena_set_allocated_access_encap(
    ::opi_api::network::opinetcommon::v1alpha1::Encap* access_encap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(access_encap_);
  }
  access_encap_ = access_encap;
  if (access_encap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.access_encap)
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* SubnetSpec::release_access_encap() {
  
  ::opi_api::network::opinetcommon::v1alpha1::Encap* temp = access_encap_;
  access_encap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* SubnetSpec::unsafe_arena_release_access_encap() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SubnetSpec.access_encap)
  
  ::opi_api::network::opinetcommon::v1alpha1::Encap* temp = access_encap_;
  access_encap_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* SubnetSpec::_internal_mutable_access_encap() {
  
  if (access_encap_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::Encap>(GetArenaForAllocation());
    access_encap_ = p;
  }
  return access_encap_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* SubnetSpec::mutable_access_encap() {
  ::opi_api::network::opinetcommon::v1alpha1::Encap* _msg = _internal_mutable_access_encap();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.access_encap)
  return _msg;
}
inline void SubnetSpec::set_allocated_access_encap(::opi_api::network::opinetcommon::v1alpha1::Encap* access_encap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(access_encap_);
  }
  if (access_encap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(access_encap));
    if (message_arena != submessage_arena) {
      access_encap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access_encap, submessage_arena);
    }
    
  } else {
    
  }
  access_encap_ = access_encap;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.access_encap)
}

// .opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 15;
inline bool SubnetSpec::_internal_has_fabric_encap() const {
  return this != internal_default_instance() && fabric_encap_ != nullptr;
}
inline bool SubnetSpec::has_fabric_encap() const {
  return _internal_has_fabric_encap();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::Encap& SubnetSpec::_internal_fabric_encap() const {
  const ::opi_api::network::opinetcommon::v1alpha1::Encap* p = fabric_encap_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::Encap&>(
      ::opi_api::network::opinetcommon::v1alpha1::_Encap_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::Encap& SubnetSpec::fabric_encap() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.fabric_encap)
  return _internal_fabric_encap();
}
inline void SubnetSpec::unsafe_arena_set_allocated_fabric_encap(
    ::opi_api::network::opinetcommon::v1alpha1::Encap* fabric_encap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fabric_encap_);
  }
  fabric_encap_ = fabric_encap;
  if (fabric_encap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.fabric_encap)
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* SubnetSpec::release_fabric_encap() {
  
  ::opi_api::network::opinetcommon::v1alpha1::Encap* temp = fabric_encap_;
  fabric_encap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* SubnetSpec::unsafe_arena_release_fabric_encap() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SubnetSpec.fabric_encap)
  
  ::opi_api::network::opinetcommon::v1alpha1::Encap* temp = fabric_encap_;
  fabric_encap_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* SubnetSpec::_internal_mutable_fabric_encap() {
  
  if (fabric_encap_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::Encap>(GetArenaForAllocation());
    fabric_encap_ = p;
  }
  return fabric_encap_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* SubnetSpec::mutable_fabric_encap() {
  ::opi_api::network::opinetcommon::v1alpha1::Encap* _msg = _internal_mutable_fabric_encap();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.fabric_encap)
  return _msg;
}
inline void SubnetSpec::set_allocated_fabric_encap(::opi_api::network::opinetcommon::v1alpha1::Encap* fabric_encap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fabric_encap_);
  }
  if (fabric_encap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fabric_encap));
    if (message_arena != submessage_arena) {
      fabric_encap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fabric_encap, submessage_arena);
    }
    
  } else {
    
  }
  fabric_encap_ = fabric_encap;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.fabric_encap)
}

// repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;
inline int SubnetSpec::_internal_host_interface_id_size() const {
  return host_interface_id_.size();
}
inline int SubnetSpec::host_interface_id_size() const {
  return _internal_host_interface_id_size();
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::mutable_host_interface_id(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.host_interface_id)
  return host_interface_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
SubnetSpec::mutable_host_interface_id() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.SubnetSpec.host_interface_id)
  return &host_interface_id_;
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::_internal_host_interface_id(int index) const {
  return host_interface_id_.Get(index);
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::host_interface_id(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.host_interface_id)
  return _internal_host_interface_id(index);
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::_internal_add_host_interface_id() {
  return host_interface_id_.Add();
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::add_host_interface_id() {
  ::opi_api::common::v1::ObjectKey* _add = _internal_add_host_interface_id();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.SubnetSpec.host_interface_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
SubnetSpec::host_interface_id() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.SubnetSpec.host_interface_id)
  return host_interface_id_;
}

// int32 tos = 18;
inline void SubnetSpec::clear_tos() {
  tos_ = 0;
}
inline int32_t SubnetSpec::_internal_tos() const {
  return tos_;
}
inline int32_t SubnetSpec::tos() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.tos)
  return _internal_tos();
}
inline void SubnetSpec::_internal_set_tos(int32_t value) {
  
  tos_ = value;
}
inline void SubnetSpec::set_tos(int32_t value) {
  _internal_set_tos(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SubnetSpec.tos)
}

// bool connected = 19;
inline void SubnetSpec::clear_connected() {
  connected_ = false;
}
inline bool SubnetSpec::_internal_connected() const {
  return connected_;
}
inline bool SubnetSpec::connected() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.connected)
  return _internal_connected();
}
inline void SubnetSpec::_internal_set_connected(bool value) {
  
  connected_ = value;
}
inline void SubnetSpec::set_connected(bool value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SubnetSpec.connected)
}

// .opi_api.common.v1.ObjectKey ingress_default_sg_policy = 20;
inline bool SubnetSpec::_internal_has_ingress_default_sg_policy() const {
  return this != internal_default_instance() && ingress_default_sg_policy_ != nullptr;
}
inline bool SubnetSpec::has_ingress_default_sg_policy() const {
  return _internal_has_ingress_default_sg_policy();
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::_internal_ingress_default_sg_policy() const {
  const ::opi_api::common::v1::ObjectKey* p = ingress_default_sg_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::ingress_default_sg_policy() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.ingress_default_sg_policy)
  return _internal_ingress_default_sg_policy();
}
inline void SubnetSpec::unsafe_arena_set_allocated_ingress_default_sg_policy(
    ::opi_api::common::v1::ObjectKey* ingress_default_sg_policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ingress_default_sg_policy_);
  }
  ingress_default_sg_policy_ = ingress_default_sg_policy;
  if (ingress_default_sg_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.ingress_default_sg_policy)
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::release_ingress_default_sg_policy() {
  
  ::opi_api::common::v1::ObjectKey* temp = ingress_default_sg_policy_;
  ingress_default_sg_policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::unsafe_arena_release_ingress_default_sg_policy() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SubnetSpec.ingress_default_sg_policy)
  
  ::opi_api::common::v1::ObjectKey* temp = ingress_default_sg_policy_;
  ingress_default_sg_policy_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::_internal_mutable_ingress_default_sg_policy() {
  
  if (ingress_default_sg_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    ingress_default_sg_policy_ = p;
  }
  return ingress_default_sg_policy_;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::mutable_ingress_default_sg_policy() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_ingress_default_sg_policy();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.ingress_default_sg_policy)
  return _msg;
}
inline void SubnetSpec::set_allocated_ingress_default_sg_policy(::opi_api::common::v1::ObjectKey* ingress_default_sg_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ingress_default_sg_policy_);
  }
  if (ingress_default_sg_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ingress_default_sg_policy));
    if (message_arena != submessage_arena) {
      ingress_default_sg_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ingress_default_sg_policy, submessage_arena);
    }
    
  } else {
    
  }
  ingress_default_sg_policy_ = ingress_default_sg_policy;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.ingress_default_sg_policy)
}

// .opi_api.common.v1.ObjectKey egress_default_sg_policy = 21;
inline bool SubnetSpec::_internal_has_egress_default_sg_policy() const {
  return this != internal_default_instance() && egress_default_sg_policy_ != nullptr;
}
inline bool SubnetSpec::has_egress_default_sg_policy() const {
  return _internal_has_egress_default_sg_policy();
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::_internal_egress_default_sg_policy() const {
  const ::opi_api::common::v1::ObjectKey* p = egress_default_sg_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& SubnetSpec::egress_default_sg_policy() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.egress_default_sg_policy)
  return _internal_egress_default_sg_policy();
}
inline void SubnetSpec::unsafe_arena_set_allocated_egress_default_sg_policy(
    ::opi_api::common::v1::ObjectKey* egress_default_sg_policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(egress_default_sg_policy_);
  }
  egress_default_sg_policy_ = egress_default_sg_policy;
  if (egress_default_sg_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.egress_default_sg_policy)
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::release_egress_default_sg_policy() {
  
  ::opi_api::common::v1::ObjectKey* temp = egress_default_sg_policy_;
  egress_default_sg_policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::unsafe_arena_release_egress_default_sg_policy() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SubnetSpec.egress_default_sg_policy)
  
  ::opi_api::common::v1::ObjectKey* temp = egress_default_sg_policy_;
  egress_default_sg_policy_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::_internal_mutable_egress_default_sg_policy() {
  
  if (egress_default_sg_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    egress_default_sg_policy_ = p;
  }
  return egress_default_sg_policy_;
}
inline ::opi_api::common::v1::ObjectKey* SubnetSpec::mutable_egress_default_sg_policy() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_egress_default_sg_policy();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SubnetSpec.egress_default_sg_policy)
  return _msg;
}
inline void SubnetSpec::set_allocated_egress_default_sg_policy(::opi_api::common::v1::ObjectKey* egress_default_sg_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(egress_default_sg_policy_);
  }
  if (egress_default_sg_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(egress_default_sg_policy));
    if (message_arena != submessage_arena) {
      egress_default_sg_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, egress_default_sg_policy, submessage_arena);
    }
    
  } else {
    
  }
  egress_default_sg_policy_ = egress_default_sg_policy;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SubnetSpec.egress_default_sg_policy)
}

// bool remote_subnet = 22;
inline void SubnetSpec::clear_remote_subnet() {
  remote_subnet_ = false;
}
inline bool SubnetSpec::_internal_remote_subnet() const {
  return remote_subnet_;
}
inline bool SubnetSpec::remote_subnet() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetSpec.remote_subnet)
  return _internal_remote_subnet();
}
inline void SubnetSpec::_internal_set_remote_subnet(bool value) {
  
  remote_subnet_ = value;
}
inline void SubnetSpec::set_remote_subnet(bool value) {
  _internal_set_remote_subnet(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SubnetSpec.remote_subnet)
}

// -------------------------------------------------------------------

// SubnetStatus

// int32 hw_index = 1;
inline void SubnetStatus::clear_hw_index() {
  hw_index_ = 0;
}
inline int32_t SubnetStatus::_internal_hw_index() const {
  return hw_index_;
}
inline int32_t SubnetStatus::hw_index() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetStatus.hw_index)
  return _internal_hw_index();
}
inline void SubnetStatus::_internal_set_hw_index(int32_t value) {
  
  hw_index_ = value;
}
inline void SubnetStatus::set_hw_index(int32_t value) {
  _internal_set_hw_index(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SubnetStatus.hw_index)
}

// int32 vnic_count = 2;
inline void SubnetStatus::clear_vnic_count() {
  vnic_count_ = 0;
}
inline int32_t SubnetStatus::_internal_vnic_count() const {
  return vnic_count_;
}
inline int32_t SubnetStatus::vnic_count() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SubnetStatus.vnic_count)
  return _internal_vnic_count();
}
inline void SubnetStatus::_internal_set_vnic_count(int32_t value) {
  
  vnic_count_ = value;
}
inline void SubnetStatus::set_vnic_count(int32_t value) {
  _internal_set_vnic_count(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SubnetStatus.vnic_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_subnet_2eproto
