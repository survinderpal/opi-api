// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto

#include "device.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
constexpr DeviceCapabilities::DeviceCapabilities(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routing_capabilties_(nullptr)
  , network_policy_capabilities_(nullptr){}
struct DeviceCapabilitiesDefaultTypeInternal {
  constexpr DeviceCapabilitiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceCapabilitiesDefaultTypeInternal() {}
  union {
    DeviceCapabilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceCapabilitiesDefaultTypeInternal _DeviceCapabilities_default_instance_;
constexpr DeviceCapabilitiesDynamicRouting::DeviceCapabilitiesDynamicRouting(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : underlay_bgp_(false){}
struct DeviceCapabilitiesDynamicRoutingDefaultTypeInternal {
  constexpr DeviceCapabilitiesDynamicRoutingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceCapabilitiesDynamicRoutingDefaultTypeInternal() {}
  union {
    DeviceCapabilitiesDynamicRouting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceCapabilitiesDynamicRoutingDefaultTypeInternal _DeviceCapabilitiesDynamicRouting_default_instance_;
constexpr DeviceCapabilitiesNetworkPolicy::DeviceCapabilitiesNetworkPolicy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compact_rules_(false){}
struct DeviceCapabilitiesNetworkPolicyDefaultTypeInternal {
  constexpr DeviceCapabilitiesNetworkPolicyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceCapabilitiesNetworkPolicyDefaultTypeInternal() {}
  union {
    DeviceCapabilitiesNetworkPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceCapabilitiesNetworkPolicyDefaultTypeInternal _DeviceCapabilitiesNetworkPolicy_default_instance_;
constexpr Device::Device(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , status_(nullptr){}
struct DeviceDefaultTypeInternal {
  constexpr DeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceDefaultTypeInternal() {}
  union {
    Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceDefaultTypeInternal _Device_default_instance_;
constexpr DeviceSpec::DeviceSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mac_addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , systemname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , ipv4_address_(nullptr)
  , ipv6_address_(nullptr)
  , gateway_ip_(nullptr)
  , pcie_functions_(nullptr)
  , mgmt_network_spec_(nullptr)
  , overlay_routing_enabled_(false){}
struct DeviceSpecDefaultTypeInternal {
  constexpr DeviceSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceSpecDefaultTypeInternal() {}
  union {
    DeviceSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceSpecDefaultTypeInternal _DeviceSpec_default_instance_;
constexpr PCIeFunctionsSpec::PCIeFunctionsSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pf_count_(0)
  , vf_count_(0){}
struct PCIeFunctionsSpecDefaultTypeInternal {
  constexpr PCIeFunctionsSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PCIeFunctionsSpecDefaultTypeInternal() {}
  union {
    PCIeFunctionsSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PCIeFunctionsSpecDefaultTypeInternal _PCIeFunctionsSpec_default_instance_;
constexpr MgmtNetworkSpec::MgmtNetworkSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gateway_mac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lldp_mgmt_ip_(nullptr)
  , mgmt_ip_(nullptr)
  , gateway_ip_(nullptr)
  , vlan_(0){}
struct MgmtNetworkSpecDefaultTypeInternal {
  constexpr MgmtNetworkSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MgmtNetworkSpecDefaultTypeInternal() {}
  union {
    MgmtNetworkSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MgmtNetworkSpecDefaultTypeInternal _MgmtNetworkSpec_default_instance_;
constexpr DeviceStatus::DeviceStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : critical_events_()
  , alerts_()
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , system_mac_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vendor_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chip_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , os_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pipeline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pcie_port_count_(0)
  , port_count_(0)
  , host_if_count_(0){}
struct DeviceStatusDefaultTypeInternal {
  constexpr DeviceStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceStatusDefaultTypeInternal() {}
  union {
    DeviceStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceStatusDefaultTypeInternal _DeviceStatus_default_instance_;
constexpr SystemEvent::SystemEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_time_(nullptr){}
struct SystemEventDefaultTypeInternal {
  constexpr SystemEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SystemEventDefaultTypeInternal() {}
  union {
    SystemEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SystemEventDefaultTypeInternal _SystemEvent_default_instance_;
constexpr SystemAlert::SystemAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alert_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alert_time_(nullptr){}
struct SystemAlertDefaultTypeInternal {
  constexpr SystemAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SystemAlertDefaultTypeInternal() {}
  union {
    SystemAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SystemAlertDefaultTypeInternal _SystemAlert_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_device_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_device_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_device_2eproto = nullptr;

const uint32_t TableStruct_device_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceCapabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceCapabilities, routing_capabilties_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceCapabilities, network_policy_capabilities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting, underlay_bgp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy, compact_rules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Device, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Device, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, ipv4_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, ipv6_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, mac_addr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, gateway_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, pcie_functions_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, overlay_routing_enabled_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, systemname_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceSpec, mgmt_network_spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec, pf_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec, vf_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec, lldp_mgmt_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec, mgmt_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec, vlan_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec, gateway_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec, gateway_mac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, description_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, system_mac_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, vendor_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, chip_type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, os_version_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, pcie_port_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, port_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, host_if_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, pipeline_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, critical_events_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::DeviceStatus, alerts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SystemEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SystemEvent, event_time_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SystemEvent, event_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SystemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SystemAlert, alert_time_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::SystemAlert, alert_description_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::DeviceCapabilities)},
  { 8, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting)},
  { 15, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy)},
  { 22, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::Device)},
  { 30, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::DeviceSpec)},
  { 45, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec)},
  { 53, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec)},
  { 64, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::DeviceStatus)},
  { 81, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SystemEvent)},
  { 89, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::SystemAlert)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_DeviceCapabilities_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_DeviceCapabilitiesDynamicRouting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_DeviceCapabilitiesNetworkPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_DeviceSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_PCIeFunctionsSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_MgmtNetworkSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_DeviceStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_SystemEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_SystemAlert_default_instance_),
};

const char descriptor_table_protodef_device_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014device.proto\022\036opi_api.network.cloud.v1"
  "alpha1\032\020object_key.proto\032\022networktypes.p"
  "roto\032\037google/protobuf/timestamp.proto\"\331\001"
  "\n\022DeviceCapabilities\022]\n\023routing_capabilt"
  "ies\030\001 \001(\0132@.opi_api.network.cloud.v1alph"
  "a1.DeviceCapabilitiesDynamicRouting\022d\n\033n"
  "etwork_policy_capabilities\030\002 \001(\0132\?.opi_a"
  "pi.network.cloud.v1alpha1.DeviceCapabili"
  "tiesNetworkPolicy\"8\n DeviceCapabilitiesD"
  "ynamicRouting\022\024\n\014underlay_bgp\030\001 \001(\010\"8\n\037D"
  "eviceCapabilitiesNetworkPolicy\022\025\n\rcompac"
  "t_rules\030\001 \001(\010\"\200\001\n\006Device\0228\n\004spec\030\001 \001(\0132*"
  ".opi_api.network.cloud.v1alpha1.DeviceSp"
  "ec\022<\n\006status\030\002 \001(\0132,.opi_api.network.clo"
  "ud.v1alpha1.DeviceStatus\"\352\003\n\nDeviceSpec\022"
  "(\n\002id\030\001 \001(\0132\034.opi_api.common.v1.ObjectKe"
  "y\022F\n\014ipv4_address\030\002 \001(\01320.opi_api.networ"
  "k.opinetcommon.v1alpha1.IPAddress\022F\n\014ipv"
  "6_address\030\003 \001(\01320.opi_api.network.opinet"
  "common.v1alpha1.IPAddress\022\020\n\010mac_addr\030\004 "
  "\001(\014\022D\n\ngateway_ip\030\005 \001(\01320.opi_api.networ"
  "k.opinetcommon.v1alpha1.IPAddress\022I\n\016pci"
  "e_functions\030\006 \001(\01321.opi_api.network.clou"
  "d.v1alpha1.PCIeFunctionsSpec\022\037\n\027overlay_"
  "routing_enabled\030\007 \001(\010\022\022\n\nsystemname\030\010 \001("
  "\t\022J\n\021mgmt_network_spec\030\t \001(\0132/.opi_api.n"
  "etwork.cloud.v1alpha1.MgmtNetworkSpec\"7\n"
  "\021PCIeFunctionsSpec\022\020\n\010pf_count\030\005 \001(\005\022\020\n\010"
  "vf_count\030\006 \001(\005\"\205\002\n\017MgmtNetworkSpec\022F\n\014ll"
  "dp_mgmt_ip\030\001 \001(\01320.opi_api.network.opine"
  "tcommon.v1alpha1.IPAddress\022A\n\007mgmt_ip\030\002 "
  "\001(\01320.opi_api.network.opinetcommon.v1alp"
  "ha1.IPAddress\022\014\n\004vlan\030\003 \001(\005\022D\n\ngateway_i"
  "p\030\004 \001(\01320.opi_api.network.opinetcommon.v"
  "1alpha1.IPAddress\022\023\n\013gateway_mac\030\005 \001(\014\"\322"
  "\002\n\014DeviceStatus\022\023\n\013description\030\001 \001(\t\022\032\n\022"
  "system_mac_address\030\002 \001(\014\022\021\n\tvendor_id\030\003 "
  "\001(\t\022\021\n\tchip_type\030\004 \001(\t\022\022\n\nos_version\030\005 \001"
  "(\t\022\027\n\017pcie_port_count\030\006 \001(\005\022\022\n\nport_coun"
  "t\030\007 \001(\005\022\025\n\rhost_if_count\030\010 \001(\005\022\020\n\010pipeli"
  "ne\030\t \001(\t\022D\n\017critical_events\030\n \003(\0132+.opi_"
  "api.network.cloud.v1alpha1.SystemEvent\022;"
  "\n\006alerts\030\013 \003(\0132+.opi_api.network.cloud.v"
  "1alpha1.SystemAlert\"X\n\013SystemEvent\022.\n\nev"
  "ent_time\030\001 \001(\0132\032.google.protobuf.Timesta"
  "mp\022\031\n\021event_description\030\002 \001(\t\"X\n\013SystemA"
  "lert\022.\n\nalert_time\030\001 \001(\0132\032.google.protob"
  "uf.Timestamp\022\031\n\021alert_description\030\002 \001(\tB"
  "l\n\036opi_api.network.cloud.v1alpha1B\013Devic"
  "eProtoP\001Z;github.com/opiproject/opi-api/"
  "network/cloud/v1alpha1/gen/gob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_device_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_networktypes_2eproto,
  &::descriptor_table_object_5fkey_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_device_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_device_2eproto = {
  false, false, 2037, descriptor_table_protodef_device_2eproto, "device.proto", 
  &descriptor_table_device_2eproto_once, descriptor_table_device_2eproto_deps, 3, 10,
  schemas, file_default_instances, TableStruct_device_2eproto::offsets,
  file_level_metadata_device_2eproto, file_level_enum_descriptors_device_2eproto, file_level_service_descriptors_device_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_device_2eproto_getter() {
  return &descriptor_table_device_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_device_2eproto(&descriptor_table_device_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {

// ===================================================================

class DeviceCapabilities::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting& routing_capabilties(const DeviceCapabilities* msg);
  static const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy& network_policy_capabilities(const DeviceCapabilities* msg);
};

const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting&
DeviceCapabilities::_Internal::routing_capabilties(const DeviceCapabilities* msg) {
  return *msg->routing_capabilties_;
}
const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy&
DeviceCapabilities::_Internal::network_policy_capabilities(const DeviceCapabilities* msg) {
  return *msg->network_policy_capabilities_;
}
DeviceCapabilities::DeviceCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
}
DeviceCapabilities::DeviceCapabilities(const DeviceCapabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing_capabilties()) {
    routing_capabilties_ = new ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting(*from.routing_capabilties_);
  } else {
    routing_capabilties_ = nullptr;
  }
  if (from._internal_has_network_policy_capabilities()) {
    network_policy_capabilities_ = new ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy(*from.network_policy_capabilities_);
  } else {
    network_policy_capabilities_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
}

inline void DeviceCapabilities::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&routing_capabilties_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&network_policy_capabilities_) -
    reinterpret_cast<char*>(&routing_capabilties_)) + sizeof(network_policy_capabilities_));
}

DeviceCapabilities::~DeviceCapabilities() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceCapabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete routing_capabilties_;
  if (this != internal_default_instance()) delete network_policy_capabilities_;
}

void DeviceCapabilities::ArenaDtor(void* object) {
  DeviceCapabilities* _this = reinterpret_cast< DeviceCapabilities* >(object);
  (void)_this;
}
void DeviceCapabilities::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceCapabilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceCapabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && routing_capabilties_ != nullptr) {
    delete routing_capabilties_;
  }
  routing_capabilties_ = nullptr;
  if (GetArenaForAllocation() == nullptr && network_policy_capabilities_ != nullptr) {
    delete network_policy_capabilities_;
  }
  network_policy_capabilities_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceCapabilities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting routing_capabilties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_capabilties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy network_policy_capabilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_policy_capabilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceCapabilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting routing_capabilties = 1;
  if (this->_internal_has_routing_capabilties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::routing_capabilties(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy network_policy_capabilities = 2;
  if (this->_internal_has_network_policy_capabilities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::network_policy_capabilities(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
  return target;
}

size_t DeviceCapabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting routing_capabilties = 1;
  if (this->_internal_has_routing_capabilties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routing_capabilties_);
  }

  // .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy network_policy_capabilities = 2;
  if (this->_internal_has_network_policy_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_policy_capabilities_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceCapabilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceCapabilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceCapabilities::GetClassData() const { return &_class_data_; }

void DeviceCapabilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceCapabilities *>(to)->MergeFrom(
      static_cast<const DeviceCapabilities &>(from));
}


void DeviceCapabilities::MergeFrom(const DeviceCapabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_routing_capabilties()) {
    _internal_mutable_routing_capabilties()->::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting::MergeFrom(from._internal_routing_capabilties());
  }
  if (from._internal_has_network_policy_capabilities()) {
    _internal_mutable_network_policy_capabilities()->::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy::MergeFrom(from._internal_network_policy_capabilities());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceCapabilities::CopyFrom(const DeviceCapabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCapabilities::IsInitialized() const {
  return true;
}

void DeviceCapabilities::InternalSwap(DeviceCapabilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceCapabilities, network_policy_capabilities_)
      + sizeof(DeviceCapabilities::network_policy_capabilities_)
      - PROTOBUF_FIELD_OFFSET(DeviceCapabilities, routing_capabilties_)>(
          reinterpret_cast<char*>(&routing_capabilties_),
          reinterpret_cast<char*>(&other->routing_capabilties_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceCapabilities::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[0]);
}

// ===================================================================

class DeviceCapabilitiesDynamicRouting::_Internal {
 public:
};

DeviceCapabilitiesDynamicRouting::DeviceCapabilitiesDynamicRouting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
}
DeviceCapabilitiesDynamicRouting::DeviceCapabilitiesDynamicRouting(const DeviceCapabilitiesDynamicRouting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  underlay_bgp_ = from.underlay_bgp_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
}

inline void DeviceCapabilitiesDynamicRouting::SharedCtor() {
underlay_bgp_ = false;
}

DeviceCapabilitiesDynamicRouting::~DeviceCapabilitiesDynamicRouting() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceCapabilitiesDynamicRouting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceCapabilitiesDynamicRouting::ArenaDtor(void* object) {
  DeviceCapabilitiesDynamicRouting* _this = reinterpret_cast< DeviceCapabilitiesDynamicRouting* >(object);
  (void)_this;
}
void DeviceCapabilitiesDynamicRouting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceCapabilitiesDynamicRouting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceCapabilitiesDynamicRouting::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  underlay_bgp_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceCapabilitiesDynamicRouting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool underlay_bgp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          underlay_bgp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceCapabilitiesDynamicRouting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool underlay_bgp = 1;
  if (this->_internal_underlay_bgp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_underlay_bgp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
  return target;
}

size_t DeviceCapabilitiesDynamicRouting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool underlay_bgp = 1;
  if (this->_internal_underlay_bgp() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceCapabilitiesDynamicRouting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceCapabilitiesDynamicRouting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceCapabilitiesDynamicRouting::GetClassData() const { return &_class_data_; }

void DeviceCapabilitiesDynamicRouting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceCapabilitiesDynamicRouting *>(to)->MergeFrom(
      static_cast<const DeviceCapabilitiesDynamicRouting &>(from));
}


void DeviceCapabilitiesDynamicRouting::MergeFrom(const DeviceCapabilitiesDynamicRouting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_underlay_bgp() != 0) {
    _internal_set_underlay_bgp(from._internal_underlay_bgp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceCapabilitiesDynamicRouting::CopyFrom(const DeviceCapabilitiesDynamicRouting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCapabilitiesDynamicRouting::IsInitialized() const {
  return true;
}

void DeviceCapabilitiesDynamicRouting::InternalSwap(DeviceCapabilitiesDynamicRouting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(underlay_bgp_, other->underlay_bgp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceCapabilitiesDynamicRouting::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[1]);
}

// ===================================================================

class DeviceCapabilitiesNetworkPolicy::_Internal {
 public:
};

DeviceCapabilitiesNetworkPolicy::DeviceCapabilitiesNetworkPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
}
DeviceCapabilitiesNetworkPolicy::DeviceCapabilitiesNetworkPolicy(const DeviceCapabilitiesNetworkPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  compact_rules_ = from.compact_rules_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
}

inline void DeviceCapabilitiesNetworkPolicy::SharedCtor() {
compact_rules_ = false;
}

DeviceCapabilitiesNetworkPolicy::~DeviceCapabilitiesNetworkPolicy() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceCapabilitiesNetworkPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceCapabilitiesNetworkPolicy::ArenaDtor(void* object) {
  DeviceCapabilitiesNetworkPolicy* _this = reinterpret_cast< DeviceCapabilitiesNetworkPolicy* >(object);
  (void)_this;
}
void DeviceCapabilitiesNetworkPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceCapabilitiesNetworkPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceCapabilitiesNetworkPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compact_rules_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceCapabilitiesNetworkPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool compact_rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          compact_rules_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceCapabilitiesNetworkPolicy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool compact_rules = 1;
  if (this->_internal_compact_rules() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_compact_rules(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
  return target;
}

size_t DeviceCapabilitiesNetworkPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool compact_rules = 1;
  if (this->_internal_compact_rules() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceCapabilitiesNetworkPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceCapabilitiesNetworkPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceCapabilitiesNetworkPolicy::GetClassData() const { return &_class_data_; }

void DeviceCapabilitiesNetworkPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceCapabilitiesNetworkPolicy *>(to)->MergeFrom(
      static_cast<const DeviceCapabilitiesNetworkPolicy &>(from));
}


void DeviceCapabilitiesNetworkPolicy::MergeFrom(const DeviceCapabilitiesNetworkPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_compact_rules() != 0) {
    _internal_set_compact_rules(from._internal_compact_rules());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceCapabilitiesNetworkPolicy::CopyFrom(const DeviceCapabilitiesNetworkPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCapabilitiesNetworkPolicy::IsInitialized() const {
  return true;
}

void DeviceCapabilitiesNetworkPolicy::InternalSwap(DeviceCapabilitiesNetworkPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(compact_rules_, other->compact_rules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceCapabilitiesNetworkPolicy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[2]);
}

// ===================================================================

class Device::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::DeviceSpec& spec(const Device* msg);
  static const ::opi_api::network::cloud::v1alpha1::DeviceStatus& status(const Device* msg);
};

const ::opi_api::network::cloud::v1alpha1::DeviceSpec&
Device::_Internal::spec(const Device* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::DeviceStatus&
Device::_Internal::status(const Device* msg) {
  return *msg->status_;
}
Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::DeviceSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::cloud::v1alpha1::DeviceStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.Device)
}

inline void Device::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.Device)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Device::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void Device::ArenaDtor(void* object) {
  Device* _this = reinterpret_cast< Device* >(object);
  (void)_this;
}
void Device::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.Device)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.DeviceSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.DeviceStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Device::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.Device)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.DeviceSpec spec = 1;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.DeviceStatus status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.Device)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.DeviceSpec spec = 1;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.DeviceStatus status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Device::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Device::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Device::GetClassData() const { return &_class_data_; }

void Device::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Device *>(to)->MergeFrom(
      static_cast<const Device &>(from));
}


void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.Device)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::DeviceSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::cloud::v1alpha1::DeviceStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Device, status_)
      + sizeof(Device::status_)
      - PROTOBUF_FIELD_OFFSET(Device, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[3]);
}

// ===================================================================

class DeviceSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const DeviceSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& ipv4_address(const DeviceSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& ipv6_address(const DeviceSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& gateway_ip(const DeviceSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec& pcie_functions(const DeviceSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec& mgmt_network_spec(const DeviceSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
DeviceSpec::_Internal::id(const DeviceSpec* msg) {
  return *msg->id_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
DeviceSpec::_Internal::ipv4_address(const DeviceSpec* msg) {
  return *msg->ipv4_address_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
DeviceSpec::_Internal::ipv6_address(const DeviceSpec* msg) {
  return *msg->ipv6_address_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
DeviceSpec::_Internal::gateway_ip(const DeviceSpec* msg) {
  return *msg->gateway_ip_;
}
const ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec&
DeviceSpec::_Internal::pcie_functions(const DeviceSpec* msg) {
  return *msg->pcie_functions_;
}
const ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec&
DeviceSpec::_Internal::mgmt_network_spec(const DeviceSpec* msg) {
  return *msg->mgmt_network_spec_;
}
void DeviceSpec::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void DeviceSpec::clear_ipv4_address() {
  if (GetArenaForAllocation() == nullptr && ipv4_address_ != nullptr) {
    delete ipv4_address_;
  }
  ipv4_address_ = nullptr;
}
void DeviceSpec::clear_ipv6_address() {
  if (GetArenaForAllocation() == nullptr && ipv6_address_ != nullptr) {
    delete ipv6_address_;
  }
  ipv6_address_ = nullptr;
}
void DeviceSpec::clear_gateway_ip() {
  if (GetArenaForAllocation() == nullptr && gateway_ip_ != nullptr) {
    delete gateway_ip_;
  }
  gateway_ip_ = nullptr;
}
DeviceSpec::DeviceSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.DeviceSpec)
}
DeviceSpec::DeviceSpec(const DeviceSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mac_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_addr().empty()) {
    mac_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac_addr(), 
      GetArenaForAllocation());
  }
  systemname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    systemname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_systemname().empty()) {
    systemname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_systemname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_ipv4_address()) {
    ipv4_address_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.ipv4_address_);
  } else {
    ipv4_address_ = nullptr;
  }
  if (from._internal_has_ipv6_address()) {
    ipv6_address_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.ipv6_address_);
  } else {
    ipv6_address_ = nullptr;
  }
  if (from._internal_has_gateway_ip()) {
    gateway_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.gateway_ip_);
  } else {
    gateway_ip_ = nullptr;
  }
  if (from._internal_has_pcie_functions()) {
    pcie_functions_ = new ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec(*from.pcie_functions_);
  } else {
    pcie_functions_ = nullptr;
  }
  if (from._internal_has_mgmt_network_spec()) {
    mgmt_network_spec_ = new ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec(*from.mgmt_network_spec_);
  } else {
    mgmt_network_spec_ = nullptr;
  }
  overlay_routing_enabled_ = from.overlay_routing_enabled_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.DeviceSpec)
}

inline void DeviceSpec::SharedCtor() {
mac_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mac_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
systemname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  systemname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&overlay_routing_enabled_) -
    reinterpret_cast<char*>(&id_)) + sizeof(overlay_routing_enabled_));
}

DeviceSpec::~DeviceSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.DeviceSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mac_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  systemname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete ipv4_address_;
  if (this != internal_default_instance()) delete ipv6_address_;
  if (this != internal_default_instance()) delete gateway_ip_;
  if (this != internal_default_instance()) delete pcie_functions_;
  if (this != internal_default_instance()) delete mgmt_network_spec_;
}

void DeviceSpec::ArenaDtor(void* object) {
  DeviceSpec* _this = reinterpret_cast< DeviceSpec* >(object);
  (void)_this;
}
void DeviceSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.DeviceSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_addr_.ClearToEmpty();
  systemname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ipv4_address_ != nullptr) {
    delete ipv4_address_;
  }
  ipv4_address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ipv6_address_ != nullptr) {
    delete ipv6_address_;
  }
  ipv6_address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && gateway_ip_ != nullptr) {
    delete gateway_ip_;
  }
  gateway_ip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pcie_functions_ != nullptr) {
    delete pcie_functions_;
  }
  pcie_functions_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mgmt_network_spec_ != nullptr) {
    delete mgmt_network_spec_;
  }
  mgmt_network_spec_ = nullptr;
  overlay_routing_enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv4_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipv4_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv6_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipv6_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mac_addr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mac_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gateway_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec pcie_functions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pcie_functions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool overlay_routing_enabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          overlay_routing_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string systemname = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_systemname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.DeviceSpec.systemname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.MgmtNetworkSpec mgmt_network_spec = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mgmt_network_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.DeviceSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv4_address = 2;
  if (this->_internal_has_ipv4_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ipv4_address(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv6_address = 3;
  if (this->_internal_has_ipv6_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ipv6_address(this), target, stream);
  }

  // bytes mac_addr = 4;
  if (!this->_internal_mac_addr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_mac_addr(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 5;
  if (this->_internal_has_gateway_ip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::gateway_ip(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec pcie_functions = 6;
  if (this->_internal_has_pcie_functions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pcie_functions(this), target, stream);
  }

  // bool overlay_routing_enabled = 7;
  if (this->_internal_overlay_routing_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_overlay_routing_enabled(), target);
  }

  // string systemname = 8;
  if (!this->_internal_systemname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_systemname().data(), static_cast<int>(this->_internal_systemname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.DeviceSpec.systemname");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_systemname(), target);
  }

  // .opi_api.network.cloud.v1alpha1.MgmtNetworkSpec mgmt_network_spec = 9;
  if (this->_internal_has_mgmt_network_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::mgmt_network_spec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.DeviceSpec)
  return target;
}

size_t DeviceSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.DeviceSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes mac_addr = 4;
  if (!this->_internal_mac_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac_addr());
  }

  // string systemname = 8;
  if (!this->_internal_systemname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_systemname());
  }

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv4_address = 2;
  if (this->_internal_has_ipv4_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ipv4_address_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv6_address = 3;
  if (this->_internal_has_ipv6_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ipv6_address_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 5;
  if (this->_internal_has_gateway_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gateway_ip_);
  }

  // .opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec pcie_functions = 6;
  if (this->_internal_has_pcie_functions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pcie_functions_);
  }

  // .opi_api.network.cloud.v1alpha1.MgmtNetworkSpec mgmt_network_spec = 9;
  if (this->_internal_has_mgmt_network_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mgmt_network_spec_);
  }

  // bool overlay_routing_enabled = 7;
  if (this->_internal_overlay_routing_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceSpec::GetClassData() const { return &_class_data_; }

void DeviceSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceSpec *>(to)->MergeFrom(
      static_cast<const DeviceSpec &>(from));
}


void DeviceSpec::MergeFrom(const DeviceSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.DeviceSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mac_addr().empty()) {
    _internal_set_mac_addr(from._internal_mac_addr());
  }
  if (!from._internal_systemname().empty()) {
    _internal_set_systemname(from._internal_systemname());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_has_ipv4_address()) {
    _internal_mutable_ipv4_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_ipv4_address());
  }
  if (from._internal_has_ipv6_address()) {
    _internal_mutable_ipv6_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_ipv6_address());
  }
  if (from._internal_has_gateway_ip()) {
    _internal_mutable_gateway_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_gateway_ip());
  }
  if (from._internal_has_pcie_functions()) {
    _internal_mutable_pcie_functions()->::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec::MergeFrom(from._internal_pcie_functions());
  }
  if (from._internal_has_mgmt_network_spec()) {
    _internal_mutable_mgmt_network_spec()->::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec::MergeFrom(from._internal_mgmt_network_spec());
  }
  if (from._internal_overlay_routing_enabled() != 0) {
    _internal_set_overlay_routing_enabled(from._internal_overlay_routing_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceSpec::CopyFrom(const DeviceSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.DeviceSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSpec::IsInitialized() const {
  return true;
}

void DeviceSpec::InternalSwap(DeviceSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_addr_, lhs_arena,
      &other->mac_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &systemname_, lhs_arena,
      &other->systemname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceSpec, overlay_routing_enabled_)
      + sizeof(DeviceSpec::overlay_routing_enabled_)
      - PROTOBUF_FIELD_OFFSET(DeviceSpec, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[4]);
}

// ===================================================================

class PCIeFunctionsSpec::_Internal {
 public:
};

PCIeFunctionsSpec::PCIeFunctionsSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
}
PCIeFunctionsSpec::PCIeFunctionsSpec(const PCIeFunctionsSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pf_count_, &from.pf_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&vf_count_) -
    reinterpret_cast<char*>(&pf_count_)) + sizeof(vf_count_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
}

inline void PCIeFunctionsSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pf_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vf_count_) -
    reinterpret_cast<char*>(&pf_count_)) + sizeof(vf_count_));
}

PCIeFunctionsSpec::~PCIeFunctionsSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PCIeFunctionsSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PCIeFunctionsSpec::ArenaDtor(void* object) {
  PCIeFunctionsSpec* _this = reinterpret_cast< PCIeFunctionsSpec* >(object);
  (void)_this;
}
void PCIeFunctionsSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PCIeFunctionsSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PCIeFunctionsSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pf_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vf_count_) -
      reinterpret_cast<char*>(&pf_count_)) + sizeof(vf_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCIeFunctionsSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pf_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          pf_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vf_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          vf_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCIeFunctionsSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pf_count = 5;
  if (this->_internal_pf_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pf_count(), target);
  }

  // int32 vf_count = 6;
  if (this->_internal_vf_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_vf_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
  return target;
}

size_t PCIeFunctionsSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pf_count = 5;
  if (this->_internal_pf_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pf_count());
  }

  // int32 vf_count = 6;
  if (this->_internal_vf_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vf_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCIeFunctionsSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PCIeFunctionsSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCIeFunctionsSpec::GetClassData() const { return &_class_data_; }

void PCIeFunctionsSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PCIeFunctionsSpec *>(to)->MergeFrom(
      static_cast<const PCIeFunctionsSpec &>(from));
}


void PCIeFunctionsSpec::MergeFrom(const PCIeFunctionsSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pf_count() != 0) {
    _internal_set_pf_count(from._internal_pf_count());
  }
  if (from._internal_vf_count() != 0) {
    _internal_set_vf_count(from._internal_vf_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCIeFunctionsSpec::CopyFrom(const PCIeFunctionsSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCIeFunctionsSpec::IsInitialized() const {
  return true;
}

void PCIeFunctionsSpec::InternalSwap(PCIeFunctionsSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PCIeFunctionsSpec, vf_count_)
      + sizeof(PCIeFunctionsSpec::vf_count_)
      - PROTOBUF_FIELD_OFFSET(PCIeFunctionsSpec, pf_count_)>(
          reinterpret_cast<char*>(&pf_count_),
          reinterpret_cast<char*>(&other->pf_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PCIeFunctionsSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[5]);
}

// ===================================================================

class MgmtNetworkSpec::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& lldp_mgmt_ip(const MgmtNetworkSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& mgmt_ip(const MgmtNetworkSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& gateway_ip(const MgmtNetworkSpec* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
MgmtNetworkSpec::_Internal::lldp_mgmt_ip(const MgmtNetworkSpec* msg) {
  return *msg->lldp_mgmt_ip_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
MgmtNetworkSpec::_Internal::mgmt_ip(const MgmtNetworkSpec* msg) {
  return *msg->mgmt_ip_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
MgmtNetworkSpec::_Internal::gateway_ip(const MgmtNetworkSpec* msg) {
  return *msg->gateway_ip_;
}
void MgmtNetworkSpec::clear_lldp_mgmt_ip() {
  if (GetArenaForAllocation() == nullptr && lldp_mgmt_ip_ != nullptr) {
    delete lldp_mgmt_ip_;
  }
  lldp_mgmt_ip_ = nullptr;
}
void MgmtNetworkSpec::clear_mgmt_ip() {
  if (GetArenaForAllocation() == nullptr && mgmt_ip_ != nullptr) {
    delete mgmt_ip_;
  }
  mgmt_ip_ = nullptr;
}
void MgmtNetworkSpec::clear_gateway_ip() {
  if (GetArenaForAllocation() == nullptr && gateway_ip_ != nullptr) {
    delete gateway_ip_;
  }
  gateway_ip_ = nullptr;
}
MgmtNetworkSpec::MgmtNetworkSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
}
MgmtNetworkSpec::MgmtNetworkSpec(const MgmtNetworkSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gateway_mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gateway_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gateway_mac().empty()) {
    gateway_mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gateway_mac(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_lldp_mgmt_ip()) {
    lldp_mgmt_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.lldp_mgmt_ip_);
  } else {
    lldp_mgmt_ip_ = nullptr;
  }
  if (from._internal_has_mgmt_ip()) {
    mgmt_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.mgmt_ip_);
  } else {
    mgmt_ip_ = nullptr;
  }
  if (from._internal_has_gateway_ip()) {
    gateway_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.gateway_ip_);
  } else {
    gateway_ip_ = nullptr;
  }
  vlan_ = from.vlan_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
}

inline void MgmtNetworkSpec::SharedCtor() {
gateway_mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gateway_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lldp_mgmt_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vlan_) -
    reinterpret_cast<char*>(&lldp_mgmt_ip_)) + sizeof(vlan_));
}

MgmtNetworkSpec::~MgmtNetworkSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MgmtNetworkSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gateway_mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lldp_mgmt_ip_;
  if (this != internal_default_instance()) delete mgmt_ip_;
  if (this != internal_default_instance()) delete gateway_ip_;
}

void MgmtNetworkSpec::ArenaDtor(void* object) {
  MgmtNetworkSpec* _this = reinterpret_cast< MgmtNetworkSpec* >(object);
  (void)_this;
}
void MgmtNetworkSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MgmtNetworkSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MgmtNetworkSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gateway_mac_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && lldp_mgmt_ip_ != nullptr) {
    delete lldp_mgmt_ip_;
  }
  lldp_mgmt_ip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mgmt_ip_ != nullptr) {
    delete mgmt_ip_;
  }
  mgmt_ip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && gateway_ip_ != nullptr) {
    delete gateway_ip_;
  }
  gateway_ip_ = nullptr;
  vlan_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MgmtNetworkSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress lldp_mgmt_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lldp_mgmt_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress mgmt_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mgmt_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vlan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          vlan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gateway_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes gateway_mac = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_gateway_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MgmtNetworkSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress lldp_mgmt_ip = 1;
  if (this->_internal_has_lldp_mgmt_ip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lldp_mgmt_ip(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress mgmt_ip = 2;
  if (this->_internal_has_mgmt_ip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mgmt_ip(this), target, stream);
  }

  // int32 vlan = 3;
  if (this->_internal_vlan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vlan(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 4;
  if (this->_internal_has_gateway_ip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gateway_ip(this), target, stream);
  }

  // bytes gateway_mac = 5;
  if (!this->_internal_gateway_mac().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_gateway_mac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
  return target;
}

size_t MgmtNetworkSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes gateway_mac = 5;
  if (!this->_internal_gateway_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gateway_mac());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress lldp_mgmt_ip = 1;
  if (this->_internal_has_lldp_mgmt_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lldp_mgmt_ip_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress mgmt_ip = 2;
  if (this->_internal_has_mgmt_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mgmt_ip_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 4;
  if (this->_internal_has_gateway_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gateway_ip_);
  }

  // int32 vlan = 3;
  if (this->_internal_vlan() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vlan());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MgmtNetworkSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MgmtNetworkSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MgmtNetworkSpec::GetClassData() const { return &_class_data_; }

void MgmtNetworkSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MgmtNetworkSpec *>(to)->MergeFrom(
      static_cast<const MgmtNetworkSpec &>(from));
}


void MgmtNetworkSpec::MergeFrom(const MgmtNetworkSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gateway_mac().empty()) {
    _internal_set_gateway_mac(from._internal_gateway_mac());
  }
  if (from._internal_has_lldp_mgmt_ip()) {
    _internal_mutable_lldp_mgmt_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_lldp_mgmt_ip());
  }
  if (from._internal_has_mgmt_ip()) {
    _internal_mutable_mgmt_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_mgmt_ip());
  }
  if (from._internal_has_gateway_ip()) {
    _internal_mutable_gateway_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_gateway_ip());
  }
  if (from._internal_vlan() != 0) {
    _internal_set_vlan(from._internal_vlan());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MgmtNetworkSpec::CopyFrom(const MgmtNetworkSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MgmtNetworkSpec::IsInitialized() const {
  return true;
}

void MgmtNetworkSpec::InternalSwap(MgmtNetworkSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gateway_mac_, lhs_arena,
      &other->gateway_mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MgmtNetworkSpec, vlan_)
      + sizeof(MgmtNetworkSpec::vlan_)
      - PROTOBUF_FIELD_OFFSET(MgmtNetworkSpec, lldp_mgmt_ip_)>(
          reinterpret_cast<char*>(&lldp_mgmt_ip_),
          reinterpret_cast<char*>(&other->lldp_mgmt_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MgmtNetworkSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[6]);
}

// ===================================================================

class DeviceStatus::_Internal {
 public:
};

DeviceStatus::DeviceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  critical_events_(arena),
  alerts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.DeviceStatus)
}
DeviceStatus::DeviceStatus(const DeviceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      critical_events_(from.critical_events_),
      alerts_(from.alerts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  system_mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    system_mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_system_mac_address().empty()) {
    system_mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_system_mac_address(), 
      GetArenaForAllocation());
  }
  vendor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vendor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor_id().empty()) {
    vendor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor_id(), 
      GetArenaForAllocation());
  }
  chip_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chip_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chip_type().empty()) {
    chip_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chip_type(), 
      GetArenaForAllocation());
  }
  os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    os_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_os_version().empty()) {
    os_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_os_version(), 
      GetArenaForAllocation());
  }
  pipeline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pipeline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pipeline().empty()) {
    pipeline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pipeline(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pcie_port_count_, &from.pcie_port_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&host_if_count_) -
    reinterpret_cast<char*>(&pcie_port_count_)) + sizeof(host_if_count_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.DeviceStatus)
}

inline void DeviceStatus::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
system_mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  system_mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vendor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vendor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chip_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chip_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  os_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pipeline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pipeline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pcie_port_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&host_if_count_) -
    reinterpret_cast<char*>(&pcie_port_count_)) + sizeof(host_if_count_));
}

DeviceStatus::~DeviceStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.DeviceStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chip_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pipeline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceStatus::ArenaDtor(void* object) {
  DeviceStatus* _this = reinterpret_cast< DeviceStatus* >(object);
  (void)_this;
}
void DeviceStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.DeviceStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  critical_events_.Clear();
  alerts_.Clear();
  description_.ClearToEmpty();
  system_mac_address_.ClearToEmpty();
  vendor_id_.ClearToEmpty();
  chip_type_.ClearToEmpty();
  os_version_.ClearToEmpty();
  pipeline_.ClearToEmpty();
  ::memset(&pcie_port_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_if_count_) -
      reinterpret_cast<char*>(&pcie_port_count_)) + sizeof(host_if_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.DeviceStatus.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes system_mac_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_system_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vendor_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_vendor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.DeviceStatus.vendor_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chip_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_chip_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.DeviceStatus.chip_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string os_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_os_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.DeviceStatus.os_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pcie_port_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          pcie_port_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          port_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 host_if_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          host_if_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pipeline = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_pipeline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.DeviceStatus.pipeline"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.network.cloud.v1alpha1.SystemEvent critical_events = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_critical_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.network.cloud.v1alpha1.SystemAlert alerts = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alerts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.DeviceStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.DeviceStatus.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // bytes system_mac_address = 2;
  if (!this->_internal_system_mac_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_system_mac_address(), target);
  }

  // string vendor_id = 3;
  if (!this->_internal_vendor_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_id().data(), static_cast<int>(this->_internal_vendor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.DeviceStatus.vendor_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vendor_id(), target);
  }

  // string chip_type = 4;
  if (!this->_internal_chip_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chip_type().data(), static_cast<int>(this->_internal_chip_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.DeviceStatus.chip_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_chip_type(), target);
  }

  // string os_version = 5;
  if (!this->_internal_os_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os_version().data(), static_cast<int>(this->_internal_os_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.DeviceStatus.os_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_os_version(), target);
  }

  // int32 pcie_port_count = 6;
  if (this->_internal_pcie_port_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_pcie_port_count(), target);
  }

  // int32 port_count = 7;
  if (this->_internal_port_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_port_count(), target);
  }

  // int32 host_if_count = 8;
  if (this->_internal_host_if_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_host_if_count(), target);
  }

  // string pipeline = 9;
  if (!this->_internal_pipeline().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pipeline().data(), static_cast<int>(this->_internal_pipeline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.DeviceStatus.pipeline");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_pipeline(), target);
  }

  // repeated .opi_api.network.cloud.v1alpha1.SystemEvent critical_events = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_critical_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_critical_events(i), target, stream);
  }

  // repeated .opi_api.network.cloud.v1alpha1.SystemAlert alerts = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alerts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_alerts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.DeviceStatus)
  return target;
}

size_t DeviceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.DeviceStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.cloud.v1alpha1.SystemEvent critical_events = 10;
  total_size += 1UL * this->_internal_critical_events_size();
  for (const auto& msg : this->critical_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opi_api.network.cloud.v1alpha1.SystemAlert alerts = 11;
  total_size += 1UL * this->_internal_alerts_size();
  for (const auto& msg : this->alerts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string description = 1;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bytes system_mac_address = 2;
  if (!this->_internal_system_mac_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_system_mac_address());
  }

  // string vendor_id = 3;
  if (!this->_internal_vendor_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_id());
  }

  // string chip_type = 4;
  if (!this->_internal_chip_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chip_type());
  }

  // string os_version = 5;
  if (!this->_internal_os_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os_version());
  }

  // string pipeline = 9;
  if (!this->_internal_pipeline().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pipeline());
  }

  // int32 pcie_port_count = 6;
  if (this->_internal_pcie_port_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pcie_port_count());
  }

  // int32 port_count = 7;
  if (this->_internal_port_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port_count());
  }

  // int32 host_if_count = 8;
  if (this->_internal_host_if_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_host_if_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceStatus::GetClassData() const { return &_class_data_; }

void DeviceStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceStatus *>(to)->MergeFrom(
      static_cast<const DeviceStatus &>(from));
}


void DeviceStatus::MergeFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  critical_events_.MergeFrom(from.critical_events_);
  alerts_.MergeFrom(from.alerts_);
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_system_mac_address().empty()) {
    _internal_set_system_mac_address(from._internal_system_mac_address());
  }
  if (!from._internal_vendor_id().empty()) {
    _internal_set_vendor_id(from._internal_vendor_id());
  }
  if (!from._internal_chip_type().empty()) {
    _internal_set_chip_type(from._internal_chip_type());
  }
  if (!from._internal_os_version().empty()) {
    _internal_set_os_version(from._internal_os_version());
  }
  if (!from._internal_pipeline().empty()) {
    _internal_set_pipeline(from._internal_pipeline());
  }
  if (from._internal_pcie_port_count() != 0) {
    _internal_set_pcie_port_count(from._internal_pcie_port_count());
  }
  if (from._internal_port_count() != 0) {
    _internal_set_port_count(from._internal_port_count());
  }
  if (from._internal_host_if_count() != 0) {
    _internal_set_host_if_count(from._internal_host_if_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceStatus::CopyFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatus::IsInitialized() const {
  return true;
}

void DeviceStatus::InternalSwap(DeviceStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  critical_events_.InternalSwap(&other->critical_events_);
  alerts_.InternalSwap(&other->alerts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &system_mac_address_, lhs_arena,
      &other->system_mac_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vendor_id_, lhs_arena,
      &other->vendor_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chip_type_, lhs_arena,
      &other->chip_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &os_version_, lhs_arena,
      &other->os_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pipeline_, lhs_arena,
      &other->pipeline_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceStatus, host_if_count_)
      + sizeof(DeviceStatus::host_if_count_)
      - PROTOBUF_FIELD_OFFSET(DeviceStatus, pcie_port_count_)>(
          reinterpret_cast<char*>(&pcie_port_count_),
          reinterpret_cast<char*>(&other->pcie_port_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[7]);
}

// ===================================================================

class SystemEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& event_time(const SystemEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SystemEvent::_Internal::event_time(const SystemEvent* msg) {
  return *msg->event_time_;
}
void SystemEvent::clear_event_time() {
  if (GetArenaForAllocation() == nullptr && event_time_ != nullptr) {
    delete event_time_;
  }
  event_time_ = nullptr;
}
SystemEvent::SystemEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SystemEvent)
}
SystemEvent::SystemEvent(const SystemEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    event_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event_description().empty()) {
    event_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_event_time()) {
    event_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.event_time_);
  } else {
    event_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SystemEvent)
}

inline void SystemEvent::SharedCtor() {
event_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  event_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
event_time_ = nullptr;
}

SystemEvent::~SystemEvent() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SystemEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SystemEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  event_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_time_;
}

void SystemEvent::ArenaDtor(void* object) {
  SystemEvent* _this = reinterpret_cast< SystemEvent* >(object);
  (void)_this;
}
void SystemEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SystemEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SystemEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && event_time_ != nullptr) {
    delete event_time_;
  }
  event_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp event_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string event_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_event_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.SystemEvent.event_description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SystemEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp event_time = 1;
  if (this->_internal_has_event_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::event_time(this), target, stream);
  }

  // string event_description = 2;
  if (!this->_internal_event_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_description().data(), static_cast<int>(this->_internal_event_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.SystemEvent.event_description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SystemEvent)
  return target;
}

size_t SystemEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SystemEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_description = 2;
  if (!this->_internal_event_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_description());
  }

  // .google.protobuf.Timestamp event_time = 1;
  if (this->_internal_has_event_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SystemEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemEvent::GetClassData() const { return &_class_data_; }

void SystemEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SystemEvent *>(to)->MergeFrom(
      static_cast<const SystemEvent &>(from));
}


void SystemEvent::MergeFrom(const SystemEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SystemEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_description().empty()) {
    _internal_set_event_description(from._internal_event_description());
  }
  if (from._internal_has_event_time()) {
    _internal_mutable_event_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_event_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemEvent::CopyFrom(const SystemEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SystemEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemEvent::IsInitialized() const {
  return true;
}

void SystemEvent::InternalSwap(SystemEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &event_description_, lhs_arena,
      &other->event_description_, rhs_arena
  );
  swap(event_time_, other->event_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[8]);
}

// ===================================================================

class SystemAlert::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& alert_time(const SystemAlert* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SystemAlert::_Internal::alert_time(const SystemAlert* msg) {
  return *msg->alert_time_;
}
void SystemAlert::clear_alert_time() {
  if (GetArenaForAllocation() == nullptr && alert_time_ != nullptr) {
    delete alert_time_;
  }
  alert_time_ = nullptr;
}
SystemAlert::SystemAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.SystemAlert)
}
SystemAlert::SystemAlert(const SystemAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alert_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    alert_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_alert_description().empty()) {
    alert_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alert_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_alert_time()) {
    alert_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.alert_time_);
  } else {
    alert_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.SystemAlert)
}

inline void SystemAlert::SharedCtor() {
alert_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  alert_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
alert_time_ = nullptr;
}

SystemAlert::~SystemAlert() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.SystemAlert)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SystemAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  alert_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete alert_time_;
}

void SystemAlert::ArenaDtor(void* object) {
  SystemAlert* _this = reinterpret_cast< SystemAlert* >(object);
  (void)_this;
}
void SystemAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SystemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.SystemAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alert_description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && alert_time_ != nullptr) {
    delete alert_time_;
  }
  alert_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp alert_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_alert_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string alert_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_alert_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.network.cloud.v1alpha1.SystemAlert.alert_description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.SystemAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp alert_time = 1;
  if (this->_internal_has_alert_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::alert_time(this), target, stream);
  }

  // string alert_description = 2;
  if (!this->_internal_alert_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alert_description().data(), static_cast<int>(this->_internal_alert_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.network.cloud.v1alpha1.SystemAlert.alert_description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_alert_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.SystemAlert)
  return target;
}

size_t SystemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.SystemAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string alert_description = 2;
  if (!this->_internal_alert_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alert_description());
  }

  // .google.protobuf.Timestamp alert_time = 1;
  if (this->_internal_has_alert_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alert_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SystemAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemAlert::GetClassData() const { return &_class_data_; }

void SystemAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SystemAlert *>(to)->MergeFrom(
      static_cast<const SystemAlert &>(from));
}


void SystemAlert::MergeFrom(const SystemAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.SystemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_alert_description().empty()) {
    _internal_set_alert_description(from._internal_alert_description());
  }
  if (from._internal_has_alert_time()) {
    _internal_mutable_alert_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_alert_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemAlert::CopyFrom(const SystemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.SystemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemAlert::IsInitialized() const {
  return true;
}

void SystemAlert::InternalSwap(SystemAlert* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alert_description_, lhs_arena,
      &other->alert_description_, rhs_arena
  );
  swap(alert_time_, other->alert_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemAlert::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_device_2eproto_getter, &descriptor_table_device_2eproto_once,
      file_level_metadata_device_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::DeviceCapabilities* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::DeviceCapabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::DeviceCapabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::Device* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::DeviceSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::DeviceSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::DeviceSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::DeviceStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::DeviceStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::DeviceStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SystemEvent* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SystemEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SystemEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::SystemAlert* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SystemAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::SystemAlert >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
