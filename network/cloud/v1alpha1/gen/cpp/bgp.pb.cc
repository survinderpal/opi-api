// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgp.proto

#include "bgp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
constexpr Bgp::Bgp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , status_(nullptr){}
struct BgpDefaultTypeInternal {
  constexpr BgpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BgpDefaultTypeInternal() {}
  union {
    Bgp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BgpDefaultTypeInternal _Bgp_default_instance_;
constexpr BgpSpec::BgpSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , local_asn_(0u)
  , router_id_(0u)
  , cluster_id_(0u)
  , disable_(false)
  , suppress_default_resolution_(false){}
struct BgpSpecDefaultTypeInternal {
  constexpr BgpSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BgpSpecDefaultTypeInternal() {}
  union {
    BgpSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BgpSpecDefaultTypeInternal _BgpSpec_default_instance_;
constexpr BgpStatus::BgpStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oper_state_(0)

  , adj_rib_out_routes_count_(0)
  , peak_num_adj_rib_out_routes_(0)
  , rem_delaytime_(0)
  , table_ver_(0){}
struct BgpStatusDefaultTypeInternal {
  constexpr BgpStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BgpStatusDefaultTypeInternal() {}
  union {
    BgpStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BgpStatusDefaultTypeInternal _BgpStatus_default_instance_;
constexpr BGPPeer::BGPPeer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , status_(nullptr){}
struct BGPPeerDefaultTypeInternal {
  constexpr BGPPeerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPPeerDefaultTypeInternal() {}
  union {
    BGPPeer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPPeerDefaultTypeInternal _BGPPeer_default_instance_;
constexpr BGPPeerSpec::BGPPeerSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , local_address_(nullptr)
  , peer_addr_(nullptr)
  , state_(0)

  , remote_asn_(0u)
  , send_comm_(false)
  , send_ext_comm_(false)
  , rr_client_(0)

  , connect_retry_(0)
  , holdtime_(0)
  , keep_alive_(0)
  , ttl_(0)
  , idle_holdtime_(0)
  , allow_local_as_(0){}
struct BGPPeerSpecDefaultTypeInternal {
  constexpr BGPPeerSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPPeerSpecDefaultTypeInternal() {}
  union {
    BGPPeerSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPPeerSpecDefaultTypeInternal _BGPPeerSpec_default_instance_;
constexpr BGPPeerStatus::BGPPeerStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : last_error_rcvd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_error_sent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , local_addr_(nullptr)
  , session_state_(0)

  , prev_session_state_(0)

  , holdtime_(0)
  , keepalive_(0)
  , caps_sent_(0)
  , caps_rcvd_(0)
  , caps_neg_(0)
  , sel_local_addr_type_(0)

  , incoming_notifications_(0)
  , outbound_notifications_(0)
  , incoming_updates_(0)
  , outgoing_updates_(0)
  , incoming_keepalives_(0)
  , outgoing_keepalives_(0)
  , incoming_refreshes_(0)
  , outgoing_refreshes_(0)
  , incoming_total_messages_(0)
  , outgoing_total_messages_(0)
  , fsm_est_transitions_(0)
  , connect_retry_count_(0)
  , peergr_(0)
  , stale_pathtime_(0)
  , orf_entry_count_(0)
  , rcvd_msg_elpstime_(0)
  , route_refr_sent_(0)
  , route_refr_rcvd_(0)
  , incoming_prfxes_(0)
  , outgoing_prfxes_(0)
  , outgoing_prfxes_advertised_(0)
  , connect_retry_int_(0)
  , outgoing_update_elpstime_(0)
  , outgoing_prfxes_denied_(0)
  , outgoing_prfxes_imp_wdr_(0)
  , outgoing_prfxes_exp_wdr_(0)
  , incoming_prfxes_imp_wdr_(0)
  , incoming_prfxes_exp_wdr_(0)
  , received_holdtime_(0)
  , fsm_establishedtime_(0)
  , incoming_updates_elpstime_(0)
  , incoming_opens_(0)
  , outgoing_opens_(0)
  , peer_index_(0)
  , ttl_(0)
  , oper_state_(0)
{}
struct BGPPeerStatusDefaultTypeInternal {
  constexpr BGPPeerStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPPeerStatusDefaultTypeInternal() {}
  union {
    BGPPeerStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPPeerStatusDefaultTypeInternal _BGPPeerStatus_default_instance_;
constexpr BGPPeerAf::BGPPeerAf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , state_(nullptr){}
struct BGPPeerAfDefaultTypeInternal {
  constexpr BGPPeerAfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPPeerAfDefaultTypeInternal() {}
  union {
    BGPPeerAf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPPeerAfDefaultTypeInternal _BGPPeerAf_default_instance_;
constexpr BGPPeerAfSpec::BGPPeerAfSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , local_addr_(nullptr)
  , peer_addr_(nullptr)
  , afi_(0)

  , safi_(0)

  , nexthop_self_(false)
  , default_orig_(false)
  , local_port_(0)
  , remote_port_(0)
  , local_addr_scope_id_(0){}
struct BGPPeerAfSpecDefaultTypeInternal {
  constexpr BGPPeerAfSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPPeerAfSpecDefaultTypeInternal() {}
  union {
    BGPPeerAfSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPPeerAfSpecDefaultTypeInternal _BGPPeerAfSpec_default_instance_;
constexpr BGPPeerAfStatus::BGPPeerAfStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : update_group_(0)
  , local_addr_scope_id_(0)
  , route_refresh_(false)
  , add_path_cap_neg_(0)

  , reflector_client_(0)
{}
struct BGPPeerAfStatusDefaultTypeInternal {
  constexpr BGPPeerAfStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPPeerAfStatusDefaultTypeInternal() {}
  union {
    BGPPeerAfStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPPeerAfStatusDefaultTypeInternal _BGPPeerAfStatus_default_instance_;
constexpr BGPNLRIPrefix::BGPNLRIPrefix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , state_(nullptr){}
struct BGPNLRIPrefixDefaultTypeInternal {
  constexpr BGPNLRIPrefixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPNLRIPrefixDefaultTypeInternal() {}
  union {
    BGPNLRIPrefix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPNLRIPrefixDefaultTypeInternal _BGPNLRIPrefix_default_instance_;
constexpr BGPNLRIPrefixSpec::BGPNLRIPrefixSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , afi_(0)

  , safi_(0)

  , prefix_len_(0)
  , route_source_(0)

  , route_source_index_(0)
  , path_id_(0){}
struct BGPNLRIPrefixSpecDefaultTypeInternal {
  constexpr BGPNLRIPrefixSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPNLRIPrefixSpecDefaultTypeInternal() {}
  union {
    BGPNLRIPrefixSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPNLRIPrefixSpecDefaultTypeInternal _BGPNLRIPrefixSpec_default_instance_;
constexpr BGPNLRIPrefixStatus::BGPNLRIPrefixStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ext_comm_()
  , comm_()
  , prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , as_path_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_orig_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , next_hop_addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , peer_addr_(nullptr)
  , afi_(0)

  , safi_(0)

  , prefix_len_(0)
  , route_source_(0)

  , route_source_index_(0)
  , path_id_(0)
  , as_size_(0)

  , best_route_(false)
  , ecmp_route_(false)
  , flap_stats_supprsd_(false)
  , stale_(false)
  , flap_stats_flapcnt_(0)
  , is_active_(0)

  , flap_starttime_(0)
  , reason_not_best_(0)

  , local_pref_(0)
  , origin_(0)

  , med_present_(false)
  , med_(0u)
  , peer_type_(0)
{}
struct BGPNLRIPrefixStatusDefaultTypeInternal {
  constexpr BGPNLRIPrefixStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPNLRIPrefixStatusDefaultTypeInternal() {}
  union {
    BGPNLRIPrefixStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPNLRIPrefixStatusDefaultTypeInternal _BGPNLRIPrefixStatus_default_instance_;
constexpr BGPNLRIPrefixFilter::BGPNLRIPrefixFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ext_comm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , next_hop_(nullptr)
  , ip_address_(nullptr)
  , vnid_(0)
  , route_type_(0)
  , best_(false){}
struct BGPNLRIPrefixFilterDefaultTypeInternal {
  constexpr BGPNLRIPrefixFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPNLRIPrefixFilterDefaultTypeInternal() {}
  union {
    BGPNLRIPrefixFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPNLRIPrefixFilterDefaultTypeInternal _BGPNLRIPrefixFilter_default_instance_;
constexpr BGPAdjRibOut::BGPAdjRibOut(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , status_(nullptr){}
struct BGPAdjRibOutDefaultTypeInternal {
  constexpr BGPAdjRibOutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPAdjRibOutDefaultTypeInternal() {}
  union {
    BGPAdjRibOut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPAdjRibOutDefaultTypeInternal _BGPAdjRibOut_default_instance_;
constexpr BGPAdjRibOutSpec::BGPAdjRibOutSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BGPAdjRibOutSpecDefaultTypeInternal {
  constexpr BGPAdjRibOutSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPAdjRibOutSpecDefaultTypeInternal() {}
  union {
    BGPAdjRibOutSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPAdjRibOutSpecDefaultTypeInternal _BGPAdjRibOutSpec_default_instance_;
constexpr BGPAdjRibOutStatus::BGPAdjRibOutStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : comm_()
  , ext_comm_()
  , prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , as_path_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , peer_addr_(nullptr)
  , afi_(0)

  , safi_(0)

  , prefix_len_(0)
  , state_(0)

  , as_size_(0)

  , med_present_(false)
  , med_(0u){}
struct BGPAdjRibOutStatusDefaultTypeInternal {
  constexpr BGPAdjRibOutStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BGPAdjRibOutStatusDefaultTypeInternal() {}
  union {
    BGPAdjRibOutStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BGPAdjRibOutStatusDefaultTypeInternal _BGPAdjRibOutStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bgp_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bgp_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bgp_2eproto = nullptr;

const uint32_t TableStruct_bgp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Bgp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Bgp, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Bgp, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BgpSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BgpSpec, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BgpSpec, local_asn_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BgpSpec, router_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BgpSpec, cluster_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BgpSpec, disable_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BgpSpec, suppress_default_resolution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BgpStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BgpStatus, oper_state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BgpStatus, adj_rib_out_routes_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BgpStatus, peak_num_adj_rib_out_routes_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BgpStatus, rem_delaytime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BgpStatus, table_ver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeer, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeer, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, local_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, peer_addr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, remote_asn_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, send_comm_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, send_ext_comm_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, rr_client_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, connect_retry_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, holdtime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, keep_alive_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, password_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, ttl_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, idle_holdtime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerSpec, allow_local_as_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, session_state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, prev_session_state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, last_error_rcvd_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, last_error_sent_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, local_addr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, holdtime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, keepalive_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, caps_sent_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, caps_rcvd_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, caps_neg_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, sel_local_addr_type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, incoming_notifications_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, outbound_notifications_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, incoming_updates_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, outgoing_updates_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, incoming_keepalives_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, outgoing_keepalives_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, incoming_refreshes_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, outgoing_refreshes_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, incoming_total_messages_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, outgoing_total_messages_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, fsm_est_transitions_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, connect_retry_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, peergr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, stale_pathtime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, orf_entry_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, rcvd_msg_elpstime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, route_refr_sent_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, route_refr_rcvd_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, incoming_prfxes_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, outgoing_prfxes_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, outgoing_prfxes_advertised_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, connect_retry_int_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, outgoing_update_elpstime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, outgoing_prfxes_denied_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, outgoing_prfxes_imp_wdr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, outgoing_prfxes_exp_wdr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, incoming_prfxes_imp_wdr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, incoming_prfxes_exp_wdr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, received_holdtime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, fsm_establishedtime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, incoming_updates_elpstime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, incoming_opens_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, outgoing_opens_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, peer_index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, ttl_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerStatus, oper_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAf, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAf, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec, local_addr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec, peer_addr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec, afi_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec, safi_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec, nexthop_self_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec, default_orig_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec, local_port_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec, remote_port_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec, local_addr_scope_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus, update_group_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus, local_addr_scope_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus, route_refresh_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus, add_path_cap_neg_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus, reflector_client_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefix, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefix, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec, afi_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec, safi_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec, prefix_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec, prefix_len_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec, route_source_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec, route_source_index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec, path_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, afi_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, safi_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, prefix_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, prefix_len_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, route_source_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, route_source_index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, path_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, best_route_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, as_path_str_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, path_orig_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, next_hop_addr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, as_size_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, ecmp_route_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, peer_addr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, flap_stats_flapcnt_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, flap_stats_supprsd_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, is_active_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, stale_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, flap_starttime_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, reason_not_best_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, ext_comm_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, comm_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, local_pref_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, origin_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, med_present_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, med_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus, peer_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixFilter, ext_comm_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixFilter, vnid_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixFilter, route_type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixFilter, next_hop_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixFilter, ip_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixFilter, best_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOut, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOut, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus, peer_addr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus, afi_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus, safi_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus, prefix_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus, prefix_len_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus, state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus, as_size_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus, as_path_str_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus, comm_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus, ext_comm_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus, med_present_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus, med_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::Bgp)},
  { 8, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BgpSpec)},
  { 20, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BgpStatus)},
  { 31, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BGPPeer)},
  { 39, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BGPPeerSpec)},
  { 60, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BGPPeerStatus)},
  { 113, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BGPPeerAf)},
  { 121, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec)},
  { 137, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus)},
  { 148, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefix)},
  { 156, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec)},
  { 169, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus)},
  { 202, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixFilter)},
  { 214, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BGPAdjRibOut)},
  { 222, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec)},
  { 228, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_Bgp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BgpSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BgpStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BGPPeer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BGPPeerSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BGPPeerStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BGPPeerAf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BGPPeerAfSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BGPPeerAfStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BGPNLRIPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BGPNLRIPrefixSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BGPNLRIPrefixStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BGPNLRIPrefixFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BGPAdjRibOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BGPAdjRibOutSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_BGPAdjRibOutStatus_default_instance_),
};

const char descriptor_table_protodef_bgp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tbgp.proto\022\036opi_api.network.cloud.v1alp"
  "ha1\032\020object_key.proto\032\022networktypes.prot"
  "o\"w\n\003Bgp\0225\n\004spec\030\001 \001(\0132\'.opi_api.network"
  ".cloud.v1alpha1.BgpSpec\0229\n\006status\030\002 \001(\0132"
  ").opi_api.network.cloud.v1alpha1.BgpStat"
  "us\"\243\001\n\007BgpSpec\022(\n\002id\030\001 \001(\0132\034.opi_api.com"
  "mon.v1.ObjectKey\022\021\n\tlocal_asn\030\002 \001(\r\022\021\n\tr"
  "outer_id\030\003 \001(\007\022\022\n\ncluster_id\030\004 \001(\007\022\017\n\007di"
  "sable\030\005 \001(\010\022#\n\033suppress_default_resoluti"
  "on\030\006 \001(\010\"\276\001\n\tBgpStatus\022@\n\noper_state\030\001 \001"
  "(\0162,.opi_api.network.cloud.v1alpha1.BGPO"
  "perState\022 \n\030adj_rib_out_routes_count\030\002 \001"
  "(\005\022#\n\033peak_num_adj_rib_out_routes\030\003 \001(\005\022"
  "\025\n\rrem_delaytime\030\004 \001(\005\022\021\n\ttable_ver\030\005 \001("
  "\005\"\203\001\n\007BGPPeer\0229\n\004spec\030\001 \001(\0132+.opi_api.ne"
  "twork.cloud.v1alpha1.BGPPeerSpec\022=\n\006stat"
  "us\030\002 \001(\0132-.opi_api.network.cloud.v1alpha"
  "1.BGPPeerStatus\"\224\004\n\013BGPPeerSpec\022(\n\002id\030\001 "
  "\001(\0132\034.opi_api.common.v1.ObjectKey\022@\n\005sta"
  "te\030\002 \001(\01621.opi_api.network.opinetcommon."
  "v1alpha1.AdminState\022G\n\rlocal_address\030\003 \001"
  "(\01320.opi_api.network.opinetcommon.v1alph"
  "a1.IPAddress\022C\n\tpeer_addr\030\004 \001(\01320.opi_ap"
  "i.network.opinetcommon.v1alpha1.IPAddres"
  "s\022\022\n\nremote_asn\030\005 \001(\r\022\021\n\tsend_comm\030\006 \001(\010"
  "\022\025\n\rsend_ext_comm\030\007 \001(\010\022B\n\trr_client\030\010 \001"
  "(\0162/.opi_api.network.cloud.v1alpha1.BGPP"
  "eerRRClient\022\025\n\rconnect_retry\030\t \001(\005\022\020\n\010ho"
  "ldtime\030\n \001(\005\022\022\n\nkeep_alive\030\013 \001(\005\022\020\n\010pass"
  "word\030\014 \001(\014\022\013\n\003ttl\030\r \001(\005\022\025\n\ridle_holdtime"
  "\030\016 \001(\005\022\026\n\016allow_local_as\030\017 \001(\005\"\340\013\n\rBGPPe"
  "erStatus\022J\n\rsession_state\030\001 \001(\01623.opi_ap"
  "i.network.cloud.v1alpha1.BGPPeerSessionS"
  "tate\022O\n\022prev_session_state\030\002 \001(\01623.opi_a"
  "pi.network.cloud.v1alpha1.BGPPeerSession"
  "State\022\027\n\017last_error_rcvd\030\003 \001(\014\022\027\n\017last_e"
  "rror_sent\030\004 \001(\014\022D\n\nlocal_addr\030\005 \001(\01320.op"
  "i_api.network.opinetcommon.v1alpha1.IPAd"
  "dress\022\020\n\010holdtime\030\006 \001(\005\022\021\n\tkeepalive\030\007 \001"
  "(\005\022\021\n\tcaps_sent\030\010 \001(\005\022\021\n\tcaps_rcvd\030\t \001(\005"
  "\022\020\n\010caps_neg\030\n \001(\005\022H\n\023sel_local_addr_typ"
  "e\030\013 \001(\0162+.opi_api.network.cloud.v1alpha1"
  ".BGPAddrType\022\036\n\026incoming_notifications\030\014"
  " \001(\005\022\036\n\026outbound_notifications\030\r \001(\005\022\030\n\020"
  "incoming_updates\030\016 \001(\005\022\030\n\020outgoing_updat"
  "es\030\017 \001(\005\022\033\n\023incoming_keepalives\030\020 \001(\005\022\033\n"
  "\023outgoing_keepalives\030\021 \001(\005\022\032\n\022incoming_r"
  "efreshes\030\022 \001(\005\022\032\n\022outgoing_refreshes\030\023 \001"
  "(\005\022\037\n\027incoming_total_messages\030\024 \001(\005\022\037\n\027o"
  "utgoing_total_messages\030\025 \001(\005\022\033\n\023fsm_est_"
  "transitions\030\026 \001(\005\022\033\n\023connect_retry_count"
  "\030\027 \001(\005\022\016\n\006peergr\030\030 \001(\005\022\026\n\016stale_pathtime"
  "\030\031 \001(\005\022\027\n\017orf_entry_count\030\032 \001(\005\022\031\n\021rcvd_"
  "msg_elpstime\030\033 \001(\005\022\027\n\017route_refr_sent\030\034 "
  "\001(\005\022\027\n\017route_refr_rcvd\030\035 \001(\005\022\027\n\017incoming"
  "_prfxes\030\036 \001(\005\022\027\n\017outgoing_prfxes\030\037 \001(\005\022\""
  "\n\032outgoing_prfxes_advertised\030  \001(\005\022\031\n\021co"
  "nnect_retry_int\030! \001(\005\022 \n\030outgoing_update"
  "_elpstime\030\" \001(\005\022\036\n\026outgoing_prfxes_denie"
  "d\030# \001(\005\022\037\n\027outgoing_prfxes_imp_wdr\030$ \001(\005"
  "\022\037\n\027outgoing_prfxes_exp_wdr\030% \001(\005\022\037\n\027inc"
  "oming_prfxes_imp_wdr\030& \001(\005\022\037\n\027incoming_p"
  "rfxes_exp_wdr\030\' \001(\005\022\031\n\021received_holdtime"
  "\030( \001(\005\022\033\n\023fsm_establishedtime\030) \001(\005\022!\n\031i"
  "ncoming_updates_elpstime\030* \001(\005\022\026\n\016incomi"
  "ng_opens\030+ \001(\005\022\026\n\016outgoing_opens\030, \001(\005\022\022"
  "\n\npeer_index\030- \001(\005\022\013\n\003ttl\030. \001(\005\022@\n\noper_"
  "state\030/ \001(\0162,.opi_api.network.cloud.v1al"
  "pha1.BGPOperState\"\210\001\n\tBGPPeerAf\022;\n\004spec\030"
  "\001 \001(\0132-.opi_api.network.cloud.v1alpha1.B"
  "GPPeerAfSpec\022>\n\005state\030\002 \001(\0132/.opi_api.ne"
  "twork.cloud.v1alpha1.BGPPeerAfStatus\"\242\003\n"
  "\rBGPPeerAfSpec\022(\n\002id\030\001 \001(\0132\034.opi_api.com"
  "mon.v1.ObjectKey\022D\n\nlocal_addr\030\002 \001(\01320.o"
  "pi_api.network.opinetcommon.v1alpha1.IPA"
  "ddress\022C\n\tpeer_addr\030\003 \001(\01320.opi_api.netw"
  "ork.opinetcommon.v1alpha1.IPAddress\0223\n\003a"
  "fi\030\004 \001(\0162&.opi_api.network.cloud.v1alpha"
  "1.BGPAfi\0225\n\004safi\030\005 \001(\0162\'.opi_api.network"
  ".cloud.v1alpha1.BGPSafi\022\024\n\014nexthop_self\030"
  "\006 \001(\010\022\024\n\014default_orig\030\007 \001(\010\022\022\n\nlocal_por"
  "t\030\010 \001(\005\022\023\n\013remote_port\030\t \001(\005\022\033\n\023local_ad"
  "dr_scope_id\030\n \001(\005\"\365\001\n\017BGPPeerAfStatus\022\024\n"
  "\014update_group\030\001 \001(\005\022\033\n\023local_addr_scope_"
  "id\030\002 \001(\005\022\025\n\rroute_refresh\030\003 \001(\010\022M\n\020add_p"
  "ath_cap_neg\030\004 \001(\01623.opi_api.network.clou"
  "d.v1alpha1.BgpAddPathCapNegCap\022I\n\020reflec"
  "tor_client\030\005 \001(\0162/.opi_api.network.cloud"
  ".v1alpha1.BGPPeerRRClient\"\224\001\n\rBGPNLRIPre"
  "fix\022\?\n\004spec\030\001 \001(\01321.opi_api.network.clou"
  "d.v1alpha1.BGPNLRIPrefixSpec\022B\n\005state\030\002 "
  "\001(\01323.opi_api.network.cloud.v1alpha1.BGP"
  "NLRIPrefixStatus\"\217\002\n\021BGPNLRIPrefixSpec\0223"
  "\n\003afi\030\001 \001(\0162&.opi_api.network.cloud.v1al"
  "pha1.BGPAfi\0225\n\004safi\030\002 \001(\0162\'.opi_api.netw"
  "ork.cloud.v1alpha1.BGPSafi\022\016\n\006prefix\030\003 \001"
  "(\014\022\022\n\nprefix_len\030\004 \001(\005\022=\n\014route_source\030\005"
  " \001(\0162\'.opi_api.network.cloud.v1alpha1.NL"
  "RISrc\022\032\n\022route_source_index\030\006 \001(\005\022\017\n\007pat"
  "h_id\030\007 \001(\005\"\274\007\n\023BGPNLRIPrefixStatus\0223\n\003af"
  "i\030\001 \001(\0162&.opi_api.network.cloud.v1alpha1"
  ".BGPAfi\0225\n\004safi\030\002 \001(\0162\'.opi_api.network."
  "cloud.v1alpha1.BGPSafi\022\016\n\006prefix\030\003 \001(\014\022\022"
  "\n\nprefix_len\030\004 \001(\005\022=\n\014route_source\030\005 \001(\016"
  "2\'.opi_api.network.cloud.v1alpha1.NLRISr"
  "c\022\032\n\022route_source_index\030\006 \001(\005\022\017\n\007path_id"
  "\030\007 \001(\005\022\022\n\nbest_route\030\010 \001(\010\022\023\n\013as_path_st"
  "r\030\t \001(\014\022\024\n\014path_orig_id\030\n \001(\014\022\025\n\rnext_ho"
  "p_addr\030\013 \001(\014\022:\n\007as_size\030\014 \001(\0162).opi_api."
  "network.cloud.v1alpha1.BgpAsSize\022\022\n\necmp"
  "_route\030\r \001(\010\022C\n\tpeer_addr\030\016 \001(\01320.opi_ap"
  "i.network.opinetcommon.v1alpha1.IPAddres"
  "s\022\032\n\022flap_stats_flapcnt\030\017 \001(\005\022\032\n\022flap_st"
  "ats_supprsd\030\020 \001(\010\022B\n\tis_active\030\021 \001(\0162/.o"
  "pi_api.network.cloud.v1alpha1.BgpNlriIsA"
  "ctive\022\r\n\005stale\030\022 \001(\010\022\026\n\016flap_starttime\030\023"
  " \001(\005\022F\n\017reason_not_best\030\024 \001(\0162-.opi_api."
  "network.cloud.v1alpha1.BGPRsnNotBest\022\020\n\010"
  "ext_comm\030\025 \003(\014\022\014\n\004comm\030\026 \003(\014\022\022\n\nlocal_pr"
  "ef\030\027 \001(\005\022=\n\006origin\030\030 \001(\0162-.opi_api.netwo"
  "rk.cloud.v1alpha1.BGPOriginAttr\022\023\n\013med_p"
  "resent\030\031 \001(\010\022\013\n\003med\030\032 \001(\r\022>\n\tpeer_type\030\033"
  " \001(\0162+.opi_api.network.cloud.v1alpha1.BG"
  "PPeerType\"\341\001\n\023BGPNLRIPrefixFilter\022\020\n\010ext"
  "_comm\030\001 \001(\014\022\014\n\004vnid\030\002 \001(\005\022\022\n\nroute_type\030"
  "\003 \001(\005\022B\n\010next_hop\030\004 \001(\01320.opi_api.networ"
  "k.opinetcommon.v1alpha1.IPAddress\022D\n\nip_"
  "address\030\005 \001(\01320.opi_api.network.opinetco"
  "mmon.v1alpha1.IPAddress\022\014\n\004best\030\006 \001(\010\"\222\001"
  "\n\014BGPAdjRibOut\022>\n\004spec\030\001 \001(\01320.opi_api.n"
  "etwork.cloud.v1alpha1.BGPAdjRibOutSpec\022B"
  "\n\006status\030\002 \001(\01322.opi_api.network.cloud.v"
  "1alpha1.BGPAdjRibOutStatus\"\022\n\020BGPAdjRibO"
  "utSpec\"\276\003\n\022BGPAdjRibOutStatus\022C\n\tpeer_ad"
  "dr\030\001 \001(\01320.opi_api.network.opinetcommon."
  "v1alpha1.IPAddress\0223\n\003afi\030\002 \001(\0162&.opi_ap"
  "i.network.cloud.v1alpha1.BGPAfi\0225\n\004safi\030"
  "\003 \001(\0162\'.opi_api.network.cloud.v1alpha1.B"
  "GPSafi\022\016\n\006prefix\030\004 \001(\014\022\022\n\nprefix_len\030\005 \001"
  "(\005\022@\n\005state\030\006 \001(\01621.opi_api.network.clou"
  "d.v1alpha1.BgpAroAdvertState\022:\n\007as_size\030"
  "\007 \001(\0162).opi_api.network.cloud.v1alpha1.B"
  "gpAsSize\022\023\n\013as_path_str\030\010 \001(\014\022\014\n\004comm\030\t "
  "\003(\014\022\020\n\010ext_comm\030\n \003(\014\022\023\n\013med_present\030\013 \001"
  "(\010\022\013\n\003med\030\014 \001(\r*X\n\006BGPAfi\022\027\n\023BGP_AFI_UNS"
  "PECIFIED\020\000\022\020\n\014BGP_AFI_IPV4\020\001\022\020\n\014BGP_AFI_"
  "IPV6\020\002\022\021\n\rBGP_AFI_L2VPN\020\031*L\n\007BGPSafi\022\030\n\024"
  "BGP_SAFI_UNSPECIFIED\020\000\022\024\n\020BGP_SAFI_UNICA"
  "ST\020\001\022\021\n\rBGP_SAFI_EVPN\020F*l\n\017BGPPeerRRClie"
  "nt\022\"\n\036BGP_PEER_RR_CLIENT_UNSPECIFIED\020\000\022\026"
  "\n\022BGP_PEER_RR_CLIENT\020\001\022\035\n\031BGP_PEER_RR_ME"
  "SHED_CLIENT\020\002*\232\002\n\023BGPPeerSessionState\022&\n"
  "\"BGP_PEER_SESSION_STATE_UNSPECIFIED\020\000\022\037\n"
  "\033BGP_PEER_SESSION_STATE_IDLE\020\001\022\"\n\036BGP_PE"
  "ER_SESSION_STATE_CONNECT\020\002\022!\n\035BGP_PEER_S"
  "ESSION_STATE_ACTIVE\020\003\022#\n\037BGP_PEER_SESSIO"
  "N_STATE_OPENSENT\020\004\022&\n\"BGP_PEER_SESSION_S"
  "TATE_OPENCONFIRM\020\005\022&\n\"BGP_PEER_SESSION_S"
  "TATE_ESTABLISHED\020\006*_\n\tBgpAsSize\022\033\n\027BGP_A"
  "S_SIZE_UNSPECIFIED\020\000\022\031\n\025BGP_AS_SIZE_TWO_"
  "OCTET\020\001\022\032\n\026BGP_AS_SIZE_FOUR_OCTET\020\002*\320\004\n\013"
  "BGPAddrType\022\035\n\031BGP_ADDR_TYPE_UNSPECIFIED"
  "\020\000\022\026\n\022BGP_ADDR_TYPE_IPV4\020\001\022\026\n\022BGP_ADDR_T"
  "YPE_IPV6\020\002\022\026\n\022BGP_ADDR_TYPE_NSAP\020\003\022\026\n\022BG"
  "P_ADDR_TYPE_HDLC\020\004\022\031\n\025BGP_ADDR_TYPE_BBN1"
  "822\020\005\022\031\n\025BGP_ADDR_TYPE_IEEE802\020\006\022\026\n\022BGP_"
  "ADDR_TYPE_E163\020\007\022\026\n\022BGP_ADDR_TYPE_E164\020\010"
  "\022\025\n\021BGP_ADDR_TYPE_F69\020\t\022\026\n\022BGP_ADDR_TYPE"
  "_X121\020\n\022\025\n\021BGP_ADDR_TYPE_IPX\020\013\022\033\n\027BGP_AD"
  "DR_TYPE_APPLETALK\020\014\022\032\n\026BGP_ADDR_TYPE_DEC"
  "NETIV\020\r\022\033\n\027BGP_ADDR_TYPE_BANYANVIN\020\016\022\033\n\027"
  "BGP_ADDR_TYPE_E164_NSAP\020\017\022\032\n\026BGP_ADDR_TY"
  "PE_IPV4_TNA\020\020\022\032\n\026BGP_ADDR_TYPE_IPV6_TNA\020"
  "\021\022\032\n\026BGP_ADDR_TYPE_NSAP_TNA\020\022\022\032\n\026BGP_ADD"
  "R_TYPE_VPN_IPV4\020\023\022\032\n\026BGP_ADDR_TYPE_VPN_I"
  "PV6\020\024\022\027\n\023BGP_ADDR_TYPE_L2VPN\020\031*\271\001\n\014BGPOp"
  "erState\022\036\n\032BGP_OPER_STATE_UNSPECIFIED\020\000\022"
  "\025\n\021BGP_OPER_STATE_UP\020\001\022\027\n\023BGP_OPER_STATE"
  "_DOWN\020\002\022\033\n\027BGP_OPER_STATE_GOING_UP\020\003\022\035\n\031"
  "BGP_OPER_STATE_GOING_DOWN\020\004\022\035\n\031BGP_OPER_"
  "STATE_ACT_FAILED\020\005*\275\001\n\023BgpAddPathCapNegC"
  "ap\022\033\n\027BGP_ADD_PATH_SR_DISABLE\020\000\022\033\n\027BGP_A"
  "DD_PATH_SR_RECEIVE\020\001\022\030\n\024BGP_ADD_PATH_SR_"
  "SEND\020\002\022\030\n\024BGP_ADD_PATH_SR_BOTH\020\003\022\033\n\027BGP_"
  "ADD_PATH_SR_INHERIT\020\004\022\033\n\027BGP_ADD_PATH_SR"
  "_UNKNOWN\020\005*\334\001\n\024BGPClearRouteOptions\022\'\n#B"
  "GP_CLEAR_ROUTE_OPTIONS_UNSPECIFIED\020\000\022 \n\034"
  "BGP_CLEAR_ROUTE_OPTIONS_HARD\020\001\022&\n\"BGP_CL"
  "EAR_ROUTE_OPTIONS_REFRESH_IN\020\002\022\'\n#BGP_CL"
  "EAR_ROUTE_OPTIONS_REFRESH_OUT\020\003\022(\n$BGP_C"
  "LEAR_ROUTE_OPTIONS_REFRESH_BOTH\020\004*[\n\007NLR"
  "ISrc\022\030\n\024NLRI_SRC_UNSPECIFIED\020\000\022\021\n\rNLRI_S"
  "RC_PEER\020\001\022\020\n\014NLRI_SRC_AFM\020\002\022\021\n\rNLRI_SRC_"
  "SELF\020\003*\231\001\n\017BgpNlriIsActive\022\"\n\036BGP_NLRI_I"
  "S_ACTIVE_UNSPECIFIED\020\000\022\"\n\036BGP_NLRI_IS_AC"
  "TIVE_NOT_TRACKED\020\001\022\037\n\033BGP_NLRI_IS_ACTIVE"
  "_INACTIVE\020\002\022\035\n\031BGP_NLRI_IS_ACTIVE_ACTIVE"
  "\020\003*\246\004\n\rBGPRsnNotBest\022\035\n\031BGP_REASON_NOT_C"
  "ONSIDERED\020\000\022\034\n\030BGP_REASON_ROUTE_IS_BEST\020"
  "\001\022\025\n\021BGP_REASON_WEIGHT\020\002\022\031\n\025BGP_REASON_L"
  "OCAL_PREF\020\003\022\037\n\033BGP_REASON_LCL_ORIG_PRFRR"
  "ED\020\004\022\032\n\026BGP_REASON_AS_PATH_LEN\020\005\022\025\n\021BGP_"
  "REASON_ORIGIN\020\006\022\022\n\016BGP_REASON_MED\020\007\022\035\n\031B"
  "GP_REASON_LOCAL_ORIG_TIE\020\010\022\037\n\033BGP_REASON"
  "_EBGP_V_IBGP_PEER\020\t\022\035\n\031BGP_REASON_ADMIN_"
  "DISTANCE\020\n\022\037\n\033BGP_REASON_PATH_TO_NEXT_CS"
  "T\020\013\022\034\n\030BGP_REASON_PREF_EXISTING\020\014\022\031\n\025BGP"
  "_REASON_IDENTIFIER\020\r\022\032\n\026BGP_REASON_CLUST"
  "ER_LEN\020\016\022\035\n\031BGP_REASON_PEER_ADDR_TYPE\020\017\022"
  "\030\n\024BGP_REASON_PEER_ADDR\020\020\022\030\n\024BGP_REASON_"
  "PEER_PORT\020\021\022\026\n\022BGP_REASON_PATH_ID\020\022*\202\001\n\r"
  "BGPOriginAttr\022\037\n\033BGP_ORIGIN_ATTR_UNSPECI"
  "FIED\020\000\022\027\n\023BGP_ORIGIN_ATTR_IGP\020\001\022\027\n\023BGP_O"
  "RIGIN_ATTR_EGP\020\002\022\036\n\032BGP_ORIGIN_ATTR_INCO"
  "MPLETE\020\003*t\n\013BGPPeerType\022\035\n\031BGP_PEER_TYPE"
  "_UNSPECIFIED\020\000\022\026\n\022BGP_PEER_TYPE_NONE\020\001\022\026"
  "\n\022BGP_PEER_TYPE_IBGP\020\002\022\026\n\022BGP_PEER_TYPE_"
  "EBGP\020\003*\324\001\n\021BgpAroAdvertState\022$\n BGP_ARO_"
  "ADVERT_STATE_UNSPECIFIED\020\000\022#\n\037BGP_ARO_AD"
  "VERT_STATE_ADVERTISED\020\001\022#\n\037BGP_ARO_ADVER"
  "T_STATE_SUPPRESSED\020\002\022+\n\'BGP_ARO_ADVERT_S"
  "TATE_PENDING_WITHDRAWAL\020\003\022\"\n\036BGP_ARO_ADV"
  "ERT_STATE_WITHDRAWN\020\004Bi\n\036opi_api.network"
  ".cloud.v1alpha1B\010BGPProtoP\001Z;github.com/"
  "opiproject/opi-api/network/cloud/v1alpha"
  "1/gen/gob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bgp_2eproto_deps[2] = {
  &::descriptor_table_networktypes_2eproto,
  &::descriptor_table_object_5fkey_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bgp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bgp_2eproto = {
  false, false, 9016, descriptor_table_protodef_bgp_2eproto, "bgp.proto", 
  &descriptor_table_bgp_2eproto_once, descriptor_table_bgp_2eproto_deps, 2, 16,
  schemas, file_default_instances, TableStruct_bgp_2eproto::offsets,
  file_level_metadata_bgp_2eproto, file_level_enum_descriptors_bgp_2eproto, file_level_service_descriptors_bgp_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_bgp_2eproto_getter() {
  return &descriptor_table_bgp_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_bgp_2eproto(&descriptor_table_bgp_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPAfi_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgp_2eproto);
  return file_level_enum_descriptors_bgp_2eproto[0];
}
bool BGPAfi_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPSafi_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgp_2eproto);
  return file_level_enum_descriptors_bgp_2eproto[1];
}
bool BGPSafi_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 70:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPPeerRRClient_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgp_2eproto);
  return file_level_enum_descriptors_bgp_2eproto[2];
}
bool BGPPeerRRClient_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPPeerSessionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgp_2eproto);
  return file_level_enum_descriptors_bgp_2eproto[3];
}
bool BGPPeerSessionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BgpAsSize_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgp_2eproto);
  return file_level_enum_descriptors_bgp_2eproto[4];
}
bool BgpAsSize_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPAddrType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgp_2eproto);
  return file_level_enum_descriptors_bgp_2eproto[5];
}
bool BGPAddrType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPOperState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgp_2eproto);
  return file_level_enum_descriptors_bgp_2eproto[6];
}
bool BGPOperState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BgpAddPathCapNegCap_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgp_2eproto);
  return file_level_enum_descriptors_bgp_2eproto[7];
}
bool BgpAddPathCapNegCap_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPClearRouteOptions_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgp_2eproto);
  return file_level_enum_descriptors_bgp_2eproto[8];
}
bool BGPClearRouteOptions_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NLRISrc_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgp_2eproto);
  return file_level_enum_descriptors_bgp_2eproto[9];
}
bool NLRISrc_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BgpNlriIsActive_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgp_2eproto);
  return file_level_enum_descriptors_bgp_2eproto[10];
}
bool BgpNlriIsActive_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPRsnNotBest_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgp_2eproto);
  return file_level_enum_descriptors_bgp_2eproto[11];
}
bool BGPRsnNotBest_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPOriginAttr_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgp_2eproto);
  return file_level_enum_descriptors_bgp_2eproto[12];
}
bool BGPOriginAttr_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BGPPeerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgp_2eproto);
  return file_level_enum_descriptors_bgp_2eproto[13];
}
bool BGPPeerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BgpAroAdvertState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bgp_2eproto);
  return file_level_enum_descriptors_bgp_2eproto[14];
}
bool BgpAroAdvertState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Bgp::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::BgpSpec& spec(const Bgp* msg);
  static const ::opi_api::network::cloud::v1alpha1::BgpStatus& status(const Bgp* msg);
};

const ::opi_api::network::cloud::v1alpha1::BgpSpec&
Bgp::_Internal::spec(const Bgp* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::BgpStatus&
Bgp::_Internal::status(const Bgp* msg) {
  return *msg->status_;
}
Bgp::Bgp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.Bgp)
}
Bgp::Bgp(const Bgp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::BgpSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::cloud::v1alpha1::BgpStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.Bgp)
}

inline void Bgp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

Bgp::~Bgp() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.Bgp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Bgp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void Bgp::ArenaDtor(void* object) {
  Bgp* _this = reinterpret_cast< Bgp* >(object);
  (void)_this;
}
void Bgp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bgp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Bgp::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.Bgp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bgp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.BgpSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BgpStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Bgp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.Bgp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.BgpSpec spec = 1;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.BgpStatus status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.Bgp)
  return target;
}

size_t Bgp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.Bgp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.BgpSpec spec = 1;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.BgpStatus status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bgp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Bgp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bgp::GetClassData() const { return &_class_data_; }

void Bgp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Bgp *>(to)->MergeFrom(
      static_cast<const Bgp &>(from));
}


void Bgp::MergeFrom(const Bgp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.Bgp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::BgpSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::cloud::v1alpha1::BgpStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bgp::CopyFrom(const Bgp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.Bgp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bgp::IsInitialized() const {
  return true;
}

void Bgp::InternalSwap(Bgp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bgp, status_)
      + sizeof(Bgp::status_)
      - PROTOBUF_FIELD_OFFSET(Bgp, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Bgp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[0]);
}

// ===================================================================

class BgpSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const BgpSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
BgpSpec::_Internal::id(const BgpSpec* msg) {
  return *msg->id_;
}
void BgpSpec::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
BgpSpec::BgpSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BgpSpec)
}
BgpSpec::BgpSpec(const BgpSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&local_asn_, &from.local_asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&suppress_default_resolution_) -
    reinterpret_cast<char*>(&local_asn_)) + sizeof(suppress_default_resolution_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BgpSpec)
}

inline void BgpSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&suppress_default_resolution_) -
    reinterpret_cast<char*>(&id_)) + sizeof(suppress_default_resolution_));
}

BgpSpec::~BgpSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.BgpSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BgpSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void BgpSpec::ArenaDtor(void* object) {
  BgpSpec* _this = reinterpret_cast< BgpSpec* >(object);
  (void)_this;
}
void BgpSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BgpSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BgpSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.BgpSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&local_asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&suppress_default_resolution_) -
      reinterpret_cast<char*>(&local_asn_)) + sizeof(suppress_default_resolution_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BgpSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 local_asn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          local_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 router_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          router_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // fixed32 cluster_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // bool disable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          disable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool suppress_default_resolution = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          suppress_default_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BgpSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.BgpSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // uint32 local_asn = 2;
  if (this->_internal_local_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_asn(), target);
  }

  // fixed32 router_id = 3;
  if (this->_internal_router_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_router_id(), target);
  }

  // fixed32 cluster_id = 4;
  if (this->_internal_cluster_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_cluster_id(), target);
  }

  // bool disable = 5;
  if (this->_internal_disable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_disable(), target);
  }

  // bool suppress_default_resolution = 6;
  if (this->_internal_suppress_default_resolution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_suppress_default_resolution(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.BgpSpec)
  return target;
}

size_t BgpSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.BgpSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // uint32 local_asn = 2;
  if (this->_internal_local_asn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_local_asn());
  }

  // fixed32 router_id = 3;
  if (this->_internal_router_id() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 cluster_id = 4;
  if (this->_internal_cluster_id() != 0) {
    total_size += 1 + 4;
  }

  // bool disable = 5;
  if (this->_internal_disable() != 0) {
    total_size += 1 + 1;
  }

  // bool suppress_default_resolution = 6;
  if (this->_internal_suppress_default_resolution() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BgpSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BgpSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BgpSpec::GetClassData() const { return &_class_data_; }

void BgpSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BgpSpec *>(to)->MergeFrom(
      static_cast<const BgpSpec &>(from));
}


void BgpSpec::MergeFrom(const BgpSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.BgpSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_local_asn() != 0) {
    _internal_set_local_asn(from._internal_local_asn());
  }
  if (from._internal_router_id() != 0) {
    _internal_set_router_id(from._internal_router_id());
  }
  if (from._internal_cluster_id() != 0) {
    _internal_set_cluster_id(from._internal_cluster_id());
  }
  if (from._internal_disable() != 0) {
    _internal_set_disable(from._internal_disable());
  }
  if (from._internal_suppress_default_resolution() != 0) {
    _internal_set_suppress_default_resolution(from._internal_suppress_default_resolution());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BgpSpec::CopyFrom(const BgpSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.BgpSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BgpSpec::IsInitialized() const {
  return true;
}

void BgpSpec::InternalSwap(BgpSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BgpSpec, suppress_default_resolution_)
      + sizeof(BgpSpec::suppress_default_resolution_)
      - PROTOBUF_FIELD_OFFSET(BgpSpec, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BgpSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[1]);
}

// ===================================================================

class BgpStatus::_Internal {
 public:
};

BgpStatus::BgpStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BgpStatus)
}
BgpStatus::BgpStatus(const BgpStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&oper_state_, &from.oper_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_ver_) -
    reinterpret_cast<char*>(&oper_state_)) + sizeof(table_ver_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BgpStatus)
}

inline void BgpStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&oper_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_ver_) -
    reinterpret_cast<char*>(&oper_state_)) + sizeof(table_ver_));
}

BgpStatus::~BgpStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.BgpStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BgpStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BgpStatus::ArenaDtor(void* object) {
  BgpStatus* _this = reinterpret_cast< BgpStatus* >(object);
  (void)_this;
}
void BgpStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BgpStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BgpStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.BgpStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&oper_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_ver_) -
      reinterpret_cast<char*>(&oper_state_)) + sizeof(table_ver_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BgpStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.BGPOperState oper_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper_state(static_cast<::opi_api::network::cloud::v1alpha1::BGPOperState>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 adj_rib_out_routes_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          adj_rib_out_routes_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 peak_num_adj_rib_out_routes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          peak_num_adj_rib_out_routes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rem_delaytime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          rem_delaytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 table_ver = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          table_ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BgpStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.BgpStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.BGPOperState oper_state = 1;
  if (this->_internal_oper_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_oper_state(), target);
  }

  // int32 adj_rib_out_routes_count = 2;
  if (this->_internal_adj_rib_out_routes_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_adj_rib_out_routes_count(), target);
  }

  // int32 peak_num_adj_rib_out_routes = 3;
  if (this->_internal_peak_num_adj_rib_out_routes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_peak_num_adj_rib_out_routes(), target);
  }

  // int32 rem_delaytime = 4;
  if (this->_internal_rem_delaytime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_rem_delaytime(), target);
  }

  // int32 table_ver = 5;
  if (this->_internal_table_ver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_table_ver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.BgpStatus)
  return target;
}

size_t BgpStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.BgpStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.BGPOperState oper_state = 1;
  if (this->_internal_oper_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper_state());
  }

  // int32 adj_rib_out_routes_count = 2;
  if (this->_internal_adj_rib_out_routes_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_adj_rib_out_routes_count());
  }

  // int32 peak_num_adj_rib_out_routes = 3;
  if (this->_internal_peak_num_adj_rib_out_routes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_peak_num_adj_rib_out_routes());
  }

  // int32 rem_delaytime = 4;
  if (this->_internal_rem_delaytime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_rem_delaytime());
  }

  // int32 table_ver = 5;
  if (this->_internal_table_ver() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_table_ver());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BgpStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BgpStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BgpStatus::GetClassData() const { return &_class_data_; }

void BgpStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BgpStatus *>(to)->MergeFrom(
      static_cast<const BgpStatus &>(from));
}


void BgpStatus::MergeFrom(const BgpStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.BgpStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_oper_state() != 0) {
    _internal_set_oper_state(from._internal_oper_state());
  }
  if (from._internal_adj_rib_out_routes_count() != 0) {
    _internal_set_adj_rib_out_routes_count(from._internal_adj_rib_out_routes_count());
  }
  if (from._internal_peak_num_adj_rib_out_routes() != 0) {
    _internal_set_peak_num_adj_rib_out_routes(from._internal_peak_num_adj_rib_out_routes());
  }
  if (from._internal_rem_delaytime() != 0) {
    _internal_set_rem_delaytime(from._internal_rem_delaytime());
  }
  if (from._internal_table_ver() != 0) {
    _internal_set_table_ver(from._internal_table_ver());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BgpStatus::CopyFrom(const BgpStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.BgpStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BgpStatus::IsInitialized() const {
  return true;
}

void BgpStatus::InternalSwap(BgpStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BgpStatus, table_ver_)
      + sizeof(BgpStatus::table_ver_)
      - PROTOBUF_FIELD_OFFSET(BgpStatus, oper_state_)>(
          reinterpret_cast<char*>(&oper_state_),
          reinterpret_cast<char*>(&other->oper_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BgpStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[2]);
}

// ===================================================================

class BGPPeer::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::BGPPeerSpec& spec(const BGPPeer* msg);
  static const ::opi_api::network::cloud::v1alpha1::BGPPeerStatus& status(const BGPPeer* msg);
};

const ::opi_api::network::cloud::v1alpha1::BGPPeerSpec&
BGPPeer::_Internal::spec(const BGPPeer* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::BGPPeerStatus&
BGPPeer::_Internal::status(const BGPPeer* msg) {
  return *msg->status_;
}
BGPPeer::BGPPeer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BGPPeer)
}
BGPPeer::BGPPeer(const BGPPeer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::BGPPeerSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::cloud::v1alpha1::BGPPeerStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BGPPeer)
}

inline void BGPPeer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

BGPPeer::~BGPPeer() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.BGPPeer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPPeer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void BGPPeer::ArenaDtor(void* object) {
  BGPPeer* _this = reinterpret_cast< BGPPeer* >(object);
  (void)_this;
}
void BGPPeer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPPeer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPPeer::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.BGPPeer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPPeer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.BGPPeerSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPPeerStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BGPPeer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.BGPPeer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.BGPPeerSpec spec = 1;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.BGPPeerStatus status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.BGPPeer)
  return target;
}

size_t BGPPeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.BGPPeer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.BGPPeerSpec spec = 1;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.BGPPeerStatus status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPPeer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPPeer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPPeer::GetClassData() const { return &_class_data_; }

void BGPPeer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BGPPeer *>(to)->MergeFrom(
      static_cast<const BGPPeer &>(from));
}


void BGPPeer::MergeFrom(const BGPPeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.BGPPeer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::BGPPeerSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::cloud::v1alpha1::BGPPeerStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPPeer::CopyFrom(const BGPPeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.BGPPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPPeer::IsInitialized() const {
  return true;
}

void BGPPeer::InternalSwap(BGPPeer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPPeer, status_)
      + sizeof(BGPPeer::status_)
      - PROTOBUF_FIELD_OFFSET(BGPPeer, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPPeer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[3]);
}

// ===================================================================

class BGPPeerSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const BGPPeerSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& local_address(const BGPPeerSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& peer_addr(const BGPPeerSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
BGPPeerSpec::_Internal::id(const BGPPeerSpec* msg) {
  return *msg->id_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
BGPPeerSpec::_Internal::local_address(const BGPPeerSpec* msg) {
  return *msg->local_address_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
BGPPeerSpec::_Internal::peer_addr(const BGPPeerSpec* msg) {
  return *msg->peer_addr_;
}
void BGPPeerSpec::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void BGPPeerSpec::clear_local_address() {
  if (GetArenaForAllocation() == nullptr && local_address_ != nullptr) {
    delete local_address_;
  }
  local_address_ = nullptr;
}
void BGPPeerSpec::clear_peer_addr() {
  if (GetArenaForAllocation() == nullptr && peer_addr_ != nullptr) {
    delete peer_addr_;
  }
  peer_addr_ = nullptr;
}
BGPPeerSpec::BGPPeerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BGPPeerSpec)
}
BGPPeerSpec::BGPPeerSpec(const BGPPeerSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_local_address()) {
    local_address_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.local_address_);
  } else {
    local_address_ = nullptr;
  }
  if (from._internal_has_peer_addr()) {
    peer_addr_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.peer_addr_);
  } else {
    peer_addr_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_local_as_) -
    reinterpret_cast<char*>(&state_)) + sizeof(allow_local_as_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BGPPeerSpec)
}

inline void BGPPeerSpec::SharedCtor() {
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_local_as_) -
    reinterpret_cast<char*>(&id_)) + sizeof(allow_local_as_));
}

BGPPeerSpec::~BGPPeerSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.BGPPeerSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPPeerSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete local_address_;
  if (this != internal_default_instance()) delete peer_addr_;
}

void BGPPeerSpec::ArenaDtor(void* object) {
  BGPPeerSpec* _this = reinterpret_cast< BGPPeerSpec* >(object);
  (void)_this;
}
void BGPPeerSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPPeerSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPPeerSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.BGPPeerSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && local_address_ != nullptr) {
    delete local_address_;
  }
  local_address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && peer_addr_ != nullptr) {
    delete peer_addr_;
  }
  peer_addr_ = nullptr;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_local_as_) -
      reinterpret_cast<char*>(&state_)) + sizeof(allow_local_as_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPPeerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.AdminState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::opi_api::network::opinetcommon::v1alpha1::AdminState>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_addr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 remote_asn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          remote_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool send_comm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          send_comm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool send_ext_comm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          send_ext_comm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPPeerRRClient rr_client = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rr_client(static_cast<::opi_api::network::cloud::v1alpha1::BGPPeerRRClient>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 connect_retry = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          connect_retry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 holdtime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          holdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 keep_alive = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          keep_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes password = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ttl = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 idle_holdtime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          idle_holdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 allow_local_as = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          allow_local_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BGPPeerSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.BGPPeerSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.AdminState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_address = 3;
  if (this->_internal_has_local_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::local_address(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 4;
  if (this->_internal_has_peer_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::peer_addr(this), target, stream);
  }

  // uint32 remote_asn = 5;
  if (this->_internal_remote_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_remote_asn(), target);
  }

  // bool send_comm = 6;
  if (this->_internal_send_comm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_send_comm(), target);
  }

  // bool send_ext_comm = 7;
  if (this->_internal_send_ext_comm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_send_ext_comm(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BGPPeerRRClient rr_client = 8;
  if (this->_internal_rr_client() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_rr_client(), target);
  }

  // int32 connect_retry = 9;
  if (this->_internal_connect_retry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_connect_retry(), target);
  }

  // int32 holdtime = 10;
  if (this->_internal_holdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_holdtime(), target);
  }

  // int32 keep_alive = 11;
  if (this->_internal_keep_alive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_keep_alive(), target);
  }

  // bytes password = 12;
  if (!this->_internal_password().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_password(), target);
  }

  // int32 ttl = 13;
  if (this->_internal_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_ttl(), target);
  }

  // int32 idle_holdtime = 14;
  if (this->_internal_idle_holdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_idle_holdtime(), target);
  }

  // int32 allow_local_as = 15;
  if (this->_internal_allow_local_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_allow_local_as(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.BGPPeerSpec)
  return target;
}

size_t BGPPeerSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.BGPPeerSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes password = 12;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_password());
  }

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_address = 3;
  if (this->_internal_has_local_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_address_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 4;
  if (this->_internal_has_peer_addr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_addr_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.AdminState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // uint32 remote_asn = 5;
  if (this->_internal_remote_asn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_remote_asn());
  }

  // bool send_comm = 6;
  if (this->_internal_send_comm() != 0) {
    total_size += 1 + 1;
  }

  // bool send_ext_comm = 7;
  if (this->_internal_send_ext_comm() != 0) {
    total_size += 1 + 1;
  }

  // .opi_api.network.cloud.v1alpha1.BGPPeerRRClient rr_client = 8;
  if (this->_internal_rr_client() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rr_client());
  }

  // int32 connect_retry = 9;
  if (this->_internal_connect_retry() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_connect_retry());
  }

  // int32 holdtime = 10;
  if (this->_internal_holdtime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_holdtime());
  }

  // int32 keep_alive = 11;
  if (this->_internal_keep_alive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_keep_alive());
  }

  // int32 ttl = 13;
  if (this->_internal_ttl() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ttl());
  }

  // int32 idle_holdtime = 14;
  if (this->_internal_idle_holdtime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_idle_holdtime());
  }

  // int32 allow_local_as = 15;
  if (this->_internal_allow_local_as() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_allow_local_as());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPPeerSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPPeerSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPPeerSpec::GetClassData() const { return &_class_data_; }

void BGPPeerSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BGPPeerSpec *>(to)->MergeFrom(
      static_cast<const BGPPeerSpec &>(from));
}


void BGPPeerSpec::MergeFrom(const BGPPeerSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.BGPPeerSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_has_local_address()) {
    _internal_mutable_local_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_local_address());
  }
  if (from._internal_has_peer_addr()) {
    _internal_mutable_peer_addr()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_peer_addr());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_remote_asn() != 0) {
    _internal_set_remote_asn(from._internal_remote_asn());
  }
  if (from._internal_send_comm() != 0) {
    _internal_set_send_comm(from._internal_send_comm());
  }
  if (from._internal_send_ext_comm() != 0) {
    _internal_set_send_ext_comm(from._internal_send_ext_comm());
  }
  if (from._internal_rr_client() != 0) {
    _internal_set_rr_client(from._internal_rr_client());
  }
  if (from._internal_connect_retry() != 0) {
    _internal_set_connect_retry(from._internal_connect_retry());
  }
  if (from._internal_holdtime() != 0) {
    _internal_set_holdtime(from._internal_holdtime());
  }
  if (from._internal_keep_alive() != 0) {
    _internal_set_keep_alive(from._internal_keep_alive());
  }
  if (from._internal_ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
  if (from._internal_idle_holdtime() != 0) {
    _internal_set_idle_holdtime(from._internal_idle_holdtime());
  }
  if (from._internal_allow_local_as() != 0) {
    _internal_set_allow_local_as(from._internal_allow_local_as());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPPeerSpec::CopyFrom(const BGPPeerSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.BGPPeerSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPPeerSpec::IsInitialized() const {
  return true;
}

void BGPPeerSpec::InternalSwap(BGPPeerSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPPeerSpec, allow_local_as_)
      + sizeof(BGPPeerSpec::allow_local_as_)
      - PROTOBUF_FIELD_OFFSET(BGPPeerSpec, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPPeerSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[4]);
}

// ===================================================================

class BGPPeerStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& local_addr(const BGPPeerStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
BGPPeerStatus::_Internal::local_addr(const BGPPeerStatus* msg) {
  return *msg->local_addr_;
}
void BGPPeerStatus::clear_local_addr() {
  if (GetArenaForAllocation() == nullptr && local_addr_ != nullptr) {
    delete local_addr_;
  }
  local_addr_ = nullptr;
}
BGPPeerStatus::BGPPeerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BGPPeerStatus)
}
BGPPeerStatus::BGPPeerStatus(const BGPPeerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_error_rcvd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_error_rcvd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_error_rcvd().empty()) {
    last_error_rcvd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_error_rcvd(), 
      GetArenaForAllocation());
  }
  last_error_sent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_error_sent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_error_sent().empty()) {
    last_error_sent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_error_sent(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_local_addr()) {
    local_addr_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.local_addr_);
  } else {
    local_addr_ = nullptr;
  }
  ::memcpy(&session_state_, &from.session_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&oper_state_) -
    reinterpret_cast<char*>(&session_state_)) + sizeof(oper_state_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BGPPeerStatus)
}

inline void BGPPeerStatus::SharedCtor() {
last_error_rcvd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_error_rcvd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_error_sent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_error_sent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&local_addr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&oper_state_) -
    reinterpret_cast<char*>(&local_addr_)) + sizeof(oper_state_));
}

BGPPeerStatus::~BGPPeerStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.BGPPeerStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPPeerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  last_error_rcvd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_error_sent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete local_addr_;
}

void BGPPeerStatus::ArenaDtor(void* object) {
  BGPPeerStatus* _this = reinterpret_cast< BGPPeerStatus* >(object);
  (void)_this;
}
void BGPPeerStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPPeerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPPeerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.BGPPeerStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_error_rcvd_.ClearToEmpty();
  last_error_sent_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && local_addr_ != nullptr) {
    delete local_addr_;
  }
  local_addr_ = nullptr;
  ::memset(&session_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oper_state_) -
      reinterpret_cast<char*>(&session_state_)) + sizeof(oper_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPPeerStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.BGPPeerSessionState session_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_state(static_cast<::opi_api::network::cloud::v1alpha1::BGPPeerSessionState>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPPeerSessionState prev_session_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_prev_session_state(static_cast<::opi_api::network::cloud::v1alpha1::BGPPeerSessionState>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes last_error_rcvd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_last_error_rcvd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes last_error_sent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_last_error_sent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_addr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 holdtime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          holdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 keepalive = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          keepalive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 caps_sent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          caps_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 caps_rcvd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          caps_rcvd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 caps_neg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          caps_neg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPAddrType sel_local_addr_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sel_local_addr_type(static_cast<::opi_api::network::cloud::v1alpha1::BGPAddrType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 incoming_notifications = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          incoming_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 outbound_notifications = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          outbound_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incoming_updates = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          incoming_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 outgoing_updates = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          outgoing_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incoming_keepalives = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          incoming_keepalives_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 outgoing_keepalives = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          outgoing_keepalives_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incoming_refreshes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          incoming_refreshes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 outgoing_refreshes = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          outgoing_refreshes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incoming_total_messages = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          incoming_total_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 outgoing_total_messages = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          outgoing_total_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fsm_est_transitions = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          fsm_est_transitions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 connect_retry_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          connect_retry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 peergr = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          peergr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stale_pathtime = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          stale_pathtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 orf_entry_count = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          orf_entry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rcvd_msg_elpstime = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          rcvd_msg_elpstime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 route_refr_sent = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          route_refr_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 route_refr_rcvd = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          route_refr_rcvd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incoming_prfxes = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          incoming_prfxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 outgoing_prfxes = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          outgoing_prfxes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 outgoing_prfxes_advertised = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          outgoing_prfxes_advertised_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 connect_retry_int = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          connect_retry_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 outgoing_update_elpstime = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          outgoing_update_elpstime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 outgoing_prfxes_denied = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          outgoing_prfxes_denied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 outgoing_prfxes_imp_wdr = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          outgoing_prfxes_imp_wdr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 outgoing_prfxes_exp_wdr = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          outgoing_prfxes_exp_wdr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incoming_prfxes_imp_wdr = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          incoming_prfxes_imp_wdr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incoming_prfxes_exp_wdr = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          incoming_prfxes_exp_wdr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 received_holdtime = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          received_holdtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fsm_establishedtime = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          fsm_establishedtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incoming_updates_elpstime = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          incoming_updates_elpstime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incoming_opens = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          incoming_opens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 outgoing_opens = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          outgoing_opens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 peer_index = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          peer_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ttl = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPOperState oper_state = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_oper_state(static_cast<::opi_api::network::cloud::v1alpha1::BGPOperState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BGPPeerStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.BGPPeerStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.BGPPeerSessionState session_state = 1;
  if (this->_internal_session_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_session_state(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BGPPeerSessionState prev_session_state = 2;
  if (this->_internal_prev_session_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_prev_session_state(), target);
  }

  // bytes last_error_rcvd = 3;
  if (!this->_internal_last_error_rcvd().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_last_error_rcvd(), target);
  }

  // bytes last_error_sent = 4;
  if (!this->_internal_last_error_sent().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_last_error_sent(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 5;
  if (this->_internal_has_local_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::local_addr(this), target, stream);
  }

  // int32 holdtime = 6;
  if (this->_internal_holdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_holdtime(), target);
  }

  // int32 keepalive = 7;
  if (this->_internal_keepalive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_keepalive(), target);
  }

  // int32 caps_sent = 8;
  if (this->_internal_caps_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_caps_sent(), target);
  }

  // int32 caps_rcvd = 9;
  if (this->_internal_caps_rcvd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_caps_rcvd(), target);
  }

  // int32 caps_neg = 10;
  if (this->_internal_caps_neg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_caps_neg(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BGPAddrType sel_local_addr_type = 11;
  if (this->_internal_sel_local_addr_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_sel_local_addr_type(), target);
  }

  // int32 incoming_notifications = 12;
  if (this->_internal_incoming_notifications() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_incoming_notifications(), target);
  }

  // int32 outbound_notifications = 13;
  if (this->_internal_outbound_notifications() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_outbound_notifications(), target);
  }

  // int32 incoming_updates = 14;
  if (this->_internal_incoming_updates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_incoming_updates(), target);
  }

  // int32 outgoing_updates = 15;
  if (this->_internal_outgoing_updates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_outgoing_updates(), target);
  }

  // int32 incoming_keepalives = 16;
  if (this->_internal_incoming_keepalives() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_incoming_keepalives(), target);
  }

  // int32 outgoing_keepalives = 17;
  if (this->_internal_outgoing_keepalives() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_outgoing_keepalives(), target);
  }

  // int32 incoming_refreshes = 18;
  if (this->_internal_incoming_refreshes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_incoming_refreshes(), target);
  }

  // int32 outgoing_refreshes = 19;
  if (this->_internal_outgoing_refreshes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_outgoing_refreshes(), target);
  }

  // int32 incoming_total_messages = 20;
  if (this->_internal_incoming_total_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_incoming_total_messages(), target);
  }

  // int32 outgoing_total_messages = 21;
  if (this->_internal_outgoing_total_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_outgoing_total_messages(), target);
  }

  // int32 fsm_est_transitions = 22;
  if (this->_internal_fsm_est_transitions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_fsm_est_transitions(), target);
  }

  // int32 connect_retry_count = 23;
  if (this->_internal_connect_retry_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_connect_retry_count(), target);
  }

  // int32 peergr = 24;
  if (this->_internal_peergr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_peergr(), target);
  }

  // int32 stale_pathtime = 25;
  if (this->_internal_stale_pathtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_stale_pathtime(), target);
  }

  // int32 orf_entry_count = 26;
  if (this->_internal_orf_entry_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_orf_entry_count(), target);
  }

  // int32 rcvd_msg_elpstime = 27;
  if (this->_internal_rcvd_msg_elpstime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_rcvd_msg_elpstime(), target);
  }

  // int32 route_refr_sent = 28;
  if (this->_internal_route_refr_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_route_refr_sent(), target);
  }

  // int32 route_refr_rcvd = 29;
  if (this->_internal_route_refr_rcvd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_route_refr_rcvd(), target);
  }

  // int32 incoming_prfxes = 30;
  if (this->_internal_incoming_prfxes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_incoming_prfxes(), target);
  }

  // int32 outgoing_prfxes = 31;
  if (this->_internal_outgoing_prfxes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_outgoing_prfxes(), target);
  }

  // int32 outgoing_prfxes_advertised = 32;
  if (this->_internal_outgoing_prfxes_advertised() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_outgoing_prfxes_advertised(), target);
  }

  // int32 connect_retry_int = 33;
  if (this->_internal_connect_retry_int() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_connect_retry_int(), target);
  }

  // int32 outgoing_update_elpstime = 34;
  if (this->_internal_outgoing_update_elpstime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_outgoing_update_elpstime(), target);
  }

  // int32 outgoing_prfxes_denied = 35;
  if (this->_internal_outgoing_prfxes_denied() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_outgoing_prfxes_denied(), target);
  }

  // int32 outgoing_prfxes_imp_wdr = 36;
  if (this->_internal_outgoing_prfxes_imp_wdr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_outgoing_prfxes_imp_wdr(), target);
  }

  // int32 outgoing_prfxes_exp_wdr = 37;
  if (this->_internal_outgoing_prfxes_exp_wdr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->_internal_outgoing_prfxes_exp_wdr(), target);
  }

  // int32 incoming_prfxes_imp_wdr = 38;
  if (this->_internal_incoming_prfxes_imp_wdr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_incoming_prfxes_imp_wdr(), target);
  }

  // int32 incoming_prfxes_exp_wdr = 39;
  if (this->_internal_incoming_prfxes_exp_wdr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_incoming_prfxes_exp_wdr(), target);
  }

  // int32 received_holdtime = 40;
  if (this->_internal_received_holdtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_received_holdtime(), target);
  }

  // int32 fsm_establishedtime = 41;
  if (this->_internal_fsm_establishedtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->_internal_fsm_establishedtime(), target);
  }

  // int32 incoming_updates_elpstime = 42;
  if (this->_internal_incoming_updates_elpstime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->_internal_incoming_updates_elpstime(), target);
  }

  // int32 incoming_opens = 43;
  if (this->_internal_incoming_opens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(43, this->_internal_incoming_opens(), target);
  }

  // int32 outgoing_opens = 44;
  if (this->_internal_outgoing_opens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(44, this->_internal_outgoing_opens(), target);
  }

  // int32 peer_index = 45;
  if (this->_internal_peer_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(45, this->_internal_peer_index(), target);
  }

  // int32 ttl = 46;
  if (this->_internal_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(46, this->_internal_ttl(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BGPOperState oper_state = 47;
  if (this->_internal_oper_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      47, this->_internal_oper_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.BGPPeerStatus)
  return target;
}

size_t BGPPeerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.BGPPeerStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes last_error_rcvd = 3;
  if (!this->_internal_last_error_rcvd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_error_rcvd());
  }

  // bytes last_error_sent = 4;
  if (!this->_internal_last_error_sent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_error_sent());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 5;
  if (this->_internal_has_local_addr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_addr_);
  }

  // .opi_api.network.cloud.v1alpha1.BGPPeerSessionState session_state = 1;
  if (this->_internal_session_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_state());
  }

  // .opi_api.network.cloud.v1alpha1.BGPPeerSessionState prev_session_state = 2;
  if (this->_internal_prev_session_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_prev_session_state());
  }

  // int32 holdtime = 6;
  if (this->_internal_holdtime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_holdtime());
  }

  // int32 keepalive = 7;
  if (this->_internal_keepalive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_keepalive());
  }

  // int32 caps_sent = 8;
  if (this->_internal_caps_sent() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_caps_sent());
  }

  // int32 caps_rcvd = 9;
  if (this->_internal_caps_rcvd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_caps_rcvd());
  }

  // int32 caps_neg = 10;
  if (this->_internal_caps_neg() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_caps_neg());
  }

  // .opi_api.network.cloud.v1alpha1.BGPAddrType sel_local_addr_type = 11;
  if (this->_internal_sel_local_addr_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sel_local_addr_type());
  }

  // int32 incoming_notifications = 12;
  if (this->_internal_incoming_notifications() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_incoming_notifications());
  }

  // int32 outbound_notifications = 13;
  if (this->_internal_outbound_notifications() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_outbound_notifications());
  }

  // int32 incoming_updates = 14;
  if (this->_internal_incoming_updates() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_incoming_updates());
  }

  // int32 outgoing_updates = 15;
  if (this->_internal_outgoing_updates() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_outgoing_updates());
  }

  // int32 incoming_keepalives = 16;
  if (this->_internal_incoming_keepalives() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_incoming_keepalives());
  }

  // int32 outgoing_keepalives = 17;
  if (this->_internal_outgoing_keepalives() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outgoing_keepalives());
  }

  // int32 incoming_refreshes = 18;
  if (this->_internal_incoming_refreshes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_incoming_refreshes());
  }

  // int32 outgoing_refreshes = 19;
  if (this->_internal_outgoing_refreshes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outgoing_refreshes());
  }

  // int32 incoming_total_messages = 20;
  if (this->_internal_incoming_total_messages() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_incoming_total_messages());
  }

  // int32 outgoing_total_messages = 21;
  if (this->_internal_outgoing_total_messages() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outgoing_total_messages());
  }

  // int32 fsm_est_transitions = 22;
  if (this->_internal_fsm_est_transitions() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fsm_est_transitions());
  }

  // int32 connect_retry_count = 23;
  if (this->_internal_connect_retry_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_connect_retry_count());
  }

  // int32 peergr = 24;
  if (this->_internal_peergr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_peergr());
  }

  // int32 stale_pathtime = 25;
  if (this->_internal_stale_pathtime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stale_pathtime());
  }

  // int32 orf_entry_count = 26;
  if (this->_internal_orf_entry_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_orf_entry_count());
  }

  // int32 rcvd_msg_elpstime = 27;
  if (this->_internal_rcvd_msg_elpstime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rcvd_msg_elpstime());
  }

  // int32 route_refr_sent = 28;
  if (this->_internal_route_refr_sent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_route_refr_sent());
  }

  // int32 route_refr_rcvd = 29;
  if (this->_internal_route_refr_rcvd() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_route_refr_rcvd());
  }

  // int32 incoming_prfxes = 30;
  if (this->_internal_incoming_prfxes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_incoming_prfxes());
  }

  // int32 outgoing_prfxes = 31;
  if (this->_internal_outgoing_prfxes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outgoing_prfxes());
  }

  // int32 outgoing_prfxes_advertised = 32;
  if (this->_internal_outgoing_prfxes_advertised() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outgoing_prfxes_advertised());
  }

  // int32 connect_retry_int = 33;
  if (this->_internal_connect_retry_int() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_connect_retry_int());
  }

  // int32 outgoing_update_elpstime = 34;
  if (this->_internal_outgoing_update_elpstime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outgoing_update_elpstime());
  }

  // int32 outgoing_prfxes_denied = 35;
  if (this->_internal_outgoing_prfxes_denied() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outgoing_prfxes_denied());
  }

  // int32 outgoing_prfxes_imp_wdr = 36;
  if (this->_internal_outgoing_prfxes_imp_wdr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outgoing_prfxes_imp_wdr());
  }

  // int32 outgoing_prfxes_exp_wdr = 37;
  if (this->_internal_outgoing_prfxes_exp_wdr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outgoing_prfxes_exp_wdr());
  }

  // int32 incoming_prfxes_imp_wdr = 38;
  if (this->_internal_incoming_prfxes_imp_wdr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_incoming_prfxes_imp_wdr());
  }

  // int32 incoming_prfxes_exp_wdr = 39;
  if (this->_internal_incoming_prfxes_exp_wdr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_incoming_prfxes_exp_wdr());
  }

  // int32 received_holdtime = 40;
  if (this->_internal_received_holdtime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_received_holdtime());
  }

  // int32 fsm_establishedtime = 41;
  if (this->_internal_fsm_establishedtime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fsm_establishedtime());
  }

  // int32 incoming_updates_elpstime = 42;
  if (this->_internal_incoming_updates_elpstime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_incoming_updates_elpstime());
  }

  // int32 incoming_opens = 43;
  if (this->_internal_incoming_opens() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_incoming_opens());
  }

  // int32 outgoing_opens = 44;
  if (this->_internal_outgoing_opens() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outgoing_opens());
  }

  // int32 peer_index = 45;
  if (this->_internal_peer_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_peer_index());
  }

  // int32 ttl = 46;
  if (this->_internal_ttl() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ttl());
  }

  // .opi_api.network.cloud.v1alpha1.BGPOperState oper_state = 47;
  if (this->_internal_oper_state() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oper_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPPeerStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPPeerStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPPeerStatus::GetClassData() const { return &_class_data_; }

void BGPPeerStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BGPPeerStatus *>(to)->MergeFrom(
      static_cast<const BGPPeerStatus &>(from));
}


void BGPPeerStatus::MergeFrom(const BGPPeerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.BGPPeerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_last_error_rcvd().empty()) {
    _internal_set_last_error_rcvd(from._internal_last_error_rcvd());
  }
  if (!from._internal_last_error_sent().empty()) {
    _internal_set_last_error_sent(from._internal_last_error_sent());
  }
  if (from._internal_has_local_addr()) {
    _internal_mutable_local_addr()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_local_addr());
  }
  if (from._internal_session_state() != 0) {
    _internal_set_session_state(from._internal_session_state());
  }
  if (from._internal_prev_session_state() != 0) {
    _internal_set_prev_session_state(from._internal_prev_session_state());
  }
  if (from._internal_holdtime() != 0) {
    _internal_set_holdtime(from._internal_holdtime());
  }
  if (from._internal_keepalive() != 0) {
    _internal_set_keepalive(from._internal_keepalive());
  }
  if (from._internal_caps_sent() != 0) {
    _internal_set_caps_sent(from._internal_caps_sent());
  }
  if (from._internal_caps_rcvd() != 0) {
    _internal_set_caps_rcvd(from._internal_caps_rcvd());
  }
  if (from._internal_caps_neg() != 0) {
    _internal_set_caps_neg(from._internal_caps_neg());
  }
  if (from._internal_sel_local_addr_type() != 0) {
    _internal_set_sel_local_addr_type(from._internal_sel_local_addr_type());
  }
  if (from._internal_incoming_notifications() != 0) {
    _internal_set_incoming_notifications(from._internal_incoming_notifications());
  }
  if (from._internal_outbound_notifications() != 0) {
    _internal_set_outbound_notifications(from._internal_outbound_notifications());
  }
  if (from._internal_incoming_updates() != 0) {
    _internal_set_incoming_updates(from._internal_incoming_updates());
  }
  if (from._internal_outgoing_updates() != 0) {
    _internal_set_outgoing_updates(from._internal_outgoing_updates());
  }
  if (from._internal_incoming_keepalives() != 0) {
    _internal_set_incoming_keepalives(from._internal_incoming_keepalives());
  }
  if (from._internal_outgoing_keepalives() != 0) {
    _internal_set_outgoing_keepalives(from._internal_outgoing_keepalives());
  }
  if (from._internal_incoming_refreshes() != 0) {
    _internal_set_incoming_refreshes(from._internal_incoming_refreshes());
  }
  if (from._internal_outgoing_refreshes() != 0) {
    _internal_set_outgoing_refreshes(from._internal_outgoing_refreshes());
  }
  if (from._internal_incoming_total_messages() != 0) {
    _internal_set_incoming_total_messages(from._internal_incoming_total_messages());
  }
  if (from._internal_outgoing_total_messages() != 0) {
    _internal_set_outgoing_total_messages(from._internal_outgoing_total_messages());
  }
  if (from._internal_fsm_est_transitions() != 0) {
    _internal_set_fsm_est_transitions(from._internal_fsm_est_transitions());
  }
  if (from._internal_connect_retry_count() != 0) {
    _internal_set_connect_retry_count(from._internal_connect_retry_count());
  }
  if (from._internal_peergr() != 0) {
    _internal_set_peergr(from._internal_peergr());
  }
  if (from._internal_stale_pathtime() != 0) {
    _internal_set_stale_pathtime(from._internal_stale_pathtime());
  }
  if (from._internal_orf_entry_count() != 0) {
    _internal_set_orf_entry_count(from._internal_orf_entry_count());
  }
  if (from._internal_rcvd_msg_elpstime() != 0) {
    _internal_set_rcvd_msg_elpstime(from._internal_rcvd_msg_elpstime());
  }
  if (from._internal_route_refr_sent() != 0) {
    _internal_set_route_refr_sent(from._internal_route_refr_sent());
  }
  if (from._internal_route_refr_rcvd() != 0) {
    _internal_set_route_refr_rcvd(from._internal_route_refr_rcvd());
  }
  if (from._internal_incoming_prfxes() != 0) {
    _internal_set_incoming_prfxes(from._internal_incoming_prfxes());
  }
  if (from._internal_outgoing_prfxes() != 0) {
    _internal_set_outgoing_prfxes(from._internal_outgoing_prfxes());
  }
  if (from._internal_outgoing_prfxes_advertised() != 0) {
    _internal_set_outgoing_prfxes_advertised(from._internal_outgoing_prfxes_advertised());
  }
  if (from._internal_connect_retry_int() != 0) {
    _internal_set_connect_retry_int(from._internal_connect_retry_int());
  }
  if (from._internal_outgoing_update_elpstime() != 0) {
    _internal_set_outgoing_update_elpstime(from._internal_outgoing_update_elpstime());
  }
  if (from._internal_outgoing_prfxes_denied() != 0) {
    _internal_set_outgoing_prfxes_denied(from._internal_outgoing_prfxes_denied());
  }
  if (from._internal_outgoing_prfxes_imp_wdr() != 0) {
    _internal_set_outgoing_prfxes_imp_wdr(from._internal_outgoing_prfxes_imp_wdr());
  }
  if (from._internal_outgoing_prfxes_exp_wdr() != 0) {
    _internal_set_outgoing_prfxes_exp_wdr(from._internal_outgoing_prfxes_exp_wdr());
  }
  if (from._internal_incoming_prfxes_imp_wdr() != 0) {
    _internal_set_incoming_prfxes_imp_wdr(from._internal_incoming_prfxes_imp_wdr());
  }
  if (from._internal_incoming_prfxes_exp_wdr() != 0) {
    _internal_set_incoming_prfxes_exp_wdr(from._internal_incoming_prfxes_exp_wdr());
  }
  if (from._internal_received_holdtime() != 0) {
    _internal_set_received_holdtime(from._internal_received_holdtime());
  }
  if (from._internal_fsm_establishedtime() != 0) {
    _internal_set_fsm_establishedtime(from._internal_fsm_establishedtime());
  }
  if (from._internal_incoming_updates_elpstime() != 0) {
    _internal_set_incoming_updates_elpstime(from._internal_incoming_updates_elpstime());
  }
  if (from._internal_incoming_opens() != 0) {
    _internal_set_incoming_opens(from._internal_incoming_opens());
  }
  if (from._internal_outgoing_opens() != 0) {
    _internal_set_outgoing_opens(from._internal_outgoing_opens());
  }
  if (from._internal_peer_index() != 0) {
    _internal_set_peer_index(from._internal_peer_index());
  }
  if (from._internal_ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
  if (from._internal_oper_state() != 0) {
    _internal_set_oper_state(from._internal_oper_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPPeerStatus::CopyFrom(const BGPPeerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.BGPPeerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPPeerStatus::IsInitialized() const {
  return true;
}

void BGPPeerStatus::InternalSwap(BGPPeerStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_error_rcvd_, lhs_arena,
      &other->last_error_rcvd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_error_sent_, lhs_arena,
      &other->last_error_sent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPPeerStatus, oper_state_)
      + sizeof(BGPPeerStatus::oper_state_)
      - PROTOBUF_FIELD_OFFSET(BGPPeerStatus, local_addr_)>(
          reinterpret_cast<char*>(&local_addr_),
          reinterpret_cast<char*>(&other->local_addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPPeerStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[5]);
}

// ===================================================================

class BGPPeerAf::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec& spec(const BGPPeerAf* msg);
  static const ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus& state(const BGPPeerAf* msg);
};

const ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec&
BGPPeerAf::_Internal::spec(const BGPPeerAf* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus&
BGPPeerAf::_Internal::state(const BGPPeerAf* msg) {
  return *msg->state_;
}
BGPPeerAf::BGPPeerAf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BGPPeerAf)
}
BGPPeerAf::BGPPeerAf(const BGPPeerAf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BGPPeerAf)
}

inline void BGPPeerAf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(state_));
}

BGPPeerAf::~BGPPeerAf() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.BGPPeerAf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPPeerAf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete state_;
}

void BGPPeerAf::ArenaDtor(void* object) {
  BGPPeerAf* _this = reinterpret_cast< BGPPeerAf* >(object);
  (void)_this;
}
void BGPPeerAf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPPeerAf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPPeerAf::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.BGPPeerAf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPPeerAf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.BGPPeerAfSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPPeerAfStatus state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BGPPeerAf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.BGPPeerAf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.BGPPeerAfSpec spec = 1;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.BGPPeerAfStatus state = 2;
  if (this->_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.BGPPeerAf)
  return target;
}

size_t BGPPeerAf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.BGPPeerAf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.BGPPeerAfSpec spec = 1;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.BGPPeerAfStatus state = 2;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPPeerAf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPPeerAf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPPeerAf::GetClassData() const { return &_class_data_; }

void BGPPeerAf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BGPPeerAf *>(to)->MergeFrom(
      static_cast<const BGPPeerAf &>(from));
}


void BGPPeerAf::MergeFrom(const BGPPeerAf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.BGPPeerAf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_state()) {
    _internal_mutable_state()->::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus::MergeFrom(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPPeerAf::CopyFrom(const BGPPeerAf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.BGPPeerAf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPPeerAf::IsInitialized() const {
  return true;
}

void BGPPeerAf::InternalSwap(BGPPeerAf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPPeerAf, state_)
      + sizeof(BGPPeerAf::state_)
      - PROTOBUF_FIELD_OFFSET(BGPPeerAf, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPPeerAf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[6]);
}

// ===================================================================

class BGPPeerAfSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const BGPPeerAfSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& local_addr(const BGPPeerAfSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& peer_addr(const BGPPeerAfSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
BGPPeerAfSpec::_Internal::id(const BGPPeerAfSpec* msg) {
  return *msg->id_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
BGPPeerAfSpec::_Internal::local_addr(const BGPPeerAfSpec* msg) {
  return *msg->local_addr_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
BGPPeerAfSpec::_Internal::peer_addr(const BGPPeerAfSpec* msg) {
  return *msg->peer_addr_;
}
void BGPPeerAfSpec::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void BGPPeerAfSpec::clear_local_addr() {
  if (GetArenaForAllocation() == nullptr && local_addr_ != nullptr) {
    delete local_addr_;
  }
  local_addr_ = nullptr;
}
void BGPPeerAfSpec::clear_peer_addr() {
  if (GetArenaForAllocation() == nullptr && peer_addr_ != nullptr) {
    delete peer_addr_;
  }
  peer_addr_ = nullptr;
}
BGPPeerAfSpec::BGPPeerAfSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec)
}
BGPPeerAfSpec::BGPPeerAfSpec(const BGPPeerAfSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_local_addr()) {
    local_addr_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.local_addr_);
  } else {
    local_addr_ = nullptr;
  }
  if (from._internal_has_peer_addr()) {
    peer_addr_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.peer_addr_);
  } else {
    peer_addr_ = nullptr;
  }
  ::memcpy(&afi_, &from.afi_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_addr_scope_id_) -
    reinterpret_cast<char*>(&afi_)) + sizeof(local_addr_scope_id_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec)
}

inline void BGPPeerAfSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&local_addr_scope_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(local_addr_scope_id_));
}

BGPPeerAfSpec::~BGPPeerAfSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPPeerAfSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete local_addr_;
  if (this != internal_default_instance()) delete peer_addr_;
}

void BGPPeerAfSpec::ArenaDtor(void* object) {
  BGPPeerAfSpec* _this = reinterpret_cast< BGPPeerAfSpec* >(object);
  (void)_this;
}
void BGPPeerAfSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPPeerAfSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPPeerAfSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && local_addr_ != nullptr) {
    delete local_addr_;
  }
  local_addr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && peer_addr_ != nullptr) {
    delete peer_addr_;
  }
  peer_addr_ = nullptr;
  ::memset(&afi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_addr_scope_id_) -
      reinterpret_cast<char*>(&afi_)) + sizeof(local_addr_scope_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPPeerAfSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_addr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_addr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_afi(static_cast<::opi_api::network::cloud::v1alpha1::BGPAfi>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_safi(static_cast<::opi_api::network::cloud::v1alpha1::BGPSafi>(val));
        } else
          goto handle_unusual;
        continue;
      // bool nexthop_self = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          nexthop_self_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool default_orig = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          default_orig_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 local_port = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          local_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 remote_port = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          remote_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 local_addr_scope_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          local_addr_scope_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BGPPeerAfSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 2;
  if (this->_internal_has_local_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::local_addr(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 3;
  if (this->_internal_has_peer_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::peer_addr(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 4;
  if (this->_internal_afi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_afi(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 5;
  if (this->_internal_safi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_safi(), target);
  }

  // bool nexthop_self = 6;
  if (this->_internal_nexthop_self() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_nexthop_self(), target);
  }

  // bool default_orig = 7;
  if (this->_internal_default_orig() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_default_orig(), target);
  }

  // int32 local_port = 8;
  if (this->_internal_local_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_local_port(), target);
  }

  // int32 remote_port = 9;
  if (this->_internal_remote_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_remote_port(), target);
  }

  // int32 local_addr_scope_id = 10;
  if (this->_internal_local_addr_scope_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_local_addr_scope_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec)
  return target;
}

size_t BGPPeerAfSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 2;
  if (this->_internal_has_local_addr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_addr_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 3;
  if (this->_internal_has_peer_addr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_addr_);
  }

  // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 4;
  if (this->_internal_afi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_afi());
  }

  // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 5;
  if (this->_internal_safi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_safi());
  }

  // bool nexthop_self = 6;
  if (this->_internal_nexthop_self() != 0) {
    total_size += 1 + 1;
  }

  // bool default_orig = 7;
  if (this->_internal_default_orig() != 0) {
    total_size += 1 + 1;
  }

  // int32 local_port = 8;
  if (this->_internal_local_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_local_port());
  }

  // int32 remote_port = 9;
  if (this->_internal_remote_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_remote_port());
  }

  // int32 local_addr_scope_id = 10;
  if (this->_internal_local_addr_scope_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_local_addr_scope_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPPeerAfSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPPeerAfSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPPeerAfSpec::GetClassData() const { return &_class_data_; }

void BGPPeerAfSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BGPPeerAfSpec *>(to)->MergeFrom(
      static_cast<const BGPPeerAfSpec &>(from));
}


void BGPPeerAfSpec::MergeFrom(const BGPPeerAfSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_has_local_addr()) {
    _internal_mutable_local_addr()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_local_addr());
  }
  if (from._internal_has_peer_addr()) {
    _internal_mutable_peer_addr()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_peer_addr());
  }
  if (from._internal_afi() != 0) {
    _internal_set_afi(from._internal_afi());
  }
  if (from._internal_safi() != 0) {
    _internal_set_safi(from._internal_safi());
  }
  if (from._internal_nexthop_self() != 0) {
    _internal_set_nexthop_self(from._internal_nexthop_self());
  }
  if (from._internal_default_orig() != 0) {
    _internal_set_default_orig(from._internal_default_orig());
  }
  if (from._internal_local_port() != 0) {
    _internal_set_local_port(from._internal_local_port());
  }
  if (from._internal_remote_port() != 0) {
    _internal_set_remote_port(from._internal_remote_port());
  }
  if (from._internal_local_addr_scope_id() != 0) {
    _internal_set_local_addr_scope_id(from._internal_local_addr_scope_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPPeerAfSpec::CopyFrom(const BGPPeerAfSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPPeerAfSpec::IsInitialized() const {
  return true;
}

void BGPPeerAfSpec::InternalSwap(BGPPeerAfSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPPeerAfSpec, local_addr_scope_id_)
      + sizeof(BGPPeerAfSpec::local_addr_scope_id_)
      - PROTOBUF_FIELD_OFFSET(BGPPeerAfSpec, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPPeerAfSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[7]);
}

// ===================================================================

class BGPPeerAfStatus::_Internal {
 public:
};

BGPPeerAfStatus::BGPPeerAfStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus)
}
BGPPeerAfStatus::BGPPeerAfStatus(const BGPPeerAfStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&update_group_, &from.update_group_,
    static_cast<size_t>(reinterpret_cast<char*>(&reflector_client_) -
    reinterpret_cast<char*>(&update_group_)) + sizeof(reflector_client_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus)
}

inline void BGPPeerAfStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&update_group_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reflector_client_) -
    reinterpret_cast<char*>(&update_group_)) + sizeof(reflector_client_));
}

BGPPeerAfStatus::~BGPPeerAfStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPPeerAfStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BGPPeerAfStatus::ArenaDtor(void* object) {
  BGPPeerAfStatus* _this = reinterpret_cast< BGPPeerAfStatus* >(object);
  (void)_this;
}
void BGPPeerAfStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPPeerAfStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPPeerAfStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&update_group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reflector_client_) -
      reinterpret_cast<char*>(&update_group_)) + sizeof(reflector_client_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPPeerAfStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 update_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          update_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 local_addr_scope_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          local_addr_scope_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool route_refresh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          route_refresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BgpAddPathCapNegCap add_path_cap_neg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_add_path_cap_neg(static_cast<::opi_api::network::cloud::v1alpha1::BgpAddPathCapNegCap>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPPeerRRClient reflector_client = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reflector_client(static_cast<::opi_api::network::cloud::v1alpha1::BGPPeerRRClient>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BGPPeerAfStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 update_group = 1;
  if (this->_internal_update_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_update_group(), target);
  }

  // int32 local_addr_scope_id = 2;
  if (this->_internal_local_addr_scope_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_local_addr_scope_id(), target);
  }

  // bool route_refresh = 3;
  if (this->_internal_route_refresh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_route_refresh(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BgpAddPathCapNegCap add_path_cap_neg = 4;
  if (this->_internal_add_path_cap_neg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_add_path_cap_neg(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BGPPeerRRClient reflector_client = 5;
  if (this->_internal_reflector_client() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_reflector_client(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus)
  return target;
}

size_t BGPPeerAfStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 update_group = 1;
  if (this->_internal_update_group() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_update_group());
  }

  // int32 local_addr_scope_id = 2;
  if (this->_internal_local_addr_scope_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_local_addr_scope_id());
  }

  // bool route_refresh = 3;
  if (this->_internal_route_refresh() != 0) {
    total_size += 1 + 1;
  }

  // .opi_api.network.cloud.v1alpha1.BgpAddPathCapNegCap add_path_cap_neg = 4;
  if (this->_internal_add_path_cap_neg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_add_path_cap_neg());
  }

  // .opi_api.network.cloud.v1alpha1.BGPPeerRRClient reflector_client = 5;
  if (this->_internal_reflector_client() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reflector_client());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPPeerAfStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPPeerAfStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPPeerAfStatus::GetClassData() const { return &_class_data_; }

void BGPPeerAfStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BGPPeerAfStatus *>(to)->MergeFrom(
      static_cast<const BGPPeerAfStatus &>(from));
}


void BGPPeerAfStatus::MergeFrom(const BGPPeerAfStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_update_group() != 0) {
    _internal_set_update_group(from._internal_update_group());
  }
  if (from._internal_local_addr_scope_id() != 0) {
    _internal_set_local_addr_scope_id(from._internal_local_addr_scope_id());
  }
  if (from._internal_route_refresh() != 0) {
    _internal_set_route_refresh(from._internal_route_refresh());
  }
  if (from._internal_add_path_cap_neg() != 0) {
    _internal_set_add_path_cap_neg(from._internal_add_path_cap_neg());
  }
  if (from._internal_reflector_client() != 0) {
    _internal_set_reflector_client(from._internal_reflector_client());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPPeerAfStatus::CopyFrom(const BGPPeerAfStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.BGPPeerAfStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPPeerAfStatus::IsInitialized() const {
  return true;
}

void BGPPeerAfStatus::InternalSwap(BGPPeerAfStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPPeerAfStatus, reflector_client_)
      + sizeof(BGPPeerAfStatus::reflector_client_)
      - PROTOBUF_FIELD_OFFSET(BGPPeerAfStatus, update_group_)>(
          reinterpret_cast<char*>(&update_group_),
          reinterpret_cast<char*>(&other->update_group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPPeerAfStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[8]);
}

// ===================================================================

class BGPNLRIPrefix::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec& spec(const BGPNLRIPrefix* msg);
  static const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus& state(const BGPNLRIPrefix* msg);
};

const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec&
BGPNLRIPrefix::_Internal::spec(const BGPNLRIPrefix* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus&
BGPNLRIPrefix::_Internal::state(const BGPNLRIPrefix* msg) {
  return *msg->state_;
}
BGPNLRIPrefix::BGPNLRIPrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix)
}
BGPNLRIPrefix::BGPNLRIPrefix(const BGPNLRIPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix)
}

inline void BGPNLRIPrefix::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(state_));
}

BGPNLRIPrefix::~BGPNLRIPrefix() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPNLRIPrefix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete state_;
}

void BGPNLRIPrefix::ArenaDtor(void* object) {
  BGPNLRIPrefix* _this = reinterpret_cast< BGPNLRIPrefix* >(object);
  (void)_this;
}
void BGPNLRIPrefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPNLRIPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPNLRIPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPNLRIPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BGPNLRIPrefix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec spec = 1;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus state = 2;
  if (this->_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix)
  return target;
}

size_t BGPNLRIPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec spec = 1;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus state = 2;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPNLRIPrefix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPNLRIPrefix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPNLRIPrefix::GetClassData() const { return &_class_data_; }

void BGPNLRIPrefix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BGPNLRIPrefix *>(to)->MergeFrom(
      static_cast<const BGPNLRIPrefix &>(from));
}


void BGPNLRIPrefix::MergeFrom(const BGPNLRIPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_state()) {
    _internal_mutable_state()->::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus::MergeFrom(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPNLRIPrefix::CopyFrom(const BGPNLRIPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPNLRIPrefix::IsInitialized() const {
  return true;
}

void BGPNLRIPrefix::InternalSwap(BGPNLRIPrefix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPNLRIPrefix, state_)
      + sizeof(BGPNLRIPrefix::state_)
      - PROTOBUF_FIELD_OFFSET(BGPNLRIPrefix, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPNLRIPrefix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[9]);
}

// ===================================================================

class BGPNLRIPrefixSpec::_Internal {
 public:
};

BGPNLRIPrefixSpec::BGPNLRIPrefixSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec)
}
BGPNLRIPrefixSpec::BGPNLRIPrefixSpec(const BGPNLRIPrefixSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  ::memcpy(&afi_, &from.afi_,
    static_cast<size_t>(reinterpret_cast<char*>(&path_id_) -
    reinterpret_cast<char*>(&afi_)) + sizeof(path_id_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec)
}

inline void BGPNLRIPrefixSpec::SharedCtor() {
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&afi_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&path_id_) -
    reinterpret_cast<char*>(&afi_)) + sizeof(path_id_));
}

BGPNLRIPrefixSpec::~BGPNLRIPrefixSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPNLRIPrefixSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BGPNLRIPrefixSpec::ArenaDtor(void* object) {
  BGPNLRIPrefixSpec* _this = reinterpret_cast< BGPNLRIPrefixSpec* >(object);
  (void)_this;
}
void BGPNLRIPrefixSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPNLRIPrefixSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPNLRIPrefixSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmpty();
  ::memset(&afi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_id_) -
      reinterpret_cast<char*>(&afi_)) + sizeof(path_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPNLRIPrefixSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_afi(static_cast<::opi_api::network::cloud::v1alpha1::BGPAfi>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_safi(static_cast<::opi_api::network::cloud::v1alpha1::BGPSafi>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 prefix_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.NLRISrc route_source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_route_source(static_cast<::opi_api::network::cloud::v1alpha1::NLRISrc>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 route_source_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          route_source_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 path_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          path_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BGPNLRIPrefixSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 1;
  if (this->_internal_afi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_afi(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 2;
  if (this->_internal_safi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_safi(), target);
  }

  // bytes prefix = 3;
  if (!this->_internal_prefix().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_prefix(), target);
  }

  // int32 prefix_len = 4;
  if (this->_internal_prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_prefix_len(), target);
  }

  // .opi_api.network.cloud.v1alpha1.NLRISrc route_source = 5;
  if (this->_internal_route_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_route_source(), target);
  }

  // int32 route_source_index = 6;
  if (this->_internal_route_source_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_route_source_index(), target);
  }

  // int32 path_id = 7;
  if (this->_internal_path_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_path_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec)
  return target;
}

size_t BGPNLRIPrefixSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes prefix = 3;
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prefix());
  }

  // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 1;
  if (this->_internal_afi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_afi());
  }

  // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 2;
  if (this->_internal_safi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_safi());
  }

  // int32 prefix_len = 4;
  if (this->_internal_prefix_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_prefix_len());
  }

  // .opi_api.network.cloud.v1alpha1.NLRISrc route_source = 5;
  if (this->_internal_route_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_route_source());
  }

  // int32 route_source_index = 6;
  if (this->_internal_route_source_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_route_source_index());
  }

  // int32 path_id = 7;
  if (this->_internal_path_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_path_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPNLRIPrefixSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPNLRIPrefixSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPNLRIPrefixSpec::GetClassData() const { return &_class_data_; }

void BGPNLRIPrefixSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BGPNLRIPrefixSpec *>(to)->MergeFrom(
      static_cast<const BGPNLRIPrefixSpec &>(from));
}


void BGPNLRIPrefixSpec::MergeFrom(const BGPNLRIPrefixSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from._internal_afi() != 0) {
    _internal_set_afi(from._internal_afi());
  }
  if (from._internal_safi() != 0) {
    _internal_set_safi(from._internal_safi());
  }
  if (from._internal_prefix_len() != 0) {
    _internal_set_prefix_len(from._internal_prefix_len());
  }
  if (from._internal_route_source() != 0) {
    _internal_set_route_source(from._internal_route_source());
  }
  if (from._internal_route_source_index() != 0) {
    _internal_set_route_source_index(from._internal_route_source_index());
  }
  if (from._internal_path_id() != 0) {
    _internal_set_path_id(from._internal_path_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPNLRIPrefixSpec::CopyFrom(const BGPNLRIPrefixSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPNLRIPrefixSpec::IsInitialized() const {
  return true;
}

void BGPNLRIPrefixSpec::InternalSwap(BGPNLRIPrefixSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPNLRIPrefixSpec, path_id_)
      + sizeof(BGPNLRIPrefixSpec::path_id_)
      - PROTOBUF_FIELD_OFFSET(BGPNLRIPrefixSpec, afi_)>(
          reinterpret_cast<char*>(&afi_),
          reinterpret_cast<char*>(&other->afi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPNLRIPrefixSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[10]);
}

// ===================================================================

class BGPNLRIPrefixStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& peer_addr(const BGPNLRIPrefixStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
BGPNLRIPrefixStatus::_Internal::peer_addr(const BGPNLRIPrefixStatus* msg) {
  return *msg->peer_addr_;
}
void BGPNLRIPrefixStatus::clear_peer_addr() {
  if (GetArenaForAllocation() == nullptr && peer_addr_ != nullptr) {
    delete peer_addr_;
  }
  peer_addr_ = nullptr;
}
BGPNLRIPrefixStatus::BGPNLRIPrefixStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ext_comm_(arena),
  comm_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus)
}
BGPNLRIPrefixStatus::BGPNLRIPrefixStatus(const BGPNLRIPrefixStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ext_comm_(from.ext_comm_),
      comm_(from.comm_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  as_path_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    as_path_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_as_path_str().empty()) {
    as_path_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_as_path_str(), 
      GetArenaForAllocation());
  }
  path_orig_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_orig_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path_orig_id().empty()) {
    path_orig_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path_orig_id(), 
      GetArenaForAllocation());
  }
  next_hop_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_hop_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_hop_addr().empty()) {
    next_hop_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_hop_addr(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_peer_addr()) {
    peer_addr_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.peer_addr_);
  } else {
    peer_addr_ = nullptr;
  }
  ::memcpy(&afi_, &from.afi_,
    static_cast<size_t>(reinterpret_cast<char*>(&peer_type_) -
    reinterpret_cast<char*>(&afi_)) + sizeof(peer_type_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus)
}

inline void BGPNLRIPrefixStatus::SharedCtor() {
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
as_path_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  as_path_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
path_orig_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_orig_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
next_hop_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_hop_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&peer_addr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&peer_type_) -
    reinterpret_cast<char*>(&peer_addr_)) + sizeof(peer_type_));
}

BGPNLRIPrefixStatus::~BGPNLRIPrefixStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPNLRIPrefixStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  as_path_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_orig_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_hop_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peer_addr_;
}

void BGPNLRIPrefixStatus::ArenaDtor(void* object) {
  BGPNLRIPrefixStatus* _this = reinterpret_cast< BGPNLRIPrefixStatus* >(object);
  (void)_this;
}
void BGPNLRIPrefixStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPNLRIPrefixStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPNLRIPrefixStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_comm_.Clear();
  comm_.Clear();
  prefix_.ClearToEmpty();
  as_path_str_.ClearToEmpty();
  path_orig_id_.ClearToEmpty();
  next_hop_addr_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && peer_addr_ != nullptr) {
    delete peer_addr_;
  }
  peer_addr_ = nullptr;
  ::memset(&afi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_type_) -
      reinterpret_cast<char*>(&afi_)) + sizeof(peer_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPNLRIPrefixStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_afi(static_cast<::opi_api::network::cloud::v1alpha1::BGPAfi>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_safi(static_cast<::opi_api::network::cloud::v1alpha1::BGPSafi>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 prefix_len = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.NLRISrc route_source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_route_source(static_cast<::opi_api::network::cloud::v1alpha1::NLRISrc>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 route_source_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          route_source_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 path_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          path_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool best_route = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          best_route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes as_path_str = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_as_path_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes path_orig_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_path_orig_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes next_hop_addr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_next_hop_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BgpAsSize as_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_as_size(static_cast<::opi_api::network::cloud::v1alpha1::BgpAsSize>(val));
        } else
          goto handle_unusual;
        continue;
      // bool ecmp_route = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          ecmp_route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_addr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flap_stats_flapcnt = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          flap_stats_flapcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flap_stats_supprsd = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          flap_stats_supprsd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BgpNlriIsActive is_active = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_is_active(static_cast<::opi_api::network::cloud::v1alpha1::BgpNlriIsActive>(val));
        } else
          goto handle_unusual;
        continue;
      // bool stale = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          stale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flap_starttime = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          flap_starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPRsnNotBest reason_not_best = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason_not_best(static_cast<::opi_api::network::cloud::v1alpha1::BGPRsnNotBest>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes ext_comm = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_ext_comm();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes comm = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_comm();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 local_pref = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          local_pref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPOriginAttr origin = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_origin(static_cast<::opi_api::network::cloud::v1alpha1::BGPOriginAttr>(val));
        } else
          goto handle_unusual;
        continue;
      // bool med_present = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          med_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 med = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          med_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPPeerType peer_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_peer_type(static_cast<::opi_api::network::cloud::v1alpha1::BGPPeerType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BGPNLRIPrefixStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 1;
  if (this->_internal_afi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_afi(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 2;
  if (this->_internal_safi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_safi(), target);
  }

  // bytes prefix = 3;
  if (!this->_internal_prefix().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_prefix(), target);
  }

  // int32 prefix_len = 4;
  if (this->_internal_prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_prefix_len(), target);
  }

  // .opi_api.network.cloud.v1alpha1.NLRISrc route_source = 5;
  if (this->_internal_route_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_route_source(), target);
  }

  // int32 route_source_index = 6;
  if (this->_internal_route_source_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_route_source_index(), target);
  }

  // int32 path_id = 7;
  if (this->_internal_path_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_path_id(), target);
  }

  // bool best_route = 8;
  if (this->_internal_best_route() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_best_route(), target);
  }

  // bytes as_path_str = 9;
  if (!this->_internal_as_path_str().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_as_path_str(), target);
  }

  // bytes path_orig_id = 10;
  if (!this->_internal_path_orig_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_path_orig_id(), target);
  }

  // bytes next_hop_addr = 11;
  if (!this->_internal_next_hop_addr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_next_hop_addr(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BgpAsSize as_size = 12;
  if (this->_internal_as_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_as_size(), target);
  }

  // bool ecmp_route = 13;
  if (this->_internal_ecmp_route() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_ecmp_route(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 14;
  if (this->_internal_has_peer_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::peer_addr(this), target, stream);
  }

  // int32 flap_stats_flapcnt = 15;
  if (this->_internal_flap_stats_flapcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_flap_stats_flapcnt(), target);
  }

  // bool flap_stats_supprsd = 16;
  if (this->_internal_flap_stats_supprsd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_flap_stats_supprsd(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BgpNlriIsActive is_active = 17;
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_is_active(), target);
  }

  // bool stale = 18;
  if (this->_internal_stale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_stale(), target);
  }

  // int32 flap_starttime = 19;
  if (this->_internal_flap_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_flap_starttime(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BGPRsnNotBest reason_not_best = 20;
  if (this->_internal_reason_not_best() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_reason_not_best(), target);
  }

  // repeated bytes ext_comm = 21;
  for (int i = 0, n = this->_internal_ext_comm_size(); i < n; i++) {
    const auto& s = this->_internal_ext_comm(i);
    target = stream->WriteBytes(21, s, target);
  }

  // repeated bytes comm = 22;
  for (int i = 0, n = this->_internal_comm_size(); i < n; i++) {
    const auto& s = this->_internal_comm(i);
    target = stream->WriteBytes(22, s, target);
  }

  // int32 local_pref = 23;
  if (this->_internal_local_pref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_local_pref(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BGPOriginAttr origin = 24;
  if (this->_internal_origin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_origin(), target);
  }

  // bool med_present = 25;
  if (this->_internal_med_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_med_present(), target);
  }

  // uint32 med = 26;
  if (this->_internal_med() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_med(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BGPPeerType peer_type = 27;
  if (this->_internal_peer_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->_internal_peer_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus)
  return target;
}

size_t BGPNLRIPrefixStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes ext_comm = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ext_comm_.size());
  for (int i = 0, n = ext_comm_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      ext_comm_.Get(i));
  }

  // repeated bytes comm = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(comm_.size());
  for (int i = 0, n = comm_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      comm_.Get(i));
  }

  // bytes prefix = 3;
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prefix());
  }

  // bytes as_path_str = 9;
  if (!this->_internal_as_path_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_as_path_str());
  }

  // bytes path_orig_id = 10;
  if (!this->_internal_path_orig_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_path_orig_id());
  }

  // bytes next_hop_addr = 11;
  if (!this->_internal_next_hop_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_next_hop_addr());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 14;
  if (this->_internal_has_peer_addr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_addr_);
  }

  // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 1;
  if (this->_internal_afi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_afi());
  }

  // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 2;
  if (this->_internal_safi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_safi());
  }

  // int32 prefix_len = 4;
  if (this->_internal_prefix_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_prefix_len());
  }

  // .opi_api.network.cloud.v1alpha1.NLRISrc route_source = 5;
  if (this->_internal_route_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_route_source());
  }

  // int32 route_source_index = 6;
  if (this->_internal_route_source_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_route_source_index());
  }

  // int32 path_id = 7;
  if (this->_internal_path_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_path_id());
  }

  // .opi_api.network.cloud.v1alpha1.BgpAsSize as_size = 12;
  if (this->_internal_as_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_as_size());
  }

  // bool best_route = 8;
  if (this->_internal_best_route() != 0) {
    total_size += 1 + 1;
  }

  // bool ecmp_route = 13;
  if (this->_internal_ecmp_route() != 0) {
    total_size += 1 + 1;
  }

  // bool flap_stats_supprsd = 16;
  if (this->_internal_flap_stats_supprsd() != 0) {
    total_size += 2 + 1;
  }

  // bool stale = 18;
  if (this->_internal_stale() != 0) {
    total_size += 2 + 1;
  }

  // int32 flap_stats_flapcnt = 15;
  if (this->_internal_flap_stats_flapcnt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flap_stats_flapcnt());
  }

  // .opi_api.network.cloud.v1alpha1.BgpNlriIsActive is_active = 17;
  if (this->_internal_is_active() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_is_active());
  }

  // int32 flap_starttime = 19;
  if (this->_internal_flap_starttime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flap_starttime());
  }

  // .opi_api.network.cloud.v1alpha1.BGPRsnNotBest reason_not_best = 20;
  if (this->_internal_reason_not_best() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason_not_best());
  }

  // int32 local_pref = 23;
  if (this->_internal_local_pref() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_local_pref());
  }

  // .opi_api.network.cloud.v1alpha1.BGPOriginAttr origin = 24;
  if (this->_internal_origin() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_origin());
  }

  // bool med_present = 25;
  if (this->_internal_med_present() != 0) {
    total_size += 2 + 1;
  }

  // uint32 med = 26;
  if (this->_internal_med() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_med());
  }

  // .opi_api.network.cloud.v1alpha1.BGPPeerType peer_type = 27;
  if (this->_internal_peer_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_peer_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPNLRIPrefixStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPNLRIPrefixStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPNLRIPrefixStatus::GetClassData() const { return &_class_data_; }

void BGPNLRIPrefixStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BGPNLRIPrefixStatus *>(to)->MergeFrom(
      static_cast<const BGPNLRIPrefixStatus &>(from));
}


void BGPNLRIPrefixStatus::MergeFrom(const BGPNLRIPrefixStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ext_comm_.MergeFrom(from.ext_comm_);
  comm_.MergeFrom(from.comm_);
  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (!from._internal_as_path_str().empty()) {
    _internal_set_as_path_str(from._internal_as_path_str());
  }
  if (!from._internal_path_orig_id().empty()) {
    _internal_set_path_orig_id(from._internal_path_orig_id());
  }
  if (!from._internal_next_hop_addr().empty()) {
    _internal_set_next_hop_addr(from._internal_next_hop_addr());
  }
  if (from._internal_has_peer_addr()) {
    _internal_mutable_peer_addr()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_peer_addr());
  }
  if (from._internal_afi() != 0) {
    _internal_set_afi(from._internal_afi());
  }
  if (from._internal_safi() != 0) {
    _internal_set_safi(from._internal_safi());
  }
  if (from._internal_prefix_len() != 0) {
    _internal_set_prefix_len(from._internal_prefix_len());
  }
  if (from._internal_route_source() != 0) {
    _internal_set_route_source(from._internal_route_source());
  }
  if (from._internal_route_source_index() != 0) {
    _internal_set_route_source_index(from._internal_route_source_index());
  }
  if (from._internal_path_id() != 0) {
    _internal_set_path_id(from._internal_path_id());
  }
  if (from._internal_as_size() != 0) {
    _internal_set_as_size(from._internal_as_size());
  }
  if (from._internal_best_route() != 0) {
    _internal_set_best_route(from._internal_best_route());
  }
  if (from._internal_ecmp_route() != 0) {
    _internal_set_ecmp_route(from._internal_ecmp_route());
  }
  if (from._internal_flap_stats_supprsd() != 0) {
    _internal_set_flap_stats_supprsd(from._internal_flap_stats_supprsd());
  }
  if (from._internal_stale() != 0) {
    _internal_set_stale(from._internal_stale());
  }
  if (from._internal_flap_stats_flapcnt() != 0) {
    _internal_set_flap_stats_flapcnt(from._internal_flap_stats_flapcnt());
  }
  if (from._internal_is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
  if (from._internal_flap_starttime() != 0) {
    _internal_set_flap_starttime(from._internal_flap_starttime());
  }
  if (from._internal_reason_not_best() != 0) {
    _internal_set_reason_not_best(from._internal_reason_not_best());
  }
  if (from._internal_local_pref() != 0) {
    _internal_set_local_pref(from._internal_local_pref());
  }
  if (from._internal_origin() != 0) {
    _internal_set_origin(from._internal_origin());
  }
  if (from._internal_med_present() != 0) {
    _internal_set_med_present(from._internal_med_present());
  }
  if (from._internal_med() != 0) {
    _internal_set_med(from._internal_med());
  }
  if (from._internal_peer_type() != 0) {
    _internal_set_peer_type(from._internal_peer_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPNLRIPrefixStatus::CopyFrom(const BGPNLRIPrefixStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPNLRIPrefixStatus::IsInitialized() const {
  return true;
}

void BGPNLRIPrefixStatus::InternalSwap(BGPNLRIPrefixStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ext_comm_.InternalSwap(&other->ext_comm_);
  comm_.InternalSwap(&other->comm_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &as_path_str_, lhs_arena,
      &other->as_path_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_orig_id_, lhs_arena,
      &other->path_orig_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_hop_addr_, lhs_arena,
      &other->next_hop_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPNLRIPrefixStatus, peer_type_)
      + sizeof(BGPNLRIPrefixStatus::peer_type_)
      - PROTOBUF_FIELD_OFFSET(BGPNLRIPrefixStatus, peer_addr_)>(
          reinterpret_cast<char*>(&peer_addr_),
          reinterpret_cast<char*>(&other->peer_addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPNLRIPrefixStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[11]);
}

// ===================================================================

class BGPNLRIPrefixFilter::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& next_hop(const BGPNLRIPrefixFilter* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& ip_address(const BGPNLRIPrefixFilter* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
BGPNLRIPrefixFilter::_Internal::next_hop(const BGPNLRIPrefixFilter* msg) {
  return *msg->next_hop_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
BGPNLRIPrefixFilter::_Internal::ip_address(const BGPNLRIPrefixFilter* msg) {
  return *msg->ip_address_;
}
void BGPNLRIPrefixFilter::clear_next_hop() {
  if (GetArenaForAllocation() == nullptr && next_hop_ != nullptr) {
    delete next_hop_;
  }
  next_hop_ = nullptr;
}
void BGPNLRIPrefixFilter::clear_ip_address() {
  if (GetArenaForAllocation() == nullptr && ip_address_ != nullptr) {
    delete ip_address_;
  }
  ip_address_ = nullptr;
}
BGPNLRIPrefixFilter::BGPNLRIPrefixFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter)
}
BGPNLRIPrefixFilter::BGPNLRIPrefixFilter(const BGPNLRIPrefixFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ext_comm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ext_comm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ext_comm().empty()) {
    ext_comm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ext_comm(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_next_hop()) {
    next_hop_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.next_hop_);
  } else {
    next_hop_ = nullptr;
  }
  if (from._internal_has_ip_address()) {
    ip_address_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.ip_address_);
  } else {
    ip_address_ = nullptr;
  }
  ::memcpy(&vnid_, &from.vnid_,
    static_cast<size_t>(reinterpret_cast<char*>(&best_) -
    reinterpret_cast<char*>(&vnid_)) + sizeof(best_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter)
}

inline void BGPNLRIPrefixFilter::SharedCtor() {
ext_comm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ext_comm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&next_hop_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&best_) -
    reinterpret_cast<char*>(&next_hop_)) + sizeof(best_));
}

BGPNLRIPrefixFilter::~BGPNLRIPrefixFilter() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPNLRIPrefixFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ext_comm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete next_hop_;
  if (this != internal_default_instance()) delete ip_address_;
}

void BGPNLRIPrefixFilter::ArenaDtor(void* object) {
  BGPNLRIPrefixFilter* _this = reinterpret_cast< BGPNLRIPrefixFilter* >(object);
  (void)_this;
}
void BGPNLRIPrefixFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPNLRIPrefixFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPNLRIPrefixFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_comm_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && next_hop_ != nullptr) {
    delete next_hop_;
  }
  next_hop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ip_address_ != nullptr) {
    delete ip_address_;
  }
  ip_address_ = nullptr;
  ::memset(&vnid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&best_) -
      reinterpret_cast<char*>(&vnid_)) + sizeof(best_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPNLRIPrefixFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ext_comm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ext_comm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vnid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          vnid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 route_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          route_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_hop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool best = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          best_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BGPNLRIPrefixFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ext_comm = 1;
  if (!this->_internal_ext_comm().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ext_comm(), target);
  }

  // int32 vnid = 2;
  if (this->_internal_vnid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vnid(), target);
  }

  // int32 route_type = 3;
  if (this->_internal_route_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_route_type(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop = 4;
  if (this->_internal_has_next_hop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::next_hop(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 5;
  if (this->_internal_has_ip_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ip_address(this), target, stream);
  }

  // bool best = 6;
  if (this->_internal_best() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_best(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter)
  return target;
}

size_t BGPNLRIPrefixFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ext_comm = 1;
  if (!this->_internal_ext_comm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ext_comm());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop = 4;
  if (this->_internal_has_next_hop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_hop_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 5;
  if (this->_internal_has_ip_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ip_address_);
  }

  // int32 vnid = 2;
  if (this->_internal_vnid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vnid());
  }

  // int32 route_type = 3;
  if (this->_internal_route_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_route_type());
  }

  // bool best = 6;
  if (this->_internal_best() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPNLRIPrefixFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPNLRIPrefixFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPNLRIPrefixFilter::GetClassData() const { return &_class_data_; }

void BGPNLRIPrefixFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BGPNLRIPrefixFilter *>(to)->MergeFrom(
      static_cast<const BGPNLRIPrefixFilter &>(from));
}


void BGPNLRIPrefixFilter::MergeFrom(const BGPNLRIPrefixFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ext_comm().empty()) {
    _internal_set_ext_comm(from._internal_ext_comm());
  }
  if (from._internal_has_next_hop()) {
    _internal_mutable_next_hop()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_next_hop());
  }
  if (from._internal_has_ip_address()) {
    _internal_mutable_ip_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_ip_address());
  }
  if (from._internal_vnid() != 0) {
    _internal_set_vnid(from._internal_vnid());
  }
  if (from._internal_route_type() != 0) {
    _internal_set_route_type(from._internal_route_type());
  }
  if (from._internal_best() != 0) {
    _internal_set_best(from._internal_best());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPNLRIPrefixFilter::CopyFrom(const BGPNLRIPrefixFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.BGPNLRIPrefixFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPNLRIPrefixFilter::IsInitialized() const {
  return true;
}

void BGPNLRIPrefixFilter::InternalSwap(BGPNLRIPrefixFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ext_comm_, lhs_arena,
      &other->ext_comm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPNLRIPrefixFilter, best_)
      + sizeof(BGPNLRIPrefixFilter::best_)
      - PROTOBUF_FIELD_OFFSET(BGPNLRIPrefixFilter, next_hop_)>(
          reinterpret_cast<char*>(&next_hop_),
          reinterpret_cast<char*>(&other->next_hop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPNLRIPrefixFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[12]);
}

// ===================================================================

class BGPAdjRibOut::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec& spec(const BGPAdjRibOut* msg);
  static const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus& status(const BGPAdjRibOut* msg);
};

const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec&
BGPAdjRibOut::_Internal::spec(const BGPAdjRibOut* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus&
BGPAdjRibOut::_Internal::status(const BGPAdjRibOut* msg) {
  return *msg->status_;
}
BGPAdjRibOut::BGPAdjRibOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BGPAdjRibOut)
}
BGPAdjRibOut::BGPAdjRibOut(const BGPAdjRibOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BGPAdjRibOut)
}

inline void BGPAdjRibOut::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

BGPAdjRibOut::~BGPAdjRibOut() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.BGPAdjRibOut)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPAdjRibOut::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void BGPAdjRibOut::ArenaDtor(void* object) {
  BGPAdjRibOut* _this = reinterpret_cast< BGPAdjRibOut* >(object);
  (void)_this;
}
void BGPAdjRibOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPAdjRibOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPAdjRibOut::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.BGPAdjRibOut)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPAdjRibOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.BGPAdjRibOutSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BGPAdjRibOut::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.BGPAdjRibOut)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.BGPAdjRibOutSpec spec = 1;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.BGPAdjRibOut)
  return target;
}

size_t BGPAdjRibOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.BGPAdjRibOut)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.BGPAdjRibOutSpec spec = 1;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPAdjRibOut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPAdjRibOut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPAdjRibOut::GetClassData() const { return &_class_data_; }

void BGPAdjRibOut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BGPAdjRibOut *>(to)->MergeFrom(
      static_cast<const BGPAdjRibOut &>(from));
}


void BGPAdjRibOut::MergeFrom(const BGPAdjRibOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.BGPAdjRibOut)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPAdjRibOut::CopyFrom(const BGPAdjRibOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.BGPAdjRibOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPAdjRibOut::IsInitialized() const {
  return true;
}

void BGPAdjRibOut::InternalSwap(BGPAdjRibOut* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPAdjRibOut, status_)
      + sizeof(BGPAdjRibOut::status_)
      - PROTOBUF_FIELD_OFFSET(BGPAdjRibOut, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPAdjRibOut::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[13]);
}

// ===================================================================

class BGPAdjRibOutSpec::_Internal {
 public:
};

BGPAdjRibOutSpec::BGPAdjRibOutSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BGPAdjRibOutSpec)
}
BGPAdjRibOutSpec::BGPAdjRibOutSpec(const BGPAdjRibOutSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BGPAdjRibOutSpec)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPAdjRibOutSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPAdjRibOutSpec::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BGPAdjRibOutSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[14]);
}

// ===================================================================

class BGPAdjRibOutStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& peer_addr(const BGPAdjRibOutStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
BGPAdjRibOutStatus::_Internal::peer_addr(const BGPAdjRibOutStatus* msg) {
  return *msg->peer_addr_;
}
void BGPAdjRibOutStatus::clear_peer_addr() {
  if (GetArenaForAllocation() == nullptr && peer_addr_ != nullptr) {
    delete peer_addr_;
  }
  peer_addr_ = nullptr;
}
BGPAdjRibOutStatus::BGPAdjRibOutStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  comm_(arena),
  ext_comm_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus)
}
BGPAdjRibOutStatus::BGPAdjRibOutStatus(const BGPAdjRibOutStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      comm_(from.comm_),
      ext_comm_(from.ext_comm_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  as_path_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    as_path_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_as_path_str().empty()) {
    as_path_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_as_path_str(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_peer_addr()) {
    peer_addr_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.peer_addr_);
  } else {
    peer_addr_ = nullptr;
  }
  ::memcpy(&afi_, &from.afi_,
    static_cast<size_t>(reinterpret_cast<char*>(&med_) -
    reinterpret_cast<char*>(&afi_)) + sizeof(med_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus)
}

inline void BGPAdjRibOutStatus::SharedCtor() {
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
as_path_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  as_path_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&peer_addr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&med_) -
    reinterpret_cast<char*>(&peer_addr_)) + sizeof(med_));
}

BGPAdjRibOutStatus::~BGPAdjRibOutStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BGPAdjRibOutStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  as_path_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peer_addr_;
}

void BGPAdjRibOutStatus::ArenaDtor(void* object) {
  BGPAdjRibOutStatus* _this = reinterpret_cast< BGPAdjRibOutStatus* >(object);
  (void)_this;
}
void BGPAdjRibOutStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BGPAdjRibOutStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BGPAdjRibOutStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comm_.Clear();
  ext_comm_.Clear();
  prefix_.ClearToEmpty();
  as_path_str_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && peer_addr_ != nullptr) {
    delete peer_addr_;
  }
  peer_addr_ = nullptr;
  ::memset(&afi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&med_) -
      reinterpret_cast<char*>(&afi_)) + sizeof(med_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BGPAdjRibOutStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_addr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_afi(static_cast<::opi_api::network::cloud::v1alpha1::BGPAfi>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_safi(static_cast<::opi_api::network::cloud::v1alpha1::BGPSafi>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 prefix_len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BgpAroAdvertState state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::opi_api::network::cloud::v1alpha1::BgpAroAdvertState>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.BgpAsSize as_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_as_size(static_cast<::opi_api::network::cloud::v1alpha1::BgpAsSize>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes as_path_str = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_as_path_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes comm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_comm();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes ext_comm = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ext_comm();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool med_present = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          med_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 med = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          med_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BGPAdjRibOutStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 1;
  if (this->_internal_has_peer_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_addr(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 2;
  if (this->_internal_afi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_afi(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 3;
  if (this->_internal_safi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_safi(), target);
  }

  // bytes prefix = 4;
  if (!this->_internal_prefix().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_prefix(), target);
  }

  // int32 prefix_len = 5;
  if (this->_internal_prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_prefix_len(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BgpAroAdvertState state = 6;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_state(), target);
  }

  // .opi_api.network.cloud.v1alpha1.BgpAsSize as_size = 7;
  if (this->_internal_as_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_as_size(), target);
  }

  // bytes as_path_str = 8;
  if (!this->_internal_as_path_str().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_as_path_str(), target);
  }

  // repeated bytes comm = 9;
  for (int i = 0, n = this->_internal_comm_size(); i < n; i++) {
    const auto& s = this->_internal_comm(i);
    target = stream->WriteBytes(9, s, target);
  }

  // repeated bytes ext_comm = 10;
  for (int i = 0, n = this->_internal_ext_comm_size(); i < n; i++) {
    const auto& s = this->_internal_ext_comm(i);
    target = stream->WriteBytes(10, s, target);
  }

  // bool med_present = 11;
  if (this->_internal_med_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_med_present(), target);
  }

  // uint32 med = 12;
  if (this->_internal_med() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_med(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus)
  return target;
}

size_t BGPAdjRibOutStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes comm = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(comm_.size());
  for (int i = 0, n = comm_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      comm_.Get(i));
  }

  // repeated bytes ext_comm = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ext_comm_.size());
  for (int i = 0, n = ext_comm_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      ext_comm_.Get(i));
  }

  // bytes prefix = 4;
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prefix());
  }

  // bytes as_path_str = 8;
  if (!this->_internal_as_path_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_as_path_str());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 1;
  if (this->_internal_has_peer_addr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_addr_);
  }

  // .opi_api.network.cloud.v1alpha1.BGPAfi afi = 2;
  if (this->_internal_afi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_afi());
  }

  // .opi_api.network.cloud.v1alpha1.BGPSafi safi = 3;
  if (this->_internal_safi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_safi());
  }

  // int32 prefix_len = 5;
  if (this->_internal_prefix_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_prefix_len());
  }

  // .opi_api.network.cloud.v1alpha1.BgpAroAdvertState state = 6;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .opi_api.network.cloud.v1alpha1.BgpAsSize as_size = 7;
  if (this->_internal_as_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_as_size());
  }

  // bool med_present = 11;
  if (this->_internal_med_present() != 0) {
    total_size += 1 + 1;
  }

  // uint32 med = 12;
  if (this->_internal_med() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_med());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BGPAdjRibOutStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BGPAdjRibOutStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BGPAdjRibOutStatus::GetClassData() const { return &_class_data_; }

void BGPAdjRibOutStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BGPAdjRibOutStatus *>(to)->MergeFrom(
      static_cast<const BGPAdjRibOutStatus &>(from));
}


void BGPAdjRibOutStatus::MergeFrom(const BGPAdjRibOutStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  comm_.MergeFrom(from.comm_);
  ext_comm_.MergeFrom(from.ext_comm_);
  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (!from._internal_as_path_str().empty()) {
    _internal_set_as_path_str(from._internal_as_path_str());
  }
  if (from._internal_has_peer_addr()) {
    _internal_mutable_peer_addr()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_peer_addr());
  }
  if (from._internal_afi() != 0) {
    _internal_set_afi(from._internal_afi());
  }
  if (from._internal_safi() != 0) {
    _internal_set_safi(from._internal_safi());
  }
  if (from._internal_prefix_len() != 0) {
    _internal_set_prefix_len(from._internal_prefix_len());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_as_size() != 0) {
    _internal_set_as_size(from._internal_as_size());
  }
  if (from._internal_med_present() != 0) {
    _internal_set_med_present(from._internal_med_present());
  }
  if (from._internal_med() != 0) {
    _internal_set_med(from._internal_med());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BGPAdjRibOutStatus::CopyFrom(const BGPAdjRibOutStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.BGPAdjRibOutStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BGPAdjRibOutStatus::IsInitialized() const {
  return true;
}

void BGPAdjRibOutStatus::InternalSwap(BGPAdjRibOutStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  comm_.InternalSwap(&other->comm_);
  ext_comm_.InternalSwap(&other->ext_comm_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &as_path_str_, lhs_arena,
      &other->as_path_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BGPAdjRibOutStatus, med_)
      + sizeof(BGPAdjRibOutStatus::med_)
      - PROTOBUF_FIELD_OFFSET(BGPAdjRibOutStatus, peer_addr_)>(
          reinterpret_cast<char*>(&peer_addr_),
          reinterpret_cast<char*>(&other->peer_addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BGPAdjRibOutStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bgp_2eproto_getter, &descriptor_table_bgp_2eproto_once,
      file_level_metadata_bgp_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::Bgp* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::Bgp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::Bgp >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BgpSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BgpSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BgpSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BgpStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BgpStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BgpStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BGPPeer* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BGPPeer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BGPPeer >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BGPPeerSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BGPPeerSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BGPPeerSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BGPPeerStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BGPPeerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BGPPeerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BGPPeerAf* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BGPPeerAf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BGPPeerAf >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BGPPeerAfSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BGPPeerAfStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefix* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixFilter* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BGPNLRIPrefixFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BGPAdjRibOut* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BGPAdjRibOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BGPAdjRibOut >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::BGPAdjRibOutStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
