// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloudrpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cloudrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cloudrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include "google/api/resource.pb.h"
#include "device.pb.h"
#include "port.pb.h"
#include "interface.pb.h"
#include "route.pb.h"
#include "vnic.pb.h"
#include "underlayroute.pb.h"
#include "bgp.pb.h"
#include "nexthop.pb.h"
#include "mapping.pb.h"
#include "subnet.pb.h"
#include "tunnel.pb.h"
#include "vpc.pb.h"
#include "networkpolicy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cloudrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cloudrpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[119]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cloudrpc_2eproto;
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
class CreateBGPPeerAfRequest;
struct CreateBGPPeerAfRequestDefaultTypeInternal;
extern CreateBGPPeerAfRequestDefaultTypeInternal _CreateBGPPeerAfRequest_default_instance_;
class CreateBGPPeerRequest;
struct CreateBGPPeerRequestDefaultTypeInternal;
extern CreateBGPPeerRequestDefaultTypeInternal _CreateBGPPeerRequest_default_instance_;
class CreateBgpRequest;
struct CreateBgpRequestDefaultTypeInternal;
extern CreateBgpRequestDefaultTypeInternal _CreateBgpRequest_default_instance_;
class CreateDeviceRequest;
struct CreateDeviceRequestDefaultTypeInternal;
extern CreateDeviceRequestDefaultTypeInternal _CreateDeviceRequest_default_instance_;
class CreateInterfaceRequest;
struct CreateInterfaceRequestDefaultTypeInternal;
extern CreateInterfaceRequestDefaultTypeInternal _CreateInterfaceRequest_default_instance_;
class CreateMappingRequest;
struct CreateMappingRequestDefaultTypeInternal;
extern CreateMappingRequestDefaultTypeInternal _CreateMappingRequest_default_instance_;
class CreateNextHopGroupRequest;
struct CreateNextHopGroupRequestDefaultTypeInternal;
extern CreateNextHopGroupRequestDefaultTypeInternal _CreateNextHopGroupRequest_default_instance_;
class CreateNextHopRequest;
struct CreateNextHopRequestDefaultTypeInternal;
extern CreateNextHopRequestDefaultTypeInternal _CreateNextHopRequest_default_instance_;
class CreateRouteRequest;
struct CreateRouteRequestDefaultTypeInternal;
extern CreateRouteRequestDefaultTypeInternal _CreateRouteRequest_default_instance_;
class CreateRouteTableRequest;
struct CreateRouteTableRequestDefaultTypeInternal;
extern CreateRouteTableRequestDefaultTypeInternal _CreateRouteTableRequest_default_instance_;
class CreateSecurityPolicyRequest;
struct CreateSecurityPolicyRequestDefaultTypeInternal;
extern CreateSecurityPolicyRequestDefaultTypeInternal _CreateSecurityPolicyRequest_default_instance_;
class CreateSecurityProfileRequest;
struct CreateSecurityProfileRequestDefaultTypeInternal;
extern CreateSecurityProfileRequestDefaultTypeInternal _CreateSecurityProfileRequest_default_instance_;
class CreateSecurityRuleRequest;
struct CreateSecurityRuleRequestDefaultTypeInternal;
extern CreateSecurityRuleRequestDefaultTypeInternal _CreateSecurityRuleRequest_default_instance_;
class CreateSubnetRequest;
struct CreateSubnetRequestDefaultTypeInternal;
extern CreateSubnetRequestDefaultTypeInternal _CreateSubnetRequest_default_instance_;
class CreateTunnelRequest;
struct CreateTunnelRequestDefaultTypeInternal;
extern CreateTunnelRequestDefaultTypeInternal _CreateTunnelRequest_default_instance_;
class CreateUnderlayRouteRequest;
struct CreateUnderlayRouteRequestDefaultTypeInternal;
extern CreateUnderlayRouteRequestDefaultTypeInternal _CreateUnderlayRouteRequest_default_instance_;
class CreateVPCPeerRequest;
struct CreateVPCPeerRequestDefaultTypeInternal;
extern CreateVPCPeerRequestDefaultTypeInternal _CreateVPCPeerRequest_default_instance_;
class CreateVnicRequest;
struct CreateVnicRequestDefaultTypeInternal;
extern CreateVnicRequestDefaultTypeInternal _CreateVnicRequest_default_instance_;
class CreateVpcRequest;
struct CreateVpcRequestDefaultTypeInternal;
extern CreateVpcRequestDefaultTypeInternal _CreateVpcRequest_default_instance_;
class DeleteBGPPeerAfRequest;
struct DeleteBGPPeerAfRequestDefaultTypeInternal;
extern DeleteBGPPeerAfRequestDefaultTypeInternal _DeleteBGPPeerAfRequest_default_instance_;
class DeleteBGPPeerRequest;
struct DeleteBGPPeerRequestDefaultTypeInternal;
extern DeleteBGPPeerRequestDefaultTypeInternal _DeleteBGPPeerRequest_default_instance_;
class DeleteBgpRequest;
struct DeleteBgpRequestDefaultTypeInternal;
extern DeleteBgpRequestDefaultTypeInternal _DeleteBgpRequest_default_instance_;
class DeleteDeviceRequest;
struct DeleteDeviceRequestDefaultTypeInternal;
extern DeleteDeviceRequestDefaultTypeInternal _DeleteDeviceRequest_default_instance_;
class DeleteInterfaceRequest;
struct DeleteInterfaceRequestDefaultTypeInternal;
extern DeleteInterfaceRequestDefaultTypeInternal _DeleteInterfaceRequest_default_instance_;
class DeleteMappingRequest;
struct DeleteMappingRequestDefaultTypeInternal;
extern DeleteMappingRequestDefaultTypeInternal _DeleteMappingRequest_default_instance_;
class DeleteNextHopGroupRequest;
struct DeleteNextHopGroupRequestDefaultTypeInternal;
extern DeleteNextHopGroupRequestDefaultTypeInternal _DeleteNextHopGroupRequest_default_instance_;
class DeleteNextHopRequest;
struct DeleteNextHopRequestDefaultTypeInternal;
extern DeleteNextHopRequestDefaultTypeInternal _DeleteNextHopRequest_default_instance_;
class DeleteRouteRequest;
struct DeleteRouteRequestDefaultTypeInternal;
extern DeleteRouteRequestDefaultTypeInternal _DeleteRouteRequest_default_instance_;
class DeleteRouteTableRequest;
struct DeleteRouteTableRequestDefaultTypeInternal;
extern DeleteRouteTableRequestDefaultTypeInternal _DeleteRouteTableRequest_default_instance_;
class DeleteSecurityPolicyRequest;
struct DeleteSecurityPolicyRequestDefaultTypeInternal;
extern DeleteSecurityPolicyRequestDefaultTypeInternal _DeleteSecurityPolicyRequest_default_instance_;
class DeleteSecurityProfileRequest;
struct DeleteSecurityProfileRequestDefaultTypeInternal;
extern DeleteSecurityProfileRequestDefaultTypeInternal _DeleteSecurityProfileRequest_default_instance_;
class DeleteSecurityRuleRequest;
struct DeleteSecurityRuleRequestDefaultTypeInternal;
extern DeleteSecurityRuleRequestDefaultTypeInternal _DeleteSecurityRuleRequest_default_instance_;
class DeleteSubnetRequest;
struct DeleteSubnetRequestDefaultTypeInternal;
extern DeleteSubnetRequestDefaultTypeInternal _DeleteSubnetRequest_default_instance_;
class DeleteTunnelRequest;
struct DeleteTunnelRequestDefaultTypeInternal;
extern DeleteTunnelRequestDefaultTypeInternal _DeleteTunnelRequest_default_instance_;
class DeleteUnderlayRouteRequest;
struct DeleteUnderlayRouteRequestDefaultTypeInternal;
extern DeleteUnderlayRouteRequestDefaultTypeInternal _DeleteUnderlayRouteRequest_default_instance_;
class DeleteVPCPeerRequest;
struct DeleteVPCPeerRequestDefaultTypeInternal;
extern DeleteVPCPeerRequestDefaultTypeInternal _DeleteVPCPeerRequest_default_instance_;
class DeleteVnicRequest;
struct DeleteVnicRequestDefaultTypeInternal;
extern DeleteVnicRequestDefaultTypeInternal _DeleteVnicRequest_default_instance_;
class DeleteVpcRequest;
struct DeleteVpcRequestDefaultTypeInternal;
extern DeleteVpcRequestDefaultTypeInternal _DeleteVpcRequest_default_instance_;
class GetBGPPeerAfRequest;
struct GetBGPPeerAfRequestDefaultTypeInternal;
extern GetBGPPeerAfRequestDefaultTypeInternal _GetBGPPeerAfRequest_default_instance_;
class GetBGPPeerRequest;
struct GetBGPPeerRequestDefaultTypeInternal;
extern GetBGPPeerRequestDefaultTypeInternal _GetBGPPeerRequest_default_instance_;
class GetBgpRequest;
struct GetBgpRequestDefaultTypeInternal;
extern GetBgpRequestDefaultTypeInternal _GetBgpRequest_default_instance_;
class GetDeviceCapabilitiesRequest;
struct GetDeviceCapabilitiesRequestDefaultTypeInternal;
extern GetDeviceCapabilitiesRequestDefaultTypeInternal _GetDeviceCapabilitiesRequest_default_instance_;
class GetDeviceRequest;
struct GetDeviceRequestDefaultTypeInternal;
extern GetDeviceRequestDefaultTypeInternal _GetDeviceRequest_default_instance_;
class GetInterfaceRequest;
struct GetInterfaceRequestDefaultTypeInternal;
extern GetInterfaceRequestDefaultTypeInternal _GetInterfaceRequest_default_instance_;
class GetMappingRequest;
struct GetMappingRequestDefaultTypeInternal;
extern GetMappingRequestDefaultTypeInternal _GetMappingRequest_default_instance_;
class GetNextHopGroupRequest;
struct GetNextHopGroupRequestDefaultTypeInternal;
extern GetNextHopGroupRequestDefaultTypeInternal _GetNextHopGroupRequest_default_instance_;
class GetNextHopRequest;
struct GetNextHopRequestDefaultTypeInternal;
extern GetNextHopRequestDefaultTypeInternal _GetNextHopRequest_default_instance_;
class GetPortRequest;
struct GetPortRequestDefaultTypeInternal;
extern GetPortRequestDefaultTypeInternal _GetPortRequest_default_instance_;
class GetRouteRequest;
struct GetRouteRequestDefaultTypeInternal;
extern GetRouteRequestDefaultTypeInternal _GetRouteRequest_default_instance_;
class GetRouteTableRequest;
struct GetRouteTableRequestDefaultTypeInternal;
extern GetRouteTableRequestDefaultTypeInternal _GetRouteTableRequest_default_instance_;
class GetSecurityPolicyRequest;
struct GetSecurityPolicyRequestDefaultTypeInternal;
extern GetSecurityPolicyRequestDefaultTypeInternal _GetSecurityPolicyRequest_default_instance_;
class GetSecurityProfileRequest;
struct GetSecurityProfileRequestDefaultTypeInternal;
extern GetSecurityProfileRequestDefaultTypeInternal _GetSecurityProfileRequest_default_instance_;
class GetSecurityRuleRequest;
struct GetSecurityRuleRequestDefaultTypeInternal;
extern GetSecurityRuleRequestDefaultTypeInternal _GetSecurityRuleRequest_default_instance_;
class GetSubnetRequest;
struct GetSubnetRequestDefaultTypeInternal;
extern GetSubnetRequestDefaultTypeInternal _GetSubnetRequest_default_instance_;
class GetTunnelRequest;
struct GetTunnelRequestDefaultTypeInternal;
extern GetTunnelRequestDefaultTypeInternal _GetTunnelRequest_default_instance_;
class GetUnderlayRouteRequest;
struct GetUnderlayRouteRequestDefaultTypeInternal;
extern GetUnderlayRouteRequestDefaultTypeInternal _GetUnderlayRouteRequest_default_instance_;
class GetVPCPeerRequest;
struct GetVPCPeerRequestDefaultTypeInternal;
extern GetVPCPeerRequestDefaultTypeInternal _GetVPCPeerRequest_default_instance_;
class GetVnicRequest;
struct GetVnicRequestDefaultTypeInternal;
extern GetVnicRequestDefaultTypeInternal _GetVnicRequest_default_instance_;
class GetVpcRequest;
struct GetVpcRequestDefaultTypeInternal;
extern GetVpcRequestDefaultTypeInternal _GetVpcRequest_default_instance_;
class ListBGPPeerAfsRequest;
struct ListBGPPeerAfsRequestDefaultTypeInternal;
extern ListBGPPeerAfsRequestDefaultTypeInternal _ListBGPPeerAfsRequest_default_instance_;
class ListBGPPeerAfsResponse;
struct ListBGPPeerAfsResponseDefaultTypeInternal;
extern ListBGPPeerAfsResponseDefaultTypeInternal _ListBGPPeerAfsResponse_default_instance_;
class ListBGPPeersRequest;
struct ListBGPPeersRequestDefaultTypeInternal;
extern ListBGPPeersRequestDefaultTypeInternal _ListBGPPeersRequest_default_instance_;
class ListBGPPeersResponse;
struct ListBGPPeersResponseDefaultTypeInternal;
extern ListBGPPeersResponseDefaultTypeInternal _ListBGPPeersResponse_default_instance_;
class ListBgpsRequest;
struct ListBgpsRequestDefaultTypeInternal;
extern ListBgpsRequestDefaultTypeInternal _ListBgpsRequest_default_instance_;
class ListBgpsResponse;
struct ListBgpsResponseDefaultTypeInternal;
extern ListBgpsResponseDefaultTypeInternal _ListBgpsResponse_default_instance_;
class ListDevicesRequest;
struct ListDevicesRequestDefaultTypeInternal;
extern ListDevicesRequestDefaultTypeInternal _ListDevicesRequest_default_instance_;
class ListDevicesResponse;
struct ListDevicesResponseDefaultTypeInternal;
extern ListDevicesResponseDefaultTypeInternal _ListDevicesResponse_default_instance_;
class ListInterfacesRequest;
struct ListInterfacesRequestDefaultTypeInternal;
extern ListInterfacesRequestDefaultTypeInternal _ListInterfacesRequest_default_instance_;
class ListInterfacesResponse;
struct ListInterfacesResponseDefaultTypeInternal;
extern ListInterfacesResponseDefaultTypeInternal _ListInterfacesResponse_default_instance_;
class ListMappingsRequest;
struct ListMappingsRequestDefaultTypeInternal;
extern ListMappingsRequestDefaultTypeInternal _ListMappingsRequest_default_instance_;
class ListMappingsResponse;
struct ListMappingsResponseDefaultTypeInternal;
extern ListMappingsResponseDefaultTypeInternal _ListMappingsResponse_default_instance_;
class ListNextHopGroupsRequest;
struct ListNextHopGroupsRequestDefaultTypeInternal;
extern ListNextHopGroupsRequestDefaultTypeInternal _ListNextHopGroupsRequest_default_instance_;
class ListNextHopGroupsResponse;
struct ListNextHopGroupsResponseDefaultTypeInternal;
extern ListNextHopGroupsResponseDefaultTypeInternal _ListNextHopGroupsResponse_default_instance_;
class ListNextHopsRequest;
struct ListNextHopsRequestDefaultTypeInternal;
extern ListNextHopsRequestDefaultTypeInternal _ListNextHopsRequest_default_instance_;
class ListNextHopsResponse;
struct ListNextHopsResponseDefaultTypeInternal;
extern ListNextHopsResponseDefaultTypeInternal _ListNextHopsResponse_default_instance_;
class ListPortsRequest;
struct ListPortsRequestDefaultTypeInternal;
extern ListPortsRequestDefaultTypeInternal _ListPortsRequest_default_instance_;
class ListPortsResponse;
struct ListPortsResponseDefaultTypeInternal;
extern ListPortsResponseDefaultTypeInternal _ListPortsResponse_default_instance_;
class ListRouteTablesRequest;
struct ListRouteTablesRequestDefaultTypeInternal;
extern ListRouteTablesRequestDefaultTypeInternal _ListRouteTablesRequest_default_instance_;
class ListRouteTablesResponse;
struct ListRouteTablesResponseDefaultTypeInternal;
extern ListRouteTablesResponseDefaultTypeInternal _ListRouteTablesResponse_default_instance_;
class ListRoutesRequest;
struct ListRoutesRequestDefaultTypeInternal;
extern ListRoutesRequestDefaultTypeInternal _ListRoutesRequest_default_instance_;
class ListRoutesResponse;
struct ListRoutesResponseDefaultTypeInternal;
extern ListRoutesResponseDefaultTypeInternal _ListRoutesResponse_default_instance_;
class ListSecurityPolicysRequest;
struct ListSecurityPolicysRequestDefaultTypeInternal;
extern ListSecurityPolicysRequestDefaultTypeInternal _ListSecurityPolicysRequest_default_instance_;
class ListSecurityPolicysResponse;
struct ListSecurityPolicysResponseDefaultTypeInternal;
extern ListSecurityPolicysResponseDefaultTypeInternal _ListSecurityPolicysResponse_default_instance_;
class ListSecurityProfilesRequest;
struct ListSecurityProfilesRequestDefaultTypeInternal;
extern ListSecurityProfilesRequestDefaultTypeInternal _ListSecurityProfilesRequest_default_instance_;
class ListSecurityProfilesResponse;
struct ListSecurityProfilesResponseDefaultTypeInternal;
extern ListSecurityProfilesResponseDefaultTypeInternal _ListSecurityProfilesResponse_default_instance_;
class ListSecurityRulesRequest;
struct ListSecurityRulesRequestDefaultTypeInternal;
extern ListSecurityRulesRequestDefaultTypeInternal _ListSecurityRulesRequest_default_instance_;
class ListSecurityRulesResponse;
struct ListSecurityRulesResponseDefaultTypeInternal;
extern ListSecurityRulesResponseDefaultTypeInternal _ListSecurityRulesResponse_default_instance_;
class ListSubnetsRequest;
struct ListSubnetsRequestDefaultTypeInternal;
extern ListSubnetsRequestDefaultTypeInternal _ListSubnetsRequest_default_instance_;
class ListSubnetsResponse;
struct ListSubnetsResponseDefaultTypeInternal;
extern ListSubnetsResponseDefaultTypeInternal _ListSubnetsResponse_default_instance_;
class ListTunnelsRequest;
struct ListTunnelsRequestDefaultTypeInternal;
extern ListTunnelsRequestDefaultTypeInternal _ListTunnelsRequest_default_instance_;
class ListTunnelsResponse;
struct ListTunnelsResponseDefaultTypeInternal;
extern ListTunnelsResponseDefaultTypeInternal _ListTunnelsResponse_default_instance_;
class ListUnderlayRoutesRequest;
struct ListUnderlayRoutesRequestDefaultTypeInternal;
extern ListUnderlayRoutesRequestDefaultTypeInternal _ListUnderlayRoutesRequest_default_instance_;
class ListUnderlayRoutesResponse;
struct ListUnderlayRoutesResponseDefaultTypeInternal;
extern ListUnderlayRoutesResponseDefaultTypeInternal _ListUnderlayRoutesResponse_default_instance_;
class ListVPCPeersRequest;
struct ListVPCPeersRequestDefaultTypeInternal;
extern ListVPCPeersRequestDefaultTypeInternal _ListVPCPeersRequest_default_instance_;
class ListVPCPeersResponse;
struct ListVPCPeersResponseDefaultTypeInternal;
extern ListVPCPeersResponseDefaultTypeInternal _ListVPCPeersResponse_default_instance_;
class ListVnicsRequest;
struct ListVnicsRequestDefaultTypeInternal;
extern ListVnicsRequestDefaultTypeInternal _ListVnicsRequest_default_instance_;
class ListVnicsResponse;
struct ListVnicsResponseDefaultTypeInternal;
extern ListVnicsResponseDefaultTypeInternal _ListVnicsResponse_default_instance_;
class ListVpcsRequest;
struct ListVpcsRequestDefaultTypeInternal;
extern ListVpcsRequestDefaultTypeInternal _ListVpcsRequest_default_instance_;
class ListVpcsResponse;
struct ListVpcsResponseDefaultTypeInternal;
extern ListVpcsResponseDefaultTypeInternal _ListVpcsResponse_default_instance_;
class UpdateBGPPeerAfRequest;
struct UpdateBGPPeerAfRequestDefaultTypeInternal;
extern UpdateBGPPeerAfRequestDefaultTypeInternal _UpdateBGPPeerAfRequest_default_instance_;
class UpdateBGPPeerRequest;
struct UpdateBGPPeerRequestDefaultTypeInternal;
extern UpdateBGPPeerRequestDefaultTypeInternal _UpdateBGPPeerRequest_default_instance_;
class UpdateBgpRequest;
struct UpdateBgpRequestDefaultTypeInternal;
extern UpdateBgpRequestDefaultTypeInternal _UpdateBgpRequest_default_instance_;
class UpdateDeviceRequest;
struct UpdateDeviceRequestDefaultTypeInternal;
extern UpdateDeviceRequestDefaultTypeInternal _UpdateDeviceRequest_default_instance_;
class UpdateInterfaceRequest;
struct UpdateInterfaceRequestDefaultTypeInternal;
extern UpdateInterfaceRequestDefaultTypeInternal _UpdateInterfaceRequest_default_instance_;
class UpdateMappingRequest;
struct UpdateMappingRequestDefaultTypeInternal;
extern UpdateMappingRequestDefaultTypeInternal _UpdateMappingRequest_default_instance_;
class UpdateNextHopGroupRequest;
struct UpdateNextHopGroupRequestDefaultTypeInternal;
extern UpdateNextHopGroupRequestDefaultTypeInternal _UpdateNextHopGroupRequest_default_instance_;
class UpdateNextHopRequest;
struct UpdateNextHopRequestDefaultTypeInternal;
extern UpdateNextHopRequestDefaultTypeInternal _UpdateNextHopRequest_default_instance_;
class UpdatePortRequest;
struct UpdatePortRequestDefaultTypeInternal;
extern UpdatePortRequestDefaultTypeInternal _UpdatePortRequest_default_instance_;
class UpdateRouteRequest;
struct UpdateRouteRequestDefaultTypeInternal;
extern UpdateRouteRequestDefaultTypeInternal _UpdateRouteRequest_default_instance_;
class UpdateRouteTableRequest;
struct UpdateRouteTableRequestDefaultTypeInternal;
extern UpdateRouteTableRequestDefaultTypeInternal _UpdateRouteTableRequest_default_instance_;
class UpdateSecurityPolicyRequest;
struct UpdateSecurityPolicyRequestDefaultTypeInternal;
extern UpdateSecurityPolicyRequestDefaultTypeInternal _UpdateSecurityPolicyRequest_default_instance_;
class UpdateSecurityProfileRequest;
struct UpdateSecurityProfileRequestDefaultTypeInternal;
extern UpdateSecurityProfileRequestDefaultTypeInternal _UpdateSecurityProfileRequest_default_instance_;
class UpdateSecurityRuleRequest;
struct UpdateSecurityRuleRequestDefaultTypeInternal;
extern UpdateSecurityRuleRequestDefaultTypeInternal _UpdateSecurityRuleRequest_default_instance_;
class UpdateSubnetRequest;
struct UpdateSubnetRequestDefaultTypeInternal;
extern UpdateSubnetRequestDefaultTypeInternal _UpdateSubnetRequest_default_instance_;
class UpdateTunnelRequest;
struct UpdateTunnelRequestDefaultTypeInternal;
extern UpdateTunnelRequestDefaultTypeInternal _UpdateTunnelRequest_default_instance_;
class UpdateUnderlayRouteRequest;
struct UpdateUnderlayRouteRequestDefaultTypeInternal;
extern UpdateUnderlayRouteRequestDefaultTypeInternal _UpdateUnderlayRouteRequest_default_instance_;
class UpdateVPCPeerRequest;
struct UpdateVPCPeerRequestDefaultTypeInternal;
extern UpdateVPCPeerRequestDefaultTypeInternal _UpdateVPCPeerRequest_default_instance_;
class UpdateVnicRequest;
struct UpdateVnicRequestDefaultTypeInternal;
extern UpdateVnicRequestDefaultTypeInternal _UpdateVnicRequest_default_instance_;
class UpdateVpcRequest;
struct UpdateVpcRequestDefaultTypeInternal;
extern UpdateVpcRequestDefaultTypeInternal _UpdateVpcRequest_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::cloud::v1alpha1::CreateBGPPeerAfRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateBGPPeerAfRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateBGPPeerRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateBGPPeerRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateBgpRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateBgpRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateDeviceRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateDeviceRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateInterfaceRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateInterfaceRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateMappingRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateMappingRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateNextHopGroupRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateNextHopGroupRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateNextHopRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateNextHopRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateRouteRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateRouteRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateRouteTableRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateRouteTableRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateSecurityPolicyRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateSecurityPolicyRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateSecurityProfileRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateSecurityProfileRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateSecurityRuleRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateSecurityRuleRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateSubnetRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateSubnetRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateTunnelRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateTunnelRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateUnderlayRouteRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateUnderlayRouteRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateVPCPeerRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateVPCPeerRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateVnicRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateVnicRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::CreateVpcRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::CreateVpcRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteBGPPeerAfRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteBGPPeerAfRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteBGPPeerRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteBGPPeerRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteBgpRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteBgpRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteDeviceRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteDeviceRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteInterfaceRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteInterfaceRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteMappingRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteMappingRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteNextHopGroupRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteNextHopGroupRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteNextHopRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteNextHopRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteRouteRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteRouteRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteRouteTableRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteRouteTableRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteSecurityPolicyRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteSecurityPolicyRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteSecurityProfileRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteSecurityProfileRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteSecurityRuleRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteSecurityRuleRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteSubnetRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteSubnetRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteTunnelRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteTunnelRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteUnderlayRouteRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteUnderlayRouteRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteVPCPeerRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteVPCPeerRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteVnicRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteVnicRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeleteVpcRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeleteVpcRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetBGPPeerAfRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetBGPPeerAfRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetBGPPeerRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetBGPPeerRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetBgpRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetBgpRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetDeviceCapabilitiesRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetDeviceCapabilitiesRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetDeviceRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetDeviceRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetInterfaceRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetInterfaceRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetMappingRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetMappingRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetNextHopGroupRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetNextHopGroupRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetNextHopRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetNextHopRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetPortRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetPortRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetRouteRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetRouteRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetRouteTableRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetRouteTableRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetSecurityPolicyRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetSecurityPolicyRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetSecurityProfileRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetSecurityProfileRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetSecurityRuleRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetSecurityRuleRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetSubnetRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetSubnetRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetTunnelRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetTunnelRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetUnderlayRouteRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetUnderlayRouteRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetVPCPeerRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetVPCPeerRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetVnicRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetVnicRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::GetVpcRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::GetVpcRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListBGPPeerAfsRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListBGPPeerAfsRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListBGPPeerAfsResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListBGPPeerAfsResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListBGPPeersRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListBGPPeersRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListBGPPeersResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListBGPPeersResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListBgpsRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListBgpsRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListBgpsResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListBgpsResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListDevicesRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListDevicesRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListDevicesResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListDevicesResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListInterfacesRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListInterfacesRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListInterfacesResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListInterfacesResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListMappingsRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListMappingsRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListMappingsResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListMappingsResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListNextHopGroupsRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListNextHopGroupsRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListNextHopGroupsResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListNextHopGroupsResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListNextHopsRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListNextHopsRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListNextHopsResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListNextHopsResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListPortsRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListPortsRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListPortsResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListPortsResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListRouteTablesRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListRouteTablesRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListRouteTablesResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListRouteTablesResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListRoutesRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListRoutesRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListRoutesResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListRoutesResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListSecurityPolicysRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListSecurityPolicysRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListSecurityPolicysResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListSecurityPolicysResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListSecurityProfilesRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListSecurityProfilesRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListSecurityProfilesResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListSecurityProfilesResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListSecurityRulesRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListSecurityRulesRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListSecurityRulesResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListSecurityRulesResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListSubnetsRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListSubnetsRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListSubnetsResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListSubnetsResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListTunnelsRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListTunnelsRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListTunnelsResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListTunnelsResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListUnderlayRoutesRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListUnderlayRoutesRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListUnderlayRoutesResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListUnderlayRoutesResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListVPCPeersRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListVPCPeersRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListVPCPeersResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListVPCPeersResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListVnicsRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListVnicsRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListVnicsResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListVnicsResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListVpcsRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListVpcsRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::ListVpcsResponse* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ListVpcsResponse>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateBGPPeerAfRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateBGPPeerAfRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateBGPPeerRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateBGPPeerRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateBgpRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateBgpRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateDeviceRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateDeviceRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateInterfaceRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateInterfaceRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateMappingRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateMappingRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateNextHopGroupRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateNextHopGroupRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateNextHopRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateNextHopRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdatePortRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdatePortRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateRouteRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateRouteRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateRouteTableRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateRouteTableRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateSecurityPolicyRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateSecurityPolicyRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateSecurityProfileRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateSecurityProfileRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateSecurityRuleRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateSecurityRuleRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateSubnetRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateSubnetRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateTunnelRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateTunnelRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateUnderlayRouteRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateUnderlayRouteRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateVPCPeerRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateVPCPeerRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateVnicRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateVnicRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UpdateVpcRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UpdateVpcRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {

// ===================================================================

class GetDeviceCapabilitiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetDeviceCapabilitiesRequest) */ {
 public:
  inline GetDeviceCapabilitiesRequest() : GetDeviceCapabilitiesRequest(nullptr) {}
  explicit constexpr GetDeviceCapabilitiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDeviceCapabilitiesRequest(const GetDeviceCapabilitiesRequest& from);
  GetDeviceCapabilitiesRequest(GetDeviceCapabilitiesRequest&& from) noexcept
    : GetDeviceCapabilitiesRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceCapabilitiesRequest& operator=(const GetDeviceCapabilitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceCapabilitiesRequest& operator=(GetDeviceCapabilitiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDeviceCapabilitiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDeviceCapabilitiesRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceCapabilitiesRequest*>(
               &_GetDeviceCapabilitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetDeviceCapabilitiesRequest& a, GetDeviceCapabilitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceCapabilitiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceCapabilitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDeviceCapabilitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDeviceCapabilitiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetDeviceCapabilitiesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetDeviceCapabilitiesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetDeviceCapabilitiesRequest";
  }
  protected:
  explicit GetDeviceCapabilitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetDeviceCapabilitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateDeviceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateDeviceRequest) */ {
 public:
  inline CreateDeviceRequest() : CreateDeviceRequest(nullptr) {}
  ~CreateDeviceRequest() override;
  explicit constexpr CreateDeviceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDeviceRequest(const CreateDeviceRequest& from);
  CreateDeviceRequest(CreateDeviceRequest&& from) noexcept
    : CreateDeviceRequest() {
    *this = ::std::move(from);
  }

  inline CreateDeviceRequest& operator=(const CreateDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeviceRequest& operator=(CreateDeviceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDeviceRequest*>(
               &_CreateDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateDeviceRequest& a, CreateDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeviceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDeviceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDeviceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateDeviceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeviceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateDeviceRequest";
  }
  protected:
  explicit CreateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kDeviceIdFieldNumber = 3,
    kDeviceFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string device_id = 3;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .opi_api.network.cloud.v1alpha1.Device device = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::opi_api::network::cloud::v1alpha1::Device& device() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Device* release_device();
  ::opi_api::network::cloud::v1alpha1::Device* mutable_device();
  void set_allocated_device(::opi_api::network::cloud::v1alpha1::Device* device);
  private:
  const ::opi_api::network::cloud::v1alpha1::Device& _internal_device() const;
  ::opi_api::network::cloud::v1alpha1::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::opi_api::network::cloud::v1alpha1::Device* device);
  ::opi_api::network::cloud::v1alpha1::Device* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::opi_api::network::cloud::v1alpha1::Device* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteDeviceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteDeviceRequest) */ {
 public:
  inline DeleteDeviceRequest() : DeleteDeviceRequest(nullptr) {}
  ~DeleteDeviceRequest() override;
  explicit constexpr DeleteDeviceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDeviceRequest(const DeleteDeviceRequest& from);
  DeleteDeviceRequest(DeleteDeviceRequest&& from) noexcept
    : DeleteDeviceRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDeviceRequest& operator=(const DeleteDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDeviceRequest& operator=(DeleteDeviceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteDeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDeviceRequest*>(
               &_DeleteDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteDeviceRequest& a, DeleteDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDeviceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteDeviceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteDeviceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteDeviceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDeviceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteDeviceRequest";
  }
  protected:
  explicit DeleteDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateDeviceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateDeviceRequest) */ {
 public:
  inline UpdateDeviceRequest() : UpdateDeviceRequest(nullptr) {}
  ~UpdateDeviceRequest() override;
  explicit constexpr UpdateDeviceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDeviceRequest(const UpdateDeviceRequest& from);
  UpdateDeviceRequest(UpdateDeviceRequest&& from) noexcept
    : UpdateDeviceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDeviceRequest& operator=(const UpdateDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDeviceRequest& operator=(UpdateDeviceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDeviceRequest*>(
               &_UpdateDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateDeviceRequest& a, UpdateDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDeviceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateDeviceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDeviceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateDeviceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDeviceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateDeviceRequest";
  }
  protected:
  explicit UpdateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.Device device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::opi_api::network::cloud::v1alpha1::Device& device() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Device* release_device();
  ::opi_api::network::cloud::v1alpha1::Device* mutable_device();
  void set_allocated_device(::opi_api::network::cloud::v1alpha1::Device* device);
  private:
  const ::opi_api::network::cloud::v1alpha1::Device& _internal_device() const;
  ::opi_api::network::cloud::v1alpha1::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::opi_api::network::cloud::v1alpha1::Device* device);
  ::opi_api::network::cloud::v1alpha1::Device* unsafe_arena_release_device();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::Device* device_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListDevicesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListDevicesRequest) */ {
 public:
  inline ListDevicesRequest() : ListDevicesRequest(nullptr) {}
  ~ListDevicesRequest() override;
  explicit constexpr ListDevicesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDevicesRequest(const ListDevicesRequest& from);
  ListDevicesRequest(ListDevicesRequest&& from) noexcept
    : ListDevicesRequest() {
    *this = ::std::move(from);
  }

  inline ListDevicesRequest& operator=(const ListDevicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDevicesRequest& operator=(ListDevicesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDevicesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDevicesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDevicesRequest*>(
               &_ListDevicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListDevicesRequest& a, ListDevicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDevicesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDevicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDevicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDevicesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDevicesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListDevicesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDevicesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListDevicesRequest";
  }
  protected:
  explicit ListDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListDevicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListDevicesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListDevicesResponse) */ {
 public:
  inline ListDevicesResponse() : ListDevicesResponse(nullptr) {}
  ~ListDevicesResponse() override;
  explicit constexpr ListDevicesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDevicesResponse(const ListDevicesResponse& from);
  ListDevicesResponse(ListDevicesResponse&& from) noexcept
    : ListDevicesResponse() {
    *this = ::std::move(from);
  }

  inline ListDevicesResponse& operator=(const ListDevicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDevicesResponse& operator=(ListDevicesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListDevicesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDevicesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDevicesResponse*>(
               &_ListDevicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListDevicesResponse& a, ListDevicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDevicesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDevicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListDevicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListDevicesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListDevicesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListDevicesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDevicesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListDevicesResponse";
  }
  protected:
  explicit ListDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.Device device = 1;
  int device_size() const;
  private:
  int _internal_device_size() const;
  public:
  void clear_device();
  ::opi_api::network::cloud::v1alpha1::Device* mutable_device(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Device >*
      mutable_device();
  private:
  const ::opi_api::network::cloud::v1alpha1::Device& _internal_device(int index) const;
  ::opi_api::network::cloud::v1alpha1::Device* _internal_add_device();
  public:
  const ::opi_api::network::cloud::v1alpha1::Device& device(int index) const;
  ::opi_api::network::cloud::v1alpha1::Device* add_device();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Device >&
      device() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListDevicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Device > device_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetDeviceRequest) */ {
 public:
  inline GetDeviceRequest() : GetDeviceRequest(nullptr) {}
  ~GetDeviceRequest() override;
  explicit constexpr GetDeviceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDeviceRequest(const GetDeviceRequest& from);
  GetDeviceRequest(GetDeviceRequest&& from) noexcept
    : GetDeviceRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceRequest& operator=(const GetDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceRequest& operator=(GetDeviceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceRequest*>(
               &_GetDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetDeviceRequest& a, GetDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDeviceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDeviceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDeviceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetDeviceRequest";
  }
  protected:
  explicit GetDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdatePortRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdatePortRequest) */ {
 public:
  inline UpdatePortRequest() : UpdatePortRequest(nullptr) {}
  ~UpdatePortRequest() override;
  explicit constexpr UpdatePortRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePortRequest(const UpdatePortRequest& from);
  UpdatePortRequest(UpdatePortRequest&& from) noexcept
    : UpdatePortRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePortRequest& operator=(const UpdatePortRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePortRequest& operator=(UpdatePortRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePortRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePortRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePortRequest*>(
               &_UpdatePortRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdatePortRequest& a, UpdatePortRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePortRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePortRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePortRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePortRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePortRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdatePortRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePortRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdatePortRequest";
  }
  protected:
  explicit UpdatePortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.Port port = 1;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  const ::opi_api::network::cloud::v1alpha1::Port& port() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Port* release_port();
  ::opi_api::network::cloud::v1alpha1::Port* mutable_port();
  void set_allocated_port(::opi_api::network::cloud::v1alpha1::Port* port);
  private:
  const ::opi_api::network::cloud::v1alpha1::Port& _internal_port() const;
  ::opi_api::network::cloud::v1alpha1::Port* _internal_mutable_port();
  public:
  void unsafe_arena_set_allocated_port(
      ::opi_api::network::cloud::v1alpha1::Port* port);
  ::opi_api::network::cloud::v1alpha1::Port* unsafe_arena_release_port();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdatePortRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::Port* port_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListPortsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListPortsRequest) */ {
 public:
  inline ListPortsRequest() : ListPortsRequest(nullptr) {}
  ~ListPortsRequest() override;
  explicit constexpr ListPortsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPortsRequest(const ListPortsRequest& from);
  ListPortsRequest(ListPortsRequest&& from) noexcept
    : ListPortsRequest() {
    *this = ::std::move(from);
  }

  inline ListPortsRequest& operator=(const ListPortsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPortsRequest& operator=(ListPortsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPortsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPortsRequest* internal_default_instance() {
    return reinterpret_cast<const ListPortsRequest*>(
               &_ListPortsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListPortsRequest& a, ListPortsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPortsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPortsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPortsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPortsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPortsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListPortsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPortsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListPortsRequest";
  }
  protected:
  explicit ListPortsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListPortsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListPortsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListPortsResponse) */ {
 public:
  inline ListPortsResponse() : ListPortsResponse(nullptr) {}
  ~ListPortsResponse() override;
  explicit constexpr ListPortsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPortsResponse(const ListPortsResponse& from);
  ListPortsResponse(ListPortsResponse&& from) noexcept
    : ListPortsResponse() {
    *this = ::std::move(from);
  }

  inline ListPortsResponse& operator=(const ListPortsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPortsResponse& operator=(ListPortsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPortsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPortsResponse* internal_default_instance() {
    return reinterpret_cast<const ListPortsResponse*>(
               &_ListPortsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListPortsResponse& a, ListPortsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPortsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPortsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPortsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPortsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPortsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListPortsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPortsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListPortsResponse";
  }
  protected:
  explicit ListPortsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.Port port = 1;
  int port_size() const;
  private:
  int _internal_port_size() const;
  public:
  void clear_port();
  ::opi_api::network::cloud::v1alpha1::Port* mutable_port(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Port >*
      mutable_port();
  private:
  const ::opi_api::network::cloud::v1alpha1::Port& _internal_port(int index) const;
  ::opi_api::network::cloud::v1alpha1::Port* _internal_add_port();
  public:
  const ::opi_api::network::cloud::v1alpha1::Port& port(int index) const;
  ::opi_api::network::cloud::v1alpha1::Port* add_port();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Port >&
      port() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListPortsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Port > port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetPortRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetPortRequest) */ {
 public:
  inline GetPortRequest() : GetPortRequest(nullptr) {}
  ~GetPortRequest() override;
  explicit constexpr GetPortRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPortRequest(const GetPortRequest& from);
  GetPortRequest(GetPortRequest&& from) noexcept
    : GetPortRequest() {
    *this = ::std::move(from);
  }

  inline GetPortRequest& operator=(const GetPortRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPortRequest& operator=(GetPortRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPortRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPortRequest* internal_default_instance() {
    return reinterpret_cast<const GetPortRequest*>(
               &_GetPortRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetPortRequest& a, GetPortRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPortRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPortRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPortRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPortRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPortRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPortRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPortRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetPortRequest";
  }
  protected:
  explicit GetPortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetPortRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateVnicRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateVnicRequest) */ {
 public:
  inline CreateVnicRequest() : CreateVnicRequest(nullptr) {}
  ~CreateVnicRequest() override;
  explicit constexpr CreateVnicRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVnicRequest(const CreateVnicRequest& from);
  CreateVnicRequest(CreateVnicRequest&& from) noexcept
    : CreateVnicRequest() {
    *this = ::std::move(from);
  }

  inline CreateVnicRequest& operator=(const CreateVnicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVnicRequest& operator=(CreateVnicRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateVnicRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVnicRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVnicRequest*>(
               &_CreateVnicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CreateVnicRequest& a, CreateVnicRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVnicRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVnicRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateVnicRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateVnicRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateVnicRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateVnicRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVnicRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateVnicRequest";
  }
  protected:
  explicit CreateVnicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kVnicIdFieldNumber = 3,
    kVnicFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string vnic_id = 3;
  void clear_vnic_id();
  const std::string& vnic_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vnic_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vnic_id();
  PROTOBUF_NODISCARD std::string* release_vnic_id();
  void set_allocated_vnic_id(std::string* vnic_id);
  private:
  const std::string& _internal_vnic_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vnic_id(const std::string& value);
  std::string* _internal_mutable_vnic_id();
  public:

  // .opi_api.network.cloud.v1alpha1.Vnic vnic = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_vnic() const;
  private:
  bool _internal_has_vnic() const;
  public:
  void clear_vnic();
  const ::opi_api::network::cloud::v1alpha1::Vnic& vnic() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Vnic* release_vnic();
  ::opi_api::network::cloud::v1alpha1::Vnic* mutable_vnic();
  void set_allocated_vnic(::opi_api::network::cloud::v1alpha1::Vnic* vnic);
  private:
  const ::opi_api::network::cloud::v1alpha1::Vnic& _internal_vnic() const;
  ::opi_api::network::cloud::v1alpha1::Vnic* _internal_mutable_vnic();
  public:
  void unsafe_arena_set_allocated_vnic(
      ::opi_api::network::cloud::v1alpha1::Vnic* vnic);
  ::opi_api::network::cloud::v1alpha1::Vnic* unsafe_arena_release_vnic();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateVnicRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vnic_id_;
  ::opi_api::network::cloud::v1alpha1::Vnic* vnic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteVnicRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteVnicRequest) */ {
 public:
  inline DeleteVnicRequest() : DeleteVnicRequest(nullptr) {}
  ~DeleteVnicRequest() override;
  explicit constexpr DeleteVnicRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVnicRequest(const DeleteVnicRequest& from);
  DeleteVnicRequest(DeleteVnicRequest&& from) noexcept
    : DeleteVnicRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVnicRequest& operator=(const DeleteVnicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVnicRequest& operator=(DeleteVnicRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteVnicRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVnicRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVnicRequest*>(
               &_DeleteVnicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteVnicRequest& a, DeleteVnicRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVnicRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVnicRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteVnicRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteVnicRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteVnicRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteVnicRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVnicRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteVnicRequest";
  }
  protected:
  explicit DeleteVnicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteVnicRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateVnicRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateVnicRequest) */ {
 public:
  inline UpdateVnicRequest() : UpdateVnicRequest(nullptr) {}
  ~UpdateVnicRequest() override;
  explicit constexpr UpdateVnicRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVnicRequest(const UpdateVnicRequest& from);
  UpdateVnicRequest(UpdateVnicRequest&& from) noexcept
    : UpdateVnicRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVnicRequest& operator=(const UpdateVnicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVnicRequest& operator=(UpdateVnicRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVnicRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVnicRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVnicRequest*>(
               &_UpdateVnicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UpdateVnicRequest& a, UpdateVnicRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVnicRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVnicRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateVnicRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateVnicRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVnicRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateVnicRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVnicRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateVnicRequest";
  }
  protected:
  explicit UpdateVnicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVnicFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.Vnic vnic = 1;
  bool has_vnic() const;
  private:
  bool _internal_has_vnic() const;
  public:
  void clear_vnic();
  const ::opi_api::network::cloud::v1alpha1::Vnic& vnic() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Vnic* release_vnic();
  ::opi_api::network::cloud::v1alpha1::Vnic* mutable_vnic();
  void set_allocated_vnic(::opi_api::network::cloud::v1alpha1::Vnic* vnic);
  private:
  const ::opi_api::network::cloud::v1alpha1::Vnic& _internal_vnic() const;
  ::opi_api::network::cloud::v1alpha1::Vnic* _internal_mutable_vnic();
  public:
  void unsafe_arena_set_allocated_vnic(
      ::opi_api::network::cloud::v1alpha1::Vnic* vnic);
  ::opi_api::network::cloud::v1alpha1::Vnic* unsafe_arena_release_vnic();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateVnicRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::Vnic* vnic_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListVnicsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListVnicsRequest) */ {
 public:
  inline ListVnicsRequest() : ListVnicsRequest(nullptr) {}
  ~ListVnicsRequest() override;
  explicit constexpr ListVnicsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVnicsRequest(const ListVnicsRequest& from);
  ListVnicsRequest(ListVnicsRequest&& from) noexcept
    : ListVnicsRequest() {
    *this = ::std::move(from);
  }

  inline ListVnicsRequest& operator=(const ListVnicsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVnicsRequest& operator=(ListVnicsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVnicsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVnicsRequest* internal_default_instance() {
    return reinterpret_cast<const ListVnicsRequest*>(
               &_ListVnicsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListVnicsRequest& a, ListVnicsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVnicsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVnicsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVnicsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVnicsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVnicsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListVnicsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVnicsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListVnicsRequest";
  }
  protected:
  explicit ListVnicsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListVnicsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListVnicsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListVnicsResponse) */ {
 public:
  inline ListVnicsResponse() : ListVnicsResponse(nullptr) {}
  ~ListVnicsResponse() override;
  explicit constexpr ListVnicsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVnicsResponse(const ListVnicsResponse& from);
  ListVnicsResponse(ListVnicsResponse&& from) noexcept
    : ListVnicsResponse() {
    *this = ::std::move(from);
  }

  inline ListVnicsResponse& operator=(const ListVnicsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVnicsResponse& operator=(ListVnicsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVnicsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVnicsResponse* internal_default_instance() {
    return reinterpret_cast<const ListVnicsResponse*>(
               &_ListVnicsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ListVnicsResponse& a, ListVnicsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVnicsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVnicsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVnicsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVnicsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVnicsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListVnicsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVnicsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListVnicsResponse";
  }
  protected:
  explicit ListVnicsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVnicFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.Vnic vnic = 1;
  int vnic_size() const;
  private:
  int _internal_vnic_size() const;
  public:
  void clear_vnic();
  ::opi_api::network::cloud::v1alpha1::Vnic* mutable_vnic(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Vnic >*
      mutable_vnic();
  private:
  const ::opi_api::network::cloud::v1alpha1::Vnic& _internal_vnic(int index) const;
  ::opi_api::network::cloud::v1alpha1::Vnic* _internal_add_vnic();
  public:
  const ::opi_api::network::cloud::v1alpha1::Vnic& vnic(int index) const;
  ::opi_api::network::cloud::v1alpha1::Vnic* add_vnic();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Vnic >&
      vnic() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListVnicsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Vnic > vnic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetVnicRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetVnicRequest) */ {
 public:
  inline GetVnicRequest() : GetVnicRequest(nullptr) {}
  ~GetVnicRequest() override;
  explicit constexpr GetVnicRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVnicRequest(const GetVnicRequest& from);
  GetVnicRequest(GetVnicRequest&& from) noexcept
    : GetVnicRequest() {
    *this = ::std::move(from);
  }

  inline GetVnicRequest& operator=(const GetVnicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVnicRequest& operator=(GetVnicRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVnicRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVnicRequest* internal_default_instance() {
    return reinterpret_cast<const GetVnicRequest*>(
               &_GetVnicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetVnicRequest& a, GetVnicRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVnicRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVnicRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVnicRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVnicRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVnicRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetVnicRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVnicRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetVnicRequest";
  }
  protected:
  explicit GetVnicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetVnicRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateInterfaceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest) */ {
 public:
  inline CreateInterfaceRequest() : CreateInterfaceRequest(nullptr) {}
  ~CreateInterfaceRequest() override;
  explicit constexpr CreateInterfaceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateInterfaceRequest(const CreateInterfaceRequest& from);
  CreateInterfaceRequest(CreateInterfaceRequest&& from) noexcept
    : CreateInterfaceRequest() {
    *this = ::std::move(from);
  }

  inline CreateInterfaceRequest& operator=(const CreateInterfaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInterfaceRequest& operator=(CreateInterfaceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateInterfaceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateInterfaceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateInterfaceRequest*>(
               &_CreateInterfaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CreateInterfaceRequest& a, CreateInterfaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInterfaceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInterfaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateInterfaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateInterfaceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateInterfaceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateInterfaceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInterfaceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateInterfaceRequest";
  }
  protected:
  explicit CreateInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kInterfaceIdFieldNumber = 3,
    kInterfaceFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string interface_id = 3;
  void clear_interface_id();
  const std::string& interface_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interface_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interface_id();
  PROTOBUF_NODISCARD std::string* release_interface_id();
  void set_allocated_interface_id(std::string* interface_id);
  private:
  const std::string& _internal_interface_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface_id(const std::string& value);
  std::string* _internal_mutable_interface_id();
  public:

  // .opi_api.network.cloud.v1alpha1.Interface interface = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_interface() const;
  private:
  bool _internal_has_interface() const;
  public:
  void clear_interface();
  const ::opi_api::network::cloud::v1alpha1::Interface& interface() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Interface* release_interface();
  ::opi_api::network::cloud::v1alpha1::Interface* mutable_interface();
  void set_allocated_interface(::opi_api::network::cloud::v1alpha1::Interface* interface);
  private:
  const ::opi_api::network::cloud::v1alpha1::Interface& _internal_interface() const;
  ::opi_api::network::cloud::v1alpha1::Interface* _internal_mutable_interface();
  public:
  void unsafe_arena_set_allocated_interface(
      ::opi_api::network::cloud::v1alpha1::Interface* interface);
  ::opi_api::network::cloud::v1alpha1::Interface* unsafe_arena_release_interface();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_id_;
  ::opi_api::network::cloud::v1alpha1::Interface* interface_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteInterfaceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteInterfaceRequest) */ {
 public:
  inline DeleteInterfaceRequest() : DeleteInterfaceRequest(nullptr) {}
  ~DeleteInterfaceRequest() override;
  explicit constexpr DeleteInterfaceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteInterfaceRequest(const DeleteInterfaceRequest& from);
  DeleteInterfaceRequest(DeleteInterfaceRequest&& from) noexcept
    : DeleteInterfaceRequest() {
    *this = ::std::move(from);
  }

  inline DeleteInterfaceRequest& operator=(const DeleteInterfaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteInterfaceRequest& operator=(DeleteInterfaceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteInterfaceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteInterfaceRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteInterfaceRequest*>(
               &_DeleteInterfaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeleteInterfaceRequest& a, DeleteInterfaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteInterfaceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteInterfaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteInterfaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteInterfaceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteInterfaceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteInterfaceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteInterfaceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteInterfaceRequest";
  }
  protected:
  explicit DeleteInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteInterfaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateInterfaceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest) */ {
 public:
  inline UpdateInterfaceRequest() : UpdateInterfaceRequest(nullptr) {}
  ~UpdateInterfaceRequest() override;
  explicit constexpr UpdateInterfaceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateInterfaceRequest(const UpdateInterfaceRequest& from);
  UpdateInterfaceRequest(UpdateInterfaceRequest&& from) noexcept
    : UpdateInterfaceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateInterfaceRequest& operator=(const UpdateInterfaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateInterfaceRequest& operator=(UpdateInterfaceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateInterfaceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateInterfaceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateInterfaceRequest*>(
               &_UpdateInterfaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UpdateInterfaceRequest& a, UpdateInterfaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateInterfaceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateInterfaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateInterfaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateInterfaceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateInterfaceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateInterfaceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateInterfaceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest";
  }
  protected:
  explicit UpdateInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.Interface interface = 1;
  bool has_interface() const;
  private:
  bool _internal_has_interface() const;
  public:
  void clear_interface();
  const ::opi_api::network::cloud::v1alpha1::Interface& interface() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Interface* release_interface();
  ::opi_api::network::cloud::v1alpha1::Interface* mutable_interface();
  void set_allocated_interface(::opi_api::network::cloud::v1alpha1::Interface* interface);
  private:
  const ::opi_api::network::cloud::v1alpha1::Interface& _internal_interface() const;
  ::opi_api::network::cloud::v1alpha1::Interface* _internal_mutable_interface();
  public:
  void unsafe_arena_set_allocated_interface(
      ::opi_api::network::cloud::v1alpha1::Interface* interface);
  ::opi_api::network::cloud::v1alpha1::Interface* unsafe_arena_release_interface();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::Interface* interface_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListInterfacesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListInterfacesRequest) */ {
 public:
  inline ListInterfacesRequest() : ListInterfacesRequest(nullptr) {}
  ~ListInterfacesRequest() override;
  explicit constexpr ListInterfacesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListInterfacesRequest(const ListInterfacesRequest& from);
  ListInterfacesRequest(ListInterfacesRequest&& from) noexcept
    : ListInterfacesRequest() {
    *this = ::std::move(from);
  }

  inline ListInterfacesRequest& operator=(const ListInterfacesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListInterfacesRequest& operator=(ListInterfacesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListInterfacesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListInterfacesRequest* internal_default_instance() {
    return reinterpret_cast<const ListInterfacesRequest*>(
               &_ListInterfacesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ListInterfacesRequest& a, ListInterfacesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListInterfacesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListInterfacesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListInterfacesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListInterfacesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListInterfacesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListInterfacesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInterfacesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListInterfacesRequest";
  }
  protected:
  explicit ListInterfacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListInterfacesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListInterfacesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListInterfacesResponse) */ {
 public:
  inline ListInterfacesResponse() : ListInterfacesResponse(nullptr) {}
  ~ListInterfacesResponse() override;
  explicit constexpr ListInterfacesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListInterfacesResponse(const ListInterfacesResponse& from);
  ListInterfacesResponse(ListInterfacesResponse&& from) noexcept
    : ListInterfacesResponse() {
    *this = ::std::move(from);
  }

  inline ListInterfacesResponse& operator=(const ListInterfacesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListInterfacesResponse& operator=(ListInterfacesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListInterfacesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListInterfacesResponse* internal_default_instance() {
    return reinterpret_cast<const ListInterfacesResponse*>(
               &_ListInterfacesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ListInterfacesResponse& a, ListInterfacesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListInterfacesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListInterfacesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListInterfacesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListInterfacesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListInterfacesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListInterfacesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInterfacesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListInterfacesResponse";
  }
  protected:
  explicit ListInterfacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.Interface interface = 1;
  int interface_size() const;
  private:
  int _internal_interface_size() const;
  public:
  void clear_interface();
  ::opi_api::network::cloud::v1alpha1::Interface* mutable_interface(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Interface >*
      mutable_interface();
  private:
  const ::opi_api::network::cloud::v1alpha1::Interface& _internal_interface(int index) const;
  ::opi_api::network::cloud::v1alpha1::Interface* _internal_add_interface();
  public:
  const ::opi_api::network::cloud::v1alpha1::Interface& interface(int index) const;
  ::opi_api::network::cloud::v1alpha1::Interface* add_interface();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Interface >&
      interface() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListInterfacesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Interface > interface_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetInterfaceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetInterfaceRequest) */ {
 public:
  inline GetInterfaceRequest() : GetInterfaceRequest(nullptr) {}
  ~GetInterfaceRequest() override;
  explicit constexpr GetInterfaceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInterfaceRequest(const GetInterfaceRequest& from);
  GetInterfaceRequest(GetInterfaceRequest&& from) noexcept
    : GetInterfaceRequest() {
    *this = ::std::move(from);
  }

  inline GetInterfaceRequest& operator=(const GetInterfaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInterfaceRequest& operator=(GetInterfaceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInterfaceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInterfaceRequest* internal_default_instance() {
    return reinterpret_cast<const GetInterfaceRequest*>(
               &_GetInterfaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetInterfaceRequest& a, GetInterfaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInterfaceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInterfaceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInterfaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInterfaceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInterfaceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInterfaceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInterfaceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetInterfaceRequest";
  }
  protected:
  explicit GetInterfaceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetInterfaceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateRouteTableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest) */ {
 public:
  inline CreateRouteTableRequest() : CreateRouteTableRequest(nullptr) {}
  ~CreateRouteTableRequest() override;
  explicit constexpr CreateRouteTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRouteTableRequest(const CreateRouteTableRequest& from);
  CreateRouteTableRequest(CreateRouteTableRequest&& from) noexcept
    : CreateRouteTableRequest() {
    *this = ::std::move(from);
  }

  inline CreateRouteTableRequest& operator=(const CreateRouteTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRouteTableRequest& operator=(CreateRouteTableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRouteTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRouteTableRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRouteTableRequest*>(
               &_CreateRouteTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CreateRouteTableRequest& a, CreateRouteTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRouteTableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRouteTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRouteTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRouteTableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRouteTableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRouteTableRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRouteTableRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateRouteTableRequest";
  }
  protected:
  explicit CreateRouteTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kRoutetableIdFieldNumber = 3,
    kRoutetableFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string routetable_id = 3;
  void clear_routetable_id();
  const std::string& routetable_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_routetable_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_routetable_id();
  PROTOBUF_NODISCARD std::string* release_routetable_id();
  void set_allocated_routetable_id(std::string* routetable_id);
  private:
  const std::string& _internal_routetable_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routetable_id(const std::string& value);
  std::string* _internal_mutable_routetable_id();
  public:

  // .opi_api.network.cloud.v1alpha1.RouteTable routetable = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_routetable() const;
  private:
  bool _internal_has_routetable() const;
  public:
  void clear_routetable();
  const ::opi_api::network::cloud::v1alpha1::RouteTable& routetable() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::RouteTable* release_routetable();
  ::opi_api::network::cloud::v1alpha1::RouteTable* mutable_routetable();
  void set_allocated_routetable(::opi_api::network::cloud::v1alpha1::RouteTable* routetable);
  private:
  const ::opi_api::network::cloud::v1alpha1::RouteTable& _internal_routetable() const;
  ::opi_api::network::cloud::v1alpha1::RouteTable* _internal_mutable_routetable();
  public:
  void unsafe_arena_set_allocated_routetable(
      ::opi_api::network::cloud::v1alpha1::RouteTable* routetable);
  ::opi_api::network::cloud::v1alpha1::RouteTable* unsafe_arena_release_routetable();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routetable_id_;
  ::opi_api::network::cloud::v1alpha1::RouteTable* routetable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteRouteTableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteRouteTableRequest) */ {
 public:
  inline DeleteRouteTableRequest() : DeleteRouteTableRequest(nullptr) {}
  ~DeleteRouteTableRequest() override;
  explicit constexpr DeleteRouteTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRouteTableRequest(const DeleteRouteTableRequest& from);
  DeleteRouteTableRequest(DeleteRouteTableRequest&& from) noexcept
    : DeleteRouteTableRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRouteTableRequest& operator=(const DeleteRouteTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRouteTableRequest& operator=(DeleteRouteTableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRouteTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRouteTableRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRouteTableRequest*>(
               &_DeleteRouteTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DeleteRouteTableRequest& a, DeleteRouteTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRouteTableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRouteTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRouteTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRouteTableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRouteTableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRouteTableRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRouteTableRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteRouteTableRequest";
  }
  protected:
  explicit DeleteRouteTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteRouteTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateRouteTableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest) */ {
 public:
  inline UpdateRouteTableRequest() : UpdateRouteTableRequest(nullptr) {}
  ~UpdateRouteTableRequest() override;
  explicit constexpr UpdateRouteTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRouteTableRequest(const UpdateRouteTableRequest& from);
  UpdateRouteTableRequest(UpdateRouteTableRequest&& from) noexcept
    : UpdateRouteTableRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRouteTableRequest& operator=(const UpdateRouteTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRouteTableRequest& operator=(UpdateRouteTableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRouteTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRouteTableRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRouteTableRequest*>(
               &_UpdateRouteTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UpdateRouteTableRequest& a, UpdateRouteTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRouteTableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRouteTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRouteTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRouteTableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRouteTableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRouteTableRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRouteTableRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest";
  }
  protected:
  explicit UpdateRouteTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutetableFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.RouteTable routetable = 1;
  bool has_routetable() const;
  private:
  bool _internal_has_routetable() const;
  public:
  void clear_routetable();
  const ::opi_api::network::cloud::v1alpha1::RouteTable& routetable() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::RouteTable* release_routetable();
  ::opi_api::network::cloud::v1alpha1::RouteTable* mutable_routetable();
  void set_allocated_routetable(::opi_api::network::cloud::v1alpha1::RouteTable* routetable);
  private:
  const ::opi_api::network::cloud::v1alpha1::RouteTable& _internal_routetable() const;
  ::opi_api::network::cloud::v1alpha1::RouteTable* _internal_mutable_routetable();
  public:
  void unsafe_arena_set_allocated_routetable(
      ::opi_api::network::cloud::v1alpha1::RouteTable* routetable);
  ::opi_api::network::cloud::v1alpha1::RouteTable* unsafe_arena_release_routetable();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::RouteTable* routetable_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListRouteTablesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListRouteTablesRequest) */ {
 public:
  inline ListRouteTablesRequest() : ListRouteTablesRequest(nullptr) {}
  ~ListRouteTablesRequest() override;
  explicit constexpr ListRouteTablesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRouteTablesRequest(const ListRouteTablesRequest& from);
  ListRouteTablesRequest(ListRouteTablesRequest&& from) noexcept
    : ListRouteTablesRequest() {
    *this = ::std::move(from);
  }

  inline ListRouteTablesRequest& operator=(const ListRouteTablesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRouteTablesRequest& operator=(ListRouteTablesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRouteTablesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRouteTablesRequest* internal_default_instance() {
    return reinterpret_cast<const ListRouteTablesRequest*>(
               &_ListRouteTablesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ListRouteTablesRequest& a, ListRouteTablesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRouteTablesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRouteTablesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRouteTablesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRouteTablesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRouteTablesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRouteTablesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRouteTablesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListRouteTablesRequest";
  }
  protected:
  explicit ListRouteTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListRouteTablesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListRouteTablesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListRouteTablesResponse) */ {
 public:
  inline ListRouteTablesResponse() : ListRouteTablesResponse(nullptr) {}
  ~ListRouteTablesResponse() override;
  explicit constexpr ListRouteTablesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRouteTablesResponse(const ListRouteTablesResponse& from);
  ListRouteTablesResponse(ListRouteTablesResponse&& from) noexcept
    : ListRouteTablesResponse() {
    *this = ::std::move(from);
  }

  inline ListRouteTablesResponse& operator=(const ListRouteTablesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRouteTablesResponse& operator=(ListRouteTablesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRouteTablesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRouteTablesResponse* internal_default_instance() {
    return reinterpret_cast<const ListRouteTablesResponse*>(
               &_ListRouteTablesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ListRouteTablesResponse& a, ListRouteTablesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRouteTablesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRouteTablesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRouteTablesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRouteTablesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRouteTablesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRouteTablesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRouteTablesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListRouteTablesResponse";
  }
  protected:
  explicit ListRouteTablesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutetableFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.RouteTable routetable = 1;
  int routetable_size() const;
  private:
  int _internal_routetable_size() const;
  public:
  void clear_routetable();
  ::opi_api::network::cloud::v1alpha1::RouteTable* mutable_routetable(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::RouteTable >*
      mutable_routetable();
  private:
  const ::opi_api::network::cloud::v1alpha1::RouteTable& _internal_routetable(int index) const;
  ::opi_api::network::cloud::v1alpha1::RouteTable* _internal_add_routetable();
  public:
  const ::opi_api::network::cloud::v1alpha1::RouteTable& routetable(int index) const;
  ::opi_api::network::cloud::v1alpha1::RouteTable* add_routetable();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::RouteTable >&
      routetable() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListRouteTablesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::RouteTable > routetable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetRouteTableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetRouteTableRequest) */ {
 public:
  inline GetRouteTableRequest() : GetRouteTableRequest(nullptr) {}
  ~GetRouteTableRequest() override;
  explicit constexpr GetRouteTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRouteTableRequest(const GetRouteTableRequest& from);
  GetRouteTableRequest(GetRouteTableRequest&& from) noexcept
    : GetRouteTableRequest() {
    *this = ::std::move(from);
  }

  inline GetRouteTableRequest& operator=(const GetRouteTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRouteTableRequest& operator=(GetRouteTableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRouteTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRouteTableRequest* internal_default_instance() {
    return reinterpret_cast<const GetRouteTableRequest*>(
               &_GetRouteTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetRouteTableRequest& a, GetRouteTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRouteTableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRouteTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRouteTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRouteTableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRouteTableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRouteTableRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRouteTableRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetRouteTableRequest";
  }
  protected:
  explicit GetRouteTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetRouteTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateRouteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateRouteRequest) */ {
 public:
  inline CreateRouteRequest() : CreateRouteRequest(nullptr) {}
  ~CreateRouteRequest() override;
  explicit constexpr CreateRouteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRouteRequest(const CreateRouteRequest& from);
  CreateRouteRequest(CreateRouteRequest&& from) noexcept
    : CreateRouteRequest() {
    *this = ::std::move(from);
  }

  inline CreateRouteRequest& operator=(const CreateRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRouteRequest& operator=(CreateRouteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRouteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRouteRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRouteRequest*>(
               &_CreateRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CreateRouteRequest& a, CreateRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRouteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRouteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRouteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRouteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRouteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateRouteRequest";
  }
  protected:
  explicit CreateRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kRouteIdFieldNumber = 3,
    kRouteFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string route_id = 3;
  void clear_route_id();
  const std::string& route_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_route_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_route_id();
  PROTOBUF_NODISCARD std::string* release_route_id();
  void set_allocated_route_id(std::string* route_id);
  private:
  const std::string& _internal_route_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_route_id(const std::string& value);
  std::string* _internal_mutable_route_id();
  public:

  // .opi_api.network.cloud.v1alpha1.Route route = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::opi_api::network::cloud::v1alpha1::Route& route() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Route* release_route();
  ::opi_api::network::cloud::v1alpha1::Route* mutable_route();
  void set_allocated_route(::opi_api::network::cloud::v1alpha1::Route* route);
  private:
  const ::opi_api::network::cloud::v1alpha1::Route& _internal_route() const;
  ::opi_api::network::cloud::v1alpha1::Route* _internal_mutable_route();
  public:
  void unsafe_arena_set_allocated_route(
      ::opi_api::network::cloud::v1alpha1::Route* route);
  ::opi_api::network::cloud::v1alpha1::Route* unsafe_arena_release_route();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateRouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_id_;
  ::opi_api::network::cloud::v1alpha1::Route* route_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteRouteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteRouteRequest) */ {
 public:
  inline DeleteRouteRequest() : DeleteRouteRequest(nullptr) {}
  ~DeleteRouteRequest() override;
  explicit constexpr DeleteRouteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRouteRequest(const DeleteRouteRequest& from);
  DeleteRouteRequest(DeleteRouteRequest&& from) noexcept
    : DeleteRouteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRouteRequest& operator=(const DeleteRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRouteRequest& operator=(DeleteRouteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRouteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRouteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRouteRequest*>(
               &_DeleteRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(DeleteRouteRequest& a, DeleteRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRouteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRouteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRouteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRouteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRouteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteRouteRequest";
  }
  protected:
  explicit DeleteRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteRouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateRouteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateRouteRequest) */ {
 public:
  inline UpdateRouteRequest() : UpdateRouteRequest(nullptr) {}
  ~UpdateRouteRequest() override;
  explicit constexpr UpdateRouteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRouteRequest(const UpdateRouteRequest& from);
  UpdateRouteRequest(UpdateRouteRequest&& from) noexcept
    : UpdateRouteRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRouteRequest& operator=(const UpdateRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRouteRequest& operator=(UpdateRouteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRouteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRouteRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRouteRequest*>(
               &_UpdateRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UpdateRouteRequest& a, UpdateRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRouteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRouteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRouteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRouteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRouteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateRouteRequest";
  }
  protected:
  explicit UpdateRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.Route route = 1;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::opi_api::network::cloud::v1alpha1::Route& route() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Route* release_route();
  ::opi_api::network::cloud::v1alpha1::Route* mutable_route();
  void set_allocated_route(::opi_api::network::cloud::v1alpha1::Route* route);
  private:
  const ::opi_api::network::cloud::v1alpha1::Route& _internal_route() const;
  ::opi_api::network::cloud::v1alpha1::Route* _internal_mutable_route();
  public:
  void unsafe_arena_set_allocated_route(
      ::opi_api::network::cloud::v1alpha1::Route* route);
  ::opi_api::network::cloud::v1alpha1::Route* unsafe_arena_release_route();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateRouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::Route* route_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListRoutesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListRoutesRequest) */ {
 public:
  inline ListRoutesRequest() : ListRoutesRequest(nullptr) {}
  ~ListRoutesRequest() override;
  explicit constexpr ListRoutesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRoutesRequest(const ListRoutesRequest& from);
  ListRoutesRequest(ListRoutesRequest&& from) noexcept
    : ListRoutesRequest() {
    *this = ::std::move(from);
  }

  inline ListRoutesRequest& operator=(const ListRoutesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRoutesRequest& operator=(ListRoutesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRoutesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRoutesRequest* internal_default_instance() {
    return reinterpret_cast<const ListRoutesRequest*>(
               &_ListRoutesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ListRoutesRequest& a, ListRoutesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRoutesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRoutesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRoutesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRoutesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRoutesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRoutesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRoutesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListRoutesRequest";
  }
  protected:
  explicit ListRoutesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListRoutesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListRoutesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListRoutesResponse) */ {
 public:
  inline ListRoutesResponse() : ListRoutesResponse(nullptr) {}
  ~ListRoutesResponse() override;
  explicit constexpr ListRoutesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRoutesResponse(const ListRoutesResponse& from);
  ListRoutesResponse(ListRoutesResponse&& from) noexcept
    : ListRoutesResponse() {
    *this = ::std::move(from);
  }

  inline ListRoutesResponse& operator=(const ListRoutesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRoutesResponse& operator=(ListRoutesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRoutesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRoutesResponse* internal_default_instance() {
    return reinterpret_cast<const ListRoutesResponse*>(
               &_ListRoutesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ListRoutesResponse& a, ListRoutesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRoutesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRoutesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRoutesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRoutesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRoutesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRoutesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRoutesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListRoutesResponse";
  }
  protected:
  explicit ListRoutesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.Route route = 1;
  int route_size() const;
  private:
  int _internal_route_size() const;
  public:
  void clear_route();
  ::opi_api::network::cloud::v1alpha1::Route* mutable_route(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Route >*
      mutable_route();
  private:
  const ::opi_api::network::cloud::v1alpha1::Route& _internal_route(int index) const;
  ::opi_api::network::cloud::v1alpha1::Route* _internal_add_route();
  public:
  const ::opi_api::network::cloud::v1alpha1::Route& route(int index) const;
  ::opi_api::network::cloud::v1alpha1::Route* add_route();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Route >&
      route() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListRoutesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Route > route_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetRouteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetRouteRequest) */ {
 public:
  inline GetRouteRequest() : GetRouteRequest(nullptr) {}
  ~GetRouteRequest() override;
  explicit constexpr GetRouteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRouteRequest(const GetRouteRequest& from);
  GetRouteRequest(GetRouteRequest&& from) noexcept
    : GetRouteRequest() {
    *this = ::std::move(from);
  }

  inline GetRouteRequest& operator=(const GetRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRouteRequest& operator=(GetRouteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRouteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRouteRequest* internal_default_instance() {
    return reinterpret_cast<const GetRouteRequest*>(
               &_GetRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetRouteRequest& a, GetRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRouteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRouteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRouteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRouteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRouteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetRouteRequest";
  }
  protected:
  explicit GetRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetRouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateUnderlayRouteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest) */ {
 public:
  inline CreateUnderlayRouteRequest() : CreateUnderlayRouteRequest(nullptr) {}
  ~CreateUnderlayRouteRequest() override;
  explicit constexpr CreateUnderlayRouteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUnderlayRouteRequest(const CreateUnderlayRouteRequest& from);
  CreateUnderlayRouteRequest(CreateUnderlayRouteRequest&& from) noexcept
    : CreateUnderlayRouteRequest() {
    *this = ::std::move(from);
  }

  inline CreateUnderlayRouteRequest& operator=(const CreateUnderlayRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUnderlayRouteRequest& operator=(CreateUnderlayRouteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUnderlayRouteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUnderlayRouteRequest* internal_default_instance() {
    return reinterpret_cast<const CreateUnderlayRouteRequest*>(
               &_CreateUnderlayRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CreateUnderlayRouteRequest& a, CreateUnderlayRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUnderlayRouteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUnderlayRouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUnderlayRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUnderlayRouteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUnderlayRouteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateUnderlayRouteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUnderlayRouteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest";
  }
  protected:
  explicit CreateUnderlayRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kUnderlayrouteIdFieldNumber = 3,
    kUnderlayrouteFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string underlayroute_id = 3;
  void clear_underlayroute_id();
  const std::string& underlayroute_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_underlayroute_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_underlayroute_id();
  PROTOBUF_NODISCARD std::string* release_underlayroute_id();
  void set_allocated_underlayroute_id(std::string* underlayroute_id);
  private:
  const std::string& _internal_underlayroute_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_underlayroute_id(const std::string& value);
  std::string* _internal_mutable_underlayroute_id();
  public:

  // .opi_api.network.cloud.v1alpha1.UnderlayRoute underlayroute = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_underlayroute() const;
  private:
  bool _internal_has_underlayroute() const;
  public:
  void clear_underlayroute();
  const ::opi_api::network::cloud::v1alpha1::UnderlayRoute& underlayroute() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::UnderlayRoute* release_underlayroute();
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* mutable_underlayroute();
  void set_allocated_underlayroute(::opi_api::network::cloud::v1alpha1::UnderlayRoute* underlayroute);
  private:
  const ::opi_api::network::cloud::v1alpha1::UnderlayRoute& _internal_underlayroute() const;
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* _internal_mutable_underlayroute();
  public:
  void unsafe_arena_set_allocated_underlayroute(
      ::opi_api::network::cloud::v1alpha1::UnderlayRoute* underlayroute);
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* unsafe_arena_release_underlayroute();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr underlayroute_id_;
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* underlayroute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteUnderlayRouteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteUnderlayRouteRequest) */ {
 public:
  inline DeleteUnderlayRouteRequest() : DeleteUnderlayRouteRequest(nullptr) {}
  ~DeleteUnderlayRouteRequest() override;
  explicit constexpr DeleteUnderlayRouteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUnderlayRouteRequest(const DeleteUnderlayRouteRequest& from);
  DeleteUnderlayRouteRequest(DeleteUnderlayRouteRequest&& from) noexcept
    : DeleteUnderlayRouteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteUnderlayRouteRequest& operator=(const DeleteUnderlayRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUnderlayRouteRequest& operator=(DeleteUnderlayRouteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUnderlayRouteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUnderlayRouteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteUnderlayRouteRequest*>(
               &_DeleteUnderlayRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(DeleteUnderlayRouteRequest& a, DeleteUnderlayRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUnderlayRouteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUnderlayRouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteUnderlayRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteUnderlayRouteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUnderlayRouteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteUnderlayRouteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUnderlayRouteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteUnderlayRouteRequest";
  }
  protected:
  explicit DeleteUnderlayRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteUnderlayRouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateUnderlayRouteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest) */ {
 public:
  inline UpdateUnderlayRouteRequest() : UpdateUnderlayRouteRequest(nullptr) {}
  ~UpdateUnderlayRouteRequest() override;
  explicit constexpr UpdateUnderlayRouteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUnderlayRouteRequest(const UpdateUnderlayRouteRequest& from);
  UpdateUnderlayRouteRequest(UpdateUnderlayRouteRequest&& from) noexcept
    : UpdateUnderlayRouteRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUnderlayRouteRequest& operator=(const UpdateUnderlayRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUnderlayRouteRequest& operator=(UpdateUnderlayRouteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUnderlayRouteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUnderlayRouteRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUnderlayRouteRequest*>(
               &_UpdateUnderlayRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(UpdateUnderlayRouteRequest& a, UpdateUnderlayRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUnderlayRouteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUnderlayRouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUnderlayRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUnderlayRouteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUnderlayRouteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateUnderlayRouteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUnderlayRouteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest";
  }
  protected:
  explicit UpdateUnderlayRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnderlayrouteFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.UnderlayRoute underlayroute = 1;
  bool has_underlayroute() const;
  private:
  bool _internal_has_underlayroute() const;
  public:
  void clear_underlayroute();
  const ::opi_api::network::cloud::v1alpha1::UnderlayRoute& underlayroute() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::UnderlayRoute* release_underlayroute();
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* mutable_underlayroute();
  void set_allocated_underlayroute(::opi_api::network::cloud::v1alpha1::UnderlayRoute* underlayroute);
  private:
  const ::opi_api::network::cloud::v1alpha1::UnderlayRoute& _internal_underlayroute() const;
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* _internal_mutable_underlayroute();
  public:
  void unsafe_arena_set_allocated_underlayroute(
      ::opi_api::network::cloud::v1alpha1::UnderlayRoute* underlayroute);
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* unsafe_arena_release_underlayroute();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* underlayroute_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListUnderlayRoutesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest) */ {
 public:
  inline ListUnderlayRoutesRequest() : ListUnderlayRoutesRequest(nullptr) {}
  ~ListUnderlayRoutesRequest() override;
  explicit constexpr ListUnderlayRoutesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUnderlayRoutesRequest(const ListUnderlayRoutesRequest& from);
  ListUnderlayRoutesRequest(ListUnderlayRoutesRequest&& from) noexcept
    : ListUnderlayRoutesRequest() {
    *this = ::std::move(from);
  }

  inline ListUnderlayRoutesRequest& operator=(const ListUnderlayRoutesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUnderlayRoutesRequest& operator=(ListUnderlayRoutesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUnderlayRoutesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUnderlayRoutesRequest* internal_default_instance() {
    return reinterpret_cast<const ListUnderlayRoutesRequest*>(
               &_ListUnderlayRoutesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ListUnderlayRoutesRequest& a, ListUnderlayRoutesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUnderlayRoutesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUnderlayRoutesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListUnderlayRoutesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListUnderlayRoutesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUnderlayRoutesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUnderlayRoutesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUnderlayRoutesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest";
  }
  protected:
  explicit ListUnderlayRoutesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListUnderlayRoutesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse) */ {
 public:
  inline ListUnderlayRoutesResponse() : ListUnderlayRoutesResponse(nullptr) {}
  ~ListUnderlayRoutesResponse() override;
  explicit constexpr ListUnderlayRoutesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUnderlayRoutesResponse(const ListUnderlayRoutesResponse& from);
  ListUnderlayRoutesResponse(ListUnderlayRoutesResponse&& from) noexcept
    : ListUnderlayRoutesResponse() {
    *this = ::std::move(from);
  }

  inline ListUnderlayRoutesResponse& operator=(const ListUnderlayRoutesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUnderlayRoutesResponse& operator=(ListUnderlayRoutesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUnderlayRoutesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUnderlayRoutesResponse* internal_default_instance() {
    return reinterpret_cast<const ListUnderlayRoutesResponse*>(
               &_ListUnderlayRoutesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ListUnderlayRoutesResponse& a, ListUnderlayRoutesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUnderlayRoutesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUnderlayRoutesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListUnderlayRoutesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListUnderlayRoutesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUnderlayRoutesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUnderlayRoutesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUnderlayRoutesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse";
  }
  protected:
  explicit ListUnderlayRoutesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnderlayrouteFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.UnderlayRoute underlayroute = 1;
  int underlayroute_size() const;
  private:
  int _internal_underlayroute_size() const;
  public:
  void clear_underlayroute();
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* mutable_underlayroute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::UnderlayRoute >*
      mutable_underlayroute();
  private:
  const ::opi_api::network::cloud::v1alpha1::UnderlayRoute& _internal_underlayroute(int index) const;
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* _internal_add_underlayroute();
  public:
  const ::opi_api::network::cloud::v1alpha1::UnderlayRoute& underlayroute(int index) const;
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* add_underlayroute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::UnderlayRoute >&
      underlayroute() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::UnderlayRoute > underlayroute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetUnderlayRouteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetUnderlayRouteRequest) */ {
 public:
  inline GetUnderlayRouteRequest() : GetUnderlayRouteRequest(nullptr) {}
  ~GetUnderlayRouteRequest() override;
  explicit constexpr GetUnderlayRouteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUnderlayRouteRequest(const GetUnderlayRouteRequest& from);
  GetUnderlayRouteRequest(GetUnderlayRouteRequest&& from) noexcept
    : GetUnderlayRouteRequest() {
    *this = ::std::move(from);
  }

  inline GetUnderlayRouteRequest& operator=(const GetUnderlayRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUnderlayRouteRequest& operator=(GetUnderlayRouteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUnderlayRouteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUnderlayRouteRequest* internal_default_instance() {
    return reinterpret_cast<const GetUnderlayRouteRequest*>(
               &_GetUnderlayRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetUnderlayRouteRequest& a, GetUnderlayRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUnderlayRouteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUnderlayRouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUnderlayRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUnderlayRouteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUnderlayRouteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUnderlayRouteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUnderlayRouteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetUnderlayRouteRequest";
  }
  protected:
  explicit GetUnderlayRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetUnderlayRouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateBgpRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateBgpRequest) */ {
 public:
  inline CreateBgpRequest() : CreateBgpRequest(nullptr) {}
  ~CreateBgpRequest() override;
  explicit constexpr CreateBgpRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateBgpRequest(const CreateBgpRequest& from);
  CreateBgpRequest(CreateBgpRequest&& from) noexcept
    : CreateBgpRequest() {
    *this = ::std::move(from);
  }

  inline CreateBgpRequest& operator=(const CreateBgpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBgpRequest& operator=(CreateBgpRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateBgpRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateBgpRequest* internal_default_instance() {
    return reinterpret_cast<const CreateBgpRequest*>(
               &_CreateBgpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CreateBgpRequest& a, CreateBgpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateBgpRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBgpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateBgpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateBgpRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateBgpRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateBgpRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBgpRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateBgpRequest";
  }
  protected:
  explicit CreateBgpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kBgpIdFieldNumber = 3,
    kBgpFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string bgp_id = 3;
  void clear_bgp_id();
  const std::string& bgp_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bgp_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bgp_id();
  PROTOBUF_NODISCARD std::string* release_bgp_id();
  void set_allocated_bgp_id(std::string* bgp_id);
  private:
  const std::string& _internal_bgp_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bgp_id(const std::string& value);
  std::string* _internal_mutable_bgp_id();
  public:

  // .opi_api.network.cloud.v1alpha1.Bgp bgp = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_bgp() const;
  private:
  bool _internal_has_bgp() const;
  public:
  void clear_bgp();
  const ::opi_api::network::cloud::v1alpha1::Bgp& bgp() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Bgp* release_bgp();
  ::opi_api::network::cloud::v1alpha1::Bgp* mutable_bgp();
  void set_allocated_bgp(::opi_api::network::cloud::v1alpha1::Bgp* bgp);
  private:
  const ::opi_api::network::cloud::v1alpha1::Bgp& _internal_bgp() const;
  ::opi_api::network::cloud::v1alpha1::Bgp* _internal_mutable_bgp();
  public:
  void unsafe_arena_set_allocated_bgp(
      ::opi_api::network::cloud::v1alpha1::Bgp* bgp);
  ::opi_api::network::cloud::v1alpha1::Bgp* unsafe_arena_release_bgp();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateBgpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgp_id_;
  ::opi_api::network::cloud::v1alpha1::Bgp* bgp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteBgpRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteBgpRequest) */ {
 public:
  inline DeleteBgpRequest() : DeleteBgpRequest(nullptr) {}
  ~DeleteBgpRequest() override;
  explicit constexpr DeleteBgpRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteBgpRequest(const DeleteBgpRequest& from);
  DeleteBgpRequest(DeleteBgpRequest&& from) noexcept
    : DeleteBgpRequest() {
    *this = ::std::move(from);
  }

  inline DeleteBgpRequest& operator=(const DeleteBgpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBgpRequest& operator=(DeleteBgpRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteBgpRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteBgpRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteBgpRequest*>(
               &_DeleteBgpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(DeleteBgpRequest& a, DeleteBgpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBgpRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteBgpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteBgpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteBgpRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteBgpRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteBgpRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBgpRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteBgpRequest";
  }
  protected:
  explicit DeleteBgpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteBgpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateBgpRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateBgpRequest) */ {
 public:
  inline UpdateBgpRequest() : UpdateBgpRequest(nullptr) {}
  ~UpdateBgpRequest() override;
  explicit constexpr UpdateBgpRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateBgpRequest(const UpdateBgpRequest& from);
  UpdateBgpRequest(UpdateBgpRequest&& from) noexcept
    : UpdateBgpRequest() {
    *this = ::std::move(from);
  }

  inline UpdateBgpRequest& operator=(const UpdateBgpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBgpRequest& operator=(UpdateBgpRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateBgpRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateBgpRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateBgpRequest*>(
               &_UpdateBgpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(UpdateBgpRequest& a, UpdateBgpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBgpRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBgpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateBgpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateBgpRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateBgpRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateBgpRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBgpRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateBgpRequest";
  }
  protected:
  explicit UpdateBgpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBgpFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.Bgp bgp = 1;
  bool has_bgp() const;
  private:
  bool _internal_has_bgp() const;
  public:
  void clear_bgp();
  const ::opi_api::network::cloud::v1alpha1::Bgp& bgp() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Bgp* release_bgp();
  ::opi_api::network::cloud::v1alpha1::Bgp* mutable_bgp();
  void set_allocated_bgp(::opi_api::network::cloud::v1alpha1::Bgp* bgp);
  private:
  const ::opi_api::network::cloud::v1alpha1::Bgp& _internal_bgp() const;
  ::opi_api::network::cloud::v1alpha1::Bgp* _internal_mutable_bgp();
  public:
  void unsafe_arena_set_allocated_bgp(
      ::opi_api::network::cloud::v1alpha1::Bgp* bgp);
  ::opi_api::network::cloud::v1alpha1::Bgp* unsafe_arena_release_bgp();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateBgpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::Bgp* bgp_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListBgpsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListBgpsRequest) */ {
 public:
  inline ListBgpsRequest() : ListBgpsRequest(nullptr) {}
  ~ListBgpsRequest() override;
  explicit constexpr ListBgpsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBgpsRequest(const ListBgpsRequest& from);
  ListBgpsRequest(ListBgpsRequest&& from) noexcept
    : ListBgpsRequest() {
    *this = ::std::move(from);
  }

  inline ListBgpsRequest& operator=(const ListBgpsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBgpsRequest& operator=(ListBgpsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBgpsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBgpsRequest* internal_default_instance() {
    return reinterpret_cast<const ListBgpsRequest*>(
               &_ListBgpsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ListBgpsRequest& a, ListBgpsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBgpsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBgpsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBgpsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBgpsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBgpsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListBgpsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBgpsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListBgpsRequest";
  }
  protected:
  explicit ListBgpsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListBgpsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListBgpsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListBgpsResponse) */ {
 public:
  inline ListBgpsResponse() : ListBgpsResponse(nullptr) {}
  ~ListBgpsResponse() override;
  explicit constexpr ListBgpsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBgpsResponse(const ListBgpsResponse& from);
  ListBgpsResponse(ListBgpsResponse&& from) noexcept
    : ListBgpsResponse() {
    *this = ::std::move(from);
  }

  inline ListBgpsResponse& operator=(const ListBgpsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBgpsResponse& operator=(ListBgpsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBgpsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBgpsResponse* internal_default_instance() {
    return reinterpret_cast<const ListBgpsResponse*>(
               &_ListBgpsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ListBgpsResponse& a, ListBgpsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBgpsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBgpsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBgpsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBgpsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBgpsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListBgpsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBgpsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListBgpsResponse";
  }
  protected:
  explicit ListBgpsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBgpFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.Bgp bgp = 1;
  int bgp_size() const;
  private:
  int _internal_bgp_size() const;
  public:
  void clear_bgp();
  ::opi_api::network::cloud::v1alpha1::Bgp* mutable_bgp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Bgp >*
      mutable_bgp();
  private:
  const ::opi_api::network::cloud::v1alpha1::Bgp& _internal_bgp(int index) const;
  ::opi_api::network::cloud::v1alpha1::Bgp* _internal_add_bgp();
  public:
  const ::opi_api::network::cloud::v1alpha1::Bgp& bgp(int index) const;
  ::opi_api::network::cloud::v1alpha1::Bgp* add_bgp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Bgp >&
      bgp() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListBgpsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Bgp > bgp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetBgpRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetBgpRequest) */ {
 public:
  inline GetBgpRequest() : GetBgpRequest(nullptr) {}
  ~GetBgpRequest() override;
  explicit constexpr GetBgpRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBgpRequest(const GetBgpRequest& from);
  GetBgpRequest(GetBgpRequest&& from) noexcept
    : GetBgpRequest() {
    *this = ::std::move(from);
  }

  inline GetBgpRequest& operator=(const GetBgpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBgpRequest& operator=(GetBgpRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBgpRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBgpRequest* internal_default_instance() {
    return reinterpret_cast<const GetBgpRequest*>(
               &_GetBgpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GetBgpRequest& a, GetBgpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBgpRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBgpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBgpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBgpRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBgpRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBgpRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBgpRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetBgpRequest";
  }
  protected:
  explicit GetBgpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetBgpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateBGPPeerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest) */ {
 public:
  inline CreateBGPPeerRequest() : CreateBGPPeerRequest(nullptr) {}
  ~CreateBGPPeerRequest() override;
  explicit constexpr CreateBGPPeerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateBGPPeerRequest(const CreateBGPPeerRequest& from);
  CreateBGPPeerRequest(CreateBGPPeerRequest&& from) noexcept
    : CreateBGPPeerRequest() {
    *this = ::std::move(from);
  }

  inline CreateBGPPeerRequest& operator=(const CreateBGPPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBGPPeerRequest& operator=(CreateBGPPeerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateBGPPeerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateBGPPeerRequest* internal_default_instance() {
    return reinterpret_cast<const CreateBGPPeerRequest*>(
               &_CreateBGPPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CreateBGPPeerRequest& a, CreateBGPPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateBGPPeerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBGPPeerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateBGPPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateBGPPeerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateBGPPeerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateBGPPeerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBGPPeerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest";
  }
  protected:
  explicit CreateBGPPeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kBgppeerIdFieldNumber = 3,
    kBgppeerFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string bgppeer_id = 3;
  void clear_bgppeer_id();
  const std::string& bgppeer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bgppeer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bgppeer_id();
  PROTOBUF_NODISCARD std::string* release_bgppeer_id();
  void set_allocated_bgppeer_id(std::string* bgppeer_id);
  private:
  const std::string& _internal_bgppeer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bgppeer_id(const std::string& value);
  std::string* _internal_mutable_bgppeer_id();
  public:

  // .opi_api.network.cloud.v1alpha1.BGPPeer bgppeer = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_bgppeer() const;
  private:
  bool _internal_has_bgppeer() const;
  public:
  void clear_bgppeer();
  const ::opi_api::network::cloud::v1alpha1::BGPPeer& bgppeer() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::BGPPeer* release_bgppeer();
  ::opi_api::network::cloud::v1alpha1::BGPPeer* mutable_bgppeer();
  void set_allocated_bgppeer(::opi_api::network::cloud::v1alpha1::BGPPeer* bgppeer);
  private:
  const ::opi_api::network::cloud::v1alpha1::BGPPeer& _internal_bgppeer() const;
  ::opi_api::network::cloud::v1alpha1::BGPPeer* _internal_mutable_bgppeer();
  public:
  void unsafe_arena_set_allocated_bgppeer(
      ::opi_api::network::cloud::v1alpha1::BGPPeer* bgppeer);
  ::opi_api::network::cloud::v1alpha1::BGPPeer* unsafe_arena_release_bgppeer();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgppeer_id_;
  ::opi_api::network::cloud::v1alpha1::BGPPeer* bgppeer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteBGPPeerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteBGPPeerRequest) */ {
 public:
  inline DeleteBGPPeerRequest() : DeleteBGPPeerRequest(nullptr) {}
  ~DeleteBGPPeerRequest() override;
  explicit constexpr DeleteBGPPeerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteBGPPeerRequest(const DeleteBGPPeerRequest& from);
  DeleteBGPPeerRequest(DeleteBGPPeerRequest&& from) noexcept
    : DeleteBGPPeerRequest() {
    *this = ::std::move(from);
  }

  inline DeleteBGPPeerRequest& operator=(const DeleteBGPPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBGPPeerRequest& operator=(DeleteBGPPeerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteBGPPeerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteBGPPeerRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteBGPPeerRequest*>(
               &_DeleteBGPPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(DeleteBGPPeerRequest& a, DeleteBGPPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBGPPeerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteBGPPeerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteBGPPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteBGPPeerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteBGPPeerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteBGPPeerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBGPPeerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteBGPPeerRequest";
  }
  protected:
  explicit DeleteBGPPeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteBGPPeerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateBGPPeerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest) */ {
 public:
  inline UpdateBGPPeerRequest() : UpdateBGPPeerRequest(nullptr) {}
  ~UpdateBGPPeerRequest() override;
  explicit constexpr UpdateBGPPeerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateBGPPeerRequest(const UpdateBGPPeerRequest& from);
  UpdateBGPPeerRequest(UpdateBGPPeerRequest&& from) noexcept
    : UpdateBGPPeerRequest() {
    *this = ::std::move(from);
  }

  inline UpdateBGPPeerRequest& operator=(const UpdateBGPPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBGPPeerRequest& operator=(UpdateBGPPeerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateBGPPeerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateBGPPeerRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateBGPPeerRequest*>(
               &_UpdateBGPPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(UpdateBGPPeerRequest& a, UpdateBGPPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBGPPeerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBGPPeerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateBGPPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateBGPPeerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateBGPPeerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateBGPPeerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBGPPeerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest";
  }
  protected:
  explicit UpdateBGPPeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBgppeerFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.BGPPeer bgppeer = 1;
  bool has_bgppeer() const;
  private:
  bool _internal_has_bgppeer() const;
  public:
  void clear_bgppeer();
  const ::opi_api::network::cloud::v1alpha1::BGPPeer& bgppeer() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::BGPPeer* release_bgppeer();
  ::opi_api::network::cloud::v1alpha1::BGPPeer* mutable_bgppeer();
  void set_allocated_bgppeer(::opi_api::network::cloud::v1alpha1::BGPPeer* bgppeer);
  private:
  const ::opi_api::network::cloud::v1alpha1::BGPPeer& _internal_bgppeer() const;
  ::opi_api::network::cloud::v1alpha1::BGPPeer* _internal_mutable_bgppeer();
  public:
  void unsafe_arena_set_allocated_bgppeer(
      ::opi_api::network::cloud::v1alpha1::BGPPeer* bgppeer);
  ::opi_api::network::cloud::v1alpha1::BGPPeer* unsafe_arena_release_bgppeer();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::BGPPeer* bgppeer_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListBGPPeersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListBGPPeersRequest) */ {
 public:
  inline ListBGPPeersRequest() : ListBGPPeersRequest(nullptr) {}
  ~ListBGPPeersRequest() override;
  explicit constexpr ListBGPPeersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBGPPeersRequest(const ListBGPPeersRequest& from);
  ListBGPPeersRequest(ListBGPPeersRequest&& from) noexcept
    : ListBGPPeersRequest() {
    *this = ::std::move(from);
  }

  inline ListBGPPeersRequest& operator=(const ListBGPPeersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBGPPeersRequest& operator=(ListBGPPeersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBGPPeersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBGPPeersRequest* internal_default_instance() {
    return reinterpret_cast<const ListBGPPeersRequest*>(
               &_ListBGPPeersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ListBGPPeersRequest& a, ListBGPPeersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBGPPeersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBGPPeersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBGPPeersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBGPPeersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBGPPeersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListBGPPeersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBGPPeersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListBGPPeersRequest";
  }
  protected:
  explicit ListBGPPeersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListBGPPeersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListBGPPeersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListBGPPeersResponse) */ {
 public:
  inline ListBGPPeersResponse() : ListBGPPeersResponse(nullptr) {}
  ~ListBGPPeersResponse() override;
  explicit constexpr ListBGPPeersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBGPPeersResponse(const ListBGPPeersResponse& from);
  ListBGPPeersResponse(ListBGPPeersResponse&& from) noexcept
    : ListBGPPeersResponse() {
    *this = ::std::move(from);
  }

  inline ListBGPPeersResponse& operator=(const ListBGPPeersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBGPPeersResponse& operator=(ListBGPPeersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBGPPeersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBGPPeersResponse* internal_default_instance() {
    return reinterpret_cast<const ListBGPPeersResponse*>(
               &_ListBGPPeersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ListBGPPeersResponse& a, ListBGPPeersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBGPPeersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBGPPeersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBGPPeersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBGPPeersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBGPPeersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListBGPPeersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBGPPeersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListBGPPeersResponse";
  }
  protected:
  explicit ListBGPPeersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBgppeerFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.BGPPeer bgppeer = 1;
  int bgppeer_size() const;
  private:
  int _internal_bgppeer_size() const;
  public:
  void clear_bgppeer();
  ::opi_api::network::cloud::v1alpha1::BGPPeer* mutable_bgppeer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::BGPPeer >*
      mutable_bgppeer();
  private:
  const ::opi_api::network::cloud::v1alpha1::BGPPeer& _internal_bgppeer(int index) const;
  ::opi_api::network::cloud::v1alpha1::BGPPeer* _internal_add_bgppeer();
  public:
  const ::opi_api::network::cloud::v1alpha1::BGPPeer& bgppeer(int index) const;
  ::opi_api::network::cloud::v1alpha1::BGPPeer* add_bgppeer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::BGPPeer >&
      bgppeer() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListBGPPeersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::BGPPeer > bgppeer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetBGPPeerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetBGPPeerRequest) */ {
 public:
  inline GetBGPPeerRequest() : GetBGPPeerRequest(nullptr) {}
  ~GetBGPPeerRequest() override;
  explicit constexpr GetBGPPeerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBGPPeerRequest(const GetBGPPeerRequest& from);
  GetBGPPeerRequest(GetBGPPeerRequest&& from) noexcept
    : GetBGPPeerRequest() {
    *this = ::std::move(from);
  }

  inline GetBGPPeerRequest& operator=(const GetBGPPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBGPPeerRequest& operator=(GetBGPPeerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBGPPeerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBGPPeerRequest* internal_default_instance() {
    return reinterpret_cast<const GetBGPPeerRequest*>(
               &_GetBGPPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GetBGPPeerRequest& a, GetBGPPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBGPPeerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBGPPeerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBGPPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBGPPeerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBGPPeerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBGPPeerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBGPPeerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetBGPPeerRequest";
  }
  protected:
  explicit GetBGPPeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetBGPPeerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateBGPPeerAfRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest) */ {
 public:
  inline CreateBGPPeerAfRequest() : CreateBGPPeerAfRequest(nullptr) {}
  ~CreateBGPPeerAfRequest() override;
  explicit constexpr CreateBGPPeerAfRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateBGPPeerAfRequest(const CreateBGPPeerAfRequest& from);
  CreateBGPPeerAfRequest(CreateBGPPeerAfRequest&& from) noexcept
    : CreateBGPPeerAfRequest() {
    *this = ::std::move(from);
  }

  inline CreateBGPPeerAfRequest& operator=(const CreateBGPPeerAfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBGPPeerAfRequest& operator=(CreateBGPPeerAfRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateBGPPeerAfRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateBGPPeerAfRequest* internal_default_instance() {
    return reinterpret_cast<const CreateBGPPeerAfRequest*>(
               &_CreateBGPPeerAfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CreateBGPPeerAfRequest& a, CreateBGPPeerAfRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateBGPPeerAfRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBGPPeerAfRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateBGPPeerAfRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateBGPPeerAfRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateBGPPeerAfRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateBGPPeerAfRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBGPPeerAfRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest";
  }
  protected:
  explicit CreateBGPPeerAfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kBgppeerafIdFieldNumber = 3,
    kBgppeerafFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string bgppeeraf_id = 3;
  void clear_bgppeeraf_id();
  const std::string& bgppeeraf_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bgppeeraf_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bgppeeraf_id();
  PROTOBUF_NODISCARD std::string* release_bgppeeraf_id();
  void set_allocated_bgppeeraf_id(std::string* bgppeeraf_id);
  private:
  const std::string& _internal_bgppeeraf_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bgppeeraf_id(const std::string& value);
  std::string* _internal_mutable_bgppeeraf_id();
  public:

  // .opi_api.network.cloud.v1alpha1.BGPPeerAf bgppeeraf = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_bgppeeraf() const;
  private:
  bool _internal_has_bgppeeraf() const;
  public:
  void clear_bgppeeraf();
  const ::opi_api::network::cloud::v1alpha1::BGPPeerAf& bgppeeraf() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::BGPPeerAf* release_bgppeeraf();
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* mutable_bgppeeraf();
  void set_allocated_bgppeeraf(::opi_api::network::cloud::v1alpha1::BGPPeerAf* bgppeeraf);
  private:
  const ::opi_api::network::cloud::v1alpha1::BGPPeerAf& _internal_bgppeeraf() const;
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* _internal_mutable_bgppeeraf();
  public:
  void unsafe_arena_set_allocated_bgppeeraf(
      ::opi_api::network::cloud::v1alpha1::BGPPeerAf* bgppeeraf);
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* unsafe_arena_release_bgppeeraf();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgppeeraf_id_;
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* bgppeeraf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteBGPPeerAfRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteBGPPeerAfRequest) */ {
 public:
  inline DeleteBGPPeerAfRequest() : DeleteBGPPeerAfRequest(nullptr) {}
  ~DeleteBGPPeerAfRequest() override;
  explicit constexpr DeleteBGPPeerAfRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteBGPPeerAfRequest(const DeleteBGPPeerAfRequest& from);
  DeleteBGPPeerAfRequest(DeleteBGPPeerAfRequest&& from) noexcept
    : DeleteBGPPeerAfRequest() {
    *this = ::std::move(from);
  }

  inline DeleteBGPPeerAfRequest& operator=(const DeleteBGPPeerAfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBGPPeerAfRequest& operator=(DeleteBGPPeerAfRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteBGPPeerAfRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteBGPPeerAfRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteBGPPeerAfRequest*>(
               &_DeleteBGPPeerAfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(DeleteBGPPeerAfRequest& a, DeleteBGPPeerAfRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBGPPeerAfRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteBGPPeerAfRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteBGPPeerAfRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteBGPPeerAfRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteBGPPeerAfRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteBGPPeerAfRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBGPPeerAfRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteBGPPeerAfRequest";
  }
  protected:
  explicit DeleteBGPPeerAfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteBGPPeerAfRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateBGPPeerAfRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest) */ {
 public:
  inline UpdateBGPPeerAfRequest() : UpdateBGPPeerAfRequest(nullptr) {}
  ~UpdateBGPPeerAfRequest() override;
  explicit constexpr UpdateBGPPeerAfRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateBGPPeerAfRequest(const UpdateBGPPeerAfRequest& from);
  UpdateBGPPeerAfRequest(UpdateBGPPeerAfRequest&& from) noexcept
    : UpdateBGPPeerAfRequest() {
    *this = ::std::move(from);
  }

  inline UpdateBGPPeerAfRequest& operator=(const UpdateBGPPeerAfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBGPPeerAfRequest& operator=(UpdateBGPPeerAfRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateBGPPeerAfRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateBGPPeerAfRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateBGPPeerAfRequest*>(
               &_UpdateBGPPeerAfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(UpdateBGPPeerAfRequest& a, UpdateBGPPeerAfRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBGPPeerAfRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBGPPeerAfRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateBGPPeerAfRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateBGPPeerAfRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateBGPPeerAfRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateBGPPeerAfRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBGPPeerAfRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest";
  }
  protected:
  explicit UpdateBGPPeerAfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBgppeerafFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.BGPPeerAf bgppeeraf = 1;
  bool has_bgppeeraf() const;
  private:
  bool _internal_has_bgppeeraf() const;
  public:
  void clear_bgppeeraf();
  const ::opi_api::network::cloud::v1alpha1::BGPPeerAf& bgppeeraf() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::BGPPeerAf* release_bgppeeraf();
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* mutable_bgppeeraf();
  void set_allocated_bgppeeraf(::opi_api::network::cloud::v1alpha1::BGPPeerAf* bgppeeraf);
  private:
  const ::opi_api::network::cloud::v1alpha1::BGPPeerAf& _internal_bgppeeraf() const;
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* _internal_mutable_bgppeeraf();
  public:
  void unsafe_arena_set_allocated_bgppeeraf(
      ::opi_api::network::cloud::v1alpha1::BGPPeerAf* bgppeeraf);
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* unsafe_arena_release_bgppeeraf();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* bgppeeraf_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListBGPPeerAfsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest) */ {
 public:
  inline ListBGPPeerAfsRequest() : ListBGPPeerAfsRequest(nullptr) {}
  ~ListBGPPeerAfsRequest() override;
  explicit constexpr ListBGPPeerAfsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBGPPeerAfsRequest(const ListBGPPeerAfsRequest& from);
  ListBGPPeerAfsRequest(ListBGPPeerAfsRequest&& from) noexcept
    : ListBGPPeerAfsRequest() {
    *this = ::std::move(from);
  }

  inline ListBGPPeerAfsRequest& operator=(const ListBGPPeerAfsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBGPPeerAfsRequest& operator=(ListBGPPeerAfsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBGPPeerAfsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBGPPeerAfsRequest* internal_default_instance() {
    return reinterpret_cast<const ListBGPPeerAfsRequest*>(
               &_ListBGPPeerAfsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ListBGPPeerAfsRequest& a, ListBGPPeerAfsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBGPPeerAfsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBGPPeerAfsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBGPPeerAfsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBGPPeerAfsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBGPPeerAfsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListBGPPeerAfsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBGPPeerAfsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest";
  }
  protected:
  explicit ListBGPPeerAfsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListBGPPeerAfsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse) */ {
 public:
  inline ListBGPPeerAfsResponse() : ListBGPPeerAfsResponse(nullptr) {}
  ~ListBGPPeerAfsResponse() override;
  explicit constexpr ListBGPPeerAfsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListBGPPeerAfsResponse(const ListBGPPeerAfsResponse& from);
  ListBGPPeerAfsResponse(ListBGPPeerAfsResponse&& from) noexcept
    : ListBGPPeerAfsResponse() {
    *this = ::std::move(from);
  }

  inline ListBGPPeerAfsResponse& operator=(const ListBGPPeerAfsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBGPPeerAfsResponse& operator=(ListBGPPeerAfsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListBGPPeerAfsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListBGPPeerAfsResponse* internal_default_instance() {
    return reinterpret_cast<const ListBGPPeerAfsResponse*>(
               &_ListBGPPeerAfsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ListBGPPeerAfsResponse& a, ListBGPPeerAfsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBGPPeerAfsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBGPPeerAfsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListBGPPeerAfsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListBGPPeerAfsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListBGPPeerAfsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListBGPPeerAfsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBGPPeerAfsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse";
  }
  protected:
  explicit ListBGPPeerAfsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBgppeerafFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.BGPPeerAf bgppeeraf = 1;
  int bgppeeraf_size() const;
  private:
  int _internal_bgppeeraf_size() const;
  public:
  void clear_bgppeeraf();
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* mutable_bgppeeraf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::BGPPeerAf >*
      mutable_bgppeeraf();
  private:
  const ::opi_api::network::cloud::v1alpha1::BGPPeerAf& _internal_bgppeeraf(int index) const;
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* _internal_add_bgppeeraf();
  public:
  const ::opi_api::network::cloud::v1alpha1::BGPPeerAf& bgppeeraf(int index) const;
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* add_bgppeeraf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::BGPPeerAf >&
      bgppeeraf() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::BGPPeerAf > bgppeeraf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetBGPPeerAfRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetBGPPeerAfRequest) */ {
 public:
  inline GetBGPPeerAfRequest() : GetBGPPeerAfRequest(nullptr) {}
  ~GetBGPPeerAfRequest() override;
  explicit constexpr GetBGPPeerAfRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBGPPeerAfRequest(const GetBGPPeerAfRequest& from);
  GetBGPPeerAfRequest(GetBGPPeerAfRequest&& from) noexcept
    : GetBGPPeerAfRequest() {
    *this = ::std::move(from);
  }

  inline GetBGPPeerAfRequest& operator=(const GetBGPPeerAfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBGPPeerAfRequest& operator=(GetBGPPeerAfRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBGPPeerAfRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBGPPeerAfRequest* internal_default_instance() {
    return reinterpret_cast<const GetBGPPeerAfRequest*>(
               &_GetBGPPeerAfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GetBGPPeerAfRequest& a, GetBGPPeerAfRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBGPPeerAfRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBGPPeerAfRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBGPPeerAfRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBGPPeerAfRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBGPPeerAfRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetBGPPeerAfRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBGPPeerAfRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetBGPPeerAfRequest";
  }
  protected:
  explicit GetBGPPeerAfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetBGPPeerAfRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateMappingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateMappingRequest) */ {
 public:
  inline CreateMappingRequest() : CreateMappingRequest(nullptr) {}
  ~CreateMappingRequest() override;
  explicit constexpr CreateMappingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateMappingRequest(const CreateMappingRequest& from);
  CreateMappingRequest(CreateMappingRequest&& from) noexcept
    : CreateMappingRequest() {
    *this = ::std::move(from);
  }

  inline CreateMappingRequest& operator=(const CreateMappingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMappingRequest& operator=(CreateMappingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateMappingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateMappingRequest* internal_default_instance() {
    return reinterpret_cast<const CreateMappingRequest*>(
               &_CreateMappingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CreateMappingRequest& a, CreateMappingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMappingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateMappingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateMappingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateMappingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateMappingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateMappingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMappingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateMappingRequest";
  }
  protected:
  explicit CreateMappingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kMappingIdFieldNumber = 3,
    kMappingFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string mapping_id = 3;
  void clear_mapping_id();
  const std::string& mapping_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapping_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapping_id();
  PROTOBUF_NODISCARD std::string* release_mapping_id();
  void set_allocated_mapping_id(std::string* mapping_id);
  private:
  const std::string& _internal_mapping_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapping_id(const std::string& value);
  std::string* _internal_mutable_mapping_id();
  public:

  // .opi_api.network.cloud.v1alpha1.Mapping mapping = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_mapping() const;
  private:
  bool _internal_has_mapping() const;
  public:
  void clear_mapping();
  const ::opi_api::network::cloud::v1alpha1::Mapping& mapping() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Mapping* release_mapping();
  ::opi_api::network::cloud::v1alpha1::Mapping* mutable_mapping();
  void set_allocated_mapping(::opi_api::network::cloud::v1alpha1::Mapping* mapping);
  private:
  const ::opi_api::network::cloud::v1alpha1::Mapping& _internal_mapping() const;
  ::opi_api::network::cloud::v1alpha1::Mapping* _internal_mutable_mapping();
  public:
  void unsafe_arena_set_allocated_mapping(
      ::opi_api::network::cloud::v1alpha1::Mapping* mapping);
  ::opi_api::network::cloud::v1alpha1::Mapping* unsafe_arena_release_mapping();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateMappingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapping_id_;
  ::opi_api::network::cloud::v1alpha1::Mapping* mapping_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteMappingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteMappingRequest) */ {
 public:
  inline DeleteMappingRequest() : DeleteMappingRequest(nullptr) {}
  ~DeleteMappingRequest() override;
  explicit constexpr DeleteMappingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteMappingRequest(const DeleteMappingRequest& from);
  DeleteMappingRequest(DeleteMappingRequest&& from) noexcept
    : DeleteMappingRequest() {
    *this = ::std::move(from);
  }

  inline DeleteMappingRequest& operator=(const DeleteMappingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMappingRequest& operator=(DeleteMappingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteMappingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMappingRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteMappingRequest*>(
               &_DeleteMappingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(DeleteMappingRequest& a, DeleteMappingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMappingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMappingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteMappingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteMappingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteMappingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteMappingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMappingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteMappingRequest";
  }
  protected:
  explicit DeleteMappingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteMappingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateMappingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateMappingRequest) */ {
 public:
  inline UpdateMappingRequest() : UpdateMappingRequest(nullptr) {}
  ~UpdateMappingRequest() override;
  explicit constexpr UpdateMappingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateMappingRequest(const UpdateMappingRequest& from);
  UpdateMappingRequest(UpdateMappingRequest&& from) noexcept
    : UpdateMappingRequest() {
    *this = ::std::move(from);
  }

  inline UpdateMappingRequest& operator=(const UpdateMappingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMappingRequest& operator=(UpdateMappingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateMappingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateMappingRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateMappingRequest*>(
               &_UpdateMappingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(UpdateMappingRequest& a, UpdateMappingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMappingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateMappingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateMappingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateMappingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateMappingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateMappingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMappingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateMappingRequest";
  }
  protected:
  explicit UpdateMappingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMappingFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.Mapping mapping = 1;
  bool has_mapping() const;
  private:
  bool _internal_has_mapping() const;
  public:
  void clear_mapping();
  const ::opi_api::network::cloud::v1alpha1::Mapping& mapping() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Mapping* release_mapping();
  ::opi_api::network::cloud::v1alpha1::Mapping* mutable_mapping();
  void set_allocated_mapping(::opi_api::network::cloud::v1alpha1::Mapping* mapping);
  private:
  const ::opi_api::network::cloud::v1alpha1::Mapping& _internal_mapping() const;
  ::opi_api::network::cloud::v1alpha1::Mapping* _internal_mutable_mapping();
  public:
  void unsafe_arena_set_allocated_mapping(
      ::opi_api::network::cloud::v1alpha1::Mapping* mapping);
  ::opi_api::network::cloud::v1alpha1::Mapping* unsafe_arena_release_mapping();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateMappingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::Mapping* mapping_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListMappingsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListMappingsRequest) */ {
 public:
  inline ListMappingsRequest() : ListMappingsRequest(nullptr) {}
  ~ListMappingsRequest() override;
  explicit constexpr ListMappingsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMappingsRequest(const ListMappingsRequest& from);
  ListMappingsRequest(ListMappingsRequest&& from) noexcept
    : ListMappingsRequest() {
    *this = ::std::move(from);
  }

  inline ListMappingsRequest& operator=(const ListMappingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMappingsRequest& operator=(ListMappingsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListMappingsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMappingsRequest* internal_default_instance() {
    return reinterpret_cast<const ListMappingsRequest*>(
               &_ListMappingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ListMappingsRequest& a, ListMappingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMappingsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMappingsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListMappingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListMappingsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListMappingsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListMappingsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMappingsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListMappingsRequest";
  }
  protected:
  explicit ListMappingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListMappingsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListMappingsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListMappingsResponse) */ {
 public:
  inline ListMappingsResponse() : ListMappingsResponse(nullptr) {}
  ~ListMappingsResponse() override;
  explicit constexpr ListMappingsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMappingsResponse(const ListMappingsResponse& from);
  ListMappingsResponse(ListMappingsResponse&& from) noexcept
    : ListMappingsResponse() {
    *this = ::std::move(from);
  }

  inline ListMappingsResponse& operator=(const ListMappingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMappingsResponse& operator=(ListMappingsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListMappingsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMappingsResponse* internal_default_instance() {
    return reinterpret_cast<const ListMappingsResponse*>(
               &_ListMappingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ListMappingsResponse& a, ListMappingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMappingsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMappingsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListMappingsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListMappingsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListMappingsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListMappingsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMappingsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListMappingsResponse";
  }
  protected:
  explicit ListMappingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMappingFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.Mapping mapping = 1;
  int mapping_size() const;
  private:
  int _internal_mapping_size() const;
  public:
  void clear_mapping();
  ::opi_api::network::cloud::v1alpha1::Mapping* mutable_mapping(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Mapping >*
      mutable_mapping();
  private:
  const ::opi_api::network::cloud::v1alpha1::Mapping& _internal_mapping(int index) const;
  ::opi_api::network::cloud::v1alpha1::Mapping* _internal_add_mapping();
  public:
  const ::opi_api::network::cloud::v1alpha1::Mapping& mapping(int index) const;
  ::opi_api::network::cloud::v1alpha1::Mapping* add_mapping();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Mapping >&
      mapping() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListMappingsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Mapping > mapping_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetMappingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetMappingRequest) */ {
 public:
  inline GetMappingRequest() : GetMappingRequest(nullptr) {}
  ~GetMappingRequest() override;
  explicit constexpr GetMappingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMappingRequest(const GetMappingRequest& from);
  GetMappingRequest(GetMappingRequest&& from) noexcept
    : GetMappingRequest() {
    *this = ::std::move(from);
  }

  inline GetMappingRequest& operator=(const GetMappingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMappingRequest& operator=(GetMappingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMappingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMappingRequest* internal_default_instance() {
    return reinterpret_cast<const GetMappingRequest*>(
               &_GetMappingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetMappingRequest& a, GetMappingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMappingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMappingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMappingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMappingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMappingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMappingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMappingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetMappingRequest";
  }
  protected:
  explicit GetMappingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetMappingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateNextHopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateNextHopRequest) */ {
 public:
  inline CreateNextHopRequest() : CreateNextHopRequest(nullptr) {}
  ~CreateNextHopRequest() override;
  explicit constexpr CreateNextHopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNextHopRequest(const CreateNextHopRequest& from);
  CreateNextHopRequest(CreateNextHopRequest&& from) noexcept
    : CreateNextHopRequest() {
    *this = ::std::move(from);
  }

  inline CreateNextHopRequest& operator=(const CreateNextHopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNextHopRequest& operator=(CreateNextHopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNextHopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNextHopRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNextHopRequest*>(
               &_CreateNextHopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CreateNextHopRequest& a, CreateNextHopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNextHopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNextHopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNextHopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNextHopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNextHopRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNextHopRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNextHopRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateNextHopRequest";
  }
  protected:
  explicit CreateNextHopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kNexthopIdFieldNumber = 3,
    kNexthopFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string nexthop_id = 3;
  void clear_nexthop_id();
  const std::string& nexthop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nexthop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nexthop_id();
  PROTOBUF_NODISCARD std::string* release_nexthop_id();
  void set_allocated_nexthop_id(std::string* nexthop_id);
  private:
  const std::string& _internal_nexthop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nexthop_id(const std::string& value);
  std::string* _internal_mutable_nexthop_id();
  public:

  // .opi_api.network.cloud.v1alpha1.NextHop nexthop = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_nexthop() const;
  private:
  bool _internal_has_nexthop() const;
  public:
  void clear_nexthop();
  const ::opi_api::network::cloud::v1alpha1::NextHop& nexthop() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::NextHop* release_nexthop();
  ::opi_api::network::cloud::v1alpha1::NextHop* mutable_nexthop();
  void set_allocated_nexthop(::opi_api::network::cloud::v1alpha1::NextHop* nexthop);
  private:
  const ::opi_api::network::cloud::v1alpha1::NextHop& _internal_nexthop() const;
  ::opi_api::network::cloud::v1alpha1::NextHop* _internal_mutable_nexthop();
  public:
  void unsafe_arena_set_allocated_nexthop(
      ::opi_api::network::cloud::v1alpha1::NextHop* nexthop);
  ::opi_api::network::cloud::v1alpha1::NextHop* unsafe_arena_release_nexthop();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateNextHopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nexthop_id_;
  ::opi_api::network::cloud::v1alpha1::NextHop* nexthop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteNextHopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteNextHopRequest) */ {
 public:
  inline DeleteNextHopRequest() : DeleteNextHopRequest(nullptr) {}
  ~DeleteNextHopRequest() override;
  explicit constexpr DeleteNextHopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNextHopRequest(const DeleteNextHopRequest& from);
  DeleteNextHopRequest(DeleteNextHopRequest&& from) noexcept
    : DeleteNextHopRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNextHopRequest& operator=(const DeleteNextHopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNextHopRequest& operator=(DeleteNextHopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNextHopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNextHopRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNextHopRequest*>(
               &_DeleteNextHopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(DeleteNextHopRequest& a, DeleteNextHopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNextHopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNextHopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNextHopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteNextHopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNextHopRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteNextHopRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNextHopRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteNextHopRequest";
  }
  protected:
  explicit DeleteNextHopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteNextHopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateNextHopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateNextHopRequest) */ {
 public:
  inline UpdateNextHopRequest() : UpdateNextHopRequest(nullptr) {}
  ~UpdateNextHopRequest() override;
  explicit constexpr UpdateNextHopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNextHopRequest(const UpdateNextHopRequest& from);
  UpdateNextHopRequest(UpdateNextHopRequest&& from) noexcept
    : UpdateNextHopRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNextHopRequest& operator=(const UpdateNextHopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNextHopRequest& operator=(UpdateNextHopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNextHopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNextHopRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNextHopRequest*>(
               &_UpdateNextHopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(UpdateNextHopRequest& a, UpdateNextHopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNextHopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNextHopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNextHopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNextHopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNextHopRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateNextHopRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNextHopRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateNextHopRequest";
  }
  protected:
  explicit UpdateNextHopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNexthopFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.NextHop nexthop = 1;
  bool has_nexthop() const;
  private:
  bool _internal_has_nexthop() const;
  public:
  void clear_nexthop();
  const ::opi_api::network::cloud::v1alpha1::NextHop& nexthop() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::NextHop* release_nexthop();
  ::opi_api::network::cloud::v1alpha1::NextHop* mutable_nexthop();
  void set_allocated_nexthop(::opi_api::network::cloud::v1alpha1::NextHop* nexthop);
  private:
  const ::opi_api::network::cloud::v1alpha1::NextHop& _internal_nexthop() const;
  ::opi_api::network::cloud::v1alpha1::NextHop* _internal_mutable_nexthop();
  public:
  void unsafe_arena_set_allocated_nexthop(
      ::opi_api::network::cloud::v1alpha1::NextHop* nexthop);
  ::opi_api::network::cloud::v1alpha1::NextHop* unsafe_arena_release_nexthop();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateNextHopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::NextHop* nexthop_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListNextHopsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListNextHopsRequest) */ {
 public:
  inline ListNextHopsRequest() : ListNextHopsRequest(nullptr) {}
  ~ListNextHopsRequest() override;
  explicit constexpr ListNextHopsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNextHopsRequest(const ListNextHopsRequest& from);
  ListNextHopsRequest(ListNextHopsRequest&& from) noexcept
    : ListNextHopsRequest() {
    *this = ::std::move(from);
  }

  inline ListNextHopsRequest& operator=(const ListNextHopsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNextHopsRequest& operator=(ListNextHopsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNextHopsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNextHopsRequest* internal_default_instance() {
    return reinterpret_cast<const ListNextHopsRequest*>(
               &_ListNextHopsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(ListNextHopsRequest& a, ListNextHopsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNextHopsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNextHopsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNextHopsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNextHopsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNextHopsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNextHopsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNextHopsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListNextHopsRequest";
  }
  protected:
  explicit ListNextHopsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListNextHopsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListNextHopsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListNextHopsResponse) */ {
 public:
  inline ListNextHopsResponse() : ListNextHopsResponse(nullptr) {}
  ~ListNextHopsResponse() override;
  explicit constexpr ListNextHopsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNextHopsResponse(const ListNextHopsResponse& from);
  ListNextHopsResponse(ListNextHopsResponse&& from) noexcept
    : ListNextHopsResponse() {
    *this = ::std::move(from);
  }

  inline ListNextHopsResponse& operator=(const ListNextHopsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNextHopsResponse& operator=(ListNextHopsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNextHopsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNextHopsResponse* internal_default_instance() {
    return reinterpret_cast<const ListNextHopsResponse*>(
               &_ListNextHopsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(ListNextHopsResponse& a, ListNextHopsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNextHopsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNextHopsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNextHopsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNextHopsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNextHopsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNextHopsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNextHopsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListNextHopsResponse";
  }
  protected:
  explicit ListNextHopsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNexthopFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.NextHop nexthop = 1;
  int nexthop_size() const;
  private:
  int _internal_nexthop_size() const;
  public:
  void clear_nexthop();
  ::opi_api::network::cloud::v1alpha1::NextHop* mutable_nexthop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHop >*
      mutable_nexthop();
  private:
  const ::opi_api::network::cloud::v1alpha1::NextHop& _internal_nexthop(int index) const;
  ::opi_api::network::cloud::v1alpha1::NextHop* _internal_add_nexthop();
  public:
  const ::opi_api::network::cloud::v1alpha1::NextHop& nexthop(int index) const;
  ::opi_api::network::cloud::v1alpha1::NextHop* add_nexthop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHop >&
      nexthop() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListNextHopsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHop > nexthop_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetNextHopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetNextHopRequest) */ {
 public:
  inline GetNextHopRequest() : GetNextHopRequest(nullptr) {}
  ~GetNextHopRequest() override;
  explicit constexpr GetNextHopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNextHopRequest(const GetNextHopRequest& from);
  GetNextHopRequest(GetNextHopRequest&& from) noexcept
    : GetNextHopRequest() {
    *this = ::std::move(from);
  }

  inline GetNextHopRequest& operator=(const GetNextHopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNextHopRequest& operator=(GetNextHopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNextHopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNextHopRequest* internal_default_instance() {
    return reinterpret_cast<const GetNextHopRequest*>(
               &_GetNextHopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(GetNextHopRequest& a, GetNextHopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNextHopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNextHopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNextHopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNextHopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNextHopRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNextHopRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNextHopRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetNextHopRequest";
  }
  protected:
  explicit GetNextHopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetNextHopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateNextHopGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest) */ {
 public:
  inline CreateNextHopGroupRequest() : CreateNextHopGroupRequest(nullptr) {}
  ~CreateNextHopGroupRequest() override;
  explicit constexpr CreateNextHopGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNextHopGroupRequest(const CreateNextHopGroupRequest& from);
  CreateNextHopGroupRequest(CreateNextHopGroupRequest&& from) noexcept
    : CreateNextHopGroupRequest() {
    *this = ::std::move(from);
  }

  inline CreateNextHopGroupRequest& operator=(const CreateNextHopGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNextHopGroupRequest& operator=(CreateNextHopGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNextHopGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNextHopGroupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNextHopGroupRequest*>(
               &_CreateNextHopGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CreateNextHopGroupRequest& a, CreateNextHopGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNextHopGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNextHopGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNextHopGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNextHopGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNextHopGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNextHopGroupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNextHopGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest";
  }
  protected:
  explicit CreateNextHopGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kNexthopgroupIdFieldNumber = 3,
    kNexthopgroupFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string nexthopgroup_id = 3;
  void clear_nexthopgroup_id();
  const std::string& nexthopgroup_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nexthopgroup_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nexthopgroup_id();
  PROTOBUF_NODISCARD std::string* release_nexthopgroup_id();
  void set_allocated_nexthopgroup_id(std::string* nexthopgroup_id);
  private:
  const std::string& _internal_nexthopgroup_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nexthopgroup_id(const std::string& value);
  std::string* _internal_mutable_nexthopgroup_id();
  public:

  // .opi_api.network.cloud.v1alpha1.NextHopGroup nexthopgroup = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_nexthopgroup() const;
  private:
  bool _internal_has_nexthopgroup() const;
  public:
  void clear_nexthopgroup();
  const ::opi_api::network::cloud::v1alpha1::NextHopGroup& nexthopgroup() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::NextHopGroup* release_nexthopgroup();
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* mutable_nexthopgroup();
  void set_allocated_nexthopgroup(::opi_api::network::cloud::v1alpha1::NextHopGroup* nexthopgroup);
  private:
  const ::opi_api::network::cloud::v1alpha1::NextHopGroup& _internal_nexthopgroup() const;
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* _internal_mutable_nexthopgroup();
  public:
  void unsafe_arena_set_allocated_nexthopgroup(
      ::opi_api::network::cloud::v1alpha1::NextHopGroup* nexthopgroup);
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* unsafe_arena_release_nexthopgroup();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nexthopgroup_id_;
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* nexthopgroup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteNextHopGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteNextHopGroupRequest) */ {
 public:
  inline DeleteNextHopGroupRequest() : DeleteNextHopGroupRequest(nullptr) {}
  ~DeleteNextHopGroupRequest() override;
  explicit constexpr DeleteNextHopGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNextHopGroupRequest(const DeleteNextHopGroupRequest& from);
  DeleteNextHopGroupRequest(DeleteNextHopGroupRequest&& from) noexcept
    : DeleteNextHopGroupRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNextHopGroupRequest& operator=(const DeleteNextHopGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNextHopGroupRequest& operator=(DeleteNextHopGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNextHopGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNextHopGroupRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNextHopGroupRequest*>(
               &_DeleteNextHopGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(DeleteNextHopGroupRequest& a, DeleteNextHopGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNextHopGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNextHopGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNextHopGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteNextHopGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNextHopGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteNextHopGroupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNextHopGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteNextHopGroupRequest";
  }
  protected:
  explicit DeleteNextHopGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteNextHopGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateNextHopGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest) */ {
 public:
  inline UpdateNextHopGroupRequest() : UpdateNextHopGroupRequest(nullptr) {}
  ~UpdateNextHopGroupRequest() override;
  explicit constexpr UpdateNextHopGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNextHopGroupRequest(const UpdateNextHopGroupRequest& from);
  UpdateNextHopGroupRequest(UpdateNextHopGroupRequest&& from) noexcept
    : UpdateNextHopGroupRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNextHopGroupRequest& operator=(const UpdateNextHopGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNextHopGroupRequest& operator=(UpdateNextHopGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNextHopGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNextHopGroupRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNextHopGroupRequest*>(
               &_UpdateNextHopGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(UpdateNextHopGroupRequest& a, UpdateNextHopGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNextHopGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNextHopGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNextHopGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNextHopGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNextHopGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateNextHopGroupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNextHopGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest";
  }
  protected:
  explicit UpdateNextHopGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNexthopgroupFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.NextHopGroup nexthopgroup = 1;
  bool has_nexthopgroup() const;
  private:
  bool _internal_has_nexthopgroup() const;
  public:
  void clear_nexthopgroup();
  const ::opi_api::network::cloud::v1alpha1::NextHopGroup& nexthopgroup() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::NextHopGroup* release_nexthopgroup();
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* mutable_nexthopgroup();
  void set_allocated_nexthopgroup(::opi_api::network::cloud::v1alpha1::NextHopGroup* nexthopgroup);
  private:
  const ::opi_api::network::cloud::v1alpha1::NextHopGroup& _internal_nexthopgroup() const;
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* _internal_mutable_nexthopgroup();
  public:
  void unsafe_arena_set_allocated_nexthopgroup(
      ::opi_api::network::cloud::v1alpha1::NextHopGroup* nexthopgroup);
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* unsafe_arena_release_nexthopgroup();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* nexthopgroup_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListNextHopGroupsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest) */ {
 public:
  inline ListNextHopGroupsRequest() : ListNextHopGroupsRequest(nullptr) {}
  ~ListNextHopGroupsRequest() override;
  explicit constexpr ListNextHopGroupsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNextHopGroupsRequest(const ListNextHopGroupsRequest& from);
  ListNextHopGroupsRequest(ListNextHopGroupsRequest&& from) noexcept
    : ListNextHopGroupsRequest() {
    *this = ::std::move(from);
  }

  inline ListNextHopGroupsRequest& operator=(const ListNextHopGroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNextHopGroupsRequest& operator=(ListNextHopGroupsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNextHopGroupsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNextHopGroupsRequest* internal_default_instance() {
    return reinterpret_cast<const ListNextHopGroupsRequest*>(
               &_ListNextHopGroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(ListNextHopGroupsRequest& a, ListNextHopGroupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNextHopGroupsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNextHopGroupsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNextHopGroupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNextHopGroupsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNextHopGroupsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNextHopGroupsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNextHopGroupsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest";
  }
  protected:
  explicit ListNextHopGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListNextHopGroupsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse) */ {
 public:
  inline ListNextHopGroupsResponse() : ListNextHopGroupsResponse(nullptr) {}
  ~ListNextHopGroupsResponse() override;
  explicit constexpr ListNextHopGroupsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNextHopGroupsResponse(const ListNextHopGroupsResponse& from);
  ListNextHopGroupsResponse(ListNextHopGroupsResponse&& from) noexcept
    : ListNextHopGroupsResponse() {
    *this = ::std::move(from);
  }

  inline ListNextHopGroupsResponse& operator=(const ListNextHopGroupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNextHopGroupsResponse& operator=(ListNextHopGroupsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNextHopGroupsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNextHopGroupsResponse* internal_default_instance() {
    return reinterpret_cast<const ListNextHopGroupsResponse*>(
               &_ListNextHopGroupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(ListNextHopGroupsResponse& a, ListNextHopGroupsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNextHopGroupsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNextHopGroupsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNextHopGroupsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNextHopGroupsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNextHopGroupsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNextHopGroupsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNextHopGroupsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse";
  }
  protected:
  explicit ListNextHopGroupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNexthopgroupFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.NextHopGroup nexthopgroup = 1;
  int nexthopgroup_size() const;
  private:
  int _internal_nexthopgroup_size() const;
  public:
  void clear_nexthopgroup();
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* mutable_nexthopgroup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHopGroup >*
      mutable_nexthopgroup();
  private:
  const ::opi_api::network::cloud::v1alpha1::NextHopGroup& _internal_nexthopgroup(int index) const;
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* _internal_add_nexthopgroup();
  public:
  const ::opi_api::network::cloud::v1alpha1::NextHopGroup& nexthopgroup(int index) const;
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* add_nexthopgroup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHopGroup >&
      nexthopgroup() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHopGroup > nexthopgroup_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetNextHopGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetNextHopGroupRequest) */ {
 public:
  inline GetNextHopGroupRequest() : GetNextHopGroupRequest(nullptr) {}
  ~GetNextHopGroupRequest() override;
  explicit constexpr GetNextHopGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNextHopGroupRequest(const GetNextHopGroupRequest& from);
  GetNextHopGroupRequest(GetNextHopGroupRequest&& from) noexcept
    : GetNextHopGroupRequest() {
    *this = ::std::move(from);
  }

  inline GetNextHopGroupRequest& operator=(const GetNextHopGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNextHopGroupRequest& operator=(GetNextHopGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNextHopGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNextHopGroupRequest* internal_default_instance() {
    return reinterpret_cast<const GetNextHopGroupRequest*>(
               &_GetNextHopGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(GetNextHopGroupRequest& a, GetNextHopGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNextHopGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNextHopGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNextHopGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNextHopGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNextHopGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNextHopGroupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNextHopGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetNextHopGroupRequest";
  }
  protected:
  explicit GetNextHopGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetNextHopGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateSubnetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateSubnetRequest) */ {
 public:
  inline CreateSubnetRequest() : CreateSubnetRequest(nullptr) {}
  ~CreateSubnetRequest() override;
  explicit constexpr CreateSubnetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSubnetRequest(const CreateSubnetRequest& from);
  CreateSubnetRequest(CreateSubnetRequest&& from) noexcept
    : CreateSubnetRequest() {
    *this = ::std::move(from);
  }

  inline CreateSubnetRequest& operator=(const CreateSubnetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSubnetRequest& operator=(CreateSubnetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSubnetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSubnetRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSubnetRequest*>(
               &_CreateSubnetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CreateSubnetRequest& a, CreateSubnetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSubnetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSubnetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSubnetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSubnetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSubnetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateSubnetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSubnetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateSubnetRequest";
  }
  protected:
  explicit CreateSubnetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kSubnetIdFieldNumber = 3,
    kSubnetFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string subnet_id = 3;
  void clear_subnet_id();
  const std::string& subnet_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subnet_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subnet_id();
  PROTOBUF_NODISCARD std::string* release_subnet_id();
  void set_allocated_subnet_id(std::string* subnet_id);
  private:
  const std::string& _internal_subnet_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subnet_id(const std::string& value);
  std::string* _internal_mutable_subnet_id();
  public:

  // .opi_api.network.cloud.v1alpha1.Subnet subnet = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_subnet() const;
  private:
  bool _internal_has_subnet() const;
  public:
  void clear_subnet();
  const ::opi_api::network::cloud::v1alpha1::Subnet& subnet() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Subnet* release_subnet();
  ::opi_api::network::cloud::v1alpha1::Subnet* mutable_subnet();
  void set_allocated_subnet(::opi_api::network::cloud::v1alpha1::Subnet* subnet);
  private:
  const ::opi_api::network::cloud::v1alpha1::Subnet& _internal_subnet() const;
  ::opi_api::network::cloud::v1alpha1::Subnet* _internal_mutable_subnet();
  public:
  void unsafe_arena_set_allocated_subnet(
      ::opi_api::network::cloud::v1alpha1::Subnet* subnet);
  ::opi_api::network::cloud::v1alpha1::Subnet* unsafe_arena_release_subnet();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateSubnetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subnet_id_;
  ::opi_api::network::cloud::v1alpha1::Subnet* subnet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteSubnetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteSubnetRequest) */ {
 public:
  inline DeleteSubnetRequest() : DeleteSubnetRequest(nullptr) {}
  ~DeleteSubnetRequest() override;
  explicit constexpr DeleteSubnetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSubnetRequest(const DeleteSubnetRequest& from);
  DeleteSubnetRequest(DeleteSubnetRequest&& from) noexcept
    : DeleteSubnetRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSubnetRequest& operator=(const DeleteSubnetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSubnetRequest& operator=(DeleteSubnetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSubnetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSubnetRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSubnetRequest*>(
               &_DeleteSubnetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(DeleteSubnetRequest& a, DeleteSubnetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSubnetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSubnetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSubnetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSubnetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSubnetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteSubnetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSubnetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteSubnetRequest";
  }
  protected:
  explicit DeleteSubnetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteSubnetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateSubnetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateSubnetRequest) */ {
 public:
  inline UpdateSubnetRequest() : UpdateSubnetRequest(nullptr) {}
  ~UpdateSubnetRequest() override;
  explicit constexpr UpdateSubnetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSubnetRequest(const UpdateSubnetRequest& from);
  UpdateSubnetRequest(UpdateSubnetRequest&& from) noexcept
    : UpdateSubnetRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSubnetRequest& operator=(const UpdateSubnetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSubnetRequest& operator=(UpdateSubnetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSubnetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSubnetRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSubnetRequest*>(
               &_UpdateSubnetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(UpdateSubnetRequest& a, UpdateSubnetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSubnetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSubnetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSubnetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSubnetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSubnetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateSubnetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSubnetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateSubnetRequest";
  }
  protected:
  explicit UpdateSubnetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubnetFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.Subnet subnet = 1;
  bool has_subnet() const;
  private:
  bool _internal_has_subnet() const;
  public:
  void clear_subnet();
  const ::opi_api::network::cloud::v1alpha1::Subnet& subnet() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Subnet* release_subnet();
  ::opi_api::network::cloud::v1alpha1::Subnet* mutable_subnet();
  void set_allocated_subnet(::opi_api::network::cloud::v1alpha1::Subnet* subnet);
  private:
  const ::opi_api::network::cloud::v1alpha1::Subnet& _internal_subnet() const;
  ::opi_api::network::cloud::v1alpha1::Subnet* _internal_mutable_subnet();
  public:
  void unsafe_arena_set_allocated_subnet(
      ::opi_api::network::cloud::v1alpha1::Subnet* subnet);
  ::opi_api::network::cloud::v1alpha1::Subnet* unsafe_arena_release_subnet();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateSubnetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::Subnet* subnet_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListSubnetsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListSubnetsRequest) */ {
 public:
  inline ListSubnetsRequest() : ListSubnetsRequest(nullptr) {}
  ~ListSubnetsRequest() override;
  explicit constexpr ListSubnetsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSubnetsRequest(const ListSubnetsRequest& from);
  ListSubnetsRequest(ListSubnetsRequest&& from) noexcept
    : ListSubnetsRequest() {
    *this = ::std::move(from);
  }

  inline ListSubnetsRequest& operator=(const ListSubnetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSubnetsRequest& operator=(ListSubnetsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSubnetsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSubnetsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSubnetsRequest*>(
               &_ListSubnetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(ListSubnetsRequest& a, ListSubnetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSubnetsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSubnetsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSubnetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSubnetsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSubnetsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSubnetsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSubnetsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListSubnetsRequest";
  }
  protected:
  explicit ListSubnetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListSubnetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListSubnetsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListSubnetsResponse) */ {
 public:
  inline ListSubnetsResponse() : ListSubnetsResponse(nullptr) {}
  ~ListSubnetsResponse() override;
  explicit constexpr ListSubnetsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSubnetsResponse(const ListSubnetsResponse& from);
  ListSubnetsResponse(ListSubnetsResponse&& from) noexcept
    : ListSubnetsResponse() {
    *this = ::std::move(from);
  }

  inline ListSubnetsResponse& operator=(const ListSubnetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSubnetsResponse& operator=(ListSubnetsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSubnetsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSubnetsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSubnetsResponse*>(
               &_ListSubnetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(ListSubnetsResponse& a, ListSubnetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSubnetsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSubnetsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSubnetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSubnetsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSubnetsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSubnetsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSubnetsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListSubnetsResponse";
  }
  protected:
  explicit ListSubnetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubnetFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.Subnet subnet = 1;
  int subnet_size() const;
  private:
  int _internal_subnet_size() const;
  public:
  void clear_subnet();
  ::opi_api::network::cloud::v1alpha1::Subnet* mutable_subnet(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Subnet >*
      mutable_subnet();
  private:
  const ::opi_api::network::cloud::v1alpha1::Subnet& _internal_subnet(int index) const;
  ::opi_api::network::cloud::v1alpha1::Subnet* _internal_add_subnet();
  public:
  const ::opi_api::network::cloud::v1alpha1::Subnet& subnet(int index) const;
  ::opi_api::network::cloud::v1alpha1::Subnet* add_subnet();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Subnet >&
      subnet() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListSubnetsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Subnet > subnet_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetSubnetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetSubnetRequest) */ {
 public:
  inline GetSubnetRequest() : GetSubnetRequest(nullptr) {}
  ~GetSubnetRequest() override;
  explicit constexpr GetSubnetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSubnetRequest(const GetSubnetRequest& from);
  GetSubnetRequest(GetSubnetRequest&& from) noexcept
    : GetSubnetRequest() {
    *this = ::std::move(from);
  }

  inline GetSubnetRequest& operator=(const GetSubnetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSubnetRequest& operator=(GetSubnetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSubnetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSubnetRequest* internal_default_instance() {
    return reinterpret_cast<const GetSubnetRequest*>(
               &_GetSubnetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(GetSubnetRequest& a, GetSubnetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSubnetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSubnetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSubnetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSubnetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSubnetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSubnetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSubnetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetSubnetRequest";
  }
  protected:
  explicit GetSubnetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetSubnetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateTunnelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateTunnelRequest) */ {
 public:
  inline CreateTunnelRequest() : CreateTunnelRequest(nullptr) {}
  ~CreateTunnelRequest() override;
  explicit constexpr CreateTunnelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTunnelRequest(const CreateTunnelRequest& from);
  CreateTunnelRequest(CreateTunnelRequest&& from) noexcept
    : CreateTunnelRequest() {
    *this = ::std::move(from);
  }

  inline CreateTunnelRequest& operator=(const CreateTunnelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTunnelRequest& operator=(CreateTunnelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateTunnelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTunnelRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTunnelRequest*>(
               &_CreateTunnelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CreateTunnelRequest& a, CreateTunnelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTunnelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTunnelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateTunnelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateTunnelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateTunnelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateTunnelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTunnelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateTunnelRequest";
  }
  protected:
  explicit CreateTunnelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kTunnelIdFieldNumber = 3,
    kTunnelFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string tunnel_id = 3;
  void clear_tunnel_id();
  const std::string& tunnel_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tunnel_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tunnel_id();
  PROTOBUF_NODISCARD std::string* release_tunnel_id();
  void set_allocated_tunnel_id(std::string* tunnel_id);
  private:
  const std::string& _internal_tunnel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tunnel_id(const std::string& value);
  std::string* _internal_mutable_tunnel_id();
  public:

  // .opi_api.network.cloud.v1alpha1.Tunnel tunnel = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_tunnel() const;
  private:
  bool _internal_has_tunnel() const;
  public:
  void clear_tunnel();
  const ::opi_api::network::cloud::v1alpha1::Tunnel& tunnel() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Tunnel* release_tunnel();
  ::opi_api::network::cloud::v1alpha1::Tunnel* mutable_tunnel();
  void set_allocated_tunnel(::opi_api::network::cloud::v1alpha1::Tunnel* tunnel);
  private:
  const ::opi_api::network::cloud::v1alpha1::Tunnel& _internal_tunnel() const;
  ::opi_api::network::cloud::v1alpha1::Tunnel* _internal_mutable_tunnel();
  public:
  void unsafe_arena_set_allocated_tunnel(
      ::opi_api::network::cloud::v1alpha1::Tunnel* tunnel);
  ::opi_api::network::cloud::v1alpha1::Tunnel* unsafe_arena_release_tunnel();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateTunnelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tunnel_id_;
  ::opi_api::network::cloud::v1alpha1::Tunnel* tunnel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteTunnelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteTunnelRequest) */ {
 public:
  inline DeleteTunnelRequest() : DeleteTunnelRequest(nullptr) {}
  ~DeleteTunnelRequest() override;
  explicit constexpr DeleteTunnelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteTunnelRequest(const DeleteTunnelRequest& from);
  DeleteTunnelRequest(DeleteTunnelRequest&& from) noexcept
    : DeleteTunnelRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTunnelRequest& operator=(const DeleteTunnelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTunnelRequest& operator=(DeleteTunnelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteTunnelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteTunnelRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTunnelRequest*>(
               &_DeleteTunnelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(DeleteTunnelRequest& a, DeleteTunnelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTunnelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTunnelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteTunnelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteTunnelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteTunnelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteTunnelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTunnelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteTunnelRequest";
  }
  protected:
  explicit DeleteTunnelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteTunnelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateTunnelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateTunnelRequest) */ {
 public:
  inline UpdateTunnelRequest() : UpdateTunnelRequest(nullptr) {}
  ~UpdateTunnelRequest() override;
  explicit constexpr UpdateTunnelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateTunnelRequest(const UpdateTunnelRequest& from);
  UpdateTunnelRequest(UpdateTunnelRequest&& from) noexcept
    : UpdateTunnelRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTunnelRequest& operator=(const UpdateTunnelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTunnelRequest& operator=(UpdateTunnelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateTunnelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateTunnelRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTunnelRequest*>(
               &_UpdateTunnelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(UpdateTunnelRequest& a, UpdateTunnelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateTunnelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTunnelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateTunnelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateTunnelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateTunnelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateTunnelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTunnelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateTunnelRequest";
  }
  protected:
  explicit UpdateTunnelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTunnelFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.Tunnel tunnel = 1;
  bool has_tunnel() const;
  private:
  bool _internal_has_tunnel() const;
  public:
  void clear_tunnel();
  const ::opi_api::network::cloud::v1alpha1::Tunnel& tunnel() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Tunnel* release_tunnel();
  ::opi_api::network::cloud::v1alpha1::Tunnel* mutable_tunnel();
  void set_allocated_tunnel(::opi_api::network::cloud::v1alpha1::Tunnel* tunnel);
  private:
  const ::opi_api::network::cloud::v1alpha1::Tunnel& _internal_tunnel() const;
  ::opi_api::network::cloud::v1alpha1::Tunnel* _internal_mutable_tunnel();
  public:
  void unsafe_arena_set_allocated_tunnel(
      ::opi_api::network::cloud::v1alpha1::Tunnel* tunnel);
  ::opi_api::network::cloud::v1alpha1::Tunnel* unsafe_arena_release_tunnel();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateTunnelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::Tunnel* tunnel_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListTunnelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListTunnelsRequest) */ {
 public:
  inline ListTunnelsRequest() : ListTunnelsRequest(nullptr) {}
  ~ListTunnelsRequest() override;
  explicit constexpr ListTunnelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTunnelsRequest(const ListTunnelsRequest& from);
  ListTunnelsRequest(ListTunnelsRequest&& from) noexcept
    : ListTunnelsRequest() {
    *this = ::std::move(from);
  }

  inline ListTunnelsRequest& operator=(const ListTunnelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTunnelsRequest& operator=(ListTunnelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTunnelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTunnelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTunnelsRequest*>(
               &_ListTunnelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(ListTunnelsRequest& a, ListTunnelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTunnelsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTunnelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTunnelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTunnelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTunnelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListTunnelsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTunnelsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListTunnelsRequest";
  }
  protected:
  explicit ListTunnelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListTunnelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListTunnelsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListTunnelsResponse) */ {
 public:
  inline ListTunnelsResponse() : ListTunnelsResponse(nullptr) {}
  ~ListTunnelsResponse() override;
  explicit constexpr ListTunnelsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTunnelsResponse(const ListTunnelsResponse& from);
  ListTunnelsResponse(ListTunnelsResponse&& from) noexcept
    : ListTunnelsResponse() {
    *this = ::std::move(from);
  }

  inline ListTunnelsResponse& operator=(const ListTunnelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTunnelsResponse& operator=(ListTunnelsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTunnelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTunnelsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTunnelsResponse*>(
               &_ListTunnelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(ListTunnelsResponse& a, ListTunnelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTunnelsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTunnelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTunnelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTunnelsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTunnelsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListTunnelsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTunnelsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListTunnelsResponse";
  }
  protected:
  explicit ListTunnelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTunnelFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.Tunnel tunnel = 1;
  int tunnel_size() const;
  private:
  int _internal_tunnel_size() const;
  public:
  void clear_tunnel();
  ::opi_api::network::cloud::v1alpha1::Tunnel* mutable_tunnel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Tunnel >*
      mutable_tunnel();
  private:
  const ::opi_api::network::cloud::v1alpha1::Tunnel& _internal_tunnel(int index) const;
  ::opi_api::network::cloud::v1alpha1::Tunnel* _internal_add_tunnel();
  public:
  const ::opi_api::network::cloud::v1alpha1::Tunnel& tunnel(int index) const;
  ::opi_api::network::cloud::v1alpha1::Tunnel* add_tunnel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Tunnel >&
      tunnel() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListTunnelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Tunnel > tunnel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetTunnelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetTunnelRequest) */ {
 public:
  inline GetTunnelRequest() : GetTunnelRequest(nullptr) {}
  ~GetTunnelRequest() override;
  explicit constexpr GetTunnelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTunnelRequest(const GetTunnelRequest& from);
  GetTunnelRequest(GetTunnelRequest&& from) noexcept
    : GetTunnelRequest() {
    *this = ::std::move(from);
  }

  inline GetTunnelRequest& operator=(const GetTunnelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTunnelRequest& operator=(GetTunnelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTunnelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTunnelRequest* internal_default_instance() {
    return reinterpret_cast<const GetTunnelRequest*>(
               &_GetTunnelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(GetTunnelRequest& a, GetTunnelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTunnelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTunnelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTunnelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTunnelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTunnelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTunnelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTunnelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetTunnelRequest";
  }
  protected:
  explicit GetTunnelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetTunnelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateVpcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateVpcRequest) */ {
 public:
  inline CreateVpcRequest() : CreateVpcRequest(nullptr) {}
  ~CreateVpcRequest() override;
  explicit constexpr CreateVpcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVpcRequest(const CreateVpcRequest& from);
  CreateVpcRequest(CreateVpcRequest&& from) noexcept
    : CreateVpcRequest() {
    *this = ::std::move(from);
  }

  inline CreateVpcRequest& operator=(const CreateVpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVpcRequest& operator=(CreateVpcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateVpcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVpcRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVpcRequest*>(
               &_CreateVpcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CreateVpcRequest& a, CreateVpcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVpcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVpcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateVpcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateVpcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateVpcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateVpcRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVpcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateVpcRequest";
  }
  protected:
  explicit CreateVpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kVpcIdFieldNumber = 3,
    kVpcFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string vpc_id = 3;
  void clear_vpc_id();
  const std::string& vpc_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vpc_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vpc_id();
  PROTOBUF_NODISCARD std::string* release_vpc_id();
  void set_allocated_vpc_id(std::string* vpc_id);
  private:
  const std::string& _internal_vpc_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vpc_id(const std::string& value);
  std::string* _internal_mutable_vpc_id();
  public:

  // .opi_api.network.cloud.v1alpha1.Vpc vpc = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_vpc() const;
  private:
  bool _internal_has_vpc() const;
  public:
  void clear_vpc();
  const ::opi_api::network::cloud::v1alpha1::Vpc& vpc() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Vpc* release_vpc();
  ::opi_api::network::cloud::v1alpha1::Vpc* mutable_vpc();
  void set_allocated_vpc(::opi_api::network::cloud::v1alpha1::Vpc* vpc);
  private:
  const ::opi_api::network::cloud::v1alpha1::Vpc& _internal_vpc() const;
  ::opi_api::network::cloud::v1alpha1::Vpc* _internal_mutable_vpc();
  public:
  void unsafe_arena_set_allocated_vpc(
      ::opi_api::network::cloud::v1alpha1::Vpc* vpc);
  ::opi_api::network::cloud::v1alpha1::Vpc* unsafe_arena_release_vpc();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateVpcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vpc_id_;
  ::opi_api::network::cloud::v1alpha1::Vpc* vpc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteVpcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteVpcRequest) */ {
 public:
  inline DeleteVpcRequest() : DeleteVpcRequest(nullptr) {}
  ~DeleteVpcRequest() override;
  explicit constexpr DeleteVpcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVpcRequest(const DeleteVpcRequest& from);
  DeleteVpcRequest(DeleteVpcRequest&& from) noexcept
    : DeleteVpcRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVpcRequest& operator=(const DeleteVpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVpcRequest& operator=(DeleteVpcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteVpcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVpcRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVpcRequest*>(
               &_DeleteVpcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(DeleteVpcRequest& a, DeleteVpcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVpcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVpcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteVpcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteVpcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteVpcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteVpcRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVpcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteVpcRequest";
  }
  protected:
  explicit DeleteVpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteVpcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateVpcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateVpcRequest) */ {
 public:
  inline UpdateVpcRequest() : UpdateVpcRequest(nullptr) {}
  ~UpdateVpcRequest() override;
  explicit constexpr UpdateVpcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVpcRequest(const UpdateVpcRequest& from);
  UpdateVpcRequest(UpdateVpcRequest&& from) noexcept
    : UpdateVpcRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVpcRequest& operator=(const UpdateVpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVpcRequest& operator=(UpdateVpcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVpcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVpcRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVpcRequest*>(
               &_UpdateVpcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(UpdateVpcRequest& a, UpdateVpcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVpcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVpcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateVpcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateVpcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVpcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateVpcRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVpcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateVpcRequest";
  }
  protected:
  explicit UpdateVpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVpcFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.Vpc vpc = 1;
  bool has_vpc() const;
  private:
  bool _internal_has_vpc() const;
  public:
  void clear_vpc();
  const ::opi_api::network::cloud::v1alpha1::Vpc& vpc() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::Vpc* release_vpc();
  ::opi_api::network::cloud::v1alpha1::Vpc* mutable_vpc();
  void set_allocated_vpc(::opi_api::network::cloud::v1alpha1::Vpc* vpc);
  private:
  const ::opi_api::network::cloud::v1alpha1::Vpc& _internal_vpc() const;
  ::opi_api::network::cloud::v1alpha1::Vpc* _internal_mutable_vpc();
  public:
  void unsafe_arena_set_allocated_vpc(
      ::opi_api::network::cloud::v1alpha1::Vpc* vpc);
  ::opi_api::network::cloud::v1alpha1::Vpc* unsafe_arena_release_vpc();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateVpcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::Vpc* vpc_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListVpcsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListVpcsRequest) */ {
 public:
  inline ListVpcsRequest() : ListVpcsRequest(nullptr) {}
  ~ListVpcsRequest() override;
  explicit constexpr ListVpcsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVpcsRequest(const ListVpcsRequest& from);
  ListVpcsRequest(ListVpcsRequest&& from) noexcept
    : ListVpcsRequest() {
    *this = ::std::move(from);
  }

  inline ListVpcsRequest& operator=(const ListVpcsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVpcsRequest& operator=(ListVpcsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVpcsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVpcsRequest* internal_default_instance() {
    return reinterpret_cast<const ListVpcsRequest*>(
               &_ListVpcsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(ListVpcsRequest& a, ListVpcsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVpcsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVpcsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVpcsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVpcsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVpcsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListVpcsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVpcsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListVpcsRequest";
  }
  protected:
  explicit ListVpcsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListVpcsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListVpcsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListVpcsResponse) */ {
 public:
  inline ListVpcsResponse() : ListVpcsResponse(nullptr) {}
  ~ListVpcsResponse() override;
  explicit constexpr ListVpcsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVpcsResponse(const ListVpcsResponse& from);
  ListVpcsResponse(ListVpcsResponse&& from) noexcept
    : ListVpcsResponse() {
    *this = ::std::move(from);
  }

  inline ListVpcsResponse& operator=(const ListVpcsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVpcsResponse& operator=(ListVpcsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVpcsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVpcsResponse* internal_default_instance() {
    return reinterpret_cast<const ListVpcsResponse*>(
               &_ListVpcsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(ListVpcsResponse& a, ListVpcsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVpcsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVpcsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVpcsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVpcsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVpcsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListVpcsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVpcsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListVpcsResponse";
  }
  protected:
  explicit ListVpcsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVpcFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.Vpc vpc = 1;
  int vpc_size() const;
  private:
  int _internal_vpc_size() const;
  public:
  void clear_vpc();
  ::opi_api::network::cloud::v1alpha1::Vpc* mutable_vpc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Vpc >*
      mutable_vpc();
  private:
  const ::opi_api::network::cloud::v1alpha1::Vpc& _internal_vpc(int index) const;
  ::opi_api::network::cloud::v1alpha1::Vpc* _internal_add_vpc();
  public:
  const ::opi_api::network::cloud::v1alpha1::Vpc& vpc(int index) const;
  ::opi_api::network::cloud::v1alpha1::Vpc* add_vpc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Vpc >&
      vpc() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListVpcsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Vpc > vpc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetVpcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetVpcRequest) */ {
 public:
  inline GetVpcRequest() : GetVpcRequest(nullptr) {}
  ~GetVpcRequest() override;
  explicit constexpr GetVpcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVpcRequest(const GetVpcRequest& from);
  GetVpcRequest(GetVpcRequest&& from) noexcept
    : GetVpcRequest() {
    *this = ::std::move(from);
  }

  inline GetVpcRequest& operator=(const GetVpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVpcRequest& operator=(GetVpcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVpcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVpcRequest* internal_default_instance() {
    return reinterpret_cast<const GetVpcRequest*>(
               &_GetVpcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(GetVpcRequest& a, GetVpcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVpcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVpcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVpcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVpcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVpcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetVpcRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVpcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetVpcRequest";
  }
  protected:
  explicit GetVpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetVpcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateVPCPeerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest) */ {
 public:
  inline CreateVPCPeerRequest() : CreateVPCPeerRequest(nullptr) {}
  ~CreateVPCPeerRequest() override;
  explicit constexpr CreateVPCPeerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVPCPeerRequest(const CreateVPCPeerRequest& from);
  CreateVPCPeerRequest(CreateVPCPeerRequest&& from) noexcept
    : CreateVPCPeerRequest() {
    *this = ::std::move(from);
  }

  inline CreateVPCPeerRequest& operator=(const CreateVPCPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVPCPeerRequest& operator=(CreateVPCPeerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateVPCPeerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVPCPeerRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVPCPeerRequest*>(
               &_CreateVPCPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(CreateVPCPeerRequest& a, CreateVPCPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVPCPeerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVPCPeerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateVPCPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateVPCPeerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateVPCPeerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateVPCPeerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVPCPeerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest";
  }
  protected:
  explicit CreateVPCPeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kVpcpeerIdFieldNumber = 3,
    kVpcpeerFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string vpcpeer_id = 3;
  void clear_vpcpeer_id();
  const std::string& vpcpeer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vpcpeer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vpcpeer_id();
  PROTOBUF_NODISCARD std::string* release_vpcpeer_id();
  void set_allocated_vpcpeer_id(std::string* vpcpeer_id);
  private:
  const std::string& _internal_vpcpeer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vpcpeer_id(const std::string& value);
  std::string* _internal_mutable_vpcpeer_id();
  public:

  // .opi_api.network.cloud.v1alpha1.VPCPeer vpcpeer = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_vpcpeer() const;
  private:
  bool _internal_has_vpcpeer() const;
  public:
  void clear_vpcpeer();
  const ::opi_api::network::cloud::v1alpha1::VPCPeer& vpcpeer() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::VPCPeer* release_vpcpeer();
  ::opi_api::network::cloud::v1alpha1::VPCPeer* mutable_vpcpeer();
  void set_allocated_vpcpeer(::opi_api::network::cloud::v1alpha1::VPCPeer* vpcpeer);
  private:
  const ::opi_api::network::cloud::v1alpha1::VPCPeer& _internal_vpcpeer() const;
  ::opi_api::network::cloud::v1alpha1::VPCPeer* _internal_mutable_vpcpeer();
  public:
  void unsafe_arena_set_allocated_vpcpeer(
      ::opi_api::network::cloud::v1alpha1::VPCPeer* vpcpeer);
  ::opi_api::network::cloud::v1alpha1::VPCPeer* unsafe_arena_release_vpcpeer();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vpcpeer_id_;
  ::opi_api::network::cloud::v1alpha1::VPCPeer* vpcpeer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteVPCPeerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteVPCPeerRequest) */ {
 public:
  inline DeleteVPCPeerRequest() : DeleteVPCPeerRequest(nullptr) {}
  ~DeleteVPCPeerRequest() override;
  explicit constexpr DeleteVPCPeerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVPCPeerRequest(const DeleteVPCPeerRequest& from);
  DeleteVPCPeerRequest(DeleteVPCPeerRequest&& from) noexcept
    : DeleteVPCPeerRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVPCPeerRequest& operator=(const DeleteVPCPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVPCPeerRequest& operator=(DeleteVPCPeerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteVPCPeerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVPCPeerRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVPCPeerRequest*>(
               &_DeleteVPCPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(DeleteVPCPeerRequest& a, DeleteVPCPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVPCPeerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVPCPeerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteVPCPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteVPCPeerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteVPCPeerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteVPCPeerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVPCPeerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteVPCPeerRequest";
  }
  protected:
  explicit DeleteVPCPeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteVPCPeerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateVPCPeerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest) */ {
 public:
  inline UpdateVPCPeerRequest() : UpdateVPCPeerRequest(nullptr) {}
  ~UpdateVPCPeerRequest() override;
  explicit constexpr UpdateVPCPeerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVPCPeerRequest(const UpdateVPCPeerRequest& from);
  UpdateVPCPeerRequest(UpdateVPCPeerRequest&& from) noexcept
    : UpdateVPCPeerRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVPCPeerRequest& operator=(const UpdateVPCPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVPCPeerRequest& operator=(UpdateVPCPeerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVPCPeerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVPCPeerRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVPCPeerRequest*>(
               &_UpdateVPCPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(UpdateVPCPeerRequest& a, UpdateVPCPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVPCPeerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVPCPeerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateVPCPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateVPCPeerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVPCPeerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateVPCPeerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVPCPeerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest";
  }
  protected:
  explicit UpdateVPCPeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVpcpeerFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.VPCPeer vpcpeer = 1;
  bool has_vpcpeer() const;
  private:
  bool _internal_has_vpcpeer() const;
  public:
  void clear_vpcpeer();
  const ::opi_api::network::cloud::v1alpha1::VPCPeer& vpcpeer() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::VPCPeer* release_vpcpeer();
  ::opi_api::network::cloud::v1alpha1::VPCPeer* mutable_vpcpeer();
  void set_allocated_vpcpeer(::opi_api::network::cloud::v1alpha1::VPCPeer* vpcpeer);
  private:
  const ::opi_api::network::cloud::v1alpha1::VPCPeer& _internal_vpcpeer() const;
  ::opi_api::network::cloud::v1alpha1::VPCPeer* _internal_mutable_vpcpeer();
  public:
  void unsafe_arena_set_allocated_vpcpeer(
      ::opi_api::network::cloud::v1alpha1::VPCPeer* vpcpeer);
  ::opi_api::network::cloud::v1alpha1::VPCPeer* unsafe_arena_release_vpcpeer();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::VPCPeer* vpcpeer_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListVPCPeersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListVPCPeersRequest) */ {
 public:
  inline ListVPCPeersRequest() : ListVPCPeersRequest(nullptr) {}
  ~ListVPCPeersRequest() override;
  explicit constexpr ListVPCPeersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVPCPeersRequest(const ListVPCPeersRequest& from);
  ListVPCPeersRequest(ListVPCPeersRequest&& from) noexcept
    : ListVPCPeersRequest() {
    *this = ::std::move(from);
  }

  inline ListVPCPeersRequest& operator=(const ListVPCPeersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVPCPeersRequest& operator=(ListVPCPeersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVPCPeersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVPCPeersRequest* internal_default_instance() {
    return reinterpret_cast<const ListVPCPeersRequest*>(
               &_ListVPCPeersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(ListVPCPeersRequest& a, ListVPCPeersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVPCPeersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVPCPeersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVPCPeersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVPCPeersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVPCPeersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListVPCPeersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVPCPeersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListVPCPeersRequest";
  }
  protected:
  explicit ListVPCPeersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListVPCPeersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListVPCPeersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListVPCPeersResponse) */ {
 public:
  inline ListVPCPeersResponse() : ListVPCPeersResponse(nullptr) {}
  ~ListVPCPeersResponse() override;
  explicit constexpr ListVPCPeersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVPCPeersResponse(const ListVPCPeersResponse& from);
  ListVPCPeersResponse(ListVPCPeersResponse&& from) noexcept
    : ListVPCPeersResponse() {
    *this = ::std::move(from);
  }

  inline ListVPCPeersResponse& operator=(const ListVPCPeersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVPCPeersResponse& operator=(ListVPCPeersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVPCPeersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVPCPeersResponse* internal_default_instance() {
    return reinterpret_cast<const ListVPCPeersResponse*>(
               &_ListVPCPeersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(ListVPCPeersResponse& a, ListVPCPeersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVPCPeersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVPCPeersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVPCPeersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVPCPeersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVPCPeersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListVPCPeersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVPCPeersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListVPCPeersResponse";
  }
  protected:
  explicit ListVPCPeersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVpcpeerFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.VPCPeer vpcpeer = 1;
  int vpcpeer_size() const;
  private:
  int _internal_vpcpeer_size() const;
  public:
  void clear_vpcpeer();
  ::opi_api::network::cloud::v1alpha1::VPCPeer* mutable_vpcpeer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::VPCPeer >*
      mutable_vpcpeer();
  private:
  const ::opi_api::network::cloud::v1alpha1::VPCPeer& _internal_vpcpeer(int index) const;
  ::opi_api::network::cloud::v1alpha1::VPCPeer* _internal_add_vpcpeer();
  public:
  const ::opi_api::network::cloud::v1alpha1::VPCPeer& vpcpeer(int index) const;
  ::opi_api::network::cloud::v1alpha1::VPCPeer* add_vpcpeer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::VPCPeer >&
      vpcpeer() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListVPCPeersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::VPCPeer > vpcpeer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetVPCPeerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetVPCPeerRequest) */ {
 public:
  inline GetVPCPeerRequest() : GetVPCPeerRequest(nullptr) {}
  ~GetVPCPeerRequest() override;
  explicit constexpr GetVPCPeerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVPCPeerRequest(const GetVPCPeerRequest& from);
  GetVPCPeerRequest(GetVPCPeerRequest&& from) noexcept
    : GetVPCPeerRequest() {
    *this = ::std::move(from);
  }

  inline GetVPCPeerRequest& operator=(const GetVPCPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVPCPeerRequest& operator=(GetVPCPeerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVPCPeerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVPCPeerRequest* internal_default_instance() {
    return reinterpret_cast<const GetVPCPeerRequest*>(
               &_GetVPCPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(GetVPCPeerRequest& a, GetVPCPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVPCPeerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVPCPeerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVPCPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVPCPeerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVPCPeerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetVPCPeerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVPCPeerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetVPCPeerRequest";
  }
  protected:
  explicit GetVPCPeerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetVPCPeerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateSecurityPolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest) */ {
 public:
  inline CreateSecurityPolicyRequest() : CreateSecurityPolicyRequest(nullptr) {}
  ~CreateSecurityPolicyRequest() override;
  explicit constexpr CreateSecurityPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSecurityPolicyRequest(const CreateSecurityPolicyRequest& from);
  CreateSecurityPolicyRequest(CreateSecurityPolicyRequest&& from) noexcept
    : CreateSecurityPolicyRequest() {
    *this = ::std::move(from);
  }

  inline CreateSecurityPolicyRequest& operator=(const CreateSecurityPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSecurityPolicyRequest& operator=(CreateSecurityPolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSecurityPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSecurityPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSecurityPolicyRequest*>(
               &_CreateSecurityPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(CreateSecurityPolicyRequest& a, CreateSecurityPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSecurityPolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSecurityPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSecurityPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSecurityPolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSecurityPolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateSecurityPolicyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSecurityPolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest";
  }
  protected:
  explicit CreateSecurityPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kSecuritypolicyIdFieldNumber = 3,
    kSecuritypolicyFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string securitypolicy_id = 3;
  void clear_securitypolicy_id();
  const std::string& securitypolicy_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_securitypolicy_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_securitypolicy_id();
  PROTOBUF_NODISCARD std::string* release_securitypolicy_id();
  void set_allocated_securitypolicy_id(std::string* securitypolicy_id);
  private:
  const std::string& _internal_securitypolicy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_securitypolicy_id(const std::string& value);
  std::string* _internal_mutable_securitypolicy_id();
  public:

  // .opi_api.network.cloud.v1alpha1.SecurityPolicy securitypolicy = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_securitypolicy() const;
  private:
  bool _internal_has_securitypolicy() const;
  public:
  void clear_securitypolicy();
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicy& securitypolicy() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SecurityPolicy* release_securitypolicy();
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* mutable_securitypolicy();
  void set_allocated_securitypolicy(::opi_api::network::cloud::v1alpha1::SecurityPolicy* securitypolicy);
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicy& _internal_securitypolicy() const;
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* _internal_mutable_securitypolicy();
  public:
  void unsafe_arena_set_allocated_securitypolicy(
      ::opi_api::network::cloud::v1alpha1::SecurityPolicy* securitypolicy);
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* unsafe_arena_release_securitypolicy();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securitypolicy_id_;
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* securitypolicy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteSecurityPolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteSecurityPolicyRequest) */ {
 public:
  inline DeleteSecurityPolicyRequest() : DeleteSecurityPolicyRequest(nullptr) {}
  ~DeleteSecurityPolicyRequest() override;
  explicit constexpr DeleteSecurityPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSecurityPolicyRequest(const DeleteSecurityPolicyRequest& from);
  DeleteSecurityPolicyRequest(DeleteSecurityPolicyRequest&& from) noexcept
    : DeleteSecurityPolicyRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSecurityPolicyRequest& operator=(const DeleteSecurityPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSecurityPolicyRequest& operator=(DeleteSecurityPolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSecurityPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSecurityPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSecurityPolicyRequest*>(
               &_DeleteSecurityPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(DeleteSecurityPolicyRequest& a, DeleteSecurityPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSecurityPolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSecurityPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSecurityPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSecurityPolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSecurityPolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteSecurityPolicyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSecurityPolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteSecurityPolicyRequest";
  }
  protected:
  explicit DeleteSecurityPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteSecurityPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateSecurityPolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest) */ {
 public:
  inline UpdateSecurityPolicyRequest() : UpdateSecurityPolicyRequest(nullptr) {}
  ~UpdateSecurityPolicyRequest() override;
  explicit constexpr UpdateSecurityPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSecurityPolicyRequest(const UpdateSecurityPolicyRequest& from);
  UpdateSecurityPolicyRequest(UpdateSecurityPolicyRequest&& from) noexcept
    : UpdateSecurityPolicyRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSecurityPolicyRequest& operator=(const UpdateSecurityPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSecurityPolicyRequest& operator=(UpdateSecurityPolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSecurityPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSecurityPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSecurityPolicyRequest*>(
               &_UpdateSecurityPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(UpdateSecurityPolicyRequest& a, UpdateSecurityPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSecurityPolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSecurityPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSecurityPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSecurityPolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSecurityPolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateSecurityPolicyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSecurityPolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest";
  }
  protected:
  explicit UpdateSecurityPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecuritypolicyFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.SecurityPolicy securitypolicy = 1;
  bool has_securitypolicy() const;
  private:
  bool _internal_has_securitypolicy() const;
  public:
  void clear_securitypolicy();
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicy& securitypolicy() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SecurityPolicy* release_securitypolicy();
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* mutable_securitypolicy();
  void set_allocated_securitypolicy(::opi_api::network::cloud::v1alpha1::SecurityPolicy* securitypolicy);
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicy& _internal_securitypolicy() const;
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* _internal_mutable_securitypolicy();
  public:
  void unsafe_arena_set_allocated_securitypolicy(
      ::opi_api::network::cloud::v1alpha1::SecurityPolicy* securitypolicy);
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* unsafe_arena_release_securitypolicy();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* securitypolicy_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListSecurityPolicysRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest) */ {
 public:
  inline ListSecurityPolicysRequest() : ListSecurityPolicysRequest(nullptr) {}
  ~ListSecurityPolicysRequest() override;
  explicit constexpr ListSecurityPolicysRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSecurityPolicysRequest(const ListSecurityPolicysRequest& from);
  ListSecurityPolicysRequest(ListSecurityPolicysRequest&& from) noexcept
    : ListSecurityPolicysRequest() {
    *this = ::std::move(from);
  }

  inline ListSecurityPolicysRequest& operator=(const ListSecurityPolicysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSecurityPolicysRequest& operator=(ListSecurityPolicysRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSecurityPolicysRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSecurityPolicysRequest* internal_default_instance() {
    return reinterpret_cast<const ListSecurityPolicysRequest*>(
               &_ListSecurityPolicysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(ListSecurityPolicysRequest& a, ListSecurityPolicysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSecurityPolicysRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSecurityPolicysRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSecurityPolicysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSecurityPolicysRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSecurityPolicysRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSecurityPolicysRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSecurityPolicysRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest";
  }
  protected:
  explicit ListSecurityPolicysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListSecurityPolicysResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse) */ {
 public:
  inline ListSecurityPolicysResponse() : ListSecurityPolicysResponse(nullptr) {}
  ~ListSecurityPolicysResponse() override;
  explicit constexpr ListSecurityPolicysResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSecurityPolicysResponse(const ListSecurityPolicysResponse& from);
  ListSecurityPolicysResponse(ListSecurityPolicysResponse&& from) noexcept
    : ListSecurityPolicysResponse() {
    *this = ::std::move(from);
  }

  inline ListSecurityPolicysResponse& operator=(const ListSecurityPolicysResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSecurityPolicysResponse& operator=(ListSecurityPolicysResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSecurityPolicysResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSecurityPolicysResponse* internal_default_instance() {
    return reinterpret_cast<const ListSecurityPolicysResponse*>(
               &_ListSecurityPolicysResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(ListSecurityPolicysResponse& a, ListSecurityPolicysResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSecurityPolicysResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSecurityPolicysResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSecurityPolicysResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSecurityPolicysResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSecurityPolicysResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSecurityPolicysResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSecurityPolicysResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse";
  }
  protected:
  explicit ListSecurityPolicysResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecuritypolicyFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.SecurityPolicy securitypolicy = 1;
  int securitypolicy_size() const;
  private:
  int _internal_securitypolicy_size() const;
  public:
  void clear_securitypolicy();
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* mutable_securitypolicy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityPolicy >*
      mutable_securitypolicy();
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicy& _internal_securitypolicy(int index) const;
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* _internal_add_securitypolicy();
  public:
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicy& securitypolicy(int index) const;
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* add_securitypolicy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityPolicy >&
      securitypolicy() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityPolicy > securitypolicy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetSecurityPolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetSecurityPolicyRequest) */ {
 public:
  inline GetSecurityPolicyRequest() : GetSecurityPolicyRequest(nullptr) {}
  ~GetSecurityPolicyRequest() override;
  explicit constexpr GetSecurityPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSecurityPolicyRequest(const GetSecurityPolicyRequest& from);
  GetSecurityPolicyRequest(GetSecurityPolicyRequest&& from) noexcept
    : GetSecurityPolicyRequest() {
    *this = ::std::move(from);
  }

  inline GetSecurityPolicyRequest& operator=(const GetSecurityPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSecurityPolicyRequest& operator=(GetSecurityPolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSecurityPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSecurityPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const GetSecurityPolicyRequest*>(
               &_GetSecurityPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(GetSecurityPolicyRequest& a, GetSecurityPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSecurityPolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSecurityPolicyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSecurityPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSecurityPolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSecurityPolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSecurityPolicyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSecurityPolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetSecurityPolicyRequest";
  }
  protected:
  explicit GetSecurityPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetSecurityPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateSecurityRuleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest) */ {
 public:
  inline CreateSecurityRuleRequest() : CreateSecurityRuleRequest(nullptr) {}
  ~CreateSecurityRuleRequest() override;
  explicit constexpr CreateSecurityRuleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSecurityRuleRequest(const CreateSecurityRuleRequest& from);
  CreateSecurityRuleRequest(CreateSecurityRuleRequest&& from) noexcept
    : CreateSecurityRuleRequest() {
    *this = ::std::move(from);
  }

  inline CreateSecurityRuleRequest& operator=(const CreateSecurityRuleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSecurityRuleRequest& operator=(CreateSecurityRuleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSecurityRuleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSecurityRuleRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSecurityRuleRequest*>(
               &_CreateSecurityRuleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(CreateSecurityRuleRequest& a, CreateSecurityRuleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSecurityRuleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSecurityRuleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSecurityRuleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSecurityRuleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSecurityRuleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateSecurityRuleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSecurityRuleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest";
  }
  protected:
  explicit CreateSecurityRuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kSecurityruleIdFieldNumber = 3,
    kSecurityruleFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string securityrule_id = 3;
  void clear_securityrule_id();
  const std::string& securityrule_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_securityrule_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_securityrule_id();
  PROTOBUF_NODISCARD std::string* release_securityrule_id();
  void set_allocated_securityrule_id(std::string* securityrule_id);
  private:
  const std::string& _internal_securityrule_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_securityrule_id(const std::string& value);
  std::string* _internal_mutable_securityrule_id();
  public:

  // .opi_api.network.cloud.v1alpha1.SecurityRule securityrule = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_securityrule() const;
  private:
  bool _internal_has_securityrule() const;
  public:
  void clear_securityrule();
  const ::opi_api::network::cloud::v1alpha1::SecurityRule& securityrule() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SecurityRule* release_securityrule();
  ::opi_api::network::cloud::v1alpha1::SecurityRule* mutable_securityrule();
  void set_allocated_securityrule(::opi_api::network::cloud::v1alpha1::SecurityRule* securityrule);
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityRule& _internal_securityrule() const;
  ::opi_api::network::cloud::v1alpha1::SecurityRule* _internal_mutable_securityrule();
  public:
  void unsafe_arena_set_allocated_securityrule(
      ::opi_api::network::cloud::v1alpha1::SecurityRule* securityrule);
  ::opi_api::network::cloud::v1alpha1::SecurityRule* unsafe_arena_release_securityrule();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityrule_id_;
  ::opi_api::network::cloud::v1alpha1::SecurityRule* securityrule_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteSecurityRuleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteSecurityRuleRequest) */ {
 public:
  inline DeleteSecurityRuleRequest() : DeleteSecurityRuleRequest(nullptr) {}
  ~DeleteSecurityRuleRequest() override;
  explicit constexpr DeleteSecurityRuleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSecurityRuleRequest(const DeleteSecurityRuleRequest& from);
  DeleteSecurityRuleRequest(DeleteSecurityRuleRequest&& from) noexcept
    : DeleteSecurityRuleRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSecurityRuleRequest& operator=(const DeleteSecurityRuleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSecurityRuleRequest& operator=(DeleteSecurityRuleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSecurityRuleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSecurityRuleRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSecurityRuleRequest*>(
               &_DeleteSecurityRuleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(DeleteSecurityRuleRequest& a, DeleteSecurityRuleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSecurityRuleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSecurityRuleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSecurityRuleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSecurityRuleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSecurityRuleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteSecurityRuleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSecurityRuleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteSecurityRuleRequest";
  }
  protected:
  explicit DeleteSecurityRuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteSecurityRuleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateSecurityRuleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest) */ {
 public:
  inline UpdateSecurityRuleRequest() : UpdateSecurityRuleRequest(nullptr) {}
  ~UpdateSecurityRuleRequest() override;
  explicit constexpr UpdateSecurityRuleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSecurityRuleRequest(const UpdateSecurityRuleRequest& from);
  UpdateSecurityRuleRequest(UpdateSecurityRuleRequest&& from) noexcept
    : UpdateSecurityRuleRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSecurityRuleRequest& operator=(const UpdateSecurityRuleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSecurityRuleRequest& operator=(UpdateSecurityRuleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSecurityRuleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSecurityRuleRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSecurityRuleRequest*>(
               &_UpdateSecurityRuleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(UpdateSecurityRuleRequest& a, UpdateSecurityRuleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSecurityRuleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSecurityRuleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSecurityRuleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSecurityRuleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSecurityRuleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateSecurityRuleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSecurityRuleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest";
  }
  protected:
  explicit UpdateSecurityRuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecurityruleFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.SecurityRule securityrule = 1;
  bool has_securityrule() const;
  private:
  bool _internal_has_securityrule() const;
  public:
  void clear_securityrule();
  const ::opi_api::network::cloud::v1alpha1::SecurityRule& securityrule() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SecurityRule* release_securityrule();
  ::opi_api::network::cloud::v1alpha1::SecurityRule* mutable_securityrule();
  void set_allocated_securityrule(::opi_api::network::cloud::v1alpha1::SecurityRule* securityrule);
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityRule& _internal_securityrule() const;
  ::opi_api::network::cloud::v1alpha1::SecurityRule* _internal_mutable_securityrule();
  public:
  void unsafe_arena_set_allocated_securityrule(
      ::opi_api::network::cloud::v1alpha1::SecurityRule* securityrule);
  ::opi_api::network::cloud::v1alpha1::SecurityRule* unsafe_arena_release_securityrule();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::SecurityRule* securityrule_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListSecurityRulesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest) */ {
 public:
  inline ListSecurityRulesRequest() : ListSecurityRulesRequest(nullptr) {}
  ~ListSecurityRulesRequest() override;
  explicit constexpr ListSecurityRulesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSecurityRulesRequest(const ListSecurityRulesRequest& from);
  ListSecurityRulesRequest(ListSecurityRulesRequest&& from) noexcept
    : ListSecurityRulesRequest() {
    *this = ::std::move(from);
  }

  inline ListSecurityRulesRequest& operator=(const ListSecurityRulesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSecurityRulesRequest& operator=(ListSecurityRulesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSecurityRulesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSecurityRulesRequest* internal_default_instance() {
    return reinterpret_cast<const ListSecurityRulesRequest*>(
               &_ListSecurityRulesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(ListSecurityRulesRequest& a, ListSecurityRulesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSecurityRulesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSecurityRulesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSecurityRulesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSecurityRulesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSecurityRulesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSecurityRulesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSecurityRulesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest";
  }
  protected:
  explicit ListSecurityRulesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListSecurityRulesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse) */ {
 public:
  inline ListSecurityRulesResponse() : ListSecurityRulesResponse(nullptr) {}
  ~ListSecurityRulesResponse() override;
  explicit constexpr ListSecurityRulesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSecurityRulesResponse(const ListSecurityRulesResponse& from);
  ListSecurityRulesResponse(ListSecurityRulesResponse&& from) noexcept
    : ListSecurityRulesResponse() {
    *this = ::std::move(from);
  }

  inline ListSecurityRulesResponse& operator=(const ListSecurityRulesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSecurityRulesResponse& operator=(ListSecurityRulesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSecurityRulesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSecurityRulesResponse* internal_default_instance() {
    return reinterpret_cast<const ListSecurityRulesResponse*>(
               &_ListSecurityRulesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(ListSecurityRulesResponse& a, ListSecurityRulesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSecurityRulesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSecurityRulesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSecurityRulesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSecurityRulesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSecurityRulesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSecurityRulesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSecurityRulesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse";
  }
  protected:
  explicit ListSecurityRulesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecurityruleFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.SecurityRule securityrule = 1;
  int securityrule_size() const;
  private:
  int _internal_securityrule_size() const;
  public:
  void clear_securityrule();
  ::opi_api::network::cloud::v1alpha1::SecurityRule* mutable_securityrule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityRule >*
      mutable_securityrule();
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityRule& _internal_securityrule(int index) const;
  ::opi_api::network::cloud::v1alpha1::SecurityRule* _internal_add_securityrule();
  public:
  const ::opi_api::network::cloud::v1alpha1::SecurityRule& securityrule(int index) const;
  ::opi_api::network::cloud::v1alpha1::SecurityRule* add_securityrule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityRule >&
      securityrule() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityRule > securityrule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetSecurityRuleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetSecurityRuleRequest) */ {
 public:
  inline GetSecurityRuleRequest() : GetSecurityRuleRequest(nullptr) {}
  ~GetSecurityRuleRequest() override;
  explicit constexpr GetSecurityRuleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSecurityRuleRequest(const GetSecurityRuleRequest& from);
  GetSecurityRuleRequest(GetSecurityRuleRequest&& from) noexcept
    : GetSecurityRuleRequest() {
    *this = ::std::move(from);
  }

  inline GetSecurityRuleRequest& operator=(const GetSecurityRuleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSecurityRuleRequest& operator=(GetSecurityRuleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSecurityRuleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSecurityRuleRequest* internal_default_instance() {
    return reinterpret_cast<const GetSecurityRuleRequest*>(
               &_GetSecurityRuleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(GetSecurityRuleRequest& a, GetSecurityRuleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSecurityRuleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSecurityRuleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSecurityRuleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSecurityRuleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSecurityRuleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSecurityRuleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSecurityRuleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetSecurityRuleRequest";
  }
  protected:
  explicit GetSecurityRuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetSecurityRuleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class CreateSecurityProfileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest) */ {
 public:
  inline CreateSecurityProfileRequest() : CreateSecurityProfileRequest(nullptr) {}
  ~CreateSecurityProfileRequest() override;
  explicit constexpr CreateSecurityProfileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSecurityProfileRequest(const CreateSecurityProfileRequest& from);
  CreateSecurityProfileRequest(CreateSecurityProfileRequest&& from) noexcept
    : CreateSecurityProfileRequest() {
    *this = ::std::move(from);
  }

  inline CreateSecurityProfileRequest& operator=(const CreateSecurityProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSecurityProfileRequest& operator=(CreateSecurityProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSecurityProfileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSecurityProfileRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSecurityProfileRequest*>(
               &_CreateSecurityProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(CreateSecurityProfileRequest& a, CreateSecurityProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSecurityProfileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSecurityProfileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSecurityProfileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSecurityProfileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSecurityProfileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateSecurityProfileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSecurityProfileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest";
  }
  protected:
  explicit CreateSecurityProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kSecurityprofileIdFieldNumber = 3,
    kSecurityprofileFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string securityprofile_id = 3;
  void clear_securityprofile_id();
  const std::string& securityprofile_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_securityprofile_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_securityprofile_id();
  PROTOBUF_NODISCARD std::string* release_securityprofile_id();
  void set_allocated_securityprofile_id(std::string* securityprofile_id);
  private:
  const std::string& _internal_securityprofile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_securityprofile_id(const std::string& value);
  std::string* _internal_mutable_securityprofile_id();
  public:

  // .opi_api.network.cloud.v1alpha1.SecurityProfile securityprofile = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_securityprofile() const;
  private:
  bool _internal_has_securityprofile() const;
  public:
  void clear_securityprofile();
  const ::opi_api::network::cloud::v1alpha1::SecurityProfile& securityprofile() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SecurityProfile* release_securityprofile();
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* mutable_securityprofile();
  void set_allocated_securityprofile(::opi_api::network::cloud::v1alpha1::SecurityProfile* securityprofile);
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityProfile& _internal_securityprofile() const;
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* _internal_mutable_securityprofile();
  public:
  void unsafe_arena_set_allocated_securityprofile(
      ::opi_api::network::cloud::v1alpha1::SecurityProfile* securityprofile);
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* unsafe_arena_release_securityprofile();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securityprofile_id_;
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* securityprofile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteSecurityProfileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeleteSecurityProfileRequest) */ {
 public:
  inline DeleteSecurityProfileRequest() : DeleteSecurityProfileRequest(nullptr) {}
  ~DeleteSecurityProfileRequest() override;
  explicit constexpr DeleteSecurityProfileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSecurityProfileRequest(const DeleteSecurityProfileRequest& from);
  DeleteSecurityProfileRequest(DeleteSecurityProfileRequest&& from) noexcept
    : DeleteSecurityProfileRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSecurityProfileRequest& operator=(const DeleteSecurityProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSecurityProfileRequest& operator=(DeleteSecurityProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSecurityProfileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSecurityProfileRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSecurityProfileRequest*>(
               &_DeleteSecurityProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(DeleteSecurityProfileRequest& a, DeleteSecurityProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSecurityProfileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSecurityProfileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSecurityProfileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSecurityProfileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSecurityProfileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteSecurityProfileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSecurityProfileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeleteSecurityProfileRequest";
  }
  protected:
  explicit DeleteSecurityProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeleteSecurityProfileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdateSecurityProfileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest) */ {
 public:
  inline UpdateSecurityProfileRequest() : UpdateSecurityProfileRequest(nullptr) {}
  ~UpdateSecurityProfileRequest() override;
  explicit constexpr UpdateSecurityProfileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSecurityProfileRequest(const UpdateSecurityProfileRequest& from);
  UpdateSecurityProfileRequest(UpdateSecurityProfileRequest&& from) noexcept
    : UpdateSecurityProfileRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSecurityProfileRequest& operator=(const UpdateSecurityProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSecurityProfileRequest& operator=(UpdateSecurityProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSecurityProfileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSecurityProfileRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSecurityProfileRequest*>(
               &_UpdateSecurityProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(UpdateSecurityProfileRequest& a, UpdateSecurityProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSecurityProfileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSecurityProfileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSecurityProfileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSecurityProfileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSecurityProfileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateSecurityProfileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSecurityProfileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest";
  }
  protected:
  explicit UpdateSecurityProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecurityprofileFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.SecurityProfile securityprofile = 1;
  bool has_securityprofile() const;
  private:
  bool _internal_has_securityprofile() const;
  public:
  void clear_securityprofile();
  const ::opi_api::network::cloud::v1alpha1::SecurityProfile& securityprofile() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SecurityProfile* release_securityprofile();
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* mutable_securityprofile();
  void set_allocated_securityprofile(::opi_api::network::cloud::v1alpha1::SecurityProfile* securityprofile);
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityProfile& _internal_securityprofile() const;
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* _internal_mutable_securityprofile();
  public:
  void unsafe_arena_set_allocated_securityprofile(
      ::opi_api::network::cloud::v1alpha1::SecurityProfile* securityprofile);
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* unsafe_arena_release_securityprofile();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* securityprofile_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListSecurityProfilesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest) */ {
 public:
  inline ListSecurityProfilesRequest() : ListSecurityProfilesRequest(nullptr) {}
  ~ListSecurityProfilesRequest() override;
  explicit constexpr ListSecurityProfilesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSecurityProfilesRequest(const ListSecurityProfilesRequest& from);
  ListSecurityProfilesRequest(ListSecurityProfilesRequest&& from) noexcept
    : ListSecurityProfilesRequest() {
    *this = ::std::move(from);
  }

  inline ListSecurityProfilesRequest& operator=(const ListSecurityProfilesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSecurityProfilesRequest& operator=(ListSecurityProfilesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSecurityProfilesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSecurityProfilesRequest* internal_default_instance() {
    return reinterpret_cast<const ListSecurityProfilesRequest*>(
               &_ListSecurityProfilesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(ListSecurityProfilesRequest& a, ListSecurityProfilesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSecurityProfilesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSecurityProfilesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSecurityProfilesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSecurityProfilesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSecurityProfilesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSecurityProfilesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSecurityProfilesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest";
  }
  protected:
  explicit ListSecurityProfilesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class ListSecurityProfilesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse) */ {
 public:
  inline ListSecurityProfilesResponse() : ListSecurityProfilesResponse(nullptr) {}
  ~ListSecurityProfilesResponse() override;
  explicit constexpr ListSecurityProfilesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSecurityProfilesResponse(const ListSecurityProfilesResponse& from);
  ListSecurityProfilesResponse(ListSecurityProfilesResponse&& from) noexcept
    : ListSecurityProfilesResponse() {
    *this = ::std::move(from);
  }

  inline ListSecurityProfilesResponse& operator=(const ListSecurityProfilesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSecurityProfilesResponse& operator=(ListSecurityProfilesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSecurityProfilesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSecurityProfilesResponse* internal_default_instance() {
    return reinterpret_cast<const ListSecurityProfilesResponse*>(
               &_ListSecurityProfilesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(ListSecurityProfilesResponse& a, ListSecurityProfilesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSecurityProfilesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSecurityProfilesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSecurityProfilesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSecurityProfilesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSecurityProfilesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSecurityProfilesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSecurityProfilesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse";
  }
  protected:
  explicit ListSecurityProfilesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecurityprofileFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.SecurityProfile securityprofile = 1;
  int securityprofile_size() const;
  private:
  int _internal_securityprofile_size() const;
  public:
  void clear_securityprofile();
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* mutable_securityprofile(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityProfile >*
      mutable_securityprofile();
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityProfile& _internal_securityprofile(int index) const;
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* _internal_add_securityprofile();
  public:
  const ::opi_api::network::cloud::v1alpha1::SecurityProfile& securityprofile(int index) const;
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* add_securityprofile();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityProfile >&
      securityprofile() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityProfile > securityprofile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// -------------------------------------------------------------------

class GetSecurityProfileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.GetSecurityProfileRequest) */ {
 public:
  inline GetSecurityProfileRequest() : GetSecurityProfileRequest(nullptr) {}
  ~GetSecurityProfileRequest() override;
  explicit constexpr GetSecurityProfileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSecurityProfileRequest(const GetSecurityProfileRequest& from);
  GetSecurityProfileRequest(GetSecurityProfileRequest&& from) noexcept
    : GetSecurityProfileRequest() {
    *this = ::std::move(from);
  }

  inline GetSecurityProfileRequest& operator=(const GetSecurityProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSecurityProfileRequest& operator=(GetSecurityProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSecurityProfileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSecurityProfileRequest* internal_default_instance() {
    return reinterpret_cast<const GetSecurityProfileRequest*>(
               &_GetSecurityProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(GetSecurityProfileRequest& a, GetSecurityProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSecurityProfileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSecurityProfileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSecurityProfileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSecurityProfileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSecurityProfileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSecurityProfileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSecurityProfileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.GetSecurityProfileRequest";
  }
  protected:
  explicit GetSecurityProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.GetSecurityProfileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cloudrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetDeviceCapabilitiesRequest

// -------------------------------------------------------------------

// CreateDeviceRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateDeviceRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateDeviceRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateDeviceRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDeviceRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateDeviceRequest.parent)
}
inline std::string* CreateDeviceRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateDeviceRequest.parent)
  return _s;
}
inline const std::string& CreateDeviceRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateDeviceRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateDeviceRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateDeviceRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateDeviceRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateDeviceRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateDeviceRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.Device device = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateDeviceRequest::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool CreateDeviceRequest::has_device() const {
  return _internal_has_device();
}
inline const ::opi_api::network::cloud::v1alpha1::Device& CreateDeviceRequest::_internal_device() const {
  const ::opi_api::network::cloud::v1alpha1::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Device&>(
      ::opi_api::network::cloud::v1alpha1::_Device_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Device& CreateDeviceRequest::device() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateDeviceRequest.device)
  return _internal_device();
}
inline void CreateDeviceRequest::unsafe_arena_set_allocated_device(
    ::opi_api::network::cloud::v1alpha1::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateDeviceRequest.device)
}
inline ::opi_api::network::cloud::v1alpha1::Device* CreateDeviceRequest::release_device() {
  
  ::opi_api::network::cloud::v1alpha1::Device* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Device* CreateDeviceRequest::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateDeviceRequest.device)
  
  ::opi_api::network::cloud::v1alpha1::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Device* CreateDeviceRequest::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Device>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::opi_api::network::cloud::v1alpha1::Device* CreateDeviceRequest::mutable_device() {
  ::opi_api::network::cloud::v1alpha1::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateDeviceRequest.device)
  return _msg;
}
inline void CreateDeviceRequest::set_allocated_device(::opi_api::network::cloud::v1alpha1::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device));
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateDeviceRequest.device)
}

// string device_id = 3;
inline void CreateDeviceRequest::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& CreateDeviceRequest::device_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateDeviceRequest.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateDeviceRequest::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateDeviceRequest.device_id)
}
inline std::string* CreateDeviceRequest::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateDeviceRequest.device_id)
  return _s;
}
inline const std::string& CreateDeviceRequest::_internal_device_id() const {
  return device_id_.Get();
}
inline void CreateDeviceRequest::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateDeviceRequest::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateDeviceRequest::release_device_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateDeviceRequest.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateDeviceRequest::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateDeviceRequest.device_id)
}

// -------------------------------------------------------------------

// DeleteDeviceRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteDeviceRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteDeviceRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteDeviceRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteDeviceRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteDeviceRequest.id)
}
inline std::string* DeleteDeviceRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteDeviceRequest.id)
  return _s;
}
inline const std::string& DeleteDeviceRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteDeviceRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteDeviceRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteDeviceRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteDeviceRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteDeviceRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteDeviceRequest.id)
}

// -------------------------------------------------------------------

// UpdateDeviceRequest

// .opi_api.network.cloud.v1alpha1.Device device = 1;
inline bool UpdateDeviceRequest::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool UpdateDeviceRequest::has_device() const {
  return _internal_has_device();
}
inline const ::opi_api::network::cloud::v1alpha1::Device& UpdateDeviceRequest::_internal_device() const {
  const ::opi_api::network::cloud::v1alpha1::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Device&>(
      ::opi_api::network::cloud::v1alpha1::_Device_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Device& UpdateDeviceRequest::device() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateDeviceRequest.device)
  return _internal_device();
}
inline void UpdateDeviceRequest::unsafe_arena_set_allocated_device(
    ::opi_api::network::cloud::v1alpha1::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateDeviceRequest.device)
}
inline ::opi_api::network::cloud::v1alpha1::Device* UpdateDeviceRequest::release_device() {
  
  ::opi_api::network::cloud::v1alpha1::Device* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Device* UpdateDeviceRequest::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateDeviceRequest.device)
  
  ::opi_api::network::cloud::v1alpha1::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Device* UpdateDeviceRequest::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Device>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::opi_api::network::cloud::v1alpha1::Device* UpdateDeviceRequest::mutable_device() {
  ::opi_api::network::cloud::v1alpha1::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateDeviceRequest.device)
  return _msg;
}
inline void UpdateDeviceRequest::set_allocated_device(::opi_api::network::cloud::v1alpha1::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device));
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateDeviceRequest.device)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateDeviceRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateDeviceRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateDeviceRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateDeviceRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateDeviceRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateDeviceRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateDeviceRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDeviceRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDeviceRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateDeviceRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDeviceRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDeviceRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateDeviceRequest.update_mask)
  return _msg;
}
inline void UpdateDeviceRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateDeviceRequest.update_mask)
}

// -------------------------------------------------------------------

// ListDevicesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListDevicesRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListDevicesRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListDevicesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDevicesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListDevicesRequest.parent)
}
inline std::string* ListDevicesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListDevicesRequest.parent)
  return _s;
}
inline const std::string& ListDevicesRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListDevicesRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListDevicesRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListDevicesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListDevicesRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListDevicesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListDevicesRequest.parent)
}

// int32 page_size = 2;
inline void ListDevicesRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListDevicesRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListDevicesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListDevicesRequest.page_size)
  return _internal_page_size();
}
inline void ListDevicesRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListDevicesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListDevicesRequest.page_size)
}

// string page_token = 3;
inline void ListDevicesRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListDevicesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListDevicesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDevicesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListDevicesRequest.page_token)
}
inline std::string* ListDevicesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListDevicesRequest.page_token)
  return _s;
}
inline const std::string& ListDevicesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListDevicesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListDevicesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListDevicesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListDevicesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListDevicesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListDevicesRequest.page_token)
}

// -------------------------------------------------------------------

// ListDevicesResponse

// repeated .opi_api.network.cloud.v1alpha1.Device device = 1;
inline int ListDevicesResponse::_internal_device_size() const {
  return device_.size();
}
inline int ListDevicesResponse::device_size() const {
  return _internal_device_size();
}
inline ::opi_api::network::cloud::v1alpha1::Device* ListDevicesResponse::mutable_device(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListDevicesResponse.device)
  return device_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Device >*
ListDevicesResponse::mutable_device() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListDevicesResponse.device)
  return &device_;
}
inline const ::opi_api::network::cloud::v1alpha1::Device& ListDevicesResponse::_internal_device(int index) const {
  return device_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::Device& ListDevicesResponse::device(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListDevicesResponse.device)
  return _internal_device(index);
}
inline ::opi_api::network::cloud::v1alpha1::Device* ListDevicesResponse::_internal_add_device() {
  return device_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::Device* ListDevicesResponse::add_device() {
  ::opi_api::network::cloud::v1alpha1::Device* _add = _internal_add_device();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListDevicesResponse.device)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Device >&
ListDevicesResponse::device() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListDevicesResponse.device)
  return device_;
}

// string next_page_token = 2;
inline void ListDevicesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListDevicesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListDevicesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListDevicesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListDevicesResponse.next_page_token)
}
inline std::string* ListDevicesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListDevicesResponse.next_page_token)
  return _s;
}
inline const std::string& ListDevicesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListDevicesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListDevicesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListDevicesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListDevicesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListDevicesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListDevicesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetDeviceRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetDeviceRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetDeviceRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetDeviceRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDeviceRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetDeviceRequest.id)
}
inline std::string* GetDeviceRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetDeviceRequest.id)
  return _s;
}
inline const std::string& GetDeviceRequest::_internal_id() const {
  return id_.Get();
}
inline void GetDeviceRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDeviceRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDeviceRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetDeviceRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDeviceRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetDeviceRequest.id)
}

// -------------------------------------------------------------------

// UpdatePortRequest

// .opi_api.network.cloud.v1alpha1.Port port = 1;
inline bool UpdatePortRequest::_internal_has_port() const {
  return this != internal_default_instance() && port_ != nullptr;
}
inline bool UpdatePortRequest::has_port() const {
  return _internal_has_port();
}
inline const ::opi_api::network::cloud::v1alpha1::Port& UpdatePortRequest::_internal_port() const {
  const ::opi_api::network::cloud::v1alpha1::Port* p = port_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Port&>(
      ::opi_api::network::cloud::v1alpha1::_Port_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Port& UpdatePortRequest::port() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdatePortRequest.port)
  return _internal_port();
}
inline void UpdatePortRequest::unsafe_arena_set_allocated_port(
    ::opi_api::network::cloud::v1alpha1::Port* port) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(port_);
  }
  port_ = port;
  if (port) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdatePortRequest.port)
}
inline ::opi_api::network::cloud::v1alpha1::Port* UpdatePortRequest::release_port() {
  
  ::opi_api::network::cloud::v1alpha1::Port* temp = port_;
  port_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Port* UpdatePortRequest::unsafe_arena_release_port() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdatePortRequest.port)
  
  ::opi_api::network::cloud::v1alpha1::Port* temp = port_;
  port_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Port* UpdatePortRequest::_internal_mutable_port() {
  
  if (port_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Port>(GetArenaForAllocation());
    port_ = p;
  }
  return port_;
}
inline ::opi_api::network::cloud::v1alpha1::Port* UpdatePortRequest::mutable_port() {
  ::opi_api::network::cloud::v1alpha1::Port* _msg = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdatePortRequest.port)
  return _msg;
}
inline void UpdatePortRequest::set_allocated_port(::opi_api::network::cloud::v1alpha1::Port* port) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(port_);
  }
  if (port) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(port));
    if (message_arena != submessage_arena) {
      port = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, port, submessage_arena);
    }
    
  } else {
    
  }
  port_ = port;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdatePortRequest.port)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdatePortRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdatePortRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdatePortRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdatePortRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdatePortRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdatePortRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdatePortRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePortRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePortRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdatePortRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePortRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdatePortRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdatePortRequest.update_mask)
  return _msg;
}
inline void UpdatePortRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdatePortRequest.update_mask)
}

// -------------------------------------------------------------------

// ListPortsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListPortsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListPortsRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListPortsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPortsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListPortsRequest.parent)
}
inline std::string* ListPortsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListPortsRequest.parent)
  return _s;
}
inline const std::string& ListPortsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListPortsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListPortsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListPortsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListPortsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListPortsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListPortsRequest.parent)
}

// int32 page_size = 2;
inline void ListPortsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListPortsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListPortsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListPortsRequest.page_size)
  return _internal_page_size();
}
inline void ListPortsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListPortsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListPortsRequest.page_size)
}

// string page_token = 3;
inline void ListPortsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListPortsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListPortsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPortsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListPortsRequest.page_token)
}
inline std::string* ListPortsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListPortsRequest.page_token)
  return _s;
}
inline const std::string& ListPortsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListPortsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListPortsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListPortsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListPortsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListPortsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListPortsRequest.page_token)
}

// -------------------------------------------------------------------

// ListPortsResponse

// repeated .opi_api.network.cloud.v1alpha1.Port port = 1;
inline int ListPortsResponse::_internal_port_size() const {
  return port_.size();
}
inline int ListPortsResponse::port_size() const {
  return _internal_port_size();
}
inline ::opi_api::network::cloud::v1alpha1::Port* ListPortsResponse::mutable_port(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListPortsResponse.port)
  return port_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Port >*
ListPortsResponse::mutable_port() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListPortsResponse.port)
  return &port_;
}
inline const ::opi_api::network::cloud::v1alpha1::Port& ListPortsResponse::_internal_port(int index) const {
  return port_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::Port& ListPortsResponse::port(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListPortsResponse.port)
  return _internal_port(index);
}
inline ::opi_api::network::cloud::v1alpha1::Port* ListPortsResponse::_internal_add_port() {
  return port_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::Port* ListPortsResponse::add_port() {
  ::opi_api::network::cloud::v1alpha1::Port* _add = _internal_add_port();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListPortsResponse.port)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Port >&
ListPortsResponse::port() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListPortsResponse.port)
  return port_;
}

// string next_page_token = 2;
inline void ListPortsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListPortsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListPortsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPortsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListPortsResponse.next_page_token)
}
inline std::string* ListPortsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListPortsResponse.next_page_token)
  return _s;
}
inline const std::string& ListPortsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListPortsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListPortsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListPortsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListPortsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListPortsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListPortsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetPortRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetPortRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetPortRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetPortRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPortRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetPortRequest.id)
}
inline std::string* GetPortRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetPortRequest.id)
  return _s;
}
inline const std::string& GetPortRequest::_internal_id() const {
  return id_.Get();
}
inline void GetPortRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPortRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPortRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetPortRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPortRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetPortRequest.id)
}

// -------------------------------------------------------------------

// CreateVnicRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateVnicRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateVnicRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateVnicRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateVnicRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateVnicRequest.parent)
}
inline std::string* CreateVnicRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateVnicRequest.parent)
  return _s;
}
inline const std::string& CreateVnicRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateVnicRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateVnicRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateVnicRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateVnicRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateVnicRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateVnicRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.Vnic vnic = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateVnicRequest::_internal_has_vnic() const {
  return this != internal_default_instance() && vnic_ != nullptr;
}
inline bool CreateVnicRequest::has_vnic() const {
  return _internal_has_vnic();
}
inline const ::opi_api::network::cloud::v1alpha1::Vnic& CreateVnicRequest::_internal_vnic() const {
  const ::opi_api::network::cloud::v1alpha1::Vnic* p = vnic_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Vnic&>(
      ::opi_api::network::cloud::v1alpha1::_Vnic_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Vnic& CreateVnicRequest::vnic() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateVnicRequest.vnic)
  return _internal_vnic();
}
inline void CreateVnicRequest::unsafe_arena_set_allocated_vnic(
    ::opi_api::network::cloud::v1alpha1::Vnic* vnic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vnic_);
  }
  vnic_ = vnic;
  if (vnic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateVnicRequest.vnic)
}
inline ::opi_api::network::cloud::v1alpha1::Vnic* CreateVnicRequest::release_vnic() {
  
  ::opi_api::network::cloud::v1alpha1::Vnic* temp = vnic_;
  vnic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Vnic* CreateVnicRequest::unsafe_arena_release_vnic() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateVnicRequest.vnic)
  
  ::opi_api::network::cloud::v1alpha1::Vnic* temp = vnic_;
  vnic_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Vnic* CreateVnicRequest::_internal_mutable_vnic() {
  
  if (vnic_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Vnic>(GetArenaForAllocation());
    vnic_ = p;
  }
  return vnic_;
}
inline ::opi_api::network::cloud::v1alpha1::Vnic* CreateVnicRequest::mutable_vnic() {
  ::opi_api::network::cloud::v1alpha1::Vnic* _msg = _internal_mutable_vnic();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateVnicRequest.vnic)
  return _msg;
}
inline void CreateVnicRequest::set_allocated_vnic(::opi_api::network::cloud::v1alpha1::Vnic* vnic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vnic_);
  }
  if (vnic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vnic));
    if (message_arena != submessage_arena) {
      vnic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vnic, submessage_arena);
    }
    
  } else {
    
  }
  vnic_ = vnic;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateVnicRequest.vnic)
}

// string vnic_id = 3;
inline void CreateVnicRequest::clear_vnic_id() {
  vnic_id_.ClearToEmpty();
}
inline const std::string& CreateVnicRequest::vnic_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateVnicRequest.vnic_id)
  return _internal_vnic_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateVnicRequest::set_vnic_id(ArgT0&& arg0, ArgT... args) {
 
 vnic_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateVnicRequest.vnic_id)
}
inline std::string* CreateVnicRequest::mutable_vnic_id() {
  std::string* _s = _internal_mutable_vnic_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateVnicRequest.vnic_id)
  return _s;
}
inline const std::string& CreateVnicRequest::_internal_vnic_id() const {
  return vnic_id_.Get();
}
inline void CreateVnicRequest::_internal_set_vnic_id(const std::string& value) {
  
  vnic_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateVnicRequest::_internal_mutable_vnic_id() {
  
  return vnic_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateVnicRequest::release_vnic_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateVnicRequest.vnic_id)
  return vnic_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateVnicRequest::set_allocated_vnic_id(std::string* vnic_id) {
  if (vnic_id != nullptr) {
    
  } else {
    
  }
  vnic_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vnic_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vnic_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vnic_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateVnicRequest.vnic_id)
}

// -------------------------------------------------------------------

// DeleteVnicRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteVnicRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteVnicRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteVnicRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteVnicRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteVnicRequest.id)
}
inline std::string* DeleteVnicRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteVnicRequest.id)
  return _s;
}
inline const std::string& DeleteVnicRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteVnicRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteVnicRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteVnicRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteVnicRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteVnicRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteVnicRequest.id)
}

// -------------------------------------------------------------------

// UpdateVnicRequest

// .opi_api.network.cloud.v1alpha1.Vnic vnic = 1;
inline bool UpdateVnicRequest::_internal_has_vnic() const {
  return this != internal_default_instance() && vnic_ != nullptr;
}
inline bool UpdateVnicRequest::has_vnic() const {
  return _internal_has_vnic();
}
inline const ::opi_api::network::cloud::v1alpha1::Vnic& UpdateVnicRequest::_internal_vnic() const {
  const ::opi_api::network::cloud::v1alpha1::Vnic* p = vnic_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Vnic&>(
      ::opi_api::network::cloud::v1alpha1::_Vnic_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Vnic& UpdateVnicRequest::vnic() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateVnicRequest.vnic)
  return _internal_vnic();
}
inline void UpdateVnicRequest::unsafe_arena_set_allocated_vnic(
    ::opi_api::network::cloud::v1alpha1::Vnic* vnic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vnic_);
  }
  vnic_ = vnic;
  if (vnic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateVnicRequest.vnic)
}
inline ::opi_api::network::cloud::v1alpha1::Vnic* UpdateVnicRequest::release_vnic() {
  
  ::opi_api::network::cloud::v1alpha1::Vnic* temp = vnic_;
  vnic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Vnic* UpdateVnicRequest::unsafe_arena_release_vnic() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateVnicRequest.vnic)
  
  ::opi_api::network::cloud::v1alpha1::Vnic* temp = vnic_;
  vnic_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Vnic* UpdateVnicRequest::_internal_mutable_vnic() {
  
  if (vnic_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Vnic>(GetArenaForAllocation());
    vnic_ = p;
  }
  return vnic_;
}
inline ::opi_api::network::cloud::v1alpha1::Vnic* UpdateVnicRequest::mutable_vnic() {
  ::opi_api::network::cloud::v1alpha1::Vnic* _msg = _internal_mutable_vnic();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateVnicRequest.vnic)
  return _msg;
}
inline void UpdateVnicRequest::set_allocated_vnic(::opi_api::network::cloud::v1alpha1::Vnic* vnic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vnic_);
  }
  if (vnic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vnic));
    if (message_arena != submessage_arena) {
      vnic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vnic, submessage_arena);
    }
    
  } else {
    
  }
  vnic_ = vnic;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateVnicRequest.vnic)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateVnicRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateVnicRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateVnicRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateVnicRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateVnicRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateVnicRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateVnicRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVnicRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVnicRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateVnicRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVnicRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVnicRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateVnicRequest.update_mask)
  return _msg;
}
inline void UpdateVnicRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateVnicRequest.update_mask)
}

// -------------------------------------------------------------------

// ListVnicsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListVnicsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListVnicsRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListVnicsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVnicsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListVnicsRequest.parent)
}
inline std::string* ListVnicsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListVnicsRequest.parent)
  return _s;
}
inline const std::string& ListVnicsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListVnicsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListVnicsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListVnicsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListVnicsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListVnicsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListVnicsRequest.parent)
}

// int32 page_size = 2;
inline void ListVnicsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListVnicsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListVnicsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListVnicsRequest.page_size)
  return _internal_page_size();
}
inline void ListVnicsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListVnicsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListVnicsRequest.page_size)
}

// string page_token = 3;
inline void ListVnicsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListVnicsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListVnicsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVnicsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListVnicsRequest.page_token)
}
inline std::string* ListVnicsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListVnicsRequest.page_token)
  return _s;
}
inline const std::string& ListVnicsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListVnicsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListVnicsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListVnicsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListVnicsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListVnicsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListVnicsRequest.page_token)
}

// -------------------------------------------------------------------

// ListVnicsResponse

// repeated .opi_api.network.cloud.v1alpha1.Vnic vnic = 1;
inline int ListVnicsResponse::_internal_vnic_size() const {
  return vnic_.size();
}
inline int ListVnicsResponse::vnic_size() const {
  return _internal_vnic_size();
}
inline ::opi_api::network::cloud::v1alpha1::Vnic* ListVnicsResponse::mutable_vnic(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListVnicsResponse.vnic)
  return vnic_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Vnic >*
ListVnicsResponse::mutable_vnic() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListVnicsResponse.vnic)
  return &vnic_;
}
inline const ::opi_api::network::cloud::v1alpha1::Vnic& ListVnicsResponse::_internal_vnic(int index) const {
  return vnic_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::Vnic& ListVnicsResponse::vnic(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListVnicsResponse.vnic)
  return _internal_vnic(index);
}
inline ::opi_api::network::cloud::v1alpha1::Vnic* ListVnicsResponse::_internal_add_vnic() {
  return vnic_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::Vnic* ListVnicsResponse::add_vnic() {
  ::opi_api::network::cloud::v1alpha1::Vnic* _add = _internal_add_vnic();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListVnicsResponse.vnic)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Vnic >&
ListVnicsResponse::vnic() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListVnicsResponse.vnic)
  return vnic_;
}

// string next_page_token = 2;
inline void ListVnicsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListVnicsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListVnicsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVnicsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListVnicsResponse.next_page_token)
}
inline std::string* ListVnicsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListVnicsResponse.next_page_token)
  return _s;
}
inline const std::string& ListVnicsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListVnicsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListVnicsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListVnicsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListVnicsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListVnicsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListVnicsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetVnicRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetVnicRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetVnicRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetVnicRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVnicRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetVnicRequest.id)
}
inline std::string* GetVnicRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetVnicRequest.id)
  return _s;
}
inline const std::string& GetVnicRequest::_internal_id() const {
  return id_.Get();
}
inline void GetVnicRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetVnicRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetVnicRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetVnicRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetVnicRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetVnicRequest.id)
}

// -------------------------------------------------------------------

// CreateInterfaceRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateInterfaceRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateInterfaceRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateInterfaceRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.parent)
}
inline std::string* CreateInterfaceRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.parent)
  return _s;
}
inline const std::string& CreateInterfaceRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateInterfaceRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateInterfaceRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateInterfaceRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateInterfaceRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.Interface interface = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateInterfaceRequest::_internal_has_interface() const {
  return this != internal_default_instance() && interface_ != nullptr;
}
inline bool CreateInterfaceRequest::has_interface() const {
  return _internal_has_interface();
}
inline const ::opi_api::network::cloud::v1alpha1::Interface& CreateInterfaceRequest::_internal_interface() const {
  const ::opi_api::network::cloud::v1alpha1::Interface* p = interface_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Interface&>(
      ::opi_api::network::cloud::v1alpha1::_Interface_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Interface& CreateInterfaceRequest::interface() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.interface)
  return _internal_interface();
}
inline void CreateInterfaceRequest::unsafe_arena_set_allocated_interface(
    ::opi_api::network::cloud::v1alpha1::Interface* interface) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  interface_ = interface;
  if (interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.interface)
}
inline ::opi_api::network::cloud::v1alpha1::Interface* CreateInterfaceRequest::release_interface() {
  
  ::opi_api::network::cloud::v1alpha1::Interface* temp = interface_;
  interface_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Interface* CreateInterfaceRequest::unsafe_arena_release_interface() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.interface)
  
  ::opi_api::network::cloud::v1alpha1::Interface* temp = interface_;
  interface_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Interface* CreateInterfaceRequest::_internal_mutable_interface() {
  
  if (interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Interface>(GetArenaForAllocation());
    interface_ = p;
  }
  return interface_;
}
inline ::opi_api::network::cloud::v1alpha1::Interface* CreateInterfaceRequest::mutable_interface() {
  ::opi_api::network::cloud::v1alpha1::Interface* _msg = _internal_mutable_interface();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.interface)
  return _msg;
}
inline void CreateInterfaceRequest::set_allocated_interface(::opi_api::network::cloud::v1alpha1::Interface* interface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  if (interface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface));
    if (message_arena != submessage_arena) {
      interface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.interface)
}

// string interface_id = 3;
inline void CreateInterfaceRequest::clear_interface_id() {
  interface_id_.ClearToEmpty();
}
inline const std::string& CreateInterfaceRequest::interface_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.interface_id)
  return _internal_interface_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateInterfaceRequest::set_interface_id(ArgT0&& arg0, ArgT... args) {
 
 interface_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.interface_id)
}
inline std::string* CreateInterfaceRequest::mutable_interface_id() {
  std::string* _s = _internal_mutable_interface_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.interface_id)
  return _s;
}
inline const std::string& CreateInterfaceRequest::_internal_interface_id() const {
  return interface_id_.Get();
}
inline void CreateInterfaceRequest::_internal_set_interface_id(const std::string& value) {
  
  interface_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateInterfaceRequest::_internal_mutable_interface_id() {
  
  return interface_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateInterfaceRequest::release_interface_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.interface_id)
  return interface_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateInterfaceRequest::set_allocated_interface_id(std::string* interface_id) {
  if (interface_id != nullptr) {
    
  } else {
    
  }
  interface_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (interface_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    interface_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateInterfaceRequest.interface_id)
}

// -------------------------------------------------------------------

// DeleteInterfaceRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteInterfaceRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteInterfaceRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteInterfaceRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteInterfaceRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteInterfaceRequest.id)
}
inline std::string* DeleteInterfaceRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteInterfaceRequest.id)
  return _s;
}
inline const std::string& DeleteInterfaceRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteInterfaceRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteInterfaceRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteInterfaceRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteInterfaceRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteInterfaceRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteInterfaceRequest.id)
}

// -------------------------------------------------------------------

// UpdateInterfaceRequest

// .opi_api.network.cloud.v1alpha1.Interface interface = 1;
inline bool UpdateInterfaceRequest::_internal_has_interface() const {
  return this != internal_default_instance() && interface_ != nullptr;
}
inline bool UpdateInterfaceRequest::has_interface() const {
  return _internal_has_interface();
}
inline const ::opi_api::network::cloud::v1alpha1::Interface& UpdateInterfaceRequest::_internal_interface() const {
  const ::opi_api::network::cloud::v1alpha1::Interface* p = interface_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Interface&>(
      ::opi_api::network::cloud::v1alpha1::_Interface_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Interface& UpdateInterfaceRequest::interface() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest.interface)
  return _internal_interface();
}
inline void UpdateInterfaceRequest::unsafe_arena_set_allocated_interface(
    ::opi_api::network::cloud::v1alpha1::Interface* interface) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  interface_ = interface;
  if (interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest.interface)
}
inline ::opi_api::network::cloud::v1alpha1::Interface* UpdateInterfaceRequest::release_interface() {
  
  ::opi_api::network::cloud::v1alpha1::Interface* temp = interface_;
  interface_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Interface* UpdateInterfaceRequest::unsafe_arena_release_interface() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest.interface)
  
  ::opi_api::network::cloud::v1alpha1::Interface* temp = interface_;
  interface_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Interface* UpdateInterfaceRequest::_internal_mutable_interface() {
  
  if (interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Interface>(GetArenaForAllocation());
    interface_ = p;
  }
  return interface_;
}
inline ::opi_api::network::cloud::v1alpha1::Interface* UpdateInterfaceRequest::mutable_interface() {
  ::opi_api::network::cloud::v1alpha1::Interface* _msg = _internal_mutable_interface();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest.interface)
  return _msg;
}
inline void UpdateInterfaceRequest::set_allocated_interface(::opi_api::network::cloud::v1alpha1::Interface* interface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  if (interface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface));
    if (message_arena != submessage_arena) {
      interface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest.interface)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateInterfaceRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateInterfaceRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateInterfaceRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateInterfaceRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateInterfaceRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateInterfaceRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateInterfaceRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateInterfaceRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateInterfaceRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest.update_mask)
  return _msg;
}
inline void UpdateInterfaceRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateInterfaceRequest.update_mask)
}

// -------------------------------------------------------------------

// ListInterfacesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListInterfacesRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListInterfacesRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListInterfacesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListInterfacesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListInterfacesRequest.parent)
}
inline std::string* ListInterfacesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListInterfacesRequest.parent)
  return _s;
}
inline const std::string& ListInterfacesRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListInterfacesRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListInterfacesRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListInterfacesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListInterfacesRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListInterfacesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListInterfacesRequest.parent)
}

// int32 page_size = 2;
inline void ListInterfacesRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListInterfacesRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListInterfacesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListInterfacesRequest.page_size)
  return _internal_page_size();
}
inline void ListInterfacesRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListInterfacesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListInterfacesRequest.page_size)
}

// string page_token = 3;
inline void ListInterfacesRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListInterfacesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListInterfacesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListInterfacesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListInterfacesRequest.page_token)
}
inline std::string* ListInterfacesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListInterfacesRequest.page_token)
  return _s;
}
inline const std::string& ListInterfacesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListInterfacesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListInterfacesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListInterfacesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListInterfacesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListInterfacesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListInterfacesRequest.page_token)
}

// -------------------------------------------------------------------

// ListInterfacesResponse

// repeated .opi_api.network.cloud.v1alpha1.Interface interface = 1;
inline int ListInterfacesResponse::_internal_interface_size() const {
  return interface_.size();
}
inline int ListInterfacesResponse::interface_size() const {
  return _internal_interface_size();
}
inline ::opi_api::network::cloud::v1alpha1::Interface* ListInterfacesResponse::mutable_interface(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListInterfacesResponse.interface)
  return interface_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Interface >*
ListInterfacesResponse::mutable_interface() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListInterfacesResponse.interface)
  return &interface_;
}
inline const ::opi_api::network::cloud::v1alpha1::Interface& ListInterfacesResponse::_internal_interface(int index) const {
  return interface_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::Interface& ListInterfacesResponse::interface(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListInterfacesResponse.interface)
  return _internal_interface(index);
}
inline ::opi_api::network::cloud::v1alpha1::Interface* ListInterfacesResponse::_internal_add_interface() {
  return interface_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::Interface* ListInterfacesResponse::add_interface() {
  ::opi_api::network::cloud::v1alpha1::Interface* _add = _internal_add_interface();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListInterfacesResponse.interface)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Interface >&
ListInterfacesResponse::interface() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListInterfacesResponse.interface)
  return interface_;
}

// string next_page_token = 2;
inline void ListInterfacesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListInterfacesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListInterfacesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListInterfacesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListInterfacesResponse.next_page_token)
}
inline std::string* ListInterfacesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListInterfacesResponse.next_page_token)
  return _s;
}
inline const std::string& ListInterfacesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListInterfacesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListInterfacesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListInterfacesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListInterfacesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListInterfacesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListInterfacesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetInterfaceRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetInterfaceRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetInterfaceRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetInterfaceRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInterfaceRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetInterfaceRequest.id)
}
inline std::string* GetInterfaceRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetInterfaceRequest.id)
  return _s;
}
inline const std::string& GetInterfaceRequest::_internal_id() const {
  return id_.Get();
}
inline void GetInterfaceRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetInterfaceRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetInterfaceRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetInterfaceRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetInterfaceRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetInterfaceRequest.id)
}

// -------------------------------------------------------------------

// CreateRouteTableRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateRouteTableRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateRouteTableRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRouteTableRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.parent)
}
inline std::string* CreateRouteTableRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.parent)
  return _s;
}
inline const std::string& CreateRouteTableRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateRouteTableRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRouteTableRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRouteTableRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRouteTableRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.RouteTable routetable = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateRouteTableRequest::_internal_has_routetable() const {
  return this != internal_default_instance() && routetable_ != nullptr;
}
inline bool CreateRouteTableRequest::has_routetable() const {
  return _internal_has_routetable();
}
inline const ::opi_api::network::cloud::v1alpha1::RouteTable& CreateRouteTableRequest::_internal_routetable() const {
  const ::opi_api::network::cloud::v1alpha1::RouteTable* p = routetable_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::RouteTable&>(
      ::opi_api::network::cloud::v1alpha1::_RouteTable_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::RouteTable& CreateRouteTableRequest::routetable() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.routetable)
  return _internal_routetable();
}
inline void CreateRouteTableRequest::unsafe_arena_set_allocated_routetable(
    ::opi_api::network::cloud::v1alpha1::RouteTable* routetable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routetable_);
  }
  routetable_ = routetable;
  if (routetable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.routetable)
}
inline ::opi_api::network::cloud::v1alpha1::RouteTable* CreateRouteTableRequest::release_routetable() {
  
  ::opi_api::network::cloud::v1alpha1::RouteTable* temp = routetable_;
  routetable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::RouteTable* CreateRouteTableRequest::unsafe_arena_release_routetable() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.routetable)
  
  ::opi_api::network::cloud::v1alpha1::RouteTable* temp = routetable_;
  routetable_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::RouteTable* CreateRouteTableRequest::_internal_mutable_routetable() {
  
  if (routetable_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::RouteTable>(GetArenaForAllocation());
    routetable_ = p;
  }
  return routetable_;
}
inline ::opi_api::network::cloud::v1alpha1::RouteTable* CreateRouteTableRequest::mutable_routetable() {
  ::opi_api::network::cloud::v1alpha1::RouteTable* _msg = _internal_mutable_routetable();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.routetable)
  return _msg;
}
inline void CreateRouteTableRequest::set_allocated_routetable(::opi_api::network::cloud::v1alpha1::RouteTable* routetable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(routetable_);
  }
  if (routetable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routetable));
    if (message_arena != submessage_arena) {
      routetable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routetable, submessage_arena);
    }
    
  } else {
    
  }
  routetable_ = routetable;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.routetable)
}

// string routetable_id = 3;
inline void CreateRouteTableRequest::clear_routetable_id() {
  routetable_id_.ClearToEmpty();
}
inline const std::string& CreateRouteTableRequest::routetable_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.routetable_id)
  return _internal_routetable_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRouteTableRequest::set_routetable_id(ArgT0&& arg0, ArgT... args) {
 
 routetable_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.routetable_id)
}
inline std::string* CreateRouteTableRequest::mutable_routetable_id() {
  std::string* _s = _internal_mutable_routetable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.routetable_id)
  return _s;
}
inline const std::string& CreateRouteTableRequest::_internal_routetable_id() const {
  return routetable_id_.Get();
}
inline void CreateRouteTableRequest::_internal_set_routetable_id(const std::string& value) {
  
  routetable_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRouteTableRequest::_internal_mutable_routetable_id() {
  
  return routetable_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRouteTableRequest::release_routetable_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.routetable_id)
  return routetable_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRouteTableRequest::set_allocated_routetable_id(std::string* routetable_id) {
  if (routetable_id != nullptr) {
    
  } else {
    
  }
  routetable_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), routetable_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (routetable_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    routetable_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateRouteTableRequest.routetable_id)
}

// -------------------------------------------------------------------

// DeleteRouteTableRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteRouteTableRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteRouteTableRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteRouteTableRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRouteTableRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteRouteTableRequest.id)
}
inline std::string* DeleteRouteTableRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteRouteTableRequest.id)
  return _s;
}
inline const std::string& DeleteRouteTableRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteRouteTableRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRouteTableRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRouteTableRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteRouteTableRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRouteTableRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteRouteTableRequest.id)
}

// -------------------------------------------------------------------

// UpdateRouteTableRequest

// .opi_api.network.cloud.v1alpha1.RouteTable routetable = 1;
inline bool UpdateRouteTableRequest::_internal_has_routetable() const {
  return this != internal_default_instance() && routetable_ != nullptr;
}
inline bool UpdateRouteTableRequest::has_routetable() const {
  return _internal_has_routetable();
}
inline const ::opi_api::network::cloud::v1alpha1::RouteTable& UpdateRouteTableRequest::_internal_routetable() const {
  const ::opi_api::network::cloud::v1alpha1::RouteTable* p = routetable_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::RouteTable&>(
      ::opi_api::network::cloud::v1alpha1::_RouteTable_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::RouteTable& UpdateRouteTableRequest::routetable() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest.routetable)
  return _internal_routetable();
}
inline void UpdateRouteTableRequest::unsafe_arena_set_allocated_routetable(
    ::opi_api::network::cloud::v1alpha1::RouteTable* routetable) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routetable_);
  }
  routetable_ = routetable;
  if (routetable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest.routetable)
}
inline ::opi_api::network::cloud::v1alpha1::RouteTable* UpdateRouteTableRequest::release_routetable() {
  
  ::opi_api::network::cloud::v1alpha1::RouteTable* temp = routetable_;
  routetable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::RouteTable* UpdateRouteTableRequest::unsafe_arena_release_routetable() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest.routetable)
  
  ::opi_api::network::cloud::v1alpha1::RouteTable* temp = routetable_;
  routetable_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::RouteTable* UpdateRouteTableRequest::_internal_mutable_routetable() {
  
  if (routetable_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::RouteTable>(GetArenaForAllocation());
    routetable_ = p;
  }
  return routetable_;
}
inline ::opi_api::network::cloud::v1alpha1::RouteTable* UpdateRouteTableRequest::mutable_routetable() {
  ::opi_api::network::cloud::v1alpha1::RouteTable* _msg = _internal_mutable_routetable();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest.routetable)
  return _msg;
}
inline void UpdateRouteTableRequest::set_allocated_routetable(::opi_api::network::cloud::v1alpha1::RouteTable* routetable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(routetable_);
  }
  if (routetable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routetable));
    if (message_arena != submessage_arena) {
      routetable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routetable, submessage_arena);
    }
    
  } else {
    
  }
  routetable_ = routetable;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest.routetable)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateRouteTableRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateRouteTableRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateRouteTableRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateRouteTableRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateRouteTableRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateRouteTableRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateRouteTableRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateRouteTableRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateRouteTableRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest.update_mask)
  return _msg;
}
inline void UpdateRouteTableRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateRouteTableRequest.update_mask)
}

// -------------------------------------------------------------------

// ListRouteTablesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListRouteTablesRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListRouteTablesRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListRouteTablesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRouteTablesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListRouteTablesRequest.parent)
}
inline std::string* ListRouteTablesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListRouteTablesRequest.parent)
  return _s;
}
inline const std::string& ListRouteTablesRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListRouteTablesRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListRouteTablesRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListRouteTablesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListRouteTablesRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListRouteTablesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListRouteTablesRequest.parent)
}

// int32 page_size = 2;
inline void ListRouteTablesRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListRouteTablesRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListRouteTablesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListRouteTablesRequest.page_size)
  return _internal_page_size();
}
inline void ListRouteTablesRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListRouteTablesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListRouteTablesRequest.page_size)
}

// string page_token = 3;
inline void ListRouteTablesRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListRouteTablesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListRouteTablesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRouteTablesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListRouteTablesRequest.page_token)
}
inline std::string* ListRouteTablesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListRouteTablesRequest.page_token)
  return _s;
}
inline const std::string& ListRouteTablesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListRouteTablesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListRouteTablesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListRouteTablesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListRouteTablesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListRouteTablesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListRouteTablesRequest.page_token)
}

// -------------------------------------------------------------------

// ListRouteTablesResponse

// repeated .opi_api.network.cloud.v1alpha1.RouteTable routetable = 1;
inline int ListRouteTablesResponse::_internal_routetable_size() const {
  return routetable_.size();
}
inline int ListRouteTablesResponse::routetable_size() const {
  return _internal_routetable_size();
}
inline ::opi_api::network::cloud::v1alpha1::RouteTable* ListRouteTablesResponse::mutable_routetable(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListRouteTablesResponse.routetable)
  return routetable_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::RouteTable >*
ListRouteTablesResponse::mutable_routetable() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListRouteTablesResponse.routetable)
  return &routetable_;
}
inline const ::opi_api::network::cloud::v1alpha1::RouteTable& ListRouteTablesResponse::_internal_routetable(int index) const {
  return routetable_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::RouteTable& ListRouteTablesResponse::routetable(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListRouteTablesResponse.routetable)
  return _internal_routetable(index);
}
inline ::opi_api::network::cloud::v1alpha1::RouteTable* ListRouteTablesResponse::_internal_add_routetable() {
  return routetable_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::RouteTable* ListRouteTablesResponse::add_routetable() {
  ::opi_api::network::cloud::v1alpha1::RouteTable* _add = _internal_add_routetable();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListRouteTablesResponse.routetable)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::RouteTable >&
ListRouteTablesResponse::routetable() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListRouteTablesResponse.routetable)
  return routetable_;
}

// string next_page_token = 2;
inline void ListRouteTablesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListRouteTablesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListRouteTablesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRouteTablesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListRouteTablesResponse.next_page_token)
}
inline std::string* ListRouteTablesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListRouteTablesResponse.next_page_token)
  return _s;
}
inline const std::string& ListRouteTablesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListRouteTablesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListRouteTablesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListRouteTablesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListRouteTablesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListRouteTablesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListRouteTablesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetRouteTableRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetRouteTableRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetRouteTableRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetRouteTableRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRouteTableRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetRouteTableRequest.id)
}
inline std::string* GetRouteTableRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetRouteTableRequest.id)
  return _s;
}
inline const std::string& GetRouteTableRequest::_internal_id() const {
  return id_.Get();
}
inline void GetRouteTableRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetRouteTableRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetRouteTableRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetRouteTableRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetRouteTableRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetRouteTableRequest.id)
}

// -------------------------------------------------------------------

// CreateRouteRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateRouteRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateRouteRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateRouteRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRouteRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateRouteRequest.parent)
}
inline std::string* CreateRouteRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateRouteRequest.parent)
  return _s;
}
inline const std::string& CreateRouteRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateRouteRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRouteRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRouteRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateRouteRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRouteRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateRouteRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.Route route = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateRouteRequest::_internal_has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline bool CreateRouteRequest::has_route() const {
  return _internal_has_route();
}
inline const ::opi_api::network::cloud::v1alpha1::Route& CreateRouteRequest::_internal_route() const {
  const ::opi_api::network::cloud::v1alpha1::Route* p = route_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Route&>(
      ::opi_api::network::cloud::v1alpha1::_Route_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Route& CreateRouteRequest::route() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateRouteRequest.route)
  return _internal_route();
}
inline void CreateRouteRequest::unsafe_arena_set_allocated_route(
    ::opi_api::network::cloud::v1alpha1::Route* route) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  route_ = route;
  if (route) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateRouteRequest.route)
}
inline ::opi_api::network::cloud::v1alpha1::Route* CreateRouteRequest::release_route() {
  
  ::opi_api::network::cloud::v1alpha1::Route* temp = route_;
  route_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Route* CreateRouteRequest::unsafe_arena_release_route() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateRouteRequest.route)
  
  ::opi_api::network::cloud::v1alpha1::Route* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Route* CreateRouteRequest::_internal_mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Route>(GetArenaForAllocation());
    route_ = p;
  }
  return route_;
}
inline ::opi_api::network::cloud::v1alpha1::Route* CreateRouteRequest::mutable_route() {
  ::opi_api::network::cloud::v1alpha1::Route* _msg = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateRouteRequest.route)
  return _msg;
}
inline void CreateRouteRequest::set_allocated_route(::opi_api::network::cloud::v1alpha1::Route* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route));
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateRouteRequest.route)
}

// string route_id = 3;
inline void CreateRouteRequest::clear_route_id() {
  route_id_.ClearToEmpty();
}
inline const std::string& CreateRouteRequest::route_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateRouteRequest.route_id)
  return _internal_route_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRouteRequest::set_route_id(ArgT0&& arg0, ArgT... args) {
 
 route_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateRouteRequest.route_id)
}
inline std::string* CreateRouteRequest::mutable_route_id() {
  std::string* _s = _internal_mutable_route_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateRouteRequest.route_id)
  return _s;
}
inline const std::string& CreateRouteRequest::_internal_route_id() const {
  return route_id_.Get();
}
inline void CreateRouteRequest::_internal_set_route_id(const std::string& value) {
  
  route_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRouteRequest::_internal_mutable_route_id() {
  
  return route_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRouteRequest::release_route_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateRouteRequest.route_id)
  return route_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRouteRequest::set_allocated_route_id(std::string* route_id) {
  if (route_id != nullptr) {
    
  } else {
    
  }
  route_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), route_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (route_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    route_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateRouteRequest.route_id)
}

// -------------------------------------------------------------------

// DeleteRouteRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteRouteRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteRouteRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteRouteRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRouteRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteRouteRequest.id)
}
inline std::string* DeleteRouteRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteRouteRequest.id)
  return _s;
}
inline const std::string& DeleteRouteRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteRouteRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRouteRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRouteRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteRouteRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRouteRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteRouteRequest.id)
}

// -------------------------------------------------------------------

// UpdateRouteRequest

// .opi_api.network.cloud.v1alpha1.Route route = 1;
inline bool UpdateRouteRequest::_internal_has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline bool UpdateRouteRequest::has_route() const {
  return _internal_has_route();
}
inline const ::opi_api::network::cloud::v1alpha1::Route& UpdateRouteRequest::_internal_route() const {
  const ::opi_api::network::cloud::v1alpha1::Route* p = route_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Route&>(
      ::opi_api::network::cloud::v1alpha1::_Route_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Route& UpdateRouteRequest::route() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateRouteRequest.route)
  return _internal_route();
}
inline void UpdateRouteRequest::unsafe_arena_set_allocated_route(
    ::opi_api::network::cloud::v1alpha1::Route* route) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  route_ = route;
  if (route) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateRouteRequest.route)
}
inline ::opi_api::network::cloud::v1alpha1::Route* UpdateRouteRequest::release_route() {
  
  ::opi_api::network::cloud::v1alpha1::Route* temp = route_;
  route_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Route* UpdateRouteRequest::unsafe_arena_release_route() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateRouteRequest.route)
  
  ::opi_api::network::cloud::v1alpha1::Route* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Route* UpdateRouteRequest::_internal_mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Route>(GetArenaForAllocation());
    route_ = p;
  }
  return route_;
}
inline ::opi_api::network::cloud::v1alpha1::Route* UpdateRouteRequest::mutable_route() {
  ::opi_api::network::cloud::v1alpha1::Route* _msg = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateRouteRequest.route)
  return _msg;
}
inline void UpdateRouteRequest::set_allocated_route(::opi_api::network::cloud::v1alpha1::Route* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route));
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateRouteRequest.route)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateRouteRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateRouteRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateRouteRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateRouteRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateRouteRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateRouteRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateRouteRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateRouteRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateRouteRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateRouteRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateRouteRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateRouteRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateRouteRequest.update_mask)
  return _msg;
}
inline void UpdateRouteRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateRouteRequest.update_mask)
}

// -------------------------------------------------------------------

// ListRoutesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListRoutesRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListRoutesRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListRoutesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRoutesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListRoutesRequest.parent)
}
inline std::string* ListRoutesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListRoutesRequest.parent)
  return _s;
}
inline const std::string& ListRoutesRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListRoutesRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListRoutesRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListRoutesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListRoutesRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListRoutesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListRoutesRequest.parent)
}

// int32 page_size = 2;
inline void ListRoutesRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListRoutesRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListRoutesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListRoutesRequest.page_size)
  return _internal_page_size();
}
inline void ListRoutesRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListRoutesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListRoutesRequest.page_size)
}

// string page_token = 3;
inline void ListRoutesRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListRoutesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListRoutesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRoutesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListRoutesRequest.page_token)
}
inline std::string* ListRoutesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListRoutesRequest.page_token)
  return _s;
}
inline const std::string& ListRoutesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListRoutesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListRoutesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListRoutesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListRoutesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListRoutesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListRoutesRequest.page_token)
}

// -------------------------------------------------------------------

// ListRoutesResponse

// repeated .opi_api.network.cloud.v1alpha1.Route route = 1;
inline int ListRoutesResponse::_internal_route_size() const {
  return route_.size();
}
inline int ListRoutesResponse::route_size() const {
  return _internal_route_size();
}
inline ::opi_api::network::cloud::v1alpha1::Route* ListRoutesResponse::mutable_route(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListRoutesResponse.route)
  return route_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Route >*
ListRoutesResponse::mutable_route() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListRoutesResponse.route)
  return &route_;
}
inline const ::opi_api::network::cloud::v1alpha1::Route& ListRoutesResponse::_internal_route(int index) const {
  return route_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::Route& ListRoutesResponse::route(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListRoutesResponse.route)
  return _internal_route(index);
}
inline ::opi_api::network::cloud::v1alpha1::Route* ListRoutesResponse::_internal_add_route() {
  return route_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::Route* ListRoutesResponse::add_route() {
  ::opi_api::network::cloud::v1alpha1::Route* _add = _internal_add_route();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListRoutesResponse.route)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Route >&
ListRoutesResponse::route() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListRoutesResponse.route)
  return route_;
}

// string next_page_token = 2;
inline void ListRoutesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListRoutesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListRoutesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRoutesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListRoutesResponse.next_page_token)
}
inline std::string* ListRoutesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListRoutesResponse.next_page_token)
  return _s;
}
inline const std::string& ListRoutesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListRoutesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListRoutesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListRoutesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListRoutesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListRoutesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListRoutesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetRouteRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetRouteRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetRouteRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetRouteRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRouteRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetRouteRequest.id)
}
inline std::string* GetRouteRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetRouteRequest.id)
  return _s;
}
inline const std::string& GetRouteRequest::_internal_id() const {
  return id_.Get();
}
inline void GetRouteRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetRouteRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetRouteRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetRouteRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetRouteRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetRouteRequest.id)
}

// -------------------------------------------------------------------

// CreateUnderlayRouteRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateUnderlayRouteRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateUnderlayRouteRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUnderlayRouteRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.parent)
}
inline std::string* CreateUnderlayRouteRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.parent)
  return _s;
}
inline const std::string& CreateUnderlayRouteRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateUnderlayRouteRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUnderlayRouteRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUnderlayRouteRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUnderlayRouteRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.UnderlayRoute underlayroute = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateUnderlayRouteRequest::_internal_has_underlayroute() const {
  return this != internal_default_instance() && underlayroute_ != nullptr;
}
inline bool CreateUnderlayRouteRequest::has_underlayroute() const {
  return _internal_has_underlayroute();
}
inline const ::opi_api::network::cloud::v1alpha1::UnderlayRoute& CreateUnderlayRouteRequest::_internal_underlayroute() const {
  const ::opi_api::network::cloud::v1alpha1::UnderlayRoute* p = underlayroute_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::UnderlayRoute&>(
      ::opi_api::network::cloud::v1alpha1::_UnderlayRoute_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::UnderlayRoute& CreateUnderlayRouteRequest::underlayroute() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.underlayroute)
  return _internal_underlayroute();
}
inline void CreateUnderlayRouteRequest::unsafe_arena_set_allocated_underlayroute(
    ::opi_api::network::cloud::v1alpha1::UnderlayRoute* underlayroute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayroute_);
  }
  underlayroute_ = underlayroute;
  if (underlayroute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.underlayroute)
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRoute* CreateUnderlayRouteRequest::release_underlayroute() {
  
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* temp = underlayroute_;
  underlayroute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRoute* CreateUnderlayRouteRequest::unsafe_arena_release_underlayroute() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.underlayroute)
  
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* temp = underlayroute_;
  underlayroute_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRoute* CreateUnderlayRouteRequest::_internal_mutable_underlayroute() {
  
  if (underlayroute_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UnderlayRoute>(GetArenaForAllocation());
    underlayroute_ = p;
  }
  return underlayroute_;
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRoute* CreateUnderlayRouteRequest::mutable_underlayroute() {
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* _msg = _internal_mutable_underlayroute();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.underlayroute)
  return _msg;
}
inline void CreateUnderlayRouteRequest::set_allocated_underlayroute(::opi_api::network::cloud::v1alpha1::UnderlayRoute* underlayroute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayroute_);
  }
  if (underlayroute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayroute));
    if (message_arena != submessage_arena) {
      underlayroute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayroute, submessage_arena);
    }
    
  } else {
    
  }
  underlayroute_ = underlayroute;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.underlayroute)
}

// string underlayroute_id = 3;
inline void CreateUnderlayRouteRequest::clear_underlayroute_id() {
  underlayroute_id_.ClearToEmpty();
}
inline const std::string& CreateUnderlayRouteRequest::underlayroute_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.underlayroute_id)
  return _internal_underlayroute_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUnderlayRouteRequest::set_underlayroute_id(ArgT0&& arg0, ArgT... args) {
 
 underlayroute_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.underlayroute_id)
}
inline std::string* CreateUnderlayRouteRequest::mutable_underlayroute_id() {
  std::string* _s = _internal_mutable_underlayroute_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.underlayroute_id)
  return _s;
}
inline const std::string& CreateUnderlayRouteRequest::_internal_underlayroute_id() const {
  return underlayroute_id_.Get();
}
inline void CreateUnderlayRouteRequest::_internal_set_underlayroute_id(const std::string& value) {
  
  underlayroute_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUnderlayRouteRequest::_internal_mutable_underlayroute_id() {
  
  return underlayroute_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUnderlayRouteRequest::release_underlayroute_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.underlayroute_id)
  return underlayroute_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUnderlayRouteRequest::set_allocated_underlayroute_id(std::string* underlayroute_id) {
  if (underlayroute_id != nullptr) {
    
  } else {
    
  }
  underlayroute_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), underlayroute_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (underlayroute_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    underlayroute_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateUnderlayRouteRequest.underlayroute_id)
}

// -------------------------------------------------------------------

// DeleteUnderlayRouteRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteUnderlayRouteRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteUnderlayRouteRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteUnderlayRouteRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteUnderlayRouteRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteUnderlayRouteRequest.id)
}
inline std::string* DeleteUnderlayRouteRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteUnderlayRouteRequest.id)
  return _s;
}
inline const std::string& DeleteUnderlayRouteRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteUnderlayRouteRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteUnderlayRouteRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteUnderlayRouteRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteUnderlayRouteRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteUnderlayRouteRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteUnderlayRouteRequest.id)
}

// -------------------------------------------------------------------

// UpdateUnderlayRouteRequest

// .opi_api.network.cloud.v1alpha1.UnderlayRoute underlayroute = 1;
inline bool UpdateUnderlayRouteRequest::_internal_has_underlayroute() const {
  return this != internal_default_instance() && underlayroute_ != nullptr;
}
inline bool UpdateUnderlayRouteRequest::has_underlayroute() const {
  return _internal_has_underlayroute();
}
inline const ::opi_api::network::cloud::v1alpha1::UnderlayRoute& UpdateUnderlayRouteRequest::_internal_underlayroute() const {
  const ::opi_api::network::cloud::v1alpha1::UnderlayRoute* p = underlayroute_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::UnderlayRoute&>(
      ::opi_api::network::cloud::v1alpha1::_UnderlayRoute_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::UnderlayRoute& UpdateUnderlayRouteRequest::underlayroute() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest.underlayroute)
  return _internal_underlayroute();
}
inline void UpdateUnderlayRouteRequest::unsafe_arena_set_allocated_underlayroute(
    ::opi_api::network::cloud::v1alpha1::UnderlayRoute* underlayroute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayroute_);
  }
  underlayroute_ = underlayroute;
  if (underlayroute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest.underlayroute)
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRoute* UpdateUnderlayRouteRequest::release_underlayroute() {
  
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* temp = underlayroute_;
  underlayroute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRoute* UpdateUnderlayRouteRequest::unsafe_arena_release_underlayroute() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest.underlayroute)
  
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* temp = underlayroute_;
  underlayroute_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRoute* UpdateUnderlayRouteRequest::_internal_mutable_underlayroute() {
  
  if (underlayroute_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UnderlayRoute>(GetArenaForAllocation());
    underlayroute_ = p;
  }
  return underlayroute_;
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRoute* UpdateUnderlayRouteRequest::mutable_underlayroute() {
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* _msg = _internal_mutable_underlayroute();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest.underlayroute)
  return _msg;
}
inline void UpdateUnderlayRouteRequest::set_allocated_underlayroute(::opi_api::network::cloud::v1alpha1::UnderlayRoute* underlayroute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayroute_);
  }
  if (underlayroute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayroute));
    if (message_arena != submessage_arena) {
      underlayroute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayroute, submessage_arena);
    }
    
  } else {
    
  }
  underlayroute_ = underlayroute;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest.underlayroute)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateUnderlayRouteRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateUnderlayRouteRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateUnderlayRouteRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateUnderlayRouteRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateUnderlayRouteRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateUnderlayRouteRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateUnderlayRouteRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateUnderlayRouteRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateUnderlayRouteRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest.update_mask)
  return _msg;
}
inline void UpdateUnderlayRouteRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateUnderlayRouteRequest.update_mask)
}

// -------------------------------------------------------------------

// ListUnderlayRoutesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListUnderlayRoutesRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListUnderlayRoutesRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListUnderlayRoutesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest.parent)
}
inline std::string* ListUnderlayRoutesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest.parent)
  return _s;
}
inline const std::string& ListUnderlayRoutesRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListUnderlayRoutesRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListUnderlayRoutesRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListUnderlayRoutesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListUnderlayRoutesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest.parent)
}

// int32 page_size = 2;
inline void ListUnderlayRoutesRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListUnderlayRoutesRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListUnderlayRoutesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest.page_size)
  return _internal_page_size();
}
inline void ListUnderlayRoutesRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListUnderlayRoutesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest.page_size)
}

// string page_token = 3;
inline void ListUnderlayRoutesRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListUnderlayRoutesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListUnderlayRoutesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest.page_token)
}
inline std::string* ListUnderlayRoutesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest.page_token)
  return _s;
}
inline const std::string& ListUnderlayRoutesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListUnderlayRoutesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListUnderlayRoutesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListUnderlayRoutesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListUnderlayRoutesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesRequest.page_token)
}

// -------------------------------------------------------------------

// ListUnderlayRoutesResponse

// repeated .opi_api.network.cloud.v1alpha1.UnderlayRoute underlayroute = 1;
inline int ListUnderlayRoutesResponse::_internal_underlayroute_size() const {
  return underlayroute_.size();
}
inline int ListUnderlayRoutesResponse::underlayroute_size() const {
  return _internal_underlayroute_size();
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRoute* ListUnderlayRoutesResponse::mutable_underlayroute(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse.underlayroute)
  return underlayroute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::UnderlayRoute >*
ListUnderlayRoutesResponse::mutable_underlayroute() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse.underlayroute)
  return &underlayroute_;
}
inline const ::opi_api::network::cloud::v1alpha1::UnderlayRoute& ListUnderlayRoutesResponse::_internal_underlayroute(int index) const {
  return underlayroute_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::UnderlayRoute& ListUnderlayRoutesResponse::underlayroute(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse.underlayroute)
  return _internal_underlayroute(index);
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRoute* ListUnderlayRoutesResponse::_internal_add_underlayroute() {
  return underlayroute_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRoute* ListUnderlayRoutesResponse::add_underlayroute() {
  ::opi_api::network::cloud::v1alpha1::UnderlayRoute* _add = _internal_add_underlayroute();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse.underlayroute)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::UnderlayRoute >&
ListUnderlayRoutesResponse::underlayroute() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse.underlayroute)
  return underlayroute_;
}

// string next_page_token = 2;
inline void ListUnderlayRoutesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListUnderlayRoutesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListUnderlayRoutesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse.next_page_token)
}
inline std::string* ListUnderlayRoutesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse.next_page_token)
  return _s;
}
inline const std::string& ListUnderlayRoutesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListUnderlayRoutesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListUnderlayRoutesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListUnderlayRoutesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListUnderlayRoutesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListUnderlayRoutesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetUnderlayRouteRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetUnderlayRouteRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetUnderlayRouteRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetUnderlayRouteRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUnderlayRouteRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetUnderlayRouteRequest.id)
}
inline std::string* GetUnderlayRouteRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetUnderlayRouteRequest.id)
  return _s;
}
inline const std::string& GetUnderlayRouteRequest::_internal_id() const {
  return id_.Get();
}
inline void GetUnderlayRouteRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetUnderlayRouteRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetUnderlayRouteRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetUnderlayRouteRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetUnderlayRouteRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetUnderlayRouteRequest.id)
}

// -------------------------------------------------------------------

// CreateBgpRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateBgpRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateBgpRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateBgpRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBgpRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateBgpRequest.parent)
}
inline std::string* CreateBgpRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateBgpRequest.parent)
  return _s;
}
inline const std::string& CreateBgpRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateBgpRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateBgpRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateBgpRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateBgpRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateBgpRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateBgpRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.Bgp bgp = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateBgpRequest::_internal_has_bgp() const {
  return this != internal_default_instance() && bgp_ != nullptr;
}
inline bool CreateBgpRequest::has_bgp() const {
  return _internal_has_bgp();
}
inline const ::opi_api::network::cloud::v1alpha1::Bgp& CreateBgpRequest::_internal_bgp() const {
  const ::opi_api::network::cloud::v1alpha1::Bgp* p = bgp_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Bgp&>(
      ::opi_api::network::cloud::v1alpha1::_Bgp_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Bgp& CreateBgpRequest::bgp() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateBgpRequest.bgp)
  return _internal_bgp();
}
inline void CreateBgpRequest::unsafe_arena_set_allocated_bgp(
    ::opi_api::network::cloud::v1alpha1::Bgp* bgp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgp_);
  }
  bgp_ = bgp;
  if (bgp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateBgpRequest.bgp)
}
inline ::opi_api::network::cloud::v1alpha1::Bgp* CreateBgpRequest::release_bgp() {
  
  ::opi_api::network::cloud::v1alpha1::Bgp* temp = bgp_;
  bgp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Bgp* CreateBgpRequest::unsafe_arena_release_bgp() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateBgpRequest.bgp)
  
  ::opi_api::network::cloud::v1alpha1::Bgp* temp = bgp_;
  bgp_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Bgp* CreateBgpRequest::_internal_mutable_bgp() {
  
  if (bgp_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Bgp>(GetArenaForAllocation());
    bgp_ = p;
  }
  return bgp_;
}
inline ::opi_api::network::cloud::v1alpha1::Bgp* CreateBgpRequest::mutable_bgp() {
  ::opi_api::network::cloud::v1alpha1::Bgp* _msg = _internal_mutable_bgp();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateBgpRequest.bgp)
  return _msg;
}
inline void CreateBgpRequest::set_allocated_bgp(::opi_api::network::cloud::v1alpha1::Bgp* bgp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgp_);
  }
  if (bgp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgp));
    if (message_arena != submessage_arena) {
      bgp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgp, submessage_arena);
    }
    
  } else {
    
  }
  bgp_ = bgp;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateBgpRequest.bgp)
}

// string bgp_id = 3;
inline void CreateBgpRequest::clear_bgp_id() {
  bgp_id_.ClearToEmpty();
}
inline const std::string& CreateBgpRequest::bgp_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateBgpRequest.bgp_id)
  return _internal_bgp_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBgpRequest::set_bgp_id(ArgT0&& arg0, ArgT... args) {
 
 bgp_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateBgpRequest.bgp_id)
}
inline std::string* CreateBgpRequest::mutable_bgp_id() {
  std::string* _s = _internal_mutable_bgp_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateBgpRequest.bgp_id)
  return _s;
}
inline const std::string& CreateBgpRequest::_internal_bgp_id() const {
  return bgp_id_.Get();
}
inline void CreateBgpRequest::_internal_set_bgp_id(const std::string& value) {
  
  bgp_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateBgpRequest::_internal_mutable_bgp_id() {
  
  return bgp_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateBgpRequest::release_bgp_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateBgpRequest.bgp_id)
  return bgp_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateBgpRequest::set_allocated_bgp_id(std::string* bgp_id) {
  if (bgp_id != nullptr) {
    
  } else {
    
  }
  bgp_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgp_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bgp_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bgp_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateBgpRequest.bgp_id)
}

// -------------------------------------------------------------------

// DeleteBgpRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteBgpRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteBgpRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteBgpRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteBgpRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteBgpRequest.id)
}
inline std::string* DeleteBgpRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteBgpRequest.id)
  return _s;
}
inline const std::string& DeleteBgpRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteBgpRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteBgpRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteBgpRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteBgpRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteBgpRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteBgpRequest.id)
}

// -------------------------------------------------------------------

// UpdateBgpRequest

// .opi_api.network.cloud.v1alpha1.Bgp bgp = 1;
inline bool UpdateBgpRequest::_internal_has_bgp() const {
  return this != internal_default_instance() && bgp_ != nullptr;
}
inline bool UpdateBgpRequest::has_bgp() const {
  return _internal_has_bgp();
}
inline const ::opi_api::network::cloud::v1alpha1::Bgp& UpdateBgpRequest::_internal_bgp() const {
  const ::opi_api::network::cloud::v1alpha1::Bgp* p = bgp_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Bgp&>(
      ::opi_api::network::cloud::v1alpha1::_Bgp_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Bgp& UpdateBgpRequest::bgp() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateBgpRequest.bgp)
  return _internal_bgp();
}
inline void UpdateBgpRequest::unsafe_arena_set_allocated_bgp(
    ::opi_api::network::cloud::v1alpha1::Bgp* bgp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgp_);
  }
  bgp_ = bgp;
  if (bgp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateBgpRequest.bgp)
}
inline ::opi_api::network::cloud::v1alpha1::Bgp* UpdateBgpRequest::release_bgp() {
  
  ::opi_api::network::cloud::v1alpha1::Bgp* temp = bgp_;
  bgp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Bgp* UpdateBgpRequest::unsafe_arena_release_bgp() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateBgpRequest.bgp)
  
  ::opi_api::network::cloud::v1alpha1::Bgp* temp = bgp_;
  bgp_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Bgp* UpdateBgpRequest::_internal_mutable_bgp() {
  
  if (bgp_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Bgp>(GetArenaForAllocation());
    bgp_ = p;
  }
  return bgp_;
}
inline ::opi_api::network::cloud::v1alpha1::Bgp* UpdateBgpRequest::mutable_bgp() {
  ::opi_api::network::cloud::v1alpha1::Bgp* _msg = _internal_mutable_bgp();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateBgpRequest.bgp)
  return _msg;
}
inline void UpdateBgpRequest::set_allocated_bgp(::opi_api::network::cloud::v1alpha1::Bgp* bgp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgp_);
  }
  if (bgp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgp));
    if (message_arena != submessage_arena) {
      bgp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgp, submessage_arena);
    }
    
  } else {
    
  }
  bgp_ = bgp;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateBgpRequest.bgp)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateBgpRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateBgpRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBgpRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBgpRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateBgpRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateBgpRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateBgpRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBgpRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBgpRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateBgpRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBgpRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBgpRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateBgpRequest.update_mask)
  return _msg;
}
inline void UpdateBgpRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateBgpRequest.update_mask)
}

// -------------------------------------------------------------------

// ListBgpsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListBgpsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListBgpsRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListBgpsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBgpsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListBgpsRequest.parent)
}
inline std::string* ListBgpsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListBgpsRequest.parent)
  return _s;
}
inline const std::string& ListBgpsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListBgpsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBgpsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBgpsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListBgpsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBgpsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListBgpsRequest.parent)
}

// int32 page_size = 2;
inline void ListBgpsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListBgpsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListBgpsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListBgpsRequest.page_size)
  return _internal_page_size();
}
inline void ListBgpsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListBgpsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListBgpsRequest.page_size)
}

// string page_token = 3;
inline void ListBgpsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListBgpsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListBgpsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBgpsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListBgpsRequest.page_token)
}
inline std::string* ListBgpsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListBgpsRequest.page_token)
  return _s;
}
inline const std::string& ListBgpsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListBgpsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBgpsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBgpsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListBgpsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBgpsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListBgpsRequest.page_token)
}

// -------------------------------------------------------------------

// ListBgpsResponse

// repeated .opi_api.network.cloud.v1alpha1.Bgp bgp = 1;
inline int ListBgpsResponse::_internal_bgp_size() const {
  return bgp_.size();
}
inline int ListBgpsResponse::bgp_size() const {
  return _internal_bgp_size();
}
inline ::opi_api::network::cloud::v1alpha1::Bgp* ListBgpsResponse::mutable_bgp(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListBgpsResponse.bgp)
  return bgp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Bgp >*
ListBgpsResponse::mutable_bgp() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListBgpsResponse.bgp)
  return &bgp_;
}
inline const ::opi_api::network::cloud::v1alpha1::Bgp& ListBgpsResponse::_internal_bgp(int index) const {
  return bgp_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::Bgp& ListBgpsResponse::bgp(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListBgpsResponse.bgp)
  return _internal_bgp(index);
}
inline ::opi_api::network::cloud::v1alpha1::Bgp* ListBgpsResponse::_internal_add_bgp() {
  return bgp_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::Bgp* ListBgpsResponse::add_bgp() {
  ::opi_api::network::cloud::v1alpha1::Bgp* _add = _internal_add_bgp();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListBgpsResponse.bgp)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Bgp >&
ListBgpsResponse::bgp() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListBgpsResponse.bgp)
  return bgp_;
}

// string next_page_token = 2;
inline void ListBgpsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListBgpsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListBgpsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBgpsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListBgpsResponse.next_page_token)
}
inline std::string* ListBgpsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListBgpsResponse.next_page_token)
  return _s;
}
inline const std::string& ListBgpsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListBgpsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBgpsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBgpsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListBgpsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBgpsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListBgpsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetBgpRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetBgpRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetBgpRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetBgpRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBgpRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetBgpRequest.id)
}
inline std::string* GetBgpRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetBgpRequest.id)
  return _s;
}
inline const std::string& GetBgpRequest::_internal_id() const {
  return id_.Get();
}
inline void GetBgpRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBgpRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBgpRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetBgpRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBgpRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetBgpRequest.id)
}

// -------------------------------------------------------------------

// CreateBGPPeerRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateBGPPeerRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateBGPPeerRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBGPPeerRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.parent)
}
inline std::string* CreateBGPPeerRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.parent)
  return _s;
}
inline const std::string& CreateBGPPeerRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateBGPPeerRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateBGPPeerRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateBGPPeerRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateBGPPeerRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.BGPPeer bgppeer = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateBGPPeerRequest::_internal_has_bgppeer() const {
  return this != internal_default_instance() && bgppeer_ != nullptr;
}
inline bool CreateBGPPeerRequest::has_bgppeer() const {
  return _internal_has_bgppeer();
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeer& CreateBGPPeerRequest::_internal_bgppeer() const {
  const ::opi_api::network::cloud::v1alpha1::BGPPeer* p = bgppeer_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::BGPPeer&>(
      ::opi_api::network::cloud::v1alpha1::_BGPPeer_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeer& CreateBGPPeerRequest::bgppeer() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.bgppeer)
  return _internal_bgppeer();
}
inline void CreateBGPPeerRequest::unsafe_arena_set_allocated_bgppeer(
    ::opi_api::network::cloud::v1alpha1::BGPPeer* bgppeer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgppeer_);
  }
  bgppeer_ = bgppeer;
  if (bgppeer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.bgppeer)
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeer* CreateBGPPeerRequest::release_bgppeer() {
  
  ::opi_api::network::cloud::v1alpha1::BGPPeer* temp = bgppeer_;
  bgppeer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeer* CreateBGPPeerRequest::unsafe_arena_release_bgppeer() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.bgppeer)
  
  ::opi_api::network::cloud::v1alpha1::BGPPeer* temp = bgppeer_;
  bgppeer_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeer* CreateBGPPeerRequest::_internal_mutable_bgppeer() {
  
  if (bgppeer_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPPeer>(GetArenaForAllocation());
    bgppeer_ = p;
  }
  return bgppeer_;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeer* CreateBGPPeerRequest::mutable_bgppeer() {
  ::opi_api::network::cloud::v1alpha1::BGPPeer* _msg = _internal_mutable_bgppeer();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.bgppeer)
  return _msg;
}
inline void CreateBGPPeerRequest::set_allocated_bgppeer(::opi_api::network::cloud::v1alpha1::BGPPeer* bgppeer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgppeer_);
  }
  if (bgppeer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgppeer));
    if (message_arena != submessage_arena) {
      bgppeer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgppeer, submessage_arena);
    }
    
  } else {
    
  }
  bgppeer_ = bgppeer;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.bgppeer)
}

// string bgppeer_id = 3;
inline void CreateBGPPeerRequest::clear_bgppeer_id() {
  bgppeer_id_.ClearToEmpty();
}
inline const std::string& CreateBGPPeerRequest::bgppeer_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.bgppeer_id)
  return _internal_bgppeer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBGPPeerRequest::set_bgppeer_id(ArgT0&& arg0, ArgT... args) {
 
 bgppeer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.bgppeer_id)
}
inline std::string* CreateBGPPeerRequest::mutable_bgppeer_id() {
  std::string* _s = _internal_mutable_bgppeer_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.bgppeer_id)
  return _s;
}
inline const std::string& CreateBGPPeerRequest::_internal_bgppeer_id() const {
  return bgppeer_id_.Get();
}
inline void CreateBGPPeerRequest::_internal_set_bgppeer_id(const std::string& value) {
  
  bgppeer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateBGPPeerRequest::_internal_mutable_bgppeer_id() {
  
  return bgppeer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateBGPPeerRequest::release_bgppeer_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.bgppeer_id)
  return bgppeer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateBGPPeerRequest::set_allocated_bgppeer_id(std::string* bgppeer_id) {
  if (bgppeer_id != nullptr) {
    
  } else {
    
  }
  bgppeer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgppeer_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bgppeer_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bgppeer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateBGPPeerRequest.bgppeer_id)
}

// -------------------------------------------------------------------

// DeleteBGPPeerRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteBGPPeerRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteBGPPeerRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteBGPPeerRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteBGPPeerRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteBGPPeerRequest.id)
}
inline std::string* DeleteBGPPeerRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteBGPPeerRequest.id)
  return _s;
}
inline const std::string& DeleteBGPPeerRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteBGPPeerRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteBGPPeerRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteBGPPeerRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteBGPPeerRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteBGPPeerRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteBGPPeerRequest.id)
}

// -------------------------------------------------------------------

// UpdateBGPPeerRequest

// .opi_api.network.cloud.v1alpha1.BGPPeer bgppeer = 1;
inline bool UpdateBGPPeerRequest::_internal_has_bgppeer() const {
  return this != internal_default_instance() && bgppeer_ != nullptr;
}
inline bool UpdateBGPPeerRequest::has_bgppeer() const {
  return _internal_has_bgppeer();
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeer& UpdateBGPPeerRequest::_internal_bgppeer() const {
  const ::opi_api::network::cloud::v1alpha1::BGPPeer* p = bgppeer_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::BGPPeer&>(
      ::opi_api::network::cloud::v1alpha1::_BGPPeer_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeer& UpdateBGPPeerRequest::bgppeer() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest.bgppeer)
  return _internal_bgppeer();
}
inline void UpdateBGPPeerRequest::unsafe_arena_set_allocated_bgppeer(
    ::opi_api::network::cloud::v1alpha1::BGPPeer* bgppeer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgppeer_);
  }
  bgppeer_ = bgppeer;
  if (bgppeer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest.bgppeer)
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeer* UpdateBGPPeerRequest::release_bgppeer() {
  
  ::opi_api::network::cloud::v1alpha1::BGPPeer* temp = bgppeer_;
  bgppeer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeer* UpdateBGPPeerRequest::unsafe_arena_release_bgppeer() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest.bgppeer)
  
  ::opi_api::network::cloud::v1alpha1::BGPPeer* temp = bgppeer_;
  bgppeer_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeer* UpdateBGPPeerRequest::_internal_mutable_bgppeer() {
  
  if (bgppeer_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPPeer>(GetArenaForAllocation());
    bgppeer_ = p;
  }
  return bgppeer_;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeer* UpdateBGPPeerRequest::mutable_bgppeer() {
  ::opi_api::network::cloud::v1alpha1::BGPPeer* _msg = _internal_mutable_bgppeer();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest.bgppeer)
  return _msg;
}
inline void UpdateBGPPeerRequest::set_allocated_bgppeer(::opi_api::network::cloud::v1alpha1::BGPPeer* bgppeer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgppeer_);
  }
  if (bgppeer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgppeer));
    if (message_arena != submessage_arena) {
      bgppeer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgppeer, submessage_arena);
    }
    
  } else {
    
  }
  bgppeer_ = bgppeer;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest.bgppeer)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateBGPPeerRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateBGPPeerRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBGPPeerRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBGPPeerRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateBGPPeerRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBGPPeerRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBGPPeerRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBGPPeerRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBGPPeerRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest.update_mask)
  return _msg;
}
inline void UpdateBGPPeerRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateBGPPeerRequest.update_mask)
}

// -------------------------------------------------------------------

// ListBGPPeersRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListBGPPeersRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListBGPPeersRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListBGPPeersRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBGPPeersRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListBGPPeersRequest.parent)
}
inline std::string* ListBGPPeersRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListBGPPeersRequest.parent)
  return _s;
}
inline const std::string& ListBGPPeersRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListBGPPeersRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBGPPeersRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBGPPeersRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListBGPPeersRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBGPPeersRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListBGPPeersRequest.parent)
}

// int32 page_size = 2;
inline void ListBGPPeersRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListBGPPeersRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListBGPPeersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListBGPPeersRequest.page_size)
  return _internal_page_size();
}
inline void ListBGPPeersRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListBGPPeersRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListBGPPeersRequest.page_size)
}

// string page_token = 3;
inline void ListBGPPeersRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListBGPPeersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListBGPPeersRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBGPPeersRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListBGPPeersRequest.page_token)
}
inline std::string* ListBGPPeersRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListBGPPeersRequest.page_token)
  return _s;
}
inline const std::string& ListBGPPeersRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListBGPPeersRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBGPPeersRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBGPPeersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListBGPPeersRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBGPPeersRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListBGPPeersRequest.page_token)
}

// -------------------------------------------------------------------

// ListBGPPeersResponse

// repeated .opi_api.network.cloud.v1alpha1.BGPPeer bgppeer = 1;
inline int ListBGPPeersResponse::_internal_bgppeer_size() const {
  return bgppeer_.size();
}
inline int ListBGPPeersResponse::bgppeer_size() const {
  return _internal_bgppeer_size();
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeer* ListBGPPeersResponse::mutable_bgppeer(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListBGPPeersResponse.bgppeer)
  return bgppeer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::BGPPeer >*
ListBGPPeersResponse::mutable_bgppeer() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListBGPPeersResponse.bgppeer)
  return &bgppeer_;
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeer& ListBGPPeersResponse::_internal_bgppeer(int index) const {
  return bgppeer_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeer& ListBGPPeersResponse::bgppeer(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListBGPPeersResponse.bgppeer)
  return _internal_bgppeer(index);
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeer* ListBGPPeersResponse::_internal_add_bgppeer() {
  return bgppeer_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeer* ListBGPPeersResponse::add_bgppeer() {
  ::opi_api::network::cloud::v1alpha1::BGPPeer* _add = _internal_add_bgppeer();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListBGPPeersResponse.bgppeer)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::BGPPeer >&
ListBGPPeersResponse::bgppeer() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListBGPPeersResponse.bgppeer)
  return bgppeer_;
}

// string next_page_token = 2;
inline void ListBGPPeersResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListBGPPeersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListBGPPeersResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBGPPeersResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListBGPPeersResponse.next_page_token)
}
inline std::string* ListBGPPeersResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListBGPPeersResponse.next_page_token)
  return _s;
}
inline const std::string& ListBGPPeersResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListBGPPeersResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBGPPeersResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBGPPeersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListBGPPeersResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBGPPeersResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListBGPPeersResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetBGPPeerRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetBGPPeerRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetBGPPeerRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetBGPPeerRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBGPPeerRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetBGPPeerRequest.id)
}
inline std::string* GetBGPPeerRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetBGPPeerRequest.id)
  return _s;
}
inline const std::string& GetBGPPeerRequest::_internal_id() const {
  return id_.Get();
}
inline void GetBGPPeerRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBGPPeerRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBGPPeerRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetBGPPeerRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBGPPeerRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetBGPPeerRequest.id)
}

// -------------------------------------------------------------------

// CreateBGPPeerAfRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateBGPPeerAfRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateBGPPeerAfRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBGPPeerAfRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.parent)
}
inline std::string* CreateBGPPeerAfRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.parent)
  return _s;
}
inline const std::string& CreateBGPPeerAfRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateBGPPeerAfRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateBGPPeerAfRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateBGPPeerAfRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateBGPPeerAfRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.BGPPeerAf bgppeeraf = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateBGPPeerAfRequest::_internal_has_bgppeeraf() const {
  return this != internal_default_instance() && bgppeeraf_ != nullptr;
}
inline bool CreateBGPPeerAfRequest::has_bgppeeraf() const {
  return _internal_has_bgppeeraf();
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeerAf& CreateBGPPeerAfRequest::_internal_bgppeeraf() const {
  const ::opi_api::network::cloud::v1alpha1::BGPPeerAf* p = bgppeeraf_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::BGPPeerAf&>(
      ::opi_api::network::cloud::v1alpha1::_BGPPeerAf_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeerAf& CreateBGPPeerAfRequest::bgppeeraf() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.bgppeeraf)
  return _internal_bgppeeraf();
}
inline void CreateBGPPeerAfRequest::unsafe_arena_set_allocated_bgppeeraf(
    ::opi_api::network::cloud::v1alpha1::BGPPeerAf* bgppeeraf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgppeeraf_);
  }
  bgppeeraf_ = bgppeeraf;
  if (bgppeeraf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.bgppeeraf)
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAf* CreateBGPPeerAfRequest::release_bgppeeraf() {
  
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* temp = bgppeeraf_;
  bgppeeraf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAf* CreateBGPPeerAfRequest::unsafe_arena_release_bgppeeraf() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.bgppeeraf)
  
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* temp = bgppeeraf_;
  bgppeeraf_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAf* CreateBGPPeerAfRequest::_internal_mutable_bgppeeraf() {
  
  if (bgppeeraf_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPPeerAf>(GetArenaForAllocation());
    bgppeeraf_ = p;
  }
  return bgppeeraf_;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAf* CreateBGPPeerAfRequest::mutable_bgppeeraf() {
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* _msg = _internal_mutable_bgppeeraf();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.bgppeeraf)
  return _msg;
}
inline void CreateBGPPeerAfRequest::set_allocated_bgppeeraf(::opi_api::network::cloud::v1alpha1::BGPPeerAf* bgppeeraf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgppeeraf_);
  }
  if (bgppeeraf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgppeeraf));
    if (message_arena != submessage_arena) {
      bgppeeraf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgppeeraf, submessage_arena);
    }
    
  } else {
    
  }
  bgppeeraf_ = bgppeeraf;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.bgppeeraf)
}

// string bgppeeraf_id = 3;
inline void CreateBGPPeerAfRequest::clear_bgppeeraf_id() {
  bgppeeraf_id_.ClearToEmpty();
}
inline const std::string& CreateBGPPeerAfRequest::bgppeeraf_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.bgppeeraf_id)
  return _internal_bgppeeraf_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateBGPPeerAfRequest::set_bgppeeraf_id(ArgT0&& arg0, ArgT... args) {
 
 bgppeeraf_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.bgppeeraf_id)
}
inline std::string* CreateBGPPeerAfRequest::mutable_bgppeeraf_id() {
  std::string* _s = _internal_mutable_bgppeeraf_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.bgppeeraf_id)
  return _s;
}
inline const std::string& CreateBGPPeerAfRequest::_internal_bgppeeraf_id() const {
  return bgppeeraf_id_.Get();
}
inline void CreateBGPPeerAfRequest::_internal_set_bgppeeraf_id(const std::string& value) {
  
  bgppeeraf_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateBGPPeerAfRequest::_internal_mutable_bgppeeraf_id() {
  
  return bgppeeraf_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateBGPPeerAfRequest::release_bgppeeraf_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.bgppeeraf_id)
  return bgppeeraf_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateBGPPeerAfRequest::set_allocated_bgppeeraf_id(std::string* bgppeeraf_id) {
  if (bgppeeraf_id != nullptr) {
    
  } else {
    
  }
  bgppeeraf_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgppeeraf_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bgppeeraf_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bgppeeraf_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateBGPPeerAfRequest.bgppeeraf_id)
}

// -------------------------------------------------------------------

// DeleteBGPPeerAfRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteBGPPeerAfRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteBGPPeerAfRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteBGPPeerAfRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteBGPPeerAfRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteBGPPeerAfRequest.id)
}
inline std::string* DeleteBGPPeerAfRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteBGPPeerAfRequest.id)
  return _s;
}
inline const std::string& DeleteBGPPeerAfRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteBGPPeerAfRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteBGPPeerAfRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteBGPPeerAfRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteBGPPeerAfRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteBGPPeerAfRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteBGPPeerAfRequest.id)
}

// -------------------------------------------------------------------

// UpdateBGPPeerAfRequest

// .opi_api.network.cloud.v1alpha1.BGPPeerAf bgppeeraf = 1;
inline bool UpdateBGPPeerAfRequest::_internal_has_bgppeeraf() const {
  return this != internal_default_instance() && bgppeeraf_ != nullptr;
}
inline bool UpdateBGPPeerAfRequest::has_bgppeeraf() const {
  return _internal_has_bgppeeraf();
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeerAf& UpdateBGPPeerAfRequest::_internal_bgppeeraf() const {
  const ::opi_api::network::cloud::v1alpha1::BGPPeerAf* p = bgppeeraf_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::BGPPeerAf&>(
      ::opi_api::network::cloud::v1alpha1::_BGPPeerAf_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeerAf& UpdateBGPPeerAfRequest::bgppeeraf() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest.bgppeeraf)
  return _internal_bgppeeraf();
}
inline void UpdateBGPPeerAfRequest::unsafe_arena_set_allocated_bgppeeraf(
    ::opi_api::network::cloud::v1alpha1::BGPPeerAf* bgppeeraf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgppeeraf_);
  }
  bgppeeraf_ = bgppeeraf;
  if (bgppeeraf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest.bgppeeraf)
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAf* UpdateBGPPeerAfRequest::release_bgppeeraf() {
  
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* temp = bgppeeraf_;
  bgppeeraf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAf* UpdateBGPPeerAfRequest::unsafe_arena_release_bgppeeraf() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest.bgppeeraf)
  
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* temp = bgppeeraf_;
  bgppeeraf_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAf* UpdateBGPPeerAfRequest::_internal_mutable_bgppeeraf() {
  
  if (bgppeeraf_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::BGPPeerAf>(GetArenaForAllocation());
    bgppeeraf_ = p;
  }
  return bgppeeraf_;
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAf* UpdateBGPPeerAfRequest::mutable_bgppeeraf() {
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* _msg = _internal_mutable_bgppeeraf();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest.bgppeeraf)
  return _msg;
}
inline void UpdateBGPPeerAfRequest::set_allocated_bgppeeraf(::opi_api::network::cloud::v1alpha1::BGPPeerAf* bgppeeraf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgppeeraf_);
  }
  if (bgppeeraf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgppeeraf));
    if (message_arena != submessage_arena) {
      bgppeeraf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgppeeraf, submessage_arena);
    }
    
  } else {
    
  }
  bgppeeraf_ = bgppeeraf;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest.bgppeeraf)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateBGPPeerAfRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateBGPPeerAfRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBGPPeerAfRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBGPPeerAfRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateBGPPeerAfRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBGPPeerAfRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBGPPeerAfRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBGPPeerAfRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBGPPeerAfRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest.update_mask)
  return _msg;
}
inline void UpdateBGPPeerAfRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateBGPPeerAfRequest.update_mask)
}

// -------------------------------------------------------------------

// ListBGPPeerAfsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListBGPPeerAfsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListBGPPeerAfsRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBGPPeerAfsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest.parent)
}
inline std::string* ListBGPPeerAfsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest.parent)
  return _s;
}
inline const std::string& ListBGPPeerAfsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListBGPPeerAfsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBGPPeerAfsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBGPPeerAfsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBGPPeerAfsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest.parent)
}

// int32 page_size = 2;
inline void ListBGPPeerAfsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListBGPPeerAfsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListBGPPeerAfsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest.page_size)
  return _internal_page_size();
}
inline void ListBGPPeerAfsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListBGPPeerAfsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest.page_size)
}

// string page_token = 3;
inline void ListBGPPeerAfsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListBGPPeerAfsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBGPPeerAfsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest.page_token)
}
inline std::string* ListBGPPeerAfsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest.page_token)
  return _s;
}
inline const std::string& ListBGPPeerAfsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListBGPPeerAfsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBGPPeerAfsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBGPPeerAfsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBGPPeerAfsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsRequest.page_token)
}

// -------------------------------------------------------------------

// ListBGPPeerAfsResponse

// repeated .opi_api.network.cloud.v1alpha1.BGPPeerAf bgppeeraf = 1;
inline int ListBGPPeerAfsResponse::_internal_bgppeeraf_size() const {
  return bgppeeraf_.size();
}
inline int ListBGPPeerAfsResponse::bgppeeraf_size() const {
  return _internal_bgppeeraf_size();
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAf* ListBGPPeerAfsResponse::mutable_bgppeeraf(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse.bgppeeraf)
  return bgppeeraf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::BGPPeerAf >*
ListBGPPeerAfsResponse::mutable_bgppeeraf() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse.bgppeeraf)
  return &bgppeeraf_;
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeerAf& ListBGPPeerAfsResponse::_internal_bgppeeraf(int index) const {
  return bgppeeraf_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::BGPPeerAf& ListBGPPeerAfsResponse::bgppeeraf(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse.bgppeeraf)
  return _internal_bgppeeraf(index);
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAf* ListBGPPeerAfsResponse::_internal_add_bgppeeraf() {
  return bgppeeraf_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::BGPPeerAf* ListBGPPeerAfsResponse::add_bgppeeraf() {
  ::opi_api::network::cloud::v1alpha1::BGPPeerAf* _add = _internal_add_bgppeeraf();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse.bgppeeraf)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::BGPPeerAf >&
ListBGPPeerAfsResponse::bgppeeraf() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse.bgppeeraf)
  return bgppeeraf_;
}

// string next_page_token = 2;
inline void ListBGPPeerAfsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListBGPPeerAfsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListBGPPeerAfsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse.next_page_token)
}
inline std::string* ListBGPPeerAfsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse.next_page_token)
  return _s;
}
inline const std::string& ListBGPPeerAfsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListBGPPeerAfsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListBGPPeerAfsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListBGPPeerAfsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListBGPPeerAfsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListBGPPeerAfsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetBGPPeerAfRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetBGPPeerAfRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetBGPPeerAfRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetBGPPeerAfRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBGPPeerAfRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetBGPPeerAfRequest.id)
}
inline std::string* GetBGPPeerAfRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetBGPPeerAfRequest.id)
  return _s;
}
inline const std::string& GetBGPPeerAfRequest::_internal_id() const {
  return id_.Get();
}
inline void GetBGPPeerAfRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetBGPPeerAfRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetBGPPeerAfRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetBGPPeerAfRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetBGPPeerAfRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetBGPPeerAfRequest.id)
}

// -------------------------------------------------------------------

// CreateMappingRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateMappingRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateMappingRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateMappingRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateMappingRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateMappingRequest.parent)
}
inline std::string* CreateMappingRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateMappingRequest.parent)
  return _s;
}
inline const std::string& CreateMappingRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateMappingRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateMappingRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateMappingRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateMappingRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateMappingRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateMappingRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.Mapping mapping = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateMappingRequest::_internal_has_mapping() const {
  return this != internal_default_instance() && mapping_ != nullptr;
}
inline bool CreateMappingRequest::has_mapping() const {
  return _internal_has_mapping();
}
inline const ::opi_api::network::cloud::v1alpha1::Mapping& CreateMappingRequest::_internal_mapping() const {
  const ::opi_api::network::cloud::v1alpha1::Mapping* p = mapping_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Mapping&>(
      ::opi_api::network::cloud::v1alpha1::_Mapping_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Mapping& CreateMappingRequest::mapping() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateMappingRequest.mapping)
  return _internal_mapping();
}
inline void CreateMappingRequest::unsafe_arena_set_allocated_mapping(
    ::opi_api::network::cloud::v1alpha1::Mapping* mapping) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapping_);
  }
  mapping_ = mapping;
  if (mapping) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateMappingRequest.mapping)
}
inline ::opi_api::network::cloud::v1alpha1::Mapping* CreateMappingRequest::release_mapping() {
  
  ::opi_api::network::cloud::v1alpha1::Mapping* temp = mapping_;
  mapping_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Mapping* CreateMappingRequest::unsafe_arena_release_mapping() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateMappingRequest.mapping)
  
  ::opi_api::network::cloud::v1alpha1::Mapping* temp = mapping_;
  mapping_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Mapping* CreateMappingRequest::_internal_mutable_mapping() {
  
  if (mapping_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Mapping>(GetArenaForAllocation());
    mapping_ = p;
  }
  return mapping_;
}
inline ::opi_api::network::cloud::v1alpha1::Mapping* CreateMappingRequest::mutable_mapping() {
  ::opi_api::network::cloud::v1alpha1::Mapping* _msg = _internal_mutable_mapping();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateMappingRequest.mapping)
  return _msg;
}
inline void CreateMappingRequest::set_allocated_mapping(::opi_api::network::cloud::v1alpha1::Mapping* mapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapping_);
  }
  if (mapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapping));
    if (message_arena != submessage_arena) {
      mapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mapping, submessage_arena);
    }
    
  } else {
    
  }
  mapping_ = mapping;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateMappingRequest.mapping)
}

// string mapping_id = 3;
inline void CreateMappingRequest::clear_mapping_id() {
  mapping_id_.ClearToEmpty();
}
inline const std::string& CreateMappingRequest::mapping_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateMappingRequest.mapping_id)
  return _internal_mapping_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateMappingRequest::set_mapping_id(ArgT0&& arg0, ArgT... args) {
 
 mapping_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateMappingRequest.mapping_id)
}
inline std::string* CreateMappingRequest::mutable_mapping_id() {
  std::string* _s = _internal_mutable_mapping_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateMappingRequest.mapping_id)
  return _s;
}
inline const std::string& CreateMappingRequest::_internal_mapping_id() const {
  return mapping_id_.Get();
}
inline void CreateMappingRequest::_internal_set_mapping_id(const std::string& value) {
  
  mapping_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateMappingRequest::_internal_mutable_mapping_id() {
  
  return mapping_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateMappingRequest::release_mapping_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateMappingRequest.mapping_id)
  return mapping_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateMappingRequest::set_allocated_mapping_id(std::string* mapping_id) {
  if (mapping_id != nullptr) {
    
  } else {
    
  }
  mapping_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapping_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mapping_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mapping_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateMappingRequest.mapping_id)
}

// -------------------------------------------------------------------

// DeleteMappingRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteMappingRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteMappingRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteMappingRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteMappingRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteMappingRequest.id)
}
inline std::string* DeleteMappingRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteMappingRequest.id)
  return _s;
}
inline const std::string& DeleteMappingRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteMappingRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteMappingRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteMappingRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteMappingRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteMappingRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteMappingRequest.id)
}

// -------------------------------------------------------------------

// UpdateMappingRequest

// .opi_api.network.cloud.v1alpha1.Mapping mapping = 1;
inline bool UpdateMappingRequest::_internal_has_mapping() const {
  return this != internal_default_instance() && mapping_ != nullptr;
}
inline bool UpdateMappingRequest::has_mapping() const {
  return _internal_has_mapping();
}
inline const ::opi_api::network::cloud::v1alpha1::Mapping& UpdateMappingRequest::_internal_mapping() const {
  const ::opi_api::network::cloud::v1alpha1::Mapping* p = mapping_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Mapping&>(
      ::opi_api::network::cloud::v1alpha1::_Mapping_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Mapping& UpdateMappingRequest::mapping() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateMappingRequest.mapping)
  return _internal_mapping();
}
inline void UpdateMappingRequest::unsafe_arena_set_allocated_mapping(
    ::opi_api::network::cloud::v1alpha1::Mapping* mapping) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapping_);
  }
  mapping_ = mapping;
  if (mapping) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateMappingRequest.mapping)
}
inline ::opi_api::network::cloud::v1alpha1::Mapping* UpdateMappingRequest::release_mapping() {
  
  ::opi_api::network::cloud::v1alpha1::Mapping* temp = mapping_;
  mapping_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Mapping* UpdateMappingRequest::unsafe_arena_release_mapping() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateMappingRequest.mapping)
  
  ::opi_api::network::cloud::v1alpha1::Mapping* temp = mapping_;
  mapping_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Mapping* UpdateMappingRequest::_internal_mutable_mapping() {
  
  if (mapping_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Mapping>(GetArenaForAllocation());
    mapping_ = p;
  }
  return mapping_;
}
inline ::opi_api::network::cloud::v1alpha1::Mapping* UpdateMappingRequest::mutable_mapping() {
  ::opi_api::network::cloud::v1alpha1::Mapping* _msg = _internal_mutable_mapping();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateMappingRequest.mapping)
  return _msg;
}
inline void UpdateMappingRequest::set_allocated_mapping(::opi_api::network::cloud::v1alpha1::Mapping* mapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapping_);
  }
  if (mapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapping));
    if (message_arena != submessage_arena) {
      mapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mapping, submessage_arena);
    }
    
  } else {
    
  }
  mapping_ = mapping;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateMappingRequest.mapping)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateMappingRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateMappingRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateMappingRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateMappingRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateMappingRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateMappingRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateMappingRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateMappingRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateMappingRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateMappingRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateMappingRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateMappingRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateMappingRequest.update_mask)
  return _msg;
}
inline void UpdateMappingRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateMappingRequest.update_mask)
}

// -------------------------------------------------------------------

// ListMappingsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListMappingsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListMappingsRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListMappingsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMappingsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListMappingsRequest.parent)
}
inline std::string* ListMappingsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListMappingsRequest.parent)
  return _s;
}
inline const std::string& ListMappingsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListMappingsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListMappingsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListMappingsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListMappingsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListMappingsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListMappingsRequest.parent)
}

// int32 page_size = 2;
inline void ListMappingsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListMappingsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListMappingsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListMappingsRequest.page_size)
  return _internal_page_size();
}
inline void ListMappingsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListMappingsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListMappingsRequest.page_size)
}

// string page_token = 3;
inline void ListMappingsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListMappingsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListMappingsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMappingsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListMappingsRequest.page_token)
}
inline std::string* ListMappingsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListMappingsRequest.page_token)
  return _s;
}
inline const std::string& ListMappingsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListMappingsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListMappingsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListMappingsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListMappingsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListMappingsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListMappingsRequest.page_token)
}

// -------------------------------------------------------------------

// ListMappingsResponse

// repeated .opi_api.network.cloud.v1alpha1.Mapping mapping = 1;
inline int ListMappingsResponse::_internal_mapping_size() const {
  return mapping_.size();
}
inline int ListMappingsResponse::mapping_size() const {
  return _internal_mapping_size();
}
inline ::opi_api::network::cloud::v1alpha1::Mapping* ListMappingsResponse::mutable_mapping(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListMappingsResponse.mapping)
  return mapping_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Mapping >*
ListMappingsResponse::mutable_mapping() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListMappingsResponse.mapping)
  return &mapping_;
}
inline const ::opi_api::network::cloud::v1alpha1::Mapping& ListMappingsResponse::_internal_mapping(int index) const {
  return mapping_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::Mapping& ListMappingsResponse::mapping(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListMappingsResponse.mapping)
  return _internal_mapping(index);
}
inline ::opi_api::network::cloud::v1alpha1::Mapping* ListMappingsResponse::_internal_add_mapping() {
  return mapping_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::Mapping* ListMappingsResponse::add_mapping() {
  ::opi_api::network::cloud::v1alpha1::Mapping* _add = _internal_add_mapping();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListMappingsResponse.mapping)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Mapping >&
ListMappingsResponse::mapping() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListMappingsResponse.mapping)
  return mapping_;
}

// string next_page_token = 2;
inline void ListMappingsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListMappingsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListMappingsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListMappingsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListMappingsResponse.next_page_token)
}
inline std::string* ListMappingsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListMappingsResponse.next_page_token)
  return _s;
}
inline const std::string& ListMappingsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListMappingsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListMappingsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListMappingsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListMappingsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListMappingsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListMappingsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetMappingRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetMappingRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetMappingRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetMappingRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMappingRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetMappingRequest.id)
}
inline std::string* GetMappingRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetMappingRequest.id)
  return _s;
}
inline const std::string& GetMappingRequest::_internal_id() const {
  return id_.Get();
}
inline void GetMappingRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetMappingRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetMappingRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetMappingRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetMappingRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetMappingRequest.id)
}

// -------------------------------------------------------------------

// CreateNextHopRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateNextHopRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateNextHopRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateNextHopRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNextHopRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateNextHopRequest.parent)
}
inline std::string* CreateNextHopRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateNextHopRequest.parent)
  return _s;
}
inline const std::string& CreateNextHopRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateNextHopRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNextHopRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNextHopRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateNextHopRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNextHopRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateNextHopRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.NextHop nexthop = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateNextHopRequest::_internal_has_nexthop() const {
  return this != internal_default_instance() && nexthop_ != nullptr;
}
inline bool CreateNextHopRequest::has_nexthop() const {
  return _internal_has_nexthop();
}
inline const ::opi_api::network::cloud::v1alpha1::NextHop& CreateNextHopRequest::_internal_nexthop() const {
  const ::opi_api::network::cloud::v1alpha1::NextHop* p = nexthop_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::NextHop&>(
      ::opi_api::network::cloud::v1alpha1::_NextHop_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::NextHop& CreateNextHopRequest::nexthop() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateNextHopRequest.nexthop)
  return _internal_nexthop();
}
inline void CreateNextHopRequest::unsafe_arena_set_allocated_nexthop(
    ::opi_api::network::cloud::v1alpha1::NextHop* nexthop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthop_);
  }
  nexthop_ = nexthop;
  if (nexthop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateNextHopRequest.nexthop)
}
inline ::opi_api::network::cloud::v1alpha1::NextHop* CreateNextHopRequest::release_nexthop() {
  
  ::opi_api::network::cloud::v1alpha1::NextHop* temp = nexthop_;
  nexthop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHop* CreateNextHopRequest::unsafe_arena_release_nexthop() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateNextHopRequest.nexthop)
  
  ::opi_api::network::cloud::v1alpha1::NextHop* temp = nexthop_;
  nexthop_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHop* CreateNextHopRequest::_internal_mutable_nexthop() {
  
  if (nexthop_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHop>(GetArenaForAllocation());
    nexthop_ = p;
  }
  return nexthop_;
}
inline ::opi_api::network::cloud::v1alpha1::NextHop* CreateNextHopRequest::mutable_nexthop() {
  ::opi_api::network::cloud::v1alpha1::NextHop* _msg = _internal_mutable_nexthop();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateNextHopRequest.nexthop)
  return _msg;
}
inline void CreateNextHopRequest::set_allocated_nexthop(::opi_api::network::cloud::v1alpha1::NextHop* nexthop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthop_);
  }
  if (nexthop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthop));
    if (message_arena != submessage_arena) {
      nexthop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nexthop, submessage_arena);
    }
    
  } else {
    
  }
  nexthop_ = nexthop;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateNextHopRequest.nexthop)
}

// string nexthop_id = 3;
inline void CreateNextHopRequest::clear_nexthop_id() {
  nexthop_id_.ClearToEmpty();
}
inline const std::string& CreateNextHopRequest::nexthop_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateNextHopRequest.nexthop_id)
  return _internal_nexthop_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNextHopRequest::set_nexthop_id(ArgT0&& arg0, ArgT... args) {
 
 nexthop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateNextHopRequest.nexthop_id)
}
inline std::string* CreateNextHopRequest::mutable_nexthop_id() {
  std::string* _s = _internal_mutable_nexthop_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateNextHopRequest.nexthop_id)
  return _s;
}
inline const std::string& CreateNextHopRequest::_internal_nexthop_id() const {
  return nexthop_id_.Get();
}
inline void CreateNextHopRequest::_internal_set_nexthop_id(const std::string& value) {
  
  nexthop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNextHopRequest::_internal_mutable_nexthop_id() {
  
  return nexthop_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNextHopRequest::release_nexthop_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateNextHopRequest.nexthop_id)
  return nexthop_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNextHopRequest::set_allocated_nexthop_id(std::string* nexthop_id) {
  if (nexthop_id != nullptr) {
    
  } else {
    
  }
  nexthop_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nexthop_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nexthop_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nexthop_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateNextHopRequest.nexthop_id)
}

// -------------------------------------------------------------------

// DeleteNextHopRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteNextHopRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteNextHopRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteNextHopRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteNextHopRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteNextHopRequest.id)
}
inline std::string* DeleteNextHopRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteNextHopRequest.id)
  return _s;
}
inline const std::string& DeleteNextHopRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteNextHopRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteNextHopRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteNextHopRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteNextHopRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteNextHopRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteNextHopRequest.id)
}

// -------------------------------------------------------------------

// UpdateNextHopRequest

// .opi_api.network.cloud.v1alpha1.NextHop nexthop = 1;
inline bool UpdateNextHopRequest::_internal_has_nexthop() const {
  return this != internal_default_instance() && nexthop_ != nullptr;
}
inline bool UpdateNextHopRequest::has_nexthop() const {
  return _internal_has_nexthop();
}
inline const ::opi_api::network::cloud::v1alpha1::NextHop& UpdateNextHopRequest::_internal_nexthop() const {
  const ::opi_api::network::cloud::v1alpha1::NextHop* p = nexthop_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::NextHop&>(
      ::opi_api::network::cloud::v1alpha1::_NextHop_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::NextHop& UpdateNextHopRequest::nexthop() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateNextHopRequest.nexthop)
  return _internal_nexthop();
}
inline void UpdateNextHopRequest::unsafe_arena_set_allocated_nexthop(
    ::opi_api::network::cloud::v1alpha1::NextHop* nexthop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthop_);
  }
  nexthop_ = nexthop;
  if (nexthop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateNextHopRequest.nexthop)
}
inline ::opi_api::network::cloud::v1alpha1::NextHop* UpdateNextHopRequest::release_nexthop() {
  
  ::opi_api::network::cloud::v1alpha1::NextHop* temp = nexthop_;
  nexthop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHop* UpdateNextHopRequest::unsafe_arena_release_nexthop() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateNextHopRequest.nexthop)
  
  ::opi_api::network::cloud::v1alpha1::NextHop* temp = nexthop_;
  nexthop_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHop* UpdateNextHopRequest::_internal_mutable_nexthop() {
  
  if (nexthop_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHop>(GetArenaForAllocation());
    nexthop_ = p;
  }
  return nexthop_;
}
inline ::opi_api::network::cloud::v1alpha1::NextHop* UpdateNextHopRequest::mutable_nexthop() {
  ::opi_api::network::cloud::v1alpha1::NextHop* _msg = _internal_mutable_nexthop();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateNextHopRequest.nexthop)
  return _msg;
}
inline void UpdateNextHopRequest::set_allocated_nexthop(::opi_api::network::cloud::v1alpha1::NextHop* nexthop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthop_);
  }
  if (nexthop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthop));
    if (message_arena != submessage_arena) {
      nexthop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nexthop, submessage_arena);
    }
    
  } else {
    
  }
  nexthop_ = nexthop;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateNextHopRequest.nexthop)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateNextHopRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateNextHopRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNextHopRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNextHopRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateNextHopRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateNextHopRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateNextHopRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNextHopRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNextHopRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateNextHopRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNextHopRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNextHopRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateNextHopRequest.update_mask)
  return _msg;
}
inline void UpdateNextHopRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateNextHopRequest.update_mask)
}

// -------------------------------------------------------------------

// ListNextHopsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListNextHopsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListNextHopsRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListNextHopsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNextHopsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListNextHopsRequest.parent)
}
inline std::string* ListNextHopsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListNextHopsRequest.parent)
  return _s;
}
inline const std::string& ListNextHopsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListNextHopsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNextHopsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNextHopsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListNextHopsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNextHopsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListNextHopsRequest.parent)
}

// int32 page_size = 2;
inline void ListNextHopsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListNextHopsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListNextHopsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListNextHopsRequest.page_size)
  return _internal_page_size();
}
inline void ListNextHopsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListNextHopsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListNextHopsRequest.page_size)
}

// string page_token = 3;
inline void ListNextHopsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListNextHopsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListNextHopsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNextHopsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListNextHopsRequest.page_token)
}
inline std::string* ListNextHopsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListNextHopsRequest.page_token)
  return _s;
}
inline const std::string& ListNextHopsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListNextHopsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNextHopsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNextHopsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListNextHopsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNextHopsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListNextHopsRequest.page_token)
}

// -------------------------------------------------------------------

// ListNextHopsResponse

// repeated .opi_api.network.cloud.v1alpha1.NextHop nexthop = 1;
inline int ListNextHopsResponse::_internal_nexthop_size() const {
  return nexthop_.size();
}
inline int ListNextHopsResponse::nexthop_size() const {
  return _internal_nexthop_size();
}
inline ::opi_api::network::cloud::v1alpha1::NextHop* ListNextHopsResponse::mutable_nexthop(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListNextHopsResponse.nexthop)
  return nexthop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHop >*
ListNextHopsResponse::mutable_nexthop() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListNextHopsResponse.nexthop)
  return &nexthop_;
}
inline const ::opi_api::network::cloud::v1alpha1::NextHop& ListNextHopsResponse::_internal_nexthop(int index) const {
  return nexthop_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::NextHop& ListNextHopsResponse::nexthop(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListNextHopsResponse.nexthop)
  return _internal_nexthop(index);
}
inline ::opi_api::network::cloud::v1alpha1::NextHop* ListNextHopsResponse::_internal_add_nexthop() {
  return nexthop_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::NextHop* ListNextHopsResponse::add_nexthop() {
  ::opi_api::network::cloud::v1alpha1::NextHop* _add = _internal_add_nexthop();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListNextHopsResponse.nexthop)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHop >&
ListNextHopsResponse::nexthop() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListNextHopsResponse.nexthop)
  return nexthop_;
}

// string next_page_token = 2;
inline void ListNextHopsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListNextHopsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListNextHopsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNextHopsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListNextHopsResponse.next_page_token)
}
inline std::string* ListNextHopsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListNextHopsResponse.next_page_token)
  return _s;
}
inline const std::string& ListNextHopsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListNextHopsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNextHopsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNextHopsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListNextHopsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNextHopsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListNextHopsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetNextHopRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetNextHopRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetNextHopRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetNextHopRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNextHopRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetNextHopRequest.id)
}
inline std::string* GetNextHopRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetNextHopRequest.id)
  return _s;
}
inline const std::string& GetNextHopRequest::_internal_id() const {
  return id_.Get();
}
inline void GetNextHopRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetNextHopRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetNextHopRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetNextHopRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetNextHopRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetNextHopRequest.id)
}

// -------------------------------------------------------------------

// CreateNextHopGroupRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateNextHopGroupRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateNextHopGroupRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNextHopGroupRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.parent)
}
inline std::string* CreateNextHopGroupRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.parent)
  return _s;
}
inline const std::string& CreateNextHopGroupRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateNextHopGroupRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNextHopGroupRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNextHopGroupRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNextHopGroupRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.NextHopGroup nexthopgroup = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateNextHopGroupRequest::_internal_has_nexthopgroup() const {
  return this != internal_default_instance() && nexthopgroup_ != nullptr;
}
inline bool CreateNextHopGroupRequest::has_nexthopgroup() const {
  return _internal_has_nexthopgroup();
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopGroup& CreateNextHopGroupRequest::_internal_nexthopgroup() const {
  const ::opi_api::network::cloud::v1alpha1::NextHopGroup* p = nexthopgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::NextHopGroup&>(
      ::opi_api::network::cloud::v1alpha1::_NextHopGroup_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopGroup& CreateNextHopGroupRequest::nexthopgroup() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.nexthopgroup)
  return _internal_nexthopgroup();
}
inline void CreateNextHopGroupRequest::unsafe_arena_set_allocated_nexthopgroup(
    ::opi_api::network::cloud::v1alpha1::NextHopGroup* nexthopgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopgroup_);
  }
  nexthopgroup_ = nexthopgroup;
  if (nexthopgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.nexthopgroup)
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroup* CreateNextHopGroupRequest::release_nexthopgroup() {
  
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* temp = nexthopgroup_;
  nexthopgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroup* CreateNextHopGroupRequest::unsafe_arena_release_nexthopgroup() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.nexthopgroup)
  
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* temp = nexthopgroup_;
  nexthopgroup_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroup* CreateNextHopGroupRequest::_internal_mutable_nexthopgroup() {
  
  if (nexthopgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHopGroup>(GetArenaForAllocation());
    nexthopgroup_ = p;
  }
  return nexthopgroup_;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroup* CreateNextHopGroupRequest::mutable_nexthopgroup() {
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* _msg = _internal_mutable_nexthopgroup();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.nexthopgroup)
  return _msg;
}
inline void CreateNextHopGroupRequest::set_allocated_nexthopgroup(::opi_api::network::cloud::v1alpha1::NextHopGroup* nexthopgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopgroup_);
  }
  if (nexthopgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopgroup));
    if (message_arena != submessage_arena) {
      nexthopgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nexthopgroup, submessage_arena);
    }
    
  } else {
    
  }
  nexthopgroup_ = nexthopgroup;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.nexthopgroup)
}

// string nexthopgroup_id = 3;
inline void CreateNextHopGroupRequest::clear_nexthopgroup_id() {
  nexthopgroup_id_.ClearToEmpty();
}
inline const std::string& CreateNextHopGroupRequest::nexthopgroup_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.nexthopgroup_id)
  return _internal_nexthopgroup_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNextHopGroupRequest::set_nexthopgroup_id(ArgT0&& arg0, ArgT... args) {
 
 nexthopgroup_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.nexthopgroup_id)
}
inline std::string* CreateNextHopGroupRequest::mutable_nexthopgroup_id() {
  std::string* _s = _internal_mutable_nexthopgroup_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.nexthopgroup_id)
  return _s;
}
inline const std::string& CreateNextHopGroupRequest::_internal_nexthopgroup_id() const {
  return nexthopgroup_id_.Get();
}
inline void CreateNextHopGroupRequest::_internal_set_nexthopgroup_id(const std::string& value) {
  
  nexthopgroup_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNextHopGroupRequest::_internal_mutable_nexthopgroup_id() {
  
  return nexthopgroup_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNextHopGroupRequest::release_nexthopgroup_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.nexthopgroup_id)
  return nexthopgroup_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNextHopGroupRequest::set_allocated_nexthopgroup_id(std::string* nexthopgroup_id) {
  if (nexthopgroup_id != nullptr) {
    
  } else {
    
  }
  nexthopgroup_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nexthopgroup_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nexthopgroup_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nexthopgroup_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateNextHopGroupRequest.nexthopgroup_id)
}

// -------------------------------------------------------------------

// DeleteNextHopGroupRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteNextHopGroupRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteNextHopGroupRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteNextHopGroupRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteNextHopGroupRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteNextHopGroupRequest.id)
}
inline std::string* DeleteNextHopGroupRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteNextHopGroupRequest.id)
  return _s;
}
inline const std::string& DeleteNextHopGroupRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteNextHopGroupRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteNextHopGroupRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteNextHopGroupRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteNextHopGroupRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteNextHopGroupRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteNextHopGroupRequest.id)
}

// -------------------------------------------------------------------

// UpdateNextHopGroupRequest

// .opi_api.network.cloud.v1alpha1.NextHopGroup nexthopgroup = 1;
inline bool UpdateNextHopGroupRequest::_internal_has_nexthopgroup() const {
  return this != internal_default_instance() && nexthopgroup_ != nullptr;
}
inline bool UpdateNextHopGroupRequest::has_nexthopgroup() const {
  return _internal_has_nexthopgroup();
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopGroup& UpdateNextHopGroupRequest::_internal_nexthopgroup() const {
  const ::opi_api::network::cloud::v1alpha1::NextHopGroup* p = nexthopgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::NextHopGroup&>(
      ::opi_api::network::cloud::v1alpha1::_NextHopGroup_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopGroup& UpdateNextHopGroupRequest::nexthopgroup() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest.nexthopgroup)
  return _internal_nexthopgroup();
}
inline void UpdateNextHopGroupRequest::unsafe_arena_set_allocated_nexthopgroup(
    ::opi_api::network::cloud::v1alpha1::NextHopGroup* nexthopgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopgroup_);
  }
  nexthopgroup_ = nexthopgroup;
  if (nexthopgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest.nexthopgroup)
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroup* UpdateNextHopGroupRequest::release_nexthopgroup() {
  
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* temp = nexthopgroup_;
  nexthopgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroup* UpdateNextHopGroupRequest::unsafe_arena_release_nexthopgroup() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest.nexthopgroup)
  
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* temp = nexthopgroup_;
  nexthopgroup_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroup* UpdateNextHopGroupRequest::_internal_mutable_nexthopgroup() {
  
  if (nexthopgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHopGroup>(GetArenaForAllocation());
    nexthopgroup_ = p;
  }
  return nexthopgroup_;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroup* UpdateNextHopGroupRequest::mutable_nexthopgroup() {
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* _msg = _internal_mutable_nexthopgroup();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest.nexthopgroup)
  return _msg;
}
inline void UpdateNextHopGroupRequest::set_allocated_nexthopgroup(::opi_api::network::cloud::v1alpha1::NextHopGroup* nexthopgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopgroup_);
  }
  if (nexthopgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthopgroup));
    if (message_arena != submessage_arena) {
      nexthopgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nexthopgroup, submessage_arena);
    }
    
  } else {
    
  }
  nexthopgroup_ = nexthopgroup;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest.nexthopgroup)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateNextHopGroupRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateNextHopGroupRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNextHopGroupRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNextHopGroupRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateNextHopGroupRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNextHopGroupRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNextHopGroupRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNextHopGroupRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNextHopGroupRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest.update_mask)
  return _msg;
}
inline void UpdateNextHopGroupRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateNextHopGroupRequest.update_mask)
}

// -------------------------------------------------------------------

// ListNextHopGroupsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListNextHopGroupsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListNextHopGroupsRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNextHopGroupsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest.parent)
}
inline std::string* ListNextHopGroupsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest.parent)
  return _s;
}
inline const std::string& ListNextHopGroupsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListNextHopGroupsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNextHopGroupsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNextHopGroupsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNextHopGroupsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest.parent)
}

// int32 page_size = 2;
inline void ListNextHopGroupsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListNextHopGroupsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListNextHopGroupsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest.page_size)
  return _internal_page_size();
}
inline void ListNextHopGroupsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListNextHopGroupsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest.page_size)
}

// string page_token = 3;
inline void ListNextHopGroupsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListNextHopGroupsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNextHopGroupsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest.page_token)
}
inline std::string* ListNextHopGroupsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest.page_token)
  return _s;
}
inline const std::string& ListNextHopGroupsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListNextHopGroupsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNextHopGroupsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNextHopGroupsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNextHopGroupsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListNextHopGroupsRequest.page_token)
}

// -------------------------------------------------------------------

// ListNextHopGroupsResponse

// repeated .opi_api.network.cloud.v1alpha1.NextHopGroup nexthopgroup = 1;
inline int ListNextHopGroupsResponse::_internal_nexthopgroup_size() const {
  return nexthopgroup_.size();
}
inline int ListNextHopGroupsResponse::nexthopgroup_size() const {
  return _internal_nexthopgroup_size();
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroup* ListNextHopGroupsResponse::mutable_nexthopgroup(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse.nexthopgroup)
  return nexthopgroup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHopGroup >*
ListNextHopGroupsResponse::mutable_nexthopgroup() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse.nexthopgroup)
  return &nexthopgroup_;
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopGroup& ListNextHopGroupsResponse::_internal_nexthopgroup(int index) const {
  return nexthopgroup_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopGroup& ListNextHopGroupsResponse::nexthopgroup(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse.nexthopgroup)
  return _internal_nexthopgroup(index);
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroup* ListNextHopGroupsResponse::_internal_add_nexthopgroup() {
  return nexthopgroup_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroup* ListNextHopGroupsResponse::add_nexthopgroup() {
  ::opi_api::network::cloud::v1alpha1::NextHopGroup* _add = _internal_add_nexthopgroup();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse.nexthopgroup)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHopGroup >&
ListNextHopGroupsResponse::nexthopgroup() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse.nexthopgroup)
  return nexthopgroup_;
}

// string next_page_token = 2;
inline void ListNextHopGroupsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListNextHopGroupsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNextHopGroupsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse.next_page_token)
}
inline std::string* ListNextHopGroupsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse.next_page_token)
  return _s;
}
inline const std::string& ListNextHopGroupsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListNextHopGroupsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNextHopGroupsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNextHopGroupsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNextHopGroupsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListNextHopGroupsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetNextHopGroupRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetNextHopGroupRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetNextHopGroupRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetNextHopGroupRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNextHopGroupRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetNextHopGroupRequest.id)
}
inline std::string* GetNextHopGroupRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetNextHopGroupRequest.id)
  return _s;
}
inline const std::string& GetNextHopGroupRequest::_internal_id() const {
  return id_.Get();
}
inline void GetNextHopGroupRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetNextHopGroupRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetNextHopGroupRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetNextHopGroupRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetNextHopGroupRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetNextHopGroupRequest.id)
}

// -------------------------------------------------------------------

// CreateSubnetRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateSubnetRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateSubnetRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateSubnetRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSubnetRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateSubnetRequest.parent)
}
inline std::string* CreateSubnetRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateSubnetRequest.parent)
  return _s;
}
inline const std::string& CreateSubnetRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateSubnetRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateSubnetRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateSubnetRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateSubnetRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateSubnetRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateSubnetRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.Subnet subnet = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateSubnetRequest::_internal_has_subnet() const {
  return this != internal_default_instance() && subnet_ != nullptr;
}
inline bool CreateSubnetRequest::has_subnet() const {
  return _internal_has_subnet();
}
inline const ::opi_api::network::cloud::v1alpha1::Subnet& CreateSubnetRequest::_internal_subnet() const {
  const ::opi_api::network::cloud::v1alpha1::Subnet* p = subnet_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Subnet&>(
      ::opi_api::network::cloud::v1alpha1::_Subnet_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Subnet& CreateSubnetRequest::subnet() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateSubnetRequest.subnet)
  return _internal_subnet();
}
inline void CreateSubnetRequest::unsafe_arena_set_allocated_subnet(
    ::opi_api::network::cloud::v1alpha1::Subnet* subnet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subnet_);
  }
  subnet_ = subnet;
  if (subnet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateSubnetRequest.subnet)
}
inline ::opi_api::network::cloud::v1alpha1::Subnet* CreateSubnetRequest::release_subnet() {
  
  ::opi_api::network::cloud::v1alpha1::Subnet* temp = subnet_;
  subnet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Subnet* CreateSubnetRequest::unsafe_arena_release_subnet() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateSubnetRequest.subnet)
  
  ::opi_api::network::cloud::v1alpha1::Subnet* temp = subnet_;
  subnet_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Subnet* CreateSubnetRequest::_internal_mutable_subnet() {
  
  if (subnet_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Subnet>(GetArenaForAllocation());
    subnet_ = p;
  }
  return subnet_;
}
inline ::opi_api::network::cloud::v1alpha1::Subnet* CreateSubnetRequest::mutable_subnet() {
  ::opi_api::network::cloud::v1alpha1::Subnet* _msg = _internal_mutable_subnet();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateSubnetRequest.subnet)
  return _msg;
}
inline void CreateSubnetRequest::set_allocated_subnet(::opi_api::network::cloud::v1alpha1::Subnet* subnet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subnet_);
  }
  if (subnet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subnet));
    if (message_arena != submessage_arena) {
      subnet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subnet, submessage_arena);
    }
    
  } else {
    
  }
  subnet_ = subnet;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateSubnetRequest.subnet)
}

// string subnet_id = 3;
inline void CreateSubnetRequest::clear_subnet_id() {
  subnet_id_.ClearToEmpty();
}
inline const std::string& CreateSubnetRequest::subnet_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateSubnetRequest.subnet_id)
  return _internal_subnet_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSubnetRequest::set_subnet_id(ArgT0&& arg0, ArgT... args) {
 
 subnet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateSubnetRequest.subnet_id)
}
inline std::string* CreateSubnetRequest::mutable_subnet_id() {
  std::string* _s = _internal_mutable_subnet_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateSubnetRequest.subnet_id)
  return _s;
}
inline const std::string& CreateSubnetRequest::_internal_subnet_id() const {
  return subnet_id_.Get();
}
inline void CreateSubnetRequest::_internal_set_subnet_id(const std::string& value) {
  
  subnet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateSubnetRequest::_internal_mutable_subnet_id() {
  
  return subnet_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateSubnetRequest::release_subnet_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateSubnetRequest.subnet_id)
  return subnet_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateSubnetRequest::set_allocated_subnet_id(std::string* subnet_id) {
  if (subnet_id != nullptr) {
    
  } else {
    
  }
  subnet_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subnet_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subnet_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subnet_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateSubnetRequest.subnet_id)
}

// -------------------------------------------------------------------

// DeleteSubnetRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteSubnetRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteSubnetRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteSubnetRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSubnetRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteSubnetRequest.id)
}
inline std::string* DeleteSubnetRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteSubnetRequest.id)
  return _s;
}
inline const std::string& DeleteSubnetRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteSubnetRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteSubnetRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteSubnetRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteSubnetRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteSubnetRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteSubnetRequest.id)
}

// -------------------------------------------------------------------

// UpdateSubnetRequest

// .opi_api.network.cloud.v1alpha1.Subnet subnet = 1;
inline bool UpdateSubnetRequest::_internal_has_subnet() const {
  return this != internal_default_instance() && subnet_ != nullptr;
}
inline bool UpdateSubnetRequest::has_subnet() const {
  return _internal_has_subnet();
}
inline const ::opi_api::network::cloud::v1alpha1::Subnet& UpdateSubnetRequest::_internal_subnet() const {
  const ::opi_api::network::cloud::v1alpha1::Subnet* p = subnet_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Subnet&>(
      ::opi_api::network::cloud::v1alpha1::_Subnet_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Subnet& UpdateSubnetRequest::subnet() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateSubnetRequest.subnet)
  return _internal_subnet();
}
inline void UpdateSubnetRequest::unsafe_arena_set_allocated_subnet(
    ::opi_api::network::cloud::v1alpha1::Subnet* subnet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subnet_);
  }
  subnet_ = subnet;
  if (subnet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSubnetRequest.subnet)
}
inline ::opi_api::network::cloud::v1alpha1::Subnet* UpdateSubnetRequest::release_subnet() {
  
  ::opi_api::network::cloud::v1alpha1::Subnet* temp = subnet_;
  subnet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Subnet* UpdateSubnetRequest::unsafe_arena_release_subnet() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateSubnetRequest.subnet)
  
  ::opi_api::network::cloud::v1alpha1::Subnet* temp = subnet_;
  subnet_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Subnet* UpdateSubnetRequest::_internal_mutable_subnet() {
  
  if (subnet_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Subnet>(GetArenaForAllocation());
    subnet_ = p;
  }
  return subnet_;
}
inline ::opi_api::network::cloud::v1alpha1::Subnet* UpdateSubnetRequest::mutable_subnet() {
  ::opi_api::network::cloud::v1alpha1::Subnet* _msg = _internal_mutable_subnet();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateSubnetRequest.subnet)
  return _msg;
}
inline void UpdateSubnetRequest::set_allocated_subnet(::opi_api::network::cloud::v1alpha1::Subnet* subnet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subnet_);
  }
  if (subnet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subnet));
    if (message_arena != submessage_arena) {
      subnet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subnet, submessage_arena);
    }
    
  } else {
    
  }
  subnet_ = subnet;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSubnetRequest.subnet)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateSubnetRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateSubnetRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSubnetRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSubnetRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateSubnetRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateSubnetRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSubnetRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSubnetRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSubnetRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateSubnetRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSubnetRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSubnetRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateSubnetRequest.update_mask)
  return _msg;
}
inline void UpdateSubnetRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSubnetRequest.update_mask)
}

// -------------------------------------------------------------------

// ListSubnetsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListSubnetsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListSubnetsRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSubnetsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSubnetsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSubnetsRequest.parent)
}
inline std::string* ListSubnetsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSubnetsRequest.parent)
  return _s;
}
inline const std::string& ListSubnetsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListSubnetsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSubnetsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSubnetsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListSubnetsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSubnetsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListSubnetsRequest.parent)
}

// int32 page_size = 2;
inline void ListSubnetsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListSubnetsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListSubnetsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSubnetsRequest.page_size)
  return _internal_page_size();
}
inline void ListSubnetsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListSubnetsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSubnetsRequest.page_size)
}

// string page_token = 3;
inline void ListSubnetsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListSubnetsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSubnetsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSubnetsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSubnetsRequest.page_token)
}
inline std::string* ListSubnetsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSubnetsRequest.page_token)
  return _s;
}
inline const std::string& ListSubnetsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListSubnetsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSubnetsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSubnetsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListSubnetsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSubnetsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListSubnetsRequest.page_token)
}

// -------------------------------------------------------------------

// ListSubnetsResponse

// repeated .opi_api.network.cloud.v1alpha1.Subnet subnet = 1;
inline int ListSubnetsResponse::_internal_subnet_size() const {
  return subnet_.size();
}
inline int ListSubnetsResponse::subnet_size() const {
  return _internal_subnet_size();
}
inline ::opi_api::network::cloud::v1alpha1::Subnet* ListSubnetsResponse::mutable_subnet(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSubnetsResponse.subnet)
  return subnet_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Subnet >*
ListSubnetsResponse::mutable_subnet() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListSubnetsResponse.subnet)
  return &subnet_;
}
inline const ::opi_api::network::cloud::v1alpha1::Subnet& ListSubnetsResponse::_internal_subnet(int index) const {
  return subnet_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::Subnet& ListSubnetsResponse::subnet(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSubnetsResponse.subnet)
  return _internal_subnet(index);
}
inline ::opi_api::network::cloud::v1alpha1::Subnet* ListSubnetsResponse::_internal_add_subnet() {
  return subnet_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::Subnet* ListSubnetsResponse::add_subnet() {
  ::opi_api::network::cloud::v1alpha1::Subnet* _add = _internal_add_subnet();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListSubnetsResponse.subnet)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Subnet >&
ListSubnetsResponse::subnet() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListSubnetsResponse.subnet)
  return subnet_;
}

// string next_page_token = 2;
inline void ListSubnetsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListSubnetsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSubnetsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSubnetsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSubnetsResponse.next_page_token)
}
inline std::string* ListSubnetsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSubnetsResponse.next_page_token)
  return _s;
}
inline const std::string& ListSubnetsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListSubnetsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSubnetsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSubnetsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListSubnetsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSubnetsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListSubnetsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetSubnetRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetSubnetRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetSubnetRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetSubnetRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSubnetRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetSubnetRequest.id)
}
inline std::string* GetSubnetRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetSubnetRequest.id)
  return _s;
}
inline const std::string& GetSubnetRequest::_internal_id() const {
  return id_.Get();
}
inline void GetSubnetRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetSubnetRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetSubnetRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetSubnetRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetSubnetRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetSubnetRequest.id)
}

// -------------------------------------------------------------------

// CreateTunnelRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateTunnelRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateTunnelRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateTunnelRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTunnelRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateTunnelRequest.parent)
}
inline std::string* CreateTunnelRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateTunnelRequest.parent)
  return _s;
}
inline const std::string& CreateTunnelRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateTunnelRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateTunnelRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateTunnelRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateTunnelRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateTunnelRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateTunnelRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.Tunnel tunnel = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateTunnelRequest::_internal_has_tunnel() const {
  return this != internal_default_instance() && tunnel_ != nullptr;
}
inline bool CreateTunnelRequest::has_tunnel() const {
  return _internal_has_tunnel();
}
inline const ::opi_api::network::cloud::v1alpha1::Tunnel& CreateTunnelRequest::_internal_tunnel() const {
  const ::opi_api::network::cloud::v1alpha1::Tunnel* p = tunnel_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Tunnel&>(
      ::opi_api::network::cloud::v1alpha1::_Tunnel_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Tunnel& CreateTunnelRequest::tunnel() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateTunnelRequest.tunnel)
  return _internal_tunnel();
}
inline void CreateTunnelRequest::unsafe_arena_set_allocated_tunnel(
    ::opi_api::network::cloud::v1alpha1::Tunnel* tunnel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_);
  }
  tunnel_ = tunnel;
  if (tunnel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateTunnelRequest.tunnel)
}
inline ::opi_api::network::cloud::v1alpha1::Tunnel* CreateTunnelRequest::release_tunnel() {
  
  ::opi_api::network::cloud::v1alpha1::Tunnel* temp = tunnel_;
  tunnel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Tunnel* CreateTunnelRequest::unsafe_arena_release_tunnel() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateTunnelRequest.tunnel)
  
  ::opi_api::network::cloud::v1alpha1::Tunnel* temp = tunnel_;
  tunnel_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Tunnel* CreateTunnelRequest::_internal_mutable_tunnel() {
  
  if (tunnel_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Tunnel>(GetArenaForAllocation());
    tunnel_ = p;
  }
  return tunnel_;
}
inline ::opi_api::network::cloud::v1alpha1::Tunnel* CreateTunnelRequest::mutable_tunnel() {
  ::opi_api::network::cloud::v1alpha1::Tunnel* _msg = _internal_mutable_tunnel();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateTunnelRequest.tunnel)
  return _msg;
}
inline void CreateTunnelRequest::set_allocated_tunnel(::opi_api::network::cloud::v1alpha1::Tunnel* tunnel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_);
  }
  if (tunnel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel));
    if (message_arena != submessage_arena) {
      tunnel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tunnel, submessage_arena);
    }
    
  } else {
    
  }
  tunnel_ = tunnel;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateTunnelRequest.tunnel)
}

// string tunnel_id = 3;
inline void CreateTunnelRequest::clear_tunnel_id() {
  tunnel_id_.ClearToEmpty();
}
inline const std::string& CreateTunnelRequest::tunnel_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateTunnelRequest.tunnel_id)
  return _internal_tunnel_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTunnelRequest::set_tunnel_id(ArgT0&& arg0, ArgT... args) {
 
 tunnel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateTunnelRequest.tunnel_id)
}
inline std::string* CreateTunnelRequest::mutable_tunnel_id() {
  std::string* _s = _internal_mutable_tunnel_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateTunnelRequest.tunnel_id)
  return _s;
}
inline const std::string& CreateTunnelRequest::_internal_tunnel_id() const {
  return tunnel_id_.Get();
}
inline void CreateTunnelRequest::_internal_set_tunnel_id(const std::string& value) {
  
  tunnel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateTunnelRequest::_internal_mutable_tunnel_id() {
  
  return tunnel_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateTunnelRequest::release_tunnel_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateTunnelRequest.tunnel_id)
  return tunnel_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateTunnelRequest::set_allocated_tunnel_id(std::string* tunnel_id) {
  if (tunnel_id != nullptr) {
    
  } else {
    
  }
  tunnel_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tunnel_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tunnel_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tunnel_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateTunnelRequest.tunnel_id)
}

// -------------------------------------------------------------------

// DeleteTunnelRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteTunnelRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteTunnelRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteTunnelRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteTunnelRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteTunnelRequest.id)
}
inline std::string* DeleteTunnelRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteTunnelRequest.id)
  return _s;
}
inline const std::string& DeleteTunnelRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteTunnelRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteTunnelRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteTunnelRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteTunnelRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteTunnelRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteTunnelRequest.id)
}

// -------------------------------------------------------------------

// UpdateTunnelRequest

// .opi_api.network.cloud.v1alpha1.Tunnel tunnel = 1;
inline bool UpdateTunnelRequest::_internal_has_tunnel() const {
  return this != internal_default_instance() && tunnel_ != nullptr;
}
inline bool UpdateTunnelRequest::has_tunnel() const {
  return _internal_has_tunnel();
}
inline const ::opi_api::network::cloud::v1alpha1::Tunnel& UpdateTunnelRequest::_internal_tunnel() const {
  const ::opi_api::network::cloud::v1alpha1::Tunnel* p = tunnel_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Tunnel&>(
      ::opi_api::network::cloud::v1alpha1::_Tunnel_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Tunnel& UpdateTunnelRequest::tunnel() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateTunnelRequest.tunnel)
  return _internal_tunnel();
}
inline void UpdateTunnelRequest::unsafe_arena_set_allocated_tunnel(
    ::opi_api::network::cloud::v1alpha1::Tunnel* tunnel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_);
  }
  tunnel_ = tunnel;
  if (tunnel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateTunnelRequest.tunnel)
}
inline ::opi_api::network::cloud::v1alpha1::Tunnel* UpdateTunnelRequest::release_tunnel() {
  
  ::opi_api::network::cloud::v1alpha1::Tunnel* temp = tunnel_;
  tunnel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Tunnel* UpdateTunnelRequest::unsafe_arena_release_tunnel() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateTunnelRequest.tunnel)
  
  ::opi_api::network::cloud::v1alpha1::Tunnel* temp = tunnel_;
  tunnel_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Tunnel* UpdateTunnelRequest::_internal_mutable_tunnel() {
  
  if (tunnel_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Tunnel>(GetArenaForAllocation());
    tunnel_ = p;
  }
  return tunnel_;
}
inline ::opi_api::network::cloud::v1alpha1::Tunnel* UpdateTunnelRequest::mutable_tunnel() {
  ::opi_api::network::cloud::v1alpha1::Tunnel* _msg = _internal_mutable_tunnel();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateTunnelRequest.tunnel)
  return _msg;
}
inline void UpdateTunnelRequest::set_allocated_tunnel(::opi_api::network::cloud::v1alpha1::Tunnel* tunnel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_);
  }
  if (tunnel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel));
    if (message_arena != submessage_arena) {
      tunnel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tunnel, submessage_arena);
    }
    
  } else {
    
  }
  tunnel_ = tunnel;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateTunnelRequest.tunnel)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateTunnelRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateTunnelRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateTunnelRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateTunnelRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateTunnelRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateTunnelRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateTunnelRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateTunnelRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateTunnelRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateTunnelRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateTunnelRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateTunnelRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateTunnelRequest.update_mask)
  return _msg;
}
inline void UpdateTunnelRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateTunnelRequest.update_mask)
}

// -------------------------------------------------------------------

// ListTunnelsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListTunnelsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListTunnelsRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListTunnelsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTunnelsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListTunnelsRequest.parent)
}
inline std::string* ListTunnelsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListTunnelsRequest.parent)
  return _s;
}
inline const std::string& ListTunnelsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListTunnelsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListTunnelsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListTunnelsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListTunnelsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListTunnelsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListTunnelsRequest.parent)
}

// int32 page_size = 2;
inline void ListTunnelsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListTunnelsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListTunnelsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListTunnelsRequest.page_size)
  return _internal_page_size();
}
inline void ListTunnelsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListTunnelsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListTunnelsRequest.page_size)
}

// string page_token = 3;
inline void ListTunnelsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListTunnelsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListTunnelsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTunnelsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListTunnelsRequest.page_token)
}
inline std::string* ListTunnelsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListTunnelsRequest.page_token)
  return _s;
}
inline const std::string& ListTunnelsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListTunnelsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListTunnelsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListTunnelsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListTunnelsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListTunnelsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListTunnelsRequest.page_token)
}

// -------------------------------------------------------------------

// ListTunnelsResponse

// repeated .opi_api.network.cloud.v1alpha1.Tunnel tunnel = 1;
inline int ListTunnelsResponse::_internal_tunnel_size() const {
  return tunnel_.size();
}
inline int ListTunnelsResponse::tunnel_size() const {
  return _internal_tunnel_size();
}
inline ::opi_api::network::cloud::v1alpha1::Tunnel* ListTunnelsResponse::mutable_tunnel(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListTunnelsResponse.tunnel)
  return tunnel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Tunnel >*
ListTunnelsResponse::mutable_tunnel() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListTunnelsResponse.tunnel)
  return &tunnel_;
}
inline const ::opi_api::network::cloud::v1alpha1::Tunnel& ListTunnelsResponse::_internal_tunnel(int index) const {
  return tunnel_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::Tunnel& ListTunnelsResponse::tunnel(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListTunnelsResponse.tunnel)
  return _internal_tunnel(index);
}
inline ::opi_api::network::cloud::v1alpha1::Tunnel* ListTunnelsResponse::_internal_add_tunnel() {
  return tunnel_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::Tunnel* ListTunnelsResponse::add_tunnel() {
  ::opi_api::network::cloud::v1alpha1::Tunnel* _add = _internal_add_tunnel();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListTunnelsResponse.tunnel)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Tunnel >&
ListTunnelsResponse::tunnel() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListTunnelsResponse.tunnel)
  return tunnel_;
}

// string next_page_token = 2;
inline void ListTunnelsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListTunnelsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListTunnelsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListTunnelsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListTunnelsResponse.next_page_token)
}
inline std::string* ListTunnelsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListTunnelsResponse.next_page_token)
  return _s;
}
inline const std::string& ListTunnelsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListTunnelsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListTunnelsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListTunnelsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListTunnelsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListTunnelsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListTunnelsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetTunnelRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetTunnelRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetTunnelRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetTunnelRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTunnelRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetTunnelRequest.id)
}
inline std::string* GetTunnelRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetTunnelRequest.id)
  return _s;
}
inline const std::string& GetTunnelRequest::_internal_id() const {
  return id_.Get();
}
inline void GetTunnelRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetTunnelRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetTunnelRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetTunnelRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetTunnelRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetTunnelRequest.id)
}

// -------------------------------------------------------------------

// CreateVpcRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateVpcRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateVpcRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateVpcRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateVpcRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateVpcRequest.parent)
}
inline std::string* CreateVpcRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateVpcRequest.parent)
  return _s;
}
inline const std::string& CreateVpcRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateVpcRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateVpcRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateVpcRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateVpcRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateVpcRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateVpcRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.Vpc vpc = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateVpcRequest::_internal_has_vpc() const {
  return this != internal_default_instance() && vpc_ != nullptr;
}
inline bool CreateVpcRequest::has_vpc() const {
  return _internal_has_vpc();
}
inline const ::opi_api::network::cloud::v1alpha1::Vpc& CreateVpcRequest::_internal_vpc() const {
  const ::opi_api::network::cloud::v1alpha1::Vpc* p = vpc_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Vpc&>(
      ::opi_api::network::cloud::v1alpha1::_Vpc_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Vpc& CreateVpcRequest::vpc() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateVpcRequest.vpc)
  return _internal_vpc();
}
inline void CreateVpcRequest::unsafe_arena_set_allocated_vpc(
    ::opi_api::network::cloud::v1alpha1::Vpc* vpc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc_);
  }
  vpc_ = vpc;
  if (vpc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateVpcRequest.vpc)
}
inline ::opi_api::network::cloud::v1alpha1::Vpc* CreateVpcRequest::release_vpc() {
  
  ::opi_api::network::cloud::v1alpha1::Vpc* temp = vpc_;
  vpc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Vpc* CreateVpcRequest::unsafe_arena_release_vpc() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateVpcRequest.vpc)
  
  ::opi_api::network::cloud::v1alpha1::Vpc* temp = vpc_;
  vpc_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Vpc* CreateVpcRequest::_internal_mutable_vpc() {
  
  if (vpc_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Vpc>(GetArenaForAllocation());
    vpc_ = p;
  }
  return vpc_;
}
inline ::opi_api::network::cloud::v1alpha1::Vpc* CreateVpcRequest::mutable_vpc() {
  ::opi_api::network::cloud::v1alpha1::Vpc* _msg = _internal_mutable_vpc();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateVpcRequest.vpc)
  return _msg;
}
inline void CreateVpcRequest::set_allocated_vpc(::opi_api::network::cloud::v1alpha1::Vpc* vpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc_);
  }
  if (vpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc));
    if (message_arena != submessage_arena) {
      vpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpc, submessage_arena);
    }
    
  } else {
    
  }
  vpc_ = vpc;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateVpcRequest.vpc)
}

// string vpc_id = 3;
inline void CreateVpcRequest::clear_vpc_id() {
  vpc_id_.ClearToEmpty();
}
inline const std::string& CreateVpcRequest::vpc_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateVpcRequest.vpc_id)
  return _internal_vpc_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateVpcRequest::set_vpc_id(ArgT0&& arg0, ArgT... args) {
 
 vpc_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateVpcRequest.vpc_id)
}
inline std::string* CreateVpcRequest::mutable_vpc_id() {
  std::string* _s = _internal_mutable_vpc_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateVpcRequest.vpc_id)
  return _s;
}
inline const std::string& CreateVpcRequest::_internal_vpc_id() const {
  return vpc_id_.Get();
}
inline void CreateVpcRequest::_internal_set_vpc_id(const std::string& value) {
  
  vpc_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateVpcRequest::_internal_mutable_vpc_id() {
  
  return vpc_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateVpcRequest::release_vpc_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateVpcRequest.vpc_id)
  return vpc_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateVpcRequest::set_allocated_vpc_id(std::string* vpc_id) {
  if (vpc_id != nullptr) {
    
  } else {
    
  }
  vpc_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vpc_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vpc_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vpc_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateVpcRequest.vpc_id)
}

// -------------------------------------------------------------------

// DeleteVpcRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteVpcRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteVpcRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteVpcRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteVpcRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteVpcRequest.id)
}
inline std::string* DeleteVpcRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteVpcRequest.id)
  return _s;
}
inline const std::string& DeleteVpcRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteVpcRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteVpcRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteVpcRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteVpcRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteVpcRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteVpcRequest.id)
}

// -------------------------------------------------------------------

// UpdateVpcRequest

// .opi_api.network.cloud.v1alpha1.Vpc vpc = 1;
inline bool UpdateVpcRequest::_internal_has_vpc() const {
  return this != internal_default_instance() && vpc_ != nullptr;
}
inline bool UpdateVpcRequest::has_vpc() const {
  return _internal_has_vpc();
}
inline const ::opi_api::network::cloud::v1alpha1::Vpc& UpdateVpcRequest::_internal_vpc() const {
  const ::opi_api::network::cloud::v1alpha1::Vpc* p = vpc_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::Vpc&>(
      ::opi_api::network::cloud::v1alpha1::_Vpc_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::Vpc& UpdateVpcRequest::vpc() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateVpcRequest.vpc)
  return _internal_vpc();
}
inline void UpdateVpcRequest::unsafe_arena_set_allocated_vpc(
    ::opi_api::network::cloud::v1alpha1::Vpc* vpc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc_);
  }
  vpc_ = vpc;
  if (vpc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateVpcRequest.vpc)
}
inline ::opi_api::network::cloud::v1alpha1::Vpc* UpdateVpcRequest::release_vpc() {
  
  ::opi_api::network::cloud::v1alpha1::Vpc* temp = vpc_;
  vpc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Vpc* UpdateVpcRequest::unsafe_arena_release_vpc() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateVpcRequest.vpc)
  
  ::opi_api::network::cloud::v1alpha1::Vpc* temp = vpc_;
  vpc_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::Vpc* UpdateVpcRequest::_internal_mutable_vpc() {
  
  if (vpc_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Vpc>(GetArenaForAllocation());
    vpc_ = p;
  }
  return vpc_;
}
inline ::opi_api::network::cloud::v1alpha1::Vpc* UpdateVpcRequest::mutable_vpc() {
  ::opi_api::network::cloud::v1alpha1::Vpc* _msg = _internal_mutable_vpc();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateVpcRequest.vpc)
  return _msg;
}
inline void UpdateVpcRequest::set_allocated_vpc(::opi_api::network::cloud::v1alpha1::Vpc* vpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc_);
  }
  if (vpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc));
    if (message_arena != submessage_arena) {
      vpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpc, submessage_arena);
    }
    
  } else {
    
  }
  vpc_ = vpc;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateVpcRequest.vpc)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateVpcRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateVpcRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateVpcRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateVpcRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateVpcRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateVpcRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateVpcRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVpcRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVpcRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateVpcRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVpcRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVpcRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateVpcRequest.update_mask)
  return _msg;
}
inline void UpdateVpcRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateVpcRequest.update_mask)
}

// -------------------------------------------------------------------

// ListVpcsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListVpcsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListVpcsRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListVpcsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVpcsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListVpcsRequest.parent)
}
inline std::string* ListVpcsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListVpcsRequest.parent)
  return _s;
}
inline const std::string& ListVpcsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListVpcsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListVpcsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListVpcsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListVpcsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListVpcsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListVpcsRequest.parent)
}

// int32 page_size = 2;
inline void ListVpcsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListVpcsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListVpcsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListVpcsRequest.page_size)
  return _internal_page_size();
}
inline void ListVpcsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListVpcsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListVpcsRequest.page_size)
}

// string page_token = 3;
inline void ListVpcsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListVpcsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListVpcsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVpcsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListVpcsRequest.page_token)
}
inline std::string* ListVpcsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListVpcsRequest.page_token)
  return _s;
}
inline const std::string& ListVpcsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListVpcsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListVpcsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListVpcsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListVpcsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListVpcsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListVpcsRequest.page_token)
}

// -------------------------------------------------------------------

// ListVpcsResponse

// repeated .opi_api.network.cloud.v1alpha1.Vpc vpc = 1;
inline int ListVpcsResponse::_internal_vpc_size() const {
  return vpc_.size();
}
inline int ListVpcsResponse::vpc_size() const {
  return _internal_vpc_size();
}
inline ::opi_api::network::cloud::v1alpha1::Vpc* ListVpcsResponse::mutable_vpc(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListVpcsResponse.vpc)
  return vpc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Vpc >*
ListVpcsResponse::mutable_vpc() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListVpcsResponse.vpc)
  return &vpc_;
}
inline const ::opi_api::network::cloud::v1alpha1::Vpc& ListVpcsResponse::_internal_vpc(int index) const {
  return vpc_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::Vpc& ListVpcsResponse::vpc(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListVpcsResponse.vpc)
  return _internal_vpc(index);
}
inline ::opi_api::network::cloud::v1alpha1::Vpc* ListVpcsResponse::_internal_add_vpc() {
  return vpc_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::Vpc* ListVpcsResponse::add_vpc() {
  ::opi_api::network::cloud::v1alpha1::Vpc* _add = _internal_add_vpc();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListVpcsResponse.vpc)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::Vpc >&
ListVpcsResponse::vpc() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListVpcsResponse.vpc)
  return vpc_;
}

// string next_page_token = 2;
inline void ListVpcsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListVpcsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListVpcsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVpcsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListVpcsResponse.next_page_token)
}
inline std::string* ListVpcsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListVpcsResponse.next_page_token)
  return _s;
}
inline const std::string& ListVpcsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListVpcsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListVpcsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListVpcsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListVpcsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListVpcsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListVpcsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetVpcRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetVpcRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetVpcRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetVpcRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVpcRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetVpcRequest.id)
}
inline std::string* GetVpcRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetVpcRequest.id)
  return _s;
}
inline const std::string& GetVpcRequest::_internal_id() const {
  return id_.Get();
}
inline void GetVpcRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetVpcRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetVpcRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetVpcRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetVpcRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetVpcRequest.id)
}

// -------------------------------------------------------------------

// CreateVPCPeerRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateVPCPeerRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateVPCPeerRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateVPCPeerRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.parent)
}
inline std::string* CreateVPCPeerRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.parent)
  return _s;
}
inline const std::string& CreateVPCPeerRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateVPCPeerRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateVPCPeerRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateVPCPeerRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateVPCPeerRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.VPCPeer vpcpeer = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateVPCPeerRequest::_internal_has_vpcpeer() const {
  return this != internal_default_instance() && vpcpeer_ != nullptr;
}
inline bool CreateVPCPeerRequest::has_vpcpeer() const {
  return _internal_has_vpcpeer();
}
inline const ::opi_api::network::cloud::v1alpha1::VPCPeer& CreateVPCPeerRequest::_internal_vpcpeer() const {
  const ::opi_api::network::cloud::v1alpha1::VPCPeer* p = vpcpeer_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::VPCPeer&>(
      ::opi_api::network::cloud::v1alpha1::_VPCPeer_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::VPCPeer& CreateVPCPeerRequest::vpcpeer() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.vpcpeer)
  return _internal_vpcpeer();
}
inline void CreateVPCPeerRequest::unsafe_arena_set_allocated_vpcpeer(
    ::opi_api::network::cloud::v1alpha1::VPCPeer* vpcpeer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpcpeer_);
  }
  vpcpeer_ = vpcpeer;
  if (vpcpeer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.vpcpeer)
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeer* CreateVPCPeerRequest::release_vpcpeer() {
  
  ::opi_api::network::cloud::v1alpha1::VPCPeer* temp = vpcpeer_;
  vpcpeer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeer* CreateVPCPeerRequest::unsafe_arena_release_vpcpeer() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.vpcpeer)
  
  ::opi_api::network::cloud::v1alpha1::VPCPeer* temp = vpcpeer_;
  vpcpeer_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeer* CreateVPCPeerRequest::_internal_mutable_vpcpeer() {
  
  if (vpcpeer_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::VPCPeer>(GetArenaForAllocation());
    vpcpeer_ = p;
  }
  return vpcpeer_;
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeer* CreateVPCPeerRequest::mutable_vpcpeer() {
  ::opi_api::network::cloud::v1alpha1::VPCPeer* _msg = _internal_mutable_vpcpeer();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.vpcpeer)
  return _msg;
}
inline void CreateVPCPeerRequest::set_allocated_vpcpeer(::opi_api::network::cloud::v1alpha1::VPCPeer* vpcpeer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpcpeer_);
  }
  if (vpcpeer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpcpeer));
    if (message_arena != submessage_arena) {
      vpcpeer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpcpeer, submessage_arena);
    }
    
  } else {
    
  }
  vpcpeer_ = vpcpeer;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.vpcpeer)
}

// string vpcpeer_id = 3;
inline void CreateVPCPeerRequest::clear_vpcpeer_id() {
  vpcpeer_id_.ClearToEmpty();
}
inline const std::string& CreateVPCPeerRequest::vpcpeer_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.vpcpeer_id)
  return _internal_vpcpeer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateVPCPeerRequest::set_vpcpeer_id(ArgT0&& arg0, ArgT... args) {
 
 vpcpeer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.vpcpeer_id)
}
inline std::string* CreateVPCPeerRequest::mutable_vpcpeer_id() {
  std::string* _s = _internal_mutable_vpcpeer_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.vpcpeer_id)
  return _s;
}
inline const std::string& CreateVPCPeerRequest::_internal_vpcpeer_id() const {
  return vpcpeer_id_.Get();
}
inline void CreateVPCPeerRequest::_internal_set_vpcpeer_id(const std::string& value) {
  
  vpcpeer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateVPCPeerRequest::_internal_mutable_vpcpeer_id() {
  
  return vpcpeer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateVPCPeerRequest::release_vpcpeer_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.vpcpeer_id)
  return vpcpeer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateVPCPeerRequest::set_allocated_vpcpeer_id(std::string* vpcpeer_id) {
  if (vpcpeer_id != nullptr) {
    
  } else {
    
  }
  vpcpeer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vpcpeer_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vpcpeer_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vpcpeer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateVPCPeerRequest.vpcpeer_id)
}

// -------------------------------------------------------------------

// DeleteVPCPeerRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteVPCPeerRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteVPCPeerRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteVPCPeerRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteVPCPeerRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteVPCPeerRequest.id)
}
inline std::string* DeleteVPCPeerRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteVPCPeerRequest.id)
  return _s;
}
inline const std::string& DeleteVPCPeerRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteVPCPeerRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteVPCPeerRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteVPCPeerRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteVPCPeerRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteVPCPeerRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteVPCPeerRequest.id)
}

// -------------------------------------------------------------------

// UpdateVPCPeerRequest

// .opi_api.network.cloud.v1alpha1.VPCPeer vpcpeer = 1;
inline bool UpdateVPCPeerRequest::_internal_has_vpcpeer() const {
  return this != internal_default_instance() && vpcpeer_ != nullptr;
}
inline bool UpdateVPCPeerRequest::has_vpcpeer() const {
  return _internal_has_vpcpeer();
}
inline const ::opi_api::network::cloud::v1alpha1::VPCPeer& UpdateVPCPeerRequest::_internal_vpcpeer() const {
  const ::opi_api::network::cloud::v1alpha1::VPCPeer* p = vpcpeer_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::VPCPeer&>(
      ::opi_api::network::cloud::v1alpha1::_VPCPeer_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::VPCPeer& UpdateVPCPeerRequest::vpcpeer() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest.vpcpeer)
  return _internal_vpcpeer();
}
inline void UpdateVPCPeerRequest::unsafe_arena_set_allocated_vpcpeer(
    ::opi_api::network::cloud::v1alpha1::VPCPeer* vpcpeer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpcpeer_);
  }
  vpcpeer_ = vpcpeer;
  if (vpcpeer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest.vpcpeer)
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeer* UpdateVPCPeerRequest::release_vpcpeer() {
  
  ::opi_api::network::cloud::v1alpha1::VPCPeer* temp = vpcpeer_;
  vpcpeer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeer* UpdateVPCPeerRequest::unsafe_arena_release_vpcpeer() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest.vpcpeer)
  
  ::opi_api::network::cloud::v1alpha1::VPCPeer* temp = vpcpeer_;
  vpcpeer_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeer* UpdateVPCPeerRequest::_internal_mutable_vpcpeer() {
  
  if (vpcpeer_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::VPCPeer>(GetArenaForAllocation());
    vpcpeer_ = p;
  }
  return vpcpeer_;
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeer* UpdateVPCPeerRequest::mutable_vpcpeer() {
  ::opi_api::network::cloud::v1alpha1::VPCPeer* _msg = _internal_mutable_vpcpeer();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest.vpcpeer)
  return _msg;
}
inline void UpdateVPCPeerRequest::set_allocated_vpcpeer(::opi_api::network::cloud::v1alpha1::VPCPeer* vpcpeer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpcpeer_);
  }
  if (vpcpeer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpcpeer));
    if (message_arena != submessage_arena) {
      vpcpeer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpcpeer, submessage_arena);
    }
    
  } else {
    
  }
  vpcpeer_ = vpcpeer;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest.vpcpeer)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateVPCPeerRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateVPCPeerRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateVPCPeerRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateVPCPeerRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateVPCPeerRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVPCPeerRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVPCPeerRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVPCPeerRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateVPCPeerRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest.update_mask)
  return _msg;
}
inline void UpdateVPCPeerRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateVPCPeerRequest.update_mask)
}

// -------------------------------------------------------------------

// ListVPCPeersRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListVPCPeersRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListVPCPeersRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListVPCPeersRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVPCPeersRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListVPCPeersRequest.parent)
}
inline std::string* ListVPCPeersRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListVPCPeersRequest.parent)
  return _s;
}
inline const std::string& ListVPCPeersRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListVPCPeersRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListVPCPeersRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListVPCPeersRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListVPCPeersRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListVPCPeersRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListVPCPeersRequest.parent)
}

// int32 page_size = 2;
inline void ListVPCPeersRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListVPCPeersRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListVPCPeersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListVPCPeersRequest.page_size)
  return _internal_page_size();
}
inline void ListVPCPeersRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListVPCPeersRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListVPCPeersRequest.page_size)
}

// string page_token = 3;
inline void ListVPCPeersRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListVPCPeersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListVPCPeersRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVPCPeersRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListVPCPeersRequest.page_token)
}
inline std::string* ListVPCPeersRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListVPCPeersRequest.page_token)
  return _s;
}
inline const std::string& ListVPCPeersRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListVPCPeersRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListVPCPeersRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListVPCPeersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListVPCPeersRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListVPCPeersRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListVPCPeersRequest.page_token)
}

// -------------------------------------------------------------------

// ListVPCPeersResponse

// repeated .opi_api.network.cloud.v1alpha1.VPCPeer vpcpeer = 1;
inline int ListVPCPeersResponse::_internal_vpcpeer_size() const {
  return vpcpeer_.size();
}
inline int ListVPCPeersResponse::vpcpeer_size() const {
  return _internal_vpcpeer_size();
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeer* ListVPCPeersResponse::mutable_vpcpeer(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListVPCPeersResponse.vpcpeer)
  return vpcpeer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::VPCPeer >*
ListVPCPeersResponse::mutable_vpcpeer() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListVPCPeersResponse.vpcpeer)
  return &vpcpeer_;
}
inline const ::opi_api::network::cloud::v1alpha1::VPCPeer& ListVPCPeersResponse::_internal_vpcpeer(int index) const {
  return vpcpeer_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::VPCPeer& ListVPCPeersResponse::vpcpeer(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListVPCPeersResponse.vpcpeer)
  return _internal_vpcpeer(index);
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeer* ListVPCPeersResponse::_internal_add_vpcpeer() {
  return vpcpeer_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeer* ListVPCPeersResponse::add_vpcpeer() {
  ::opi_api::network::cloud::v1alpha1::VPCPeer* _add = _internal_add_vpcpeer();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListVPCPeersResponse.vpcpeer)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::VPCPeer >&
ListVPCPeersResponse::vpcpeer() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListVPCPeersResponse.vpcpeer)
  return vpcpeer_;
}

// string next_page_token = 2;
inline void ListVPCPeersResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListVPCPeersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListVPCPeersResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVPCPeersResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListVPCPeersResponse.next_page_token)
}
inline std::string* ListVPCPeersResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListVPCPeersResponse.next_page_token)
  return _s;
}
inline const std::string& ListVPCPeersResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListVPCPeersResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListVPCPeersResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListVPCPeersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListVPCPeersResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListVPCPeersResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListVPCPeersResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetVPCPeerRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetVPCPeerRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetVPCPeerRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetVPCPeerRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVPCPeerRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetVPCPeerRequest.id)
}
inline std::string* GetVPCPeerRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetVPCPeerRequest.id)
  return _s;
}
inline const std::string& GetVPCPeerRequest::_internal_id() const {
  return id_.Get();
}
inline void GetVPCPeerRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetVPCPeerRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetVPCPeerRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetVPCPeerRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetVPCPeerRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetVPCPeerRequest.id)
}

// -------------------------------------------------------------------

// CreateSecurityPolicyRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateSecurityPolicyRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateSecurityPolicyRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSecurityPolicyRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.parent)
}
inline std::string* CreateSecurityPolicyRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.parent)
  return _s;
}
inline const std::string& CreateSecurityPolicyRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateSecurityPolicyRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateSecurityPolicyRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateSecurityPolicyRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateSecurityPolicyRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.SecurityPolicy securitypolicy = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateSecurityPolicyRequest::_internal_has_securitypolicy() const {
  return this != internal_default_instance() && securitypolicy_ != nullptr;
}
inline bool CreateSecurityPolicyRequest::has_securitypolicy() const {
  return _internal_has_securitypolicy();
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityPolicy& CreateSecurityPolicyRequest::_internal_securitypolicy() const {
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicy* p = securitypolicy_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SecurityPolicy&>(
      ::opi_api::network::cloud::v1alpha1::_SecurityPolicy_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityPolicy& CreateSecurityPolicyRequest::securitypolicy() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.securitypolicy)
  return _internal_securitypolicy();
}
inline void CreateSecurityPolicyRequest::unsafe_arena_set_allocated_securitypolicy(
    ::opi_api::network::cloud::v1alpha1::SecurityPolicy* securitypolicy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securitypolicy_);
  }
  securitypolicy_ = securitypolicy;
  if (securitypolicy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.securitypolicy)
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicy* CreateSecurityPolicyRequest::release_securitypolicy() {
  
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* temp = securitypolicy_;
  securitypolicy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicy* CreateSecurityPolicyRequest::unsafe_arena_release_securitypolicy() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.securitypolicy)
  
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* temp = securitypolicy_;
  securitypolicy_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicy* CreateSecurityPolicyRequest::_internal_mutable_securitypolicy() {
  
  if (securitypolicy_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityPolicy>(GetArenaForAllocation());
    securitypolicy_ = p;
  }
  return securitypolicy_;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicy* CreateSecurityPolicyRequest::mutable_securitypolicy() {
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* _msg = _internal_mutable_securitypolicy();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.securitypolicy)
  return _msg;
}
inline void CreateSecurityPolicyRequest::set_allocated_securitypolicy(::opi_api::network::cloud::v1alpha1::SecurityPolicy* securitypolicy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(securitypolicy_);
  }
  if (securitypolicy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securitypolicy));
    if (message_arena != submessage_arena) {
      securitypolicy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, securitypolicy, submessage_arena);
    }
    
  } else {
    
  }
  securitypolicy_ = securitypolicy;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.securitypolicy)
}

// string securitypolicy_id = 3;
inline void CreateSecurityPolicyRequest::clear_securitypolicy_id() {
  securitypolicy_id_.ClearToEmpty();
}
inline const std::string& CreateSecurityPolicyRequest::securitypolicy_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.securitypolicy_id)
  return _internal_securitypolicy_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSecurityPolicyRequest::set_securitypolicy_id(ArgT0&& arg0, ArgT... args) {
 
 securitypolicy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.securitypolicy_id)
}
inline std::string* CreateSecurityPolicyRequest::mutable_securitypolicy_id() {
  std::string* _s = _internal_mutable_securitypolicy_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.securitypolicy_id)
  return _s;
}
inline const std::string& CreateSecurityPolicyRequest::_internal_securitypolicy_id() const {
  return securitypolicy_id_.Get();
}
inline void CreateSecurityPolicyRequest::_internal_set_securitypolicy_id(const std::string& value) {
  
  securitypolicy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateSecurityPolicyRequest::_internal_mutable_securitypolicy_id() {
  
  return securitypolicy_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateSecurityPolicyRequest::release_securitypolicy_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.securitypolicy_id)
  return securitypolicy_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateSecurityPolicyRequest::set_allocated_securitypolicy_id(std::string* securitypolicy_id) {
  if (securitypolicy_id != nullptr) {
    
  } else {
    
  }
  securitypolicy_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securitypolicy_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (securitypolicy_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    securitypolicy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateSecurityPolicyRequest.securitypolicy_id)
}

// -------------------------------------------------------------------

// DeleteSecurityPolicyRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteSecurityPolicyRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteSecurityPolicyRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteSecurityPolicyRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSecurityPolicyRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteSecurityPolicyRequest.id)
}
inline std::string* DeleteSecurityPolicyRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteSecurityPolicyRequest.id)
  return _s;
}
inline const std::string& DeleteSecurityPolicyRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteSecurityPolicyRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteSecurityPolicyRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteSecurityPolicyRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteSecurityPolicyRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteSecurityPolicyRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteSecurityPolicyRequest.id)
}

// -------------------------------------------------------------------

// UpdateSecurityPolicyRequest

// .opi_api.network.cloud.v1alpha1.SecurityPolicy securitypolicy = 1;
inline bool UpdateSecurityPolicyRequest::_internal_has_securitypolicy() const {
  return this != internal_default_instance() && securitypolicy_ != nullptr;
}
inline bool UpdateSecurityPolicyRequest::has_securitypolicy() const {
  return _internal_has_securitypolicy();
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityPolicy& UpdateSecurityPolicyRequest::_internal_securitypolicy() const {
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicy* p = securitypolicy_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SecurityPolicy&>(
      ::opi_api::network::cloud::v1alpha1::_SecurityPolicy_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityPolicy& UpdateSecurityPolicyRequest::securitypolicy() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest.securitypolicy)
  return _internal_securitypolicy();
}
inline void UpdateSecurityPolicyRequest::unsafe_arena_set_allocated_securitypolicy(
    ::opi_api::network::cloud::v1alpha1::SecurityPolicy* securitypolicy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securitypolicy_);
  }
  securitypolicy_ = securitypolicy;
  if (securitypolicy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest.securitypolicy)
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicy* UpdateSecurityPolicyRequest::release_securitypolicy() {
  
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* temp = securitypolicy_;
  securitypolicy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicy* UpdateSecurityPolicyRequest::unsafe_arena_release_securitypolicy() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest.securitypolicy)
  
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* temp = securitypolicy_;
  securitypolicy_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicy* UpdateSecurityPolicyRequest::_internal_mutable_securitypolicy() {
  
  if (securitypolicy_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityPolicy>(GetArenaForAllocation());
    securitypolicy_ = p;
  }
  return securitypolicy_;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicy* UpdateSecurityPolicyRequest::mutable_securitypolicy() {
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* _msg = _internal_mutable_securitypolicy();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest.securitypolicy)
  return _msg;
}
inline void UpdateSecurityPolicyRequest::set_allocated_securitypolicy(::opi_api::network::cloud::v1alpha1::SecurityPolicy* securitypolicy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(securitypolicy_);
  }
  if (securitypolicy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securitypolicy));
    if (message_arena != submessage_arena) {
      securitypolicy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, securitypolicy, submessage_arena);
    }
    
  } else {
    
  }
  securitypolicy_ = securitypolicy;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest.securitypolicy)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateSecurityPolicyRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateSecurityPolicyRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSecurityPolicyRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSecurityPolicyRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateSecurityPolicyRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSecurityPolicyRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSecurityPolicyRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSecurityPolicyRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSecurityPolicyRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest.update_mask)
  return _msg;
}
inline void UpdateSecurityPolicyRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSecurityPolicyRequest.update_mask)
}

// -------------------------------------------------------------------

// ListSecurityPolicysRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListSecurityPolicysRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListSecurityPolicysRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSecurityPolicysRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest.parent)
}
inline std::string* ListSecurityPolicysRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest.parent)
  return _s;
}
inline const std::string& ListSecurityPolicysRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListSecurityPolicysRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSecurityPolicysRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSecurityPolicysRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSecurityPolicysRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest.parent)
}

// int32 page_size = 2;
inline void ListSecurityPolicysRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListSecurityPolicysRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListSecurityPolicysRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest.page_size)
  return _internal_page_size();
}
inline void ListSecurityPolicysRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListSecurityPolicysRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest.page_size)
}

// string page_token = 3;
inline void ListSecurityPolicysRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListSecurityPolicysRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSecurityPolicysRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest.page_token)
}
inline std::string* ListSecurityPolicysRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest.page_token)
  return _s;
}
inline const std::string& ListSecurityPolicysRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListSecurityPolicysRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSecurityPolicysRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSecurityPolicysRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSecurityPolicysRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListSecurityPolicysRequest.page_token)
}

// -------------------------------------------------------------------

// ListSecurityPolicysResponse

// repeated .opi_api.network.cloud.v1alpha1.SecurityPolicy securitypolicy = 1;
inline int ListSecurityPolicysResponse::_internal_securitypolicy_size() const {
  return securitypolicy_.size();
}
inline int ListSecurityPolicysResponse::securitypolicy_size() const {
  return _internal_securitypolicy_size();
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicy* ListSecurityPolicysResponse::mutable_securitypolicy(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse.securitypolicy)
  return securitypolicy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityPolicy >*
ListSecurityPolicysResponse::mutable_securitypolicy() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse.securitypolicy)
  return &securitypolicy_;
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityPolicy& ListSecurityPolicysResponse::_internal_securitypolicy(int index) const {
  return securitypolicy_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityPolicy& ListSecurityPolicysResponse::securitypolicy(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse.securitypolicy)
  return _internal_securitypolicy(index);
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicy* ListSecurityPolicysResponse::_internal_add_securitypolicy() {
  return securitypolicy_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicy* ListSecurityPolicysResponse::add_securitypolicy() {
  ::opi_api::network::cloud::v1alpha1::SecurityPolicy* _add = _internal_add_securitypolicy();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse.securitypolicy)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityPolicy >&
ListSecurityPolicysResponse::securitypolicy() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse.securitypolicy)
  return securitypolicy_;
}

// string next_page_token = 2;
inline void ListSecurityPolicysResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListSecurityPolicysResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSecurityPolicysResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse.next_page_token)
}
inline std::string* ListSecurityPolicysResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse.next_page_token)
  return _s;
}
inline const std::string& ListSecurityPolicysResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListSecurityPolicysResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSecurityPolicysResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSecurityPolicysResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSecurityPolicysResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListSecurityPolicysResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetSecurityPolicyRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetSecurityPolicyRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetSecurityPolicyRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetSecurityPolicyRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSecurityPolicyRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetSecurityPolicyRequest.id)
}
inline std::string* GetSecurityPolicyRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetSecurityPolicyRequest.id)
  return _s;
}
inline const std::string& GetSecurityPolicyRequest::_internal_id() const {
  return id_.Get();
}
inline void GetSecurityPolicyRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetSecurityPolicyRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetSecurityPolicyRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetSecurityPolicyRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetSecurityPolicyRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetSecurityPolicyRequest.id)
}

// -------------------------------------------------------------------

// CreateSecurityRuleRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateSecurityRuleRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateSecurityRuleRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSecurityRuleRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.parent)
}
inline std::string* CreateSecurityRuleRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.parent)
  return _s;
}
inline const std::string& CreateSecurityRuleRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateSecurityRuleRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateSecurityRuleRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateSecurityRuleRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateSecurityRuleRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.SecurityRule securityrule = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateSecurityRuleRequest::_internal_has_securityrule() const {
  return this != internal_default_instance() && securityrule_ != nullptr;
}
inline bool CreateSecurityRuleRequest::has_securityrule() const {
  return _internal_has_securityrule();
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRule& CreateSecurityRuleRequest::_internal_securityrule() const {
  const ::opi_api::network::cloud::v1alpha1::SecurityRule* p = securityrule_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SecurityRule&>(
      ::opi_api::network::cloud::v1alpha1::_SecurityRule_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRule& CreateSecurityRuleRequest::securityrule() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.securityrule)
  return _internal_securityrule();
}
inline void CreateSecurityRuleRequest::unsafe_arena_set_allocated_securityrule(
    ::opi_api::network::cloud::v1alpha1::SecurityRule* securityrule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securityrule_);
  }
  securityrule_ = securityrule;
  if (securityrule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.securityrule)
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRule* CreateSecurityRuleRequest::release_securityrule() {
  
  ::opi_api::network::cloud::v1alpha1::SecurityRule* temp = securityrule_;
  securityrule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRule* CreateSecurityRuleRequest::unsafe_arena_release_securityrule() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.securityrule)
  
  ::opi_api::network::cloud::v1alpha1::SecurityRule* temp = securityrule_;
  securityrule_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRule* CreateSecurityRuleRequest::_internal_mutable_securityrule() {
  
  if (securityrule_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityRule>(GetArenaForAllocation());
    securityrule_ = p;
  }
  return securityrule_;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRule* CreateSecurityRuleRequest::mutable_securityrule() {
  ::opi_api::network::cloud::v1alpha1::SecurityRule* _msg = _internal_mutable_securityrule();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.securityrule)
  return _msg;
}
inline void CreateSecurityRuleRequest::set_allocated_securityrule(::opi_api::network::cloud::v1alpha1::SecurityRule* securityrule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(securityrule_);
  }
  if (securityrule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securityrule));
    if (message_arena != submessage_arena) {
      securityrule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, securityrule, submessage_arena);
    }
    
  } else {
    
  }
  securityrule_ = securityrule;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.securityrule)
}

// string securityrule_id = 3;
inline void CreateSecurityRuleRequest::clear_securityrule_id() {
  securityrule_id_.ClearToEmpty();
}
inline const std::string& CreateSecurityRuleRequest::securityrule_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.securityrule_id)
  return _internal_securityrule_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSecurityRuleRequest::set_securityrule_id(ArgT0&& arg0, ArgT... args) {
 
 securityrule_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.securityrule_id)
}
inline std::string* CreateSecurityRuleRequest::mutable_securityrule_id() {
  std::string* _s = _internal_mutable_securityrule_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.securityrule_id)
  return _s;
}
inline const std::string& CreateSecurityRuleRequest::_internal_securityrule_id() const {
  return securityrule_id_.Get();
}
inline void CreateSecurityRuleRequest::_internal_set_securityrule_id(const std::string& value) {
  
  securityrule_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateSecurityRuleRequest::_internal_mutable_securityrule_id() {
  
  return securityrule_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateSecurityRuleRequest::release_securityrule_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.securityrule_id)
  return securityrule_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateSecurityRuleRequest::set_allocated_securityrule_id(std::string* securityrule_id) {
  if (securityrule_id != nullptr) {
    
  } else {
    
  }
  securityrule_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securityrule_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (securityrule_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    securityrule_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateSecurityRuleRequest.securityrule_id)
}

// -------------------------------------------------------------------

// DeleteSecurityRuleRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteSecurityRuleRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteSecurityRuleRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteSecurityRuleRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSecurityRuleRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteSecurityRuleRequest.id)
}
inline std::string* DeleteSecurityRuleRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteSecurityRuleRequest.id)
  return _s;
}
inline const std::string& DeleteSecurityRuleRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteSecurityRuleRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteSecurityRuleRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteSecurityRuleRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteSecurityRuleRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteSecurityRuleRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteSecurityRuleRequest.id)
}

// -------------------------------------------------------------------

// UpdateSecurityRuleRequest

// .opi_api.network.cloud.v1alpha1.SecurityRule securityrule = 1;
inline bool UpdateSecurityRuleRequest::_internal_has_securityrule() const {
  return this != internal_default_instance() && securityrule_ != nullptr;
}
inline bool UpdateSecurityRuleRequest::has_securityrule() const {
  return _internal_has_securityrule();
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRule& UpdateSecurityRuleRequest::_internal_securityrule() const {
  const ::opi_api::network::cloud::v1alpha1::SecurityRule* p = securityrule_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SecurityRule&>(
      ::opi_api::network::cloud::v1alpha1::_SecurityRule_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRule& UpdateSecurityRuleRequest::securityrule() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest.securityrule)
  return _internal_securityrule();
}
inline void UpdateSecurityRuleRequest::unsafe_arena_set_allocated_securityrule(
    ::opi_api::network::cloud::v1alpha1::SecurityRule* securityrule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securityrule_);
  }
  securityrule_ = securityrule;
  if (securityrule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest.securityrule)
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRule* UpdateSecurityRuleRequest::release_securityrule() {
  
  ::opi_api::network::cloud::v1alpha1::SecurityRule* temp = securityrule_;
  securityrule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRule* UpdateSecurityRuleRequest::unsafe_arena_release_securityrule() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest.securityrule)
  
  ::opi_api::network::cloud::v1alpha1::SecurityRule* temp = securityrule_;
  securityrule_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRule* UpdateSecurityRuleRequest::_internal_mutable_securityrule() {
  
  if (securityrule_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityRule>(GetArenaForAllocation());
    securityrule_ = p;
  }
  return securityrule_;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRule* UpdateSecurityRuleRequest::mutable_securityrule() {
  ::opi_api::network::cloud::v1alpha1::SecurityRule* _msg = _internal_mutable_securityrule();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest.securityrule)
  return _msg;
}
inline void UpdateSecurityRuleRequest::set_allocated_securityrule(::opi_api::network::cloud::v1alpha1::SecurityRule* securityrule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(securityrule_);
  }
  if (securityrule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securityrule));
    if (message_arena != submessage_arena) {
      securityrule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, securityrule, submessage_arena);
    }
    
  } else {
    
  }
  securityrule_ = securityrule;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest.securityrule)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateSecurityRuleRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateSecurityRuleRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSecurityRuleRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSecurityRuleRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateSecurityRuleRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSecurityRuleRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSecurityRuleRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSecurityRuleRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSecurityRuleRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest.update_mask)
  return _msg;
}
inline void UpdateSecurityRuleRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSecurityRuleRequest.update_mask)
}

// -------------------------------------------------------------------

// ListSecurityRulesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListSecurityRulesRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListSecurityRulesRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSecurityRulesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest.parent)
}
inline std::string* ListSecurityRulesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest.parent)
  return _s;
}
inline const std::string& ListSecurityRulesRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListSecurityRulesRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSecurityRulesRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSecurityRulesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSecurityRulesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest.parent)
}

// int32 page_size = 2;
inline void ListSecurityRulesRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListSecurityRulesRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListSecurityRulesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest.page_size)
  return _internal_page_size();
}
inline void ListSecurityRulesRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListSecurityRulesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest.page_size)
}

// string page_token = 3;
inline void ListSecurityRulesRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListSecurityRulesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSecurityRulesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest.page_token)
}
inline std::string* ListSecurityRulesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest.page_token)
  return _s;
}
inline const std::string& ListSecurityRulesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListSecurityRulesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSecurityRulesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSecurityRulesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSecurityRulesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListSecurityRulesRequest.page_token)
}

// -------------------------------------------------------------------

// ListSecurityRulesResponse

// repeated .opi_api.network.cloud.v1alpha1.SecurityRule securityrule = 1;
inline int ListSecurityRulesResponse::_internal_securityrule_size() const {
  return securityrule_.size();
}
inline int ListSecurityRulesResponse::securityrule_size() const {
  return _internal_securityrule_size();
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRule* ListSecurityRulesResponse::mutable_securityrule(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse.securityrule)
  return securityrule_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityRule >*
ListSecurityRulesResponse::mutable_securityrule() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse.securityrule)
  return &securityrule_;
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRule& ListSecurityRulesResponse::_internal_securityrule(int index) const {
  return securityrule_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRule& ListSecurityRulesResponse::securityrule(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse.securityrule)
  return _internal_securityrule(index);
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRule* ListSecurityRulesResponse::_internal_add_securityrule() {
  return securityrule_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRule* ListSecurityRulesResponse::add_securityrule() {
  ::opi_api::network::cloud::v1alpha1::SecurityRule* _add = _internal_add_securityrule();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse.securityrule)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityRule >&
ListSecurityRulesResponse::securityrule() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse.securityrule)
  return securityrule_;
}

// string next_page_token = 2;
inline void ListSecurityRulesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListSecurityRulesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSecurityRulesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse.next_page_token)
}
inline std::string* ListSecurityRulesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse.next_page_token)
  return _s;
}
inline const std::string& ListSecurityRulesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListSecurityRulesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSecurityRulesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSecurityRulesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSecurityRulesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListSecurityRulesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetSecurityRuleRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetSecurityRuleRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetSecurityRuleRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetSecurityRuleRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSecurityRuleRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetSecurityRuleRequest.id)
}
inline std::string* GetSecurityRuleRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetSecurityRuleRequest.id)
  return _s;
}
inline const std::string& GetSecurityRuleRequest::_internal_id() const {
  return id_.Get();
}
inline void GetSecurityRuleRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetSecurityRuleRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetSecurityRuleRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetSecurityRuleRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetSecurityRuleRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetSecurityRuleRequest.id)
}

// -------------------------------------------------------------------

// CreateSecurityProfileRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateSecurityProfileRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateSecurityProfileRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSecurityProfileRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.parent)
}
inline std::string* CreateSecurityProfileRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.parent)
  return _s;
}
inline const std::string& CreateSecurityProfileRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateSecurityProfileRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateSecurityProfileRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateSecurityProfileRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateSecurityProfileRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.parent)
}

// .opi_api.network.cloud.v1alpha1.SecurityProfile securityprofile = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateSecurityProfileRequest::_internal_has_securityprofile() const {
  return this != internal_default_instance() && securityprofile_ != nullptr;
}
inline bool CreateSecurityProfileRequest::has_securityprofile() const {
  return _internal_has_securityprofile();
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityProfile& CreateSecurityProfileRequest::_internal_securityprofile() const {
  const ::opi_api::network::cloud::v1alpha1::SecurityProfile* p = securityprofile_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SecurityProfile&>(
      ::opi_api::network::cloud::v1alpha1::_SecurityProfile_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityProfile& CreateSecurityProfileRequest::securityprofile() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.securityprofile)
  return _internal_securityprofile();
}
inline void CreateSecurityProfileRequest::unsafe_arena_set_allocated_securityprofile(
    ::opi_api::network::cloud::v1alpha1::SecurityProfile* securityprofile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securityprofile_);
  }
  securityprofile_ = securityprofile;
  if (securityprofile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.securityprofile)
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfile* CreateSecurityProfileRequest::release_securityprofile() {
  
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* temp = securityprofile_;
  securityprofile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfile* CreateSecurityProfileRequest::unsafe_arena_release_securityprofile() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.securityprofile)
  
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* temp = securityprofile_;
  securityprofile_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfile* CreateSecurityProfileRequest::_internal_mutable_securityprofile() {
  
  if (securityprofile_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityProfile>(GetArenaForAllocation());
    securityprofile_ = p;
  }
  return securityprofile_;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfile* CreateSecurityProfileRequest::mutable_securityprofile() {
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* _msg = _internal_mutable_securityprofile();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.securityprofile)
  return _msg;
}
inline void CreateSecurityProfileRequest::set_allocated_securityprofile(::opi_api::network::cloud::v1alpha1::SecurityProfile* securityprofile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(securityprofile_);
  }
  if (securityprofile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securityprofile));
    if (message_arena != submessage_arena) {
      securityprofile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, securityprofile, submessage_arena);
    }
    
  } else {
    
  }
  securityprofile_ = securityprofile;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.securityprofile)
}

// string securityprofile_id = 3;
inline void CreateSecurityProfileRequest::clear_securityprofile_id() {
  securityprofile_id_.ClearToEmpty();
}
inline const std::string& CreateSecurityProfileRequest::securityprofile_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.securityprofile_id)
  return _internal_securityprofile_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSecurityProfileRequest::set_securityprofile_id(ArgT0&& arg0, ArgT... args) {
 
 securityprofile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.securityprofile_id)
}
inline std::string* CreateSecurityProfileRequest::mutable_securityprofile_id() {
  std::string* _s = _internal_mutable_securityprofile_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.securityprofile_id)
  return _s;
}
inline const std::string& CreateSecurityProfileRequest::_internal_securityprofile_id() const {
  return securityprofile_id_.Get();
}
inline void CreateSecurityProfileRequest::_internal_set_securityprofile_id(const std::string& value) {
  
  securityprofile_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateSecurityProfileRequest::_internal_mutable_securityprofile_id() {
  
  return securityprofile_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateSecurityProfileRequest::release_securityprofile_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.securityprofile_id)
  return securityprofile_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateSecurityProfileRequest::set_allocated_securityprofile_id(std::string* securityprofile_id) {
  if (securityprofile_id != nullptr) {
    
  } else {
    
  }
  securityprofile_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securityprofile_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (securityprofile_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    securityprofile_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.CreateSecurityProfileRequest.securityprofile_id)
}

// -------------------------------------------------------------------

// DeleteSecurityProfileRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteSecurityProfileRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteSecurityProfileRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeleteSecurityProfileRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSecurityProfileRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeleteSecurityProfileRequest.id)
}
inline std::string* DeleteSecurityProfileRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeleteSecurityProfileRequest.id)
  return _s;
}
inline const std::string& DeleteSecurityProfileRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteSecurityProfileRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteSecurityProfileRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteSecurityProfileRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeleteSecurityProfileRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteSecurityProfileRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeleteSecurityProfileRequest.id)
}

// -------------------------------------------------------------------

// UpdateSecurityProfileRequest

// .opi_api.network.cloud.v1alpha1.SecurityProfile securityprofile = 1;
inline bool UpdateSecurityProfileRequest::_internal_has_securityprofile() const {
  return this != internal_default_instance() && securityprofile_ != nullptr;
}
inline bool UpdateSecurityProfileRequest::has_securityprofile() const {
  return _internal_has_securityprofile();
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityProfile& UpdateSecurityProfileRequest::_internal_securityprofile() const {
  const ::opi_api::network::cloud::v1alpha1::SecurityProfile* p = securityprofile_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SecurityProfile&>(
      ::opi_api::network::cloud::v1alpha1::_SecurityProfile_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityProfile& UpdateSecurityProfileRequest::securityprofile() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest.securityprofile)
  return _internal_securityprofile();
}
inline void UpdateSecurityProfileRequest::unsafe_arena_set_allocated_securityprofile(
    ::opi_api::network::cloud::v1alpha1::SecurityProfile* securityprofile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securityprofile_);
  }
  securityprofile_ = securityprofile;
  if (securityprofile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest.securityprofile)
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfile* UpdateSecurityProfileRequest::release_securityprofile() {
  
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* temp = securityprofile_;
  securityprofile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfile* UpdateSecurityProfileRequest::unsafe_arena_release_securityprofile() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest.securityprofile)
  
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* temp = securityprofile_;
  securityprofile_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfile* UpdateSecurityProfileRequest::_internal_mutable_securityprofile() {
  
  if (securityprofile_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityProfile>(GetArenaForAllocation());
    securityprofile_ = p;
  }
  return securityprofile_;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfile* UpdateSecurityProfileRequest::mutable_securityprofile() {
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* _msg = _internal_mutable_securityprofile();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest.securityprofile)
  return _msg;
}
inline void UpdateSecurityProfileRequest::set_allocated_securityprofile(::opi_api::network::cloud::v1alpha1::SecurityProfile* securityprofile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(securityprofile_);
  }
  if (securityprofile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securityprofile));
    if (message_arena != submessage_arena) {
      securityprofile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, securityprofile, submessage_arena);
    }
    
  } else {
    
  }
  securityprofile_ = securityprofile;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest.securityprofile)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateSecurityProfileRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateSecurityProfileRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSecurityProfileRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSecurityProfileRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateSecurityProfileRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSecurityProfileRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSecurityProfileRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSecurityProfileRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSecurityProfileRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest.update_mask)
  return _msg;
}
inline void UpdateSecurityProfileRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UpdateSecurityProfileRequest.update_mask)
}

// -------------------------------------------------------------------

// ListSecurityProfilesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListSecurityProfilesRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListSecurityProfilesRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSecurityProfilesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest.parent)
}
inline std::string* ListSecurityProfilesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest.parent)
  return _s;
}
inline const std::string& ListSecurityProfilesRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListSecurityProfilesRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSecurityProfilesRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSecurityProfilesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSecurityProfilesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest.parent)
}

// int32 page_size = 2;
inline void ListSecurityProfilesRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListSecurityProfilesRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListSecurityProfilesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest.page_size)
  return _internal_page_size();
}
inline void ListSecurityProfilesRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListSecurityProfilesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest.page_size)
}

// string page_token = 3;
inline void ListSecurityProfilesRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListSecurityProfilesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSecurityProfilesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest.page_token)
}
inline std::string* ListSecurityProfilesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest.page_token)
  return _s;
}
inline const std::string& ListSecurityProfilesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListSecurityProfilesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSecurityProfilesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSecurityProfilesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSecurityProfilesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListSecurityProfilesRequest.page_token)
}

// -------------------------------------------------------------------

// ListSecurityProfilesResponse

// repeated .opi_api.network.cloud.v1alpha1.SecurityProfile securityprofile = 1;
inline int ListSecurityProfilesResponse::_internal_securityprofile_size() const {
  return securityprofile_.size();
}
inline int ListSecurityProfilesResponse::securityprofile_size() const {
  return _internal_securityprofile_size();
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfile* ListSecurityProfilesResponse::mutable_securityprofile(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse.securityprofile)
  return securityprofile_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityProfile >*
ListSecurityProfilesResponse::mutable_securityprofile() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse.securityprofile)
  return &securityprofile_;
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityProfile& ListSecurityProfilesResponse::_internal_securityprofile(int index) const {
  return securityprofile_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityProfile& ListSecurityProfilesResponse::securityprofile(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse.securityprofile)
  return _internal_securityprofile(index);
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfile* ListSecurityProfilesResponse::_internal_add_securityprofile() {
  return securityprofile_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfile* ListSecurityProfilesResponse::add_securityprofile() {
  ::opi_api::network::cloud::v1alpha1::SecurityProfile* _add = _internal_add_securityprofile();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse.securityprofile)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityProfile >&
ListSecurityProfilesResponse::securityprofile() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse.securityprofile)
  return securityprofile_;
}

// string next_page_token = 2;
inline void ListSecurityProfilesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListSecurityProfilesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSecurityProfilesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse.next_page_token)
}
inline std::string* ListSecurityProfilesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse.next_page_token)
  return _s;
}
inline const std::string& ListSecurityProfilesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListSecurityProfilesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSecurityProfilesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSecurityProfilesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSecurityProfilesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.ListSecurityProfilesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetSecurityProfileRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetSecurityProfileRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetSecurityProfileRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.GetSecurityProfileRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSecurityProfileRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.GetSecurityProfileRequest.id)
}
inline std::string* GetSecurityProfileRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.GetSecurityProfileRequest.id)
  return _s;
}
inline const std::string& GetSecurityProfileRequest::_internal_id() const {
  return id_.Get();
}
inline void GetSecurityProfileRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetSecurityProfileRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetSecurityProfileRequest::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.GetSecurityProfileRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetSecurityProfileRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.GetSecurityProfileRequest.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cloudrpc_2eproto
