// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: underlayroute.proto

#include "underlayroute.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
constexpr UnderlayRoute::UnderlayRoute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , status_(nullptr){}
struct UnderlayRouteDefaultTypeInternal {
  constexpr UnderlayRouteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnderlayRouteDefaultTypeInternal() {}
  union {
    UnderlayRoute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnderlayRouteDefaultTypeInternal _UnderlayRoute_default_instance_;
constexpr UnderlayRouteSpec::UnderlayRouteSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , route_table_id_(nullptr)
  , dest_prefix_(nullptr)
  , next_hop_address_(nullptr)
  , interface_id_(nullptr)
  , state_(0)

  , enable_admin_distance_(false)
  , admin_dist_(0){}
struct UnderlayRouteSpecDefaultTypeInternal {
  constexpr UnderlayRouteSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnderlayRouteSpecDefaultTypeInternal() {}
  union {
    UnderlayRouteSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnderlayRouteSpecDefaultTypeInternal _UnderlayRouteSpec_default_instance_;
constexpr UnderlayRouteStatus::UnderlayRouteStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dest_prefix_(nullptr)
  , next_hop_address_(nullptr)
  , route_table_id_(0)
  , if_index_(0)
  , type_(0)

  , proto_(0)

  , age_(0)
  , metric_(0)
  , fib_route_(false)
  , connected_(false)
  , admin_distance_(0){}
struct UnderlayRouteStatusDefaultTypeInternal {
  constexpr UnderlayRouteStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnderlayRouteStatusDefaultTypeInternal() {}
  union {
    UnderlayRouteStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnderlayRouteStatusDefaultTypeInternal _UnderlayRouteStatus_default_instance_;
constexpr UnderlayRouteLookupKey::UnderlayRouteLookupKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : route_table_id_(nullptr)
  , dest_prefix_(nullptr)
  , next_hop_address_(nullptr)
  , ifid_(0)
  , proto_(0)
{}
struct UnderlayRouteLookupKeyDefaultTypeInternal {
  constexpr UnderlayRouteLookupKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnderlayRouteLookupKeyDefaultTypeInternal() {}
  union {
    UnderlayRouteLookupKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnderlayRouteLookupKeyDefaultTypeInternal _UnderlayRouteLookupKey_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_underlayroute_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_underlayroute_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_underlayroute_2eproto = nullptr;

const uint32_t TableStruct_underlayroute_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRoute, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRoute, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, route_table_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, dest_prefix_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, next_hop_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, state_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, enable_admin_distance_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, admin_dist_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec, interface_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, route_table_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, dest_prefix_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, next_hop_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, if_index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, proto_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, age_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, metric_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, fib_route_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, connected_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus, admin_distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey, route_table_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey, dest_prefix_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey, next_hop_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey, ifid_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey, proto_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::UnderlayRoute)},
  { 8, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec)},
  { 22, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus)},
  { 39, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_UnderlayRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_UnderlayRouteSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_UnderlayRouteStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_UnderlayRouteLookupKey_default_instance_),
};

const char descriptor_table_protodef_underlayroute_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023underlayroute.proto\022\036opi_api.network.c"
  "loud.v1alpha1\032\020object_key.proto\032\022network"
  "types.proto\"\225\001\n\rUnderlayRoute\022\?\n\004spec\030\001 "
  "\001(\01321.opi_api.network.cloud.v1alpha1.Und"
  "erlayRouteSpec\022C\n\006status\030\002 \001(\01323.opi_api"
  ".network.cloud.v1alpha1.UnderlayRouteSta"
  "tus\"\256\003\n\021UnderlayRouteSpec\022(\n\002id\030\001 \001(\0132\034."
  "opi_api.common.v1.ObjectKey\0224\n\016route_tab"
  "le_id\030\002 \001(\0132\034.opi_api.common.v1.ObjectKe"
  "y\022D\n\013dest_prefix\030\003 \001(\0132/.opi_api.network"
  ".opinetcommon.v1alpha1.IPPrefix\022J\n\020next_"
  "hop_address\030\004 \001(\01320.opi_api.network.opin"
  "etcommon.v1alpha1.IPAddress\022@\n\005state\030\005 \001"
  "(\01621.opi_api.network.opinetcommon.v1alph"
  "a1.AdminState\022\035\n\025enable_admin_distance\030\006"
  " \001(\010\022\022\n\nadmin_dist\030\007 \001(\005\0222\n\014interface_id"
  "\030\010 \001(\0132\034.opi_api.common.v1.ObjectKey\"\261\003\n"
  "\023UnderlayRouteStatus\022\026\n\016route_table_id\030\001"
  " \001(\005\022D\n\013dest_prefix\030\002 \001(\0132/.opi_api.netw"
  "ork.opinetcommon.v1alpha1.IPPrefix\022J\n\020ne"
  "xt_hop_address\030\003 \001(\01320.opi_api.network.o"
  "pinetcommon.v1alpha1.IPAddress\022\020\n\010if_ind"
  "ex\030\005 \001(\005\022>\n\004type\030\006 \001(\01620.opi_api.network"
  ".opinetcommon.v1alpha1.RouteType\022C\n\005prot"
  "o\030\007 \001(\01624.opi_api.network.opinetcommon.v"
  "1alpha1.RouteProtocol\022\013\n\003age\030\010 \001(\005\022\016\n\006me"
  "tric\030\t \001(\005\022\021\n\tfib_route\030\n \001(\010\022\021\n\tconnect"
  "ed\030\013 \001(\010\022\026\n\016admin_distance\030\014 \001(\005\"\263\002\n\026Und"
  "erlayRouteLookupKey\0224\n\016route_table_id\030\001 "
  "\001(\0132\034.opi_api.common.v1.ObjectKey\022D\n\013des"
  "t_prefix\030\002 \001(\0132/.opi_api.network.opinetc"
  "ommon.v1alpha1.IPPrefix\022J\n\020next_hop_addr"
  "ess\030\003 \001(\01320.opi_api.network.opinetcommon"
  ".v1alpha1.IPAddress\022\014\n\004ifid\030\004 \001(\005\022C\n\005pro"
  "to\030\006 \001(\01624.opi_api.network.opinetcommon."
  "v1alpha1.RouteProtocolBs\n\036opi_api.networ"
  "k.cloud.v1alpha1B\022UnderlayRouteProtoP\001Z;"
  "github.com/opiproject/opi-api/network/cl"
  "oud/v1alpha1/gen/gob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_underlayroute_2eproto_deps[2] = {
  &::descriptor_table_networktypes_2eproto,
  &::descriptor_table_object_5fkey_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_underlayroute_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_underlayroute_2eproto = {
  false, false, 1547, descriptor_table_protodef_underlayroute_2eproto, "underlayroute.proto", 
  &descriptor_table_underlayroute_2eproto_once, descriptor_table_underlayroute_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_underlayroute_2eproto::offsets,
  file_level_metadata_underlayroute_2eproto, file_level_enum_descriptors_underlayroute_2eproto, file_level_service_descriptors_underlayroute_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_underlayroute_2eproto_getter() {
  return &descriptor_table_underlayroute_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_underlayroute_2eproto(&descriptor_table_underlayroute_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {

// ===================================================================

class UnderlayRoute::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec& spec(const UnderlayRoute* msg);
  static const ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus& status(const UnderlayRoute* msg);
};

const ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec&
UnderlayRoute::_Internal::spec(const UnderlayRoute* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus&
UnderlayRoute::_Internal::status(const UnderlayRoute* msg) {
  return *msg->status_;
}
UnderlayRoute::UnderlayRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.UnderlayRoute)
}
UnderlayRoute::UnderlayRoute(const UnderlayRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.UnderlayRoute)
}

inline void UnderlayRoute::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

UnderlayRoute::~UnderlayRoute() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.UnderlayRoute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnderlayRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void UnderlayRoute::ArenaDtor(void* object) {
  UnderlayRoute* _this = reinterpret_cast< UnderlayRoute* >(object);
  (void)_this;
}
void UnderlayRoute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnderlayRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnderlayRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.UnderlayRoute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnderlayRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.UnderlayRouteSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.UnderlayRouteStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnderlayRoute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.UnderlayRoute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.UnderlayRouteSpec spec = 1;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.UnderlayRouteStatus status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.UnderlayRoute)
  return target;
}

size_t UnderlayRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.UnderlayRoute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.UnderlayRouteSpec spec = 1;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.UnderlayRouteStatus status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnderlayRoute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnderlayRoute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnderlayRoute::GetClassData() const { return &_class_data_; }

void UnderlayRoute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnderlayRoute *>(to)->MergeFrom(
      static_cast<const UnderlayRoute &>(from));
}


void UnderlayRoute::MergeFrom(const UnderlayRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.UnderlayRoute)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnderlayRoute::CopyFrom(const UnderlayRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.UnderlayRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlayRoute::IsInitialized() const {
  return true;
}

void UnderlayRoute::InternalSwap(UnderlayRoute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnderlayRoute, status_)
      + sizeof(UnderlayRoute::status_)
      - PROTOBUF_FIELD_OFFSET(UnderlayRoute, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnderlayRoute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_underlayroute_2eproto_getter, &descriptor_table_underlayroute_2eproto_once,
      file_level_metadata_underlayroute_2eproto[0]);
}

// ===================================================================

class UnderlayRouteSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const UnderlayRouteSpec* msg);
  static const ::opi_api::common::v1::ObjectKey& route_table_id(const UnderlayRouteSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& dest_prefix(const UnderlayRouteSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& next_hop_address(const UnderlayRouteSpec* msg);
  static const ::opi_api::common::v1::ObjectKey& interface_id(const UnderlayRouteSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
UnderlayRouteSpec::_Internal::id(const UnderlayRouteSpec* msg) {
  return *msg->id_;
}
const ::opi_api::common::v1::ObjectKey&
UnderlayRouteSpec::_Internal::route_table_id(const UnderlayRouteSpec* msg) {
  return *msg->route_table_id_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&
UnderlayRouteSpec::_Internal::dest_prefix(const UnderlayRouteSpec* msg) {
  return *msg->dest_prefix_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
UnderlayRouteSpec::_Internal::next_hop_address(const UnderlayRouteSpec* msg) {
  return *msg->next_hop_address_;
}
const ::opi_api::common::v1::ObjectKey&
UnderlayRouteSpec::_Internal::interface_id(const UnderlayRouteSpec* msg) {
  return *msg->interface_id_;
}
void UnderlayRouteSpec::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void UnderlayRouteSpec::clear_route_table_id() {
  if (GetArenaForAllocation() == nullptr && route_table_id_ != nullptr) {
    delete route_table_id_;
  }
  route_table_id_ = nullptr;
}
void UnderlayRouteSpec::clear_dest_prefix() {
  if (GetArenaForAllocation() == nullptr && dest_prefix_ != nullptr) {
    delete dest_prefix_;
  }
  dest_prefix_ = nullptr;
}
void UnderlayRouteSpec::clear_next_hop_address() {
  if (GetArenaForAllocation() == nullptr && next_hop_address_ != nullptr) {
    delete next_hop_address_;
  }
  next_hop_address_ = nullptr;
}
void UnderlayRouteSpec::clear_interface_id() {
  if (GetArenaForAllocation() == nullptr && interface_id_ != nullptr) {
    delete interface_id_;
  }
  interface_id_ = nullptr;
}
UnderlayRouteSpec::UnderlayRouteSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
}
UnderlayRouteSpec::UnderlayRouteSpec(const UnderlayRouteSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_route_table_id()) {
    route_table_id_ = new ::opi_api::common::v1::ObjectKey(*from.route_table_id_);
  } else {
    route_table_id_ = nullptr;
  }
  if (from._internal_has_dest_prefix()) {
    dest_prefix_ = new ::opi_api::network::opinetcommon::v1alpha1::IPPrefix(*from.dest_prefix_);
  } else {
    dest_prefix_ = nullptr;
  }
  if (from._internal_has_next_hop_address()) {
    next_hop_address_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.next_hop_address_);
  } else {
    next_hop_address_ = nullptr;
  }
  if (from._internal_has_interface_id()) {
    interface_id_ = new ::opi_api::common::v1::ObjectKey(*from.interface_id_);
  } else {
    interface_id_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_dist_) -
    reinterpret_cast<char*>(&state_)) + sizeof(admin_dist_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
}

inline void UnderlayRouteSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&admin_dist_) -
    reinterpret_cast<char*>(&id_)) + sizeof(admin_dist_));
}

UnderlayRouteSpec::~UnderlayRouteSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnderlayRouteSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete route_table_id_;
  if (this != internal_default_instance()) delete dest_prefix_;
  if (this != internal_default_instance()) delete next_hop_address_;
  if (this != internal_default_instance()) delete interface_id_;
}

void UnderlayRouteSpec::ArenaDtor(void* object) {
  UnderlayRouteSpec* _this = reinterpret_cast< UnderlayRouteSpec* >(object);
  (void)_this;
}
void UnderlayRouteSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnderlayRouteSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnderlayRouteSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && route_table_id_ != nullptr) {
    delete route_table_id_;
  }
  route_table_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dest_prefix_ != nullptr) {
    delete dest_prefix_;
  }
  dest_prefix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && next_hop_address_ != nullptr) {
    delete next_hop_address_;
  }
  next_hop_address_ = nullptr;
  if (GetArenaForAllocation() == nullptr && interface_id_ != nullptr) {
    delete interface_id_;
  }
  interface_id_ = nullptr;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_dist_) -
      reinterpret_cast<char*>(&state_)) + sizeof(admin_dist_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnderlayRouteSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey route_table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_hop_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.AdminState state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::opi_api::network::opinetcommon::v1alpha1::AdminState>(val));
        } else
          goto handle_unusual;
        continue;
      // bool enable_admin_distance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          enable_admin_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 admin_dist = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          admin_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey interface_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_interface_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnderlayRouteSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey route_table_id = 2;
  if (this->_internal_has_route_table_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::route_table_id(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 3;
  if (this->_internal_has_dest_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dest_prefix(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 4;
  if (this->_internal_has_next_hop_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::next_hop_address(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.AdminState state = 5;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_state(), target);
  }

  // bool enable_admin_distance = 6;
  if (this->_internal_enable_admin_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enable_admin_distance(), target);
  }

  // int32 admin_dist = 7;
  if (this->_internal_admin_dist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_admin_dist(), target);
  }

  // .opi_api.common.v1.ObjectKey interface_id = 8;
  if (this->_internal_has_interface_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::interface_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
  return target;
}

size_t UnderlayRouteSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .opi_api.common.v1.ObjectKey route_table_id = 2;
  if (this->_internal_has_route_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_table_id_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 3;
  if (this->_internal_has_dest_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_prefix_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 4;
  if (this->_internal_has_next_hop_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_hop_address_);
  }

  // .opi_api.common.v1.ObjectKey interface_id = 8;
  if (this->_internal_has_interface_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interface_id_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.AdminState state = 5;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // bool enable_admin_distance = 6;
  if (this->_internal_enable_admin_distance() != 0) {
    total_size += 1 + 1;
  }

  // int32 admin_dist = 7;
  if (this->_internal_admin_dist() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_admin_dist());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnderlayRouteSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnderlayRouteSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnderlayRouteSpec::GetClassData() const { return &_class_data_; }

void UnderlayRouteSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnderlayRouteSpec *>(to)->MergeFrom(
      static_cast<const UnderlayRouteSpec &>(from));
}


void UnderlayRouteSpec::MergeFrom(const UnderlayRouteSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_has_route_table_id()) {
    _internal_mutable_route_table_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_route_table_id());
  }
  if (from._internal_has_dest_prefix()) {
    _internal_mutable_dest_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(from._internal_dest_prefix());
  }
  if (from._internal_has_next_hop_address()) {
    _internal_mutable_next_hop_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_next_hop_address());
  }
  if (from._internal_has_interface_id()) {
    _internal_mutable_interface_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_interface_id());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_enable_admin_distance() != 0) {
    _internal_set_enable_admin_distance(from._internal_enable_admin_distance());
  }
  if (from._internal_admin_dist() != 0) {
    _internal_set_admin_dist(from._internal_admin_dist());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnderlayRouteSpec::CopyFrom(const UnderlayRouteSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlayRouteSpec::IsInitialized() const {
  return true;
}

void UnderlayRouteSpec::InternalSwap(UnderlayRouteSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnderlayRouteSpec, admin_dist_)
      + sizeof(UnderlayRouteSpec::admin_dist_)
      - PROTOBUF_FIELD_OFFSET(UnderlayRouteSpec, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnderlayRouteSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_underlayroute_2eproto_getter, &descriptor_table_underlayroute_2eproto_once,
      file_level_metadata_underlayroute_2eproto[1]);
}

// ===================================================================

class UnderlayRouteStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& dest_prefix(const UnderlayRouteStatus* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& next_hop_address(const UnderlayRouteStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&
UnderlayRouteStatus::_Internal::dest_prefix(const UnderlayRouteStatus* msg) {
  return *msg->dest_prefix_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
UnderlayRouteStatus::_Internal::next_hop_address(const UnderlayRouteStatus* msg) {
  return *msg->next_hop_address_;
}
void UnderlayRouteStatus::clear_dest_prefix() {
  if (GetArenaForAllocation() == nullptr && dest_prefix_ != nullptr) {
    delete dest_prefix_;
  }
  dest_prefix_ = nullptr;
}
void UnderlayRouteStatus::clear_next_hop_address() {
  if (GetArenaForAllocation() == nullptr && next_hop_address_ != nullptr) {
    delete next_hop_address_;
  }
  next_hop_address_ = nullptr;
}
UnderlayRouteStatus::UnderlayRouteStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
}
UnderlayRouteStatus::UnderlayRouteStatus(const UnderlayRouteStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dest_prefix()) {
    dest_prefix_ = new ::opi_api::network::opinetcommon::v1alpha1::IPPrefix(*from.dest_prefix_);
  } else {
    dest_prefix_ = nullptr;
  }
  if (from._internal_has_next_hop_address()) {
    next_hop_address_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.next_hop_address_);
  } else {
    next_hop_address_ = nullptr;
  }
  ::memcpy(&route_table_id_, &from.route_table_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&admin_distance_) -
    reinterpret_cast<char*>(&route_table_id_)) + sizeof(admin_distance_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
}

inline void UnderlayRouteStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dest_prefix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&admin_distance_) -
    reinterpret_cast<char*>(&dest_prefix_)) + sizeof(admin_distance_));
}

UnderlayRouteStatus::~UnderlayRouteStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnderlayRouteStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete dest_prefix_;
  if (this != internal_default_instance()) delete next_hop_address_;
}

void UnderlayRouteStatus::ArenaDtor(void* object) {
  UnderlayRouteStatus* _this = reinterpret_cast< UnderlayRouteStatus* >(object);
  (void)_this;
}
void UnderlayRouteStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnderlayRouteStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnderlayRouteStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && dest_prefix_ != nullptr) {
    delete dest_prefix_;
  }
  dest_prefix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && next_hop_address_ != nullptr) {
    delete next_hop_address_;
  }
  next_hop_address_ = nullptr;
  ::memset(&route_table_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_distance_) -
      reinterpret_cast<char*>(&route_table_id_)) + sizeof(admin_distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnderlayRouteStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 route_table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          route_table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_hop_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 if_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          if_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.RouteType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::opinetcommon::v1alpha1::RouteType>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_proto(static_cast<::opi_api::network::opinetcommon::v1alpha1::RouteProtocol>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 age = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 metric = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool fib_route = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          fib_route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool connected = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 admin_distance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          admin_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnderlayRouteStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 route_table_id = 1;
  if (this->_internal_route_table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_route_table_id(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
  if (this->_internal_has_dest_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dest_prefix(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
  if (this->_internal_has_next_hop_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::next_hop_address(this), target, stream);
  }

  // int32 if_index = 5;
  if (this->_internal_if_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_if_index(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.RouteType type = 6;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 7;
  if (this->_internal_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_proto(), target);
  }

  // int32 age = 8;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_age(), target);
  }

  // int32 metric = 9;
  if (this->_internal_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_metric(), target);
  }

  // bool fib_route = 10;
  if (this->_internal_fib_route() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_fib_route(), target);
  }

  // bool connected = 11;
  if (this->_internal_connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_connected(), target);
  }

  // int32 admin_distance = 12;
  if (this->_internal_admin_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_admin_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
  return target;
}

size_t UnderlayRouteStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
  if (this->_internal_has_dest_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_prefix_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
  if (this->_internal_has_next_hop_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_hop_address_);
  }

  // int32 route_table_id = 1;
  if (this->_internal_route_table_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_route_table_id());
  }

  // int32 if_index = 5;
  if (this->_internal_if_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_if_index());
  }

  // .opi_api.network.opinetcommon.v1alpha1.RouteType type = 6;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 7;
  if (this->_internal_proto() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_proto());
  }

  // int32 age = 8;
  if (this->_internal_age() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  // int32 metric = 9;
  if (this->_internal_metric() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_metric());
  }

  // bool fib_route = 10;
  if (this->_internal_fib_route() != 0) {
    total_size += 1 + 1;
  }

  // bool connected = 11;
  if (this->_internal_connected() != 0) {
    total_size += 1 + 1;
  }

  // int32 admin_distance = 12;
  if (this->_internal_admin_distance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_admin_distance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnderlayRouteStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnderlayRouteStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnderlayRouteStatus::GetClassData() const { return &_class_data_; }

void UnderlayRouteStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnderlayRouteStatus *>(to)->MergeFrom(
      static_cast<const UnderlayRouteStatus &>(from));
}


void UnderlayRouteStatus::MergeFrom(const UnderlayRouteStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dest_prefix()) {
    _internal_mutable_dest_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(from._internal_dest_prefix());
  }
  if (from._internal_has_next_hop_address()) {
    _internal_mutable_next_hop_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_next_hop_address());
  }
  if (from._internal_route_table_id() != 0) {
    _internal_set_route_table_id(from._internal_route_table_id());
  }
  if (from._internal_if_index() != 0) {
    _internal_set_if_index(from._internal_if_index());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_proto() != 0) {
    _internal_set_proto(from._internal_proto());
  }
  if (from._internal_age() != 0) {
    _internal_set_age(from._internal_age());
  }
  if (from._internal_metric() != 0) {
    _internal_set_metric(from._internal_metric());
  }
  if (from._internal_fib_route() != 0) {
    _internal_set_fib_route(from._internal_fib_route());
  }
  if (from._internal_connected() != 0) {
    _internal_set_connected(from._internal_connected());
  }
  if (from._internal_admin_distance() != 0) {
    _internal_set_admin_distance(from._internal_admin_distance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnderlayRouteStatus::CopyFrom(const UnderlayRouteStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlayRouteStatus::IsInitialized() const {
  return true;
}

void UnderlayRouteStatus::InternalSwap(UnderlayRouteStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnderlayRouteStatus, admin_distance_)
      + sizeof(UnderlayRouteStatus::admin_distance_)
      - PROTOBUF_FIELD_OFFSET(UnderlayRouteStatus, dest_prefix_)>(
          reinterpret_cast<char*>(&dest_prefix_),
          reinterpret_cast<char*>(&other->dest_prefix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnderlayRouteStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_underlayroute_2eproto_getter, &descriptor_table_underlayroute_2eproto_once,
      file_level_metadata_underlayroute_2eproto[2]);
}

// ===================================================================

class UnderlayRouteLookupKey::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& route_table_id(const UnderlayRouteLookupKey* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& dest_prefix(const UnderlayRouteLookupKey* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& next_hop_address(const UnderlayRouteLookupKey* msg);
};

const ::opi_api::common::v1::ObjectKey&
UnderlayRouteLookupKey::_Internal::route_table_id(const UnderlayRouteLookupKey* msg) {
  return *msg->route_table_id_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&
UnderlayRouteLookupKey::_Internal::dest_prefix(const UnderlayRouteLookupKey* msg) {
  return *msg->dest_prefix_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
UnderlayRouteLookupKey::_Internal::next_hop_address(const UnderlayRouteLookupKey* msg) {
  return *msg->next_hop_address_;
}
void UnderlayRouteLookupKey::clear_route_table_id() {
  if (GetArenaForAllocation() == nullptr && route_table_id_ != nullptr) {
    delete route_table_id_;
  }
  route_table_id_ = nullptr;
}
void UnderlayRouteLookupKey::clear_dest_prefix() {
  if (GetArenaForAllocation() == nullptr && dest_prefix_ != nullptr) {
    delete dest_prefix_;
  }
  dest_prefix_ = nullptr;
}
void UnderlayRouteLookupKey::clear_next_hop_address() {
  if (GetArenaForAllocation() == nullptr && next_hop_address_ != nullptr) {
    delete next_hop_address_;
  }
  next_hop_address_ = nullptr;
}
UnderlayRouteLookupKey::UnderlayRouteLookupKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
}
UnderlayRouteLookupKey::UnderlayRouteLookupKey(const UnderlayRouteLookupKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_route_table_id()) {
    route_table_id_ = new ::opi_api::common::v1::ObjectKey(*from.route_table_id_);
  } else {
    route_table_id_ = nullptr;
  }
  if (from._internal_has_dest_prefix()) {
    dest_prefix_ = new ::opi_api::network::opinetcommon::v1alpha1::IPPrefix(*from.dest_prefix_);
  } else {
    dest_prefix_ = nullptr;
  }
  if (from._internal_has_next_hop_address()) {
    next_hop_address_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.next_hop_address_);
  } else {
    next_hop_address_ = nullptr;
  }
  ::memcpy(&ifid_, &from.ifid_,
    static_cast<size_t>(reinterpret_cast<char*>(&proto_) -
    reinterpret_cast<char*>(&ifid_)) + sizeof(proto_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
}

inline void UnderlayRouteLookupKey::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&route_table_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&proto_) -
    reinterpret_cast<char*>(&route_table_id_)) + sizeof(proto_));
}

UnderlayRouteLookupKey::~UnderlayRouteLookupKey() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnderlayRouteLookupKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete route_table_id_;
  if (this != internal_default_instance()) delete dest_prefix_;
  if (this != internal_default_instance()) delete next_hop_address_;
}

void UnderlayRouteLookupKey::ArenaDtor(void* object) {
  UnderlayRouteLookupKey* _this = reinterpret_cast< UnderlayRouteLookupKey* >(object);
  (void)_this;
}
void UnderlayRouteLookupKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnderlayRouteLookupKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnderlayRouteLookupKey::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && route_table_id_ != nullptr) {
    delete route_table_id_;
  }
  route_table_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dest_prefix_ != nullptr) {
    delete dest_prefix_;
  }
  dest_prefix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && next_hop_address_ != nullptr) {
    delete next_hop_address_;
  }
  next_hop_address_ = nullptr;
  ::memset(&ifid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proto_) -
      reinterpret_cast<char*>(&ifid_)) + sizeof(proto_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnderlayRouteLookupKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey route_table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_hop_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ifid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ifid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_proto(static_cast<::opi_api::network::opinetcommon::v1alpha1::RouteProtocol>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnderlayRouteLookupKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey route_table_id = 1;
  if (this->_internal_has_route_table_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::route_table_id(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
  if (this->_internal_has_dest_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dest_prefix(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
  if (this->_internal_has_next_hop_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::next_hop_address(this), target, stream);
  }

  // int32 ifid = 4;
  if (this->_internal_ifid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ifid(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 6;
  if (this->_internal_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_proto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
  return target;
}

size_t UnderlayRouteLookupKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey route_table_id = 1;
  if (this->_internal_has_route_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_table_id_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
  if (this->_internal_has_dest_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_prefix_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
  if (this->_internal_has_next_hop_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_hop_address_);
  }

  // int32 ifid = 4;
  if (this->_internal_ifid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ifid());
  }

  // .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 6;
  if (this->_internal_proto() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_proto());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnderlayRouteLookupKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnderlayRouteLookupKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnderlayRouteLookupKey::GetClassData() const { return &_class_data_; }

void UnderlayRouteLookupKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnderlayRouteLookupKey *>(to)->MergeFrom(
      static_cast<const UnderlayRouteLookupKey &>(from));
}


void UnderlayRouteLookupKey::MergeFrom(const UnderlayRouteLookupKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_route_table_id()) {
    _internal_mutable_route_table_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_route_table_id());
  }
  if (from._internal_has_dest_prefix()) {
    _internal_mutable_dest_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(from._internal_dest_prefix());
  }
  if (from._internal_has_next_hop_address()) {
    _internal_mutable_next_hop_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_next_hop_address());
  }
  if (from._internal_ifid() != 0) {
    _internal_set_ifid(from._internal_ifid());
  }
  if (from._internal_proto() != 0) {
    _internal_set_proto(from._internal_proto());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnderlayRouteLookupKey::CopyFrom(const UnderlayRouteLookupKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlayRouteLookupKey::IsInitialized() const {
  return true;
}

void UnderlayRouteLookupKey::InternalSwap(UnderlayRouteLookupKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnderlayRouteLookupKey, proto_)
      + sizeof(UnderlayRouteLookupKey::proto_)
      - PROTOBUF_FIELD_OFFSET(UnderlayRouteLookupKey, route_table_id_)>(
          reinterpret_cast<char*>(&route_table_id_),
          reinterpret_cast<char*>(&other->route_table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnderlayRouteLookupKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_underlayroute_2eproto_getter, &descriptor_table_underlayroute_2eproto_once,
      file_level_metadata_underlayroute_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::UnderlayRoute* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UnderlayRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::UnderlayRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
