// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tunnel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tunnel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tunnel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "object_key.pb.h"
#include "networktypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tunnel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tunnel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tunnel_2eproto;
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
class DropNexthop;
struct DropNexthopDefaultTypeInternal;
extern DropNexthopDefaultTypeInternal _DropNexthop_default_instance_;
class Tunnel;
struct TunnelDefaultTypeInternal;
extern TunnelDefaultTypeInternal _Tunnel_default_instance_;
class TunnelSpec;
struct TunnelSpecDefaultTypeInternal;
extern TunnelSpecDefaultTypeInternal _TunnelSpec_default_instance_;
class TunnelStatus;
struct TunnelStatusDefaultTypeInternal;
extern TunnelStatusDefaultTypeInternal _TunnelStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::cloud::v1alpha1::DropNexthop* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DropNexthop>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::Tunnel* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Tunnel>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::TunnelSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::TunnelSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::TunnelStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::TunnelStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {

enum TunnelType : int {
  TUNNEL_TYPE_UNSPECIFIED = 0,
  TUNNEL_TYPE_IGW = 1,
  TUNNEL_TYPE_WORKLOAD = 2,
  TUNNEL_TYPE_INTER_DC = 3,
  TUNNEL_TYPE_SERVICE = 4,
  TUNNEL_TYPE_VNF = 5,
  TUNNEL_TYPE_IPSEC = 6,
  TunnelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TunnelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TunnelType_IsValid(int value);
constexpr TunnelType TunnelType_MIN = TUNNEL_TYPE_UNSPECIFIED;
constexpr TunnelType TunnelType_MAX = TUNNEL_TYPE_IPSEC;
constexpr int TunnelType_ARRAYSIZE = TunnelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TunnelType_descriptor();
template<typename T>
inline const std::string& TunnelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TunnelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TunnelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TunnelType_descriptor(), enum_t_value);
}
inline bool TunnelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TunnelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TunnelType>(
    TunnelType_descriptor(), name, value);
}
// ===================================================================

class Tunnel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.Tunnel) */ {
 public:
  inline Tunnel() : Tunnel(nullptr) {}
  ~Tunnel() override;
  explicit constexpr Tunnel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tunnel(const Tunnel& from);
  Tunnel(Tunnel&& from) noexcept
    : Tunnel() {
    *this = ::std::move(from);
  }

  inline Tunnel& operator=(const Tunnel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tunnel& operator=(Tunnel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tunnel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tunnel* internal_default_instance() {
    return reinterpret_cast<const Tunnel*>(
               &_Tunnel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Tunnel& a, Tunnel& b) {
    a.Swap(&b);
  }
  inline void Swap(Tunnel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tunnel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tunnel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tunnel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Tunnel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Tunnel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tunnel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.Tunnel";
  }
  protected:
  explicit Tunnel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // .opi_api.network.cloud.v1alpha1.TunnelSpec spec = 3;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::TunnelSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::TunnelSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::TunnelSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::TunnelSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::TunnelSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::TunnelSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::TunnelSpec* spec);
  ::opi_api::network::cloud::v1alpha1::TunnelSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.TunnelStatus status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::cloud::v1alpha1::TunnelStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::TunnelStatus* release_status();
  ::opi_api::network::cloud::v1alpha1::TunnelStatus* mutable_status();
  void set_allocated_status(::opi_api::network::cloud::v1alpha1::TunnelStatus* status);
  private:
  const ::opi_api::network::cloud::v1alpha1::TunnelStatus& _internal_status() const;
  ::opi_api::network::cloud::v1alpha1::TunnelStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::cloud::v1alpha1::TunnelStatus* status);
  ::opi_api::network::cloud::v1alpha1::TunnelStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.Tunnel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::TunnelSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::TunnelStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnel_2eproto;
};
// -------------------------------------------------------------------

class TunnelSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.TunnelSpec) */ {
 public:
  inline TunnelSpec() : TunnelSpec(nullptr) {}
  ~TunnelSpec() override;
  explicit constexpr TunnelSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TunnelSpec(const TunnelSpec& from);
  TunnelSpec(TunnelSpec&& from) noexcept
    : TunnelSpec() {
    *this = ::std::move(from);
  }

  inline TunnelSpec& operator=(const TunnelSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelSpec& operator=(TunnelSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TunnelSpec& default_instance() {
    return *internal_default_instance();
  }
  enum NhCase {
    kNexthopId = 8,
    kNexthopGroupId = 9,
    kTunnelId = 10,
    kDropNextHop = 11,
    NH_NOT_SET = 0,
  };

  static inline const TunnelSpec* internal_default_instance() {
    return reinterpret_cast<const TunnelSpec*>(
               &_TunnelSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TunnelSpec& a, TunnelSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TunnelSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TunnelSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TunnelSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TunnelSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.TunnelSpec";
  }
  protected:
  explicit TunnelSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacAddressFieldNumber = 12,
    kIdFieldNumber = 1,
    kVpcIdFieldNumber = 2,
    kLocalIpFieldNumber = 3,
    kRemoteIpFieldNumber = 4,
    kEncapFieldNumber = 6,
    kTypeFieldNumber = 5,
    kTosFieldNumber = 13,
    kNexthopIdFieldNumber = 8,
    kNexthopGroupIdFieldNumber = 9,
    kTunnelIdFieldNumber = 10,
    kDropNextHopFieldNumber = 11,
  };
  // bytes mac_address = 12;
  void clear_mac_address();
  const std::string& mac_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac_address();
  PROTOBUF_NODISCARD std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.common.v1.ObjectKey vpc_id = 2;
  bool has_vpc_id() const;
  private:
  bool _internal_has_vpc_id() const;
  public:
  void clear_vpc_id();
  const ::opi_api::common::v1::ObjectKey& vpc_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_vpc_id();
  ::opi_api::common::v1::ObjectKey* mutable_vpc_id();
  void set_allocated_vpc_id(::opi_api::common::v1::ObjectKey* vpc_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_vpc_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_vpc_id();
  public:
  void unsafe_arena_set_allocated_vpc_id(
      ::opi_api::common::v1::ObjectKey* vpc_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_vpc_id();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress local_ip = 3;
  bool has_local_ip() const;
  private:
  bool _internal_has_local_ip() const;
  public:
  void clear_local_ip();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& local_ip() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_local_ip();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_local_ip();
  void set_allocated_local_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_ip);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_local_ip() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_local_ip();
  public:
  void unsafe_arena_set_allocated_local_ip(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_ip);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_local_ip();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress remote_ip = 4;
  bool has_remote_ip() const;
  private:
  bool _internal_has_remote_ip() const;
  public:
  void clear_remote_ip();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& remote_ip() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_remote_ip();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_remote_ip();
  void set_allocated_remote_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* remote_ip);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_remote_ip() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_remote_ip();
  public:
  void unsafe_arena_set_allocated_remote_ip(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* remote_ip);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_remote_ip();

  // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 6;
  bool has_encap() const;
  private:
  bool _internal_has_encap() const;
  public:
  void clear_encap();
  const ::opi_api::network::opinetcommon::v1alpha1::Encap& encap() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::Encap* release_encap();
  ::opi_api::network::opinetcommon::v1alpha1::Encap* mutable_encap();
  void set_allocated_encap(::opi_api::network::opinetcommon::v1alpha1::Encap* encap);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::Encap& _internal_encap() const;
  ::opi_api::network::opinetcommon::v1alpha1::Encap* _internal_mutable_encap();
  public:
  void unsafe_arena_set_allocated_encap(
      ::opi_api::network::opinetcommon::v1alpha1::Encap* encap);
  ::opi_api::network::opinetcommon::v1alpha1::Encap* unsafe_arena_release_encap();

  // .opi_api.network.cloud.v1alpha1.TunnelType type = 5;
  void clear_type();
  ::opi_api::network::cloud::v1alpha1::TunnelType type() const;
  void set_type(::opi_api::network::cloud::v1alpha1::TunnelType value);
  private:
  ::opi_api::network::cloud::v1alpha1::TunnelType _internal_type() const;
  void _internal_set_type(::opi_api::network::cloud::v1alpha1::TunnelType value);
  public:

  // int32 tos = 13;
  void clear_tos();
  int32_t tos() const;
  void set_tos(int32_t value);
  private:
  int32_t _internal_tos() const;
  void _internal_set_tos(int32_t value);
  public:

  // .opi_api.common.v1.ObjectKey nexthop_id = 8;
  bool has_nexthop_id() const;
  private:
  bool _internal_has_nexthop_id() const;
  public:
  void clear_nexthop_id();
  const ::opi_api::common::v1::ObjectKey& nexthop_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_nexthop_id();
  ::opi_api::common::v1::ObjectKey* mutable_nexthop_id();
  void set_allocated_nexthop_id(::opi_api::common::v1::ObjectKey* nexthop_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_nexthop_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_nexthop_id();
  public:
  void unsafe_arena_set_allocated_nexthop_id(
      ::opi_api::common::v1::ObjectKey* nexthop_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_nexthop_id();

  // .opi_api.common.v1.ObjectKey nexthop_group_id = 9;
  bool has_nexthop_group_id() const;
  private:
  bool _internal_has_nexthop_group_id() const;
  public:
  void clear_nexthop_group_id();
  const ::opi_api::common::v1::ObjectKey& nexthop_group_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_nexthop_group_id();
  ::opi_api::common::v1::ObjectKey* mutable_nexthop_group_id();
  void set_allocated_nexthop_group_id(::opi_api::common::v1::ObjectKey* nexthop_group_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_nexthop_group_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_nexthop_group_id();
  public:
  void unsafe_arena_set_allocated_nexthop_group_id(
      ::opi_api::common::v1::ObjectKey* nexthop_group_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_nexthop_group_id();

  // .opi_api.common.v1.ObjectKey tunnel_id = 10;
  bool has_tunnel_id() const;
  private:
  bool _internal_has_tunnel_id() const;
  public:
  void clear_tunnel_id();
  const ::opi_api::common::v1::ObjectKey& tunnel_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_tunnel_id();
  ::opi_api::common::v1::ObjectKey* mutable_tunnel_id();
  void set_allocated_tunnel_id(::opi_api::common::v1::ObjectKey* tunnel_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_tunnel_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_tunnel_id();
  public:
  void unsafe_arena_set_allocated_tunnel_id(
      ::opi_api::common::v1::ObjectKey* tunnel_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_tunnel_id();

  // .opi_api.network.cloud.v1alpha1.DropNexthop drop_next_hop = 11;
  bool has_drop_next_hop() const;
  private:
  bool _internal_has_drop_next_hop() const;
  public:
  void clear_drop_next_hop();
  const ::opi_api::network::cloud::v1alpha1::DropNexthop& drop_next_hop() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::DropNexthop* release_drop_next_hop();
  ::opi_api::network::cloud::v1alpha1::DropNexthop* mutable_drop_next_hop();
  void set_allocated_drop_next_hop(::opi_api::network::cloud::v1alpha1::DropNexthop* drop_next_hop);
  private:
  const ::opi_api::network::cloud::v1alpha1::DropNexthop& _internal_drop_next_hop() const;
  ::opi_api::network::cloud::v1alpha1::DropNexthop* _internal_mutable_drop_next_hop();
  public:
  void unsafe_arena_set_allocated_drop_next_hop(
      ::opi_api::network::cloud::v1alpha1::DropNexthop* drop_next_hop);
  ::opi_api::network::cloud::v1alpha1::DropNexthop* unsafe_arena_release_drop_next_hop();

  void clear_nh();
  NhCase nh_case() const;
  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.TunnelSpec)
 private:
  class _Internal;
  void set_has_nexthop_id();
  void set_has_nexthop_group_id();
  void set_has_tunnel_id();
  void set_has_drop_next_hop();

  inline bool has_nh() const;
  inline void clear_has_nh();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::common::v1::ObjectKey* vpc_id_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_ip_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* remote_ip_;
  ::opi_api::network::opinetcommon::v1alpha1::Encap* encap_;
  int type_;
  int32_t tos_;
  union NhUnion {
    constexpr NhUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::opi_api::common::v1::ObjectKey* nexthop_id_;
    ::opi_api::common::v1::ObjectKey* nexthop_group_id_;
    ::opi_api::common::v1::ObjectKey* tunnel_id_;
    ::opi_api::network::cloud::v1alpha1::DropNexthop* drop_next_hop_;
  } nh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_tunnel_2eproto;
};
// -------------------------------------------------------------------

class DropNexthop final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DropNexthop) */ {
 public:
  inline DropNexthop() : DropNexthop(nullptr) {}
  explicit constexpr DropNexthop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropNexthop(const DropNexthop& from);
  DropNexthop(DropNexthop&& from) noexcept
    : DropNexthop() {
    *this = ::std::move(from);
  }

  inline DropNexthop& operator=(const DropNexthop& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropNexthop& operator=(DropNexthop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropNexthop& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropNexthop* internal_default_instance() {
    return reinterpret_cast<const DropNexthop*>(
               &_DropNexthop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DropNexthop& a, DropNexthop& b) {
    a.Swap(&b);
  }
  inline void Swap(DropNexthop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropNexthop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropNexthop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropNexthop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DropNexthop& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DropNexthop& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DropNexthop";
  }
  protected:
  explicit DropNexthop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DropNexthop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnel_2eproto;
};
// -------------------------------------------------------------------

class TunnelStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.TunnelStatus) */ {
 public:
  inline TunnelStatus() : TunnelStatus(nullptr) {}
  ~TunnelStatus() override;
  explicit constexpr TunnelStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TunnelStatus(const TunnelStatus& from);
  TunnelStatus(TunnelStatus&& from) noexcept
    : TunnelStatus() {
    *this = ::std::move(from);
  }

  inline TunnelStatus& operator=(const TunnelStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelStatus& operator=(TunnelStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TunnelStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TunnelStatus* internal_default_instance() {
    return reinterpret_cast<const TunnelStatus*>(
               &_TunnelStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TunnelStatus& a, TunnelStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TunnelStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TunnelStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TunnelStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TunnelStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.TunnelStatus";
  }
  protected:
  explicit TunnelStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHwHandleFieldNumber = 1,
    kVnicCountFieldNumber = 2,
  };
  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
  bool has_hw_handle() const;
  private:
  bool _internal_has_hw_handle() const;
  public:
  void clear_hw_handle();
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& hw_handle() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::HwHandle* release_hw_handle();
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* mutable_hw_handle();
  void set_allocated_hw_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& _internal_hw_handle() const;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _internal_mutable_hw_handle();
  public:
  void unsafe_arena_set_allocated_hw_handle(
      ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle);
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* unsafe_arena_release_hw_handle();

  // int32 vnic_count = 2;
  void clear_vnic_count();
  int32_t vnic_count() const;
  void set_vnic_count(int32_t value);
  private:
  int32_t _internal_vnic_count() const;
  void _internal_set_vnic_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.TunnelStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle_;
  int32_t vnic_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tunnel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tunnel

// .opi_api.network.cloud.v1alpha1.TunnelSpec spec = 3;
inline bool Tunnel::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool Tunnel::has_spec() const {
  return _internal_has_spec();
}
inline void Tunnel::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::TunnelSpec& Tunnel::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::TunnelSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::TunnelSpec&>(
      ::opi_api::network::cloud::v1alpha1::_TunnelSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::TunnelSpec& Tunnel::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.Tunnel.spec)
  return _internal_spec();
}
inline void Tunnel::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::TunnelSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.Tunnel.spec)
}
inline ::opi_api::network::cloud::v1alpha1::TunnelSpec* Tunnel::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::TunnelSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::TunnelSpec* Tunnel::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.Tunnel.spec)
  
  ::opi_api::network::cloud::v1alpha1::TunnelSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::TunnelSpec* Tunnel::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::TunnelSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::TunnelSpec* Tunnel::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::TunnelSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.Tunnel.spec)
  return _msg;
}
inline void Tunnel::set_allocated_spec(::opi_api::network::cloud::v1alpha1::TunnelSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::TunnelSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.Tunnel.spec)
}

// .opi_api.network.cloud.v1alpha1.TunnelStatus status = 4;
inline bool Tunnel::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Tunnel::has_status() const {
  return _internal_has_status();
}
inline void Tunnel::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::TunnelStatus& Tunnel::_internal_status() const {
  const ::opi_api::network::cloud::v1alpha1::TunnelStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::TunnelStatus&>(
      ::opi_api::network::cloud::v1alpha1::_TunnelStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::TunnelStatus& Tunnel::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.Tunnel.status)
  return _internal_status();
}
inline void Tunnel::unsafe_arena_set_allocated_status(
    ::opi_api::network::cloud::v1alpha1::TunnelStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.Tunnel.status)
}
inline ::opi_api::network::cloud::v1alpha1::TunnelStatus* Tunnel::release_status() {
  
  ::opi_api::network::cloud::v1alpha1::TunnelStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::TunnelStatus* Tunnel::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.Tunnel.status)
  
  ::opi_api::network::cloud::v1alpha1::TunnelStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::TunnelStatus* Tunnel::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::TunnelStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::cloud::v1alpha1::TunnelStatus* Tunnel::mutable_status() {
  ::opi_api::network::cloud::v1alpha1::TunnelStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.Tunnel.status)
  return _msg;
}
inline void Tunnel::set_allocated_status(::opi_api::network::cloud::v1alpha1::TunnelStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::TunnelStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.Tunnel.status)
}

// -------------------------------------------------------------------

// TunnelSpec

// .opi_api.common.v1.ObjectKey id = 1;
inline bool TunnelSpec::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool TunnelSpec::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& TunnelSpec::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& TunnelSpec::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.TunnelSpec.id)
  return _internal_id();
}
inline void TunnelSpec::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.id)
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.TunnelSpec.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.TunnelSpec.id)
  return _msg;
}
inline void TunnelSpec::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.id)
}

// .opi_api.common.v1.ObjectKey vpc_id = 2;
inline bool TunnelSpec::_internal_has_vpc_id() const {
  return this != internal_default_instance() && vpc_id_ != nullptr;
}
inline bool TunnelSpec::has_vpc_id() const {
  return _internal_has_vpc_id();
}
inline const ::opi_api::common::v1::ObjectKey& TunnelSpec::_internal_vpc_id() const {
  const ::opi_api::common::v1::ObjectKey* p = vpc_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& TunnelSpec::vpc_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.TunnelSpec.vpc_id)
  return _internal_vpc_id();
}
inline void TunnelSpec::unsafe_arena_set_allocated_vpc_id(
    ::opi_api::common::v1::ObjectKey* vpc_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc_id_);
  }
  vpc_id_ = vpc_id;
  if (vpc_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.vpc_id)
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::release_vpc_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = vpc_id_;
  vpc_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::unsafe_arena_release_vpc_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.TunnelSpec.vpc_id)
  
  ::opi_api::common::v1::ObjectKey* temp = vpc_id_;
  vpc_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::_internal_mutable_vpc_id() {
  
  if (vpc_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    vpc_id_ = p;
  }
  return vpc_id_;
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::mutable_vpc_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_vpc_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.TunnelSpec.vpc_id)
  return _msg;
}
inline void TunnelSpec::set_allocated_vpc_id(::opi_api::common::v1::ObjectKey* vpc_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc_id_);
  }
  if (vpc_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc_id));
    if (message_arena != submessage_arena) {
      vpc_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpc_id, submessage_arena);
    }
    
  } else {
    
  }
  vpc_id_ = vpc_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.vpc_id)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress local_ip = 3;
inline bool TunnelSpec::_internal_has_local_ip() const {
  return this != internal_default_instance() && local_ip_ != nullptr;
}
inline bool TunnelSpec::has_local_ip() const {
  return _internal_has_local_ip();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& TunnelSpec::_internal_local_ip() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = local_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& TunnelSpec::local_ip() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.TunnelSpec.local_ip)
  return _internal_local_ip();
}
inline void TunnelSpec::unsafe_arena_set_allocated_local_ip(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_ip_);
  }
  local_ip_ = local_ip;
  if (local_ip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.local_ip)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* TunnelSpec::release_local_ip() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = local_ip_;
  local_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* TunnelSpec::unsafe_arena_release_local_ip() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.TunnelSpec.local_ip)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = local_ip_;
  local_ip_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* TunnelSpec::_internal_mutable_local_ip() {
  
  if (local_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    local_ip_ = p;
  }
  return local_ip_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* TunnelSpec::mutable_local_ip() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_local_ip();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.TunnelSpec.local_ip)
  return _msg;
}
inline void TunnelSpec::set_allocated_local_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* local_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_ip_);
  }
  if (local_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_ip));
    if (message_arena != submessage_arena) {
      local_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_ip, submessage_arena);
    }
    
  } else {
    
  }
  local_ip_ = local_ip;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.local_ip)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress remote_ip = 4;
inline bool TunnelSpec::_internal_has_remote_ip() const {
  return this != internal_default_instance() && remote_ip_ != nullptr;
}
inline bool TunnelSpec::has_remote_ip() const {
  return _internal_has_remote_ip();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& TunnelSpec::_internal_remote_ip() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = remote_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& TunnelSpec::remote_ip() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.TunnelSpec.remote_ip)
  return _internal_remote_ip();
}
inline void TunnelSpec::unsafe_arena_set_allocated_remote_ip(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* remote_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_ip_);
  }
  remote_ip_ = remote_ip;
  if (remote_ip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.remote_ip)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* TunnelSpec::release_remote_ip() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = remote_ip_;
  remote_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* TunnelSpec::unsafe_arena_release_remote_ip() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.TunnelSpec.remote_ip)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = remote_ip_;
  remote_ip_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* TunnelSpec::_internal_mutable_remote_ip() {
  
  if (remote_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    remote_ip_ = p;
  }
  return remote_ip_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* TunnelSpec::mutable_remote_ip() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_remote_ip();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.TunnelSpec.remote_ip)
  return _msg;
}
inline void TunnelSpec::set_allocated_remote_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* remote_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_ip_);
  }
  if (remote_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_ip));
    if (message_arena != submessage_arena) {
      remote_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_ip, submessage_arena);
    }
    
  } else {
    
  }
  remote_ip_ = remote_ip;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.remote_ip)
}

// .opi_api.network.cloud.v1alpha1.TunnelType type = 5;
inline void TunnelSpec::clear_type() {
  type_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::TunnelType TunnelSpec::_internal_type() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::TunnelType >(type_);
}
inline ::opi_api::network::cloud::v1alpha1::TunnelType TunnelSpec::type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.TunnelSpec.type)
  return _internal_type();
}
inline void TunnelSpec::_internal_set_type(::opi_api::network::cloud::v1alpha1::TunnelType value) {
  
  type_ = value;
}
inline void TunnelSpec::set_type(::opi_api::network::cloud::v1alpha1::TunnelType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.TunnelSpec.type)
}

// .opi_api.network.opinetcommon.v1alpha1.Encap encap = 6;
inline bool TunnelSpec::_internal_has_encap() const {
  return this != internal_default_instance() && encap_ != nullptr;
}
inline bool TunnelSpec::has_encap() const {
  return _internal_has_encap();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::Encap& TunnelSpec::_internal_encap() const {
  const ::opi_api::network::opinetcommon::v1alpha1::Encap* p = encap_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::Encap&>(
      ::opi_api::network::opinetcommon::v1alpha1::_Encap_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::Encap& TunnelSpec::encap() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.TunnelSpec.encap)
  return _internal_encap();
}
inline void TunnelSpec::unsafe_arena_set_allocated_encap(
    ::opi_api::network::opinetcommon::v1alpha1::Encap* encap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encap_);
  }
  encap_ = encap;
  if (encap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.encap)
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* TunnelSpec::release_encap() {
  
  ::opi_api::network::opinetcommon::v1alpha1::Encap* temp = encap_;
  encap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* TunnelSpec::unsafe_arena_release_encap() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.TunnelSpec.encap)
  
  ::opi_api::network::opinetcommon::v1alpha1::Encap* temp = encap_;
  encap_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* TunnelSpec::_internal_mutable_encap() {
  
  if (encap_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::Encap>(GetArenaForAllocation());
    encap_ = p;
  }
  return encap_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* TunnelSpec::mutable_encap() {
  ::opi_api::network::opinetcommon::v1alpha1::Encap* _msg = _internal_mutable_encap();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.TunnelSpec.encap)
  return _msg;
}
inline void TunnelSpec::set_allocated_encap(::opi_api::network::opinetcommon::v1alpha1::Encap* encap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encap_);
  }
  if (encap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encap));
    if (message_arena != submessage_arena) {
      encap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encap, submessage_arena);
    }
    
  } else {
    
  }
  encap_ = encap;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.encap)
}

// .opi_api.common.v1.ObjectKey nexthop_id = 8;
inline bool TunnelSpec::_internal_has_nexthop_id() const {
  return nh_case() == kNexthopId;
}
inline bool TunnelSpec::has_nexthop_id() const {
  return _internal_has_nexthop_id();
}
inline void TunnelSpec::set_has_nexthop_id() {
  _oneof_case_[0] = kNexthopId;
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::release_nexthop_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.TunnelSpec.nexthop_id)
  if (_internal_has_nexthop_id()) {
    clear_has_nh();
      ::opi_api::common::v1::ObjectKey* temp = nh_.nexthop_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    nh_.nexthop_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::common::v1::ObjectKey& TunnelSpec::_internal_nexthop_id() const {
  return _internal_has_nexthop_id()
      ? *nh_.nexthop_id_
      : reinterpret_cast< ::opi_api::common::v1::ObjectKey&>(::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& TunnelSpec::nexthop_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.TunnelSpec.nexthop_id)
  return _internal_nexthop_id();
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::unsafe_arena_release_nexthop_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.TunnelSpec.nexthop_id)
  if (_internal_has_nexthop_id()) {
    clear_has_nh();
    ::opi_api::common::v1::ObjectKey* temp = nh_.nexthop_id_;
    nh_.nexthop_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TunnelSpec::unsafe_arena_set_allocated_nexthop_id(::opi_api::common::v1::ObjectKey* nexthop_id) {
  clear_nh();
  if (nexthop_id) {
    set_has_nexthop_id();
    nh_.nexthop_id_ = nexthop_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.nexthop_id)
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::_internal_mutable_nexthop_id() {
  if (!_internal_has_nexthop_id()) {
    clear_nh();
    set_has_nexthop_id();
    nh_.nexthop_id_ = CreateMaybeMessage< ::opi_api::common::v1::ObjectKey >(GetArenaForAllocation());
  }
  return nh_.nexthop_id_;
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::mutable_nexthop_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_nexthop_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.TunnelSpec.nexthop_id)
  return _msg;
}

// .opi_api.common.v1.ObjectKey nexthop_group_id = 9;
inline bool TunnelSpec::_internal_has_nexthop_group_id() const {
  return nh_case() == kNexthopGroupId;
}
inline bool TunnelSpec::has_nexthop_group_id() const {
  return _internal_has_nexthop_group_id();
}
inline void TunnelSpec::set_has_nexthop_group_id() {
  _oneof_case_[0] = kNexthopGroupId;
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::release_nexthop_group_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.TunnelSpec.nexthop_group_id)
  if (_internal_has_nexthop_group_id()) {
    clear_has_nh();
      ::opi_api::common::v1::ObjectKey* temp = nh_.nexthop_group_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    nh_.nexthop_group_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::common::v1::ObjectKey& TunnelSpec::_internal_nexthop_group_id() const {
  return _internal_has_nexthop_group_id()
      ? *nh_.nexthop_group_id_
      : reinterpret_cast< ::opi_api::common::v1::ObjectKey&>(::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& TunnelSpec::nexthop_group_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.TunnelSpec.nexthop_group_id)
  return _internal_nexthop_group_id();
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::unsafe_arena_release_nexthop_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.TunnelSpec.nexthop_group_id)
  if (_internal_has_nexthop_group_id()) {
    clear_has_nh();
    ::opi_api::common::v1::ObjectKey* temp = nh_.nexthop_group_id_;
    nh_.nexthop_group_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TunnelSpec::unsafe_arena_set_allocated_nexthop_group_id(::opi_api::common::v1::ObjectKey* nexthop_group_id) {
  clear_nh();
  if (nexthop_group_id) {
    set_has_nexthop_group_id();
    nh_.nexthop_group_id_ = nexthop_group_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.nexthop_group_id)
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::_internal_mutable_nexthop_group_id() {
  if (!_internal_has_nexthop_group_id()) {
    clear_nh();
    set_has_nexthop_group_id();
    nh_.nexthop_group_id_ = CreateMaybeMessage< ::opi_api::common::v1::ObjectKey >(GetArenaForAllocation());
  }
  return nh_.nexthop_group_id_;
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::mutable_nexthop_group_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_nexthop_group_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.TunnelSpec.nexthop_group_id)
  return _msg;
}

// .opi_api.common.v1.ObjectKey tunnel_id = 10;
inline bool TunnelSpec::_internal_has_tunnel_id() const {
  return nh_case() == kTunnelId;
}
inline bool TunnelSpec::has_tunnel_id() const {
  return _internal_has_tunnel_id();
}
inline void TunnelSpec::set_has_tunnel_id() {
  _oneof_case_[0] = kTunnelId;
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::release_tunnel_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.TunnelSpec.tunnel_id)
  if (_internal_has_tunnel_id()) {
    clear_has_nh();
      ::opi_api::common::v1::ObjectKey* temp = nh_.tunnel_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    nh_.tunnel_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::common::v1::ObjectKey& TunnelSpec::_internal_tunnel_id() const {
  return _internal_has_tunnel_id()
      ? *nh_.tunnel_id_
      : reinterpret_cast< ::opi_api::common::v1::ObjectKey&>(::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& TunnelSpec::tunnel_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.TunnelSpec.tunnel_id)
  return _internal_tunnel_id();
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::unsafe_arena_release_tunnel_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.TunnelSpec.tunnel_id)
  if (_internal_has_tunnel_id()) {
    clear_has_nh();
    ::opi_api::common::v1::ObjectKey* temp = nh_.tunnel_id_;
    nh_.tunnel_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TunnelSpec::unsafe_arena_set_allocated_tunnel_id(::opi_api::common::v1::ObjectKey* tunnel_id) {
  clear_nh();
  if (tunnel_id) {
    set_has_tunnel_id();
    nh_.tunnel_id_ = tunnel_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.tunnel_id)
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::_internal_mutable_tunnel_id() {
  if (!_internal_has_tunnel_id()) {
    clear_nh();
    set_has_tunnel_id();
    nh_.tunnel_id_ = CreateMaybeMessage< ::opi_api::common::v1::ObjectKey >(GetArenaForAllocation());
  }
  return nh_.tunnel_id_;
}
inline ::opi_api::common::v1::ObjectKey* TunnelSpec::mutable_tunnel_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_tunnel_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.TunnelSpec.tunnel_id)
  return _msg;
}

// .opi_api.network.cloud.v1alpha1.DropNexthop drop_next_hop = 11;
inline bool TunnelSpec::_internal_has_drop_next_hop() const {
  return nh_case() == kDropNextHop;
}
inline bool TunnelSpec::has_drop_next_hop() const {
  return _internal_has_drop_next_hop();
}
inline void TunnelSpec::set_has_drop_next_hop() {
  _oneof_case_[0] = kDropNextHop;
}
inline void TunnelSpec::clear_drop_next_hop() {
  if (_internal_has_drop_next_hop()) {
    if (GetArenaForAllocation() == nullptr) {
      delete nh_.drop_next_hop_;
    }
    clear_has_nh();
  }
}
inline ::opi_api::network::cloud::v1alpha1::DropNexthop* TunnelSpec::release_drop_next_hop() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.TunnelSpec.drop_next_hop)
  if (_internal_has_drop_next_hop()) {
    clear_has_nh();
      ::opi_api::network::cloud::v1alpha1::DropNexthop* temp = nh_.drop_next_hop_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    nh_.drop_next_hop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::network::cloud::v1alpha1::DropNexthop& TunnelSpec::_internal_drop_next_hop() const {
  return _internal_has_drop_next_hop()
      ? *nh_.drop_next_hop_
      : reinterpret_cast< ::opi_api::network::cloud::v1alpha1::DropNexthop&>(::opi_api::network::cloud::v1alpha1::_DropNexthop_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::DropNexthop& TunnelSpec::drop_next_hop() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.TunnelSpec.drop_next_hop)
  return _internal_drop_next_hop();
}
inline ::opi_api::network::cloud::v1alpha1::DropNexthop* TunnelSpec::unsafe_arena_release_drop_next_hop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.TunnelSpec.drop_next_hop)
  if (_internal_has_drop_next_hop()) {
    clear_has_nh();
    ::opi_api::network::cloud::v1alpha1::DropNexthop* temp = nh_.drop_next_hop_;
    nh_.drop_next_hop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TunnelSpec::unsafe_arena_set_allocated_drop_next_hop(::opi_api::network::cloud::v1alpha1::DropNexthop* drop_next_hop) {
  clear_nh();
  if (drop_next_hop) {
    set_has_drop_next_hop();
    nh_.drop_next_hop_ = drop_next_hop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.drop_next_hop)
}
inline ::opi_api::network::cloud::v1alpha1::DropNexthop* TunnelSpec::_internal_mutable_drop_next_hop() {
  if (!_internal_has_drop_next_hop()) {
    clear_nh();
    set_has_drop_next_hop();
    nh_.drop_next_hop_ = CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::DropNexthop >(GetArenaForAllocation());
  }
  return nh_.drop_next_hop_;
}
inline ::opi_api::network::cloud::v1alpha1::DropNexthop* TunnelSpec::mutable_drop_next_hop() {
  ::opi_api::network::cloud::v1alpha1::DropNexthop* _msg = _internal_mutable_drop_next_hop();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.TunnelSpec.drop_next_hop)
  return _msg;
}

// bytes mac_address = 12;
inline void TunnelSpec::clear_mac_address() {
  mac_address_.ClearToEmpty();
}
inline const std::string& TunnelSpec::mac_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.TunnelSpec.mac_address)
  return _internal_mac_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TunnelSpec::set_mac_address(ArgT0&& arg0, ArgT... args) {
 
 mac_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.TunnelSpec.mac_address)
}
inline std::string* TunnelSpec::mutable_mac_address() {
  std::string* _s = _internal_mutable_mac_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.TunnelSpec.mac_address)
  return _s;
}
inline const std::string& TunnelSpec::_internal_mac_address() const {
  return mac_address_.Get();
}
inline void TunnelSpec::_internal_set_mac_address(const std::string& value) {
  
  mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TunnelSpec::_internal_mutable_mac_address() {
  
  return mac_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TunnelSpec::release_mac_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.TunnelSpec.mac_address)
  return mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TunnelSpec::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.TunnelSpec.mac_address)
}

// int32 tos = 13;
inline void TunnelSpec::clear_tos() {
  tos_ = 0;
}
inline int32_t TunnelSpec::_internal_tos() const {
  return tos_;
}
inline int32_t TunnelSpec::tos() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.TunnelSpec.tos)
  return _internal_tos();
}
inline void TunnelSpec::_internal_set_tos(int32_t value) {
  
  tos_ = value;
}
inline void TunnelSpec::set_tos(int32_t value) {
  _internal_set_tos(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.TunnelSpec.tos)
}

inline bool TunnelSpec::has_nh() const {
  return nh_case() != NH_NOT_SET;
}
inline void TunnelSpec::clear_has_nh() {
  _oneof_case_[0] = NH_NOT_SET;
}
inline TunnelSpec::NhCase TunnelSpec::nh_case() const {
  return TunnelSpec::NhCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DropNexthop

// -------------------------------------------------------------------

// TunnelStatus

// .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
inline bool TunnelStatus::_internal_has_hw_handle() const {
  return this != internal_default_instance() && hw_handle_ != nullptr;
}
inline bool TunnelStatus::has_hw_handle() const {
  return _internal_has_hw_handle();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& TunnelStatus::_internal_hw_handle() const {
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle* p = hw_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&>(
      ::opi_api::network::opinetcommon::v1alpha1::_HwHandle_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& TunnelStatus::hw_handle() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.TunnelStatus.hw_handle)
  return _internal_hw_handle();
}
inline void TunnelStatus::unsafe_arena_set_allocated_hw_handle(
    ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_handle_);
  }
  hw_handle_ = hw_handle;
  if (hw_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.TunnelStatus.hw_handle)
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* TunnelStatus::release_hw_handle() {
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = hw_handle_;
  hw_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* TunnelStatus::unsafe_arena_release_hw_handle() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.TunnelStatus.hw_handle)
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = hw_handle_;
  hw_handle_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* TunnelStatus::_internal_mutable_hw_handle() {
  
  if (hw_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::HwHandle>(GetArenaForAllocation());
    hw_handle_ = p;
  }
  return hw_handle_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* TunnelStatus::mutable_hw_handle() {
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _msg = _internal_mutable_hw_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.TunnelStatus.hw_handle)
  return _msg;
}
inline void TunnelStatus::set_allocated_hw_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_handle_);
  }
  if (hw_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_handle));
    if (message_arena != submessage_arena) {
      hw_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hw_handle, submessage_arena);
    }
    
  } else {
    
  }
  hw_handle_ = hw_handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.TunnelStatus.hw_handle)
}

// int32 vnic_count = 2;
inline void TunnelStatus::clear_vnic_count() {
  vnic_count_ = 0;
}
inline int32_t TunnelStatus::_internal_vnic_count() const {
  return vnic_count_;
}
inline int32_t TunnelStatus::vnic_count() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.TunnelStatus.vnic_count)
  return _internal_vnic_count();
}
inline void TunnelStatus::_internal_set_vnic_count(int32_t value) {
  
  vnic_count_ = value;
}
inline void TunnelStatus::set_vnic_count(int32_t value) {
  _internal_set_vnic_count(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.TunnelStatus.vnic_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::TunnelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::TunnelType>() {
  return ::opi_api::network::cloud::v1alpha1::TunnelType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tunnel_2eproto
