// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vpc.proto

#include "vpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
constexpr Vpc::Vpc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , status_(nullptr){}
struct VpcDefaultTypeInternal {
  constexpr VpcDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VpcDefaultTypeInternal() {}
  union {
    Vpc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VpcDefaultTypeInternal _Vpc_default_instance_;
constexpr VpcSpec::VpcSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ingress_v4_security_policy_id_()
  , ingress_v6_security_policy_id_()
  , egress_v4_security_policy_id_()
  , egress_v6_security_policy_id_()
  , virtual_router_mac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , v4_route_table_id_(nullptr)
  , v6_route_table_id_(nullptr)
  , fabric_encap_(nullptr)
  , type_(0)

  , tos_(0){}
struct VpcSpecDefaultTypeInternal {
  constexpr VpcSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VpcSpecDefaultTypeInternal() {}
  union {
    VpcSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VpcSpecDefaultTypeInternal _VpcSpec_default_instance_;
constexpr VpcStatus::VpcStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hw_handle_(nullptr)
  , bd_hw_handle_(nullptr)
  , subnet_count_(0){}
struct VpcStatusDefaultTypeInternal {
  constexpr VpcStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VpcStatusDefaultTypeInternal() {}
  union {
    VpcStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VpcStatusDefaultTypeInternal _VpcStatus_default_instance_;
constexpr VPCPeer::VPCPeer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , status_(nullptr){}
struct VPCPeerDefaultTypeInternal {
  constexpr VPCPeerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VPCPeerDefaultTypeInternal() {}
  union {
    VPCPeer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VPCPeerDefaultTypeInternal _VPCPeer_default_instance_;
constexpr VPCPeerSpec::VPCPeerSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , vpc1_id_(nullptr)
  , vpc2_id_(nullptr){}
struct VPCPeerSpecDefaultTypeInternal {
  constexpr VPCPeerSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VPCPeerSpecDefaultTypeInternal() {}
  union {
    VPCPeerSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VPCPeerSpecDefaultTypeInternal _VPCPeerSpec_default_instance_;
constexpr VPCPeerStatus::VPCPeerStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct VPCPeerStatusDefaultTypeInternal {
  constexpr VPCPeerStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VPCPeerStatusDefaultTypeInternal() {}
  union {
    VPCPeerStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VPCPeerStatusDefaultTypeInternal _VPCPeerStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vpc_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vpc_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vpc_2eproto = nullptr;

const uint32_t TableStruct_vpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Vpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Vpc, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Vpc, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, v4_route_table_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, v6_route_table_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, ingress_v4_security_policy_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, ingress_v6_security_policy_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, egress_v4_security_policy_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, egress_v6_security_policy_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, virtual_router_mac_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, fabric_encap_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcSpec, tos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcStatus, hw_handle_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcStatus, bd_hw_handle_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VpcStatus, subnet_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeer, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeer, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeerSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeerSpec, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeerSpec, vpc1_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeerSpec, vpc2_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::Vpc)},
  { 8, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::VpcSpec)},
  { 25, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::VpcStatus)},
  { 34, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::VPCPeer)},
  { 42, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::VPCPeerSpec)},
  { 51, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::VPCPeerStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_Vpc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_VpcSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_VpcStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_VPCPeer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_VPCPeerSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_VPCPeerStatus_default_instance_),
};

const char descriptor_table_protodef_vpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tvpc.proto\022\036opi_api.network.cloud.v1alp"
  "ha1\032\020object_key.proto\032\022networktypes.prot"
  "o\"w\n\003Vpc\0225\n\004spec\030\001 \001(\0132\'.opi_api.network"
  ".cloud.v1alpha1.VpcSpec\0229\n\006status\030\002 \001(\0132"
  ").opi_api.network.cloud.v1alpha1.VpcStat"
  "us\"\333\004\n\007VpcSpec\022(\n\002id\030\001 \001(\0132\034.opi_api.com"
  "mon.v1.ObjectKey\0225\n\004type\030\002 \001(\0162\'.opi_api"
  ".network.cloud.v1alpha1.VPCType\0227\n\021v4_ro"
  "ute_table_id\030\003 \001(\0132\034.opi_api.common.v1.O"
  "bjectKey\0227\n\021v6_route_table_id\030\004 \001(\0132\034.op"
  "i_api.common.v1.ObjectKey\022C\n\035ingress_v4_"
  "security_policy_id\030\005 \003(\0132\034.opi_api.commo"
  "n.v1.ObjectKey\022C\n\035ingress_v6_security_po"
  "licy_id\030\006 \003(\0132\034.opi_api.common.v1.Object"
  "Key\022B\n\034egress_v4_security_policy_id\030\007 \003("
  "\0132\034.opi_api.common.v1.ObjectKey\022B\n\034egres"
  "s_v6_security_policy_id\030\010 \003(\0132\034.opi_api."
  "common.v1.ObjectKey\022\032\n\022virtual_router_ma"
  "c\030\t \001(\014\022B\n\014fabric_encap\030\n \001(\0132,.opi_api."
  "network.opinetcommon.v1alpha1.Encap\022\013\n\003t"
  "os\030\r \001(\005\"\254\001\n\tVpcStatus\022B\n\thw_handle\030\001 \001("
  "\0132/.opi_api.network.opinetcommon.v1alpha"
  "1.HwHandle\022E\n\014bd_hw_handle\030\002 \001(\0132/.opi_a"
  "pi.network.opinetcommon.v1alpha1.HwHandl"
  "e\022\024\n\014subnet_count\030\003 \001(\005\"\203\001\n\007VPCPeer\0229\n\004s"
  "pec\030\001 \001(\0132+.opi_api.network.cloud.v1alph"
  "a1.VPCPeerSpec\022=\n\006status\030\002 \001(\0132-.opi_api"
  ".network.cloud.v1alpha1.VPCPeerStatus\"\225\001"
  "\n\013VPCPeerSpec\022(\n\002id\030\001 \001(\0132\034.opi_api.comm"
  "on.v1.ObjectKey\022-\n\007vpc1_id\030\002 \001(\0132\034.opi_a"
  "pi.common.v1.ObjectKey\022-\n\007vpc2_id\030\003 \001(\0132"
  "\034.opi_api.common.v1.ObjectKey\"\017\n\rVPCPeer"
  "Status*e\n\007VPCType\022\030\n\024VPC_TYPE_UNSPECIFIE"
  "D\020\000\022\025\n\021VPC_TYPE_UNDERLAY\020\001\022\023\n\017VPC_TYPE_T"
  "ENANT\020\002\022\024\n\020VPC_TYPE_CONTROL\020\003Bi\n\036opi_api"
  ".network.cloud.v1alpha1B\010VpcProtoP\001Z;git"
  "hub.com/opiproject/opi-api/network/cloud"
  "/v1alpha1/gen/gob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vpc_2eproto_deps[2] = {
  &::descriptor_table_networktypes_2eproto,
  &::descriptor_table_object_5fkey_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vpc_2eproto = {
  false, false, 1504, descriptor_table_protodef_vpc_2eproto, "vpc.proto", 
  &descriptor_table_vpc_2eproto_once, descriptor_table_vpc_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_vpc_2eproto::offsets,
  file_level_metadata_vpc_2eproto, file_level_enum_descriptors_vpc_2eproto, file_level_service_descriptors_vpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_vpc_2eproto_getter() {
  return &descriptor_table_vpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_vpc_2eproto(&descriptor_table_vpc_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VPCType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vpc_2eproto);
  return file_level_enum_descriptors_vpc_2eproto[0];
}
bool VPCType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Vpc::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::VpcSpec& spec(const Vpc* msg);
  static const ::opi_api::network::cloud::v1alpha1::VpcStatus& status(const Vpc* msg);
};

const ::opi_api::network::cloud::v1alpha1::VpcSpec&
Vpc::_Internal::spec(const Vpc* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::VpcStatus&
Vpc::_Internal::status(const Vpc* msg) {
  return *msg->status_;
}
Vpc::Vpc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.Vpc)
}
Vpc::Vpc(const Vpc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::VpcSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::cloud::v1alpha1::VpcStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.Vpc)
}

inline void Vpc::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

Vpc::~Vpc() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.Vpc)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vpc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void Vpc::ArenaDtor(void* object) {
  Vpc* _this = reinterpret_cast< Vpc* >(object);
  (void)_this;
}
void Vpc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vpc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vpc::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.Vpc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vpc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.VpcSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.VpcStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vpc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.Vpc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.VpcSpec spec = 1;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.VpcStatus status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.Vpc)
  return target;
}

size_t Vpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.Vpc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.VpcSpec spec = 1;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.VpcStatus status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vpc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vpc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vpc::GetClassData() const { return &_class_data_; }

void Vpc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vpc *>(to)->MergeFrom(
      static_cast<const Vpc &>(from));
}


void Vpc::MergeFrom(const Vpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.Vpc)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::VpcSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::cloud::v1alpha1::VpcStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vpc::CopyFrom(const Vpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.Vpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vpc::IsInitialized() const {
  return true;
}

void Vpc::InternalSwap(Vpc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vpc, status_)
      + sizeof(Vpc::status_)
      - PROTOBUF_FIELD_OFFSET(Vpc, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vpc::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vpc_2eproto_getter, &descriptor_table_vpc_2eproto_once,
      file_level_metadata_vpc_2eproto[0]);
}

// ===================================================================

class VpcSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const VpcSpec* msg);
  static const ::opi_api::common::v1::ObjectKey& v4_route_table_id(const VpcSpec* msg);
  static const ::opi_api::common::v1::ObjectKey& v6_route_table_id(const VpcSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::Encap& fabric_encap(const VpcSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
VpcSpec::_Internal::id(const VpcSpec* msg) {
  return *msg->id_;
}
const ::opi_api::common::v1::ObjectKey&
VpcSpec::_Internal::v4_route_table_id(const VpcSpec* msg) {
  return *msg->v4_route_table_id_;
}
const ::opi_api::common::v1::ObjectKey&
VpcSpec::_Internal::v6_route_table_id(const VpcSpec* msg) {
  return *msg->v6_route_table_id_;
}
const ::opi_api::network::opinetcommon::v1alpha1::Encap&
VpcSpec::_Internal::fabric_encap(const VpcSpec* msg) {
  return *msg->fabric_encap_;
}
void VpcSpec::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void VpcSpec::clear_v4_route_table_id() {
  if (GetArenaForAllocation() == nullptr && v4_route_table_id_ != nullptr) {
    delete v4_route_table_id_;
  }
  v4_route_table_id_ = nullptr;
}
void VpcSpec::clear_v6_route_table_id() {
  if (GetArenaForAllocation() == nullptr && v6_route_table_id_ != nullptr) {
    delete v6_route_table_id_;
  }
  v6_route_table_id_ = nullptr;
}
void VpcSpec::clear_ingress_v4_security_policy_id() {
  ingress_v4_security_policy_id_.Clear();
}
void VpcSpec::clear_ingress_v6_security_policy_id() {
  ingress_v6_security_policy_id_.Clear();
}
void VpcSpec::clear_egress_v4_security_policy_id() {
  egress_v4_security_policy_id_.Clear();
}
void VpcSpec::clear_egress_v6_security_policy_id() {
  egress_v6_security_policy_id_.Clear();
}
void VpcSpec::clear_fabric_encap() {
  if (GetArenaForAllocation() == nullptr && fabric_encap_ != nullptr) {
    delete fabric_encap_;
  }
  fabric_encap_ = nullptr;
}
VpcSpec::VpcSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ingress_v4_security_policy_id_(arena),
  ingress_v6_security_policy_id_(arena),
  egress_v4_security_policy_id_(arena),
  egress_v6_security_policy_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.VpcSpec)
}
VpcSpec::VpcSpec(const VpcSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ingress_v4_security_policy_id_(from.ingress_v4_security_policy_id_),
      ingress_v6_security_policy_id_(from.ingress_v6_security_policy_id_),
      egress_v4_security_policy_id_(from.egress_v4_security_policy_id_),
      egress_v6_security_policy_id_(from.egress_v6_security_policy_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  virtual_router_mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    virtual_router_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_virtual_router_mac().empty()) {
    virtual_router_mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_virtual_router_mac(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_v4_route_table_id()) {
    v4_route_table_id_ = new ::opi_api::common::v1::ObjectKey(*from.v4_route_table_id_);
  } else {
    v4_route_table_id_ = nullptr;
  }
  if (from._internal_has_v6_route_table_id()) {
    v6_route_table_id_ = new ::opi_api::common::v1::ObjectKey(*from.v6_route_table_id_);
  } else {
    v6_route_table_id_ = nullptr;
  }
  if (from._internal_has_fabric_encap()) {
    fabric_encap_ = new ::opi_api::network::opinetcommon::v1alpha1::Encap(*from.fabric_encap_);
  } else {
    fabric_encap_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&tos_) -
    reinterpret_cast<char*>(&type_)) + sizeof(tos_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.VpcSpec)
}

inline void VpcSpec::SharedCtor() {
virtual_router_mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  virtual_router_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tos_) -
    reinterpret_cast<char*>(&id_)) + sizeof(tos_));
}

VpcSpec::~VpcSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.VpcSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VpcSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  virtual_router_mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete v4_route_table_id_;
  if (this != internal_default_instance()) delete v6_route_table_id_;
  if (this != internal_default_instance()) delete fabric_encap_;
}

void VpcSpec::ArenaDtor(void* object) {
  VpcSpec* _this = reinterpret_cast< VpcSpec* >(object);
  (void)_this;
}
void VpcSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VpcSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VpcSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.VpcSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ingress_v4_security_policy_id_.Clear();
  ingress_v6_security_policy_id_.Clear();
  egress_v4_security_policy_id_.Clear();
  egress_v6_security_policy_id_.Clear();
  virtual_router_mac_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && v4_route_table_id_ != nullptr) {
    delete v4_route_table_id_;
  }
  v4_route_table_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && v6_route_table_id_ != nullptr) {
    delete v6_route_table_id_;
  }
  v6_route_table_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fabric_encap_ != nullptr) {
    delete fabric_encap_;
  }
  fabric_encap_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tos_) -
      reinterpret_cast<char*>(&type_)) + sizeof(tos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VpcSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.VPCType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::cloud::v1alpha1::VPCType>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey v4_route_table_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_v4_route_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey v6_route_table_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_v6_route_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.common.v1.ObjectKey ingress_v4_security_policy_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ingress_v4_security_policy_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ingress_v6_security_policy_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_egress_v4_security_policy_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_egress_v6_security_policy_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes virtual_router_mac = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_virtual_router_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_fabric_encap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tos = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          tos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VpcSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.VpcSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.VPCType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .opi_api.common.v1.ObjectKey v4_route_table_id = 3;
  if (this->_internal_has_v4_route_table_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::v4_route_table_id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey v6_route_table_id = 4;
  if (this->_internal_has_v6_route_table_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::v6_route_table_id(this), target, stream);
  }

  // repeated .opi_api.common.v1.ObjectKey ingress_v4_security_policy_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ingress_v4_security_policy_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ingress_v4_security_policy_id(i), target, stream);
  }

  // repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ingress_v6_security_policy_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_ingress_v6_security_policy_id(i), target, stream);
  }

  // repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_egress_v4_security_policy_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_egress_v4_security_policy_id(i), target, stream);
  }

  // repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_egress_v6_security_policy_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_egress_v6_security_policy_id(i), target, stream);
  }

  // bytes virtual_router_mac = 9;
  if (!this->_internal_virtual_router_mac().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_virtual_router_mac(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 10;
  if (this->_internal_has_fabric_encap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::fabric_encap(this), target, stream);
  }

  // int32 tos = 13;
  if (this->_internal_tos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_tos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.VpcSpec)
  return target;
}

size_t VpcSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.VpcSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.common.v1.ObjectKey ingress_v4_security_policy_id = 5;
  total_size += 1UL * this->_internal_ingress_v4_security_policy_id_size();
  for (const auto& msg : this->ingress_v4_security_policy_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 6;
  total_size += 1UL * this->_internal_ingress_v6_security_policy_id_size();
  for (const auto& msg : this->ingress_v6_security_policy_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 7;
  total_size += 1UL * this->_internal_egress_v4_security_policy_id_size();
  for (const auto& msg : this->egress_v4_security_policy_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 8;
  total_size += 1UL * this->_internal_egress_v6_security_policy_id_size();
  for (const auto& msg : this->egress_v6_security_policy_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes virtual_router_mac = 9;
  if (!this->_internal_virtual_router_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_virtual_router_mac());
  }

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .opi_api.common.v1.ObjectKey v4_route_table_id = 3;
  if (this->_internal_has_v4_route_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *v4_route_table_id_);
  }

  // .opi_api.common.v1.ObjectKey v6_route_table_id = 4;
  if (this->_internal_has_v6_route_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *v6_route_table_id_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 10;
  if (this->_internal_has_fabric_encap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fabric_encap_);
  }

  // .opi_api.network.cloud.v1alpha1.VPCType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 tos = 13;
  if (this->_internal_tos() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VpcSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VpcSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VpcSpec::GetClassData() const { return &_class_data_; }

void VpcSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VpcSpec *>(to)->MergeFrom(
      static_cast<const VpcSpec &>(from));
}


void VpcSpec::MergeFrom(const VpcSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.VpcSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ingress_v4_security_policy_id_.MergeFrom(from.ingress_v4_security_policy_id_);
  ingress_v6_security_policy_id_.MergeFrom(from.ingress_v6_security_policy_id_);
  egress_v4_security_policy_id_.MergeFrom(from.egress_v4_security_policy_id_);
  egress_v6_security_policy_id_.MergeFrom(from.egress_v6_security_policy_id_);
  if (!from._internal_virtual_router_mac().empty()) {
    _internal_set_virtual_router_mac(from._internal_virtual_router_mac());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_has_v4_route_table_id()) {
    _internal_mutable_v4_route_table_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_v4_route_table_id());
  }
  if (from._internal_has_v6_route_table_id()) {
    _internal_mutable_v6_route_table_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_v6_route_table_id());
  }
  if (from._internal_has_fabric_encap()) {
    _internal_mutable_fabric_encap()->::opi_api::network::opinetcommon::v1alpha1::Encap::MergeFrom(from._internal_fabric_encap());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_tos() != 0) {
    _internal_set_tos(from._internal_tos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VpcSpec::CopyFrom(const VpcSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.VpcSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VpcSpec::IsInitialized() const {
  return true;
}

void VpcSpec::InternalSwap(VpcSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ingress_v4_security_policy_id_.InternalSwap(&other->ingress_v4_security_policy_id_);
  ingress_v6_security_policy_id_.InternalSwap(&other->ingress_v6_security_policy_id_);
  egress_v4_security_policy_id_.InternalSwap(&other->egress_v4_security_policy_id_);
  egress_v6_security_policy_id_.InternalSwap(&other->egress_v6_security_policy_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &virtual_router_mac_, lhs_arena,
      &other->virtual_router_mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VpcSpec, tos_)
      + sizeof(VpcSpec::tos_)
      - PROTOBUF_FIELD_OFFSET(VpcSpec, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VpcSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vpc_2eproto_getter, &descriptor_table_vpc_2eproto_once,
      file_level_metadata_vpc_2eproto[1]);
}

// ===================================================================

class VpcStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& hw_handle(const VpcStatus* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& bd_hw_handle(const VpcStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&
VpcStatus::_Internal::hw_handle(const VpcStatus* msg) {
  return *msg->hw_handle_;
}
const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&
VpcStatus::_Internal::bd_hw_handle(const VpcStatus* msg) {
  return *msg->bd_hw_handle_;
}
void VpcStatus::clear_hw_handle() {
  if (GetArenaForAllocation() == nullptr && hw_handle_ != nullptr) {
    delete hw_handle_;
  }
  hw_handle_ = nullptr;
}
void VpcStatus::clear_bd_hw_handle() {
  if (GetArenaForAllocation() == nullptr && bd_hw_handle_ != nullptr) {
    delete bd_hw_handle_;
  }
  bd_hw_handle_ = nullptr;
}
VpcStatus::VpcStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.VpcStatus)
}
VpcStatus::VpcStatus(const VpcStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hw_handle()) {
    hw_handle_ = new ::opi_api::network::opinetcommon::v1alpha1::HwHandle(*from.hw_handle_);
  } else {
    hw_handle_ = nullptr;
  }
  if (from._internal_has_bd_hw_handle()) {
    bd_hw_handle_ = new ::opi_api::network::opinetcommon::v1alpha1::HwHandle(*from.bd_hw_handle_);
  } else {
    bd_hw_handle_ = nullptr;
  }
  subnet_count_ = from.subnet_count_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.VpcStatus)
}

inline void VpcStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hw_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subnet_count_) -
    reinterpret_cast<char*>(&hw_handle_)) + sizeof(subnet_count_));
}

VpcStatus::~VpcStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.VpcStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VpcStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hw_handle_;
  if (this != internal_default_instance()) delete bd_hw_handle_;
}

void VpcStatus::ArenaDtor(void* object) {
  VpcStatus* _this = reinterpret_cast< VpcStatus* >(object);
  (void)_this;
}
void VpcStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VpcStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VpcStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.VpcStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hw_handle_ != nullptr) {
    delete hw_handle_;
  }
  hw_handle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bd_hw_handle_ != nullptr) {
    delete bd_hw_handle_;
  }
  bd_hw_handle_ = nullptr;
  subnet_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VpcStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hw_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.HwHandle bd_hw_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bd_hw_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 subnet_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          subnet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VpcStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.VpcStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
  if (this->_internal_has_hw_handle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hw_handle(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle bd_hw_handle = 2;
  if (this->_internal_has_bd_hw_handle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bd_hw_handle(this), target, stream);
  }

  // int32 subnet_count = 3;
  if (this->_internal_subnet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_subnet_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.VpcStatus)
  return target;
}

size_t VpcStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.VpcStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
  if (this->_internal_has_hw_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hw_handle_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle bd_hw_handle = 2;
  if (this->_internal_has_bd_hw_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bd_hw_handle_);
  }

  // int32 subnet_count = 3;
  if (this->_internal_subnet_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_subnet_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VpcStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VpcStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VpcStatus::GetClassData() const { return &_class_data_; }

void VpcStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VpcStatus *>(to)->MergeFrom(
      static_cast<const VpcStatus &>(from));
}


void VpcStatus::MergeFrom(const VpcStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.VpcStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hw_handle()) {
    _internal_mutable_hw_handle()->::opi_api::network::opinetcommon::v1alpha1::HwHandle::MergeFrom(from._internal_hw_handle());
  }
  if (from._internal_has_bd_hw_handle()) {
    _internal_mutable_bd_hw_handle()->::opi_api::network::opinetcommon::v1alpha1::HwHandle::MergeFrom(from._internal_bd_hw_handle());
  }
  if (from._internal_subnet_count() != 0) {
    _internal_set_subnet_count(from._internal_subnet_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VpcStatus::CopyFrom(const VpcStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.VpcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VpcStatus::IsInitialized() const {
  return true;
}

void VpcStatus::InternalSwap(VpcStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VpcStatus, subnet_count_)
      + sizeof(VpcStatus::subnet_count_)
      - PROTOBUF_FIELD_OFFSET(VpcStatus, hw_handle_)>(
          reinterpret_cast<char*>(&hw_handle_),
          reinterpret_cast<char*>(&other->hw_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VpcStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vpc_2eproto_getter, &descriptor_table_vpc_2eproto_once,
      file_level_metadata_vpc_2eproto[2]);
}

// ===================================================================

class VPCPeer::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::VPCPeerSpec& spec(const VPCPeer* msg);
  static const ::opi_api::network::cloud::v1alpha1::VPCPeerStatus& status(const VPCPeer* msg);
};

const ::opi_api::network::cloud::v1alpha1::VPCPeerSpec&
VPCPeer::_Internal::spec(const VPCPeer* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::VPCPeerStatus&
VPCPeer::_Internal::status(const VPCPeer* msg) {
  return *msg->status_;
}
VPCPeer::VPCPeer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.VPCPeer)
}
VPCPeer::VPCPeer(const VPCPeer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::VPCPeerSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::cloud::v1alpha1::VPCPeerStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.VPCPeer)
}

inline void VPCPeer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

VPCPeer::~VPCPeer() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.VPCPeer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VPCPeer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void VPCPeer::ArenaDtor(void* object) {
  VPCPeer* _this = reinterpret_cast< VPCPeer* >(object);
  (void)_this;
}
void VPCPeer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VPCPeer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VPCPeer::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.VPCPeer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VPCPeer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.VPCPeerSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.VPCPeerStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VPCPeer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.VPCPeer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.VPCPeerSpec spec = 1;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.VPCPeerStatus status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.VPCPeer)
  return target;
}

size_t VPCPeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.VPCPeer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.VPCPeerSpec spec = 1;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.VPCPeerStatus status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VPCPeer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VPCPeer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VPCPeer::GetClassData() const { return &_class_data_; }

void VPCPeer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VPCPeer *>(to)->MergeFrom(
      static_cast<const VPCPeer &>(from));
}


void VPCPeer::MergeFrom(const VPCPeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.VPCPeer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::VPCPeerSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::cloud::v1alpha1::VPCPeerStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VPCPeer::CopyFrom(const VPCPeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.VPCPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VPCPeer::IsInitialized() const {
  return true;
}

void VPCPeer::InternalSwap(VPCPeer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VPCPeer, status_)
      + sizeof(VPCPeer::status_)
      - PROTOBUF_FIELD_OFFSET(VPCPeer, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VPCPeer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vpc_2eproto_getter, &descriptor_table_vpc_2eproto_once,
      file_level_metadata_vpc_2eproto[3]);
}

// ===================================================================

class VPCPeerSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const VPCPeerSpec* msg);
  static const ::opi_api::common::v1::ObjectKey& vpc1_id(const VPCPeerSpec* msg);
  static const ::opi_api::common::v1::ObjectKey& vpc2_id(const VPCPeerSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
VPCPeerSpec::_Internal::id(const VPCPeerSpec* msg) {
  return *msg->id_;
}
const ::opi_api::common::v1::ObjectKey&
VPCPeerSpec::_Internal::vpc1_id(const VPCPeerSpec* msg) {
  return *msg->vpc1_id_;
}
const ::opi_api::common::v1::ObjectKey&
VPCPeerSpec::_Internal::vpc2_id(const VPCPeerSpec* msg) {
  return *msg->vpc2_id_;
}
void VPCPeerSpec::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void VPCPeerSpec::clear_vpc1_id() {
  if (GetArenaForAllocation() == nullptr && vpc1_id_ != nullptr) {
    delete vpc1_id_;
  }
  vpc1_id_ = nullptr;
}
void VPCPeerSpec::clear_vpc2_id() {
  if (GetArenaForAllocation() == nullptr && vpc2_id_ != nullptr) {
    delete vpc2_id_;
  }
  vpc2_id_ = nullptr;
}
VPCPeerSpec::VPCPeerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
}
VPCPeerSpec::VPCPeerSpec(const VPCPeerSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_vpc1_id()) {
    vpc1_id_ = new ::opi_api::common::v1::ObjectKey(*from.vpc1_id_);
  } else {
    vpc1_id_ = nullptr;
  }
  if (from._internal_has_vpc2_id()) {
    vpc2_id_ = new ::opi_api::common::v1::ObjectKey(*from.vpc2_id_);
  } else {
    vpc2_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
}

inline void VPCPeerSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vpc2_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(vpc2_id_));
}

VPCPeerSpec::~VPCPeerSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VPCPeerSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete vpc1_id_;
  if (this != internal_default_instance()) delete vpc2_id_;
}

void VPCPeerSpec::ArenaDtor(void* object) {
  VPCPeerSpec* _this = reinterpret_cast< VPCPeerSpec* >(object);
  (void)_this;
}
void VPCPeerSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VPCPeerSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VPCPeerSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && vpc1_id_ != nullptr) {
    delete vpc1_id_;
  }
  vpc1_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && vpc2_id_ != nullptr) {
    delete vpc2_id_;
  }
  vpc2_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VPCPeerSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey vpc1_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpc1_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey vpc2_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpc2_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VPCPeerSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey vpc1_id = 2;
  if (this->_internal_has_vpc1_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vpc1_id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey vpc2_id = 3;
  if (this->_internal_has_vpc2_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vpc2_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
  return target;
}

size_t VPCPeerSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .opi_api.common.v1.ObjectKey vpc1_id = 2;
  if (this->_internal_has_vpc1_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vpc1_id_);
  }

  // .opi_api.common.v1.ObjectKey vpc2_id = 3;
  if (this->_internal_has_vpc2_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vpc2_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VPCPeerSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VPCPeerSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VPCPeerSpec::GetClassData() const { return &_class_data_; }

void VPCPeerSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VPCPeerSpec *>(to)->MergeFrom(
      static_cast<const VPCPeerSpec &>(from));
}


void VPCPeerSpec::MergeFrom(const VPCPeerSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_has_vpc1_id()) {
    _internal_mutable_vpc1_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_vpc1_id());
  }
  if (from._internal_has_vpc2_id()) {
    _internal_mutable_vpc2_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_vpc2_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VPCPeerSpec::CopyFrom(const VPCPeerSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VPCPeerSpec::IsInitialized() const {
  return true;
}

void VPCPeerSpec::InternalSwap(VPCPeerSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VPCPeerSpec, vpc2_id_)
      + sizeof(VPCPeerSpec::vpc2_id_)
      - PROTOBUF_FIELD_OFFSET(VPCPeerSpec, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VPCPeerSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vpc_2eproto_getter, &descriptor_table_vpc_2eproto_once,
      file_level_metadata_vpc_2eproto[4]);
}

// ===================================================================

class VPCPeerStatus::_Internal {
 public:
};

VPCPeerStatus::VPCPeerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.VPCPeerStatus)
}
VPCPeerStatus::VPCPeerStatus(const VPCPeerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.VPCPeerStatus)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VPCPeerStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VPCPeerStatus::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata VPCPeerStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vpc_2eproto_getter, &descriptor_table_vpc_2eproto_once,
      file_level_metadata_vpc_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::Vpc* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::Vpc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::Vpc >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::VpcSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::VpcSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::VpcSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::VpcStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::VpcStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::VpcStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::VPCPeer* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::VPCPeer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::VPCPeer >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::VPCPeerSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::VPCPeerSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::VPCPeerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::VPCPeerStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
