// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nexthop.proto

#include "nexthop.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
constexpr NextHop::NextHop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , status_(nullptr){}
struct NextHopDefaultTypeInternal {
  constexpr NextHopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NextHopDefaultTypeInternal() {}
  union {
    NextHop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NextHopDefaultTypeInternal _NextHop_default_instance_;
constexpr NextHopSpec::NextHopSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , _oneof_case_{}{}
struct NextHopSpecDefaultTypeInternal {
  constexpr NextHopSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NextHopSpecDefaultTypeInternal() {}
  union {
    NextHopSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NextHopSpecDefaultTypeInternal _NextHopSpec_default_instance_;
constexpr UnderlayNextHopSpec::UnderlayNextHopSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : underlay_nh_mac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , l3_interface_id_(nullptr){}
struct UnderlayNextHopSpecDefaultTypeInternal {
  constexpr UnderlayNextHopSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnderlayNextHopSpecDefaultTypeInternal() {}
  union {
    UnderlayNextHopSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnderlayNextHopSpecDefaultTypeInternal _UnderlayNextHopSpec_default_instance_;
constexpr OverlayNextHopSpec::OverlayNextHopSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tunnel_id_(nullptr){}
struct OverlayNextHopSpecDefaultTypeInternal {
  constexpr OverlayNextHopSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OverlayNextHopSpecDefaultTypeInternal() {}
  union {
    OverlayNextHopSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OverlayNextHopSpecDefaultTypeInternal _OverlayNextHopSpec_default_instance_;
constexpr IPNextHopSpec::IPNextHopSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vpc_id_(nullptr)
  , ip_address_(nullptr)
  , vlan_(0){}
struct IPNextHopSpecDefaultTypeInternal {
  constexpr IPNextHopSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IPNextHopSpecDefaultTypeInternal() {}
  union {
    IPNextHopSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IPNextHopSpecDefaultTypeInternal _IPNextHopSpec_default_instance_;
constexpr NextHopStatus::NextHopStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hw_handle_(nullptr)
  , _oneof_case_{}{}
struct NextHopStatusDefaultTypeInternal {
  constexpr NextHopStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NextHopStatusDefaultTypeInternal() {}
  union {
    NextHopStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NextHopStatusDefaultTypeInternal _NextHopStatus_default_instance_;
constexpr UnderlayNextHopStatus::UnderlayNextHopStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_(0)
  , vlan_(0){}
struct UnderlayNextHopStatusDefaultTypeInternal {
  constexpr UnderlayNextHopStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnderlayNextHopStatusDefaultTypeInternal() {}
  union {
    UnderlayNextHopStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnderlayNextHopStatusDefaultTypeInternal _UnderlayNextHopStatus_default_instance_;
constexpr OverlayNextHopStatus::OverlayNextHopStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tunnel_ip_(nullptr){}
struct OverlayNextHopStatusDefaultTypeInternal {
  constexpr OverlayNextHopStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OverlayNextHopStatusDefaultTypeInternal() {}
  union {
    OverlayNextHopStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OverlayNextHopStatusDefaultTypeInternal _OverlayNextHopStatus_default_instance_;
constexpr NextHopLookup::NextHopLookup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct NextHopLookupDefaultTypeInternal {
  constexpr NextHopLookupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NextHopLookupDefaultTypeInternal() {}
  union {
    NextHopLookup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NextHopLookupDefaultTypeInternal _NextHopLookup_default_instance_;
constexpr NextHopGroup::NextHopGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , status_(nullptr){}
struct NextHopGroupDefaultTypeInternal {
  constexpr NextHopGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NextHopGroupDefaultTypeInternal() {}
  union {
    NextHopGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NextHopGroupDefaultTypeInternal _NextHopGroup_default_instance_;
constexpr NextHopGroupSpec::NextHopGroupSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , id_(nullptr)
  , type_(0)
{}
struct NextHopGroupSpecDefaultTypeInternal {
  constexpr NextHopGroupSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NextHopGroupSpecDefaultTypeInternal() {}
  union {
    NextHopGroupSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NextHopGroupSpecDefaultTypeInternal _NextHopGroupSpec_default_instance_;
constexpr NextHopGroupStatus::NextHopGroupStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , hw_handle_(nullptr){}
struct NextHopGroupStatusDefaultTypeInternal {
  constexpr NextHopGroupStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NextHopGroupStatusDefaultTypeInternal() {}
  union {
    NextHopGroupStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NextHopGroupStatusDefaultTypeInternal _NextHopGroupStatus_default_instance_;
constexpr NextHopGroupLookup::NextHopGroupLookup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct NextHopGroupLookupDefaultTypeInternal {
  constexpr NextHopGroupLookupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NextHopGroupLookupDefaultTypeInternal() {}
  union {
    NextHopGroupLookup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NextHopGroupLookupDefaultTypeInternal _NextHopGroupLookup_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nexthop_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_nexthop_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nexthop_2eproto = nullptr;

const uint32_t TableStruct_nexthop_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHop, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHop, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopSpec, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopSpec, id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopSpec, nhinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec, l3_interface_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec, underlay_nh_mac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec, tunnel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::IPNextHopSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::IPNextHopSpec, vpc_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::IPNextHopSpec, ip_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::IPNextHopSpec, vlan_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::IPNextHopSpec, mac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopStatus, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopStatus, hw_handle_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopStatus, nhinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus, port_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus, vlan_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus, tunnel_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopLookup, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopLookup, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopLookup, gettype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroup, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroup, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupSpec, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupSpec, type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupSpec, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupStatus, members_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupStatus, hw_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupLookup, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupLookup, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::NextHopGroupLookup, gettype_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHop)},
  { 8, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHopSpec)},
  { 19, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec)},
  { 27, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec)},
  { 34, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::IPNextHopSpec)},
  { 44, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHopStatus)},
  { 54, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus)},
  { 62, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus)},
  { 69, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHopLookup)},
  { 78, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHopGroup)},
  { 86, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHopGroupSpec)},
  { 95, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHopGroupStatus)},
  { 103, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::NextHopGroupLookup)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_NextHop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_NextHopSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_UnderlayNextHopSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_OverlayNextHopSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_IPNextHopSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_NextHopStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_UnderlayNextHopStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_OverlayNextHopStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_NextHopLookup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_NextHopGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_NextHopGroupSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_NextHopGroupStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_NextHopGroupLookup_default_instance_),
};

const char descriptor_table_protodef_nexthop_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rnexthop.proto\022\036opi_api.network.cloud.v"
  "1alpha1\032\020object_key.proto\032\022networktypes."
  "proto\"\203\001\n\007NextHop\0229\n\004spec\030\001 \001(\0132+.opi_ap"
  "i.network.cloud.v1alpha1.NextHopSpec\022=\n\006"
  "status\030\002 \001(\0132-.opi_api.network.cloud.v1a"
  "lpha1.NextHopStatus\"\246\002\n\013NextHopSpec\022(\n\002i"
  "d\030\001 \001(\0132\034.opi_api.common.v1.ObjectKey\022M\n"
  "\017overlay_nh_info\030\002 \001(\01322.opi_api.network"
  ".cloud.v1alpha1.OverlayNextHopSpecH\000\022O\n\020"
  "underlay_nh_info\030\003 \001(\01323.opi_api.network"
  ".cloud.v1alpha1.UnderlayNextHopSpecH\000\022C\n"
  "\nip_nh_info\030\004 \001(\0132-.opi_api.network.clou"
  "d.v1alpha1.IPNextHopSpecH\000B\010\n\006nhinfo\"e\n\023"
  "UnderlayNextHopSpec\0225\n\017l3_interface_id\030\001"
  " \001(\0132\034.opi_api.common.v1.ObjectKey\022\027\n\017un"
  "derlay_nh_mac\030\002 \001(\014\"E\n\022OverlayNextHopSpe"
  "c\022/\n\ttunnel_id\030\001 \001(\0132\034.opi_api.common.v1"
  ".ObjectKey\"\236\001\n\rIPNextHopSpec\022,\n\006vpc_id\030\001"
  " \001(\0132\034.opi_api.common.v1.ObjectKey\022D\n\nip"
  "_address\030\002 \001(\01320.opi_api.network.opinetc"
  "ommon.v1alpha1.IPAddress\022\014\n\004vlan\030\003 \001(\005\022\013"
  "\n\003mac\030\004 \001(\014\"\201\002\n\rNextHopStatus\022B\n\thw_hand"
  "le\030\001 \001(\0132/.opi_api.network.opinetcommon."
  "v1alpha1.HwHandle\022Q\n\020underlay_nh_info\030\002 "
  "\001(\01325.opi_api.network.cloud.v1alpha1.Und"
  "erlayNextHopStatusH\000\022O\n\017overlay_nh_info\030"
  "\003 \001(\01324.opi_api.network.cloud.v1alpha1.O"
  "verlayNextHopStatusH\000B\010\n\006nhinfo\"3\n\025Under"
  "layNextHopStatus\022\014\n\004port\030\001 \001(\005\022\014\n\004vlan\030\002"
  " \001(\005\"[\n\024OverlayNextHopStatus\022C\n\ttunnel_i"
  "p\030\001 \001(\01320.opi_api.network.opinetcommon.v"
  "1alpha1.IPAddress\"\206\001\n\rNextHopLookup\022;\n\004t"
  "ype\030\001 \001(\0162+.opi_api.network.cloud.v1alph"
  "a1.NextHopTypeH\000\022-\n\005nh_id\030\002 \001(\0132\034.opi_ap"
  "i.common.v1.ObjectKeyH\000B\t\n\007gettype\"\222\001\n\014N"
  "extHopGroup\022>\n\004spec\030\003 \001(\01320.opi_api.netw"
  "ork.cloud.v1alpha1.NextHopGroupSpec\022B\n\006s"
  "tatus\030\004 \001(\01322.opi_api.network.cloud.v1al"
  "pha1.NextHopGroupStatus\"\272\001\n\020NextHopGroup"
  "Spec\022(\n\002id\030\001 \001(\0132\034.opi_api.common.v1.Obj"
  "ectKey\022>\n\004type\030\002 \001(\01620.opi_api.network.c"
  "loud.v1alpha1.NextHopGroupType\022<\n\007member"
  "s\030\003 \003(\0132+.opi_api.network.cloud.v1alpha1"
  ".NextHopSpec\"\230\001\n\022NextHopGroupStatus\022>\n\007m"
  "embers\030\001 \003(\0132-.opi_api.network.cloud.v1a"
  "lpha1.NextHopStatus\022B\n\thw_handle\030\002 \001(\0132/"
  ".opi_api.network.opinetcommon.v1alpha1.H"
  "wHandle\"\215\001\n\022NextHopGroupLookup\022@\n\004type\030\001"
  " \001(\01620.opi_api.network.cloud.v1alpha1.Ne"
  "xtHopGroupTypeH\000\022*\n\002id\030\002 \001(\0132\034.opi_api.c"
  "ommon.v1.ObjectKeyH\000B\t\n\007gettype*y\n\013NextH"
  "opType\022\035\n\031NEXT_HOP_TYPE_UNSPECIFIED\020\000\022\024\n"
  "\020NEXT_HOP_TYPE_IP\020\001\022\032\n\026NEXT_HOP_TYPE_UND"
  "ERLAY\020\002\022\031\n\025NEXT_HOP_TYPE_OVERLAY\020\003*\204\001\n\020N"
  "extHopGroupType\022#\n\037NEXT_HOP_GROUP_TYPE_U"
  "NSPECIFIED\020\000\022$\n NEXT_HOP_GROUP_TYPE_OVER"
  "LAY_ECMP\020\001\022%\n!NEXT_HOP_GROUP_TYPE_UNDERL"
  "AY_ECMP\020\002Bm\n\036opi_api.network.cloud.v1alp"
  "ha1B\014NextHopProtoP\001Z;github.com/opiproje"
  "ct/opi-api/network/cloud/v1alpha1/gen/go"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nexthop_2eproto_deps[2] = {
  &::descriptor_table_networktypes_2eproto,
  &::descriptor_table_object_5fkey_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nexthop_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nexthop_2eproto = {
  false, false, 2408, descriptor_table_protodef_nexthop_2eproto, "nexthop.proto", 
  &descriptor_table_nexthop_2eproto_once, descriptor_table_nexthop_2eproto_deps, 2, 13,
  schemas, file_default_instances, TableStruct_nexthop_2eproto::offsets,
  file_level_metadata_nexthop_2eproto, file_level_enum_descriptors_nexthop_2eproto, file_level_service_descriptors_nexthop_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_nexthop_2eproto_getter() {
  return &descriptor_table_nexthop_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_nexthop_2eproto(&descriptor_table_nexthop_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NextHopType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nexthop_2eproto);
  return file_level_enum_descriptors_nexthop_2eproto[0];
}
bool NextHopType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NextHopGroupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nexthop_2eproto);
  return file_level_enum_descriptors_nexthop_2eproto[1];
}
bool NextHopGroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NextHop::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::NextHopSpec& spec(const NextHop* msg);
  static const ::opi_api::network::cloud::v1alpha1::NextHopStatus& status(const NextHop* msg);
};

const ::opi_api::network::cloud::v1alpha1::NextHopSpec&
NextHop::_Internal::spec(const NextHop* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::NextHopStatus&
NextHop::_Internal::status(const NextHop* msg) {
  return *msg->status_;
}
NextHop::NextHop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHop)
}
NextHop::NextHop(const NextHop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::NextHopSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::cloud::v1alpha1::NextHopStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHop)
}

inline void NextHop::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

NextHop::~NextHop() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHop)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NextHop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void NextHop::ArenaDtor(void* object) {
  NextHop* _this = reinterpret_cast< NextHop* >(object);
  (void)_this;
}
void NextHop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NextHop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NextHop::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.NextHopSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.NextHopStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.NextHopSpec spec = 1;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.NextHopStatus status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHop)
  return target;
}

size_t NextHop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.NextHopSpec spec = 1;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.NextHopStatus status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NextHop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHop::GetClassData() const { return &_class_data_; }

void NextHop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NextHop *>(to)->MergeFrom(
      static_cast<const NextHop &>(from));
}


void NextHop::MergeFrom(const NextHop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHop)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::NextHopSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::cloud::v1alpha1::NextHopStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHop::CopyFrom(const NextHop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHop::IsInitialized() const {
  return true;
}

void NextHop::InternalSwap(NextHop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NextHop, status_)
      + sizeof(NextHop::status_)
      - PROTOBUF_FIELD_OFFSET(NextHop, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHop::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[0]);
}

// ===================================================================

class NextHopSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const NextHopSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec& overlay_nh_info(const NextHopSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec& underlay_nh_info(const NextHopSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::IPNextHopSpec& ip_nh_info(const NextHopSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
NextHopSpec::_Internal::id(const NextHopSpec* msg) {
  return *msg->id_;
}
const ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec&
NextHopSpec::_Internal::overlay_nh_info(const NextHopSpec* msg) {
  return *msg->nhinfo_.overlay_nh_info_;
}
const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec&
NextHopSpec::_Internal::underlay_nh_info(const NextHopSpec* msg) {
  return *msg->nhinfo_.underlay_nh_info_;
}
const ::opi_api::network::cloud::v1alpha1::IPNextHopSpec&
NextHopSpec::_Internal::ip_nh_info(const NextHopSpec* msg) {
  return *msg->nhinfo_.ip_nh_info_;
}
void NextHopSpec::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void NextHopSpec::set_allocated_overlay_nh_info(::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* overlay_nh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nhinfo();
  if (overlay_nh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec>::GetOwningArena(overlay_nh_info);
    if (message_arena != submessage_arena) {
      overlay_nh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlay_nh_info, submessage_arena);
    }
    set_has_overlay_nh_info();
    nhinfo_.overlay_nh_info_ = overlay_nh_info;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopSpec.overlay_nh_info)
}
void NextHopSpec::set_allocated_underlay_nh_info(::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* underlay_nh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nhinfo();
  if (underlay_nh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec>::GetOwningArena(underlay_nh_info);
    if (message_arena != submessage_arena) {
      underlay_nh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlay_nh_info, submessage_arena);
    }
    set_has_underlay_nh_info();
    nhinfo_.underlay_nh_info_ = underlay_nh_info;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopSpec.underlay_nh_info)
}
void NextHopSpec::set_allocated_ip_nh_info(::opi_api::network::cloud::v1alpha1::IPNextHopSpec* ip_nh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nhinfo();
  if (ip_nh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::IPNextHopSpec>::GetOwningArena(ip_nh_info);
    if (message_arena != submessage_arena) {
      ip_nh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_nh_info, submessage_arena);
    }
    set_has_ip_nh_info();
    nhinfo_.ip_nh_info_ = ip_nh_info;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopSpec.ip_nh_info)
}
NextHopSpec::NextHopSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHopSpec)
}
NextHopSpec::NextHopSpec(const NextHopSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  clear_has_nhinfo();
  switch (from.nhinfo_case()) {
    case kOverlayNhInfo: {
      _internal_mutable_overlay_nh_info()->::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec::MergeFrom(from._internal_overlay_nh_info());
      break;
    }
    case kUnderlayNhInfo: {
      _internal_mutable_underlay_nh_info()->::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec::MergeFrom(from._internal_underlay_nh_info());
      break;
    }
    case kIpNhInfo: {
      _internal_mutable_ip_nh_info()->::opi_api::network::cloud::v1alpha1::IPNextHopSpec::MergeFrom(from._internal_ip_nh_info());
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHopSpec)
}

inline void NextHopSpec::SharedCtor() {
id_ = nullptr;
clear_has_nhinfo();
}

NextHopSpec::~NextHopSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHopSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NextHopSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (has_nhinfo()) {
    clear_nhinfo();
  }
}

void NextHopSpec::ArenaDtor(void* object) {
  NextHopSpec* _this = reinterpret_cast< NextHopSpec* >(object);
  (void)_this;
}
void NextHopSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NextHopSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NextHopSpec::clear_nhinfo() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.NextHopSpec)
  switch (nhinfo_case()) {
    case kOverlayNhInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete nhinfo_.overlay_nh_info_;
      }
      break;
    }
    case kUnderlayNhInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete nhinfo_.underlay_nh_info_;
      }
      break;
    }
    case kIpNhInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete nhinfo_.ip_nh_info_;
      }
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NHINFO_NOT_SET;
}


void NextHopSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHopSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  clear_nhinfo();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHopSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.OverlayNextHopSpec overlay_nh_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_overlay_nh_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec underlay_nh_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlay_nh_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.IPNextHopSpec ip_nh_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_nh_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHopSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHopSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.OverlayNextHopSpec overlay_nh_info = 2;
  if (_internal_has_overlay_nh_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::overlay_nh_info(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec underlay_nh_info = 3;
  if (_internal_has_underlay_nh_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::underlay_nh_info(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.IPNextHopSpec ip_nh_info = 4;
  if (_internal_has_ip_nh_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ip_nh_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHopSpec)
  return target;
}

size_t NextHopSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHopSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  switch (nhinfo_case()) {
    // .opi_api.network.cloud.v1alpha1.OverlayNextHopSpec overlay_nh_info = 2;
    case kOverlayNhInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nhinfo_.overlay_nh_info_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec underlay_nh_info = 3;
    case kUnderlayNhInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nhinfo_.underlay_nh_info_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.IPNextHopSpec ip_nh_info = 4;
    case kIpNhInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nhinfo_.ip_nh_info_);
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHopSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NextHopSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHopSpec::GetClassData() const { return &_class_data_; }

void NextHopSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NextHopSpec *>(to)->MergeFrom(
      static_cast<const NextHopSpec &>(from));
}


void NextHopSpec::MergeFrom(const NextHopSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHopSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  switch (from.nhinfo_case()) {
    case kOverlayNhInfo: {
      _internal_mutable_overlay_nh_info()->::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec::MergeFrom(from._internal_overlay_nh_info());
      break;
    }
    case kUnderlayNhInfo: {
      _internal_mutable_underlay_nh_info()->::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec::MergeFrom(from._internal_underlay_nh_info());
      break;
    }
    case kIpNhInfo: {
      _internal_mutable_ip_nh_info()->::opi_api::network::cloud::v1alpha1::IPNextHopSpec::MergeFrom(from._internal_ip_nh_info());
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHopSpec::CopyFrom(const NextHopSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHopSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopSpec::IsInitialized() const {
  return true;
}

void NextHopSpec::InternalSwap(NextHopSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(nhinfo_, other->nhinfo_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[1]);
}

// ===================================================================

class UnderlayNextHopSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& l3_interface_id(const UnderlayNextHopSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
UnderlayNextHopSpec::_Internal::l3_interface_id(const UnderlayNextHopSpec* msg) {
  return *msg->l3_interface_id_;
}
void UnderlayNextHopSpec::clear_l3_interface_id() {
  if (GetArenaForAllocation() == nullptr && l3_interface_id_ != nullptr) {
    delete l3_interface_id_;
  }
  l3_interface_id_ = nullptr;
}
UnderlayNextHopSpec::UnderlayNextHopSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
}
UnderlayNextHopSpec::UnderlayNextHopSpec(const UnderlayNextHopSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  underlay_nh_mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    underlay_nh_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_underlay_nh_mac().empty()) {
    underlay_nh_mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_underlay_nh_mac(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_l3_interface_id()) {
    l3_interface_id_ = new ::opi_api::common::v1::ObjectKey(*from.l3_interface_id_);
  } else {
    l3_interface_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
}

inline void UnderlayNextHopSpec::SharedCtor() {
underlay_nh_mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  underlay_nh_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
l3_interface_id_ = nullptr;
}

UnderlayNextHopSpec::~UnderlayNextHopSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnderlayNextHopSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  underlay_nh_mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete l3_interface_id_;
}

void UnderlayNextHopSpec::ArenaDtor(void* object) {
  UnderlayNextHopSpec* _this = reinterpret_cast< UnderlayNextHopSpec* >(object);
  (void)_this;
}
void UnderlayNextHopSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnderlayNextHopSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnderlayNextHopSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  underlay_nh_mac_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && l3_interface_id_ != nullptr) {
    delete l3_interface_id_;
  }
  l3_interface_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnderlayNextHopSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey l3_interface_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_l3_interface_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes underlay_nh_mac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_underlay_nh_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnderlayNextHopSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey l3_interface_id = 1;
  if (this->_internal_has_l3_interface_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::l3_interface_id(this), target, stream);
  }

  // bytes underlay_nh_mac = 2;
  if (!this->_internal_underlay_nh_mac().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_underlay_nh_mac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
  return target;
}

size_t UnderlayNextHopSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes underlay_nh_mac = 2;
  if (!this->_internal_underlay_nh_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_underlay_nh_mac());
  }

  // .opi_api.common.v1.ObjectKey l3_interface_id = 1;
  if (this->_internal_has_l3_interface_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *l3_interface_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnderlayNextHopSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnderlayNextHopSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnderlayNextHopSpec::GetClassData() const { return &_class_data_; }

void UnderlayNextHopSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnderlayNextHopSpec *>(to)->MergeFrom(
      static_cast<const UnderlayNextHopSpec &>(from));
}


void UnderlayNextHopSpec::MergeFrom(const UnderlayNextHopSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_underlay_nh_mac().empty()) {
    _internal_set_underlay_nh_mac(from._internal_underlay_nh_mac());
  }
  if (from._internal_has_l3_interface_id()) {
    _internal_mutable_l3_interface_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_l3_interface_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnderlayNextHopSpec::CopyFrom(const UnderlayNextHopSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlayNextHopSpec::IsInitialized() const {
  return true;
}

void UnderlayNextHopSpec::InternalSwap(UnderlayNextHopSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &underlay_nh_mac_, lhs_arena,
      &other->underlay_nh_mac_, rhs_arena
  );
  swap(l3_interface_id_, other->l3_interface_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnderlayNextHopSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[2]);
}

// ===================================================================

class OverlayNextHopSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& tunnel_id(const OverlayNextHopSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
OverlayNextHopSpec::_Internal::tunnel_id(const OverlayNextHopSpec* msg) {
  return *msg->tunnel_id_;
}
void OverlayNextHopSpec::clear_tunnel_id() {
  if (GetArenaForAllocation() == nullptr && tunnel_id_ != nullptr) {
    delete tunnel_id_;
  }
  tunnel_id_ = nullptr;
}
OverlayNextHopSpec::OverlayNextHopSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
}
OverlayNextHopSpec::OverlayNextHopSpec(const OverlayNextHopSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tunnel_id()) {
    tunnel_id_ = new ::opi_api::common::v1::ObjectKey(*from.tunnel_id_);
  } else {
    tunnel_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
}

inline void OverlayNextHopSpec::SharedCtor() {
tunnel_id_ = nullptr;
}

OverlayNextHopSpec::~OverlayNextHopSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OverlayNextHopSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tunnel_id_;
}

void OverlayNextHopSpec::ArenaDtor(void* object) {
  OverlayNextHopSpec* _this = reinterpret_cast< OverlayNextHopSpec* >(object);
  (void)_this;
}
void OverlayNextHopSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OverlayNextHopSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OverlayNextHopSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && tunnel_id_ != nullptr) {
    delete tunnel_id_;
  }
  tunnel_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverlayNextHopSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey tunnel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tunnel_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OverlayNextHopSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey tunnel_id = 1;
  if (this->_internal_has_tunnel_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tunnel_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
  return target;
}

size_t OverlayNextHopSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey tunnel_id = 1;
  if (this->_internal_has_tunnel_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tunnel_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OverlayNextHopSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OverlayNextHopSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OverlayNextHopSpec::GetClassData() const { return &_class_data_; }

void OverlayNextHopSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OverlayNextHopSpec *>(to)->MergeFrom(
      static_cast<const OverlayNextHopSpec &>(from));
}


void OverlayNextHopSpec::MergeFrom(const OverlayNextHopSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tunnel_id()) {
    _internal_mutable_tunnel_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_tunnel_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OverlayNextHopSpec::CopyFrom(const OverlayNextHopSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlayNextHopSpec::IsInitialized() const {
  return true;
}

void OverlayNextHopSpec::InternalSwap(OverlayNextHopSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tunnel_id_, other->tunnel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverlayNextHopSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[3]);
}

// ===================================================================

class IPNextHopSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& vpc_id(const IPNextHopSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& ip_address(const IPNextHopSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
IPNextHopSpec::_Internal::vpc_id(const IPNextHopSpec* msg) {
  return *msg->vpc_id_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
IPNextHopSpec::_Internal::ip_address(const IPNextHopSpec* msg) {
  return *msg->ip_address_;
}
void IPNextHopSpec::clear_vpc_id() {
  if (GetArenaForAllocation() == nullptr && vpc_id_ != nullptr) {
    delete vpc_id_;
  }
  vpc_id_ = nullptr;
}
void IPNextHopSpec::clear_ip_address() {
  if (GetArenaForAllocation() == nullptr && ip_address_ != nullptr) {
    delete ip_address_;
  }
  ip_address_ = nullptr;
}
IPNextHopSpec::IPNextHopSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
}
IPNextHopSpec::IPNextHopSpec(const IPNextHopSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac().empty()) {
    mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_vpc_id()) {
    vpc_id_ = new ::opi_api::common::v1::ObjectKey(*from.vpc_id_);
  } else {
    vpc_id_ = nullptr;
  }
  if (from._internal_has_ip_address()) {
    ip_address_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.ip_address_);
  } else {
    ip_address_ = nullptr;
  }
  vlan_ = from.vlan_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
}

inline void IPNextHopSpec::SharedCtor() {
mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vpc_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vlan_) -
    reinterpret_cast<char*>(&vpc_id_)) + sizeof(vlan_));
}

IPNextHopSpec::~IPNextHopSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IPNextHopSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vpc_id_;
  if (this != internal_default_instance()) delete ip_address_;
}

void IPNextHopSpec::ArenaDtor(void* object) {
  IPNextHopSpec* _this = reinterpret_cast< IPNextHopSpec* >(object);
  (void)_this;
}
void IPNextHopSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPNextHopSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IPNextHopSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && vpc_id_ != nullptr) {
    delete vpc_id_;
  }
  vpc_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ip_address_ != nullptr) {
    delete ip_address_;
  }
  ip_address_ = nullptr;
  vlan_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPNextHopSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey vpc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpc_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vlan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          vlan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPNextHopSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey vpc_id = 1;
  if (this->_internal_has_vpc_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vpc_id(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 2;
  if (this->_internal_has_ip_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ip_address(this), target, stream);
  }

  // int32 vlan = 3;
  if (this->_internal_vlan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vlan(), target);
  }

  // bytes mac = 4;
  if (!this->_internal_mac().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_mac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
  return target;
}

size_t IPNextHopSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes mac = 4;
  if (!this->_internal_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac());
  }

  // .opi_api.common.v1.ObjectKey vpc_id = 1;
  if (this->_internal_has_vpc_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vpc_id_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 2;
  if (this->_internal_has_ip_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ip_address_);
  }

  // int32 vlan = 3;
  if (this->_internal_vlan() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vlan());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPNextHopSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IPNextHopSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPNextHopSpec::GetClassData() const { return &_class_data_; }

void IPNextHopSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IPNextHopSpec *>(to)->MergeFrom(
      static_cast<const IPNextHopSpec &>(from));
}


void IPNextHopSpec::MergeFrom(const IPNextHopSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mac().empty()) {
    _internal_set_mac(from._internal_mac());
  }
  if (from._internal_has_vpc_id()) {
    _internal_mutable_vpc_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_vpc_id());
  }
  if (from._internal_has_ip_address()) {
    _internal_mutable_ip_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_ip_address());
  }
  if (from._internal_vlan() != 0) {
    _internal_set_vlan(from._internal_vlan());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPNextHopSpec::CopyFrom(const IPNextHopSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPNextHopSpec::IsInitialized() const {
  return true;
}

void IPNextHopSpec::InternalSwap(IPNextHopSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_, lhs_arena,
      &other->mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPNextHopSpec, vlan_)
      + sizeof(IPNextHopSpec::vlan_)
      - PROTOBUF_FIELD_OFFSET(IPNextHopSpec, vpc_id_)>(
          reinterpret_cast<char*>(&vpc_id_),
          reinterpret_cast<char*>(&other->vpc_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPNextHopSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[4]);
}

// ===================================================================

class NextHopStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& hw_handle(const NextHopStatus* msg);
  static const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus& underlay_nh_info(const NextHopStatus* msg);
  static const ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus& overlay_nh_info(const NextHopStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&
NextHopStatus::_Internal::hw_handle(const NextHopStatus* msg) {
  return *msg->hw_handle_;
}
const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus&
NextHopStatus::_Internal::underlay_nh_info(const NextHopStatus* msg) {
  return *msg->nhinfo_.underlay_nh_info_;
}
const ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus&
NextHopStatus::_Internal::overlay_nh_info(const NextHopStatus* msg) {
  return *msg->nhinfo_.overlay_nh_info_;
}
void NextHopStatus::clear_hw_handle() {
  if (GetArenaForAllocation() == nullptr && hw_handle_ != nullptr) {
    delete hw_handle_;
  }
  hw_handle_ = nullptr;
}
void NextHopStatus::set_allocated_underlay_nh_info(::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* underlay_nh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nhinfo();
  if (underlay_nh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus>::GetOwningArena(underlay_nh_info);
    if (message_arena != submessage_arena) {
      underlay_nh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlay_nh_info, submessage_arena);
    }
    set_has_underlay_nh_info();
    nhinfo_.underlay_nh_info_ = underlay_nh_info;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopStatus.underlay_nh_info)
}
void NextHopStatus::set_allocated_overlay_nh_info(::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* overlay_nh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nhinfo();
  if (overlay_nh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus>::GetOwningArena(overlay_nh_info);
    if (message_arena != submessage_arena) {
      overlay_nh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlay_nh_info, submessage_arena);
    }
    set_has_overlay_nh_info();
    nhinfo_.overlay_nh_info_ = overlay_nh_info;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopStatus.overlay_nh_info)
}
NextHopStatus::NextHopStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHopStatus)
}
NextHopStatus::NextHopStatus(const NextHopStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hw_handle()) {
    hw_handle_ = new ::opi_api::network::opinetcommon::v1alpha1::HwHandle(*from.hw_handle_);
  } else {
    hw_handle_ = nullptr;
  }
  clear_has_nhinfo();
  switch (from.nhinfo_case()) {
    case kUnderlayNhInfo: {
      _internal_mutable_underlay_nh_info()->::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus::MergeFrom(from._internal_underlay_nh_info());
      break;
    }
    case kOverlayNhInfo: {
      _internal_mutable_overlay_nh_info()->::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus::MergeFrom(from._internal_overlay_nh_info());
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHopStatus)
}

inline void NextHopStatus::SharedCtor() {
hw_handle_ = nullptr;
clear_has_nhinfo();
}

NextHopStatus::~NextHopStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHopStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NextHopStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hw_handle_;
  if (has_nhinfo()) {
    clear_nhinfo();
  }
}

void NextHopStatus::ArenaDtor(void* object) {
  NextHopStatus* _this = reinterpret_cast< NextHopStatus* >(object);
  (void)_this;
}
void NextHopStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NextHopStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NextHopStatus::clear_nhinfo() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.NextHopStatus)
  switch (nhinfo_case()) {
    case kUnderlayNhInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete nhinfo_.underlay_nh_info_;
      }
      break;
    }
    case kOverlayNhInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete nhinfo_.overlay_nh_info_;
      }
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NHINFO_NOT_SET;
}


void NextHopStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHopStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && hw_handle_ != nullptr) {
    delete hw_handle_;
  }
  hw_handle_ = nullptr;
  clear_nhinfo();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHopStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hw_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus underlay_nh_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlay_nh_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.OverlayNextHopStatus overlay_nh_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_overlay_nh_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHopStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHopStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
  if (this->_internal_has_hw_handle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hw_handle(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus underlay_nh_info = 2;
  if (_internal_has_underlay_nh_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::underlay_nh_info(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.OverlayNextHopStatus overlay_nh_info = 3;
  if (_internal_has_overlay_nh_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::overlay_nh_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHopStatus)
  return target;
}

size_t NextHopStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHopStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
  if (this->_internal_has_hw_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hw_handle_);
  }

  switch (nhinfo_case()) {
    // .opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus underlay_nh_info = 2;
    case kUnderlayNhInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nhinfo_.underlay_nh_info_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.OverlayNextHopStatus overlay_nh_info = 3;
    case kOverlayNhInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nhinfo_.overlay_nh_info_);
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHopStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NextHopStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHopStatus::GetClassData() const { return &_class_data_; }

void NextHopStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NextHopStatus *>(to)->MergeFrom(
      static_cast<const NextHopStatus &>(from));
}


void NextHopStatus::MergeFrom(const NextHopStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHopStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hw_handle()) {
    _internal_mutable_hw_handle()->::opi_api::network::opinetcommon::v1alpha1::HwHandle::MergeFrom(from._internal_hw_handle());
  }
  switch (from.nhinfo_case()) {
    case kUnderlayNhInfo: {
      _internal_mutable_underlay_nh_info()->::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus::MergeFrom(from._internal_underlay_nh_info());
      break;
    }
    case kOverlayNhInfo: {
      _internal_mutable_overlay_nh_info()->::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus::MergeFrom(from._internal_overlay_nh_info());
      break;
    }
    case NHINFO_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHopStatus::CopyFrom(const NextHopStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHopStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopStatus::IsInitialized() const {
  return true;
}

void NextHopStatus::InternalSwap(NextHopStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(hw_handle_, other->hw_handle_);
  swap(nhinfo_, other->nhinfo_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[5]);
}

// ===================================================================

class UnderlayNextHopStatus::_Internal {
 public:
};

UnderlayNextHopStatus::UnderlayNextHopStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
}
UnderlayNextHopStatus::UnderlayNextHopStatus(const UnderlayNextHopStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&vlan_) -
    reinterpret_cast<char*>(&port_)) + sizeof(vlan_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
}

inline void UnderlayNextHopStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vlan_) -
    reinterpret_cast<char*>(&port_)) + sizeof(vlan_));
}

UnderlayNextHopStatus::~UnderlayNextHopStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnderlayNextHopStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnderlayNextHopStatus::ArenaDtor(void* object) {
  UnderlayNextHopStatus* _this = reinterpret_cast< UnderlayNextHopStatus* >(object);
  (void)_this;
}
void UnderlayNextHopStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnderlayNextHopStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnderlayNextHopStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vlan_) -
      reinterpret_cast<char*>(&port_)) + sizeof(vlan_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnderlayNextHopStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vlan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          vlan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnderlayNextHopStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_port(), target);
  }

  // int32 vlan = 2;
  if (this->_internal_vlan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vlan(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
  return target;
}

size_t UnderlayNextHopStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  // int32 vlan = 2;
  if (this->_internal_vlan() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vlan());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnderlayNextHopStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnderlayNextHopStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnderlayNextHopStatus::GetClassData() const { return &_class_data_; }

void UnderlayNextHopStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnderlayNextHopStatus *>(to)->MergeFrom(
      static_cast<const UnderlayNextHopStatus &>(from));
}


void UnderlayNextHopStatus::MergeFrom(const UnderlayNextHopStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_vlan() != 0) {
    _internal_set_vlan(from._internal_vlan());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnderlayNextHopStatus::CopyFrom(const UnderlayNextHopStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlayNextHopStatus::IsInitialized() const {
  return true;
}

void UnderlayNextHopStatus::InternalSwap(UnderlayNextHopStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnderlayNextHopStatus, vlan_)
      + sizeof(UnderlayNextHopStatus::vlan_)
      - PROTOBUF_FIELD_OFFSET(UnderlayNextHopStatus, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnderlayNextHopStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[6]);
}

// ===================================================================

class OverlayNextHopStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& tunnel_ip(const OverlayNextHopStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
OverlayNextHopStatus::_Internal::tunnel_ip(const OverlayNextHopStatus* msg) {
  return *msg->tunnel_ip_;
}
void OverlayNextHopStatus::clear_tunnel_ip() {
  if (GetArenaForAllocation() == nullptr && tunnel_ip_ != nullptr) {
    delete tunnel_ip_;
  }
  tunnel_ip_ = nullptr;
}
OverlayNextHopStatus::OverlayNextHopStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
}
OverlayNextHopStatus::OverlayNextHopStatus(const OverlayNextHopStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tunnel_ip()) {
    tunnel_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.tunnel_ip_);
  } else {
    tunnel_ip_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
}

inline void OverlayNextHopStatus::SharedCtor() {
tunnel_ip_ = nullptr;
}

OverlayNextHopStatus::~OverlayNextHopStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OverlayNextHopStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tunnel_ip_;
}

void OverlayNextHopStatus::ArenaDtor(void* object) {
  OverlayNextHopStatus* _this = reinterpret_cast< OverlayNextHopStatus* >(object);
  (void)_this;
}
void OverlayNextHopStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OverlayNextHopStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OverlayNextHopStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && tunnel_ip_ != nullptr) {
    delete tunnel_ip_;
  }
  tunnel_ip_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverlayNextHopStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress tunnel_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tunnel_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OverlayNextHopStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress tunnel_ip = 1;
  if (this->_internal_has_tunnel_ip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tunnel_ip(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
  return target;
}

size_t OverlayNextHopStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress tunnel_ip = 1;
  if (this->_internal_has_tunnel_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tunnel_ip_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OverlayNextHopStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OverlayNextHopStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OverlayNextHopStatus::GetClassData() const { return &_class_data_; }

void OverlayNextHopStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OverlayNextHopStatus *>(to)->MergeFrom(
      static_cast<const OverlayNextHopStatus &>(from));
}


void OverlayNextHopStatus::MergeFrom(const OverlayNextHopStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tunnel_ip()) {
    _internal_mutable_tunnel_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_tunnel_ip());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OverlayNextHopStatus::CopyFrom(const OverlayNextHopStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlayNextHopStatus::IsInitialized() const {
  return true;
}

void OverlayNextHopStatus::InternalSwap(OverlayNextHopStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tunnel_ip_, other->tunnel_ip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverlayNextHopStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[7]);
}

// ===================================================================

class NextHopLookup::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& nh_id(const NextHopLookup* msg);
};

const ::opi_api::common::v1::ObjectKey&
NextHopLookup::_Internal::nh_id(const NextHopLookup* msg) {
  return *msg->gettype_.nh_id_;
}
void NextHopLookup::set_allocated_nh_id(::opi_api::common::v1::ObjectKey* nh_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_gettype();
  if (nh_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nh_id));
    if (message_arena != submessage_arena) {
      nh_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nh_id, submessage_arena);
    }
    set_has_nh_id();
    gettype_.nh_id_ = nh_id;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopLookup.nh_id)
}
void NextHopLookup::clear_nh_id() {
  if (_internal_has_nh_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete gettype_.nh_id_;
    }
    clear_has_gettype();
  }
}
NextHopLookup::NextHopLookup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHopLookup)
}
NextHopLookup::NextHopLookup(const NextHopLookup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_gettype();
  switch (from.gettype_case()) {
    case kType: {
      _internal_set_type(from._internal_type());
      break;
    }
    case kNhId: {
      _internal_mutable_nh_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_nh_id());
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHopLookup)
}

inline void NextHopLookup::SharedCtor() {
clear_has_gettype();
}

NextHopLookup::~NextHopLookup() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHopLookup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NextHopLookup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_gettype()) {
    clear_gettype();
  }
}

void NextHopLookup::ArenaDtor(void* object) {
  NextHopLookup* _this = reinterpret_cast< NextHopLookup* >(object);
  (void)_this;
}
void NextHopLookup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NextHopLookup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NextHopLookup::clear_gettype() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.NextHopLookup)
  switch (gettype_case()) {
    case kType: {
      // No need to clear
      break;
    }
    case kNhId: {
      if (GetArenaForAllocation() == nullptr) {
        delete gettype_.nh_id_;
      }
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GETTYPE_NOT_SET;
}


void NextHopLookup::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHopLookup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_gettype();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHopLookup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.NextHopType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::cloud::v1alpha1::NextHopType>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey nh_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nh_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHopLookup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHopLookup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.NextHopType type = 1;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .opi_api.common.v1.ObjectKey nh_id = 2;
  if (_internal_has_nh_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nh_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHopLookup)
  return target;
}

size_t NextHopLookup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHopLookup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (gettype_case()) {
    // .opi_api.network.cloud.v1alpha1.NextHopType type = 1;
    case kType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
      break;
    }
    // .opi_api.common.v1.ObjectKey nh_id = 2;
    case kNhId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gettype_.nh_id_);
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHopLookup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NextHopLookup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHopLookup::GetClassData() const { return &_class_data_; }

void NextHopLookup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NextHopLookup *>(to)->MergeFrom(
      static_cast<const NextHopLookup &>(from));
}


void NextHopLookup::MergeFrom(const NextHopLookup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHopLookup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.gettype_case()) {
    case kType: {
      _internal_set_type(from._internal_type());
      break;
    }
    case kNhId: {
      _internal_mutable_nh_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_nh_id());
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHopLookup::CopyFrom(const NextHopLookup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHopLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopLookup::IsInitialized() const {
  return true;
}

void NextHopLookup::InternalSwap(NextHopLookup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(gettype_, other->gettype_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopLookup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[8]);
}

// ===================================================================

class NextHopGroup::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec& spec(const NextHopGroup* msg);
  static const ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus& status(const NextHopGroup* msg);
};

const ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec&
NextHopGroup::_Internal::spec(const NextHopGroup* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus&
NextHopGroup::_Internal::status(const NextHopGroup* msg) {
  return *msg->status_;
}
NextHopGroup::NextHopGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHopGroup)
}
NextHopGroup::NextHopGroup(const NextHopGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHopGroup)
}

inline void NextHopGroup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

NextHopGroup::~NextHopGroup() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHopGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NextHopGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void NextHopGroup::ArenaDtor(void* object) {
  NextHopGroup* _this = reinterpret_cast< NextHopGroup* >(object);
  (void)_this;
}
void NextHopGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NextHopGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NextHopGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHopGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHopGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.NextHopGroupSpec spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.NextHopGroupStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHopGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHopGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.NextHopGroupSpec spec = 3;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.NextHopGroupStatus status = 4;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHopGroup)
  return target;
}

size_t NextHopGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHopGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.NextHopGroupSpec spec = 3;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.NextHopGroupStatus status = 4;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHopGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NextHopGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHopGroup::GetClassData() const { return &_class_data_; }

void NextHopGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NextHopGroup *>(to)->MergeFrom(
      static_cast<const NextHopGroup &>(from));
}


void NextHopGroup::MergeFrom(const NextHopGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHopGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::NextHopGroupSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::cloud::v1alpha1::NextHopGroupStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHopGroup::CopyFrom(const NextHopGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHopGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopGroup::IsInitialized() const {
  return true;
}

void NextHopGroup::InternalSwap(NextHopGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NextHopGroup, status_)
      + sizeof(NextHopGroup::status_)
      - PROTOBUF_FIELD_OFFSET(NextHopGroup, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[9]);
}

// ===================================================================

class NextHopGroupSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const NextHopGroupSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
NextHopGroupSpec::_Internal::id(const NextHopGroupSpec* msg) {
  return *msg->id_;
}
void NextHopGroupSpec::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
NextHopGroupSpec::NextHopGroupSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
}
NextHopGroupSpec::NextHopGroupSpec(const NextHopGroupSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
}

inline void NextHopGroupSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

NextHopGroupSpec::~NextHopGroupSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NextHopGroupSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void NextHopGroupSpec::ArenaDtor(void* object) {
  NextHopGroupSpec* _this = reinterpret_cast< NextHopGroupSpec* >(object);
  (void)_this;
}
void NextHopGroupSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NextHopGroupSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NextHopGroupSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHopGroupSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::cloud::v1alpha1::NextHopGroupType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.network.cloud.v1alpha1.NextHopSpec members = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHopGroupSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated .opi_api.network.cloud.v1alpha1.NextHopSpec members = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
  return target;
}

size_t NextHopGroupSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.cloud.v1alpha1.NextHopSpec members = 3;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHopGroupSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NextHopGroupSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHopGroupSpec::GetClassData() const { return &_class_data_; }

void NextHopGroupSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NextHopGroupSpec *>(to)->MergeFrom(
      static_cast<const NextHopGroupSpec &>(from));
}


void NextHopGroupSpec::MergeFrom(const NextHopGroupSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHopGroupSpec::CopyFrom(const NextHopGroupSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopGroupSpec::IsInitialized() const {
  return true;
}

void NextHopGroupSpec::InternalSwap(NextHopGroupSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NextHopGroupSpec, type_)
      + sizeof(NextHopGroupSpec::type_)
      - PROTOBUF_FIELD_OFFSET(NextHopGroupSpec, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopGroupSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[10]);
}

// ===================================================================

class NextHopGroupStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& hw_handle(const NextHopGroupStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&
NextHopGroupStatus::_Internal::hw_handle(const NextHopGroupStatus* msg) {
  return *msg->hw_handle_;
}
void NextHopGroupStatus::clear_hw_handle() {
  if (GetArenaForAllocation() == nullptr && hw_handle_ != nullptr) {
    delete hw_handle_;
  }
  hw_handle_ = nullptr;
}
NextHopGroupStatus::NextHopGroupStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
}
NextHopGroupStatus::NextHopGroupStatus(const NextHopGroupStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hw_handle()) {
    hw_handle_ = new ::opi_api::network::opinetcommon::v1alpha1::HwHandle(*from.hw_handle_);
  } else {
    hw_handle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
}

inline void NextHopGroupStatus::SharedCtor() {
hw_handle_ = nullptr;
}

NextHopGroupStatus::~NextHopGroupStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NextHopGroupStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hw_handle_;
}

void NextHopGroupStatus::ArenaDtor(void* object) {
  NextHopGroupStatus* _this = reinterpret_cast< NextHopGroupStatus* >(object);
  (void)_this;
}
void NextHopGroupStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NextHopGroupStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NextHopGroupStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  if (GetArenaForAllocation() == nullptr && hw_handle_ != nullptr) {
    delete hw_handle_;
  }
  hw_handle_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHopGroupStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.cloud.v1alpha1.NextHopStatus members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hw_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHopGroupStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.cloud.v1alpha1.NextHopStatus members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 2;
  if (this->_internal_has_hw_handle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hw_handle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
  return target;
}

size_t NextHopGroupStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.cloud.v1alpha1.NextHopStatus members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 2;
  if (this->_internal_has_hw_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hw_handle_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHopGroupStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NextHopGroupStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHopGroupStatus::GetClassData() const { return &_class_data_; }

void NextHopGroupStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NextHopGroupStatus *>(to)->MergeFrom(
      static_cast<const NextHopGroupStatus &>(from));
}


void NextHopGroupStatus::MergeFrom(const NextHopGroupStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from._internal_has_hw_handle()) {
    _internal_mutable_hw_handle()->::opi_api::network::opinetcommon::v1alpha1::HwHandle::MergeFrom(from._internal_hw_handle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHopGroupStatus::CopyFrom(const NextHopGroupStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopGroupStatus::IsInitialized() const {
  return true;
}

void NextHopGroupStatus::InternalSwap(NextHopGroupStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  swap(hw_handle_, other->hw_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopGroupStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[11]);
}

// ===================================================================

class NextHopGroupLookup::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const NextHopGroupLookup* msg);
};

const ::opi_api::common::v1::ObjectKey&
NextHopGroupLookup::_Internal::id(const NextHopGroupLookup* msg) {
  return *msg->gettype_.id_;
}
void NextHopGroupLookup::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_gettype();
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
    gettype_.id_ = id;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopGroupLookup.id)
}
void NextHopGroupLookup::clear_id() {
  if (_internal_has_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete gettype_.id_;
    }
    clear_has_gettype();
  }
}
NextHopGroupLookup::NextHopGroupLookup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
}
NextHopGroupLookup::NextHopGroupLookup(const NextHopGroupLookup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_gettype();
  switch (from.gettype_case()) {
    case kType: {
      _internal_set_type(from._internal_type());
      break;
    }
    case kId: {
      _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
}

inline void NextHopGroupLookup::SharedCtor() {
clear_has_gettype();
}

NextHopGroupLookup::~NextHopGroupLookup() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NextHopGroupLookup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_gettype()) {
    clear_gettype();
  }
}

void NextHopGroupLookup::ArenaDtor(void* object) {
  NextHopGroupLookup* _this = reinterpret_cast< NextHopGroupLookup* >(object);
  (void)_this;
}
void NextHopGroupLookup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NextHopGroupLookup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NextHopGroupLookup::clear_gettype() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  switch (gettype_case()) {
    case kType: {
      // No need to clear
      break;
    }
    case kId: {
      if (GetArenaForAllocation() == nullptr) {
        delete gettype_.id_;
      }
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GETTYPE_NOT_SET;
}


void NextHopGroupLookup::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_gettype();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextHopGroupLookup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::cloud::v1alpha1::NextHopGroupType>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextHopGroupLookup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 1;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .opi_api.common.v1.ObjectKey id = 2;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  return target;
}

size_t NextHopGroupLookup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (gettype_case()) {
    // .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 1;
    case kType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
      break;
    }
    // .opi_api.common.v1.ObjectKey id = 2;
    case kId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gettype_.id_);
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextHopGroupLookup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NextHopGroupLookup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextHopGroupLookup::GetClassData() const { return &_class_data_; }

void NextHopGroupLookup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NextHopGroupLookup *>(to)->MergeFrom(
      static_cast<const NextHopGroupLookup &>(from));
}


void NextHopGroupLookup::MergeFrom(const NextHopGroupLookup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.gettype_case()) {
    case kType: {
      _internal_set_type(from._internal_type());
      break;
    }
    case kId: {
      _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
      break;
    }
    case GETTYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextHopGroupLookup::CopyFrom(const NextHopGroupLookup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopGroupLookup::IsInitialized() const {
  return true;
}

void NextHopGroupLookup::InternalSwap(NextHopGroupLookup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(gettype_, other->gettype_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopGroupLookup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_nexthop_2eproto_getter, &descriptor_table_nexthop_2eproto_once,
      file_level_metadata_nexthop_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHop* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHop >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHopSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHopSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHopSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::IPNextHopSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::IPNextHopSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::IPNextHopSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHopStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHopStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHopStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHopLookup* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHopLookup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHopLookup >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHopGroup* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHopGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHopGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::NextHopGroupLookup* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::NextHopGroupLookup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::NextHopGroupLookup >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
