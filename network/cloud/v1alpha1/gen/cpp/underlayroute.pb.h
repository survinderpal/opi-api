// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: underlayroute.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_underlayroute_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_underlayroute_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "object_key.pb.h"
#include "networktypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_underlayroute_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_underlayroute_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_underlayroute_2eproto;
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
class UnderlayRoute;
struct UnderlayRouteDefaultTypeInternal;
extern UnderlayRouteDefaultTypeInternal _UnderlayRoute_default_instance_;
class UnderlayRouteLookupKey;
struct UnderlayRouteLookupKeyDefaultTypeInternal;
extern UnderlayRouteLookupKeyDefaultTypeInternal _UnderlayRouteLookupKey_default_instance_;
class UnderlayRouteSpec;
struct UnderlayRouteSpecDefaultTypeInternal;
extern UnderlayRouteSpecDefaultTypeInternal _UnderlayRouteSpec_default_instance_;
class UnderlayRouteStatus;
struct UnderlayRouteStatusDefaultTypeInternal;
extern UnderlayRouteStatusDefaultTypeInternal _UnderlayRouteStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::cloud::v1alpha1::UnderlayRoute* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UnderlayRoute>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UnderlayRouteLookupKey>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {

// ===================================================================

class UnderlayRoute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UnderlayRoute) */ {
 public:
  inline UnderlayRoute() : UnderlayRoute(nullptr) {}
  ~UnderlayRoute() override;
  explicit constexpr UnderlayRoute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnderlayRoute(const UnderlayRoute& from);
  UnderlayRoute(UnderlayRoute&& from) noexcept
    : UnderlayRoute() {
    *this = ::std::move(from);
  }

  inline UnderlayRoute& operator=(const UnderlayRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnderlayRoute& operator=(UnderlayRoute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnderlayRoute& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnderlayRoute* internal_default_instance() {
    return reinterpret_cast<const UnderlayRoute*>(
               &_UnderlayRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UnderlayRoute& a, UnderlayRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(UnderlayRoute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnderlayRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnderlayRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnderlayRoute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnderlayRoute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnderlayRoute& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnderlayRoute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UnderlayRoute";
  }
  protected:
  explicit UnderlayRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.UnderlayRouteSpec spec = 1;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* spec);
  ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.UnderlayRouteStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* release_status();
  ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* mutable_status();
  void set_allocated_status(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* status);
  private:
  const ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus& _internal_status() const;
  ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* status);
  ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UnderlayRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_underlayroute_2eproto;
};
// -------------------------------------------------------------------

class UnderlayRouteSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec) */ {
 public:
  inline UnderlayRouteSpec() : UnderlayRouteSpec(nullptr) {}
  ~UnderlayRouteSpec() override;
  explicit constexpr UnderlayRouteSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnderlayRouteSpec(const UnderlayRouteSpec& from);
  UnderlayRouteSpec(UnderlayRouteSpec&& from) noexcept
    : UnderlayRouteSpec() {
    *this = ::std::move(from);
  }

  inline UnderlayRouteSpec& operator=(const UnderlayRouteSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnderlayRouteSpec& operator=(UnderlayRouteSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnderlayRouteSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnderlayRouteSpec* internal_default_instance() {
    return reinterpret_cast<const UnderlayRouteSpec*>(
               &_UnderlayRouteSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UnderlayRouteSpec& a, UnderlayRouteSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(UnderlayRouteSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnderlayRouteSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnderlayRouteSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnderlayRouteSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnderlayRouteSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnderlayRouteSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnderlayRouteSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UnderlayRouteSpec";
  }
  protected:
  explicit UnderlayRouteSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRouteTableIdFieldNumber = 2,
    kDestPrefixFieldNumber = 3,
    kNextHopAddressFieldNumber = 4,
    kInterfaceIdFieldNumber = 8,
    kStateFieldNumber = 5,
    kEnableAdminDistanceFieldNumber = 6,
    kAdminDistFieldNumber = 7,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.common.v1.ObjectKey route_table_id = 2;
  bool has_route_table_id() const;
  private:
  bool _internal_has_route_table_id() const;
  public:
  void clear_route_table_id();
  const ::opi_api::common::v1::ObjectKey& route_table_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_route_table_id();
  ::opi_api::common::v1::ObjectKey* mutable_route_table_id();
  void set_allocated_route_table_id(::opi_api::common::v1::ObjectKey* route_table_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_route_table_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_route_table_id();
  public:
  void unsafe_arena_set_allocated_route_table_id(
      ::opi_api::common::v1::ObjectKey* route_table_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_route_table_id();

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 3;
  bool has_dest_prefix() const;
  private:
  bool _internal_has_dest_prefix() const;
  public:
  void clear_dest_prefix();
  const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& dest_prefix() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* release_dest_prefix();
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* mutable_dest_prefix();
  void set_allocated_dest_prefix(::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dest_prefix);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& _internal_dest_prefix() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* _internal_mutable_dest_prefix();
  public:
  void unsafe_arena_set_allocated_dest_prefix(
      ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dest_prefix);
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* unsafe_arena_release_dest_prefix();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 4;
  bool has_next_hop_address() const;
  private:
  bool _internal_has_next_hop_address() const;
  public:
  void clear_next_hop_address();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& next_hop_address() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_next_hop_address();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_next_hop_address();
  void set_allocated_next_hop_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_address);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_next_hop_address() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_next_hop_address();
  public:
  void unsafe_arena_set_allocated_next_hop_address(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_address);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_next_hop_address();

  // .opi_api.common.v1.ObjectKey interface_id = 8;
  bool has_interface_id() const;
  private:
  bool _internal_has_interface_id() const;
  public:
  void clear_interface_id();
  const ::opi_api::common::v1::ObjectKey& interface_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_interface_id();
  ::opi_api::common::v1::ObjectKey* mutable_interface_id();
  void set_allocated_interface_id(::opi_api::common::v1::ObjectKey* interface_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_interface_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_interface_id();
  public:
  void unsafe_arena_set_allocated_interface_id(
      ::opi_api::common::v1::ObjectKey* interface_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_interface_id();

  // .opi_api.network.opinetcommon.v1alpha1.AdminState state = 5;
  void clear_state();
  ::opi_api::network::opinetcommon::v1alpha1::AdminState state() const;
  void set_state(::opi_api::network::opinetcommon::v1alpha1::AdminState value);
  private:
  ::opi_api::network::opinetcommon::v1alpha1::AdminState _internal_state() const;
  void _internal_set_state(::opi_api::network::opinetcommon::v1alpha1::AdminState value);
  public:

  // bool enable_admin_distance = 6;
  void clear_enable_admin_distance();
  bool enable_admin_distance() const;
  void set_enable_admin_distance(bool value);
  private:
  bool _internal_enable_admin_distance() const;
  void _internal_set_enable_admin_distance(bool value);
  public:

  // int32 admin_dist = 7;
  void clear_admin_dist();
  int32_t admin_dist() const;
  void set_admin_dist(int32_t value);
  private:
  int32_t _internal_admin_dist() const;
  void _internal_set_admin_dist(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::common::v1::ObjectKey* route_table_id_;
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dest_prefix_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_address_;
  ::opi_api::common::v1::ObjectKey* interface_id_;
  int state_;
  bool enable_admin_distance_;
  int32_t admin_dist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_underlayroute_2eproto;
};
// -------------------------------------------------------------------

class UnderlayRouteStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus) */ {
 public:
  inline UnderlayRouteStatus() : UnderlayRouteStatus(nullptr) {}
  ~UnderlayRouteStatus() override;
  explicit constexpr UnderlayRouteStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnderlayRouteStatus(const UnderlayRouteStatus& from);
  UnderlayRouteStatus(UnderlayRouteStatus&& from) noexcept
    : UnderlayRouteStatus() {
    *this = ::std::move(from);
  }

  inline UnderlayRouteStatus& operator=(const UnderlayRouteStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnderlayRouteStatus& operator=(UnderlayRouteStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnderlayRouteStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnderlayRouteStatus* internal_default_instance() {
    return reinterpret_cast<const UnderlayRouteStatus*>(
               &_UnderlayRouteStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnderlayRouteStatus& a, UnderlayRouteStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(UnderlayRouteStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnderlayRouteStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnderlayRouteStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnderlayRouteStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnderlayRouteStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnderlayRouteStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnderlayRouteStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UnderlayRouteStatus";
  }
  protected:
  explicit UnderlayRouteStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestPrefixFieldNumber = 2,
    kNextHopAddressFieldNumber = 3,
    kRouteTableIdFieldNumber = 1,
    kIfIndexFieldNumber = 5,
    kTypeFieldNumber = 6,
    kProtoFieldNumber = 7,
    kAgeFieldNumber = 8,
    kMetricFieldNumber = 9,
    kFibRouteFieldNumber = 10,
    kConnectedFieldNumber = 11,
    kAdminDistanceFieldNumber = 12,
  };
  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
  bool has_dest_prefix() const;
  private:
  bool _internal_has_dest_prefix() const;
  public:
  void clear_dest_prefix();
  const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& dest_prefix() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* release_dest_prefix();
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* mutable_dest_prefix();
  void set_allocated_dest_prefix(::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dest_prefix);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& _internal_dest_prefix() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* _internal_mutable_dest_prefix();
  public:
  void unsafe_arena_set_allocated_dest_prefix(
      ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dest_prefix);
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* unsafe_arena_release_dest_prefix();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
  bool has_next_hop_address() const;
  private:
  bool _internal_has_next_hop_address() const;
  public:
  void clear_next_hop_address();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& next_hop_address() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_next_hop_address();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_next_hop_address();
  void set_allocated_next_hop_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_address);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_next_hop_address() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_next_hop_address();
  public:
  void unsafe_arena_set_allocated_next_hop_address(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_address);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_next_hop_address();

  // int32 route_table_id = 1;
  void clear_route_table_id();
  int32_t route_table_id() const;
  void set_route_table_id(int32_t value);
  private:
  int32_t _internal_route_table_id() const;
  void _internal_set_route_table_id(int32_t value);
  public:

  // int32 if_index = 5;
  void clear_if_index();
  int32_t if_index() const;
  void set_if_index(int32_t value);
  private:
  int32_t _internal_if_index() const;
  void _internal_set_if_index(int32_t value);
  public:

  // .opi_api.network.opinetcommon.v1alpha1.RouteType type = 6;
  void clear_type();
  ::opi_api::network::opinetcommon::v1alpha1::RouteType type() const;
  void set_type(::opi_api::network::opinetcommon::v1alpha1::RouteType value);
  private:
  ::opi_api::network::opinetcommon::v1alpha1::RouteType _internal_type() const;
  void _internal_set_type(::opi_api::network::opinetcommon::v1alpha1::RouteType value);
  public:

  // .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 7;
  void clear_proto();
  ::opi_api::network::opinetcommon::v1alpha1::RouteProtocol proto() const;
  void set_proto(::opi_api::network::opinetcommon::v1alpha1::RouteProtocol value);
  private:
  ::opi_api::network::opinetcommon::v1alpha1::RouteProtocol _internal_proto() const;
  void _internal_set_proto(::opi_api::network::opinetcommon::v1alpha1::RouteProtocol value);
  public:

  // int32 age = 8;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // int32 metric = 9;
  void clear_metric();
  int32_t metric() const;
  void set_metric(int32_t value);
  private:
  int32_t _internal_metric() const;
  void _internal_set_metric(int32_t value);
  public:

  // bool fib_route = 10;
  void clear_fib_route();
  bool fib_route() const;
  void set_fib_route(bool value);
  private:
  bool _internal_fib_route() const;
  void _internal_set_fib_route(bool value);
  public:

  // bool connected = 11;
  void clear_connected();
  bool connected() const;
  void set_connected(bool value);
  private:
  bool _internal_connected() const;
  void _internal_set_connected(bool value);
  public:

  // int32 admin_distance = 12;
  void clear_admin_distance();
  int32_t admin_distance() const;
  void set_admin_distance(int32_t value);
  private:
  int32_t _internal_admin_distance() const;
  void _internal_set_admin_distance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dest_prefix_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_address_;
  int32_t route_table_id_;
  int32_t if_index_;
  int type_;
  int proto_;
  int32_t age_;
  int32_t metric_;
  bool fib_route_;
  bool connected_;
  int32_t admin_distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_underlayroute_2eproto;
};
// -------------------------------------------------------------------

class UnderlayRouteLookupKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey) */ {
 public:
  inline UnderlayRouteLookupKey() : UnderlayRouteLookupKey(nullptr) {}
  ~UnderlayRouteLookupKey() override;
  explicit constexpr UnderlayRouteLookupKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnderlayRouteLookupKey(const UnderlayRouteLookupKey& from);
  UnderlayRouteLookupKey(UnderlayRouteLookupKey&& from) noexcept
    : UnderlayRouteLookupKey() {
    *this = ::std::move(from);
  }

  inline UnderlayRouteLookupKey& operator=(const UnderlayRouteLookupKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnderlayRouteLookupKey& operator=(UnderlayRouteLookupKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnderlayRouteLookupKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnderlayRouteLookupKey* internal_default_instance() {
    return reinterpret_cast<const UnderlayRouteLookupKey*>(
               &_UnderlayRouteLookupKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UnderlayRouteLookupKey& a, UnderlayRouteLookupKey& b) {
    a.Swap(&b);
  }
  inline void Swap(UnderlayRouteLookupKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnderlayRouteLookupKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnderlayRouteLookupKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnderlayRouteLookupKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnderlayRouteLookupKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnderlayRouteLookupKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnderlayRouteLookupKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey";
  }
  protected:
  explicit UnderlayRouteLookupKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteTableIdFieldNumber = 1,
    kDestPrefixFieldNumber = 2,
    kNextHopAddressFieldNumber = 3,
    kIfidFieldNumber = 4,
    kProtoFieldNumber = 6,
  };
  // .opi_api.common.v1.ObjectKey route_table_id = 1;
  bool has_route_table_id() const;
  private:
  bool _internal_has_route_table_id() const;
  public:
  void clear_route_table_id();
  const ::opi_api::common::v1::ObjectKey& route_table_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_route_table_id();
  ::opi_api::common::v1::ObjectKey* mutable_route_table_id();
  void set_allocated_route_table_id(::opi_api::common::v1::ObjectKey* route_table_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_route_table_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_route_table_id();
  public:
  void unsafe_arena_set_allocated_route_table_id(
      ::opi_api::common::v1::ObjectKey* route_table_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_route_table_id();

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
  bool has_dest_prefix() const;
  private:
  bool _internal_has_dest_prefix() const;
  public:
  void clear_dest_prefix();
  const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& dest_prefix() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* release_dest_prefix();
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* mutable_dest_prefix();
  void set_allocated_dest_prefix(::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dest_prefix);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& _internal_dest_prefix() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* _internal_mutable_dest_prefix();
  public:
  void unsafe_arena_set_allocated_dest_prefix(
      ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dest_prefix);
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* unsafe_arena_release_dest_prefix();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
  bool has_next_hop_address() const;
  private:
  bool _internal_has_next_hop_address() const;
  public:
  void clear_next_hop_address();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& next_hop_address() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_next_hop_address();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_next_hop_address();
  void set_allocated_next_hop_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_address);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_next_hop_address() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_next_hop_address();
  public:
  void unsafe_arena_set_allocated_next_hop_address(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_address);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_next_hop_address();

  // int32 ifid = 4;
  void clear_ifid();
  int32_t ifid() const;
  void set_ifid(int32_t value);
  private:
  int32_t _internal_ifid() const;
  void _internal_set_ifid(int32_t value);
  public:

  // .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 6;
  void clear_proto();
  ::opi_api::network::opinetcommon::v1alpha1::RouteProtocol proto() const;
  void set_proto(::opi_api::network::opinetcommon::v1alpha1::RouteProtocol value);
  private:
  ::opi_api::network::opinetcommon::v1alpha1::RouteProtocol _internal_proto() const;
  void _internal_set_proto(::opi_api::network::opinetcommon::v1alpha1::RouteProtocol value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* route_table_id_;
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dest_prefix_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_address_;
  int32_t ifid_;
  int proto_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_underlayroute_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UnderlayRoute

// .opi_api.network.cloud.v1alpha1.UnderlayRouteSpec spec = 1;
inline bool UnderlayRoute::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool UnderlayRoute::has_spec() const {
  return _internal_has_spec();
}
inline void UnderlayRoute::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec& UnderlayRoute::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec&>(
      ::opi_api::network::cloud::v1alpha1::_UnderlayRouteSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec& UnderlayRoute::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRoute.spec)
  return _internal_spec();
}
inline void UnderlayRoute::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRoute.spec)
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* UnderlayRoute::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* UnderlayRoute::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UnderlayRoute.spec)
  
  ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* UnderlayRoute::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* UnderlayRoute::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UnderlayRoute.spec)
  return _msg;
}
inline void UnderlayRoute::set_allocated_spec(::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::UnderlayRouteSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRoute.spec)
}

// .opi_api.network.cloud.v1alpha1.UnderlayRouteStatus status = 2;
inline bool UnderlayRoute::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool UnderlayRoute::has_status() const {
  return _internal_has_status();
}
inline void UnderlayRoute::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus& UnderlayRoute::_internal_status() const {
  const ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus&>(
      ::opi_api::network::cloud::v1alpha1::_UnderlayRouteStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus& UnderlayRoute::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRoute.status)
  return _internal_status();
}
inline void UnderlayRoute::unsafe_arena_set_allocated_status(
    ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRoute.status)
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* UnderlayRoute::release_status() {
  
  ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* UnderlayRoute::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UnderlayRoute.status)
  
  ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* UnderlayRoute::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* UnderlayRoute::mutable_status() {
  ::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UnderlayRoute.status)
  return _msg;
}
inline void UnderlayRoute::set_allocated_status(::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::UnderlayRouteStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRoute.status)
}

// -------------------------------------------------------------------

// UnderlayRouteSpec

// .opi_api.common.v1.ObjectKey id = 1;
inline bool UnderlayRouteSpec::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool UnderlayRouteSpec::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& UnderlayRouteSpec::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& UnderlayRouteSpec::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.id)
  return _internal_id();
}
inline void UnderlayRouteSpec::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.id)
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteSpec::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteSpec::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteSpec::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteSpec::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.id)
  return _msg;
}
inline void UnderlayRouteSpec::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.id)
}

// .opi_api.common.v1.ObjectKey route_table_id = 2;
inline bool UnderlayRouteSpec::_internal_has_route_table_id() const {
  return this != internal_default_instance() && route_table_id_ != nullptr;
}
inline bool UnderlayRouteSpec::has_route_table_id() const {
  return _internal_has_route_table_id();
}
inline const ::opi_api::common::v1::ObjectKey& UnderlayRouteSpec::_internal_route_table_id() const {
  const ::opi_api::common::v1::ObjectKey* p = route_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& UnderlayRouteSpec::route_table_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.route_table_id)
  return _internal_route_table_id();
}
inline void UnderlayRouteSpec::unsafe_arena_set_allocated_route_table_id(
    ::opi_api::common::v1::ObjectKey* route_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_table_id_);
  }
  route_table_id_ = route_table_id;
  if (route_table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.route_table_id)
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteSpec::release_route_table_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = route_table_id_;
  route_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteSpec::unsafe_arena_release_route_table_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.route_table_id)
  
  ::opi_api::common::v1::ObjectKey* temp = route_table_id_;
  route_table_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteSpec::_internal_mutable_route_table_id() {
  
  if (route_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    route_table_id_ = p;
  }
  return route_table_id_;
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteSpec::mutable_route_table_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_route_table_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.route_table_id)
  return _msg;
}
inline void UnderlayRouteSpec::set_allocated_route_table_id(::opi_api::common::v1::ObjectKey* route_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_table_id_);
  }
  if (route_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_table_id));
    if (message_arena != submessage_arena) {
      route_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_table_id, submessage_arena);
    }
    
  } else {
    
  }
  route_table_id_ = route_table_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.route_table_id)
}

// .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 3;
inline bool UnderlayRouteSpec::_internal_has_dest_prefix() const {
  return this != internal_default_instance() && dest_prefix_ != nullptr;
}
inline bool UnderlayRouteSpec::has_dest_prefix() const {
  return _internal_has_dest_prefix();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& UnderlayRouteSpec::_internal_dest_prefix() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* p = dest_prefix_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPPrefix_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& UnderlayRouteSpec::dest_prefix() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.dest_prefix)
  return _internal_dest_prefix();
}
inline void UnderlayRouteSpec::unsafe_arena_set_allocated_dest_prefix(
    ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dest_prefix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_prefix_);
  }
  dest_prefix_ = dest_prefix;
  if (dest_prefix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.dest_prefix)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* UnderlayRouteSpec::release_dest_prefix() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* temp = dest_prefix_;
  dest_prefix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* UnderlayRouteSpec::unsafe_arena_release_dest_prefix() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.dest_prefix)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* temp = dest_prefix_;
  dest_prefix_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* UnderlayRouteSpec::_internal_mutable_dest_prefix() {
  
  if (dest_prefix_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPPrefix>(GetArenaForAllocation());
    dest_prefix_ = p;
  }
  return dest_prefix_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* UnderlayRouteSpec::mutable_dest_prefix() {
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* _msg = _internal_mutable_dest_prefix();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.dest_prefix)
  return _msg;
}
inline void UnderlayRouteSpec::set_allocated_dest_prefix(::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dest_prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_prefix_);
  }
  if (dest_prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_prefix));
    if (message_arena != submessage_arena) {
      dest_prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_prefix, submessage_arena);
    }
    
  } else {
    
  }
  dest_prefix_ = dest_prefix;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.dest_prefix)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 4;
inline bool UnderlayRouteSpec::_internal_has_next_hop_address() const {
  return this != internal_default_instance() && next_hop_address_ != nullptr;
}
inline bool UnderlayRouteSpec::has_next_hop_address() const {
  return _internal_has_next_hop_address();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& UnderlayRouteSpec::_internal_next_hop_address() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = next_hop_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& UnderlayRouteSpec::next_hop_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.next_hop_address)
  return _internal_next_hop_address();
}
inline void UnderlayRouteSpec::unsafe_arena_set_allocated_next_hop_address(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hop_address_);
  }
  next_hop_address_ = next_hop_address;
  if (next_hop_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.next_hop_address)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* UnderlayRouteSpec::release_next_hop_address() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = next_hop_address_;
  next_hop_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* UnderlayRouteSpec::unsafe_arena_release_next_hop_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.next_hop_address)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = next_hop_address_;
  next_hop_address_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* UnderlayRouteSpec::_internal_mutable_next_hop_address() {
  
  if (next_hop_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    next_hop_address_ = p;
  }
  return next_hop_address_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* UnderlayRouteSpec::mutable_next_hop_address() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_next_hop_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.next_hop_address)
  return _msg;
}
inline void UnderlayRouteSpec::set_allocated_next_hop_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hop_address_);
  }
  if (next_hop_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hop_address));
    if (message_arena != submessage_arena) {
      next_hop_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_hop_address, submessage_arena);
    }
    
  } else {
    
  }
  next_hop_address_ = next_hop_address;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.next_hop_address)
}

// .opi_api.network.opinetcommon.v1alpha1.AdminState state = 5;
inline void UnderlayRouteSpec::clear_state() {
  state_ = 0;
}
inline ::opi_api::network::opinetcommon::v1alpha1::AdminState UnderlayRouteSpec::_internal_state() const {
  return static_cast< ::opi_api::network::opinetcommon::v1alpha1::AdminState >(state_);
}
inline ::opi_api::network::opinetcommon::v1alpha1::AdminState UnderlayRouteSpec::state() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.state)
  return _internal_state();
}
inline void UnderlayRouteSpec::_internal_set_state(::opi_api::network::opinetcommon::v1alpha1::AdminState value) {
  
  state_ = value;
}
inline void UnderlayRouteSpec::set_state(::opi_api::network::opinetcommon::v1alpha1::AdminState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.state)
}

// bool enable_admin_distance = 6;
inline void UnderlayRouteSpec::clear_enable_admin_distance() {
  enable_admin_distance_ = false;
}
inline bool UnderlayRouteSpec::_internal_enable_admin_distance() const {
  return enable_admin_distance_;
}
inline bool UnderlayRouteSpec::enable_admin_distance() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.enable_admin_distance)
  return _internal_enable_admin_distance();
}
inline void UnderlayRouteSpec::_internal_set_enable_admin_distance(bool value) {
  
  enable_admin_distance_ = value;
}
inline void UnderlayRouteSpec::set_enable_admin_distance(bool value) {
  _internal_set_enable_admin_distance(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.enable_admin_distance)
}

// int32 admin_dist = 7;
inline void UnderlayRouteSpec::clear_admin_dist() {
  admin_dist_ = 0;
}
inline int32_t UnderlayRouteSpec::_internal_admin_dist() const {
  return admin_dist_;
}
inline int32_t UnderlayRouteSpec::admin_dist() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.admin_dist)
  return _internal_admin_dist();
}
inline void UnderlayRouteSpec::_internal_set_admin_dist(int32_t value) {
  
  admin_dist_ = value;
}
inline void UnderlayRouteSpec::set_admin_dist(int32_t value) {
  _internal_set_admin_dist(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.admin_dist)
}

// .opi_api.common.v1.ObjectKey interface_id = 8;
inline bool UnderlayRouteSpec::_internal_has_interface_id() const {
  return this != internal_default_instance() && interface_id_ != nullptr;
}
inline bool UnderlayRouteSpec::has_interface_id() const {
  return _internal_has_interface_id();
}
inline const ::opi_api::common::v1::ObjectKey& UnderlayRouteSpec::_internal_interface_id() const {
  const ::opi_api::common::v1::ObjectKey* p = interface_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& UnderlayRouteSpec::interface_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.interface_id)
  return _internal_interface_id();
}
inline void UnderlayRouteSpec::unsafe_arena_set_allocated_interface_id(
    ::opi_api::common::v1::ObjectKey* interface_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_id_);
  }
  interface_id_ = interface_id;
  if (interface_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.interface_id)
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteSpec::release_interface_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = interface_id_;
  interface_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteSpec::unsafe_arena_release_interface_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.interface_id)
  
  ::opi_api::common::v1::ObjectKey* temp = interface_id_;
  interface_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteSpec::_internal_mutable_interface_id() {
  
  if (interface_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    interface_id_ = p;
  }
  return interface_id_;
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteSpec::mutable_interface_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_interface_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.interface_id)
  return _msg;
}
inline void UnderlayRouteSpec::set_allocated_interface_id(::opi_api::common::v1::ObjectKey* interface_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_id_);
  }
  if (interface_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_id));
    if (message_arena != submessage_arena) {
      interface_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interface_id, submessage_arena);
    }
    
  } else {
    
  }
  interface_id_ = interface_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteSpec.interface_id)
}

// -------------------------------------------------------------------

// UnderlayRouteStatus

// int32 route_table_id = 1;
inline void UnderlayRouteStatus::clear_route_table_id() {
  route_table_id_ = 0;
}
inline int32_t UnderlayRouteStatus::_internal_route_table_id() const {
  return route_table_id_;
}
inline int32_t UnderlayRouteStatus::route_table_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.route_table_id)
  return _internal_route_table_id();
}
inline void UnderlayRouteStatus::_internal_set_route_table_id(int32_t value) {
  
  route_table_id_ = value;
}
inline void UnderlayRouteStatus::set_route_table_id(int32_t value) {
  _internal_set_route_table_id(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.route_table_id)
}

// .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
inline bool UnderlayRouteStatus::_internal_has_dest_prefix() const {
  return this != internal_default_instance() && dest_prefix_ != nullptr;
}
inline bool UnderlayRouteStatus::has_dest_prefix() const {
  return _internal_has_dest_prefix();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& UnderlayRouteStatus::_internal_dest_prefix() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* p = dest_prefix_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPPrefix_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& UnderlayRouteStatus::dest_prefix() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.dest_prefix)
  return _internal_dest_prefix();
}
inline void UnderlayRouteStatus::unsafe_arena_set_allocated_dest_prefix(
    ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dest_prefix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_prefix_);
  }
  dest_prefix_ = dest_prefix;
  if (dest_prefix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.dest_prefix)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* UnderlayRouteStatus::release_dest_prefix() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* temp = dest_prefix_;
  dest_prefix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* UnderlayRouteStatus::unsafe_arena_release_dest_prefix() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.dest_prefix)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* temp = dest_prefix_;
  dest_prefix_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* UnderlayRouteStatus::_internal_mutable_dest_prefix() {
  
  if (dest_prefix_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPPrefix>(GetArenaForAllocation());
    dest_prefix_ = p;
  }
  return dest_prefix_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* UnderlayRouteStatus::mutable_dest_prefix() {
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* _msg = _internal_mutable_dest_prefix();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.dest_prefix)
  return _msg;
}
inline void UnderlayRouteStatus::set_allocated_dest_prefix(::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dest_prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_prefix_);
  }
  if (dest_prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_prefix));
    if (message_arena != submessage_arena) {
      dest_prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_prefix, submessage_arena);
    }
    
  } else {
    
  }
  dest_prefix_ = dest_prefix;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.dest_prefix)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
inline bool UnderlayRouteStatus::_internal_has_next_hop_address() const {
  return this != internal_default_instance() && next_hop_address_ != nullptr;
}
inline bool UnderlayRouteStatus::has_next_hop_address() const {
  return _internal_has_next_hop_address();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& UnderlayRouteStatus::_internal_next_hop_address() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = next_hop_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& UnderlayRouteStatus::next_hop_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.next_hop_address)
  return _internal_next_hop_address();
}
inline void UnderlayRouteStatus::unsafe_arena_set_allocated_next_hop_address(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hop_address_);
  }
  next_hop_address_ = next_hop_address;
  if (next_hop_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.next_hop_address)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* UnderlayRouteStatus::release_next_hop_address() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = next_hop_address_;
  next_hop_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* UnderlayRouteStatus::unsafe_arena_release_next_hop_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.next_hop_address)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = next_hop_address_;
  next_hop_address_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* UnderlayRouteStatus::_internal_mutable_next_hop_address() {
  
  if (next_hop_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    next_hop_address_ = p;
  }
  return next_hop_address_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* UnderlayRouteStatus::mutable_next_hop_address() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_next_hop_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.next_hop_address)
  return _msg;
}
inline void UnderlayRouteStatus::set_allocated_next_hop_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hop_address_);
  }
  if (next_hop_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hop_address));
    if (message_arena != submessage_arena) {
      next_hop_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_hop_address, submessage_arena);
    }
    
  } else {
    
  }
  next_hop_address_ = next_hop_address;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.next_hop_address)
}

// int32 if_index = 5;
inline void UnderlayRouteStatus::clear_if_index() {
  if_index_ = 0;
}
inline int32_t UnderlayRouteStatus::_internal_if_index() const {
  return if_index_;
}
inline int32_t UnderlayRouteStatus::if_index() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.if_index)
  return _internal_if_index();
}
inline void UnderlayRouteStatus::_internal_set_if_index(int32_t value) {
  
  if_index_ = value;
}
inline void UnderlayRouteStatus::set_if_index(int32_t value) {
  _internal_set_if_index(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.if_index)
}

// .opi_api.network.opinetcommon.v1alpha1.RouteType type = 6;
inline void UnderlayRouteStatus::clear_type() {
  type_ = 0;
}
inline ::opi_api::network::opinetcommon::v1alpha1::RouteType UnderlayRouteStatus::_internal_type() const {
  return static_cast< ::opi_api::network::opinetcommon::v1alpha1::RouteType >(type_);
}
inline ::opi_api::network::opinetcommon::v1alpha1::RouteType UnderlayRouteStatus::type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.type)
  return _internal_type();
}
inline void UnderlayRouteStatus::_internal_set_type(::opi_api::network::opinetcommon::v1alpha1::RouteType value) {
  
  type_ = value;
}
inline void UnderlayRouteStatus::set_type(::opi_api::network::opinetcommon::v1alpha1::RouteType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.type)
}

// .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 7;
inline void UnderlayRouteStatus::clear_proto() {
  proto_ = 0;
}
inline ::opi_api::network::opinetcommon::v1alpha1::RouteProtocol UnderlayRouteStatus::_internal_proto() const {
  return static_cast< ::opi_api::network::opinetcommon::v1alpha1::RouteProtocol >(proto_);
}
inline ::opi_api::network::opinetcommon::v1alpha1::RouteProtocol UnderlayRouteStatus::proto() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.proto)
  return _internal_proto();
}
inline void UnderlayRouteStatus::_internal_set_proto(::opi_api::network::opinetcommon::v1alpha1::RouteProtocol value) {
  
  proto_ = value;
}
inline void UnderlayRouteStatus::set_proto(::opi_api::network::opinetcommon::v1alpha1::RouteProtocol value) {
  _internal_set_proto(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.proto)
}

// int32 age = 8;
inline void UnderlayRouteStatus::clear_age() {
  age_ = 0;
}
inline int32_t UnderlayRouteStatus::_internal_age() const {
  return age_;
}
inline int32_t UnderlayRouteStatus::age() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.age)
  return _internal_age();
}
inline void UnderlayRouteStatus::_internal_set_age(int32_t value) {
  
  age_ = value;
}
inline void UnderlayRouteStatus::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.age)
}

// int32 metric = 9;
inline void UnderlayRouteStatus::clear_metric() {
  metric_ = 0;
}
inline int32_t UnderlayRouteStatus::_internal_metric() const {
  return metric_;
}
inline int32_t UnderlayRouteStatus::metric() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.metric)
  return _internal_metric();
}
inline void UnderlayRouteStatus::_internal_set_metric(int32_t value) {
  
  metric_ = value;
}
inline void UnderlayRouteStatus::set_metric(int32_t value) {
  _internal_set_metric(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.metric)
}

// bool fib_route = 10;
inline void UnderlayRouteStatus::clear_fib_route() {
  fib_route_ = false;
}
inline bool UnderlayRouteStatus::_internal_fib_route() const {
  return fib_route_;
}
inline bool UnderlayRouteStatus::fib_route() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.fib_route)
  return _internal_fib_route();
}
inline void UnderlayRouteStatus::_internal_set_fib_route(bool value) {
  
  fib_route_ = value;
}
inline void UnderlayRouteStatus::set_fib_route(bool value) {
  _internal_set_fib_route(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.fib_route)
}

// bool connected = 11;
inline void UnderlayRouteStatus::clear_connected() {
  connected_ = false;
}
inline bool UnderlayRouteStatus::_internal_connected() const {
  return connected_;
}
inline bool UnderlayRouteStatus::connected() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.connected)
  return _internal_connected();
}
inline void UnderlayRouteStatus::_internal_set_connected(bool value) {
  
  connected_ = value;
}
inline void UnderlayRouteStatus::set_connected(bool value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.connected)
}

// int32 admin_distance = 12;
inline void UnderlayRouteStatus::clear_admin_distance() {
  admin_distance_ = 0;
}
inline int32_t UnderlayRouteStatus::_internal_admin_distance() const {
  return admin_distance_;
}
inline int32_t UnderlayRouteStatus::admin_distance() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.admin_distance)
  return _internal_admin_distance();
}
inline void UnderlayRouteStatus::_internal_set_admin_distance(int32_t value) {
  
  admin_distance_ = value;
}
inline void UnderlayRouteStatus::set_admin_distance(int32_t value) {
  _internal_set_admin_distance(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus.admin_distance)
}

// -------------------------------------------------------------------

// UnderlayRouteLookupKey

// .opi_api.common.v1.ObjectKey route_table_id = 1;
inline bool UnderlayRouteLookupKey::_internal_has_route_table_id() const {
  return this != internal_default_instance() && route_table_id_ != nullptr;
}
inline bool UnderlayRouteLookupKey::has_route_table_id() const {
  return _internal_has_route_table_id();
}
inline const ::opi_api::common::v1::ObjectKey& UnderlayRouteLookupKey::_internal_route_table_id() const {
  const ::opi_api::common::v1::ObjectKey* p = route_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& UnderlayRouteLookupKey::route_table_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.route_table_id)
  return _internal_route_table_id();
}
inline void UnderlayRouteLookupKey::unsafe_arena_set_allocated_route_table_id(
    ::opi_api::common::v1::ObjectKey* route_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_table_id_);
  }
  route_table_id_ = route_table_id;
  if (route_table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.route_table_id)
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteLookupKey::release_route_table_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = route_table_id_;
  route_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteLookupKey::unsafe_arena_release_route_table_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.route_table_id)
  
  ::opi_api::common::v1::ObjectKey* temp = route_table_id_;
  route_table_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteLookupKey::_internal_mutable_route_table_id() {
  
  if (route_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    route_table_id_ = p;
  }
  return route_table_id_;
}
inline ::opi_api::common::v1::ObjectKey* UnderlayRouteLookupKey::mutable_route_table_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_route_table_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.route_table_id)
  return _msg;
}
inline void UnderlayRouteLookupKey::set_allocated_route_table_id(::opi_api::common::v1::ObjectKey* route_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_table_id_);
  }
  if (route_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_table_id));
    if (message_arena != submessage_arena) {
      route_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_table_id, submessage_arena);
    }
    
  } else {
    
  }
  route_table_id_ = route_table_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.route_table_id)
}

// .opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;
inline bool UnderlayRouteLookupKey::_internal_has_dest_prefix() const {
  return this != internal_default_instance() && dest_prefix_ != nullptr;
}
inline bool UnderlayRouteLookupKey::has_dest_prefix() const {
  return _internal_has_dest_prefix();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& UnderlayRouteLookupKey::_internal_dest_prefix() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* p = dest_prefix_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPPrefix_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& UnderlayRouteLookupKey::dest_prefix() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.dest_prefix)
  return _internal_dest_prefix();
}
inline void UnderlayRouteLookupKey::unsafe_arena_set_allocated_dest_prefix(
    ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dest_prefix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_prefix_);
  }
  dest_prefix_ = dest_prefix;
  if (dest_prefix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.dest_prefix)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* UnderlayRouteLookupKey::release_dest_prefix() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* temp = dest_prefix_;
  dest_prefix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* UnderlayRouteLookupKey::unsafe_arena_release_dest_prefix() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.dest_prefix)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* temp = dest_prefix_;
  dest_prefix_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* UnderlayRouteLookupKey::_internal_mutable_dest_prefix() {
  
  if (dest_prefix_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPPrefix>(GetArenaForAllocation());
    dest_prefix_ = p;
  }
  return dest_prefix_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* UnderlayRouteLookupKey::mutable_dest_prefix() {
  ::opi_api::network::opinetcommon::v1alpha1::IPPrefix* _msg = _internal_mutable_dest_prefix();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.dest_prefix)
  return _msg;
}
inline void UnderlayRouteLookupKey::set_allocated_dest_prefix(::opi_api::network::opinetcommon::v1alpha1::IPPrefix* dest_prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_prefix_);
  }
  if (dest_prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_prefix));
    if (message_arena != submessage_arena) {
      dest_prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_prefix, submessage_arena);
    }
    
  } else {
    
  }
  dest_prefix_ = dest_prefix;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.dest_prefix)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;
inline bool UnderlayRouteLookupKey::_internal_has_next_hop_address() const {
  return this != internal_default_instance() && next_hop_address_ != nullptr;
}
inline bool UnderlayRouteLookupKey::has_next_hop_address() const {
  return _internal_has_next_hop_address();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& UnderlayRouteLookupKey::_internal_next_hop_address() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = next_hop_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& UnderlayRouteLookupKey::next_hop_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.next_hop_address)
  return _internal_next_hop_address();
}
inline void UnderlayRouteLookupKey::unsafe_arena_set_allocated_next_hop_address(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hop_address_);
  }
  next_hop_address_ = next_hop_address;
  if (next_hop_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.next_hop_address)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* UnderlayRouteLookupKey::release_next_hop_address() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = next_hop_address_;
  next_hop_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* UnderlayRouteLookupKey::unsafe_arena_release_next_hop_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.next_hop_address)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = next_hop_address_;
  next_hop_address_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* UnderlayRouteLookupKey::_internal_mutable_next_hop_address() {
  
  if (next_hop_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    next_hop_address_ = p;
  }
  return next_hop_address_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* UnderlayRouteLookupKey::mutable_next_hop_address() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_next_hop_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.next_hop_address)
  return _msg;
}
inline void UnderlayRouteLookupKey::set_allocated_next_hop_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* next_hop_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hop_address_);
  }
  if (next_hop_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_hop_address));
    if (message_arena != submessage_arena) {
      next_hop_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_hop_address, submessage_arena);
    }
    
  } else {
    
  }
  next_hop_address_ = next_hop_address;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.next_hop_address)
}

// int32 ifid = 4;
inline void UnderlayRouteLookupKey::clear_ifid() {
  ifid_ = 0;
}
inline int32_t UnderlayRouteLookupKey::_internal_ifid() const {
  return ifid_;
}
inline int32_t UnderlayRouteLookupKey::ifid() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.ifid)
  return _internal_ifid();
}
inline void UnderlayRouteLookupKey::_internal_set_ifid(int32_t value) {
  
  ifid_ = value;
}
inline void UnderlayRouteLookupKey::set_ifid(int32_t value) {
  _internal_set_ifid(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.ifid)
}

// .opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 6;
inline void UnderlayRouteLookupKey::clear_proto() {
  proto_ = 0;
}
inline ::opi_api::network::opinetcommon::v1alpha1::RouteProtocol UnderlayRouteLookupKey::_internal_proto() const {
  return static_cast< ::opi_api::network::opinetcommon::v1alpha1::RouteProtocol >(proto_);
}
inline ::opi_api::network::opinetcommon::v1alpha1::RouteProtocol UnderlayRouteLookupKey::proto() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.proto)
  return _internal_proto();
}
inline void UnderlayRouteLookupKey::_internal_set_proto(::opi_api::network::opinetcommon::v1alpha1::RouteProtocol value) {
  
  proto_ = value;
}
inline void UnderlayRouteLookupKey::set_proto(::opi_api::network::opinetcommon::v1alpha1::RouteProtocol value) {
  _internal_set_proto(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayRouteLookupKey.proto)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_underlayroute_2eproto
