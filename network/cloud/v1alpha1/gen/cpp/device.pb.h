// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_device_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_device_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "object_key.pb.h"
#include "networktypes.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_device_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_device_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_device_2eproto;
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class DeviceCapabilities;
struct DeviceCapabilitiesDefaultTypeInternal;
extern DeviceCapabilitiesDefaultTypeInternal _DeviceCapabilities_default_instance_;
class DeviceCapabilitiesDynamicRouting;
struct DeviceCapabilitiesDynamicRoutingDefaultTypeInternal;
extern DeviceCapabilitiesDynamicRoutingDefaultTypeInternal _DeviceCapabilitiesDynamicRouting_default_instance_;
class DeviceCapabilitiesNetworkPolicy;
struct DeviceCapabilitiesNetworkPolicyDefaultTypeInternal;
extern DeviceCapabilitiesNetworkPolicyDefaultTypeInternal _DeviceCapabilitiesNetworkPolicy_default_instance_;
class DeviceSpec;
struct DeviceSpecDefaultTypeInternal;
extern DeviceSpecDefaultTypeInternal _DeviceSpec_default_instance_;
class DeviceStatus;
struct DeviceStatusDefaultTypeInternal;
extern DeviceStatusDefaultTypeInternal _DeviceStatus_default_instance_;
class MgmtNetworkSpec;
struct MgmtNetworkSpecDefaultTypeInternal;
extern MgmtNetworkSpecDefaultTypeInternal _MgmtNetworkSpec_default_instance_;
class PCIeFunctionsSpec;
struct PCIeFunctionsSpecDefaultTypeInternal;
extern PCIeFunctionsSpecDefaultTypeInternal _PCIeFunctionsSpec_default_instance_;
class SystemAlert;
struct SystemAlertDefaultTypeInternal;
extern SystemAlertDefaultTypeInternal _SystemAlert_default_instance_;
class SystemEvent;
struct SystemEventDefaultTypeInternal;
extern SystemEventDefaultTypeInternal _SystemEvent_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::cloud::v1alpha1::Device* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Device>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeviceCapabilities* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeviceCapabilities>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeviceSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeviceSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DeviceStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeviceStatus>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SystemAlert* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SystemAlert>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SystemEvent* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SystemEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {

// ===================================================================

class DeviceCapabilities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeviceCapabilities) */ {
 public:
  inline DeviceCapabilities() : DeviceCapabilities(nullptr) {}
  ~DeviceCapabilities() override;
  explicit constexpr DeviceCapabilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceCapabilities(const DeviceCapabilities& from);
  DeviceCapabilities(DeviceCapabilities&& from) noexcept
    : DeviceCapabilities() {
    *this = ::std::move(from);
  }

  inline DeviceCapabilities& operator=(const DeviceCapabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceCapabilities& operator=(DeviceCapabilities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceCapabilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceCapabilities* internal_default_instance() {
    return reinterpret_cast<const DeviceCapabilities*>(
               &_DeviceCapabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceCapabilities& a, DeviceCapabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceCapabilities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceCapabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceCapabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceCapabilities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceCapabilities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceCapabilities& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceCapabilities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeviceCapabilities";
  }
  protected:
  explicit DeviceCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutingCapabiltiesFieldNumber = 1,
    kNetworkPolicyCapabilitiesFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting routing_capabilties = 1;
  bool has_routing_capabilties() const;
  private:
  bool _internal_has_routing_capabilties() const;
  public:
  void clear_routing_capabilties();
  const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting& routing_capabilties() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* release_routing_capabilties();
  ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* mutable_routing_capabilties();
  void set_allocated_routing_capabilties(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* routing_capabilties);
  private:
  const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting& _internal_routing_capabilties() const;
  ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* _internal_mutable_routing_capabilties();
  public:
  void unsafe_arena_set_allocated_routing_capabilties(
      ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* routing_capabilties);
  ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* unsafe_arena_release_routing_capabilties();

  // .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy network_policy_capabilities = 2;
  bool has_network_policy_capabilities() const;
  private:
  bool _internal_has_network_policy_capabilities() const;
  public:
  void clear_network_policy_capabilities();
  const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy& network_policy_capabilities() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* release_network_policy_capabilities();
  ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* mutable_network_policy_capabilities();
  void set_allocated_network_policy_capabilities(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* network_policy_capabilities);
  private:
  const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy& _internal_network_policy_capabilities() const;
  ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* _internal_mutable_network_policy_capabilities();
  public:
  void unsafe_arena_set_allocated_network_policy_capabilities(
      ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* network_policy_capabilities);
  ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* unsafe_arena_release_network_policy_capabilities();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeviceCapabilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* routing_capabilties_;
  ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* network_policy_capabilities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class DeviceCapabilitiesDynamicRouting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting) */ {
 public:
  inline DeviceCapabilitiesDynamicRouting() : DeviceCapabilitiesDynamicRouting(nullptr) {}
  ~DeviceCapabilitiesDynamicRouting() override;
  explicit constexpr DeviceCapabilitiesDynamicRouting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceCapabilitiesDynamicRouting(const DeviceCapabilitiesDynamicRouting& from);
  DeviceCapabilitiesDynamicRouting(DeviceCapabilitiesDynamicRouting&& from) noexcept
    : DeviceCapabilitiesDynamicRouting() {
    *this = ::std::move(from);
  }

  inline DeviceCapabilitiesDynamicRouting& operator=(const DeviceCapabilitiesDynamicRouting& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceCapabilitiesDynamicRouting& operator=(DeviceCapabilitiesDynamicRouting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceCapabilitiesDynamicRouting& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceCapabilitiesDynamicRouting* internal_default_instance() {
    return reinterpret_cast<const DeviceCapabilitiesDynamicRouting*>(
               &_DeviceCapabilitiesDynamicRouting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceCapabilitiesDynamicRouting& a, DeviceCapabilitiesDynamicRouting& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceCapabilitiesDynamicRouting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceCapabilitiesDynamicRouting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceCapabilitiesDynamicRouting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceCapabilitiesDynamicRouting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceCapabilitiesDynamicRouting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceCapabilitiesDynamicRouting& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceCapabilitiesDynamicRouting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting";
  }
  protected:
  explicit DeviceCapabilitiesDynamicRouting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnderlayBgpFieldNumber = 1,
  };
  // bool underlay_bgp = 1;
  void clear_underlay_bgp();
  bool underlay_bgp() const;
  void set_underlay_bgp(bool value);
  private:
  bool _internal_underlay_bgp() const;
  void _internal_set_underlay_bgp(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool underlay_bgp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class DeviceCapabilitiesNetworkPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy) */ {
 public:
  inline DeviceCapabilitiesNetworkPolicy() : DeviceCapabilitiesNetworkPolicy(nullptr) {}
  ~DeviceCapabilitiesNetworkPolicy() override;
  explicit constexpr DeviceCapabilitiesNetworkPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceCapabilitiesNetworkPolicy(const DeviceCapabilitiesNetworkPolicy& from);
  DeviceCapabilitiesNetworkPolicy(DeviceCapabilitiesNetworkPolicy&& from) noexcept
    : DeviceCapabilitiesNetworkPolicy() {
    *this = ::std::move(from);
  }

  inline DeviceCapabilitiesNetworkPolicy& operator=(const DeviceCapabilitiesNetworkPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceCapabilitiesNetworkPolicy& operator=(DeviceCapabilitiesNetworkPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceCapabilitiesNetworkPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceCapabilitiesNetworkPolicy* internal_default_instance() {
    return reinterpret_cast<const DeviceCapabilitiesNetworkPolicy*>(
               &_DeviceCapabilitiesNetworkPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceCapabilitiesNetworkPolicy& a, DeviceCapabilitiesNetworkPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceCapabilitiesNetworkPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceCapabilitiesNetworkPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceCapabilitiesNetworkPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceCapabilitiesNetworkPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceCapabilitiesNetworkPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceCapabilitiesNetworkPolicy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceCapabilitiesNetworkPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy";
  }
  protected:
  explicit DeviceCapabilitiesNetworkPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompactRulesFieldNumber = 1,
  };
  // bool compact_rules = 1;
  void clear_compact_rules();
  bool compact_rules() const;
  void set_compact_rules(bool value);
  private:
  bool _internal_compact_rules() const;
  void _internal_set_compact_rules(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool compact_rules_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class Device final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  ~Device() override;
  explicit constexpr Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Device& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Device& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.DeviceSpec spec = 1;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::DeviceSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::DeviceSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::DeviceSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::DeviceSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::DeviceSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::DeviceSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::DeviceSpec* spec);
  ::opi_api::network::cloud::v1alpha1::DeviceSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.DeviceStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::cloud::v1alpha1::DeviceStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::DeviceStatus* release_status();
  ::opi_api::network::cloud::v1alpha1::DeviceStatus* mutable_status();
  void set_allocated_status(::opi_api::network::cloud::v1alpha1::DeviceStatus* status);
  private:
  const ::opi_api::network::cloud::v1alpha1::DeviceStatus& _internal_status() const;
  ::opi_api::network::cloud::v1alpha1::DeviceStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::cloud::v1alpha1::DeviceStatus* status);
  ::opi_api::network::cloud::v1alpha1::DeviceStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::DeviceSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::DeviceStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class DeviceSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeviceSpec) */ {
 public:
  inline DeviceSpec() : DeviceSpec(nullptr) {}
  ~DeviceSpec() override;
  explicit constexpr DeviceSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceSpec(const DeviceSpec& from);
  DeviceSpec(DeviceSpec&& from) noexcept
    : DeviceSpec() {
    *this = ::std::move(from);
  }

  inline DeviceSpec& operator=(const DeviceSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceSpec& operator=(DeviceSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceSpec* internal_default_instance() {
    return reinterpret_cast<const DeviceSpec*>(
               &_DeviceSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeviceSpec& a, DeviceSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeviceSpec";
  }
  protected:
  explicit DeviceSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacAddrFieldNumber = 4,
    kSystemnameFieldNumber = 8,
    kIdFieldNumber = 1,
    kIpv4AddressFieldNumber = 2,
    kIpv6AddressFieldNumber = 3,
    kGatewayIpFieldNumber = 5,
    kPcieFunctionsFieldNumber = 6,
    kMgmtNetworkSpecFieldNumber = 9,
    kOverlayRoutingEnabledFieldNumber = 7,
  };
  // bytes mac_addr = 4;
  void clear_mac_addr();
  const std::string& mac_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac_addr();
  PROTOBUF_NODISCARD std::string* release_mac_addr();
  void set_allocated_mac_addr(std::string* mac_addr);
  private:
  const std::string& _internal_mac_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_addr(const std::string& value);
  std::string* _internal_mutable_mac_addr();
  public:

  // string systemname = 8;
  void clear_systemname();
  const std::string& systemname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_systemname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_systemname();
  PROTOBUF_NODISCARD std::string* release_systemname();
  void set_allocated_systemname(std::string* systemname);
  private:
  const std::string& _internal_systemname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_systemname(const std::string& value);
  std::string* _internal_mutable_systemname();
  public:

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv4_address = 2;
  bool has_ipv4_address() const;
  private:
  bool _internal_has_ipv4_address() const;
  public:
  void clear_ipv4_address();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& ipv4_address() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_ipv4_address();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_ipv4_address();
  void set_allocated_ipv4_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* ipv4_address);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_ipv4_address() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_ipv4_address();
  public:
  void unsafe_arena_set_allocated_ipv4_address(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* ipv4_address);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_ipv4_address();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv6_address = 3;
  bool has_ipv6_address() const;
  private:
  bool _internal_has_ipv6_address() const;
  public:
  void clear_ipv6_address();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& ipv6_address() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_ipv6_address();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_ipv6_address();
  void set_allocated_ipv6_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* ipv6_address);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_ipv6_address() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_ipv6_address();
  public:
  void unsafe_arena_set_allocated_ipv6_address(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* ipv6_address);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_ipv6_address();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 5;
  bool has_gateway_ip() const;
  private:
  bool _internal_has_gateway_ip() const;
  public:
  void clear_gateway_ip();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& gateway_ip() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_gateway_ip();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_gateway_ip();
  void set_allocated_gateway_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* gateway_ip);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_gateway_ip() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_gateway_ip();
  public:
  void unsafe_arena_set_allocated_gateway_ip(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* gateway_ip);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_gateway_ip();

  // .opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec pcie_functions = 6;
  bool has_pcie_functions() const;
  private:
  bool _internal_has_pcie_functions() const;
  public:
  void clear_pcie_functions();
  const ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec& pcie_functions() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* release_pcie_functions();
  ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* mutable_pcie_functions();
  void set_allocated_pcie_functions(::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* pcie_functions);
  private:
  const ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec& _internal_pcie_functions() const;
  ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* _internal_mutable_pcie_functions();
  public:
  void unsafe_arena_set_allocated_pcie_functions(
      ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* pcie_functions);
  ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* unsafe_arena_release_pcie_functions();

  // .opi_api.network.cloud.v1alpha1.MgmtNetworkSpec mgmt_network_spec = 9;
  bool has_mgmt_network_spec() const;
  private:
  bool _internal_has_mgmt_network_spec() const;
  public:
  void clear_mgmt_network_spec();
  const ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec& mgmt_network_spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* release_mgmt_network_spec();
  ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* mutable_mgmt_network_spec();
  void set_allocated_mgmt_network_spec(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* mgmt_network_spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec& _internal_mgmt_network_spec() const;
  ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* _internal_mutable_mgmt_network_spec();
  public:
  void unsafe_arena_set_allocated_mgmt_network_spec(
      ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* mgmt_network_spec);
  ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* unsafe_arena_release_mgmt_network_spec();

  // bool overlay_routing_enabled = 7;
  void clear_overlay_routing_enabled();
  bool overlay_routing_enabled() const;
  void set_overlay_routing_enabled(bool value);
  private:
  bool _internal_overlay_routing_enabled() const;
  void _internal_set_overlay_routing_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeviceSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr systemname_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* ipv4_address_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* ipv6_address_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* gateway_ip_;
  ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* pcie_functions_;
  ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* mgmt_network_spec_;
  bool overlay_routing_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class PCIeFunctionsSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec) */ {
 public:
  inline PCIeFunctionsSpec() : PCIeFunctionsSpec(nullptr) {}
  ~PCIeFunctionsSpec() override;
  explicit constexpr PCIeFunctionsSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PCIeFunctionsSpec(const PCIeFunctionsSpec& from);
  PCIeFunctionsSpec(PCIeFunctionsSpec&& from) noexcept
    : PCIeFunctionsSpec() {
    *this = ::std::move(from);
  }

  inline PCIeFunctionsSpec& operator=(const PCIeFunctionsSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline PCIeFunctionsSpec& operator=(PCIeFunctionsSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PCIeFunctionsSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const PCIeFunctionsSpec* internal_default_instance() {
    return reinterpret_cast<const PCIeFunctionsSpec*>(
               &_PCIeFunctionsSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PCIeFunctionsSpec& a, PCIeFunctionsSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(PCIeFunctionsSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PCIeFunctionsSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PCIeFunctionsSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PCIeFunctionsSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PCIeFunctionsSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PCIeFunctionsSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PCIeFunctionsSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec";
  }
  protected:
  explicit PCIeFunctionsSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPfCountFieldNumber = 5,
    kVfCountFieldNumber = 6,
  };
  // int32 pf_count = 5;
  void clear_pf_count();
  int32_t pf_count() const;
  void set_pf_count(int32_t value);
  private:
  int32_t _internal_pf_count() const;
  void _internal_set_pf_count(int32_t value);
  public:

  // int32 vf_count = 6;
  void clear_vf_count();
  int32_t vf_count() const;
  void set_vf_count(int32_t value);
  private:
  int32_t _internal_vf_count() const;
  void _internal_set_vf_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t pf_count_;
  int32_t vf_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class MgmtNetworkSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec) */ {
 public:
  inline MgmtNetworkSpec() : MgmtNetworkSpec(nullptr) {}
  ~MgmtNetworkSpec() override;
  explicit constexpr MgmtNetworkSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MgmtNetworkSpec(const MgmtNetworkSpec& from);
  MgmtNetworkSpec(MgmtNetworkSpec&& from) noexcept
    : MgmtNetworkSpec() {
    *this = ::std::move(from);
  }

  inline MgmtNetworkSpec& operator=(const MgmtNetworkSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline MgmtNetworkSpec& operator=(MgmtNetworkSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MgmtNetworkSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const MgmtNetworkSpec* internal_default_instance() {
    return reinterpret_cast<const MgmtNetworkSpec*>(
               &_MgmtNetworkSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MgmtNetworkSpec& a, MgmtNetworkSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(MgmtNetworkSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MgmtNetworkSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MgmtNetworkSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MgmtNetworkSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MgmtNetworkSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MgmtNetworkSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MgmtNetworkSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.MgmtNetworkSpec";
  }
  protected:
  explicit MgmtNetworkSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGatewayMacFieldNumber = 5,
    kLldpMgmtIpFieldNumber = 1,
    kMgmtIpFieldNumber = 2,
    kGatewayIpFieldNumber = 4,
    kVlanFieldNumber = 3,
  };
  // bytes gateway_mac = 5;
  void clear_gateway_mac();
  const std::string& gateway_mac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gateway_mac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gateway_mac();
  PROTOBUF_NODISCARD std::string* release_gateway_mac();
  void set_allocated_gateway_mac(std::string* gateway_mac);
  private:
  const std::string& _internal_gateway_mac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gateway_mac(const std::string& value);
  std::string* _internal_mutable_gateway_mac();
  public:

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress lldp_mgmt_ip = 1;
  bool has_lldp_mgmt_ip() const;
  private:
  bool _internal_has_lldp_mgmt_ip() const;
  public:
  void clear_lldp_mgmt_ip();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& lldp_mgmt_ip() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_lldp_mgmt_ip();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_lldp_mgmt_ip();
  void set_allocated_lldp_mgmt_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* lldp_mgmt_ip);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_lldp_mgmt_ip() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_lldp_mgmt_ip();
  public:
  void unsafe_arena_set_allocated_lldp_mgmt_ip(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* lldp_mgmt_ip);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_lldp_mgmt_ip();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress mgmt_ip = 2;
  bool has_mgmt_ip() const;
  private:
  bool _internal_has_mgmt_ip() const;
  public:
  void clear_mgmt_ip();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& mgmt_ip() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_mgmt_ip();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_mgmt_ip();
  void set_allocated_mgmt_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* mgmt_ip);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_mgmt_ip() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_mgmt_ip();
  public:
  void unsafe_arena_set_allocated_mgmt_ip(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mgmt_ip);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_mgmt_ip();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 4;
  bool has_gateway_ip() const;
  private:
  bool _internal_has_gateway_ip() const;
  public:
  void clear_gateway_ip();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& gateway_ip() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_gateway_ip();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_gateway_ip();
  void set_allocated_gateway_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* gateway_ip);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_gateway_ip() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_gateway_ip();
  public:
  void unsafe_arena_set_allocated_gateway_ip(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* gateway_ip);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_gateway_ip();

  // int32 vlan = 3;
  void clear_vlan();
  int32_t vlan() const;
  void set_vlan(int32_t value);
  private:
  int32_t _internal_vlan() const;
  void _internal_set_vlan(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gateway_mac_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* lldp_mgmt_ip_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mgmt_ip_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* gateway_ip_;
  int32_t vlan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class DeviceStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DeviceStatus) */ {
 public:
  inline DeviceStatus() : DeviceStatus(nullptr) {}
  ~DeviceStatus() override;
  explicit constexpr DeviceStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceStatus(const DeviceStatus& from);
  DeviceStatus(DeviceStatus&& from) noexcept
    : DeviceStatus() {
    *this = ::std::move(from);
  }

  inline DeviceStatus& operator=(const DeviceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceStatus& operator=(DeviceStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceStatus* internal_default_instance() {
    return reinterpret_cast<const DeviceStatus*>(
               &_DeviceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeviceStatus& a, DeviceStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DeviceStatus";
  }
  protected:
  explicit DeviceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCriticalEventsFieldNumber = 10,
    kAlertsFieldNumber = 11,
    kDescriptionFieldNumber = 1,
    kSystemMacAddressFieldNumber = 2,
    kVendorIdFieldNumber = 3,
    kChipTypeFieldNumber = 4,
    kOsVersionFieldNumber = 5,
    kPipelineFieldNumber = 9,
    kPciePortCountFieldNumber = 6,
    kPortCountFieldNumber = 7,
    kHostIfCountFieldNumber = 8,
  };
  // repeated .opi_api.network.cloud.v1alpha1.SystemEvent critical_events = 10;
  int critical_events_size() const;
  private:
  int _internal_critical_events_size() const;
  public:
  void clear_critical_events();
  ::opi_api::network::cloud::v1alpha1::SystemEvent* mutable_critical_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SystemEvent >*
      mutable_critical_events();
  private:
  const ::opi_api::network::cloud::v1alpha1::SystemEvent& _internal_critical_events(int index) const;
  ::opi_api::network::cloud::v1alpha1::SystemEvent* _internal_add_critical_events();
  public:
  const ::opi_api::network::cloud::v1alpha1::SystemEvent& critical_events(int index) const;
  ::opi_api::network::cloud::v1alpha1::SystemEvent* add_critical_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SystemEvent >&
      critical_events() const;

  // repeated .opi_api.network.cloud.v1alpha1.SystemAlert alerts = 11;
  int alerts_size() const;
  private:
  int _internal_alerts_size() const;
  public:
  void clear_alerts();
  ::opi_api::network::cloud::v1alpha1::SystemAlert* mutable_alerts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SystemAlert >*
      mutable_alerts();
  private:
  const ::opi_api::network::cloud::v1alpha1::SystemAlert& _internal_alerts(int index) const;
  ::opi_api::network::cloud::v1alpha1::SystemAlert* _internal_add_alerts();
  public:
  const ::opi_api::network::cloud::v1alpha1::SystemAlert& alerts(int index) const;
  ::opi_api::network::cloud::v1alpha1::SystemAlert* add_alerts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SystemAlert >&
      alerts() const;

  // string description = 1;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bytes system_mac_address = 2;
  void clear_system_mac_address();
  const std::string& system_mac_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_system_mac_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_system_mac_address();
  PROTOBUF_NODISCARD std::string* release_system_mac_address();
  void set_allocated_system_mac_address(std::string* system_mac_address);
  private:
  const std::string& _internal_system_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_system_mac_address(const std::string& value);
  std::string* _internal_mutable_system_mac_address();
  public:

  // string vendor_id = 3;
  void clear_vendor_id();
  const std::string& vendor_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vendor_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vendor_id();
  PROTOBUF_NODISCARD std::string* release_vendor_id();
  void set_allocated_vendor_id(std::string* vendor_id);
  private:
  const std::string& _internal_vendor_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor_id(const std::string& value);
  std::string* _internal_mutable_vendor_id();
  public:

  // string chip_type = 4;
  void clear_chip_type();
  const std::string& chip_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chip_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chip_type();
  PROTOBUF_NODISCARD std::string* release_chip_type();
  void set_allocated_chip_type(std::string* chip_type);
  private:
  const std::string& _internal_chip_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chip_type(const std::string& value);
  std::string* _internal_mutable_chip_type();
  public:

  // string os_version = 5;
  void clear_os_version();
  const std::string& os_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_os_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_os_version();
  PROTOBUF_NODISCARD std::string* release_os_version();
  void set_allocated_os_version(std::string* os_version);
  private:
  const std::string& _internal_os_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os_version(const std::string& value);
  std::string* _internal_mutable_os_version();
  public:

  // string pipeline = 9;
  void clear_pipeline();
  const std::string& pipeline() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pipeline(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pipeline();
  PROTOBUF_NODISCARD std::string* release_pipeline();
  void set_allocated_pipeline(std::string* pipeline);
  private:
  const std::string& _internal_pipeline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pipeline(const std::string& value);
  std::string* _internal_mutable_pipeline();
  public:

  // int32 pcie_port_count = 6;
  void clear_pcie_port_count();
  int32_t pcie_port_count() const;
  void set_pcie_port_count(int32_t value);
  private:
  int32_t _internal_pcie_port_count() const;
  void _internal_set_pcie_port_count(int32_t value);
  public:

  // int32 port_count = 7;
  void clear_port_count();
  int32_t port_count() const;
  void set_port_count(int32_t value);
  private:
  int32_t _internal_port_count() const;
  void _internal_set_port_count(int32_t value);
  public:

  // int32 host_if_count = 8;
  void clear_host_if_count();
  int32_t host_if_count() const;
  void set_host_if_count(int32_t value);
  private:
  int32_t _internal_host_if_count() const;
  void _internal_set_host_if_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DeviceStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SystemEvent > critical_events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SystemAlert > alerts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_mac_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chip_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pipeline_;
  int32_t pcie_port_count_;
  int32_t port_count_;
  int32_t host_if_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class SystemEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SystemEvent) */ {
 public:
  inline SystemEvent() : SystemEvent(nullptr) {}
  ~SystemEvent() override;
  explicit constexpr SystemEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemEvent(const SystemEvent& from);
  SystemEvent(SystemEvent&& from) noexcept
    : SystemEvent() {
    *this = ::std::move(from);
  }

  inline SystemEvent& operator=(const SystemEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemEvent& operator=(SystemEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemEvent* internal_default_instance() {
    return reinterpret_cast<const SystemEvent*>(
               &_SystemEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SystemEvent& a, SystemEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SystemEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SystemEvent";
  }
  protected:
  explicit SystemEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventDescriptionFieldNumber = 2,
    kEventTimeFieldNumber = 1,
  };
  // string event_description = 2;
  void clear_event_description();
  const std::string& event_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_description();
  PROTOBUF_NODISCARD std::string* release_event_description();
  void set_allocated_event_description(std::string* event_description);
  private:
  const std::string& _internal_event_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_description(const std::string& value);
  std::string* _internal_mutable_event_description();
  public:

  // .google.protobuf.Timestamp event_time = 1;
  bool has_event_time() const;
  private:
  bool _internal_has_event_time() const;
  public:
  void clear_event_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& event_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_event_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_event_time();
  void set_allocated_event_time(::PROTOBUF_NAMESPACE_ID::Timestamp* event_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_event_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_event_time();
  public:
  void unsafe_arena_set_allocated_event_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* event_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_event_time();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SystemEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_description_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* event_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class SystemAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SystemAlert) */ {
 public:
  inline SystemAlert() : SystemAlert(nullptr) {}
  ~SystemAlert() override;
  explicit constexpr SystemAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemAlert(const SystemAlert& from);
  SystemAlert(SystemAlert&& from) noexcept
    : SystemAlert() {
    *this = ::std::move(from);
  }

  inline SystemAlert& operator=(const SystemAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemAlert& operator=(SystemAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemAlert* internal_default_instance() {
    return reinterpret_cast<const SystemAlert*>(
               &_SystemAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SystemAlert& a, SystemAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SystemAlert& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SystemAlert";
  }
  protected:
  explicit SystemAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlertDescriptionFieldNumber = 2,
    kAlertTimeFieldNumber = 1,
  };
  // string alert_description = 2;
  void clear_alert_description();
  const std::string& alert_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alert_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alert_description();
  PROTOBUF_NODISCARD std::string* release_alert_description();
  void set_allocated_alert_description(std::string* alert_description);
  private:
  const std::string& _internal_alert_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alert_description(const std::string& value);
  std::string* _internal_mutable_alert_description();
  public:

  // .google.protobuf.Timestamp alert_time = 1;
  bool has_alert_time() const;
  private:
  bool _internal_has_alert_time() const;
  public:
  void clear_alert_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& alert_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_alert_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_alert_time();
  void set_allocated_alert_time(::PROTOBUF_NAMESPACE_ID::Timestamp* alert_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_alert_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_alert_time();
  public:
  void unsafe_arena_set_allocated_alert_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* alert_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_alert_time();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SystemAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alert_description_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* alert_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_device_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceCapabilities

// .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting routing_capabilties = 1;
inline bool DeviceCapabilities::_internal_has_routing_capabilties() const {
  return this != internal_default_instance() && routing_capabilties_ != nullptr;
}
inline bool DeviceCapabilities::has_routing_capabilties() const {
  return _internal_has_routing_capabilties();
}
inline void DeviceCapabilities::clear_routing_capabilties() {
  if (GetArenaForAllocation() == nullptr && routing_capabilties_ != nullptr) {
    delete routing_capabilties_;
  }
  routing_capabilties_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting& DeviceCapabilities::_internal_routing_capabilties() const {
  const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* p = routing_capabilties_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting&>(
      ::opi_api::network::cloud::v1alpha1::_DeviceCapabilitiesDynamicRouting_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting& DeviceCapabilities::routing_capabilties() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceCapabilities.routing_capabilties)
  return _internal_routing_capabilties();
}
inline void DeviceCapabilities::unsafe_arena_set_allocated_routing_capabilties(
    ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* routing_capabilties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_capabilties_);
  }
  routing_capabilties_ = routing_capabilties;
  if (routing_capabilties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.DeviceCapabilities.routing_capabilties)
}
inline ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* DeviceCapabilities::release_routing_capabilties() {
  
  ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* temp = routing_capabilties_;
  routing_capabilties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* DeviceCapabilities::unsafe_arena_release_routing_capabilties() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceCapabilities.routing_capabilties)
  
  ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* temp = routing_capabilties_;
  routing_capabilties_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* DeviceCapabilities::_internal_mutable_routing_capabilties() {
  
  if (routing_capabilties_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting>(GetArenaForAllocation());
    routing_capabilties_ = p;
  }
  return routing_capabilties_;
}
inline ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* DeviceCapabilities::mutable_routing_capabilties() {
  ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* _msg = _internal_mutable_routing_capabilties();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceCapabilities.routing_capabilties)
  return _msg;
}
inline void DeviceCapabilities::set_allocated_routing_capabilties(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting* routing_capabilties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete routing_capabilties_;
  }
  if (routing_capabilties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesDynamicRouting>::GetOwningArena(routing_capabilties);
    if (message_arena != submessage_arena) {
      routing_capabilties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_capabilties, submessage_arena);
    }
    
  } else {
    
  }
  routing_capabilties_ = routing_capabilties;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceCapabilities.routing_capabilties)
}

// .opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy network_policy_capabilities = 2;
inline bool DeviceCapabilities::_internal_has_network_policy_capabilities() const {
  return this != internal_default_instance() && network_policy_capabilities_ != nullptr;
}
inline bool DeviceCapabilities::has_network_policy_capabilities() const {
  return _internal_has_network_policy_capabilities();
}
inline void DeviceCapabilities::clear_network_policy_capabilities() {
  if (GetArenaForAllocation() == nullptr && network_policy_capabilities_ != nullptr) {
    delete network_policy_capabilities_;
  }
  network_policy_capabilities_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy& DeviceCapabilities::_internal_network_policy_capabilities() const {
  const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* p = network_policy_capabilities_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy&>(
      ::opi_api::network::cloud::v1alpha1::_DeviceCapabilitiesNetworkPolicy_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy& DeviceCapabilities::network_policy_capabilities() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceCapabilities.network_policy_capabilities)
  return _internal_network_policy_capabilities();
}
inline void DeviceCapabilities::unsafe_arena_set_allocated_network_policy_capabilities(
    ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* network_policy_capabilities) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_policy_capabilities_);
  }
  network_policy_capabilities_ = network_policy_capabilities;
  if (network_policy_capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.DeviceCapabilities.network_policy_capabilities)
}
inline ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* DeviceCapabilities::release_network_policy_capabilities() {
  
  ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* temp = network_policy_capabilities_;
  network_policy_capabilities_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* DeviceCapabilities::unsafe_arena_release_network_policy_capabilities() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceCapabilities.network_policy_capabilities)
  
  ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* temp = network_policy_capabilities_;
  network_policy_capabilities_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* DeviceCapabilities::_internal_mutable_network_policy_capabilities() {
  
  if (network_policy_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy>(GetArenaForAllocation());
    network_policy_capabilities_ = p;
  }
  return network_policy_capabilities_;
}
inline ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* DeviceCapabilities::mutable_network_policy_capabilities() {
  ::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* _msg = _internal_mutable_network_policy_capabilities();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceCapabilities.network_policy_capabilities)
  return _msg;
}
inline void DeviceCapabilities::set_allocated_network_policy_capabilities(::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy* network_policy_capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete network_policy_capabilities_;
  }
  if (network_policy_capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::DeviceCapabilitiesNetworkPolicy>::GetOwningArena(network_policy_capabilities);
    if (message_arena != submessage_arena) {
      network_policy_capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_policy_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  network_policy_capabilities_ = network_policy_capabilities;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceCapabilities.network_policy_capabilities)
}

// -------------------------------------------------------------------

// DeviceCapabilitiesDynamicRouting

// bool underlay_bgp = 1;
inline void DeviceCapabilitiesDynamicRouting::clear_underlay_bgp() {
  underlay_bgp_ = false;
}
inline bool DeviceCapabilitiesDynamicRouting::_internal_underlay_bgp() const {
  return underlay_bgp_;
}
inline bool DeviceCapabilitiesDynamicRouting::underlay_bgp() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting.underlay_bgp)
  return _internal_underlay_bgp();
}
inline void DeviceCapabilitiesDynamicRouting::_internal_set_underlay_bgp(bool value) {
  
  underlay_bgp_ = value;
}
inline void DeviceCapabilitiesDynamicRouting::set_underlay_bgp(bool value) {
  _internal_set_underlay_bgp(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesDynamicRouting.underlay_bgp)
}

// -------------------------------------------------------------------

// DeviceCapabilitiesNetworkPolicy

// bool compact_rules = 1;
inline void DeviceCapabilitiesNetworkPolicy::clear_compact_rules() {
  compact_rules_ = false;
}
inline bool DeviceCapabilitiesNetworkPolicy::_internal_compact_rules() const {
  return compact_rules_;
}
inline bool DeviceCapabilitiesNetworkPolicy::compact_rules() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy.compact_rules)
  return _internal_compact_rules();
}
inline void DeviceCapabilitiesNetworkPolicy::_internal_set_compact_rules(bool value) {
  
  compact_rules_ = value;
}
inline void DeviceCapabilitiesNetworkPolicy::set_compact_rules(bool value) {
  _internal_set_compact_rules(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeviceCapabilitiesNetworkPolicy.compact_rules)
}

// -------------------------------------------------------------------

// Device

// .opi_api.network.cloud.v1alpha1.DeviceSpec spec = 1;
inline bool Device::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool Device::has_spec() const {
  return _internal_has_spec();
}
inline void Device::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::DeviceSpec& Device::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::DeviceSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::DeviceSpec&>(
      ::opi_api::network::cloud::v1alpha1::_DeviceSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::DeviceSpec& Device::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.Device.spec)
  return _internal_spec();
}
inline void Device::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::DeviceSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.Device.spec)
}
inline ::opi_api::network::cloud::v1alpha1::DeviceSpec* Device::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::DeviceSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::DeviceSpec* Device::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.Device.spec)
  
  ::opi_api::network::cloud::v1alpha1::DeviceSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::DeviceSpec* Device::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeviceSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::DeviceSpec* Device::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::DeviceSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.Device.spec)
  return _msg;
}
inline void Device::set_allocated_spec(::opi_api::network::cloud::v1alpha1::DeviceSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::DeviceSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.Device.spec)
}

// .opi_api.network.cloud.v1alpha1.DeviceStatus status = 2;
inline bool Device::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Device::has_status() const {
  return _internal_has_status();
}
inline void Device::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::DeviceStatus& Device::_internal_status() const {
  const ::opi_api::network::cloud::v1alpha1::DeviceStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::DeviceStatus&>(
      ::opi_api::network::cloud::v1alpha1::_DeviceStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::DeviceStatus& Device::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.Device.status)
  return _internal_status();
}
inline void Device::unsafe_arena_set_allocated_status(
    ::opi_api::network::cloud::v1alpha1::DeviceStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.Device.status)
}
inline ::opi_api::network::cloud::v1alpha1::DeviceStatus* Device::release_status() {
  
  ::opi_api::network::cloud::v1alpha1::DeviceStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::DeviceStatus* Device::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.Device.status)
  
  ::opi_api::network::cloud::v1alpha1::DeviceStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::DeviceStatus* Device::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DeviceStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::cloud::v1alpha1::DeviceStatus* Device::mutable_status() {
  ::opi_api::network::cloud::v1alpha1::DeviceStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.Device.status)
  return _msg;
}
inline void Device::set_allocated_status(::opi_api::network::cloud::v1alpha1::DeviceStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::DeviceStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.Device.status)
}

// -------------------------------------------------------------------

// DeviceSpec

// .opi_api.common.v1.ObjectKey id = 1;
inline bool DeviceSpec::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool DeviceSpec::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& DeviceSpec::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& DeviceSpec::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceSpec.id)
  return _internal_id();
}
inline void DeviceSpec::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.DeviceSpec.id)
}
inline ::opi_api::common::v1::ObjectKey* DeviceSpec::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* DeviceSpec::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceSpec.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* DeviceSpec::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* DeviceSpec::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceSpec.id)
  return _msg;
}
inline void DeviceSpec::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceSpec.id)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv4_address = 2;
inline bool DeviceSpec::_internal_has_ipv4_address() const {
  return this != internal_default_instance() && ipv4_address_ != nullptr;
}
inline bool DeviceSpec::has_ipv4_address() const {
  return _internal_has_ipv4_address();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& DeviceSpec::_internal_ipv4_address() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = ipv4_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& DeviceSpec::ipv4_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceSpec.ipv4_address)
  return _internal_ipv4_address();
}
inline void DeviceSpec::unsafe_arena_set_allocated_ipv4_address(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* ipv4_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipv4_address_);
  }
  ipv4_address_ = ipv4_address;
  if (ipv4_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.DeviceSpec.ipv4_address)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* DeviceSpec::release_ipv4_address() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = ipv4_address_;
  ipv4_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* DeviceSpec::unsafe_arena_release_ipv4_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceSpec.ipv4_address)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = ipv4_address_;
  ipv4_address_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* DeviceSpec::_internal_mutable_ipv4_address() {
  
  if (ipv4_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    ipv4_address_ = p;
  }
  return ipv4_address_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* DeviceSpec::mutable_ipv4_address() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_ipv4_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceSpec.ipv4_address)
  return _msg;
}
inline void DeviceSpec::set_allocated_ipv4_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* ipv4_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipv4_address_);
  }
  if (ipv4_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipv4_address));
    if (message_arena != submessage_arena) {
      ipv4_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipv4_address, submessage_arena);
    }
    
  } else {
    
  }
  ipv4_address_ = ipv4_address;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceSpec.ipv4_address)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress ipv6_address = 3;
inline bool DeviceSpec::_internal_has_ipv6_address() const {
  return this != internal_default_instance() && ipv6_address_ != nullptr;
}
inline bool DeviceSpec::has_ipv6_address() const {
  return _internal_has_ipv6_address();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& DeviceSpec::_internal_ipv6_address() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = ipv6_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& DeviceSpec::ipv6_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceSpec.ipv6_address)
  return _internal_ipv6_address();
}
inline void DeviceSpec::unsafe_arena_set_allocated_ipv6_address(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* ipv6_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipv6_address_);
  }
  ipv6_address_ = ipv6_address;
  if (ipv6_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.DeviceSpec.ipv6_address)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* DeviceSpec::release_ipv6_address() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = ipv6_address_;
  ipv6_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* DeviceSpec::unsafe_arena_release_ipv6_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceSpec.ipv6_address)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = ipv6_address_;
  ipv6_address_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* DeviceSpec::_internal_mutable_ipv6_address() {
  
  if (ipv6_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    ipv6_address_ = p;
  }
  return ipv6_address_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* DeviceSpec::mutable_ipv6_address() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_ipv6_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceSpec.ipv6_address)
  return _msg;
}
inline void DeviceSpec::set_allocated_ipv6_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* ipv6_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipv6_address_);
  }
  if (ipv6_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipv6_address));
    if (message_arena != submessage_arena) {
      ipv6_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipv6_address, submessage_arena);
    }
    
  } else {
    
  }
  ipv6_address_ = ipv6_address;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceSpec.ipv6_address)
}

// bytes mac_addr = 4;
inline void DeviceSpec::clear_mac_addr() {
  mac_addr_.ClearToEmpty();
}
inline const std::string& DeviceSpec::mac_addr() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceSpec.mac_addr)
  return _internal_mac_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceSpec::set_mac_addr(ArgT0&& arg0, ArgT... args) {
 
 mac_addr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeviceSpec.mac_addr)
}
inline std::string* DeviceSpec::mutable_mac_addr() {
  std::string* _s = _internal_mutable_mac_addr();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceSpec.mac_addr)
  return _s;
}
inline const std::string& DeviceSpec::_internal_mac_addr() const {
  return mac_addr_.Get();
}
inline void DeviceSpec::_internal_set_mac_addr(const std::string& value) {
  
  mac_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceSpec::_internal_mutable_mac_addr() {
  
  return mac_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceSpec::release_mac_addr() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceSpec.mac_addr)
  return mac_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceSpec::set_allocated_mac_addr(std::string* mac_addr) {
  if (mac_addr != nullptr) {
    
  } else {
    
  }
  mac_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_addr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_addr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceSpec.mac_addr)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 5;
inline bool DeviceSpec::_internal_has_gateway_ip() const {
  return this != internal_default_instance() && gateway_ip_ != nullptr;
}
inline bool DeviceSpec::has_gateway_ip() const {
  return _internal_has_gateway_ip();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& DeviceSpec::_internal_gateway_ip() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = gateway_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& DeviceSpec::gateway_ip() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceSpec.gateway_ip)
  return _internal_gateway_ip();
}
inline void DeviceSpec::unsafe_arena_set_allocated_gateway_ip(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* gateway_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gateway_ip_);
  }
  gateway_ip_ = gateway_ip;
  if (gateway_ip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.DeviceSpec.gateway_ip)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* DeviceSpec::release_gateway_ip() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = gateway_ip_;
  gateway_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* DeviceSpec::unsafe_arena_release_gateway_ip() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceSpec.gateway_ip)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = gateway_ip_;
  gateway_ip_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* DeviceSpec::_internal_mutable_gateway_ip() {
  
  if (gateway_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    gateway_ip_ = p;
  }
  return gateway_ip_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* DeviceSpec::mutable_gateway_ip() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_gateway_ip();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceSpec.gateway_ip)
  return _msg;
}
inline void DeviceSpec::set_allocated_gateway_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* gateway_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gateway_ip_);
  }
  if (gateway_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gateway_ip));
    if (message_arena != submessage_arena) {
      gateway_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gateway_ip, submessage_arena);
    }
    
  } else {
    
  }
  gateway_ip_ = gateway_ip;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceSpec.gateway_ip)
}

// .opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec pcie_functions = 6;
inline bool DeviceSpec::_internal_has_pcie_functions() const {
  return this != internal_default_instance() && pcie_functions_ != nullptr;
}
inline bool DeviceSpec::has_pcie_functions() const {
  return _internal_has_pcie_functions();
}
inline void DeviceSpec::clear_pcie_functions() {
  if (GetArenaForAllocation() == nullptr && pcie_functions_ != nullptr) {
    delete pcie_functions_;
  }
  pcie_functions_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec& DeviceSpec::_internal_pcie_functions() const {
  const ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* p = pcie_functions_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec&>(
      ::opi_api::network::cloud::v1alpha1::_PCIeFunctionsSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec& DeviceSpec::pcie_functions() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceSpec.pcie_functions)
  return _internal_pcie_functions();
}
inline void DeviceSpec::unsafe_arena_set_allocated_pcie_functions(
    ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* pcie_functions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pcie_functions_);
  }
  pcie_functions_ = pcie_functions;
  if (pcie_functions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.DeviceSpec.pcie_functions)
}
inline ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* DeviceSpec::release_pcie_functions() {
  
  ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* temp = pcie_functions_;
  pcie_functions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* DeviceSpec::unsafe_arena_release_pcie_functions() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceSpec.pcie_functions)
  
  ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* temp = pcie_functions_;
  pcie_functions_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* DeviceSpec::_internal_mutable_pcie_functions() {
  
  if (pcie_functions_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec>(GetArenaForAllocation());
    pcie_functions_ = p;
  }
  return pcie_functions_;
}
inline ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* DeviceSpec::mutable_pcie_functions() {
  ::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* _msg = _internal_mutable_pcie_functions();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceSpec.pcie_functions)
  return _msg;
}
inline void DeviceSpec::set_allocated_pcie_functions(::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec* pcie_functions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pcie_functions_;
  }
  if (pcie_functions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::PCIeFunctionsSpec>::GetOwningArena(pcie_functions);
    if (message_arena != submessage_arena) {
      pcie_functions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pcie_functions, submessage_arena);
    }
    
  } else {
    
  }
  pcie_functions_ = pcie_functions;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceSpec.pcie_functions)
}

// bool overlay_routing_enabled = 7;
inline void DeviceSpec::clear_overlay_routing_enabled() {
  overlay_routing_enabled_ = false;
}
inline bool DeviceSpec::_internal_overlay_routing_enabled() const {
  return overlay_routing_enabled_;
}
inline bool DeviceSpec::overlay_routing_enabled() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceSpec.overlay_routing_enabled)
  return _internal_overlay_routing_enabled();
}
inline void DeviceSpec::_internal_set_overlay_routing_enabled(bool value) {
  
  overlay_routing_enabled_ = value;
}
inline void DeviceSpec::set_overlay_routing_enabled(bool value) {
  _internal_set_overlay_routing_enabled(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeviceSpec.overlay_routing_enabled)
}

// string systemname = 8;
inline void DeviceSpec::clear_systemname() {
  systemname_.ClearToEmpty();
}
inline const std::string& DeviceSpec::systemname() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceSpec.systemname)
  return _internal_systemname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceSpec::set_systemname(ArgT0&& arg0, ArgT... args) {
 
 systemname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeviceSpec.systemname)
}
inline std::string* DeviceSpec::mutable_systemname() {
  std::string* _s = _internal_mutable_systemname();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceSpec.systemname)
  return _s;
}
inline const std::string& DeviceSpec::_internal_systemname() const {
  return systemname_.Get();
}
inline void DeviceSpec::_internal_set_systemname(const std::string& value) {
  
  systemname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceSpec::_internal_mutable_systemname() {
  
  return systemname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceSpec::release_systemname() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceSpec.systemname)
  return systemname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceSpec::set_allocated_systemname(std::string* systemname) {
  if (systemname != nullptr) {
    
  } else {
    
  }
  systemname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), systemname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (systemname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    systemname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceSpec.systemname)
}

// .opi_api.network.cloud.v1alpha1.MgmtNetworkSpec mgmt_network_spec = 9;
inline bool DeviceSpec::_internal_has_mgmt_network_spec() const {
  return this != internal_default_instance() && mgmt_network_spec_ != nullptr;
}
inline bool DeviceSpec::has_mgmt_network_spec() const {
  return _internal_has_mgmt_network_spec();
}
inline void DeviceSpec::clear_mgmt_network_spec() {
  if (GetArenaForAllocation() == nullptr && mgmt_network_spec_ != nullptr) {
    delete mgmt_network_spec_;
  }
  mgmt_network_spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec& DeviceSpec::_internal_mgmt_network_spec() const {
  const ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* p = mgmt_network_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec&>(
      ::opi_api::network::cloud::v1alpha1::_MgmtNetworkSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec& DeviceSpec::mgmt_network_spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceSpec.mgmt_network_spec)
  return _internal_mgmt_network_spec();
}
inline void DeviceSpec::unsafe_arena_set_allocated_mgmt_network_spec(
    ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* mgmt_network_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mgmt_network_spec_);
  }
  mgmt_network_spec_ = mgmt_network_spec;
  if (mgmt_network_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.DeviceSpec.mgmt_network_spec)
}
inline ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* DeviceSpec::release_mgmt_network_spec() {
  
  ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* temp = mgmt_network_spec_;
  mgmt_network_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* DeviceSpec::unsafe_arena_release_mgmt_network_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceSpec.mgmt_network_spec)
  
  ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* temp = mgmt_network_spec_;
  mgmt_network_spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* DeviceSpec::_internal_mutable_mgmt_network_spec() {
  
  if (mgmt_network_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec>(GetArenaForAllocation());
    mgmt_network_spec_ = p;
  }
  return mgmt_network_spec_;
}
inline ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* DeviceSpec::mutable_mgmt_network_spec() {
  ::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* _msg = _internal_mutable_mgmt_network_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceSpec.mgmt_network_spec)
  return _msg;
}
inline void DeviceSpec::set_allocated_mgmt_network_spec(::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec* mgmt_network_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mgmt_network_spec_;
  }
  if (mgmt_network_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::MgmtNetworkSpec>::GetOwningArena(mgmt_network_spec);
    if (message_arena != submessage_arena) {
      mgmt_network_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mgmt_network_spec, submessage_arena);
    }
    
  } else {
    
  }
  mgmt_network_spec_ = mgmt_network_spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceSpec.mgmt_network_spec)
}

// -------------------------------------------------------------------

// PCIeFunctionsSpec

// int32 pf_count = 5;
inline void PCIeFunctionsSpec::clear_pf_count() {
  pf_count_ = 0;
}
inline int32_t PCIeFunctionsSpec::_internal_pf_count() const {
  return pf_count_;
}
inline int32_t PCIeFunctionsSpec::pf_count() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec.pf_count)
  return _internal_pf_count();
}
inline void PCIeFunctionsSpec::_internal_set_pf_count(int32_t value) {
  
  pf_count_ = value;
}
inline void PCIeFunctionsSpec::set_pf_count(int32_t value) {
  _internal_set_pf_count(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec.pf_count)
}

// int32 vf_count = 6;
inline void PCIeFunctionsSpec::clear_vf_count() {
  vf_count_ = 0;
}
inline int32_t PCIeFunctionsSpec::_internal_vf_count() const {
  return vf_count_;
}
inline int32_t PCIeFunctionsSpec::vf_count() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec.vf_count)
  return _internal_vf_count();
}
inline void PCIeFunctionsSpec::_internal_set_vf_count(int32_t value) {
  
  vf_count_ = value;
}
inline void PCIeFunctionsSpec::set_vf_count(int32_t value) {
  _internal_set_vf_count(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.PCIeFunctionsSpec.vf_count)
}

// -------------------------------------------------------------------

// MgmtNetworkSpec

// .opi_api.network.opinetcommon.v1alpha1.IPAddress lldp_mgmt_ip = 1;
inline bool MgmtNetworkSpec::_internal_has_lldp_mgmt_ip() const {
  return this != internal_default_instance() && lldp_mgmt_ip_ != nullptr;
}
inline bool MgmtNetworkSpec::has_lldp_mgmt_ip() const {
  return _internal_has_lldp_mgmt_ip();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& MgmtNetworkSpec::_internal_lldp_mgmt_ip() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = lldp_mgmt_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& MgmtNetworkSpec::lldp_mgmt_ip() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.lldp_mgmt_ip)
  return _internal_lldp_mgmt_ip();
}
inline void MgmtNetworkSpec::unsafe_arena_set_allocated_lldp_mgmt_ip(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* lldp_mgmt_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lldp_mgmt_ip_);
  }
  lldp_mgmt_ip_ = lldp_mgmt_ip;
  if (lldp_mgmt_ip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.lldp_mgmt_ip)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* MgmtNetworkSpec::release_lldp_mgmt_ip() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = lldp_mgmt_ip_;
  lldp_mgmt_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* MgmtNetworkSpec::unsafe_arena_release_lldp_mgmt_ip() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.lldp_mgmt_ip)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = lldp_mgmt_ip_;
  lldp_mgmt_ip_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* MgmtNetworkSpec::_internal_mutable_lldp_mgmt_ip() {
  
  if (lldp_mgmt_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    lldp_mgmt_ip_ = p;
  }
  return lldp_mgmt_ip_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* MgmtNetworkSpec::mutable_lldp_mgmt_ip() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_lldp_mgmt_ip();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.lldp_mgmt_ip)
  return _msg;
}
inline void MgmtNetworkSpec::set_allocated_lldp_mgmt_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* lldp_mgmt_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lldp_mgmt_ip_);
  }
  if (lldp_mgmt_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lldp_mgmt_ip));
    if (message_arena != submessage_arena) {
      lldp_mgmt_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lldp_mgmt_ip, submessage_arena);
    }
    
  } else {
    
  }
  lldp_mgmt_ip_ = lldp_mgmt_ip;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.lldp_mgmt_ip)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress mgmt_ip = 2;
inline bool MgmtNetworkSpec::_internal_has_mgmt_ip() const {
  return this != internal_default_instance() && mgmt_ip_ != nullptr;
}
inline bool MgmtNetworkSpec::has_mgmt_ip() const {
  return _internal_has_mgmt_ip();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& MgmtNetworkSpec::_internal_mgmt_ip() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = mgmt_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& MgmtNetworkSpec::mgmt_ip() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.mgmt_ip)
  return _internal_mgmt_ip();
}
inline void MgmtNetworkSpec::unsafe_arena_set_allocated_mgmt_ip(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mgmt_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mgmt_ip_);
  }
  mgmt_ip_ = mgmt_ip;
  if (mgmt_ip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.mgmt_ip)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* MgmtNetworkSpec::release_mgmt_ip() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = mgmt_ip_;
  mgmt_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* MgmtNetworkSpec::unsafe_arena_release_mgmt_ip() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.mgmt_ip)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = mgmt_ip_;
  mgmt_ip_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* MgmtNetworkSpec::_internal_mutable_mgmt_ip() {
  
  if (mgmt_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    mgmt_ip_ = p;
  }
  return mgmt_ip_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* MgmtNetworkSpec::mutable_mgmt_ip() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_mgmt_ip();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.mgmt_ip)
  return _msg;
}
inline void MgmtNetworkSpec::set_allocated_mgmt_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* mgmt_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mgmt_ip_);
  }
  if (mgmt_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mgmt_ip));
    if (message_arena != submessage_arena) {
      mgmt_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mgmt_ip, submessage_arena);
    }
    
  } else {
    
  }
  mgmt_ip_ = mgmt_ip;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.mgmt_ip)
}

// int32 vlan = 3;
inline void MgmtNetworkSpec::clear_vlan() {
  vlan_ = 0;
}
inline int32_t MgmtNetworkSpec::_internal_vlan() const {
  return vlan_;
}
inline int32_t MgmtNetworkSpec::vlan() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.vlan)
  return _internal_vlan();
}
inline void MgmtNetworkSpec::_internal_set_vlan(int32_t value) {
  
  vlan_ = value;
}
inline void MgmtNetworkSpec::set_vlan(int32_t value) {
  _internal_set_vlan(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.vlan)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 4;
inline bool MgmtNetworkSpec::_internal_has_gateway_ip() const {
  return this != internal_default_instance() && gateway_ip_ != nullptr;
}
inline bool MgmtNetworkSpec::has_gateway_ip() const {
  return _internal_has_gateway_ip();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& MgmtNetworkSpec::_internal_gateway_ip() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = gateway_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& MgmtNetworkSpec::gateway_ip() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.gateway_ip)
  return _internal_gateway_ip();
}
inline void MgmtNetworkSpec::unsafe_arena_set_allocated_gateway_ip(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* gateway_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gateway_ip_);
  }
  gateway_ip_ = gateway_ip;
  if (gateway_ip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.gateway_ip)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* MgmtNetworkSpec::release_gateway_ip() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = gateway_ip_;
  gateway_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* MgmtNetworkSpec::unsafe_arena_release_gateway_ip() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.gateway_ip)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = gateway_ip_;
  gateway_ip_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* MgmtNetworkSpec::_internal_mutable_gateway_ip() {
  
  if (gateway_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    gateway_ip_ = p;
  }
  return gateway_ip_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* MgmtNetworkSpec::mutable_gateway_ip() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_gateway_ip();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.gateway_ip)
  return _msg;
}
inline void MgmtNetworkSpec::set_allocated_gateway_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* gateway_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gateway_ip_);
  }
  if (gateway_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gateway_ip));
    if (message_arena != submessage_arena) {
      gateway_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gateway_ip, submessage_arena);
    }
    
  } else {
    
  }
  gateway_ip_ = gateway_ip;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.gateway_ip)
}

// bytes gateway_mac = 5;
inline void MgmtNetworkSpec::clear_gateway_mac() {
  gateway_mac_.ClearToEmpty();
}
inline const std::string& MgmtNetworkSpec::gateway_mac() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.gateway_mac)
  return _internal_gateway_mac();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MgmtNetworkSpec::set_gateway_mac(ArgT0&& arg0, ArgT... args) {
 
 gateway_mac_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.gateway_mac)
}
inline std::string* MgmtNetworkSpec::mutable_gateway_mac() {
  std::string* _s = _internal_mutable_gateway_mac();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.gateway_mac)
  return _s;
}
inline const std::string& MgmtNetworkSpec::_internal_gateway_mac() const {
  return gateway_mac_.Get();
}
inline void MgmtNetworkSpec::_internal_set_gateway_mac(const std::string& value) {
  
  gateway_mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MgmtNetworkSpec::_internal_mutable_gateway_mac() {
  
  return gateway_mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MgmtNetworkSpec::release_gateway_mac() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.gateway_mac)
  return gateway_mac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MgmtNetworkSpec::set_allocated_gateway_mac(std::string* gateway_mac) {
  if (gateway_mac != nullptr) {
    
  } else {
    
  }
  gateway_mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gateway_mac,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gateway_mac_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gateway_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec.gateway_mac)
}

// -------------------------------------------------------------------

// DeviceStatus

// string description = 1;
inline void DeviceStatus::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& DeviceStatus::description() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceStatus.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceStatus::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeviceStatus.description)
}
inline std::string* DeviceStatus::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceStatus.description)
  return _s;
}
inline const std::string& DeviceStatus::_internal_description() const {
  return description_.Get();
}
inline void DeviceStatus::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceStatus::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceStatus::release_description() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceStatus.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceStatus::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceStatus.description)
}

// bytes system_mac_address = 2;
inline void DeviceStatus::clear_system_mac_address() {
  system_mac_address_.ClearToEmpty();
}
inline const std::string& DeviceStatus::system_mac_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceStatus.system_mac_address)
  return _internal_system_mac_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceStatus::set_system_mac_address(ArgT0&& arg0, ArgT... args) {
 
 system_mac_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeviceStatus.system_mac_address)
}
inline std::string* DeviceStatus::mutable_system_mac_address() {
  std::string* _s = _internal_mutable_system_mac_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceStatus.system_mac_address)
  return _s;
}
inline const std::string& DeviceStatus::_internal_system_mac_address() const {
  return system_mac_address_.Get();
}
inline void DeviceStatus::_internal_set_system_mac_address(const std::string& value) {
  
  system_mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceStatus::_internal_mutable_system_mac_address() {
  
  return system_mac_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceStatus::release_system_mac_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceStatus.system_mac_address)
  return system_mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceStatus::set_allocated_system_mac_address(std::string* system_mac_address) {
  if (system_mac_address != nullptr) {
    
  } else {
    
  }
  system_mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), system_mac_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (system_mac_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    system_mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceStatus.system_mac_address)
}

// string vendor_id = 3;
inline void DeviceStatus::clear_vendor_id() {
  vendor_id_.ClearToEmpty();
}
inline const std::string& DeviceStatus::vendor_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceStatus.vendor_id)
  return _internal_vendor_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceStatus::set_vendor_id(ArgT0&& arg0, ArgT... args) {
 
 vendor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeviceStatus.vendor_id)
}
inline std::string* DeviceStatus::mutable_vendor_id() {
  std::string* _s = _internal_mutable_vendor_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceStatus.vendor_id)
  return _s;
}
inline const std::string& DeviceStatus::_internal_vendor_id() const {
  return vendor_id_.Get();
}
inline void DeviceStatus::_internal_set_vendor_id(const std::string& value) {
  
  vendor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceStatus::_internal_mutable_vendor_id() {
  
  return vendor_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceStatus::release_vendor_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceStatus.vendor_id)
  return vendor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceStatus::set_allocated_vendor_id(std::string* vendor_id) {
  if (vendor_id != nullptr) {
    
  } else {
    
  }
  vendor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vendor_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vendor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceStatus.vendor_id)
}

// string chip_type = 4;
inline void DeviceStatus::clear_chip_type() {
  chip_type_.ClearToEmpty();
}
inline const std::string& DeviceStatus::chip_type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceStatus.chip_type)
  return _internal_chip_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceStatus::set_chip_type(ArgT0&& arg0, ArgT... args) {
 
 chip_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeviceStatus.chip_type)
}
inline std::string* DeviceStatus::mutable_chip_type() {
  std::string* _s = _internal_mutable_chip_type();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceStatus.chip_type)
  return _s;
}
inline const std::string& DeviceStatus::_internal_chip_type() const {
  return chip_type_.Get();
}
inline void DeviceStatus::_internal_set_chip_type(const std::string& value) {
  
  chip_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceStatus::_internal_mutable_chip_type() {
  
  return chip_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceStatus::release_chip_type() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceStatus.chip_type)
  return chip_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceStatus::set_allocated_chip_type(std::string* chip_type) {
  if (chip_type != nullptr) {
    
  } else {
    
  }
  chip_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chip_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chip_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chip_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceStatus.chip_type)
}

// string os_version = 5;
inline void DeviceStatus::clear_os_version() {
  os_version_.ClearToEmpty();
}
inline const std::string& DeviceStatus::os_version() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceStatus.os_version)
  return _internal_os_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceStatus::set_os_version(ArgT0&& arg0, ArgT... args) {
 
 os_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeviceStatus.os_version)
}
inline std::string* DeviceStatus::mutable_os_version() {
  std::string* _s = _internal_mutable_os_version();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceStatus.os_version)
  return _s;
}
inline const std::string& DeviceStatus::_internal_os_version() const {
  return os_version_.Get();
}
inline void DeviceStatus::_internal_set_os_version(const std::string& value) {
  
  os_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceStatus::_internal_mutable_os_version() {
  
  return os_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceStatus::release_os_version() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceStatus.os_version)
  return os_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceStatus::set_allocated_os_version(std::string* os_version) {
  if (os_version != nullptr) {
    
  } else {
    
  }
  os_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (os_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    os_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceStatus.os_version)
}

// int32 pcie_port_count = 6;
inline void DeviceStatus::clear_pcie_port_count() {
  pcie_port_count_ = 0;
}
inline int32_t DeviceStatus::_internal_pcie_port_count() const {
  return pcie_port_count_;
}
inline int32_t DeviceStatus::pcie_port_count() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceStatus.pcie_port_count)
  return _internal_pcie_port_count();
}
inline void DeviceStatus::_internal_set_pcie_port_count(int32_t value) {
  
  pcie_port_count_ = value;
}
inline void DeviceStatus::set_pcie_port_count(int32_t value) {
  _internal_set_pcie_port_count(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeviceStatus.pcie_port_count)
}

// int32 port_count = 7;
inline void DeviceStatus::clear_port_count() {
  port_count_ = 0;
}
inline int32_t DeviceStatus::_internal_port_count() const {
  return port_count_;
}
inline int32_t DeviceStatus::port_count() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceStatus.port_count)
  return _internal_port_count();
}
inline void DeviceStatus::_internal_set_port_count(int32_t value) {
  
  port_count_ = value;
}
inline void DeviceStatus::set_port_count(int32_t value) {
  _internal_set_port_count(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeviceStatus.port_count)
}

// int32 host_if_count = 8;
inline void DeviceStatus::clear_host_if_count() {
  host_if_count_ = 0;
}
inline int32_t DeviceStatus::_internal_host_if_count() const {
  return host_if_count_;
}
inline int32_t DeviceStatus::host_if_count() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceStatus.host_if_count)
  return _internal_host_if_count();
}
inline void DeviceStatus::_internal_set_host_if_count(int32_t value) {
  
  host_if_count_ = value;
}
inline void DeviceStatus::set_host_if_count(int32_t value) {
  _internal_set_host_if_count(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeviceStatus.host_if_count)
}

// string pipeline = 9;
inline void DeviceStatus::clear_pipeline() {
  pipeline_.ClearToEmpty();
}
inline const std::string& DeviceStatus::pipeline() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceStatus.pipeline)
  return _internal_pipeline();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceStatus::set_pipeline(ArgT0&& arg0, ArgT... args) {
 
 pipeline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DeviceStatus.pipeline)
}
inline std::string* DeviceStatus::mutable_pipeline() {
  std::string* _s = _internal_mutable_pipeline();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceStatus.pipeline)
  return _s;
}
inline const std::string& DeviceStatus::_internal_pipeline() const {
  return pipeline_.Get();
}
inline void DeviceStatus::_internal_set_pipeline(const std::string& value) {
  
  pipeline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceStatus::_internal_mutable_pipeline() {
  
  return pipeline_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceStatus::release_pipeline() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.DeviceStatus.pipeline)
  return pipeline_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceStatus::set_allocated_pipeline(std::string* pipeline) {
  if (pipeline != nullptr) {
    
  } else {
    
  }
  pipeline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pipeline,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pipeline_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pipeline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.DeviceStatus.pipeline)
}

// repeated .opi_api.network.cloud.v1alpha1.SystemEvent critical_events = 10;
inline int DeviceStatus::_internal_critical_events_size() const {
  return critical_events_.size();
}
inline int DeviceStatus::critical_events_size() const {
  return _internal_critical_events_size();
}
inline void DeviceStatus::clear_critical_events() {
  critical_events_.Clear();
}
inline ::opi_api::network::cloud::v1alpha1::SystemEvent* DeviceStatus::mutable_critical_events(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceStatus.critical_events)
  return critical_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SystemEvent >*
DeviceStatus::mutable_critical_events() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.DeviceStatus.critical_events)
  return &critical_events_;
}
inline const ::opi_api::network::cloud::v1alpha1::SystemEvent& DeviceStatus::_internal_critical_events(int index) const {
  return critical_events_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::SystemEvent& DeviceStatus::critical_events(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceStatus.critical_events)
  return _internal_critical_events(index);
}
inline ::opi_api::network::cloud::v1alpha1::SystemEvent* DeviceStatus::_internal_add_critical_events() {
  return critical_events_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::SystemEvent* DeviceStatus::add_critical_events() {
  ::opi_api::network::cloud::v1alpha1::SystemEvent* _add = _internal_add_critical_events();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.DeviceStatus.critical_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SystemEvent >&
DeviceStatus::critical_events() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.DeviceStatus.critical_events)
  return critical_events_;
}

// repeated .opi_api.network.cloud.v1alpha1.SystemAlert alerts = 11;
inline int DeviceStatus::_internal_alerts_size() const {
  return alerts_.size();
}
inline int DeviceStatus::alerts_size() const {
  return _internal_alerts_size();
}
inline void DeviceStatus::clear_alerts() {
  alerts_.Clear();
}
inline ::opi_api::network::cloud::v1alpha1::SystemAlert* DeviceStatus::mutable_alerts(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.DeviceStatus.alerts)
  return alerts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SystemAlert >*
DeviceStatus::mutable_alerts() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.DeviceStatus.alerts)
  return &alerts_;
}
inline const ::opi_api::network::cloud::v1alpha1::SystemAlert& DeviceStatus::_internal_alerts(int index) const {
  return alerts_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::SystemAlert& DeviceStatus::alerts(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DeviceStatus.alerts)
  return _internal_alerts(index);
}
inline ::opi_api::network::cloud::v1alpha1::SystemAlert* DeviceStatus::_internal_add_alerts() {
  return alerts_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::SystemAlert* DeviceStatus::add_alerts() {
  ::opi_api::network::cloud::v1alpha1::SystemAlert* _add = _internal_add_alerts();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.DeviceStatus.alerts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SystemAlert >&
DeviceStatus::alerts() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.DeviceStatus.alerts)
  return alerts_;
}

// -------------------------------------------------------------------

// SystemEvent

// .google.protobuf.Timestamp event_time = 1;
inline bool SystemEvent::_internal_has_event_time() const {
  return this != internal_default_instance() && event_time_ != nullptr;
}
inline bool SystemEvent::has_event_time() const {
  return _internal_has_event_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SystemEvent::_internal_event_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = event_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SystemEvent::event_time() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SystemEvent.event_time)
  return _internal_event_time();
}
inline void SystemEvent::unsafe_arena_set_allocated_event_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* event_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_time_);
  }
  event_time_ = event_time;
  if (event_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SystemEvent.event_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SystemEvent::release_event_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = event_time_;
  event_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SystemEvent::unsafe_arena_release_event_time() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SystemEvent.event_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = event_time_;
  event_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SystemEvent::_internal_mutable_event_time() {
  
  if (event_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    event_time_ = p;
  }
  return event_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SystemEvent::mutable_event_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_event_time();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SystemEvent.event_time)
  return _msg;
}
inline void SystemEvent::set_allocated_event_time(::PROTOBUF_NAMESPACE_ID::Timestamp* event_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_time_);
  }
  if (event_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_time));
    if (message_arena != submessage_arena) {
      event_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_time, submessage_arena);
    }
    
  } else {
    
  }
  event_time_ = event_time;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SystemEvent.event_time)
}

// string event_description = 2;
inline void SystemEvent::clear_event_description() {
  event_description_.ClearToEmpty();
}
inline const std::string& SystemEvent::event_description() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SystemEvent.event_description)
  return _internal_event_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemEvent::set_event_description(ArgT0&& arg0, ArgT... args) {
 
 event_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SystemEvent.event_description)
}
inline std::string* SystemEvent::mutable_event_description() {
  std::string* _s = _internal_mutable_event_description();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SystemEvent.event_description)
  return _s;
}
inline const std::string& SystemEvent::_internal_event_description() const {
  return event_description_.Get();
}
inline void SystemEvent::_internal_set_event_description(const std::string& value) {
  
  event_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemEvent::_internal_mutable_event_description() {
  
  return event_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemEvent::release_event_description() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SystemEvent.event_description)
  return event_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemEvent::set_allocated_event_description(std::string* event_description) {
  if (event_description != nullptr) {
    
  } else {
    
  }
  event_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (event_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    event_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SystemEvent.event_description)
}

// -------------------------------------------------------------------

// SystemAlert

// .google.protobuf.Timestamp alert_time = 1;
inline bool SystemAlert::_internal_has_alert_time() const {
  return this != internal_default_instance() && alert_time_ != nullptr;
}
inline bool SystemAlert::has_alert_time() const {
  return _internal_has_alert_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SystemAlert::_internal_alert_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = alert_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SystemAlert::alert_time() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SystemAlert.alert_time)
  return _internal_alert_time();
}
inline void SystemAlert::unsafe_arena_set_allocated_alert_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* alert_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alert_time_);
  }
  alert_time_ = alert_time;
  if (alert_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SystemAlert.alert_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SystemAlert::release_alert_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = alert_time_;
  alert_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SystemAlert::unsafe_arena_release_alert_time() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SystemAlert.alert_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = alert_time_;
  alert_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SystemAlert::_internal_mutable_alert_time() {
  
  if (alert_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    alert_time_ = p;
  }
  return alert_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SystemAlert::mutable_alert_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_alert_time();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SystemAlert.alert_time)
  return _msg;
}
inline void SystemAlert::set_allocated_alert_time(::PROTOBUF_NAMESPACE_ID::Timestamp* alert_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alert_time_);
  }
  if (alert_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alert_time));
    if (message_arena != submessage_arena) {
      alert_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alert_time, submessage_arena);
    }
    
  } else {
    
  }
  alert_time_ = alert_time;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SystemAlert.alert_time)
}

// string alert_description = 2;
inline void SystemAlert::clear_alert_description() {
  alert_description_.ClearToEmpty();
}
inline const std::string& SystemAlert::alert_description() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SystemAlert.alert_description)
  return _internal_alert_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemAlert::set_alert_description(ArgT0&& arg0, ArgT... args) {
 
 alert_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SystemAlert.alert_description)
}
inline std::string* SystemAlert::mutable_alert_description() {
  std::string* _s = _internal_mutable_alert_description();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SystemAlert.alert_description)
  return _s;
}
inline const std::string& SystemAlert::_internal_alert_description() const {
  return alert_description_.Get();
}
inline void SystemAlert::_internal_set_alert_description(const std::string& value) {
  
  alert_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemAlert::_internal_mutable_alert_description() {
  
  return alert_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemAlert::release_alert_description() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SystemAlert.alert_description)
  return alert_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemAlert::set_allocated_alert_description(std::string* alert_description) {
  if (alert_description != nullptr) {
    
  } else {
    
  }
  alert_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alert_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (alert_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    alert_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SystemAlert.alert_description)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_device_2eproto
