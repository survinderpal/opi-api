// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "object_key.pb.h"
#include "networktypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vpc_2eproto;
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
class VPCPeer;
struct VPCPeerDefaultTypeInternal;
extern VPCPeerDefaultTypeInternal _VPCPeer_default_instance_;
class VPCPeerSpec;
struct VPCPeerSpecDefaultTypeInternal;
extern VPCPeerSpecDefaultTypeInternal _VPCPeerSpec_default_instance_;
class VPCPeerStatus;
struct VPCPeerStatusDefaultTypeInternal;
extern VPCPeerStatusDefaultTypeInternal _VPCPeerStatus_default_instance_;
class Vpc;
struct VpcDefaultTypeInternal;
extern VpcDefaultTypeInternal _Vpc_default_instance_;
class VpcSpec;
struct VpcSpecDefaultTypeInternal;
extern VpcSpecDefaultTypeInternal _VpcSpec_default_instance_;
class VpcStatus;
struct VpcStatusDefaultTypeInternal;
extern VpcStatusDefaultTypeInternal _VpcStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::cloud::v1alpha1::VPCPeer* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::VPCPeer>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::VPCPeerSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::VPCPeerStatus>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::Vpc* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::Vpc>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::VpcSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::VpcSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::VpcStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::VpcStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {

enum VPCType : int {
  VPC_TYPE_UNSPECIFIED = 0,
  VPC_TYPE_UNDERLAY = 1,
  VPC_TYPE_TENANT = 2,
  VPC_TYPE_CONTROL = 3,
  VPCType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VPCType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VPCType_IsValid(int value);
constexpr VPCType VPCType_MIN = VPC_TYPE_UNSPECIFIED;
constexpr VPCType VPCType_MAX = VPC_TYPE_CONTROL;
constexpr int VPCType_ARRAYSIZE = VPCType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VPCType_descriptor();
template<typename T>
inline const std::string& VPCType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VPCType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VPCType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VPCType_descriptor(), enum_t_value);
}
inline bool VPCType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VPCType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VPCType>(
    VPCType_descriptor(), name, value);
}
// ===================================================================

class Vpc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.Vpc) */ {
 public:
  inline Vpc() : Vpc(nullptr) {}
  ~Vpc() override;
  explicit constexpr Vpc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vpc(const Vpc& from);
  Vpc(Vpc&& from) noexcept
    : Vpc() {
    *this = ::std::move(from);
  }

  inline Vpc& operator=(const Vpc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vpc& operator=(Vpc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vpc& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vpc* internal_default_instance() {
    return reinterpret_cast<const Vpc*>(
               &_Vpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vpc& a, Vpc& b) {
    a.Swap(&b);
  }
  inline void Swap(Vpc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vpc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vpc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vpc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vpc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vpc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vpc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.Vpc";
  }
  protected:
  explicit Vpc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.VpcSpec spec = 1;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::VpcSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::VpcSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::VpcSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::VpcSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::VpcSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::VpcSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::VpcSpec* spec);
  ::opi_api::network::cloud::v1alpha1::VpcSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.VpcStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::cloud::v1alpha1::VpcStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::VpcStatus* release_status();
  ::opi_api::network::cloud::v1alpha1::VpcStatus* mutable_status();
  void set_allocated_status(::opi_api::network::cloud::v1alpha1::VpcStatus* status);
  private:
  const ::opi_api::network::cloud::v1alpha1::VpcStatus& _internal_status() const;
  ::opi_api::network::cloud::v1alpha1::VpcStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::cloud::v1alpha1::VpcStatus* status);
  ::opi_api::network::cloud::v1alpha1::VpcStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.Vpc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::VpcSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::VpcStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vpc_2eproto;
};
// -------------------------------------------------------------------

class VpcSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.VpcSpec) */ {
 public:
  inline VpcSpec() : VpcSpec(nullptr) {}
  ~VpcSpec() override;
  explicit constexpr VpcSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VpcSpec(const VpcSpec& from);
  VpcSpec(VpcSpec&& from) noexcept
    : VpcSpec() {
    *this = ::std::move(from);
  }

  inline VpcSpec& operator=(const VpcSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline VpcSpec& operator=(VpcSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VpcSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const VpcSpec* internal_default_instance() {
    return reinterpret_cast<const VpcSpec*>(
               &_VpcSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VpcSpec& a, VpcSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(VpcSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VpcSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VpcSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VpcSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VpcSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VpcSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VpcSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.VpcSpec";
  }
  protected:
  explicit VpcSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIngressV4SecurityPolicyIdFieldNumber = 5,
    kIngressV6SecurityPolicyIdFieldNumber = 6,
    kEgressV4SecurityPolicyIdFieldNumber = 7,
    kEgressV6SecurityPolicyIdFieldNumber = 8,
    kVirtualRouterMacFieldNumber = 9,
    kIdFieldNumber = 1,
    kV4RouteTableIdFieldNumber = 3,
    kV6RouteTableIdFieldNumber = 4,
    kFabricEncapFieldNumber = 10,
    kTypeFieldNumber = 2,
    kTosFieldNumber = 13,
  };
  // repeated .opi_api.common.v1.ObjectKey ingress_v4_security_policy_id = 5;
  int ingress_v4_security_policy_id_size() const;
  private:
  int _internal_ingress_v4_security_policy_id_size() const;
  public:
  void clear_ingress_v4_security_policy_id();
  ::opi_api::common::v1::ObjectKey* mutable_ingress_v4_security_policy_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
      mutable_ingress_v4_security_policy_id();
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_ingress_v4_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* _internal_add_ingress_v4_security_policy_id();
  public:
  const ::opi_api::common::v1::ObjectKey& ingress_v4_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* add_ingress_v4_security_policy_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
      ingress_v4_security_policy_id() const;

  // repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 6;
  int ingress_v6_security_policy_id_size() const;
  private:
  int _internal_ingress_v6_security_policy_id_size() const;
  public:
  void clear_ingress_v6_security_policy_id();
  ::opi_api::common::v1::ObjectKey* mutable_ingress_v6_security_policy_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
      mutable_ingress_v6_security_policy_id();
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_ingress_v6_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* _internal_add_ingress_v6_security_policy_id();
  public:
  const ::opi_api::common::v1::ObjectKey& ingress_v6_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* add_ingress_v6_security_policy_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
      ingress_v6_security_policy_id() const;

  // repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 7;
  int egress_v4_security_policy_id_size() const;
  private:
  int _internal_egress_v4_security_policy_id_size() const;
  public:
  void clear_egress_v4_security_policy_id();
  ::opi_api::common::v1::ObjectKey* mutable_egress_v4_security_policy_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
      mutable_egress_v4_security_policy_id();
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_egress_v4_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* _internal_add_egress_v4_security_policy_id();
  public:
  const ::opi_api::common::v1::ObjectKey& egress_v4_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* add_egress_v4_security_policy_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
      egress_v4_security_policy_id() const;

  // repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 8;
  int egress_v6_security_policy_id_size() const;
  private:
  int _internal_egress_v6_security_policy_id_size() const;
  public:
  void clear_egress_v6_security_policy_id();
  ::opi_api::common::v1::ObjectKey* mutable_egress_v6_security_policy_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
      mutable_egress_v6_security_policy_id();
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_egress_v6_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* _internal_add_egress_v6_security_policy_id();
  public:
  const ::opi_api::common::v1::ObjectKey& egress_v6_security_policy_id(int index) const;
  ::opi_api::common::v1::ObjectKey* add_egress_v6_security_policy_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
      egress_v6_security_policy_id() const;

  // bytes virtual_router_mac = 9;
  void clear_virtual_router_mac();
  const std::string& virtual_router_mac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_virtual_router_mac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_virtual_router_mac();
  PROTOBUF_NODISCARD std::string* release_virtual_router_mac();
  void set_allocated_virtual_router_mac(std::string* virtual_router_mac);
  private:
  const std::string& _internal_virtual_router_mac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtual_router_mac(const std::string& value);
  std::string* _internal_mutable_virtual_router_mac();
  public:

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.common.v1.ObjectKey v4_route_table_id = 3;
  bool has_v4_route_table_id() const;
  private:
  bool _internal_has_v4_route_table_id() const;
  public:
  void clear_v4_route_table_id();
  const ::opi_api::common::v1::ObjectKey& v4_route_table_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_v4_route_table_id();
  ::opi_api::common::v1::ObjectKey* mutable_v4_route_table_id();
  void set_allocated_v4_route_table_id(::opi_api::common::v1::ObjectKey* v4_route_table_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_v4_route_table_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_v4_route_table_id();
  public:
  void unsafe_arena_set_allocated_v4_route_table_id(
      ::opi_api::common::v1::ObjectKey* v4_route_table_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_v4_route_table_id();

  // .opi_api.common.v1.ObjectKey v6_route_table_id = 4;
  bool has_v6_route_table_id() const;
  private:
  bool _internal_has_v6_route_table_id() const;
  public:
  void clear_v6_route_table_id();
  const ::opi_api::common::v1::ObjectKey& v6_route_table_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_v6_route_table_id();
  ::opi_api::common::v1::ObjectKey* mutable_v6_route_table_id();
  void set_allocated_v6_route_table_id(::opi_api::common::v1::ObjectKey* v6_route_table_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_v6_route_table_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_v6_route_table_id();
  public:
  void unsafe_arena_set_allocated_v6_route_table_id(
      ::opi_api::common::v1::ObjectKey* v6_route_table_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_v6_route_table_id();

  // .opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 10;
  bool has_fabric_encap() const;
  private:
  bool _internal_has_fabric_encap() const;
  public:
  void clear_fabric_encap();
  const ::opi_api::network::opinetcommon::v1alpha1::Encap& fabric_encap() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::Encap* release_fabric_encap();
  ::opi_api::network::opinetcommon::v1alpha1::Encap* mutable_fabric_encap();
  void set_allocated_fabric_encap(::opi_api::network::opinetcommon::v1alpha1::Encap* fabric_encap);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::Encap& _internal_fabric_encap() const;
  ::opi_api::network::opinetcommon::v1alpha1::Encap* _internal_mutable_fabric_encap();
  public:
  void unsafe_arena_set_allocated_fabric_encap(
      ::opi_api::network::opinetcommon::v1alpha1::Encap* fabric_encap);
  ::opi_api::network::opinetcommon::v1alpha1::Encap* unsafe_arena_release_fabric_encap();

  // .opi_api.network.cloud.v1alpha1.VPCType type = 2;
  void clear_type();
  ::opi_api::network::cloud::v1alpha1::VPCType type() const;
  void set_type(::opi_api::network::cloud::v1alpha1::VPCType value);
  private:
  ::opi_api::network::cloud::v1alpha1::VPCType _internal_type() const;
  void _internal_set_type(::opi_api::network::cloud::v1alpha1::VPCType value);
  public:

  // int32 tos = 13;
  void clear_tos();
  int32_t tos() const;
  void set_tos(int32_t value);
  private:
  int32_t _internal_tos() const;
  void _internal_set_tos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.VpcSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey > ingress_v4_security_policy_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey > ingress_v6_security_policy_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey > egress_v4_security_policy_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey > egress_v6_security_policy_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtual_router_mac_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::common::v1::ObjectKey* v4_route_table_id_;
  ::opi_api::common::v1::ObjectKey* v6_route_table_id_;
  ::opi_api::network::opinetcommon::v1alpha1::Encap* fabric_encap_;
  int type_;
  int32_t tos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vpc_2eproto;
};
// -------------------------------------------------------------------

class VpcStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.VpcStatus) */ {
 public:
  inline VpcStatus() : VpcStatus(nullptr) {}
  ~VpcStatus() override;
  explicit constexpr VpcStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VpcStatus(const VpcStatus& from);
  VpcStatus(VpcStatus&& from) noexcept
    : VpcStatus() {
    *this = ::std::move(from);
  }

  inline VpcStatus& operator=(const VpcStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline VpcStatus& operator=(VpcStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VpcStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const VpcStatus* internal_default_instance() {
    return reinterpret_cast<const VpcStatus*>(
               &_VpcStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VpcStatus& a, VpcStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(VpcStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VpcStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VpcStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VpcStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VpcStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VpcStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VpcStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.VpcStatus";
  }
  protected:
  explicit VpcStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHwHandleFieldNumber = 1,
    kBdHwHandleFieldNumber = 2,
    kSubnetCountFieldNumber = 3,
  };
  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
  bool has_hw_handle() const;
  private:
  bool _internal_has_hw_handle() const;
  public:
  void clear_hw_handle();
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& hw_handle() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::HwHandle* release_hw_handle();
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* mutable_hw_handle();
  void set_allocated_hw_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& _internal_hw_handle() const;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _internal_mutable_hw_handle();
  public:
  void unsafe_arena_set_allocated_hw_handle(
      ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle);
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* unsafe_arena_release_hw_handle();

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle bd_hw_handle = 2;
  bool has_bd_hw_handle() const;
  private:
  bool _internal_has_bd_hw_handle() const;
  public:
  void clear_bd_hw_handle();
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& bd_hw_handle() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::HwHandle* release_bd_hw_handle();
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* mutable_bd_hw_handle();
  void set_allocated_bd_hw_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* bd_hw_handle);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& _internal_bd_hw_handle() const;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _internal_mutable_bd_hw_handle();
  public:
  void unsafe_arena_set_allocated_bd_hw_handle(
      ::opi_api::network::opinetcommon::v1alpha1::HwHandle* bd_hw_handle);
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* unsafe_arena_release_bd_hw_handle();

  // int32 subnet_count = 3;
  void clear_subnet_count();
  int32_t subnet_count() const;
  void set_subnet_count(int32_t value);
  private:
  int32_t _internal_subnet_count() const;
  void _internal_set_subnet_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.VpcStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle_;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* bd_hw_handle_;
  int32_t subnet_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vpc_2eproto;
};
// -------------------------------------------------------------------

class VPCPeer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.VPCPeer) */ {
 public:
  inline VPCPeer() : VPCPeer(nullptr) {}
  ~VPCPeer() override;
  explicit constexpr VPCPeer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VPCPeer(const VPCPeer& from);
  VPCPeer(VPCPeer&& from) noexcept
    : VPCPeer() {
    *this = ::std::move(from);
  }

  inline VPCPeer& operator=(const VPCPeer& from) {
    CopyFrom(from);
    return *this;
  }
  inline VPCPeer& operator=(VPCPeer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VPCPeer& default_instance() {
    return *internal_default_instance();
  }
  static inline const VPCPeer* internal_default_instance() {
    return reinterpret_cast<const VPCPeer*>(
               &_VPCPeer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VPCPeer& a, VPCPeer& b) {
    a.Swap(&b);
  }
  inline void Swap(VPCPeer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VPCPeer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VPCPeer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VPCPeer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VPCPeer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VPCPeer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VPCPeer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.VPCPeer";
  }
  protected:
  explicit VPCPeer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.VPCPeerSpec spec = 1;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::VPCPeerSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::VPCPeerSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::VPCPeerSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* spec);
  ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.VPCPeerStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::cloud::v1alpha1::VPCPeerStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* release_status();
  ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* mutable_status();
  void set_allocated_status(::opi_api::network::cloud::v1alpha1::VPCPeerStatus* status);
  private:
  const ::opi_api::network::cloud::v1alpha1::VPCPeerStatus& _internal_status() const;
  ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* status);
  ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.VPCPeer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vpc_2eproto;
};
// -------------------------------------------------------------------

class VPCPeerSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.VPCPeerSpec) */ {
 public:
  inline VPCPeerSpec() : VPCPeerSpec(nullptr) {}
  ~VPCPeerSpec() override;
  explicit constexpr VPCPeerSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VPCPeerSpec(const VPCPeerSpec& from);
  VPCPeerSpec(VPCPeerSpec&& from) noexcept
    : VPCPeerSpec() {
    *this = ::std::move(from);
  }

  inline VPCPeerSpec& operator=(const VPCPeerSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline VPCPeerSpec& operator=(VPCPeerSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VPCPeerSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const VPCPeerSpec* internal_default_instance() {
    return reinterpret_cast<const VPCPeerSpec*>(
               &_VPCPeerSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VPCPeerSpec& a, VPCPeerSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(VPCPeerSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VPCPeerSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VPCPeerSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VPCPeerSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VPCPeerSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VPCPeerSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VPCPeerSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.VPCPeerSpec";
  }
  protected:
  explicit VPCPeerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVpc1IdFieldNumber = 2,
    kVpc2IdFieldNumber = 3,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.common.v1.ObjectKey vpc1_id = 2;
  bool has_vpc1_id() const;
  private:
  bool _internal_has_vpc1_id() const;
  public:
  void clear_vpc1_id();
  const ::opi_api::common::v1::ObjectKey& vpc1_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_vpc1_id();
  ::opi_api::common::v1::ObjectKey* mutable_vpc1_id();
  void set_allocated_vpc1_id(::opi_api::common::v1::ObjectKey* vpc1_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_vpc1_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_vpc1_id();
  public:
  void unsafe_arena_set_allocated_vpc1_id(
      ::opi_api::common::v1::ObjectKey* vpc1_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_vpc1_id();

  // .opi_api.common.v1.ObjectKey vpc2_id = 3;
  bool has_vpc2_id() const;
  private:
  bool _internal_has_vpc2_id() const;
  public:
  void clear_vpc2_id();
  const ::opi_api::common::v1::ObjectKey& vpc2_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_vpc2_id();
  ::opi_api::common::v1::ObjectKey* mutable_vpc2_id();
  void set_allocated_vpc2_id(::opi_api::common::v1::ObjectKey* vpc2_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_vpc2_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_vpc2_id();
  public:
  void unsafe_arena_set_allocated_vpc2_id(
      ::opi_api::common::v1::ObjectKey* vpc2_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_vpc2_id();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.VPCPeerSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::common::v1::ObjectKey* vpc1_id_;
  ::opi_api::common::v1::ObjectKey* vpc2_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vpc_2eproto;
};
// -------------------------------------------------------------------

class VPCPeerStatus final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.VPCPeerStatus) */ {
 public:
  inline VPCPeerStatus() : VPCPeerStatus(nullptr) {}
  explicit constexpr VPCPeerStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VPCPeerStatus(const VPCPeerStatus& from);
  VPCPeerStatus(VPCPeerStatus&& from) noexcept
    : VPCPeerStatus() {
    *this = ::std::move(from);
  }

  inline VPCPeerStatus& operator=(const VPCPeerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline VPCPeerStatus& operator=(VPCPeerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VPCPeerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const VPCPeerStatus* internal_default_instance() {
    return reinterpret_cast<const VPCPeerStatus*>(
               &_VPCPeerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VPCPeerStatus& a, VPCPeerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(VPCPeerStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VPCPeerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VPCPeerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VPCPeerStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const VPCPeerStatus& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const VPCPeerStatus& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.VPCPeerStatus";
  }
  protected:
  explicit VPCPeerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.VPCPeerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vpc

// .opi_api.network.cloud.v1alpha1.VpcSpec spec = 1;
inline bool Vpc::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool Vpc::has_spec() const {
  return _internal_has_spec();
}
inline void Vpc::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::VpcSpec& Vpc::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::VpcSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::VpcSpec&>(
      ::opi_api::network::cloud::v1alpha1::_VpcSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::VpcSpec& Vpc::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.Vpc.spec)
  return _internal_spec();
}
inline void Vpc::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::VpcSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.Vpc.spec)
}
inline ::opi_api::network::cloud::v1alpha1::VpcSpec* Vpc::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::VpcSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VpcSpec* Vpc::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.Vpc.spec)
  
  ::opi_api::network::cloud::v1alpha1::VpcSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VpcSpec* Vpc::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::VpcSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::VpcSpec* Vpc::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::VpcSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.Vpc.spec)
  return _msg;
}
inline void Vpc::set_allocated_spec(::opi_api::network::cloud::v1alpha1::VpcSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::VpcSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.Vpc.spec)
}

// .opi_api.network.cloud.v1alpha1.VpcStatus status = 2;
inline bool Vpc::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Vpc::has_status() const {
  return _internal_has_status();
}
inline void Vpc::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::VpcStatus& Vpc::_internal_status() const {
  const ::opi_api::network::cloud::v1alpha1::VpcStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::VpcStatus&>(
      ::opi_api::network::cloud::v1alpha1::_VpcStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::VpcStatus& Vpc::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.Vpc.status)
  return _internal_status();
}
inline void Vpc::unsafe_arena_set_allocated_status(
    ::opi_api::network::cloud::v1alpha1::VpcStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.Vpc.status)
}
inline ::opi_api::network::cloud::v1alpha1::VpcStatus* Vpc::release_status() {
  
  ::opi_api::network::cloud::v1alpha1::VpcStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VpcStatus* Vpc::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.Vpc.status)
  
  ::opi_api::network::cloud::v1alpha1::VpcStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VpcStatus* Vpc::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::VpcStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::cloud::v1alpha1::VpcStatus* Vpc::mutable_status() {
  ::opi_api::network::cloud::v1alpha1::VpcStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.Vpc.status)
  return _msg;
}
inline void Vpc::set_allocated_status(::opi_api::network::cloud::v1alpha1::VpcStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::VpcStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.Vpc.status)
}

// -------------------------------------------------------------------

// VpcSpec

// .opi_api.common.v1.ObjectKey id = 1;
inline bool VpcSpec::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool VpcSpec::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& VpcSpec::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VpcSpec::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VpcSpec.id)
  return _internal_id();
}
inline void VpcSpec::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.VpcSpec.id)
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VpcSpec.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VpcSpec.id)
  return _msg;
}
inline void VpcSpec::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VpcSpec.id)
}

// .opi_api.network.cloud.v1alpha1.VPCType type = 2;
inline void VpcSpec::clear_type() {
  type_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::VPCType VpcSpec::_internal_type() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::VPCType >(type_);
}
inline ::opi_api::network::cloud::v1alpha1::VPCType VpcSpec::type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VpcSpec.type)
  return _internal_type();
}
inline void VpcSpec::_internal_set_type(::opi_api::network::cloud::v1alpha1::VPCType value) {
  
  type_ = value;
}
inline void VpcSpec::set_type(::opi_api::network::cloud::v1alpha1::VPCType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VpcSpec.type)
}

// .opi_api.common.v1.ObjectKey v4_route_table_id = 3;
inline bool VpcSpec::_internal_has_v4_route_table_id() const {
  return this != internal_default_instance() && v4_route_table_id_ != nullptr;
}
inline bool VpcSpec::has_v4_route_table_id() const {
  return _internal_has_v4_route_table_id();
}
inline const ::opi_api::common::v1::ObjectKey& VpcSpec::_internal_v4_route_table_id() const {
  const ::opi_api::common::v1::ObjectKey* p = v4_route_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VpcSpec::v4_route_table_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VpcSpec.v4_route_table_id)
  return _internal_v4_route_table_id();
}
inline void VpcSpec::unsafe_arena_set_allocated_v4_route_table_id(
    ::opi_api::common::v1::ObjectKey* v4_route_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v4_route_table_id_);
  }
  v4_route_table_id_ = v4_route_table_id;
  if (v4_route_table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.VpcSpec.v4_route_table_id)
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::release_v4_route_table_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = v4_route_table_id_;
  v4_route_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::unsafe_arena_release_v4_route_table_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VpcSpec.v4_route_table_id)
  
  ::opi_api::common::v1::ObjectKey* temp = v4_route_table_id_;
  v4_route_table_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::_internal_mutable_v4_route_table_id() {
  
  if (v4_route_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    v4_route_table_id_ = p;
  }
  return v4_route_table_id_;
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::mutable_v4_route_table_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_v4_route_table_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VpcSpec.v4_route_table_id)
  return _msg;
}
inline void VpcSpec::set_allocated_v4_route_table_id(::opi_api::common::v1::ObjectKey* v4_route_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(v4_route_table_id_);
  }
  if (v4_route_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v4_route_table_id));
    if (message_arena != submessage_arena) {
      v4_route_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v4_route_table_id, submessage_arena);
    }
    
  } else {
    
  }
  v4_route_table_id_ = v4_route_table_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VpcSpec.v4_route_table_id)
}

// .opi_api.common.v1.ObjectKey v6_route_table_id = 4;
inline bool VpcSpec::_internal_has_v6_route_table_id() const {
  return this != internal_default_instance() && v6_route_table_id_ != nullptr;
}
inline bool VpcSpec::has_v6_route_table_id() const {
  return _internal_has_v6_route_table_id();
}
inline const ::opi_api::common::v1::ObjectKey& VpcSpec::_internal_v6_route_table_id() const {
  const ::opi_api::common::v1::ObjectKey* p = v6_route_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VpcSpec::v6_route_table_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VpcSpec.v6_route_table_id)
  return _internal_v6_route_table_id();
}
inline void VpcSpec::unsafe_arena_set_allocated_v6_route_table_id(
    ::opi_api::common::v1::ObjectKey* v6_route_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v6_route_table_id_);
  }
  v6_route_table_id_ = v6_route_table_id;
  if (v6_route_table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.VpcSpec.v6_route_table_id)
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::release_v6_route_table_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = v6_route_table_id_;
  v6_route_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::unsafe_arena_release_v6_route_table_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VpcSpec.v6_route_table_id)
  
  ::opi_api::common::v1::ObjectKey* temp = v6_route_table_id_;
  v6_route_table_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::_internal_mutable_v6_route_table_id() {
  
  if (v6_route_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    v6_route_table_id_ = p;
  }
  return v6_route_table_id_;
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::mutable_v6_route_table_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_v6_route_table_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VpcSpec.v6_route_table_id)
  return _msg;
}
inline void VpcSpec::set_allocated_v6_route_table_id(::opi_api::common::v1::ObjectKey* v6_route_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(v6_route_table_id_);
  }
  if (v6_route_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v6_route_table_id));
    if (message_arena != submessage_arena) {
      v6_route_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v6_route_table_id, submessage_arena);
    }
    
  } else {
    
  }
  v6_route_table_id_ = v6_route_table_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VpcSpec.v6_route_table_id)
}

// repeated .opi_api.common.v1.ObjectKey ingress_v4_security_policy_id = 5;
inline int VpcSpec::_internal_ingress_v4_security_policy_id_size() const {
  return ingress_v4_security_policy_id_.size();
}
inline int VpcSpec::ingress_v4_security_policy_id_size() const {
  return _internal_ingress_v4_security_policy_id_size();
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::mutable_ingress_v4_security_policy_id(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v4_security_policy_id)
  return ingress_v4_security_policy_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
VpcSpec::mutable_ingress_v4_security_policy_id() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v4_security_policy_id)
  return &ingress_v4_security_policy_id_;
}
inline const ::opi_api::common::v1::ObjectKey& VpcSpec::_internal_ingress_v4_security_policy_id(int index) const {
  return ingress_v4_security_policy_id_.Get(index);
}
inline const ::opi_api::common::v1::ObjectKey& VpcSpec::ingress_v4_security_policy_id(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v4_security_policy_id)
  return _internal_ingress_v4_security_policy_id(index);
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::_internal_add_ingress_v4_security_policy_id() {
  return ingress_v4_security_policy_id_.Add();
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::add_ingress_v4_security_policy_id() {
  ::opi_api::common::v1::ObjectKey* _add = _internal_add_ingress_v4_security_policy_id();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v4_security_policy_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
VpcSpec::ingress_v4_security_policy_id() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v4_security_policy_id)
  return ingress_v4_security_policy_id_;
}

// repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 6;
inline int VpcSpec::_internal_ingress_v6_security_policy_id_size() const {
  return ingress_v6_security_policy_id_.size();
}
inline int VpcSpec::ingress_v6_security_policy_id_size() const {
  return _internal_ingress_v6_security_policy_id_size();
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::mutable_ingress_v6_security_policy_id(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v6_security_policy_id)
  return ingress_v6_security_policy_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
VpcSpec::mutable_ingress_v6_security_policy_id() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v6_security_policy_id)
  return &ingress_v6_security_policy_id_;
}
inline const ::opi_api::common::v1::ObjectKey& VpcSpec::_internal_ingress_v6_security_policy_id(int index) const {
  return ingress_v6_security_policy_id_.Get(index);
}
inline const ::opi_api::common::v1::ObjectKey& VpcSpec::ingress_v6_security_policy_id(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v6_security_policy_id)
  return _internal_ingress_v6_security_policy_id(index);
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::_internal_add_ingress_v6_security_policy_id() {
  return ingress_v6_security_policy_id_.Add();
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::add_ingress_v6_security_policy_id() {
  ::opi_api::common::v1::ObjectKey* _add = _internal_add_ingress_v6_security_policy_id();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v6_security_policy_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
VpcSpec::ingress_v6_security_policy_id() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.VpcSpec.ingress_v6_security_policy_id)
  return ingress_v6_security_policy_id_;
}

// repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 7;
inline int VpcSpec::_internal_egress_v4_security_policy_id_size() const {
  return egress_v4_security_policy_id_.size();
}
inline int VpcSpec::egress_v4_security_policy_id_size() const {
  return _internal_egress_v4_security_policy_id_size();
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::mutable_egress_v4_security_policy_id(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VpcSpec.egress_v4_security_policy_id)
  return egress_v4_security_policy_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
VpcSpec::mutable_egress_v4_security_policy_id() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.VpcSpec.egress_v4_security_policy_id)
  return &egress_v4_security_policy_id_;
}
inline const ::opi_api::common::v1::ObjectKey& VpcSpec::_internal_egress_v4_security_policy_id(int index) const {
  return egress_v4_security_policy_id_.Get(index);
}
inline const ::opi_api::common::v1::ObjectKey& VpcSpec::egress_v4_security_policy_id(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VpcSpec.egress_v4_security_policy_id)
  return _internal_egress_v4_security_policy_id(index);
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::_internal_add_egress_v4_security_policy_id() {
  return egress_v4_security_policy_id_.Add();
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::add_egress_v4_security_policy_id() {
  ::opi_api::common::v1::ObjectKey* _add = _internal_add_egress_v4_security_policy_id();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.VpcSpec.egress_v4_security_policy_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
VpcSpec::egress_v4_security_policy_id() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.VpcSpec.egress_v4_security_policy_id)
  return egress_v4_security_policy_id_;
}

// repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 8;
inline int VpcSpec::_internal_egress_v6_security_policy_id_size() const {
  return egress_v6_security_policy_id_.size();
}
inline int VpcSpec::egress_v6_security_policy_id_size() const {
  return _internal_egress_v6_security_policy_id_size();
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::mutable_egress_v6_security_policy_id(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VpcSpec.egress_v6_security_policy_id)
  return egress_v6_security_policy_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >*
VpcSpec::mutable_egress_v6_security_policy_id() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.VpcSpec.egress_v6_security_policy_id)
  return &egress_v6_security_policy_id_;
}
inline const ::opi_api::common::v1::ObjectKey& VpcSpec::_internal_egress_v6_security_policy_id(int index) const {
  return egress_v6_security_policy_id_.Get(index);
}
inline const ::opi_api::common::v1::ObjectKey& VpcSpec::egress_v6_security_policy_id(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VpcSpec.egress_v6_security_policy_id)
  return _internal_egress_v6_security_policy_id(index);
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::_internal_add_egress_v6_security_policy_id() {
  return egress_v6_security_policy_id_.Add();
}
inline ::opi_api::common::v1::ObjectKey* VpcSpec::add_egress_v6_security_policy_id() {
  ::opi_api::common::v1::ObjectKey* _add = _internal_add_egress_v6_security_policy_id();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.VpcSpec.egress_v6_security_policy_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::common::v1::ObjectKey >&
VpcSpec::egress_v6_security_policy_id() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.VpcSpec.egress_v6_security_policy_id)
  return egress_v6_security_policy_id_;
}

// bytes virtual_router_mac = 9;
inline void VpcSpec::clear_virtual_router_mac() {
  virtual_router_mac_.ClearToEmpty();
}
inline const std::string& VpcSpec::virtual_router_mac() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VpcSpec.virtual_router_mac)
  return _internal_virtual_router_mac();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VpcSpec::set_virtual_router_mac(ArgT0&& arg0, ArgT... args) {
 
 virtual_router_mac_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VpcSpec.virtual_router_mac)
}
inline std::string* VpcSpec::mutable_virtual_router_mac() {
  std::string* _s = _internal_mutable_virtual_router_mac();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VpcSpec.virtual_router_mac)
  return _s;
}
inline const std::string& VpcSpec::_internal_virtual_router_mac() const {
  return virtual_router_mac_.Get();
}
inline void VpcSpec::_internal_set_virtual_router_mac(const std::string& value) {
  
  virtual_router_mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VpcSpec::_internal_mutable_virtual_router_mac() {
  
  return virtual_router_mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VpcSpec::release_virtual_router_mac() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VpcSpec.virtual_router_mac)
  return virtual_router_mac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VpcSpec::set_allocated_virtual_router_mac(std::string* virtual_router_mac) {
  if (virtual_router_mac != nullptr) {
    
  } else {
    
  }
  virtual_router_mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), virtual_router_mac,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (virtual_router_mac_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    virtual_router_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VpcSpec.virtual_router_mac)
}

// .opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 10;
inline bool VpcSpec::_internal_has_fabric_encap() const {
  return this != internal_default_instance() && fabric_encap_ != nullptr;
}
inline bool VpcSpec::has_fabric_encap() const {
  return _internal_has_fabric_encap();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::Encap& VpcSpec::_internal_fabric_encap() const {
  const ::opi_api::network::opinetcommon::v1alpha1::Encap* p = fabric_encap_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::Encap&>(
      ::opi_api::network::opinetcommon::v1alpha1::_Encap_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::Encap& VpcSpec::fabric_encap() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VpcSpec.fabric_encap)
  return _internal_fabric_encap();
}
inline void VpcSpec::unsafe_arena_set_allocated_fabric_encap(
    ::opi_api::network::opinetcommon::v1alpha1::Encap* fabric_encap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fabric_encap_);
  }
  fabric_encap_ = fabric_encap;
  if (fabric_encap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.VpcSpec.fabric_encap)
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* VpcSpec::release_fabric_encap() {
  
  ::opi_api::network::opinetcommon::v1alpha1::Encap* temp = fabric_encap_;
  fabric_encap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* VpcSpec::unsafe_arena_release_fabric_encap() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VpcSpec.fabric_encap)
  
  ::opi_api::network::opinetcommon::v1alpha1::Encap* temp = fabric_encap_;
  fabric_encap_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* VpcSpec::_internal_mutable_fabric_encap() {
  
  if (fabric_encap_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::Encap>(GetArenaForAllocation());
    fabric_encap_ = p;
  }
  return fabric_encap_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::Encap* VpcSpec::mutable_fabric_encap() {
  ::opi_api::network::opinetcommon::v1alpha1::Encap* _msg = _internal_mutable_fabric_encap();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VpcSpec.fabric_encap)
  return _msg;
}
inline void VpcSpec::set_allocated_fabric_encap(::opi_api::network::opinetcommon::v1alpha1::Encap* fabric_encap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fabric_encap_);
  }
  if (fabric_encap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fabric_encap));
    if (message_arena != submessage_arena) {
      fabric_encap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fabric_encap, submessage_arena);
    }
    
  } else {
    
  }
  fabric_encap_ = fabric_encap;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VpcSpec.fabric_encap)
}

// int32 tos = 13;
inline void VpcSpec::clear_tos() {
  tos_ = 0;
}
inline int32_t VpcSpec::_internal_tos() const {
  return tos_;
}
inline int32_t VpcSpec::tos() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VpcSpec.tos)
  return _internal_tos();
}
inline void VpcSpec::_internal_set_tos(int32_t value) {
  
  tos_ = value;
}
inline void VpcSpec::set_tos(int32_t value) {
  _internal_set_tos(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VpcSpec.tos)
}

// -------------------------------------------------------------------

// VpcStatus

// .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
inline bool VpcStatus::_internal_has_hw_handle() const {
  return this != internal_default_instance() && hw_handle_ != nullptr;
}
inline bool VpcStatus::has_hw_handle() const {
  return _internal_has_hw_handle();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& VpcStatus::_internal_hw_handle() const {
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle* p = hw_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&>(
      ::opi_api::network::opinetcommon::v1alpha1::_HwHandle_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& VpcStatus::hw_handle() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VpcStatus.hw_handle)
  return _internal_hw_handle();
}
inline void VpcStatus::unsafe_arena_set_allocated_hw_handle(
    ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_handle_);
  }
  hw_handle_ = hw_handle;
  if (hw_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.VpcStatus.hw_handle)
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* VpcStatus::release_hw_handle() {
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = hw_handle_;
  hw_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* VpcStatus::unsafe_arena_release_hw_handle() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VpcStatus.hw_handle)
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = hw_handle_;
  hw_handle_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* VpcStatus::_internal_mutable_hw_handle() {
  
  if (hw_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::HwHandle>(GetArenaForAllocation());
    hw_handle_ = p;
  }
  return hw_handle_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* VpcStatus::mutable_hw_handle() {
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _msg = _internal_mutable_hw_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VpcStatus.hw_handle)
  return _msg;
}
inline void VpcStatus::set_allocated_hw_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_handle_);
  }
  if (hw_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_handle));
    if (message_arena != submessage_arena) {
      hw_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hw_handle, submessage_arena);
    }
    
  } else {
    
  }
  hw_handle_ = hw_handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VpcStatus.hw_handle)
}

// .opi_api.network.opinetcommon.v1alpha1.HwHandle bd_hw_handle = 2;
inline bool VpcStatus::_internal_has_bd_hw_handle() const {
  return this != internal_default_instance() && bd_hw_handle_ != nullptr;
}
inline bool VpcStatus::has_bd_hw_handle() const {
  return _internal_has_bd_hw_handle();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& VpcStatus::_internal_bd_hw_handle() const {
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle* p = bd_hw_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&>(
      ::opi_api::network::opinetcommon::v1alpha1::_HwHandle_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& VpcStatus::bd_hw_handle() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VpcStatus.bd_hw_handle)
  return _internal_bd_hw_handle();
}
inline void VpcStatus::unsafe_arena_set_allocated_bd_hw_handle(
    ::opi_api::network::opinetcommon::v1alpha1::HwHandle* bd_hw_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bd_hw_handle_);
  }
  bd_hw_handle_ = bd_hw_handle;
  if (bd_hw_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.VpcStatus.bd_hw_handle)
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* VpcStatus::release_bd_hw_handle() {
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = bd_hw_handle_;
  bd_hw_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* VpcStatus::unsafe_arena_release_bd_hw_handle() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VpcStatus.bd_hw_handle)
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = bd_hw_handle_;
  bd_hw_handle_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* VpcStatus::_internal_mutable_bd_hw_handle() {
  
  if (bd_hw_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::HwHandle>(GetArenaForAllocation());
    bd_hw_handle_ = p;
  }
  return bd_hw_handle_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* VpcStatus::mutable_bd_hw_handle() {
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _msg = _internal_mutable_bd_hw_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VpcStatus.bd_hw_handle)
  return _msg;
}
inline void VpcStatus::set_allocated_bd_hw_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* bd_hw_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bd_hw_handle_);
  }
  if (bd_hw_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bd_hw_handle));
    if (message_arena != submessage_arena) {
      bd_hw_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bd_hw_handle, submessage_arena);
    }
    
  } else {
    
  }
  bd_hw_handle_ = bd_hw_handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VpcStatus.bd_hw_handle)
}

// int32 subnet_count = 3;
inline void VpcStatus::clear_subnet_count() {
  subnet_count_ = 0;
}
inline int32_t VpcStatus::_internal_subnet_count() const {
  return subnet_count_;
}
inline int32_t VpcStatus::subnet_count() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VpcStatus.subnet_count)
  return _internal_subnet_count();
}
inline void VpcStatus::_internal_set_subnet_count(int32_t value) {
  
  subnet_count_ = value;
}
inline void VpcStatus::set_subnet_count(int32_t value) {
  _internal_set_subnet_count(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.VpcStatus.subnet_count)
}

// -------------------------------------------------------------------

// VPCPeer

// .opi_api.network.cloud.v1alpha1.VPCPeerSpec spec = 1;
inline bool VPCPeer::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool VPCPeer::has_spec() const {
  return _internal_has_spec();
}
inline void VPCPeer::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::VPCPeerSpec& VPCPeer::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::VPCPeerSpec&>(
      ::opi_api::network::cloud::v1alpha1::_VPCPeerSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::VPCPeerSpec& VPCPeer::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VPCPeer.spec)
  return _internal_spec();
}
inline void VPCPeer::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.VPCPeer.spec)
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* VPCPeer::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* VPCPeer::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VPCPeer.spec)
  
  ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* VPCPeer::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::VPCPeerSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* VPCPeer::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::VPCPeerSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VPCPeer.spec)
  return _msg;
}
inline void VPCPeer::set_allocated_spec(::opi_api::network::cloud::v1alpha1::VPCPeerSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::VPCPeerSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VPCPeer.spec)
}

// .opi_api.network.cloud.v1alpha1.VPCPeerStatus status = 2;
inline bool VPCPeer::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool VPCPeer::has_status() const {
  return _internal_has_status();
}
inline void VPCPeer::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::VPCPeerStatus& VPCPeer::_internal_status() const {
  const ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::VPCPeerStatus&>(
      ::opi_api::network::cloud::v1alpha1::_VPCPeerStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::VPCPeerStatus& VPCPeer::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VPCPeer.status)
  return _internal_status();
}
inline void VPCPeer::unsafe_arena_set_allocated_status(
    ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.VPCPeer.status)
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* VPCPeer::release_status() {
  
  ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* VPCPeer::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VPCPeer.status)
  
  ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* VPCPeer::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::VPCPeerStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* VPCPeer::mutable_status() {
  ::opi_api::network::cloud::v1alpha1::VPCPeerStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VPCPeer.status)
  return _msg;
}
inline void VPCPeer::set_allocated_status(::opi_api::network::cloud::v1alpha1::VPCPeerStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::VPCPeerStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VPCPeer.status)
}

// -------------------------------------------------------------------

// VPCPeerSpec

// .opi_api.common.v1.ObjectKey id = 1;
inline bool VPCPeerSpec::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool VPCPeerSpec::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& VPCPeerSpec::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VPCPeerSpec::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VPCPeerSpec.id)
  return _internal_id();
}
inline void VPCPeerSpec::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.VPCPeerSpec.id)
}
inline ::opi_api::common::v1::ObjectKey* VPCPeerSpec::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VPCPeerSpec::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VPCPeerSpec.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VPCPeerSpec::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* VPCPeerSpec::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VPCPeerSpec.id)
  return _msg;
}
inline void VPCPeerSpec::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VPCPeerSpec.id)
}

// .opi_api.common.v1.ObjectKey vpc1_id = 2;
inline bool VPCPeerSpec::_internal_has_vpc1_id() const {
  return this != internal_default_instance() && vpc1_id_ != nullptr;
}
inline bool VPCPeerSpec::has_vpc1_id() const {
  return _internal_has_vpc1_id();
}
inline const ::opi_api::common::v1::ObjectKey& VPCPeerSpec::_internal_vpc1_id() const {
  const ::opi_api::common::v1::ObjectKey* p = vpc1_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VPCPeerSpec::vpc1_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc1_id)
  return _internal_vpc1_id();
}
inline void VPCPeerSpec::unsafe_arena_set_allocated_vpc1_id(
    ::opi_api::common::v1::ObjectKey* vpc1_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc1_id_);
  }
  vpc1_id_ = vpc1_id;
  if (vpc1_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc1_id)
}
inline ::opi_api::common::v1::ObjectKey* VPCPeerSpec::release_vpc1_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = vpc1_id_;
  vpc1_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VPCPeerSpec::unsafe_arena_release_vpc1_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc1_id)
  
  ::opi_api::common::v1::ObjectKey* temp = vpc1_id_;
  vpc1_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VPCPeerSpec::_internal_mutable_vpc1_id() {
  
  if (vpc1_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    vpc1_id_ = p;
  }
  return vpc1_id_;
}
inline ::opi_api::common::v1::ObjectKey* VPCPeerSpec::mutable_vpc1_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_vpc1_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc1_id)
  return _msg;
}
inline void VPCPeerSpec::set_allocated_vpc1_id(::opi_api::common::v1::ObjectKey* vpc1_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc1_id_);
  }
  if (vpc1_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc1_id));
    if (message_arena != submessage_arena) {
      vpc1_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpc1_id, submessage_arena);
    }
    
  } else {
    
  }
  vpc1_id_ = vpc1_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc1_id)
}

// .opi_api.common.v1.ObjectKey vpc2_id = 3;
inline bool VPCPeerSpec::_internal_has_vpc2_id() const {
  return this != internal_default_instance() && vpc2_id_ != nullptr;
}
inline bool VPCPeerSpec::has_vpc2_id() const {
  return _internal_has_vpc2_id();
}
inline const ::opi_api::common::v1::ObjectKey& VPCPeerSpec::_internal_vpc2_id() const {
  const ::opi_api::common::v1::ObjectKey* p = vpc2_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& VPCPeerSpec::vpc2_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc2_id)
  return _internal_vpc2_id();
}
inline void VPCPeerSpec::unsafe_arena_set_allocated_vpc2_id(
    ::opi_api::common::v1::ObjectKey* vpc2_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc2_id_);
  }
  vpc2_id_ = vpc2_id;
  if (vpc2_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc2_id)
}
inline ::opi_api::common::v1::ObjectKey* VPCPeerSpec::release_vpc2_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = vpc2_id_;
  vpc2_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VPCPeerSpec::unsafe_arena_release_vpc2_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc2_id)
  
  ::opi_api::common::v1::ObjectKey* temp = vpc2_id_;
  vpc2_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* VPCPeerSpec::_internal_mutable_vpc2_id() {
  
  if (vpc2_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    vpc2_id_ = p;
  }
  return vpc2_id_;
}
inline ::opi_api::common::v1::ObjectKey* VPCPeerSpec::mutable_vpc2_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_vpc2_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc2_id)
  return _msg;
}
inline void VPCPeerSpec::set_allocated_vpc2_id(::opi_api::common::v1::ObjectKey* vpc2_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc2_id_);
  }
  if (vpc2_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc2_id));
    if (message_arena != submessage_arena) {
      vpc2_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpc2_id, submessage_arena);
    }
    
  } else {
    
  }
  vpc2_id_ = vpc2_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.VPCPeerSpec.vpc2_id)
}

// -------------------------------------------------------------------

// VPCPeerStatus

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::VPCType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::VPCType>() {
  return ::opi_api::network::cloud::v1alpha1::VPCType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vpc_2eproto
