// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networkpolicy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_networkpolicy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_networkpolicy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "object_key.pb.h"
#include "networktypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_networkpolicy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_networkpolicy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_networkpolicy_2eproto;
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
class ALGSpec;
struct ALGSpecDefaultTypeInternal;
extern ALGSpecDefaultTypeInternal _ALGSpec_default_instance_;
class DNSOptions;
struct DNSOptionsDefaultTypeInternal;
extern DNSOptionsDefaultTypeInternal _DNSOptions_default_instance_;
class FTPOptions;
struct FTPOptionsDefaultTypeInternal;
extern FTPOptionsDefaultTypeInternal _FTPOptions_default_instance_;
class MSRPCOptions;
struct MSRPCOptionsDefaultTypeInternal;
extern MSRPCOptionsDefaultTypeInternal _MSRPCOptions_default_instance_;
class PolicyLookupMatch;
struct PolicyLookupMatchDefaultTypeInternal;
extern PolicyLookupMatchDefaultTypeInternal _PolicyLookupMatch_default_instance_;
class PolicyLookupResult;
struct PolicyLookupResultDefaultTypeInternal;
extern PolicyLookupResultDefaultTypeInternal _PolicyLookupResult_default_instance_;
class SecurityPolicy;
struct SecurityPolicyDefaultTypeInternal;
extern SecurityPolicyDefaultTypeInternal _SecurityPolicy_default_instance_;
class SecurityPolicyLookupRequest;
struct SecurityPolicyLookupRequestDefaultTypeInternal;
extern SecurityPolicyLookupRequestDefaultTypeInternal _SecurityPolicyLookupRequest_default_instance_;
class SecurityPolicyLookupRequest_VnicLookupInfo;
struct SecurityPolicyLookupRequest_VnicLookupInfoDefaultTypeInternal;
extern SecurityPolicyLookupRequest_VnicLookupInfoDefaultTypeInternal _SecurityPolicyLookupRequest_VnicLookupInfo_default_instance_;
class SecurityPolicySpec;
struct SecurityPolicySpecDefaultTypeInternal;
extern SecurityPolicySpecDefaultTypeInternal _SecurityPolicySpec_default_instance_;
class SecurityPolicyStatus;
struct SecurityPolicyStatusDefaultTypeInternal;
extern SecurityPolicyStatusDefaultTypeInternal _SecurityPolicyStatus_default_instance_;
class SecurityProfile;
struct SecurityProfileDefaultTypeInternal;
extern SecurityProfileDefaultTypeInternal _SecurityProfile_default_instance_;
class SecurityProfileSpec;
struct SecurityProfileSpecDefaultTypeInternal;
extern SecurityProfileSpecDefaultTypeInternal _SecurityProfileSpec_default_instance_;
class SecurityProfileStatus;
struct SecurityProfileStatusDefaultTypeInternal;
extern SecurityProfileStatusDefaultTypeInternal _SecurityProfileStatus_default_instance_;
class SecurityRule;
struct SecurityRuleDefaultTypeInternal;
extern SecurityRuleDefaultTypeInternal _SecurityRule_default_instance_;
class SecurityRuleAttrs;
struct SecurityRuleAttrsDefaultTypeInternal;
extern SecurityRuleAttrsDefaultTypeInternal _SecurityRuleAttrs_default_instance_;
class SecurityRuleInfo;
struct SecurityRuleInfoDefaultTypeInternal;
extern SecurityRuleInfoDefaultTypeInternal _SecurityRuleInfo_default_instance_;
class SecurityRuleSpec;
struct SecurityRuleSpecDefaultTypeInternal;
extern SecurityRuleSpecDefaultTypeInternal _SecurityRuleSpec_default_instance_;
class SecurityRuleStatus;
struct SecurityRuleStatusDefaultTypeInternal;
extern SecurityRuleStatusDefaultTypeInternal _SecurityRuleStatus_default_instance_;
class SunRPCOptions;
struct SunRPCOptionsDefaultTypeInternal;
extern SunRPCOptionsDefaultTypeInternal _SunRPCOptions_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::cloud::v1alpha1::ALGSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ALGSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::DNSOptions* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::DNSOptions>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::FTPOptions* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::FTPOptions>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::MSRPCOptions* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::MSRPCOptions>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::PolicyLookupMatch>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::PolicyLookupResult* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::PolicyLookupResult>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SecurityPolicy* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityPolicy>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityPolicySpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SecurityProfile* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityProfile>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityProfileSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityProfileStatus>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SecurityRule* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityRule>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityRuleInfo>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityRuleSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityRuleStatus>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::SunRPCOptions* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SunRPCOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {

enum SecurityPolicyType : int {
  SECURITY_POLICY_TYPE_UNSPECIFIED = 0,
  SECURITY_POLICY_TYPE_UNDERLAY = 1,
  SECURITY_POLICY_TYPE_TENANT = 2,
  SecurityPolicyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SecurityPolicyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SecurityPolicyType_IsValid(int value);
constexpr SecurityPolicyType SecurityPolicyType_MIN = SECURITY_POLICY_TYPE_UNSPECIFIED;
constexpr SecurityPolicyType SecurityPolicyType_MAX = SECURITY_POLICY_TYPE_TENANT;
constexpr int SecurityPolicyType_ARRAYSIZE = SecurityPolicyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityPolicyType_descriptor();
template<typename T>
inline const std::string& SecurityPolicyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SecurityPolicyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SecurityPolicyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SecurityPolicyType_descriptor(), enum_t_value);
}
inline bool SecurityPolicyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SecurityPolicyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SecurityPolicyType>(
    SecurityPolicyType_descriptor(), name, value);
}
enum ALGType : int {
  ALG_TYPE_UNSPECIFIED = 0,
  ALG_TYPE_TFTP = 1,
  ALG_TYPE_FTP = 2,
  ALG_TYPE_DNS = 3,
  ALG_TYPE_SUNRPC = 4,
  ALG_TYPE_MSRPC = 5,
  ALG_TYPE_RTSP = 6,
  ALGType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ALGType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ALGType_IsValid(int value);
constexpr ALGType ALGType_MIN = ALG_TYPE_UNSPECIFIED;
constexpr ALGType ALGType_MAX = ALG_TYPE_RTSP;
constexpr int ALGType_ARRAYSIZE = ALGType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ALGType_descriptor();
template<typename T>
inline const std::string& ALGType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ALGType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ALGType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ALGType_descriptor(), enum_t_value);
}
inline bool ALGType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ALGType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ALGType>(
    ALGType_descriptor(), name, value);
}
enum PolicyRuleFormat : int {
  POLICY_RULE_FORMAT_UNSPECIFIED = 0,
  POLICY_RULE_FORMAT_FLATTENED = 1,
  POLICY_RULE_FORMAT_COMPACT = 2,
  PolicyRuleFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PolicyRuleFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PolicyRuleFormat_IsValid(int value);
constexpr PolicyRuleFormat PolicyRuleFormat_MIN = POLICY_RULE_FORMAT_UNSPECIFIED;
constexpr PolicyRuleFormat PolicyRuleFormat_MAX = POLICY_RULE_FORMAT_COMPACT;
constexpr int PolicyRuleFormat_ARRAYSIZE = PolicyRuleFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PolicyRuleFormat_descriptor();
template<typename T>
inline const std::string& PolicyRuleFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PolicyRuleFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PolicyRuleFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PolicyRuleFormat_descriptor(), enum_t_value);
}
inline bool PolicyRuleFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PolicyRuleFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PolicyRuleFormat>(
    PolicyRuleFormat_descriptor(), name, value);
}
// ===================================================================

class SecurityPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SecurityPolicy) */ {
 public:
  inline SecurityPolicy() : SecurityPolicy(nullptr) {}
  ~SecurityPolicy() override;
  explicit constexpr SecurityPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityPolicy(const SecurityPolicy& from);
  SecurityPolicy(SecurityPolicy&& from) noexcept
    : SecurityPolicy() {
    *this = ::std::move(from);
  }

  inline SecurityPolicy& operator=(const SecurityPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityPolicy& operator=(SecurityPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityPolicy* internal_default_instance() {
    return reinterpret_cast<const SecurityPolicy*>(
               &_SecurityPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SecurityPolicy& a, SecurityPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecurityPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SecurityPolicy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SecurityPolicy";
  }
  protected:
  explicit SecurityPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.SecurityPolicySpec spec = 1;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* spec);
  ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.SecurityPolicyStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* release_status();
  ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* mutable_status();
  void set_allocated_status(::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* status);
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus& _internal_status() const;
  ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* status);
  ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SecurityPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* spec_;
  ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class SecurityPolicySpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SecurityPolicySpec) */ {
 public:
  inline SecurityPolicySpec() : SecurityPolicySpec(nullptr) {}
  ~SecurityPolicySpec() override;
  explicit constexpr SecurityPolicySpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityPolicySpec(const SecurityPolicySpec& from);
  SecurityPolicySpec(SecurityPolicySpec&& from) noexcept
    : SecurityPolicySpec() {
    *this = ::std::move(from);
  }

  inline SecurityPolicySpec& operator=(const SecurityPolicySpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityPolicySpec& operator=(SecurityPolicySpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityPolicySpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityPolicySpec* internal_default_instance() {
    return reinterpret_cast<const SecurityPolicySpec*>(
               &_SecurityPolicySpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SecurityPolicySpec& a, SecurityPolicySpec& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityPolicySpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityPolicySpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityPolicySpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityPolicySpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecurityPolicySpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SecurityPolicySpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityPolicySpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SecurityPolicySpec";
  }
  protected:
  explicit SecurityPolicySpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 6,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kAddressFamilyFieldNumber = 3,
    kStatelessFieldNumber = 4,
    kDefaultSecurityActionFieldNumber = 5,
    kRuleFormatFieldNumber = 7,
  };
  // repeated .opi_api.network.cloud.v1alpha1.SecurityRuleInfo rules = 6;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo >*
      mutable_rules();
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo& _internal_rules(int index) const;
  ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo* _internal_add_rules();
  public:
  const ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo& rules(int index) const;
  ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo >&
      rules() const;

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.network.cloud.v1alpha1.SecurityPolicyType type = 2;
  void clear_type();
  ::opi_api::network::cloud::v1alpha1::SecurityPolicyType type() const;
  void set_type(::opi_api::network::cloud::v1alpha1::SecurityPolicyType value);
  private:
  ::opi_api::network::cloud::v1alpha1::SecurityPolicyType _internal_type() const;
  void _internal_set_type(::opi_api::network::cloud::v1alpha1::SecurityPolicyType value);
  public:

  // .opi_api.network.opinetcommon.v1alpha1.IpAf address_family = 3;
  void clear_address_family();
  ::opi_api::network::opinetcommon::v1alpha1::IpAf address_family() const;
  void set_address_family(::opi_api::network::opinetcommon::v1alpha1::IpAf value);
  private:
  ::opi_api::network::opinetcommon::v1alpha1::IpAf _internal_address_family() const;
  void _internal_set_address_family(::opi_api::network::opinetcommon::v1alpha1::IpAf value);
  public:

  // bool stateless = 4;
  void clear_stateless();
  bool stateless() const;
  void set_stateless(bool value);
  private:
  bool _internal_stateless() const;
  void _internal_set_stateless(bool value);
  public:

  // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction default_security_action = 5;
  void clear_default_security_action();
  ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction default_security_action() const;
  void set_default_security_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value);
  private:
  ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction _internal_default_security_action() const;
  void _internal_set_default_security_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value);
  public:

  // .opi_api.network.cloud.v1alpha1.PolicyRuleFormat rule_format = 7;
  void clear_rule_format();
  ::opi_api::network::cloud::v1alpha1::PolicyRuleFormat rule_format() const;
  void set_rule_format(::opi_api::network::cloud::v1alpha1::PolicyRuleFormat value);
  private:
  ::opi_api::network::cloud::v1alpha1::PolicyRuleFormat _internal_rule_format() const;
  void _internal_set_rule_format(::opi_api::network::cloud::v1alpha1::PolicyRuleFormat value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SecurityPolicySpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo > rules_;
  ::opi_api::common::v1::ObjectKey* id_;
  int type_;
  int address_family_;
  bool stateless_;
  int default_security_action_;
  int rule_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class SecurityRuleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SecurityRuleInfo) */ {
 public:
  inline SecurityRuleInfo() : SecurityRuleInfo(nullptr) {}
  ~SecurityRuleInfo() override;
  explicit constexpr SecurityRuleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityRuleInfo(const SecurityRuleInfo& from);
  SecurityRuleInfo(SecurityRuleInfo&& from) noexcept
    : SecurityRuleInfo() {
    *this = ::std::move(from);
  }

  inline SecurityRuleInfo& operator=(const SecurityRuleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityRuleInfo& operator=(SecurityRuleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityRuleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityRuleInfo* internal_default_instance() {
    return reinterpret_cast<const SecurityRuleInfo*>(
               &_SecurityRuleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SecurityRuleInfo& a, SecurityRuleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityRuleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityRuleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityRuleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityRuleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecurityRuleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SecurityRuleInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityRuleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SecurityRuleInfo";
  }
  protected:
  explicit SecurityRuleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAttrsFieldNumber = 2,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.network.cloud.v1alpha1.SecurityRuleAttrs attrs = 2;
  bool has_attrs() const;
  private:
  bool _internal_has_attrs() const;
  public:
  void clear_attrs();
  const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs& attrs() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* release_attrs();
  ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* mutable_attrs();
  void set_allocated_attrs(::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* attrs);
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs& _internal_attrs() const;
  ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* _internal_mutable_attrs();
  public:
  void unsafe_arena_set_allocated_attrs(
      ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* attrs);
  ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* unsafe_arena_release_attrs();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SecurityRuleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* attrs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class SecurityRuleAttrs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs) */ {
 public:
  inline SecurityRuleAttrs() : SecurityRuleAttrs(nullptr) {}
  ~SecurityRuleAttrs() override;
  explicit constexpr SecurityRuleAttrs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityRuleAttrs(const SecurityRuleAttrs& from);
  SecurityRuleAttrs(SecurityRuleAttrs&& from) noexcept
    : SecurityRuleAttrs() {
    *this = ::std::move(from);
  }

  inline SecurityRuleAttrs& operator=(const SecurityRuleAttrs& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityRuleAttrs& operator=(SecurityRuleAttrs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityRuleAttrs& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityRuleAttrs* internal_default_instance() {
    return reinterpret_cast<const SecurityRuleAttrs*>(
               &_SecurityRuleAttrs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SecurityRuleAttrs& a, SecurityRuleAttrs& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityRuleAttrs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityRuleAttrs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityRuleAttrs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityRuleAttrs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecurityRuleAttrs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SecurityRuleAttrs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityRuleAttrs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SecurityRuleAttrs";
  }
  protected:
  explicit SecurityRuleAttrs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldNumber = 2,
    kAlgSpecFieldNumber = 5,
    kPriorityFieldNumber = 1,
    kActionFieldNumber = 3,
    kTerminatingFieldNumber = 4,
  };
  // .opi_api.network.opinetcommon.v1alpha1.RuleMatch match = 2;
  bool has_match() const;
  private:
  bool _internal_has_match() const;
  public:
  void clear_match();
  const ::opi_api::network::opinetcommon::v1alpha1::RuleMatch& match() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* release_match();
  ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* mutable_match();
  void set_allocated_match(::opi_api::network::opinetcommon::v1alpha1::RuleMatch* match);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::RuleMatch& _internal_match() const;
  ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* _internal_mutable_match();
  public:
  void unsafe_arena_set_allocated_match(
      ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* match);
  ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* unsafe_arena_release_match();

  // .opi_api.network.cloud.v1alpha1.ALGSpec alg_spec = 5;
  bool has_alg_spec() const;
  private:
  bool _internal_has_alg_spec() const;
  public:
  void clear_alg_spec();
  const ::opi_api::network::cloud::v1alpha1::ALGSpec& alg_spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::ALGSpec* release_alg_spec();
  ::opi_api::network::cloud::v1alpha1::ALGSpec* mutable_alg_spec();
  void set_allocated_alg_spec(::opi_api::network::cloud::v1alpha1::ALGSpec* alg_spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::ALGSpec& _internal_alg_spec() const;
  ::opi_api::network::cloud::v1alpha1::ALGSpec* _internal_mutable_alg_spec();
  public:
  void unsafe_arena_set_allocated_alg_spec(
      ::opi_api::network::cloud::v1alpha1::ALGSpec* alg_spec);
  ::opi_api::network::cloud::v1alpha1::ALGSpec* unsafe_arena_release_alg_spec();

  // int32 priority = 1;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction action = 3;
  void clear_action();
  ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction action() const;
  void set_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value);
  private:
  ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction _internal_action() const;
  void _internal_set_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value);
  public:

  // bool terminating = 4;
  void clear_terminating();
  bool terminating() const;
  void set_terminating(bool value);
  private:
  bool _internal_terminating() const;
  void _internal_set_terminating(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* match_;
  ::opi_api::network::cloud::v1alpha1::ALGSpec* alg_spec_;
  int32_t priority_;
  int action_;
  bool terminating_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class FTPOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.FTPOptions) */ {
 public:
  inline FTPOptions() : FTPOptions(nullptr) {}
  ~FTPOptions() override;
  explicit constexpr FTPOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FTPOptions(const FTPOptions& from);
  FTPOptions(FTPOptions&& from) noexcept
    : FTPOptions() {
    *this = ::std::move(from);
  }

  inline FTPOptions& operator=(const FTPOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FTPOptions& operator=(FTPOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FTPOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const FTPOptions* internal_default_instance() {
    return reinterpret_cast<const FTPOptions*>(
               &_FTPOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FTPOptions& a, FTPOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(FTPOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FTPOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FTPOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FTPOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FTPOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FTPOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FTPOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.FTPOptions";
  }
  protected:
  explicit FTPOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowIpMismatchFieldNumber = 1,
  };
  // bool allow_ip_mismatch = 1;
  void clear_allow_ip_mismatch();
  bool allow_ip_mismatch() const;
  void set_allow_ip_mismatch(bool value);
  private:
  bool _internal_allow_ip_mismatch() const;
  void _internal_set_allow_ip_mismatch(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.FTPOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool allow_ip_mismatch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class DNSOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.DNSOptions) */ {
 public:
  inline DNSOptions() : DNSOptions(nullptr) {}
  ~DNSOptions() override;
  explicit constexpr DNSOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DNSOptions(const DNSOptions& from);
  DNSOptions(DNSOptions&& from) noexcept
    : DNSOptions() {
    *this = ::std::move(from);
  }

  inline DNSOptions& operator=(const DNSOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline DNSOptions& operator=(DNSOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DNSOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const DNSOptions* internal_default_instance() {
    return reinterpret_cast<const DNSOptions*>(
               &_DNSOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DNSOptions& a, DNSOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(DNSOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DNSOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DNSOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DNSOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DNSOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DNSOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DNSOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.DNSOptions";
  }
  protected:
  explicit DNSOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDropMultiQueryMessagesFieldNumber = 1,
    kDropLargeDomainNameMessagesFieldNumber = 2,
    kDropLongLabelMessagesFieldNumber = 3,
    kDropMultiZoneMessagesFieldNumber = 4,
    kResponseTimeoutFieldNumber = 5,
    kMaxMessageLengthFieldNumber = 6,
  };
  // bool drop_multi_query_messages = 1;
  void clear_drop_multi_query_messages();
  bool drop_multi_query_messages() const;
  void set_drop_multi_query_messages(bool value);
  private:
  bool _internal_drop_multi_query_messages() const;
  void _internal_set_drop_multi_query_messages(bool value);
  public:

  // bool drop_large_domain_name_messages = 2;
  void clear_drop_large_domain_name_messages();
  bool drop_large_domain_name_messages() const;
  void set_drop_large_domain_name_messages(bool value);
  private:
  bool _internal_drop_large_domain_name_messages() const;
  void _internal_set_drop_large_domain_name_messages(bool value);
  public:

  // bool drop_long_label_messages = 3;
  void clear_drop_long_label_messages();
  bool drop_long_label_messages() const;
  void set_drop_long_label_messages(bool value);
  private:
  bool _internal_drop_long_label_messages() const;
  void _internal_set_drop_long_label_messages(bool value);
  public:

  // bool drop_multi_zone_messages = 4;
  void clear_drop_multi_zone_messages();
  bool drop_multi_zone_messages() const;
  void set_drop_multi_zone_messages(bool value);
  private:
  bool _internal_drop_multi_zone_messages() const;
  void _internal_set_drop_multi_zone_messages(bool value);
  public:

  // int32 response_timeout = 5;
  void clear_response_timeout();
  int32_t response_timeout() const;
  void set_response_timeout(int32_t value);
  private:
  int32_t _internal_response_timeout() const;
  void _internal_set_response_timeout(int32_t value);
  public:

  // int32 max_message_length = 6;
  void clear_max_message_length();
  int32_t max_message_length() const;
  void set_max_message_length(int32_t value);
  private:
  int32_t _internal_max_message_length() const;
  void _internal_set_max_message_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.DNSOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool drop_multi_query_messages_;
  bool drop_large_domain_name_messages_;
  bool drop_long_label_messages_;
  bool drop_multi_zone_messages_;
  int32_t response_timeout_;
  int32_t max_message_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class MSRPCOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.MSRPCOptions) */ {
 public:
  inline MSRPCOptions() : MSRPCOptions(nullptr) {}
  ~MSRPCOptions() override;
  explicit constexpr MSRPCOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MSRPCOptions(const MSRPCOptions& from);
  MSRPCOptions(MSRPCOptions&& from) noexcept
    : MSRPCOptions() {
    *this = ::std::move(from);
  }

  inline MSRPCOptions& operator=(const MSRPCOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSRPCOptions& operator=(MSRPCOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MSRPCOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const MSRPCOptions* internal_default_instance() {
    return reinterpret_cast<const MSRPCOptions*>(
               &_MSRPCOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MSRPCOptions& a, MSRPCOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(MSRPCOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MSRPCOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MSRPCOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MSRPCOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MSRPCOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MSRPCOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSRPCOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.MSRPCOptions";
  }
  protected:
  explicit MSRPCOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgramIdFieldNumber = 1,
  };
  // repeated bytes program_id = 1;
  int program_id_size() const;
  private:
  int _internal_program_id_size() const;
  public:
  void clear_program_id();
  const std::string& program_id(int index) const;
  std::string* mutable_program_id(int index);
  void set_program_id(int index, const std::string& value);
  void set_program_id(int index, std::string&& value);
  void set_program_id(int index, const char* value);
  void set_program_id(int index, const void* value, size_t size);
  std::string* add_program_id();
  void add_program_id(const std::string& value);
  void add_program_id(std::string&& value);
  void add_program_id(const char* value);
  void add_program_id(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& program_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_program_id();
  private:
  const std::string& _internal_program_id(int index) const;
  std::string* _internal_add_program_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.MSRPCOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> program_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class SunRPCOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SunRPCOptions) */ {
 public:
  inline SunRPCOptions() : SunRPCOptions(nullptr) {}
  ~SunRPCOptions() override;
  explicit constexpr SunRPCOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SunRPCOptions(const SunRPCOptions& from);
  SunRPCOptions(SunRPCOptions&& from) noexcept
    : SunRPCOptions() {
    *this = ::std::move(from);
  }

  inline SunRPCOptions& operator=(const SunRPCOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SunRPCOptions& operator=(SunRPCOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SunRPCOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const SunRPCOptions* internal_default_instance() {
    return reinterpret_cast<const SunRPCOptions*>(
               &_SunRPCOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SunRPCOptions& a, SunRPCOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SunRPCOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SunRPCOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SunRPCOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SunRPCOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SunRPCOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SunRPCOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SunRPCOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SunRPCOptions";
  }
  protected:
  explicit SunRPCOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgramIdFieldNumber = 1,
  };
  // repeated bytes program_id = 1;
  int program_id_size() const;
  private:
  int _internal_program_id_size() const;
  public:
  void clear_program_id();
  const std::string& program_id(int index) const;
  std::string* mutable_program_id(int index);
  void set_program_id(int index, const std::string& value);
  void set_program_id(int index, std::string&& value);
  void set_program_id(int index, const char* value);
  void set_program_id(int index, const void* value, size_t size);
  std::string* add_program_id();
  void add_program_id(const std::string& value);
  void add_program_id(std::string&& value);
  void add_program_id(const char* value);
  void add_program_id(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& program_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_program_id();
  private:
  const std::string& _internal_program_id(int index) const;
  std::string* _internal_add_program_id();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SunRPCOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> program_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class ALGSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.ALGSpec) */ {
 public:
  inline ALGSpec() : ALGSpec(nullptr) {}
  ~ALGSpec() override;
  explicit constexpr ALGSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ALGSpec(const ALGSpec& from);
  ALGSpec(ALGSpec&& from) noexcept
    : ALGSpec() {
    *this = ::std::move(from);
  }

  inline ALGSpec& operator=(const ALGSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline ALGSpec& operator=(ALGSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ALGSpec& default_instance() {
    return *internal_default_instance();
  }
  enum AlgOptionsCase {
    kFtpOptions = 3,
    kDnsOptions = 4,
    kMsrpcOptions = 5,
    kSunrpcOptions = 6,
    ALG_OPTIONS_NOT_SET = 0,
  };

  static inline const ALGSpec* internal_default_instance() {
    return reinterpret_cast<const ALGSpec*>(
               &_ALGSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ALGSpec& a, ALGSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(ALGSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ALGSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ALGSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ALGSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ALGSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ALGSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ALGSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.ALGSpec";
  }
  protected:
  explicit ALGSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgTypeFieldNumber = 1,
    kIdleTimeoutFieldNumber = 2,
    kFtpOptionsFieldNumber = 3,
    kDnsOptionsFieldNumber = 4,
    kMsrpcOptionsFieldNumber = 5,
    kSunrpcOptionsFieldNumber = 6,
  };
  // .opi_api.network.cloud.v1alpha1.ALGType alg_type = 1;
  void clear_alg_type();
  ::opi_api::network::cloud::v1alpha1::ALGType alg_type() const;
  void set_alg_type(::opi_api::network::cloud::v1alpha1::ALGType value);
  private:
  ::opi_api::network::cloud::v1alpha1::ALGType _internal_alg_type() const;
  void _internal_set_alg_type(::opi_api::network::cloud::v1alpha1::ALGType value);
  public:

  // int32 idle_timeout = 2;
  void clear_idle_timeout();
  int32_t idle_timeout() const;
  void set_idle_timeout(int32_t value);
  private:
  int32_t _internal_idle_timeout() const;
  void _internal_set_idle_timeout(int32_t value);
  public:

  // .opi_api.network.cloud.v1alpha1.FTPOptions ftp_options = 3;
  bool has_ftp_options() const;
  private:
  bool _internal_has_ftp_options() const;
  public:
  void clear_ftp_options();
  const ::opi_api::network::cloud::v1alpha1::FTPOptions& ftp_options() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::FTPOptions* release_ftp_options();
  ::opi_api::network::cloud::v1alpha1::FTPOptions* mutable_ftp_options();
  void set_allocated_ftp_options(::opi_api::network::cloud::v1alpha1::FTPOptions* ftp_options);
  private:
  const ::opi_api::network::cloud::v1alpha1::FTPOptions& _internal_ftp_options() const;
  ::opi_api::network::cloud::v1alpha1::FTPOptions* _internal_mutable_ftp_options();
  public:
  void unsafe_arena_set_allocated_ftp_options(
      ::opi_api::network::cloud::v1alpha1::FTPOptions* ftp_options);
  ::opi_api::network::cloud::v1alpha1::FTPOptions* unsafe_arena_release_ftp_options();

  // .opi_api.network.cloud.v1alpha1.DNSOptions dns_options = 4;
  bool has_dns_options() const;
  private:
  bool _internal_has_dns_options() const;
  public:
  void clear_dns_options();
  const ::opi_api::network::cloud::v1alpha1::DNSOptions& dns_options() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::DNSOptions* release_dns_options();
  ::opi_api::network::cloud::v1alpha1::DNSOptions* mutable_dns_options();
  void set_allocated_dns_options(::opi_api::network::cloud::v1alpha1::DNSOptions* dns_options);
  private:
  const ::opi_api::network::cloud::v1alpha1::DNSOptions& _internal_dns_options() const;
  ::opi_api::network::cloud::v1alpha1::DNSOptions* _internal_mutable_dns_options();
  public:
  void unsafe_arena_set_allocated_dns_options(
      ::opi_api::network::cloud::v1alpha1::DNSOptions* dns_options);
  ::opi_api::network::cloud::v1alpha1::DNSOptions* unsafe_arena_release_dns_options();

  // .opi_api.network.cloud.v1alpha1.MSRPCOptions msrpc_options = 5;
  bool has_msrpc_options() const;
  private:
  bool _internal_has_msrpc_options() const;
  public:
  void clear_msrpc_options();
  const ::opi_api::network::cloud::v1alpha1::MSRPCOptions& msrpc_options() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::MSRPCOptions* release_msrpc_options();
  ::opi_api::network::cloud::v1alpha1::MSRPCOptions* mutable_msrpc_options();
  void set_allocated_msrpc_options(::opi_api::network::cloud::v1alpha1::MSRPCOptions* msrpc_options);
  private:
  const ::opi_api::network::cloud::v1alpha1::MSRPCOptions& _internal_msrpc_options() const;
  ::opi_api::network::cloud::v1alpha1::MSRPCOptions* _internal_mutable_msrpc_options();
  public:
  void unsafe_arena_set_allocated_msrpc_options(
      ::opi_api::network::cloud::v1alpha1::MSRPCOptions* msrpc_options);
  ::opi_api::network::cloud::v1alpha1::MSRPCOptions* unsafe_arena_release_msrpc_options();

  // .opi_api.network.cloud.v1alpha1.SunRPCOptions sunrpc_options = 6;
  bool has_sunrpc_options() const;
  private:
  bool _internal_has_sunrpc_options() const;
  public:
  void clear_sunrpc_options();
  const ::opi_api::network::cloud::v1alpha1::SunRPCOptions& sunrpc_options() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SunRPCOptions* release_sunrpc_options();
  ::opi_api::network::cloud::v1alpha1::SunRPCOptions* mutable_sunrpc_options();
  void set_allocated_sunrpc_options(::opi_api::network::cloud::v1alpha1::SunRPCOptions* sunrpc_options);
  private:
  const ::opi_api::network::cloud::v1alpha1::SunRPCOptions& _internal_sunrpc_options() const;
  ::opi_api::network::cloud::v1alpha1::SunRPCOptions* _internal_mutable_sunrpc_options();
  public:
  void unsafe_arena_set_allocated_sunrpc_options(
      ::opi_api::network::cloud::v1alpha1::SunRPCOptions* sunrpc_options);
  ::opi_api::network::cloud::v1alpha1::SunRPCOptions* unsafe_arena_release_sunrpc_options();

  void clear_alg_options();
  AlgOptionsCase alg_options_case() const;
  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.ALGSpec)
 private:
  class _Internal;
  void set_has_ftp_options();
  void set_has_dns_options();
  void set_has_msrpc_options();
  void set_has_sunrpc_options();

  inline bool has_alg_options() const;
  inline void clear_has_alg_options();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int alg_type_;
  int32_t idle_timeout_;
  union AlgOptionsUnion {
    constexpr AlgOptionsUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::opi_api::network::cloud::v1alpha1::FTPOptions* ftp_options_;
    ::opi_api::network::cloud::v1alpha1::DNSOptions* dns_options_;
    ::opi_api::network::cloud::v1alpha1::MSRPCOptions* msrpc_options_;
    ::opi_api::network::cloud::v1alpha1::SunRPCOptions* sunrpc_options_;
  } alg_options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class SecurityPolicyStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus) */ {
 public:
  inline SecurityPolicyStatus() : SecurityPolicyStatus(nullptr) {}
  ~SecurityPolicyStatus() override;
  explicit constexpr SecurityPolicyStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityPolicyStatus(const SecurityPolicyStatus& from);
  SecurityPolicyStatus(SecurityPolicyStatus&& from) noexcept
    : SecurityPolicyStatus() {
    *this = ::std::move(from);
  }

  inline SecurityPolicyStatus& operator=(const SecurityPolicyStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityPolicyStatus& operator=(SecurityPolicyStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityPolicyStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityPolicyStatus* internal_default_instance() {
    return reinterpret_cast<const SecurityPolicyStatus*>(
               &_SecurityPolicyStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SecurityPolicyStatus& a, SecurityPolicyStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityPolicyStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityPolicyStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityPolicyStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityPolicyStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecurityPolicyStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SecurityPolicyStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityPolicyStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SecurityPolicyStatus";
  }
  protected:
  explicit SecurityPolicyStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHwPoolHandleFieldNumber = 5,
    kHwHandleFieldNumber = 6,
    kRuleCountFieldNumber = 1,
    kVpcCountFieldNumber = 2,
    kSubnetCountFieldNumber = 3,
    kVnicCountFieldNumber = 4,
    kPolicyBaseAddressFieldNumber = 7,
  };
  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_pool_handle = 5;
  bool has_hw_pool_handle() const;
  private:
  bool _internal_has_hw_pool_handle() const;
  public:
  void clear_hw_pool_handle();
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& hw_pool_handle() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::HwHandle* release_hw_pool_handle();
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* mutable_hw_pool_handle();
  void set_allocated_hw_pool_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_pool_handle);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& _internal_hw_pool_handle() const;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _internal_mutable_hw_pool_handle();
  public:
  void unsafe_arena_set_allocated_hw_pool_handle(
      ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_pool_handle);
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* unsafe_arena_release_hw_pool_handle();

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 6;
  bool has_hw_handle() const;
  private:
  bool _internal_has_hw_handle() const;
  public:
  void clear_hw_handle();
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& hw_handle() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::HwHandle* release_hw_handle();
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* mutable_hw_handle();
  void set_allocated_hw_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& _internal_hw_handle() const;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _internal_mutable_hw_handle();
  public:
  void unsafe_arena_set_allocated_hw_handle(
      ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle);
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* unsafe_arena_release_hw_handle();

  // int32 rule_count = 1;
  void clear_rule_count();
  int32_t rule_count() const;
  void set_rule_count(int32_t value);
  private:
  int32_t _internal_rule_count() const;
  void _internal_set_rule_count(int32_t value);
  public:

  // int32 vpc_count = 2;
  void clear_vpc_count();
  int32_t vpc_count() const;
  void set_vpc_count(int32_t value);
  private:
  int32_t _internal_vpc_count() const;
  void _internal_set_vpc_count(int32_t value);
  public:

  // int32 subnet_count = 3;
  void clear_subnet_count();
  int32_t subnet_count() const;
  void set_subnet_count(int32_t value);
  private:
  int32_t _internal_subnet_count() const;
  void _internal_set_subnet_count(int32_t value);
  public:

  // int32 vnic_count = 4;
  void clear_vnic_count();
  int32_t vnic_count() const;
  void set_vnic_count(int32_t value);
  private:
  int32_t _internal_vnic_count() const;
  void _internal_set_vnic_count(int32_t value);
  public:

  // uint64 policy_base_address = 7;
  void clear_policy_base_address();
  uint64_t policy_base_address() const;
  void set_policy_base_address(uint64_t value);
  private:
  uint64_t _internal_policy_base_address() const;
  void _internal_set_policy_base_address(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_pool_handle_;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle_;
  int32_t rule_count_;
  int32_t vpc_count_;
  int32_t subnet_count_;
  int32_t vnic_count_;
  uint64_t policy_base_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class SecurityRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SecurityRule) */ {
 public:
  inline SecurityRule() : SecurityRule(nullptr) {}
  ~SecurityRule() override;
  explicit constexpr SecurityRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityRule(const SecurityRule& from);
  SecurityRule(SecurityRule&& from) noexcept
    : SecurityRule() {
    *this = ::std::move(from);
  }

  inline SecurityRule& operator=(const SecurityRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityRule& operator=(SecurityRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityRule* internal_default_instance() {
    return reinterpret_cast<const SecurityRule*>(
               &_SecurityRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SecurityRule& a, SecurityRule& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecurityRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SecurityRule& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SecurityRule";
  }
  protected:
  explicit SecurityRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.SecurityRuleSpec spec = 1;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* spec);
  ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.SecurityRuleStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* release_status();
  ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* mutable_status();
  void set_allocated_status(::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* status);
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus& _internal_status() const;
  ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* status);
  ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SecurityRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class SecurityRuleSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SecurityRuleSpec) */ {
 public:
  inline SecurityRuleSpec() : SecurityRuleSpec(nullptr) {}
  ~SecurityRuleSpec() override;
  explicit constexpr SecurityRuleSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityRuleSpec(const SecurityRuleSpec& from);
  SecurityRuleSpec(SecurityRuleSpec&& from) noexcept
    : SecurityRuleSpec() {
    *this = ::std::move(from);
  }

  inline SecurityRuleSpec& operator=(const SecurityRuleSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityRuleSpec& operator=(SecurityRuleSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityRuleSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityRuleSpec* internal_default_instance() {
    return reinterpret_cast<const SecurityRuleSpec*>(
               &_SecurityRuleSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SecurityRuleSpec& a, SecurityRuleSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityRuleSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityRuleSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityRuleSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityRuleSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecurityRuleSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SecurityRuleSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityRuleSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SecurityRuleSpec";
  }
  protected:
  explicit SecurityRuleSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSecurityPolicyIdFieldNumber = 2,
    kAttrsFieldNumber = 3,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.common.v1.ObjectKey security_policy_id = 2;
  bool has_security_policy_id() const;
  private:
  bool _internal_has_security_policy_id() const;
  public:
  void clear_security_policy_id();
  const ::opi_api::common::v1::ObjectKey& security_policy_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_security_policy_id();
  ::opi_api::common::v1::ObjectKey* mutable_security_policy_id();
  void set_allocated_security_policy_id(::opi_api::common::v1::ObjectKey* security_policy_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_security_policy_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_security_policy_id();
  public:
  void unsafe_arena_set_allocated_security_policy_id(
      ::opi_api::common::v1::ObjectKey* security_policy_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_security_policy_id();

  // .opi_api.network.cloud.v1alpha1.SecurityRuleAttrs attrs = 3;
  bool has_attrs() const;
  private:
  bool _internal_has_attrs() const;
  public:
  void clear_attrs();
  const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs& attrs() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* release_attrs();
  ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* mutable_attrs();
  void set_allocated_attrs(::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* attrs);
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs& _internal_attrs() const;
  ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* _internal_mutable_attrs();
  public:
  void unsafe_arena_set_allocated_attrs(
      ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* attrs);
  ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* unsafe_arena_release_attrs();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SecurityRuleSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  ::opi_api::common::v1::ObjectKey* security_policy_id_;
  ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* attrs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class SecurityRuleStatus final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SecurityRuleStatus) */ {
 public:
  inline SecurityRuleStatus() : SecurityRuleStatus(nullptr) {}
  explicit constexpr SecurityRuleStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityRuleStatus(const SecurityRuleStatus& from);
  SecurityRuleStatus(SecurityRuleStatus&& from) noexcept
    : SecurityRuleStatus() {
    *this = ::std::move(from);
  }

  inline SecurityRuleStatus& operator=(const SecurityRuleStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityRuleStatus& operator=(SecurityRuleStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityRuleStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityRuleStatus* internal_default_instance() {
    return reinterpret_cast<const SecurityRuleStatus*>(
               &_SecurityRuleStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SecurityRuleStatus& a, SecurityRuleStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityRuleStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityRuleStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityRuleStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityRuleStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SecurityRuleStatus& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SecurityRuleStatus& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SecurityRuleStatus";
  }
  protected:
  explicit SecurityRuleStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SecurityRuleStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class SecurityProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SecurityProfile) */ {
 public:
  inline SecurityProfile() : SecurityProfile(nullptr) {}
  ~SecurityProfile() override;
  explicit constexpr SecurityProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityProfile(const SecurityProfile& from);
  SecurityProfile(SecurityProfile&& from) noexcept
    : SecurityProfile() {
    *this = ::std::move(from);
  }

  inline SecurityProfile& operator=(const SecurityProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityProfile& operator=(SecurityProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityProfile* internal_default_instance() {
    return reinterpret_cast<const SecurityProfile*>(
               &_SecurityProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SecurityProfile& a, SecurityProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecurityProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SecurityProfile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SecurityProfile";
  }
  protected:
  explicit SecurityProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.SecurityProfileSpec spec = 1;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* spec);
  ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.SecurityProfileStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* release_status();
  ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* mutable_status();
  void set_allocated_status(::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* status);
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus& _internal_status() const;
  ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* status);
  ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SecurityProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class SecurityProfileSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SecurityProfileSpec) */ {
 public:
  inline SecurityProfileSpec() : SecurityProfileSpec(nullptr) {}
  ~SecurityProfileSpec() override;
  explicit constexpr SecurityProfileSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityProfileSpec(const SecurityProfileSpec& from);
  SecurityProfileSpec(SecurityProfileSpec&& from) noexcept
    : SecurityProfileSpec() {
    *this = ::std::move(from);
  }

  inline SecurityProfileSpec& operator=(const SecurityProfileSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityProfileSpec& operator=(SecurityProfileSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityProfileSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityProfileSpec* internal_default_instance() {
    return reinterpret_cast<const SecurityProfileSpec*>(
               &_SecurityProfileSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SecurityProfileSpec& a, SecurityProfileSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityProfileSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityProfileSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityProfileSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityProfileSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecurityProfileSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SecurityProfileSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityProfileSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SecurityProfileSpec";
  }
  protected:
  explicit SecurityProfileSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kConnectionTrackingEnableFieldNumber = 2,
    kRuleStatsEnableFieldNumber = 3,
    kDefaultFirewallActionFieldNumber = 4,
    kTcpIdleTimeoutFieldNumber = 5,
    kUdpIdleTimeoutFieldNumber = 6,
    kIcmpIdleTimeoutFieldNumber = 7,
    kOtherIdleTimeoutFieldNumber = 8,
    kTcpConnectionSetupTimeoutFieldNumber = 9,
    kTcpHalfCloseTimeoutFieldNumber = 10,
    kTcpCloseTimeoutFieldNumber = 11,
    kTcpDorpTimeoutFieldNumber = 12,
    kUdpDropTimeoutFieldNumber = 13,
    kIcmpDropTimeoutFieldNumber = 14,
    kOtherDropTimeoutFieldNumber = 15,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // bool connection_tracking_enable = 2;
  void clear_connection_tracking_enable();
  bool connection_tracking_enable() const;
  void set_connection_tracking_enable(bool value);
  private:
  bool _internal_connection_tracking_enable() const;
  void _internal_set_connection_tracking_enable(bool value);
  public:

  // bool rule_stats_enable = 3;
  void clear_rule_stats_enable();
  bool rule_stats_enable() const;
  void set_rule_stats_enable(bool value);
  private:
  bool _internal_rule_stats_enable() const;
  void _internal_set_rule_stats_enable(bool value);
  public:

  // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction default_firewall_action = 4;
  void clear_default_firewall_action();
  ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction default_firewall_action() const;
  void set_default_firewall_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value);
  private:
  ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction _internal_default_firewall_action() const;
  void _internal_set_default_firewall_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value);
  public:

  // int32 tcp_idle_timeout = 5;
  void clear_tcp_idle_timeout();
  int32_t tcp_idle_timeout() const;
  void set_tcp_idle_timeout(int32_t value);
  private:
  int32_t _internal_tcp_idle_timeout() const;
  void _internal_set_tcp_idle_timeout(int32_t value);
  public:

  // int32 udp_idle_timeout = 6;
  void clear_udp_idle_timeout();
  int32_t udp_idle_timeout() const;
  void set_udp_idle_timeout(int32_t value);
  private:
  int32_t _internal_udp_idle_timeout() const;
  void _internal_set_udp_idle_timeout(int32_t value);
  public:

  // int32 icmp_idle_timeout = 7;
  void clear_icmp_idle_timeout();
  int32_t icmp_idle_timeout() const;
  void set_icmp_idle_timeout(int32_t value);
  private:
  int32_t _internal_icmp_idle_timeout() const;
  void _internal_set_icmp_idle_timeout(int32_t value);
  public:

  // int32 other_idle_timeout = 8;
  void clear_other_idle_timeout();
  int32_t other_idle_timeout() const;
  void set_other_idle_timeout(int32_t value);
  private:
  int32_t _internal_other_idle_timeout() const;
  void _internal_set_other_idle_timeout(int32_t value);
  public:

  // int32 tcp_connection_setup_timeout = 9;
  void clear_tcp_connection_setup_timeout();
  int32_t tcp_connection_setup_timeout() const;
  void set_tcp_connection_setup_timeout(int32_t value);
  private:
  int32_t _internal_tcp_connection_setup_timeout() const;
  void _internal_set_tcp_connection_setup_timeout(int32_t value);
  public:

  // int32 tcp_half_close_timeout = 10;
  void clear_tcp_half_close_timeout();
  int32_t tcp_half_close_timeout() const;
  void set_tcp_half_close_timeout(int32_t value);
  private:
  int32_t _internal_tcp_half_close_timeout() const;
  void _internal_set_tcp_half_close_timeout(int32_t value);
  public:

  // int32 tcp_close_timeout = 11;
  void clear_tcp_close_timeout();
  int32_t tcp_close_timeout() const;
  void set_tcp_close_timeout(int32_t value);
  private:
  int32_t _internal_tcp_close_timeout() const;
  void _internal_set_tcp_close_timeout(int32_t value);
  public:

  // int32 tcp_dorp_timeout = 12;
  void clear_tcp_dorp_timeout();
  int32_t tcp_dorp_timeout() const;
  void set_tcp_dorp_timeout(int32_t value);
  private:
  int32_t _internal_tcp_dorp_timeout() const;
  void _internal_set_tcp_dorp_timeout(int32_t value);
  public:

  // int32 udp_drop_timeout = 13;
  void clear_udp_drop_timeout();
  int32_t udp_drop_timeout() const;
  void set_udp_drop_timeout(int32_t value);
  private:
  int32_t _internal_udp_drop_timeout() const;
  void _internal_set_udp_drop_timeout(int32_t value);
  public:

  // int32 icmp_drop_timeout = 14;
  void clear_icmp_drop_timeout();
  int32_t icmp_drop_timeout() const;
  void set_icmp_drop_timeout(int32_t value);
  private:
  int32_t _internal_icmp_drop_timeout() const;
  void _internal_set_icmp_drop_timeout(int32_t value);
  public:

  // int32 other_drop_timeout = 15;
  void clear_other_drop_timeout();
  int32_t other_drop_timeout() const;
  void set_other_drop_timeout(int32_t value);
  private:
  int32_t _internal_other_drop_timeout() const;
  void _internal_set_other_drop_timeout(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SecurityProfileSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  bool connection_tracking_enable_;
  bool rule_stats_enable_;
  int default_firewall_action_;
  int32_t tcp_idle_timeout_;
  int32_t udp_idle_timeout_;
  int32_t icmp_idle_timeout_;
  int32_t other_idle_timeout_;
  int32_t tcp_connection_setup_timeout_;
  int32_t tcp_half_close_timeout_;
  int32_t tcp_close_timeout_;
  int32_t tcp_dorp_timeout_;
  int32_t udp_drop_timeout_;
  int32_t icmp_drop_timeout_;
  int32_t other_drop_timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class SecurityProfileStatus final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SecurityProfileStatus) */ {
 public:
  inline SecurityProfileStatus() : SecurityProfileStatus(nullptr) {}
  explicit constexpr SecurityProfileStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityProfileStatus(const SecurityProfileStatus& from);
  SecurityProfileStatus(SecurityProfileStatus&& from) noexcept
    : SecurityProfileStatus() {
    *this = ::std::move(from);
  }

  inline SecurityProfileStatus& operator=(const SecurityProfileStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityProfileStatus& operator=(SecurityProfileStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityProfileStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityProfileStatus* internal_default_instance() {
    return reinterpret_cast<const SecurityProfileStatus*>(
               &_SecurityProfileStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SecurityProfileStatus& a, SecurityProfileStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityProfileStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityProfileStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityProfileStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityProfileStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SecurityProfileStatus& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SecurityProfileStatus& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SecurityProfileStatus";
  }
  protected:
  explicit SecurityProfileStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SecurityProfileStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class PolicyLookupMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.PolicyLookupMatch) */ {
 public:
  inline PolicyLookupMatch() : PolicyLookupMatch(nullptr) {}
  ~PolicyLookupMatch() override;
  explicit constexpr PolicyLookupMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PolicyLookupMatch(const PolicyLookupMatch& from);
  PolicyLookupMatch(PolicyLookupMatch&& from) noexcept
    : PolicyLookupMatch() {
    *this = ::std::move(from);
  }

  inline PolicyLookupMatch& operator=(const PolicyLookupMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyLookupMatch& operator=(PolicyLookupMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyLookupMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyLookupMatch* internal_default_instance() {
    return reinterpret_cast<const PolicyLookupMatch*>(
               &_PolicyLookupMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PolicyLookupMatch& a, PolicyLookupMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyLookupMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyLookupMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyLookupMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyLookupMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PolicyLookupMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PolicyLookupMatch& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyLookupMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.PolicyLookupMatch";
  }
  protected:
  explicit PolicyLookupMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceTagsFieldNumber = 2,
    kDestinationTagsFieldNumber = 4,
    kSourceIpFieldNumber = 1,
    kDestinationIpFieldNumber = 3,
    kProtocolFieldNumber = 5,
    kSourcePortFieldNumber = 6,
    kDestinationPortFieldNumber = 7,
    kIcmpTypeFieldNumber = 8,
    kIcmpCodeFieldNumber = 9,
  };
  // repeated uint32 source_tags = 2;
  int source_tags_size() const;
  private:
  int _internal_source_tags_size() const;
  public:
  void clear_source_tags();
  private:
  uint32_t _internal_source_tags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_source_tags() const;
  void _internal_add_source_tags(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_source_tags();
  public:
  uint32_t source_tags(int index) const;
  void set_source_tags(int index, uint32_t value);
  void add_source_tags(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      source_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_source_tags();

  // repeated uint32 destination_tags = 4;
  int destination_tags_size() const;
  private:
  int _internal_destination_tags_size() const;
  public:
  void clear_destination_tags();
  private:
  uint32_t _internal_destination_tags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_destination_tags() const;
  void _internal_add_destination_tags(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_destination_tags();
  public:
  uint32_t destination_tags(int index) const;
  void set_destination_tags(int index, uint32_t value);
  void add_destination_tags(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      destination_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_destination_tags();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress source_ip = 1;
  bool has_source_ip() const;
  private:
  bool _internal_has_source_ip() const;
  public:
  void clear_source_ip();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& source_ip() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_source_ip();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_source_ip();
  void set_allocated_source_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* source_ip);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_source_ip() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_source_ip();
  public:
  void unsafe_arena_set_allocated_source_ip(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* source_ip);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_source_ip();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress destination_ip = 3;
  bool has_destination_ip() const;
  private:
  bool _internal_has_destination_ip() const;
  public:
  void clear_destination_ip();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& destination_ip() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_destination_ip();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_destination_ip();
  void set_allocated_destination_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* destination_ip);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_destination_ip() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_destination_ip();
  public:
  void unsafe_arena_set_allocated_destination_ip(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* destination_ip);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_destination_ip();

  // int32 protocol = 5;
  void clear_protocol();
  int32_t protocol() const;
  void set_protocol(int32_t value);
  private:
  int32_t _internal_protocol() const;
  void _internal_set_protocol(int32_t value);
  public:

  // int32 source_port = 6;
  void clear_source_port();
  int32_t source_port() const;
  void set_source_port(int32_t value);
  private:
  int32_t _internal_source_port() const;
  void _internal_set_source_port(int32_t value);
  public:

  // int32 destination_port = 7;
  void clear_destination_port();
  int32_t destination_port() const;
  void set_destination_port(int32_t value);
  private:
  int32_t _internal_destination_port() const;
  void _internal_set_destination_port(int32_t value);
  public:

  // int32 icmp_type = 8;
  void clear_icmp_type();
  int32_t icmp_type() const;
  void set_icmp_type(int32_t value);
  private:
  int32_t _internal_icmp_type() const;
  void _internal_set_icmp_type(int32_t value);
  public:

  // int32 icmp_code = 9;
  void clear_icmp_code();
  int32_t icmp_code() const;
  void set_icmp_code(int32_t value);
  private:
  int32_t _internal_icmp_code() const;
  void _internal_set_icmp_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.PolicyLookupMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > source_tags_;
  mutable std::atomic<int> _source_tags_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > destination_tags_;
  mutable std::atomic<int> _destination_tags_cached_byte_size_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* source_ip_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* destination_ip_;
  int32_t protocol_;
  int32_t source_port_;
  int32_t destination_port_;
  int32_t icmp_type_;
  int32_t icmp_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class SecurityPolicyLookupRequest_VnicLookupInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo) */ {
 public:
  inline SecurityPolicyLookupRequest_VnicLookupInfo() : SecurityPolicyLookupRequest_VnicLookupInfo(nullptr) {}
  ~SecurityPolicyLookupRequest_VnicLookupInfo() override;
  explicit constexpr SecurityPolicyLookupRequest_VnicLookupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityPolicyLookupRequest_VnicLookupInfo(const SecurityPolicyLookupRequest_VnicLookupInfo& from);
  SecurityPolicyLookupRequest_VnicLookupInfo(SecurityPolicyLookupRequest_VnicLookupInfo&& from) noexcept
    : SecurityPolicyLookupRequest_VnicLookupInfo() {
    *this = ::std::move(from);
  }

  inline SecurityPolicyLookupRequest_VnicLookupInfo& operator=(const SecurityPolicyLookupRequest_VnicLookupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityPolicyLookupRequest_VnicLookupInfo& operator=(SecurityPolicyLookupRequest_VnicLookupInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityPolicyLookupRequest_VnicLookupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecurityPolicyLookupRequest_VnicLookupInfo* internal_default_instance() {
    return reinterpret_cast<const SecurityPolicyLookupRequest_VnicLookupInfo*>(
               &_SecurityPolicyLookupRequest_VnicLookupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SecurityPolicyLookupRequest_VnicLookupInfo& a, SecurityPolicyLookupRequest_VnicLookupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityPolicyLookupRequest_VnicLookupInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityPolicyLookupRequest_VnicLookupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityPolicyLookupRequest_VnicLookupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityPolicyLookupRequest_VnicLookupInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecurityPolicyLookupRequest_VnicLookupInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SecurityPolicyLookupRequest_VnicLookupInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityPolicyLookupRequest_VnicLookupInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo";
  }
  protected:
  explicit SecurityPolicyLookupRequest_VnicLookupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVnicIdFieldNumber = 1,
    kPolicyDirectionFieldNumber = 2,
    kAddressFamilyFieldNumber = 3,
  };
  // .opi_api.common.v1.ObjectKey vnic_id = 1;
  bool has_vnic_id() const;
  private:
  bool _internal_has_vnic_id() const;
  public:
  void clear_vnic_id();
  const ::opi_api::common::v1::ObjectKey& vnic_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_vnic_id();
  ::opi_api::common::v1::ObjectKey* mutable_vnic_id();
  void set_allocated_vnic_id(::opi_api::common::v1::ObjectKey* vnic_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_vnic_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_vnic_id();
  public:
  void unsafe_arena_set_allocated_vnic_id(
      ::opi_api::common::v1::ObjectKey* vnic_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_vnic_id();

  // .opi_api.network.opinetcommon.v1alpha1.PolicyDir policy_direction = 2;
  void clear_policy_direction();
  ::opi_api::network::opinetcommon::v1alpha1::PolicyDir policy_direction() const;
  void set_policy_direction(::opi_api::network::opinetcommon::v1alpha1::PolicyDir value);
  private:
  ::opi_api::network::opinetcommon::v1alpha1::PolicyDir _internal_policy_direction() const;
  void _internal_set_policy_direction(::opi_api::network::opinetcommon::v1alpha1::PolicyDir value);
  public:

  // .opi_api.network.opinetcommon.v1alpha1.IpAf address_family = 3;
  void clear_address_family();
  ::opi_api::network::opinetcommon::v1alpha1::IpAf address_family() const;
  void set_address_family(::opi_api::network::opinetcommon::v1alpha1::IpAf value);
  private:
  ::opi_api::network::opinetcommon::v1alpha1::IpAf _internal_address_family() const;
  void _internal_set_address_family(::opi_api::network::opinetcommon::v1alpha1::IpAf value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* vnic_id_;
  int policy_direction_;
  int address_family_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class SecurityPolicyLookupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest) */ {
 public:
  inline SecurityPolicyLookupRequest() : SecurityPolicyLookupRequest(nullptr) {}
  ~SecurityPolicyLookupRequest() override;
  explicit constexpr SecurityPolicyLookupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecurityPolicyLookupRequest(const SecurityPolicyLookupRequest& from);
  SecurityPolicyLookupRequest(SecurityPolicyLookupRequest&& from) noexcept
    : SecurityPolicyLookupRequest() {
    *this = ::std::move(from);
  }

  inline SecurityPolicyLookupRequest& operator=(const SecurityPolicyLookupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityPolicyLookupRequest& operator=(SecurityPolicyLookupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecurityPolicyLookupRequest& default_instance() {
    return *internal_default_instance();
  }
  enum LookupInfoCase {
    kPolicyId = 1,
    kVnicLookupInfo = 2,
    LOOKUP_INFO_NOT_SET = 0,
  };

  static inline const SecurityPolicyLookupRequest* internal_default_instance() {
    return reinterpret_cast<const SecurityPolicyLookupRequest*>(
               &_SecurityPolicyLookupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SecurityPolicyLookupRequest& a, SecurityPolicyLookupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityPolicyLookupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityPolicyLookupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecurityPolicyLookupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecurityPolicyLookupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecurityPolicyLookupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SecurityPolicyLookupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityPolicyLookupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest";
  }
  protected:
  explicit SecurityPolicyLookupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SecurityPolicyLookupRequest_VnicLookupInfo VnicLookupInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldsFieldNumber = 3,
    kPolicyIdFieldNumber = 1,
    kVnicLookupInfoFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.PolicyLookupMatch match_fields = 3;
  bool has_match_fields() const;
  private:
  bool _internal_has_match_fields() const;
  public:
  void clear_match_fields();
  const ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch& match_fields() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* release_match_fields();
  ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* mutable_match_fields();
  void set_allocated_match_fields(::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* match_fields);
  private:
  const ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch& _internal_match_fields() const;
  ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* _internal_mutable_match_fields();
  public:
  void unsafe_arena_set_allocated_match_fields(
      ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* match_fields);
  ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* unsafe_arena_release_match_fields();

  // .opi_api.common.v1.ObjectKey policy_id = 1;
  bool has_policy_id() const;
  private:
  bool _internal_has_policy_id() const;
  public:
  void clear_policy_id();
  const ::opi_api::common::v1::ObjectKey& policy_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_policy_id();
  ::opi_api::common::v1::ObjectKey* mutable_policy_id();
  void set_allocated_policy_id(::opi_api::common::v1::ObjectKey* policy_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_policy_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_policy_id();
  public:
  void unsafe_arena_set_allocated_policy_id(
      ::opi_api::common::v1::ObjectKey* policy_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_policy_id();

  // .opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo vnic_lookup_info = 2;
  bool has_vnic_lookup_info() const;
  private:
  bool _internal_has_vnic_lookup_info() const;
  public:
  void clear_vnic_lookup_info();
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo& vnic_lookup_info() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* release_vnic_lookup_info();
  ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* mutable_vnic_lookup_info();
  void set_allocated_vnic_lookup_info(::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* vnic_lookup_info);
  private:
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo& _internal_vnic_lookup_info() const;
  ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* _internal_mutable_vnic_lookup_info();
  public:
  void unsafe_arena_set_allocated_vnic_lookup_info(
      ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* vnic_lookup_info);
  ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* unsafe_arena_release_vnic_lookup_info();

  void clear_lookup_info();
  LookupInfoCase lookup_info_case() const;
  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest)
 private:
  class _Internal;
  void set_has_policy_id();
  void set_has_vnic_lookup_info();

  inline bool has_lookup_info() const;
  inline void clear_has_lookup_info();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* match_fields_;
  union LookupInfoUnion {
    constexpr LookupInfoUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::opi_api::common::v1::ObjectKey* policy_id_;
    ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* vnic_lookup_info_;
  } lookup_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_networkpolicy_2eproto;
};
// -------------------------------------------------------------------

class PolicyLookupResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.PolicyLookupResult) */ {
 public:
  inline PolicyLookupResult() : PolicyLookupResult(nullptr) {}
  ~PolicyLookupResult() override;
  explicit constexpr PolicyLookupResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PolicyLookupResult(const PolicyLookupResult& from);
  PolicyLookupResult(PolicyLookupResult&& from) noexcept
    : PolicyLookupResult() {
    *this = ::std::move(from);
  }

  inline PolicyLookupResult& operator=(const PolicyLookupResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyLookupResult& operator=(PolicyLookupResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyLookupResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyLookupResult* internal_default_instance() {
    return reinterpret_cast<const PolicyLookupResult*>(
               &_PolicyLookupResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PolicyLookupResult& a, PolicyLookupResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyLookupResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyLookupResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyLookupResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyLookupResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PolicyLookupResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PolicyLookupResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyLookupResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.PolicyLookupResult";
  }
  protected:
  explicit PolicyLookupResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuleHwHandleFieldNumber = 1,
    kPriorityFieldNumber = 2,
    kActionFieldNumber = 3,
    kAlgTypeFieldNumber = 4,
    kTerminatingFieldNumber = 5,
  };
  // .opi_api.network.opinetcommon.v1alpha1.HwHandle rule_hw_handle = 1;
  bool has_rule_hw_handle() const;
  private:
  bool _internal_has_rule_hw_handle() const;
  public:
  void clear_rule_hw_handle();
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& rule_hw_handle() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::HwHandle* release_rule_hw_handle();
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* mutable_rule_hw_handle();
  void set_allocated_rule_hw_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* rule_hw_handle);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& _internal_rule_hw_handle() const;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _internal_mutable_rule_hw_handle();
  public:
  void unsafe_arena_set_allocated_rule_hw_handle(
      ::opi_api::network::opinetcommon::v1alpha1::HwHandle* rule_hw_handle);
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* unsafe_arena_release_rule_hw_handle();

  // int32 priority = 2;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction action = 3;
  void clear_action();
  ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction action() const;
  void set_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value);
  private:
  ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction _internal_action() const;
  void _internal_set_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value);
  public:

  // .opi_api.network.cloud.v1alpha1.ALGType alg_type = 4;
  void clear_alg_type();
  ::opi_api::network::cloud::v1alpha1::ALGType alg_type() const;
  void set_alg_type(::opi_api::network::cloud::v1alpha1::ALGType value);
  private:
  ::opi_api::network::cloud::v1alpha1::ALGType _internal_alg_type() const;
  void _internal_set_alg_type(::opi_api::network::cloud::v1alpha1::ALGType value);
  public:

  // bool terminating = 5;
  void clear_terminating();
  bool terminating() const;
  void set_terminating(bool value);
  private:
  bool _internal_terminating() const;
  void _internal_set_terminating(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.PolicyLookupResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* rule_hw_handle_;
  int32_t priority_;
  int action_;
  int alg_type_;
  bool terminating_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkpolicy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SecurityPolicy

// .opi_api.network.cloud.v1alpha1.SecurityPolicySpec spec = 1;
inline bool SecurityPolicy::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool SecurityPolicy::has_spec() const {
  return _internal_has_spec();
}
inline void SecurityPolicy::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec& SecurityPolicy::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec&>(
      ::opi_api::network::cloud::v1alpha1::_SecurityPolicySpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec& SecurityPolicy::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicy.spec)
  return _internal_spec();
}
inline void SecurityPolicy::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicy.spec)
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* SecurityPolicy::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* SecurityPolicy::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityPolicy.spec)
  
  ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* SecurityPolicy::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityPolicySpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* SecurityPolicy::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityPolicy.spec)
  return _msg;
}
inline void SecurityPolicy::set_allocated_spec(::opi_api::network::cloud::v1alpha1::SecurityPolicySpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::SecurityPolicySpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicy.spec)
}

// .opi_api.network.cloud.v1alpha1.SecurityPolicyStatus status = 2;
inline bool SecurityPolicy::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SecurityPolicy::has_status() const {
  return _internal_has_status();
}
inline void SecurityPolicy::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus& SecurityPolicy::_internal_status() const {
  const ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus&>(
      ::opi_api::network::cloud::v1alpha1::_SecurityPolicyStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus& SecurityPolicy::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicy.status)
  return _internal_status();
}
inline void SecurityPolicy::unsafe_arena_set_allocated_status(
    ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicy.status)
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* SecurityPolicy::release_status() {
  
  ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* SecurityPolicy::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityPolicy.status)
  
  ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* SecurityPolicy::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* SecurityPolicy::mutable_status() {
  ::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityPolicy.status)
  return _msg;
}
inline void SecurityPolicy::set_allocated_status(::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::SecurityPolicyStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicy.status)
}

// -------------------------------------------------------------------

// SecurityPolicySpec

// .opi_api.common.v1.ObjectKey id = 1;
inline bool SecurityPolicySpec::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool SecurityPolicySpec::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& SecurityPolicySpec::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& SecurityPolicySpec::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.id)
  return _internal_id();
}
inline void SecurityPolicySpec::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.id)
}
inline ::opi_api::common::v1::ObjectKey* SecurityPolicySpec::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SecurityPolicySpec::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SecurityPolicySpec::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* SecurityPolicySpec::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.id)
  return _msg;
}
inline void SecurityPolicySpec::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.id)
}

// .opi_api.network.cloud.v1alpha1.SecurityPolicyType type = 2;
inline void SecurityPolicySpec::clear_type() {
  type_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicyType SecurityPolicySpec::_internal_type() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::SecurityPolicyType >(type_);
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicyType SecurityPolicySpec::type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.type)
  return _internal_type();
}
inline void SecurityPolicySpec::_internal_set_type(::opi_api::network::cloud::v1alpha1::SecurityPolicyType value) {
  
  type_ = value;
}
inline void SecurityPolicySpec::set_type(::opi_api::network::cloud::v1alpha1::SecurityPolicyType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.type)
}

// .opi_api.network.opinetcommon.v1alpha1.IpAf address_family = 3;
inline void SecurityPolicySpec::clear_address_family() {
  address_family_ = 0;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IpAf SecurityPolicySpec::_internal_address_family() const {
  return static_cast< ::opi_api::network::opinetcommon::v1alpha1::IpAf >(address_family_);
}
inline ::opi_api::network::opinetcommon::v1alpha1::IpAf SecurityPolicySpec::address_family() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.address_family)
  return _internal_address_family();
}
inline void SecurityPolicySpec::_internal_set_address_family(::opi_api::network::opinetcommon::v1alpha1::IpAf value) {
  
  address_family_ = value;
}
inline void SecurityPolicySpec::set_address_family(::opi_api::network::opinetcommon::v1alpha1::IpAf value) {
  _internal_set_address_family(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.address_family)
}

// bool stateless = 4;
inline void SecurityPolicySpec::clear_stateless() {
  stateless_ = false;
}
inline bool SecurityPolicySpec::_internal_stateless() const {
  return stateless_;
}
inline bool SecurityPolicySpec::stateless() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.stateless)
  return _internal_stateless();
}
inline void SecurityPolicySpec::_internal_set_stateless(bool value) {
  
  stateless_ = value;
}
inline void SecurityPolicySpec::set_stateless(bool value) {
  _internal_set_stateless(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.stateless)
}

// .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction default_security_action = 5;
inline void SecurityPolicySpec::clear_default_security_action() {
  default_security_action_ = 0;
}
inline ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction SecurityPolicySpec::_internal_default_security_action() const {
  return static_cast< ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction >(default_security_action_);
}
inline ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction SecurityPolicySpec::default_security_action() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.default_security_action)
  return _internal_default_security_action();
}
inline void SecurityPolicySpec::_internal_set_default_security_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value) {
  
  default_security_action_ = value;
}
inline void SecurityPolicySpec::set_default_security_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value) {
  _internal_set_default_security_action(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.default_security_action)
}

// repeated .opi_api.network.cloud.v1alpha1.SecurityRuleInfo rules = 6;
inline int SecurityPolicySpec::_internal_rules_size() const {
  return rules_.size();
}
inline int SecurityPolicySpec::rules_size() const {
  return _internal_rules_size();
}
inline void SecurityPolicySpec::clear_rules() {
  rules_.Clear();
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo* SecurityPolicySpec::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo >*
SecurityPolicySpec::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.rules)
  return &rules_;
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo& SecurityPolicySpec::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo& SecurityPolicySpec::rules(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.rules)
  return _internal_rules(index);
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo* SecurityPolicySpec::_internal_add_rules() {
  return rules_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo* SecurityPolicySpec::add_rules() {
  ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::SecurityRuleInfo >&
SecurityPolicySpec::rules() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.rules)
  return rules_;
}

// .opi_api.network.cloud.v1alpha1.PolicyRuleFormat rule_format = 7;
inline void SecurityPolicySpec::clear_rule_format() {
  rule_format_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::PolicyRuleFormat SecurityPolicySpec::_internal_rule_format() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::PolicyRuleFormat >(rule_format_);
}
inline ::opi_api::network::cloud::v1alpha1::PolicyRuleFormat SecurityPolicySpec::rule_format() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.rule_format)
  return _internal_rule_format();
}
inline void SecurityPolicySpec::_internal_set_rule_format(::opi_api::network::cloud::v1alpha1::PolicyRuleFormat value) {
  
  rule_format_ = value;
}
inline void SecurityPolicySpec::set_rule_format(::opi_api::network::cloud::v1alpha1::PolicyRuleFormat value) {
  _internal_set_rule_format(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityPolicySpec.rule_format)
}

// -------------------------------------------------------------------

// SecurityRuleInfo

// .opi_api.common.v1.ObjectKey id = 1;
inline bool SecurityRuleInfo::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool SecurityRuleInfo::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& SecurityRuleInfo::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& SecurityRuleInfo::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityRuleInfo.id)
  return _internal_id();
}
inline void SecurityRuleInfo::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRuleInfo.id)
}
inline ::opi_api::common::v1::ObjectKey* SecurityRuleInfo::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SecurityRuleInfo::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityRuleInfo.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SecurityRuleInfo::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* SecurityRuleInfo::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityRuleInfo.id)
  return _msg;
}
inline void SecurityRuleInfo::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRuleInfo.id)
}

// .opi_api.network.cloud.v1alpha1.SecurityRuleAttrs attrs = 2;
inline bool SecurityRuleInfo::_internal_has_attrs() const {
  return this != internal_default_instance() && attrs_ != nullptr;
}
inline bool SecurityRuleInfo::has_attrs() const {
  return _internal_has_attrs();
}
inline void SecurityRuleInfo::clear_attrs() {
  if (GetArenaForAllocation() == nullptr && attrs_ != nullptr) {
    delete attrs_;
  }
  attrs_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs& SecurityRuleInfo::_internal_attrs() const {
  const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* p = attrs_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs&>(
      ::opi_api::network::cloud::v1alpha1::_SecurityRuleAttrs_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs& SecurityRuleInfo::attrs() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityRuleInfo.attrs)
  return _internal_attrs();
}
inline void SecurityRuleInfo::unsafe_arena_set_allocated_attrs(
    ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* attrs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attrs_);
  }
  attrs_ = attrs;
  if (attrs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRuleInfo.attrs)
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* SecurityRuleInfo::release_attrs() {
  
  ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* temp = attrs_;
  attrs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* SecurityRuleInfo::unsafe_arena_release_attrs() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityRuleInfo.attrs)
  
  ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* temp = attrs_;
  attrs_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* SecurityRuleInfo::_internal_mutable_attrs() {
  
  if (attrs_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs>(GetArenaForAllocation());
    attrs_ = p;
  }
  return attrs_;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* SecurityRuleInfo::mutable_attrs() {
  ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* _msg = _internal_mutable_attrs();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityRuleInfo.attrs)
  return _msg;
}
inline void SecurityRuleInfo::set_allocated_attrs(::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* attrs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attrs_;
  }
  if (attrs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs>::GetOwningArena(attrs);
    if (message_arena != submessage_arena) {
      attrs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attrs, submessage_arena);
    }
    
  } else {
    
  }
  attrs_ = attrs;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRuleInfo.attrs)
}

// -------------------------------------------------------------------

// SecurityRuleAttrs

// int32 priority = 1;
inline void SecurityRuleAttrs::clear_priority() {
  priority_ = 0;
}
inline int32_t SecurityRuleAttrs::_internal_priority() const {
  return priority_;
}
inline int32_t SecurityRuleAttrs::priority() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.priority)
  return _internal_priority();
}
inline void SecurityRuleAttrs::_internal_set_priority(int32_t value) {
  
  priority_ = value;
}
inline void SecurityRuleAttrs::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.priority)
}

// .opi_api.network.opinetcommon.v1alpha1.RuleMatch match = 2;
inline bool SecurityRuleAttrs::_internal_has_match() const {
  return this != internal_default_instance() && match_ != nullptr;
}
inline bool SecurityRuleAttrs::has_match() const {
  return _internal_has_match();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::RuleMatch& SecurityRuleAttrs::_internal_match() const {
  const ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* p = match_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::RuleMatch&>(
      ::opi_api::network::opinetcommon::v1alpha1::_RuleMatch_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::RuleMatch& SecurityRuleAttrs::match() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.match)
  return _internal_match();
}
inline void SecurityRuleAttrs::unsafe_arena_set_allocated_match(
    ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* match) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match_);
  }
  match_ = match;
  if (match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.match)
}
inline ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* SecurityRuleAttrs::release_match() {
  
  ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* temp = match_;
  match_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* SecurityRuleAttrs::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.match)
  
  ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* temp = match_;
  match_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* SecurityRuleAttrs::_internal_mutable_match() {
  
  if (match_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::RuleMatch>(GetArenaForAllocation());
    match_ = p;
  }
  return match_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* SecurityRuleAttrs::mutable_match() {
  ::opi_api::network::opinetcommon::v1alpha1::RuleMatch* _msg = _internal_mutable_match();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.match)
  return _msg;
}
inline void SecurityRuleAttrs::set_allocated_match(::opi_api::network::opinetcommon::v1alpha1::RuleMatch* match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(match_);
  }
  if (match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match));
    if (message_arena != submessage_arena) {
      match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    
  } else {
    
  }
  match_ = match;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.match)
}

// .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction action = 3;
inline void SecurityRuleAttrs::clear_action() {
  action_ = 0;
}
inline ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction SecurityRuleAttrs::_internal_action() const {
  return static_cast< ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction >(action_);
}
inline ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction SecurityRuleAttrs::action() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.action)
  return _internal_action();
}
inline void SecurityRuleAttrs::_internal_set_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value) {
  
  action_ = value;
}
inline void SecurityRuleAttrs::set_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.action)
}

// bool terminating = 4;
inline void SecurityRuleAttrs::clear_terminating() {
  terminating_ = false;
}
inline bool SecurityRuleAttrs::_internal_terminating() const {
  return terminating_;
}
inline bool SecurityRuleAttrs::terminating() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.terminating)
  return _internal_terminating();
}
inline void SecurityRuleAttrs::_internal_set_terminating(bool value) {
  
  terminating_ = value;
}
inline void SecurityRuleAttrs::set_terminating(bool value) {
  _internal_set_terminating(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.terminating)
}

// .opi_api.network.cloud.v1alpha1.ALGSpec alg_spec = 5;
inline bool SecurityRuleAttrs::_internal_has_alg_spec() const {
  return this != internal_default_instance() && alg_spec_ != nullptr;
}
inline bool SecurityRuleAttrs::has_alg_spec() const {
  return _internal_has_alg_spec();
}
inline void SecurityRuleAttrs::clear_alg_spec() {
  if (GetArenaForAllocation() == nullptr && alg_spec_ != nullptr) {
    delete alg_spec_;
  }
  alg_spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::ALGSpec& SecurityRuleAttrs::_internal_alg_spec() const {
  const ::opi_api::network::cloud::v1alpha1::ALGSpec* p = alg_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::ALGSpec&>(
      ::opi_api::network::cloud::v1alpha1::_ALGSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::ALGSpec& SecurityRuleAttrs::alg_spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.alg_spec)
  return _internal_alg_spec();
}
inline void SecurityRuleAttrs::unsafe_arena_set_allocated_alg_spec(
    ::opi_api::network::cloud::v1alpha1::ALGSpec* alg_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alg_spec_);
  }
  alg_spec_ = alg_spec;
  if (alg_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.alg_spec)
}
inline ::opi_api::network::cloud::v1alpha1::ALGSpec* SecurityRuleAttrs::release_alg_spec() {
  
  ::opi_api::network::cloud::v1alpha1::ALGSpec* temp = alg_spec_;
  alg_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::ALGSpec* SecurityRuleAttrs::unsafe_arena_release_alg_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.alg_spec)
  
  ::opi_api::network::cloud::v1alpha1::ALGSpec* temp = alg_spec_;
  alg_spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::ALGSpec* SecurityRuleAttrs::_internal_mutable_alg_spec() {
  
  if (alg_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::ALGSpec>(GetArenaForAllocation());
    alg_spec_ = p;
  }
  return alg_spec_;
}
inline ::opi_api::network::cloud::v1alpha1::ALGSpec* SecurityRuleAttrs::mutable_alg_spec() {
  ::opi_api::network::cloud::v1alpha1::ALGSpec* _msg = _internal_mutable_alg_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.alg_spec)
  return _msg;
}
inline void SecurityRuleAttrs::set_allocated_alg_spec(::opi_api::network::cloud::v1alpha1::ALGSpec* alg_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete alg_spec_;
  }
  if (alg_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::ALGSpec>::GetOwningArena(alg_spec);
    if (message_arena != submessage_arena) {
      alg_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alg_spec, submessage_arena);
    }
    
  } else {
    
  }
  alg_spec_ = alg_spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRuleAttrs.alg_spec)
}

// -------------------------------------------------------------------

// FTPOptions

// bool allow_ip_mismatch = 1;
inline void FTPOptions::clear_allow_ip_mismatch() {
  allow_ip_mismatch_ = false;
}
inline bool FTPOptions::_internal_allow_ip_mismatch() const {
  return allow_ip_mismatch_;
}
inline bool FTPOptions::allow_ip_mismatch() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.FTPOptions.allow_ip_mismatch)
  return _internal_allow_ip_mismatch();
}
inline void FTPOptions::_internal_set_allow_ip_mismatch(bool value) {
  
  allow_ip_mismatch_ = value;
}
inline void FTPOptions::set_allow_ip_mismatch(bool value) {
  _internal_set_allow_ip_mismatch(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.FTPOptions.allow_ip_mismatch)
}

// -------------------------------------------------------------------

// DNSOptions

// bool drop_multi_query_messages = 1;
inline void DNSOptions::clear_drop_multi_query_messages() {
  drop_multi_query_messages_ = false;
}
inline bool DNSOptions::_internal_drop_multi_query_messages() const {
  return drop_multi_query_messages_;
}
inline bool DNSOptions::drop_multi_query_messages() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DNSOptions.drop_multi_query_messages)
  return _internal_drop_multi_query_messages();
}
inline void DNSOptions::_internal_set_drop_multi_query_messages(bool value) {
  
  drop_multi_query_messages_ = value;
}
inline void DNSOptions::set_drop_multi_query_messages(bool value) {
  _internal_set_drop_multi_query_messages(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DNSOptions.drop_multi_query_messages)
}

// bool drop_large_domain_name_messages = 2;
inline void DNSOptions::clear_drop_large_domain_name_messages() {
  drop_large_domain_name_messages_ = false;
}
inline bool DNSOptions::_internal_drop_large_domain_name_messages() const {
  return drop_large_domain_name_messages_;
}
inline bool DNSOptions::drop_large_domain_name_messages() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DNSOptions.drop_large_domain_name_messages)
  return _internal_drop_large_domain_name_messages();
}
inline void DNSOptions::_internal_set_drop_large_domain_name_messages(bool value) {
  
  drop_large_domain_name_messages_ = value;
}
inline void DNSOptions::set_drop_large_domain_name_messages(bool value) {
  _internal_set_drop_large_domain_name_messages(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DNSOptions.drop_large_domain_name_messages)
}

// bool drop_long_label_messages = 3;
inline void DNSOptions::clear_drop_long_label_messages() {
  drop_long_label_messages_ = false;
}
inline bool DNSOptions::_internal_drop_long_label_messages() const {
  return drop_long_label_messages_;
}
inline bool DNSOptions::drop_long_label_messages() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DNSOptions.drop_long_label_messages)
  return _internal_drop_long_label_messages();
}
inline void DNSOptions::_internal_set_drop_long_label_messages(bool value) {
  
  drop_long_label_messages_ = value;
}
inline void DNSOptions::set_drop_long_label_messages(bool value) {
  _internal_set_drop_long_label_messages(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DNSOptions.drop_long_label_messages)
}

// bool drop_multi_zone_messages = 4;
inline void DNSOptions::clear_drop_multi_zone_messages() {
  drop_multi_zone_messages_ = false;
}
inline bool DNSOptions::_internal_drop_multi_zone_messages() const {
  return drop_multi_zone_messages_;
}
inline bool DNSOptions::drop_multi_zone_messages() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DNSOptions.drop_multi_zone_messages)
  return _internal_drop_multi_zone_messages();
}
inline void DNSOptions::_internal_set_drop_multi_zone_messages(bool value) {
  
  drop_multi_zone_messages_ = value;
}
inline void DNSOptions::set_drop_multi_zone_messages(bool value) {
  _internal_set_drop_multi_zone_messages(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DNSOptions.drop_multi_zone_messages)
}

// int32 response_timeout = 5;
inline void DNSOptions::clear_response_timeout() {
  response_timeout_ = 0;
}
inline int32_t DNSOptions::_internal_response_timeout() const {
  return response_timeout_;
}
inline int32_t DNSOptions::response_timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DNSOptions.response_timeout)
  return _internal_response_timeout();
}
inline void DNSOptions::_internal_set_response_timeout(int32_t value) {
  
  response_timeout_ = value;
}
inline void DNSOptions::set_response_timeout(int32_t value) {
  _internal_set_response_timeout(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DNSOptions.response_timeout)
}

// int32 max_message_length = 6;
inline void DNSOptions::clear_max_message_length() {
  max_message_length_ = 0;
}
inline int32_t DNSOptions::_internal_max_message_length() const {
  return max_message_length_;
}
inline int32_t DNSOptions::max_message_length() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.DNSOptions.max_message_length)
  return _internal_max_message_length();
}
inline void DNSOptions::_internal_set_max_message_length(int32_t value) {
  
  max_message_length_ = value;
}
inline void DNSOptions::set_max_message_length(int32_t value) {
  _internal_set_max_message_length(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.DNSOptions.max_message_length)
}

// -------------------------------------------------------------------

// MSRPCOptions

// repeated bytes program_id = 1;
inline int MSRPCOptions::_internal_program_id_size() const {
  return program_id_.size();
}
inline int MSRPCOptions::program_id_size() const {
  return _internal_program_id_size();
}
inline void MSRPCOptions::clear_program_id() {
  program_id_.Clear();
}
inline std::string* MSRPCOptions::add_program_id() {
  std::string* _s = _internal_add_program_id();
  // @@protoc_insertion_point(field_add_mutable:opi_api.network.cloud.v1alpha1.MSRPCOptions.program_id)
  return _s;
}
inline const std::string& MSRPCOptions::_internal_program_id(int index) const {
  return program_id_.Get(index);
}
inline const std::string& MSRPCOptions::program_id(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.MSRPCOptions.program_id)
  return _internal_program_id(index);
}
inline std::string* MSRPCOptions::mutable_program_id(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.MSRPCOptions.program_id)
  return program_id_.Mutable(index);
}
inline void MSRPCOptions::set_program_id(int index, const std::string& value) {
  program_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.MSRPCOptions.program_id)
}
inline void MSRPCOptions::set_program_id(int index, std::string&& value) {
  program_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.MSRPCOptions.program_id)
}
inline void MSRPCOptions::set_program_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  program_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.network.cloud.v1alpha1.MSRPCOptions.program_id)
}
inline void MSRPCOptions::set_program_id(int index, const void* value, size_t size) {
  program_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.network.cloud.v1alpha1.MSRPCOptions.program_id)
}
inline std::string* MSRPCOptions::_internal_add_program_id() {
  return program_id_.Add();
}
inline void MSRPCOptions::add_program_id(const std::string& value) {
  program_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.MSRPCOptions.program_id)
}
inline void MSRPCOptions::add_program_id(std::string&& value) {
  program_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.MSRPCOptions.program_id)
}
inline void MSRPCOptions::add_program_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  program_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.network.cloud.v1alpha1.MSRPCOptions.program_id)
}
inline void MSRPCOptions::add_program_id(const void* value, size_t size) {
  program_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.network.cloud.v1alpha1.MSRPCOptions.program_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MSRPCOptions::program_id() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.MSRPCOptions.program_id)
  return program_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MSRPCOptions::mutable_program_id() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.MSRPCOptions.program_id)
  return &program_id_;
}

// -------------------------------------------------------------------

// SunRPCOptions

// repeated bytes program_id = 1;
inline int SunRPCOptions::_internal_program_id_size() const {
  return program_id_.size();
}
inline int SunRPCOptions::program_id_size() const {
  return _internal_program_id_size();
}
inline void SunRPCOptions::clear_program_id() {
  program_id_.Clear();
}
inline std::string* SunRPCOptions::add_program_id() {
  std::string* _s = _internal_add_program_id();
  // @@protoc_insertion_point(field_add_mutable:opi_api.network.cloud.v1alpha1.SunRPCOptions.program_id)
  return _s;
}
inline const std::string& SunRPCOptions::_internal_program_id(int index) const {
  return program_id_.Get(index);
}
inline const std::string& SunRPCOptions::program_id(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SunRPCOptions.program_id)
  return _internal_program_id(index);
}
inline std::string* SunRPCOptions::mutable_program_id(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SunRPCOptions.program_id)
  return program_id_.Mutable(index);
}
inline void SunRPCOptions::set_program_id(int index, const std::string& value) {
  program_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SunRPCOptions.program_id)
}
inline void SunRPCOptions::set_program_id(int index, std::string&& value) {
  program_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SunRPCOptions.program_id)
}
inline void SunRPCOptions::set_program_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  program_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opi_api.network.cloud.v1alpha1.SunRPCOptions.program_id)
}
inline void SunRPCOptions::set_program_id(int index, const void* value, size_t size) {
  program_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opi_api.network.cloud.v1alpha1.SunRPCOptions.program_id)
}
inline std::string* SunRPCOptions::_internal_add_program_id() {
  return program_id_.Add();
}
inline void SunRPCOptions::add_program_id(const std::string& value) {
  program_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.SunRPCOptions.program_id)
}
inline void SunRPCOptions::add_program_id(std::string&& value) {
  program_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.SunRPCOptions.program_id)
}
inline void SunRPCOptions::add_program_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  program_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opi_api.network.cloud.v1alpha1.SunRPCOptions.program_id)
}
inline void SunRPCOptions::add_program_id(const void* value, size_t size) {
  program_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opi_api.network.cloud.v1alpha1.SunRPCOptions.program_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SunRPCOptions::program_id() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.SunRPCOptions.program_id)
  return program_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SunRPCOptions::mutable_program_id() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.SunRPCOptions.program_id)
  return &program_id_;
}

// -------------------------------------------------------------------

// ALGSpec

// .opi_api.network.cloud.v1alpha1.ALGType alg_type = 1;
inline void ALGSpec::clear_alg_type() {
  alg_type_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::ALGType ALGSpec::_internal_alg_type() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::ALGType >(alg_type_);
}
inline ::opi_api::network::cloud::v1alpha1::ALGType ALGSpec::alg_type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ALGSpec.alg_type)
  return _internal_alg_type();
}
inline void ALGSpec::_internal_set_alg_type(::opi_api::network::cloud::v1alpha1::ALGType value) {
  
  alg_type_ = value;
}
inline void ALGSpec::set_alg_type(::opi_api::network::cloud::v1alpha1::ALGType value) {
  _internal_set_alg_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ALGSpec.alg_type)
}

// int32 idle_timeout = 2;
inline void ALGSpec::clear_idle_timeout() {
  idle_timeout_ = 0;
}
inline int32_t ALGSpec::_internal_idle_timeout() const {
  return idle_timeout_;
}
inline int32_t ALGSpec::idle_timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ALGSpec.idle_timeout)
  return _internal_idle_timeout();
}
inline void ALGSpec::_internal_set_idle_timeout(int32_t value) {
  
  idle_timeout_ = value;
}
inline void ALGSpec::set_idle_timeout(int32_t value) {
  _internal_set_idle_timeout(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.ALGSpec.idle_timeout)
}

// .opi_api.network.cloud.v1alpha1.FTPOptions ftp_options = 3;
inline bool ALGSpec::_internal_has_ftp_options() const {
  return alg_options_case() == kFtpOptions;
}
inline bool ALGSpec::has_ftp_options() const {
  return _internal_has_ftp_options();
}
inline void ALGSpec::set_has_ftp_options() {
  _oneof_case_[0] = kFtpOptions;
}
inline void ALGSpec::clear_ftp_options() {
  if (_internal_has_ftp_options()) {
    if (GetArenaForAllocation() == nullptr) {
      delete alg_options_.ftp_options_;
    }
    clear_has_alg_options();
  }
}
inline ::opi_api::network::cloud::v1alpha1::FTPOptions* ALGSpec::release_ftp_options() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ALGSpec.ftp_options)
  if (_internal_has_ftp_options()) {
    clear_has_alg_options();
      ::opi_api::network::cloud::v1alpha1::FTPOptions* temp = alg_options_.ftp_options_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    alg_options_.ftp_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::network::cloud::v1alpha1::FTPOptions& ALGSpec::_internal_ftp_options() const {
  return _internal_has_ftp_options()
      ? *alg_options_.ftp_options_
      : reinterpret_cast< ::opi_api::network::cloud::v1alpha1::FTPOptions&>(::opi_api::network::cloud::v1alpha1::_FTPOptions_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::FTPOptions& ALGSpec::ftp_options() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ALGSpec.ftp_options)
  return _internal_ftp_options();
}
inline ::opi_api::network::cloud::v1alpha1::FTPOptions* ALGSpec::unsafe_arena_release_ftp_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.ALGSpec.ftp_options)
  if (_internal_has_ftp_options()) {
    clear_has_alg_options();
    ::opi_api::network::cloud::v1alpha1::FTPOptions* temp = alg_options_.ftp_options_;
    alg_options_.ftp_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ALGSpec::unsafe_arena_set_allocated_ftp_options(::opi_api::network::cloud::v1alpha1::FTPOptions* ftp_options) {
  clear_alg_options();
  if (ftp_options) {
    set_has_ftp_options();
    alg_options_.ftp_options_ = ftp_options;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.ALGSpec.ftp_options)
}
inline ::opi_api::network::cloud::v1alpha1::FTPOptions* ALGSpec::_internal_mutable_ftp_options() {
  if (!_internal_has_ftp_options()) {
    clear_alg_options();
    set_has_ftp_options();
    alg_options_.ftp_options_ = CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::FTPOptions >(GetArenaForAllocation());
  }
  return alg_options_.ftp_options_;
}
inline ::opi_api::network::cloud::v1alpha1::FTPOptions* ALGSpec::mutable_ftp_options() {
  ::opi_api::network::cloud::v1alpha1::FTPOptions* _msg = _internal_mutable_ftp_options();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ALGSpec.ftp_options)
  return _msg;
}

// .opi_api.network.cloud.v1alpha1.DNSOptions dns_options = 4;
inline bool ALGSpec::_internal_has_dns_options() const {
  return alg_options_case() == kDnsOptions;
}
inline bool ALGSpec::has_dns_options() const {
  return _internal_has_dns_options();
}
inline void ALGSpec::set_has_dns_options() {
  _oneof_case_[0] = kDnsOptions;
}
inline void ALGSpec::clear_dns_options() {
  if (_internal_has_dns_options()) {
    if (GetArenaForAllocation() == nullptr) {
      delete alg_options_.dns_options_;
    }
    clear_has_alg_options();
  }
}
inline ::opi_api::network::cloud::v1alpha1::DNSOptions* ALGSpec::release_dns_options() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ALGSpec.dns_options)
  if (_internal_has_dns_options()) {
    clear_has_alg_options();
      ::opi_api::network::cloud::v1alpha1::DNSOptions* temp = alg_options_.dns_options_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    alg_options_.dns_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::network::cloud::v1alpha1::DNSOptions& ALGSpec::_internal_dns_options() const {
  return _internal_has_dns_options()
      ? *alg_options_.dns_options_
      : reinterpret_cast< ::opi_api::network::cloud::v1alpha1::DNSOptions&>(::opi_api::network::cloud::v1alpha1::_DNSOptions_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::DNSOptions& ALGSpec::dns_options() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ALGSpec.dns_options)
  return _internal_dns_options();
}
inline ::opi_api::network::cloud::v1alpha1::DNSOptions* ALGSpec::unsafe_arena_release_dns_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.ALGSpec.dns_options)
  if (_internal_has_dns_options()) {
    clear_has_alg_options();
    ::opi_api::network::cloud::v1alpha1::DNSOptions* temp = alg_options_.dns_options_;
    alg_options_.dns_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ALGSpec::unsafe_arena_set_allocated_dns_options(::opi_api::network::cloud::v1alpha1::DNSOptions* dns_options) {
  clear_alg_options();
  if (dns_options) {
    set_has_dns_options();
    alg_options_.dns_options_ = dns_options;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.ALGSpec.dns_options)
}
inline ::opi_api::network::cloud::v1alpha1::DNSOptions* ALGSpec::_internal_mutable_dns_options() {
  if (!_internal_has_dns_options()) {
    clear_alg_options();
    set_has_dns_options();
    alg_options_.dns_options_ = CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::DNSOptions >(GetArenaForAllocation());
  }
  return alg_options_.dns_options_;
}
inline ::opi_api::network::cloud::v1alpha1::DNSOptions* ALGSpec::mutable_dns_options() {
  ::opi_api::network::cloud::v1alpha1::DNSOptions* _msg = _internal_mutable_dns_options();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ALGSpec.dns_options)
  return _msg;
}

// .opi_api.network.cloud.v1alpha1.MSRPCOptions msrpc_options = 5;
inline bool ALGSpec::_internal_has_msrpc_options() const {
  return alg_options_case() == kMsrpcOptions;
}
inline bool ALGSpec::has_msrpc_options() const {
  return _internal_has_msrpc_options();
}
inline void ALGSpec::set_has_msrpc_options() {
  _oneof_case_[0] = kMsrpcOptions;
}
inline void ALGSpec::clear_msrpc_options() {
  if (_internal_has_msrpc_options()) {
    if (GetArenaForAllocation() == nullptr) {
      delete alg_options_.msrpc_options_;
    }
    clear_has_alg_options();
  }
}
inline ::opi_api::network::cloud::v1alpha1::MSRPCOptions* ALGSpec::release_msrpc_options() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ALGSpec.msrpc_options)
  if (_internal_has_msrpc_options()) {
    clear_has_alg_options();
      ::opi_api::network::cloud::v1alpha1::MSRPCOptions* temp = alg_options_.msrpc_options_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    alg_options_.msrpc_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::network::cloud::v1alpha1::MSRPCOptions& ALGSpec::_internal_msrpc_options() const {
  return _internal_has_msrpc_options()
      ? *alg_options_.msrpc_options_
      : reinterpret_cast< ::opi_api::network::cloud::v1alpha1::MSRPCOptions&>(::opi_api::network::cloud::v1alpha1::_MSRPCOptions_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::MSRPCOptions& ALGSpec::msrpc_options() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ALGSpec.msrpc_options)
  return _internal_msrpc_options();
}
inline ::opi_api::network::cloud::v1alpha1::MSRPCOptions* ALGSpec::unsafe_arena_release_msrpc_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.ALGSpec.msrpc_options)
  if (_internal_has_msrpc_options()) {
    clear_has_alg_options();
    ::opi_api::network::cloud::v1alpha1::MSRPCOptions* temp = alg_options_.msrpc_options_;
    alg_options_.msrpc_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ALGSpec::unsafe_arena_set_allocated_msrpc_options(::opi_api::network::cloud::v1alpha1::MSRPCOptions* msrpc_options) {
  clear_alg_options();
  if (msrpc_options) {
    set_has_msrpc_options();
    alg_options_.msrpc_options_ = msrpc_options;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.ALGSpec.msrpc_options)
}
inline ::opi_api::network::cloud::v1alpha1::MSRPCOptions* ALGSpec::_internal_mutable_msrpc_options() {
  if (!_internal_has_msrpc_options()) {
    clear_alg_options();
    set_has_msrpc_options();
    alg_options_.msrpc_options_ = CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::MSRPCOptions >(GetArenaForAllocation());
  }
  return alg_options_.msrpc_options_;
}
inline ::opi_api::network::cloud::v1alpha1::MSRPCOptions* ALGSpec::mutable_msrpc_options() {
  ::opi_api::network::cloud::v1alpha1::MSRPCOptions* _msg = _internal_mutable_msrpc_options();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ALGSpec.msrpc_options)
  return _msg;
}

// .opi_api.network.cloud.v1alpha1.SunRPCOptions sunrpc_options = 6;
inline bool ALGSpec::_internal_has_sunrpc_options() const {
  return alg_options_case() == kSunrpcOptions;
}
inline bool ALGSpec::has_sunrpc_options() const {
  return _internal_has_sunrpc_options();
}
inline void ALGSpec::set_has_sunrpc_options() {
  _oneof_case_[0] = kSunrpcOptions;
}
inline void ALGSpec::clear_sunrpc_options() {
  if (_internal_has_sunrpc_options()) {
    if (GetArenaForAllocation() == nullptr) {
      delete alg_options_.sunrpc_options_;
    }
    clear_has_alg_options();
  }
}
inline ::opi_api::network::cloud::v1alpha1::SunRPCOptions* ALGSpec::release_sunrpc_options() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.ALGSpec.sunrpc_options)
  if (_internal_has_sunrpc_options()) {
    clear_has_alg_options();
      ::opi_api::network::cloud::v1alpha1::SunRPCOptions* temp = alg_options_.sunrpc_options_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    alg_options_.sunrpc_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::network::cloud::v1alpha1::SunRPCOptions& ALGSpec::_internal_sunrpc_options() const {
  return _internal_has_sunrpc_options()
      ? *alg_options_.sunrpc_options_
      : reinterpret_cast< ::opi_api::network::cloud::v1alpha1::SunRPCOptions&>(::opi_api::network::cloud::v1alpha1::_SunRPCOptions_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SunRPCOptions& ALGSpec::sunrpc_options() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.ALGSpec.sunrpc_options)
  return _internal_sunrpc_options();
}
inline ::opi_api::network::cloud::v1alpha1::SunRPCOptions* ALGSpec::unsafe_arena_release_sunrpc_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.ALGSpec.sunrpc_options)
  if (_internal_has_sunrpc_options()) {
    clear_has_alg_options();
    ::opi_api::network::cloud::v1alpha1::SunRPCOptions* temp = alg_options_.sunrpc_options_;
    alg_options_.sunrpc_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ALGSpec::unsafe_arena_set_allocated_sunrpc_options(::opi_api::network::cloud::v1alpha1::SunRPCOptions* sunrpc_options) {
  clear_alg_options();
  if (sunrpc_options) {
    set_has_sunrpc_options();
    alg_options_.sunrpc_options_ = sunrpc_options;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.ALGSpec.sunrpc_options)
}
inline ::opi_api::network::cloud::v1alpha1::SunRPCOptions* ALGSpec::_internal_mutable_sunrpc_options() {
  if (!_internal_has_sunrpc_options()) {
    clear_alg_options();
    set_has_sunrpc_options();
    alg_options_.sunrpc_options_ = CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SunRPCOptions >(GetArenaForAllocation());
  }
  return alg_options_.sunrpc_options_;
}
inline ::opi_api::network::cloud::v1alpha1::SunRPCOptions* ALGSpec::mutable_sunrpc_options() {
  ::opi_api::network::cloud::v1alpha1::SunRPCOptions* _msg = _internal_mutable_sunrpc_options();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.ALGSpec.sunrpc_options)
  return _msg;
}

inline bool ALGSpec::has_alg_options() const {
  return alg_options_case() != ALG_OPTIONS_NOT_SET;
}
inline void ALGSpec::clear_has_alg_options() {
  _oneof_case_[0] = ALG_OPTIONS_NOT_SET;
}
inline ALGSpec::AlgOptionsCase ALGSpec::alg_options_case() const {
  return ALGSpec::AlgOptionsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SecurityPolicyStatus

// int32 rule_count = 1;
inline void SecurityPolicyStatus::clear_rule_count() {
  rule_count_ = 0;
}
inline int32_t SecurityPolicyStatus::_internal_rule_count() const {
  return rule_count_;
}
inline int32_t SecurityPolicyStatus::rule_count() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.rule_count)
  return _internal_rule_count();
}
inline void SecurityPolicyStatus::_internal_set_rule_count(int32_t value) {
  
  rule_count_ = value;
}
inline void SecurityPolicyStatus::set_rule_count(int32_t value) {
  _internal_set_rule_count(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.rule_count)
}

// int32 vpc_count = 2;
inline void SecurityPolicyStatus::clear_vpc_count() {
  vpc_count_ = 0;
}
inline int32_t SecurityPolicyStatus::_internal_vpc_count() const {
  return vpc_count_;
}
inline int32_t SecurityPolicyStatus::vpc_count() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.vpc_count)
  return _internal_vpc_count();
}
inline void SecurityPolicyStatus::_internal_set_vpc_count(int32_t value) {
  
  vpc_count_ = value;
}
inline void SecurityPolicyStatus::set_vpc_count(int32_t value) {
  _internal_set_vpc_count(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.vpc_count)
}

// int32 subnet_count = 3;
inline void SecurityPolicyStatus::clear_subnet_count() {
  subnet_count_ = 0;
}
inline int32_t SecurityPolicyStatus::_internal_subnet_count() const {
  return subnet_count_;
}
inline int32_t SecurityPolicyStatus::subnet_count() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.subnet_count)
  return _internal_subnet_count();
}
inline void SecurityPolicyStatus::_internal_set_subnet_count(int32_t value) {
  
  subnet_count_ = value;
}
inline void SecurityPolicyStatus::set_subnet_count(int32_t value) {
  _internal_set_subnet_count(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.subnet_count)
}

// int32 vnic_count = 4;
inline void SecurityPolicyStatus::clear_vnic_count() {
  vnic_count_ = 0;
}
inline int32_t SecurityPolicyStatus::_internal_vnic_count() const {
  return vnic_count_;
}
inline int32_t SecurityPolicyStatus::vnic_count() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.vnic_count)
  return _internal_vnic_count();
}
inline void SecurityPolicyStatus::_internal_set_vnic_count(int32_t value) {
  
  vnic_count_ = value;
}
inline void SecurityPolicyStatus::set_vnic_count(int32_t value) {
  _internal_set_vnic_count(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.vnic_count)
}

// .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_pool_handle = 5;
inline bool SecurityPolicyStatus::_internal_has_hw_pool_handle() const {
  return this != internal_default_instance() && hw_pool_handle_ != nullptr;
}
inline bool SecurityPolicyStatus::has_hw_pool_handle() const {
  return _internal_has_hw_pool_handle();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& SecurityPolicyStatus::_internal_hw_pool_handle() const {
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle* p = hw_pool_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&>(
      ::opi_api::network::opinetcommon::v1alpha1::_HwHandle_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& SecurityPolicyStatus::hw_pool_handle() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.hw_pool_handle)
  return _internal_hw_pool_handle();
}
inline void SecurityPolicyStatus::unsafe_arena_set_allocated_hw_pool_handle(
    ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_pool_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_pool_handle_);
  }
  hw_pool_handle_ = hw_pool_handle;
  if (hw_pool_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.hw_pool_handle)
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* SecurityPolicyStatus::release_hw_pool_handle() {
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = hw_pool_handle_;
  hw_pool_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* SecurityPolicyStatus::unsafe_arena_release_hw_pool_handle() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.hw_pool_handle)
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = hw_pool_handle_;
  hw_pool_handle_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* SecurityPolicyStatus::_internal_mutable_hw_pool_handle() {
  
  if (hw_pool_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::HwHandle>(GetArenaForAllocation());
    hw_pool_handle_ = p;
  }
  return hw_pool_handle_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* SecurityPolicyStatus::mutable_hw_pool_handle() {
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _msg = _internal_mutable_hw_pool_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.hw_pool_handle)
  return _msg;
}
inline void SecurityPolicyStatus::set_allocated_hw_pool_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_pool_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_pool_handle_);
  }
  if (hw_pool_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_pool_handle));
    if (message_arena != submessage_arena) {
      hw_pool_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hw_pool_handle, submessage_arena);
    }
    
  } else {
    
  }
  hw_pool_handle_ = hw_pool_handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.hw_pool_handle)
}

// .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 6;
inline bool SecurityPolicyStatus::_internal_has_hw_handle() const {
  return this != internal_default_instance() && hw_handle_ != nullptr;
}
inline bool SecurityPolicyStatus::has_hw_handle() const {
  return _internal_has_hw_handle();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& SecurityPolicyStatus::_internal_hw_handle() const {
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle* p = hw_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&>(
      ::opi_api::network::opinetcommon::v1alpha1::_HwHandle_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& SecurityPolicyStatus::hw_handle() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.hw_handle)
  return _internal_hw_handle();
}
inline void SecurityPolicyStatus::unsafe_arena_set_allocated_hw_handle(
    ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_handle_);
  }
  hw_handle_ = hw_handle;
  if (hw_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.hw_handle)
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* SecurityPolicyStatus::release_hw_handle() {
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = hw_handle_;
  hw_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* SecurityPolicyStatus::unsafe_arena_release_hw_handle() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.hw_handle)
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = hw_handle_;
  hw_handle_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* SecurityPolicyStatus::_internal_mutable_hw_handle() {
  
  if (hw_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::HwHandle>(GetArenaForAllocation());
    hw_handle_ = p;
  }
  return hw_handle_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* SecurityPolicyStatus::mutable_hw_handle() {
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _msg = _internal_mutable_hw_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.hw_handle)
  return _msg;
}
inline void SecurityPolicyStatus::set_allocated_hw_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_handle_);
  }
  if (hw_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_handle));
    if (message_arena != submessage_arena) {
      hw_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hw_handle, submessage_arena);
    }
    
  } else {
    
  }
  hw_handle_ = hw_handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.hw_handle)
}

// uint64 policy_base_address = 7;
inline void SecurityPolicyStatus::clear_policy_base_address() {
  policy_base_address_ = uint64_t{0u};
}
inline uint64_t SecurityPolicyStatus::_internal_policy_base_address() const {
  return policy_base_address_;
}
inline uint64_t SecurityPolicyStatus::policy_base_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.policy_base_address)
  return _internal_policy_base_address();
}
inline void SecurityPolicyStatus::_internal_set_policy_base_address(uint64_t value) {
  
  policy_base_address_ = value;
}
inline void SecurityPolicyStatus::set_policy_base_address(uint64_t value) {
  _internal_set_policy_base_address(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityPolicyStatus.policy_base_address)
}

// -------------------------------------------------------------------

// SecurityRule

// .opi_api.network.cloud.v1alpha1.SecurityRuleSpec spec = 1;
inline bool SecurityRule::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool SecurityRule::has_spec() const {
  return _internal_has_spec();
}
inline void SecurityRule::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec& SecurityRule::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec&>(
      ::opi_api::network::cloud::v1alpha1::_SecurityRuleSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec& SecurityRule::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityRule.spec)
  return _internal_spec();
}
inline void SecurityRule::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRule.spec)
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* SecurityRule::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* SecurityRule::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityRule.spec)
  
  ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* SecurityRule::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityRuleSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* SecurityRule::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityRule.spec)
  return _msg;
}
inline void SecurityRule::set_allocated_spec(::opi_api::network::cloud::v1alpha1::SecurityRuleSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::SecurityRuleSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRule.spec)
}

// .opi_api.network.cloud.v1alpha1.SecurityRuleStatus status = 2;
inline bool SecurityRule::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SecurityRule::has_status() const {
  return _internal_has_status();
}
inline void SecurityRule::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus& SecurityRule::_internal_status() const {
  const ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus&>(
      ::opi_api::network::cloud::v1alpha1::_SecurityRuleStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus& SecurityRule::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityRule.status)
  return _internal_status();
}
inline void SecurityRule::unsafe_arena_set_allocated_status(
    ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRule.status)
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* SecurityRule::release_status() {
  
  ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* SecurityRule::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityRule.status)
  
  ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* SecurityRule::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityRuleStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* SecurityRule::mutable_status() {
  ::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityRule.status)
  return _msg;
}
inline void SecurityRule::set_allocated_status(::opi_api::network::cloud::v1alpha1::SecurityRuleStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::SecurityRuleStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRule.status)
}

// -------------------------------------------------------------------

// SecurityRuleSpec

// .opi_api.common.v1.ObjectKey id = 1;
inline bool SecurityRuleSpec::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool SecurityRuleSpec::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& SecurityRuleSpec::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& SecurityRuleSpec::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityRuleSpec.id)
  return _internal_id();
}
inline void SecurityRuleSpec::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRuleSpec.id)
}
inline ::opi_api::common::v1::ObjectKey* SecurityRuleSpec::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SecurityRuleSpec::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityRuleSpec.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SecurityRuleSpec::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* SecurityRuleSpec::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityRuleSpec.id)
  return _msg;
}
inline void SecurityRuleSpec::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRuleSpec.id)
}

// .opi_api.common.v1.ObjectKey security_policy_id = 2;
inline bool SecurityRuleSpec::_internal_has_security_policy_id() const {
  return this != internal_default_instance() && security_policy_id_ != nullptr;
}
inline bool SecurityRuleSpec::has_security_policy_id() const {
  return _internal_has_security_policy_id();
}
inline const ::opi_api::common::v1::ObjectKey& SecurityRuleSpec::_internal_security_policy_id() const {
  const ::opi_api::common::v1::ObjectKey* p = security_policy_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& SecurityRuleSpec::security_policy_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityRuleSpec.security_policy_id)
  return _internal_security_policy_id();
}
inline void SecurityRuleSpec::unsafe_arena_set_allocated_security_policy_id(
    ::opi_api::common::v1::ObjectKey* security_policy_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_policy_id_);
  }
  security_policy_id_ = security_policy_id;
  if (security_policy_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRuleSpec.security_policy_id)
}
inline ::opi_api::common::v1::ObjectKey* SecurityRuleSpec::release_security_policy_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = security_policy_id_;
  security_policy_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SecurityRuleSpec::unsafe_arena_release_security_policy_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityRuleSpec.security_policy_id)
  
  ::opi_api::common::v1::ObjectKey* temp = security_policy_id_;
  security_policy_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SecurityRuleSpec::_internal_mutable_security_policy_id() {
  
  if (security_policy_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    security_policy_id_ = p;
  }
  return security_policy_id_;
}
inline ::opi_api::common::v1::ObjectKey* SecurityRuleSpec::mutable_security_policy_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_security_policy_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityRuleSpec.security_policy_id)
  return _msg;
}
inline void SecurityRuleSpec::set_allocated_security_policy_id(::opi_api::common::v1::ObjectKey* security_policy_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_policy_id_);
  }
  if (security_policy_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_policy_id));
    if (message_arena != submessage_arena) {
      security_policy_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_policy_id, submessage_arena);
    }
    
  } else {
    
  }
  security_policy_id_ = security_policy_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRuleSpec.security_policy_id)
}

// .opi_api.network.cloud.v1alpha1.SecurityRuleAttrs attrs = 3;
inline bool SecurityRuleSpec::_internal_has_attrs() const {
  return this != internal_default_instance() && attrs_ != nullptr;
}
inline bool SecurityRuleSpec::has_attrs() const {
  return _internal_has_attrs();
}
inline void SecurityRuleSpec::clear_attrs() {
  if (GetArenaForAllocation() == nullptr && attrs_ != nullptr) {
    delete attrs_;
  }
  attrs_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs& SecurityRuleSpec::_internal_attrs() const {
  const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* p = attrs_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs&>(
      ::opi_api::network::cloud::v1alpha1::_SecurityRuleAttrs_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs& SecurityRuleSpec::attrs() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityRuleSpec.attrs)
  return _internal_attrs();
}
inline void SecurityRuleSpec::unsafe_arena_set_allocated_attrs(
    ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* attrs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attrs_);
  }
  attrs_ = attrs;
  if (attrs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRuleSpec.attrs)
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* SecurityRuleSpec::release_attrs() {
  
  ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* temp = attrs_;
  attrs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* SecurityRuleSpec::unsafe_arena_release_attrs() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityRuleSpec.attrs)
  
  ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* temp = attrs_;
  attrs_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* SecurityRuleSpec::_internal_mutable_attrs() {
  
  if (attrs_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs>(GetArenaForAllocation());
    attrs_ = p;
  }
  return attrs_;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* SecurityRuleSpec::mutable_attrs() {
  ::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* _msg = _internal_mutable_attrs();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityRuleSpec.attrs)
  return _msg;
}
inline void SecurityRuleSpec::set_allocated_attrs(::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs* attrs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attrs_;
  }
  if (attrs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::SecurityRuleAttrs>::GetOwningArena(attrs);
    if (message_arena != submessage_arena) {
      attrs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attrs, submessage_arena);
    }
    
  } else {
    
  }
  attrs_ = attrs;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityRuleSpec.attrs)
}

// -------------------------------------------------------------------

// SecurityRuleStatus

// -------------------------------------------------------------------

// SecurityProfile

// .opi_api.network.cloud.v1alpha1.SecurityProfileSpec spec = 1;
inline bool SecurityProfile::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool SecurityProfile::has_spec() const {
  return _internal_has_spec();
}
inline void SecurityProfile::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec& SecurityProfile::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec&>(
      ::opi_api::network::cloud::v1alpha1::_SecurityProfileSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec& SecurityProfile::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfile.spec)
  return _internal_spec();
}
inline void SecurityProfile::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityProfile.spec)
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* SecurityProfile::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* SecurityProfile::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityProfile.spec)
  
  ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* SecurityProfile::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityProfileSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* SecurityProfile::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityProfile.spec)
  return _msg;
}
inline void SecurityProfile::set_allocated_spec(::opi_api::network::cloud::v1alpha1::SecurityProfileSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::SecurityProfileSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityProfile.spec)
}

// .opi_api.network.cloud.v1alpha1.SecurityProfileStatus status = 2;
inline bool SecurityProfile::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SecurityProfile::has_status() const {
  return _internal_has_status();
}
inline void SecurityProfile::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus& SecurityProfile::_internal_status() const {
  const ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus&>(
      ::opi_api::network::cloud::v1alpha1::_SecurityProfileStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus& SecurityProfile::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfile.status)
  return _internal_status();
}
inline void SecurityProfile::unsafe_arena_set_allocated_status(
    ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityProfile.status)
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* SecurityProfile::release_status() {
  
  ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* SecurityProfile::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityProfile.status)
  
  ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* SecurityProfile::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::SecurityProfileStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* SecurityProfile::mutable_status() {
  ::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityProfile.status)
  return _msg;
}
inline void SecurityProfile::set_allocated_status(::opi_api::network::cloud::v1alpha1::SecurityProfileStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::SecurityProfileStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityProfile.status)
}

// -------------------------------------------------------------------

// SecurityProfileSpec

// .opi_api.common.v1.ObjectKey id = 1;
inline bool SecurityProfileSpec::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool SecurityProfileSpec::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& SecurityProfileSpec::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& SecurityProfileSpec::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.id)
  return _internal_id();
}
inline void SecurityProfileSpec::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.id)
}
inline ::opi_api::common::v1::ObjectKey* SecurityProfileSpec::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SecurityProfileSpec::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SecurityProfileSpec::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* SecurityProfileSpec::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.id)
  return _msg;
}
inline void SecurityProfileSpec::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.id)
}

// bool connection_tracking_enable = 2;
inline void SecurityProfileSpec::clear_connection_tracking_enable() {
  connection_tracking_enable_ = false;
}
inline bool SecurityProfileSpec::_internal_connection_tracking_enable() const {
  return connection_tracking_enable_;
}
inline bool SecurityProfileSpec::connection_tracking_enable() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.connection_tracking_enable)
  return _internal_connection_tracking_enable();
}
inline void SecurityProfileSpec::_internal_set_connection_tracking_enable(bool value) {
  
  connection_tracking_enable_ = value;
}
inline void SecurityProfileSpec::set_connection_tracking_enable(bool value) {
  _internal_set_connection_tracking_enable(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.connection_tracking_enable)
}

// bool rule_stats_enable = 3;
inline void SecurityProfileSpec::clear_rule_stats_enable() {
  rule_stats_enable_ = false;
}
inline bool SecurityProfileSpec::_internal_rule_stats_enable() const {
  return rule_stats_enable_;
}
inline bool SecurityProfileSpec::rule_stats_enable() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.rule_stats_enable)
  return _internal_rule_stats_enable();
}
inline void SecurityProfileSpec::_internal_set_rule_stats_enable(bool value) {
  
  rule_stats_enable_ = value;
}
inline void SecurityProfileSpec::set_rule_stats_enable(bool value) {
  _internal_set_rule_stats_enable(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.rule_stats_enable)
}

// .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction default_firewall_action = 4;
inline void SecurityProfileSpec::clear_default_firewall_action() {
  default_firewall_action_ = 0;
}
inline ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction SecurityProfileSpec::_internal_default_firewall_action() const {
  return static_cast< ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction >(default_firewall_action_);
}
inline ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction SecurityProfileSpec::default_firewall_action() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.default_firewall_action)
  return _internal_default_firewall_action();
}
inline void SecurityProfileSpec::_internal_set_default_firewall_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value) {
  
  default_firewall_action_ = value;
}
inline void SecurityProfileSpec::set_default_firewall_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value) {
  _internal_set_default_firewall_action(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.default_firewall_action)
}

// int32 tcp_idle_timeout = 5;
inline void SecurityProfileSpec::clear_tcp_idle_timeout() {
  tcp_idle_timeout_ = 0;
}
inline int32_t SecurityProfileSpec::_internal_tcp_idle_timeout() const {
  return tcp_idle_timeout_;
}
inline int32_t SecurityProfileSpec::tcp_idle_timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.tcp_idle_timeout)
  return _internal_tcp_idle_timeout();
}
inline void SecurityProfileSpec::_internal_set_tcp_idle_timeout(int32_t value) {
  
  tcp_idle_timeout_ = value;
}
inline void SecurityProfileSpec::set_tcp_idle_timeout(int32_t value) {
  _internal_set_tcp_idle_timeout(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.tcp_idle_timeout)
}

// int32 udp_idle_timeout = 6;
inline void SecurityProfileSpec::clear_udp_idle_timeout() {
  udp_idle_timeout_ = 0;
}
inline int32_t SecurityProfileSpec::_internal_udp_idle_timeout() const {
  return udp_idle_timeout_;
}
inline int32_t SecurityProfileSpec::udp_idle_timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.udp_idle_timeout)
  return _internal_udp_idle_timeout();
}
inline void SecurityProfileSpec::_internal_set_udp_idle_timeout(int32_t value) {
  
  udp_idle_timeout_ = value;
}
inline void SecurityProfileSpec::set_udp_idle_timeout(int32_t value) {
  _internal_set_udp_idle_timeout(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.udp_idle_timeout)
}

// int32 icmp_idle_timeout = 7;
inline void SecurityProfileSpec::clear_icmp_idle_timeout() {
  icmp_idle_timeout_ = 0;
}
inline int32_t SecurityProfileSpec::_internal_icmp_idle_timeout() const {
  return icmp_idle_timeout_;
}
inline int32_t SecurityProfileSpec::icmp_idle_timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.icmp_idle_timeout)
  return _internal_icmp_idle_timeout();
}
inline void SecurityProfileSpec::_internal_set_icmp_idle_timeout(int32_t value) {
  
  icmp_idle_timeout_ = value;
}
inline void SecurityProfileSpec::set_icmp_idle_timeout(int32_t value) {
  _internal_set_icmp_idle_timeout(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.icmp_idle_timeout)
}

// int32 other_idle_timeout = 8;
inline void SecurityProfileSpec::clear_other_idle_timeout() {
  other_idle_timeout_ = 0;
}
inline int32_t SecurityProfileSpec::_internal_other_idle_timeout() const {
  return other_idle_timeout_;
}
inline int32_t SecurityProfileSpec::other_idle_timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.other_idle_timeout)
  return _internal_other_idle_timeout();
}
inline void SecurityProfileSpec::_internal_set_other_idle_timeout(int32_t value) {
  
  other_idle_timeout_ = value;
}
inline void SecurityProfileSpec::set_other_idle_timeout(int32_t value) {
  _internal_set_other_idle_timeout(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.other_idle_timeout)
}

// int32 tcp_connection_setup_timeout = 9;
inline void SecurityProfileSpec::clear_tcp_connection_setup_timeout() {
  tcp_connection_setup_timeout_ = 0;
}
inline int32_t SecurityProfileSpec::_internal_tcp_connection_setup_timeout() const {
  return tcp_connection_setup_timeout_;
}
inline int32_t SecurityProfileSpec::tcp_connection_setup_timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.tcp_connection_setup_timeout)
  return _internal_tcp_connection_setup_timeout();
}
inline void SecurityProfileSpec::_internal_set_tcp_connection_setup_timeout(int32_t value) {
  
  tcp_connection_setup_timeout_ = value;
}
inline void SecurityProfileSpec::set_tcp_connection_setup_timeout(int32_t value) {
  _internal_set_tcp_connection_setup_timeout(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.tcp_connection_setup_timeout)
}

// int32 tcp_half_close_timeout = 10;
inline void SecurityProfileSpec::clear_tcp_half_close_timeout() {
  tcp_half_close_timeout_ = 0;
}
inline int32_t SecurityProfileSpec::_internal_tcp_half_close_timeout() const {
  return tcp_half_close_timeout_;
}
inline int32_t SecurityProfileSpec::tcp_half_close_timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.tcp_half_close_timeout)
  return _internal_tcp_half_close_timeout();
}
inline void SecurityProfileSpec::_internal_set_tcp_half_close_timeout(int32_t value) {
  
  tcp_half_close_timeout_ = value;
}
inline void SecurityProfileSpec::set_tcp_half_close_timeout(int32_t value) {
  _internal_set_tcp_half_close_timeout(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.tcp_half_close_timeout)
}

// int32 tcp_close_timeout = 11;
inline void SecurityProfileSpec::clear_tcp_close_timeout() {
  tcp_close_timeout_ = 0;
}
inline int32_t SecurityProfileSpec::_internal_tcp_close_timeout() const {
  return tcp_close_timeout_;
}
inline int32_t SecurityProfileSpec::tcp_close_timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.tcp_close_timeout)
  return _internal_tcp_close_timeout();
}
inline void SecurityProfileSpec::_internal_set_tcp_close_timeout(int32_t value) {
  
  tcp_close_timeout_ = value;
}
inline void SecurityProfileSpec::set_tcp_close_timeout(int32_t value) {
  _internal_set_tcp_close_timeout(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.tcp_close_timeout)
}

// int32 tcp_dorp_timeout = 12;
inline void SecurityProfileSpec::clear_tcp_dorp_timeout() {
  tcp_dorp_timeout_ = 0;
}
inline int32_t SecurityProfileSpec::_internal_tcp_dorp_timeout() const {
  return tcp_dorp_timeout_;
}
inline int32_t SecurityProfileSpec::tcp_dorp_timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.tcp_dorp_timeout)
  return _internal_tcp_dorp_timeout();
}
inline void SecurityProfileSpec::_internal_set_tcp_dorp_timeout(int32_t value) {
  
  tcp_dorp_timeout_ = value;
}
inline void SecurityProfileSpec::set_tcp_dorp_timeout(int32_t value) {
  _internal_set_tcp_dorp_timeout(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.tcp_dorp_timeout)
}

// int32 udp_drop_timeout = 13;
inline void SecurityProfileSpec::clear_udp_drop_timeout() {
  udp_drop_timeout_ = 0;
}
inline int32_t SecurityProfileSpec::_internal_udp_drop_timeout() const {
  return udp_drop_timeout_;
}
inline int32_t SecurityProfileSpec::udp_drop_timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.udp_drop_timeout)
  return _internal_udp_drop_timeout();
}
inline void SecurityProfileSpec::_internal_set_udp_drop_timeout(int32_t value) {
  
  udp_drop_timeout_ = value;
}
inline void SecurityProfileSpec::set_udp_drop_timeout(int32_t value) {
  _internal_set_udp_drop_timeout(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.udp_drop_timeout)
}

// int32 icmp_drop_timeout = 14;
inline void SecurityProfileSpec::clear_icmp_drop_timeout() {
  icmp_drop_timeout_ = 0;
}
inline int32_t SecurityProfileSpec::_internal_icmp_drop_timeout() const {
  return icmp_drop_timeout_;
}
inline int32_t SecurityProfileSpec::icmp_drop_timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.icmp_drop_timeout)
  return _internal_icmp_drop_timeout();
}
inline void SecurityProfileSpec::_internal_set_icmp_drop_timeout(int32_t value) {
  
  icmp_drop_timeout_ = value;
}
inline void SecurityProfileSpec::set_icmp_drop_timeout(int32_t value) {
  _internal_set_icmp_drop_timeout(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.icmp_drop_timeout)
}

// int32 other_drop_timeout = 15;
inline void SecurityProfileSpec::clear_other_drop_timeout() {
  other_drop_timeout_ = 0;
}
inline int32_t SecurityProfileSpec::_internal_other_drop_timeout() const {
  return other_drop_timeout_;
}
inline int32_t SecurityProfileSpec::other_drop_timeout() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.other_drop_timeout)
  return _internal_other_drop_timeout();
}
inline void SecurityProfileSpec::_internal_set_other_drop_timeout(int32_t value) {
  
  other_drop_timeout_ = value;
}
inline void SecurityProfileSpec::set_other_drop_timeout(int32_t value) {
  _internal_set_other_drop_timeout(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityProfileSpec.other_drop_timeout)
}

// -------------------------------------------------------------------

// SecurityProfileStatus

// -------------------------------------------------------------------

// PolicyLookupMatch

// .opi_api.network.opinetcommon.v1alpha1.IPAddress source_ip = 1;
inline bool PolicyLookupMatch::_internal_has_source_ip() const {
  return this != internal_default_instance() && source_ip_ != nullptr;
}
inline bool PolicyLookupMatch::has_source_ip() const {
  return _internal_has_source_ip();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& PolicyLookupMatch::_internal_source_ip() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = source_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& PolicyLookupMatch::source_ip() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.source_ip)
  return _internal_source_ip();
}
inline void PolicyLookupMatch::unsafe_arena_set_allocated_source_ip(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* source_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_ip_);
  }
  source_ip_ = source_ip;
  if (source_ip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.source_ip)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* PolicyLookupMatch::release_source_ip() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = source_ip_;
  source_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* PolicyLookupMatch::unsafe_arena_release_source_ip() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.source_ip)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = source_ip_;
  source_ip_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* PolicyLookupMatch::_internal_mutable_source_ip() {
  
  if (source_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    source_ip_ = p;
  }
  return source_ip_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* PolicyLookupMatch::mutable_source_ip() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_source_ip();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.source_ip)
  return _msg;
}
inline void PolicyLookupMatch::set_allocated_source_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* source_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_ip_);
  }
  if (source_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_ip));
    if (message_arena != submessage_arena) {
      source_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_ip, submessage_arena);
    }
    
  } else {
    
  }
  source_ip_ = source_ip;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.source_ip)
}

// repeated uint32 source_tags = 2;
inline int PolicyLookupMatch::_internal_source_tags_size() const {
  return source_tags_.size();
}
inline int PolicyLookupMatch::source_tags_size() const {
  return _internal_source_tags_size();
}
inline void PolicyLookupMatch::clear_source_tags() {
  source_tags_.Clear();
}
inline uint32_t PolicyLookupMatch::_internal_source_tags(int index) const {
  return source_tags_.Get(index);
}
inline uint32_t PolicyLookupMatch::source_tags(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.source_tags)
  return _internal_source_tags(index);
}
inline void PolicyLookupMatch::set_source_tags(int index, uint32_t value) {
  source_tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.source_tags)
}
inline void PolicyLookupMatch::_internal_add_source_tags(uint32_t value) {
  source_tags_.Add(value);
}
inline void PolicyLookupMatch::add_source_tags(uint32_t value) {
  _internal_add_source_tags(value);
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.source_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PolicyLookupMatch::_internal_source_tags() const {
  return source_tags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PolicyLookupMatch::source_tags() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.source_tags)
  return _internal_source_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PolicyLookupMatch::_internal_mutable_source_tags() {
  return &source_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PolicyLookupMatch::mutable_source_tags() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.source_tags)
  return _internal_mutable_source_tags();
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress destination_ip = 3;
inline bool PolicyLookupMatch::_internal_has_destination_ip() const {
  return this != internal_default_instance() && destination_ip_ != nullptr;
}
inline bool PolicyLookupMatch::has_destination_ip() const {
  return _internal_has_destination_ip();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& PolicyLookupMatch::_internal_destination_ip() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = destination_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& PolicyLookupMatch::destination_ip() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.destination_ip)
  return _internal_destination_ip();
}
inline void PolicyLookupMatch::unsafe_arena_set_allocated_destination_ip(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* destination_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_ip_);
  }
  destination_ip_ = destination_ip;
  if (destination_ip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.destination_ip)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* PolicyLookupMatch::release_destination_ip() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = destination_ip_;
  destination_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* PolicyLookupMatch::unsafe_arena_release_destination_ip() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.destination_ip)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = destination_ip_;
  destination_ip_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* PolicyLookupMatch::_internal_mutable_destination_ip() {
  
  if (destination_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    destination_ip_ = p;
  }
  return destination_ip_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* PolicyLookupMatch::mutable_destination_ip() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_destination_ip();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.destination_ip)
  return _msg;
}
inline void PolicyLookupMatch::set_allocated_destination_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* destination_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_ip_);
  }
  if (destination_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_ip));
    if (message_arena != submessage_arena) {
      destination_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination_ip, submessage_arena);
    }
    
  } else {
    
  }
  destination_ip_ = destination_ip;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.destination_ip)
}

// repeated uint32 destination_tags = 4;
inline int PolicyLookupMatch::_internal_destination_tags_size() const {
  return destination_tags_.size();
}
inline int PolicyLookupMatch::destination_tags_size() const {
  return _internal_destination_tags_size();
}
inline void PolicyLookupMatch::clear_destination_tags() {
  destination_tags_.Clear();
}
inline uint32_t PolicyLookupMatch::_internal_destination_tags(int index) const {
  return destination_tags_.Get(index);
}
inline uint32_t PolicyLookupMatch::destination_tags(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.destination_tags)
  return _internal_destination_tags(index);
}
inline void PolicyLookupMatch::set_destination_tags(int index, uint32_t value) {
  destination_tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.destination_tags)
}
inline void PolicyLookupMatch::_internal_add_destination_tags(uint32_t value) {
  destination_tags_.Add(value);
}
inline void PolicyLookupMatch::add_destination_tags(uint32_t value) {
  _internal_add_destination_tags(value);
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.destination_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PolicyLookupMatch::_internal_destination_tags() const {
  return destination_tags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PolicyLookupMatch::destination_tags() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.destination_tags)
  return _internal_destination_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PolicyLookupMatch::_internal_mutable_destination_tags() {
  return &destination_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PolicyLookupMatch::mutable_destination_tags() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.destination_tags)
  return _internal_mutable_destination_tags();
}

// int32 protocol = 5;
inline void PolicyLookupMatch::clear_protocol() {
  protocol_ = 0;
}
inline int32_t PolicyLookupMatch::_internal_protocol() const {
  return protocol_;
}
inline int32_t PolicyLookupMatch::protocol() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.protocol)
  return _internal_protocol();
}
inline void PolicyLookupMatch::_internal_set_protocol(int32_t value) {
  
  protocol_ = value;
}
inline void PolicyLookupMatch::set_protocol(int32_t value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.protocol)
}

// int32 source_port = 6;
inline void PolicyLookupMatch::clear_source_port() {
  source_port_ = 0;
}
inline int32_t PolicyLookupMatch::_internal_source_port() const {
  return source_port_;
}
inline int32_t PolicyLookupMatch::source_port() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.source_port)
  return _internal_source_port();
}
inline void PolicyLookupMatch::_internal_set_source_port(int32_t value) {
  
  source_port_ = value;
}
inline void PolicyLookupMatch::set_source_port(int32_t value) {
  _internal_set_source_port(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.source_port)
}

// int32 destination_port = 7;
inline void PolicyLookupMatch::clear_destination_port() {
  destination_port_ = 0;
}
inline int32_t PolicyLookupMatch::_internal_destination_port() const {
  return destination_port_;
}
inline int32_t PolicyLookupMatch::destination_port() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.destination_port)
  return _internal_destination_port();
}
inline void PolicyLookupMatch::_internal_set_destination_port(int32_t value) {
  
  destination_port_ = value;
}
inline void PolicyLookupMatch::set_destination_port(int32_t value) {
  _internal_set_destination_port(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.destination_port)
}

// int32 icmp_type = 8;
inline void PolicyLookupMatch::clear_icmp_type() {
  icmp_type_ = 0;
}
inline int32_t PolicyLookupMatch::_internal_icmp_type() const {
  return icmp_type_;
}
inline int32_t PolicyLookupMatch::icmp_type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.icmp_type)
  return _internal_icmp_type();
}
inline void PolicyLookupMatch::_internal_set_icmp_type(int32_t value) {
  
  icmp_type_ = value;
}
inline void PolicyLookupMatch::set_icmp_type(int32_t value) {
  _internal_set_icmp_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.icmp_type)
}

// int32 icmp_code = 9;
inline void PolicyLookupMatch::clear_icmp_code() {
  icmp_code_ = 0;
}
inline int32_t PolicyLookupMatch::_internal_icmp_code() const {
  return icmp_code_;
}
inline int32_t PolicyLookupMatch::icmp_code() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.icmp_code)
  return _internal_icmp_code();
}
inline void PolicyLookupMatch::_internal_set_icmp_code(int32_t value) {
  
  icmp_code_ = value;
}
inline void PolicyLookupMatch::set_icmp_code(int32_t value) {
  _internal_set_icmp_code(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.PolicyLookupMatch.icmp_code)
}

// -------------------------------------------------------------------

// SecurityPolicyLookupRequest_VnicLookupInfo

// .opi_api.common.v1.ObjectKey vnic_id = 1;
inline bool SecurityPolicyLookupRequest_VnicLookupInfo::_internal_has_vnic_id() const {
  return this != internal_default_instance() && vnic_id_ != nullptr;
}
inline bool SecurityPolicyLookupRequest_VnicLookupInfo::has_vnic_id() const {
  return _internal_has_vnic_id();
}
inline const ::opi_api::common::v1::ObjectKey& SecurityPolicyLookupRequest_VnicLookupInfo::_internal_vnic_id() const {
  const ::opi_api::common::v1::ObjectKey* p = vnic_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& SecurityPolicyLookupRequest_VnicLookupInfo::vnic_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo.vnic_id)
  return _internal_vnic_id();
}
inline void SecurityPolicyLookupRequest_VnicLookupInfo::unsafe_arena_set_allocated_vnic_id(
    ::opi_api::common::v1::ObjectKey* vnic_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vnic_id_);
  }
  vnic_id_ = vnic_id;
  if (vnic_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo.vnic_id)
}
inline ::opi_api::common::v1::ObjectKey* SecurityPolicyLookupRequest_VnicLookupInfo::release_vnic_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = vnic_id_;
  vnic_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SecurityPolicyLookupRequest_VnicLookupInfo::unsafe_arena_release_vnic_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo.vnic_id)
  
  ::opi_api::common::v1::ObjectKey* temp = vnic_id_;
  vnic_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* SecurityPolicyLookupRequest_VnicLookupInfo::_internal_mutable_vnic_id() {
  
  if (vnic_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    vnic_id_ = p;
  }
  return vnic_id_;
}
inline ::opi_api::common::v1::ObjectKey* SecurityPolicyLookupRequest_VnicLookupInfo::mutable_vnic_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_vnic_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo.vnic_id)
  return _msg;
}
inline void SecurityPolicyLookupRequest_VnicLookupInfo::set_allocated_vnic_id(::opi_api::common::v1::ObjectKey* vnic_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vnic_id_);
  }
  if (vnic_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vnic_id));
    if (message_arena != submessage_arena) {
      vnic_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vnic_id, submessage_arena);
    }
    
  } else {
    
  }
  vnic_id_ = vnic_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo.vnic_id)
}

// .opi_api.network.opinetcommon.v1alpha1.PolicyDir policy_direction = 2;
inline void SecurityPolicyLookupRequest_VnicLookupInfo::clear_policy_direction() {
  policy_direction_ = 0;
}
inline ::opi_api::network::opinetcommon::v1alpha1::PolicyDir SecurityPolicyLookupRequest_VnicLookupInfo::_internal_policy_direction() const {
  return static_cast< ::opi_api::network::opinetcommon::v1alpha1::PolicyDir >(policy_direction_);
}
inline ::opi_api::network::opinetcommon::v1alpha1::PolicyDir SecurityPolicyLookupRequest_VnicLookupInfo::policy_direction() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo.policy_direction)
  return _internal_policy_direction();
}
inline void SecurityPolicyLookupRequest_VnicLookupInfo::_internal_set_policy_direction(::opi_api::network::opinetcommon::v1alpha1::PolicyDir value) {
  
  policy_direction_ = value;
}
inline void SecurityPolicyLookupRequest_VnicLookupInfo::set_policy_direction(::opi_api::network::opinetcommon::v1alpha1::PolicyDir value) {
  _internal_set_policy_direction(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo.policy_direction)
}

// .opi_api.network.opinetcommon.v1alpha1.IpAf address_family = 3;
inline void SecurityPolicyLookupRequest_VnicLookupInfo::clear_address_family() {
  address_family_ = 0;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IpAf SecurityPolicyLookupRequest_VnicLookupInfo::_internal_address_family() const {
  return static_cast< ::opi_api::network::opinetcommon::v1alpha1::IpAf >(address_family_);
}
inline ::opi_api::network::opinetcommon::v1alpha1::IpAf SecurityPolicyLookupRequest_VnicLookupInfo::address_family() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo.address_family)
  return _internal_address_family();
}
inline void SecurityPolicyLookupRequest_VnicLookupInfo::_internal_set_address_family(::opi_api::network::opinetcommon::v1alpha1::IpAf value) {
  
  address_family_ = value;
}
inline void SecurityPolicyLookupRequest_VnicLookupInfo::set_address_family(::opi_api::network::opinetcommon::v1alpha1::IpAf value) {
  _internal_set_address_family(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo.address_family)
}

// -------------------------------------------------------------------

// SecurityPolicyLookupRequest

// .opi_api.common.v1.ObjectKey policy_id = 1;
inline bool SecurityPolicyLookupRequest::_internal_has_policy_id() const {
  return lookup_info_case() == kPolicyId;
}
inline bool SecurityPolicyLookupRequest::has_policy_id() const {
  return _internal_has_policy_id();
}
inline void SecurityPolicyLookupRequest::set_has_policy_id() {
  _oneof_case_[0] = kPolicyId;
}
inline ::opi_api::common::v1::ObjectKey* SecurityPolicyLookupRequest::release_policy_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.policy_id)
  if (_internal_has_policy_id()) {
    clear_has_lookup_info();
      ::opi_api::common::v1::ObjectKey* temp = lookup_info_.policy_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    lookup_info_.policy_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::common::v1::ObjectKey& SecurityPolicyLookupRequest::_internal_policy_id() const {
  return _internal_has_policy_id()
      ? *lookup_info_.policy_id_
      : reinterpret_cast< ::opi_api::common::v1::ObjectKey&>(::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& SecurityPolicyLookupRequest::policy_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.policy_id)
  return _internal_policy_id();
}
inline ::opi_api::common::v1::ObjectKey* SecurityPolicyLookupRequest::unsafe_arena_release_policy_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.policy_id)
  if (_internal_has_policy_id()) {
    clear_has_lookup_info();
    ::opi_api::common::v1::ObjectKey* temp = lookup_info_.policy_id_;
    lookup_info_.policy_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SecurityPolicyLookupRequest::unsafe_arena_set_allocated_policy_id(::opi_api::common::v1::ObjectKey* policy_id) {
  clear_lookup_info();
  if (policy_id) {
    set_has_policy_id();
    lookup_info_.policy_id_ = policy_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.policy_id)
}
inline ::opi_api::common::v1::ObjectKey* SecurityPolicyLookupRequest::_internal_mutable_policy_id() {
  if (!_internal_has_policy_id()) {
    clear_lookup_info();
    set_has_policy_id();
    lookup_info_.policy_id_ = CreateMaybeMessage< ::opi_api::common::v1::ObjectKey >(GetArenaForAllocation());
  }
  return lookup_info_.policy_id_;
}
inline ::opi_api::common::v1::ObjectKey* SecurityPolicyLookupRequest::mutable_policy_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.policy_id)
  return _msg;
}

// .opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.VnicLookupInfo vnic_lookup_info = 2;
inline bool SecurityPolicyLookupRequest::_internal_has_vnic_lookup_info() const {
  return lookup_info_case() == kVnicLookupInfo;
}
inline bool SecurityPolicyLookupRequest::has_vnic_lookup_info() const {
  return _internal_has_vnic_lookup_info();
}
inline void SecurityPolicyLookupRequest::set_has_vnic_lookup_info() {
  _oneof_case_[0] = kVnicLookupInfo;
}
inline void SecurityPolicyLookupRequest::clear_vnic_lookup_info() {
  if (_internal_has_vnic_lookup_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete lookup_info_.vnic_lookup_info_;
    }
    clear_has_lookup_info();
  }
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* SecurityPolicyLookupRequest::release_vnic_lookup_info() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.vnic_lookup_info)
  if (_internal_has_vnic_lookup_info()) {
    clear_has_lookup_info();
      ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* temp = lookup_info_.vnic_lookup_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    lookup_info_.vnic_lookup_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo& SecurityPolicyLookupRequest::_internal_vnic_lookup_info() const {
  return _internal_has_vnic_lookup_info()
      ? *lookup_info_.vnic_lookup_info_
      : reinterpret_cast< ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo&>(::opi_api::network::cloud::v1alpha1::_SecurityPolicyLookupRequest_VnicLookupInfo_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo& SecurityPolicyLookupRequest::vnic_lookup_info() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.vnic_lookup_info)
  return _internal_vnic_lookup_info();
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* SecurityPolicyLookupRequest::unsafe_arena_release_vnic_lookup_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.vnic_lookup_info)
  if (_internal_has_vnic_lookup_info()) {
    clear_has_lookup_info();
    ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* temp = lookup_info_.vnic_lookup_info_;
    lookup_info_.vnic_lookup_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SecurityPolicyLookupRequest::unsafe_arena_set_allocated_vnic_lookup_info(::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* vnic_lookup_info) {
  clear_lookup_info();
  if (vnic_lookup_info) {
    set_has_vnic_lookup_info();
    lookup_info_.vnic_lookup_info_ = vnic_lookup_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.vnic_lookup_info)
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* SecurityPolicyLookupRequest::_internal_mutable_vnic_lookup_info() {
  if (!_internal_has_vnic_lookup_info()) {
    clear_lookup_info();
    set_has_vnic_lookup_info();
    lookup_info_.vnic_lookup_info_ = CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo >(GetArenaForAllocation());
  }
  return lookup_info_.vnic_lookup_info_;
}
inline ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* SecurityPolicyLookupRequest::mutable_vnic_lookup_info() {
  ::opi_api::network::cloud::v1alpha1::SecurityPolicyLookupRequest_VnicLookupInfo* _msg = _internal_mutable_vnic_lookup_info();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.vnic_lookup_info)
  return _msg;
}

// .opi_api.network.cloud.v1alpha1.PolicyLookupMatch match_fields = 3;
inline bool SecurityPolicyLookupRequest::_internal_has_match_fields() const {
  return this != internal_default_instance() && match_fields_ != nullptr;
}
inline bool SecurityPolicyLookupRequest::has_match_fields() const {
  return _internal_has_match_fields();
}
inline void SecurityPolicyLookupRequest::clear_match_fields() {
  if (GetArenaForAllocation() == nullptr && match_fields_ != nullptr) {
    delete match_fields_;
  }
  match_fields_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch& SecurityPolicyLookupRequest::_internal_match_fields() const {
  const ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* p = match_fields_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch&>(
      ::opi_api::network::cloud::v1alpha1::_PolicyLookupMatch_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch& SecurityPolicyLookupRequest::match_fields() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.match_fields)
  return _internal_match_fields();
}
inline void SecurityPolicyLookupRequest::unsafe_arena_set_allocated_match_fields(
    ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* match_fields) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match_fields_);
  }
  match_fields_ = match_fields;
  if (match_fields) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.match_fields)
}
inline ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* SecurityPolicyLookupRequest::release_match_fields() {
  
  ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* temp = match_fields_;
  match_fields_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* SecurityPolicyLookupRequest::unsafe_arena_release_match_fields() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.match_fields)
  
  ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* temp = match_fields_;
  match_fields_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* SecurityPolicyLookupRequest::_internal_mutable_match_fields() {
  
  if (match_fields_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::PolicyLookupMatch>(GetArenaForAllocation());
    match_fields_ = p;
  }
  return match_fields_;
}
inline ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* SecurityPolicyLookupRequest::mutable_match_fields() {
  ::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* _msg = _internal_mutable_match_fields();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.match_fields)
  return _msg;
}
inline void SecurityPolicyLookupRequest::set_allocated_match_fields(::opi_api::network::cloud::v1alpha1::PolicyLookupMatch* match_fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete match_fields_;
  }
  if (match_fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::PolicyLookupMatch>::GetOwningArena(match_fields);
    if (message_arena != submessage_arena) {
      match_fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_fields, submessage_arena);
    }
    
  } else {
    
  }
  match_fields_ = match_fields;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.SecurityPolicyLookupRequest.match_fields)
}

inline bool SecurityPolicyLookupRequest::has_lookup_info() const {
  return lookup_info_case() != LOOKUP_INFO_NOT_SET;
}
inline void SecurityPolicyLookupRequest::clear_has_lookup_info() {
  _oneof_case_[0] = LOOKUP_INFO_NOT_SET;
}
inline SecurityPolicyLookupRequest::LookupInfoCase SecurityPolicyLookupRequest::lookup_info_case() const {
  return SecurityPolicyLookupRequest::LookupInfoCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PolicyLookupResult

// .opi_api.network.opinetcommon.v1alpha1.HwHandle rule_hw_handle = 1;
inline bool PolicyLookupResult::_internal_has_rule_hw_handle() const {
  return this != internal_default_instance() && rule_hw_handle_ != nullptr;
}
inline bool PolicyLookupResult::has_rule_hw_handle() const {
  return _internal_has_rule_hw_handle();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& PolicyLookupResult::_internal_rule_hw_handle() const {
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle* p = rule_hw_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&>(
      ::opi_api::network::opinetcommon::v1alpha1::_HwHandle_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& PolicyLookupResult::rule_hw_handle() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PolicyLookupResult.rule_hw_handle)
  return _internal_rule_hw_handle();
}
inline void PolicyLookupResult::unsafe_arena_set_allocated_rule_hw_handle(
    ::opi_api::network::opinetcommon::v1alpha1::HwHandle* rule_hw_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rule_hw_handle_);
  }
  rule_hw_handle_ = rule_hw_handle;
  if (rule_hw_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.PolicyLookupResult.rule_hw_handle)
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* PolicyLookupResult::release_rule_hw_handle() {
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = rule_hw_handle_;
  rule_hw_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* PolicyLookupResult::unsafe_arena_release_rule_hw_handle() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.PolicyLookupResult.rule_hw_handle)
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = rule_hw_handle_;
  rule_hw_handle_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* PolicyLookupResult::_internal_mutable_rule_hw_handle() {
  
  if (rule_hw_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::HwHandle>(GetArenaForAllocation());
    rule_hw_handle_ = p;
  }
  return rule_hw_handle_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* PolicyLookupResult::mutable_rule_hw_handle() {
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _msg = _internal_mutable_rule_hw_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.PolicyLookupResult.rule_hw_handle)
  return _msg;
}
inline void PolicyLookupResult::set_allocated_rule_hw_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* rule_hw_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rule_hw_handle_);
  }
  if (rule_hw_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rule_hw_handle));
    if (message_arena != submessage_arena) {
      rule_hw_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rule_hw_handle, submessage_arena);
    }
    
  } else {
    
  }
  rule_hw_handle_ = rule_hw_handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.PolicyLookupResult.rule_hw_handle)
}

// int32 priority = 2;
inline void PolicyLookupResult::clear_priority() {
  priority_ = 0;
}
inline int32_t PolicyLookupResult::_internal_priority() const {
  return priority_;
}
inline int32_t PolicyLookupResult::priority() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PolicyLookupResult.priority)
  return _internal_priority();
}
inline void PolicyLookupResult::_internal_set_priority(int32_t value) {
  
  priority_ = value;
}
inline void PolicyLookupResult::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.PolicyLookupResult.priority)
}

// .opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction action = 3;
inline void PolicyLookupResult::clear_action() {
  action_ = 0;
}
inline ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction PolicyLookupResult::_internal_action() const {
  return static_cast< ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction >(action_);
}
inline ::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction PolicyLookupResult::action() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PolicyLookupResult.action)
  return _internal_action();
}
inline void PolicyLookupResult::_internal_set_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value) {
  
  action_ = value;
}
inline void PolicyLookupResult::set_action(::opi_api::network::opinetcommon::v1alpha1::SecurityRuleAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.PolicyLookupResult.action)
}

// .opi_api.network.cloud.v1alpha1.ALGType alg_type = 4;
inline void PolicyLookupResult::clear_alg_type() {
  alg_type_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::ALGType PolicyLookupResult::_internal_alg_type() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::ALGType >(alg_type_);
}
inline ::opi_api::network::cloud::v1alpha1::ALGType PolicyLookupResult::alg_type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PolicyLookupResult.alg_type)
  return _internal_alg_type();
}
inline void PolicyLookupResult::_internal_set_alg_type(::opi_api::network::cloud::v1alpha1::ALGType value) {
  
  alg_type_ = value;
}
inline void PolicyLookupResult::set_alg_type(::opi_api::network::cloud::v1alpha1::ALGType value) {
  _internal_set_alg_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.PolicyLookupResult.alg_type)
}

// bool terminating = 5;
inline void PolicyLookupResult::clear_terminating() {
  terminating_ = false;
}
inline bool PolicyLookupResult::_internal_terminating() const {
  return terminating_;
}
inline bool PolicyLookupResult::terminating() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.PolicyLookupResult.terminating)
  return _internal_terminating();
}
inline void PolicyLookupResult::_internal_set_terminating(bool value) {
  
  terminating_ = value;
}
inline void PolicyLookupResult::set_terminating(bool value) {
  _internal_set_terminating(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.PolicyLookupResult.terminating)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::SecurityPolicyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::SecurityPolicyType>() {
  return ::opi_api::network::cloud::v1alpha1::SecurityPolicyType_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::ALGType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::ALGType>() {
  return ::opi_api::network::cloud::v1alpha1::ALGType_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::PolicyRuleFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::PolicyRuleFormat>() {
  return ::opi_api::network::cloud::v1alpha1::PolicyRuleFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_networkpolicy_2eproto
