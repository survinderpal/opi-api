// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nexthop.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nexthop_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nexthop_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "object_key.pb.h"
#include "networktypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nexthop_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nexthop_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nexthop_2eproto;
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
class IPNextHopSpec;
struct IPNextHopSpecDefaultTypeInternal;
extern IPNextHopSpecDefaultTypeInternal _IPNextHopSpec_default_instance_;
class NextHop;
struct NextHopDefaultTypeInternal;
extern NextHopDefaultTypeInternal _NextHop_default_instance_;
class NextHopGroup;
struct NextHopGroupDefaultTypeInternal;
extern NextHopGroupDefaultTypeInternal _NextHopGroup_default_instance_;
class NextHopGroupLookup;
struct NextHopGroupLookupDefaultTypeInternal;
extern NextHopGroupLookupDefaultTypeInternal _NextHopGroupLookup_default_instance_;
class NextHopGroupSpec;
struct NextHopGroupSpecDefaultTypeInternal;
extern NextHopGroupSpecDefaultTypeInternal _NextHopGroupSpec_default_instance_;
class NextHopGroupStatus;
struct NextHopGroupStatusDefaultTypeInternal;
extern NextHopGroupStatusDefaultTypeInternal _NextHopGroupStatus_default_instance_;
class NextHopLookup;
struct NextHopLookupDefaultTypeInternal;
extern NextHopLookupDefaultTypeInternal _NextHopLookup_default_instance_;
class NextHopSpec;
struct NextHopSpecDefaultTypeInternal;
extern NextHopSpecDefaultTypeInternal _NextHopSpec_default_instance_;
class NextHopStatus;
struct NextHopStatusDefaultTypeInternal;
extern NextHopStatusDefaultTypeInternal _NextHopStatus_default_instance_;
class OverlayNextHopSpec;
struct OverlayNextHopSpecDefaultTypeInternal;
extern OverlayNextHopSpecDefaultTypeInternal _OverlayNextHopSpec_default_instance_;
class OverlayNextHopStatus;
struct OverlayNextHopStatusDefaultTypeInternal;
extern OverlayNextHopStatusDefaultTypeInternal _OverlayNextHopStatus_default_instance_;
class UnderlayNextHopSpec;
struct UnderlayNextHopSpecDefaultTypeInternal;
extern UnderlayNextHopSpecDefaultTypeInternal _UnderlayNextHopSpec_default_instance_;
class UnderlayNextHopStatus;
struct UnderlayNextHopStatusDefaultTypeInternal;
extern UnderlayNextHopStatusDefaultTypeInternal _UnderlayNextHopStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::network::cloud::v1alpha1::IPNextHopSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::IPNextHopSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::NextHop* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHop>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::NextHopGroup* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHopGroup>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::NextHopGroupLookup* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHopGroupLookup>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHopGroupSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHopGroupStatus>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::NextHopLookup* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHopLookup>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::NextHopSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHopSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::NextHopStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHopStatus>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec>(Arena*);
template<> ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* Arena::CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {

enum NextHopType : int {
  NEXT_HOP_TYPE_UNSPECIFIED = 0,
  NEXT_HOP_TYPE_IP = 1,
  NEXT_HOP_TYPE_UNDERLAY = 2,
  NEXT_HOP_TYPE_OVERLAY = 3,
  NextHopType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NextHopType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NextHopType_IsValid(int value);
constexpr NextHopType NextHopType_MIN = NEXT_HOP_TYPE_UNSPECIFIED;
constexpr NextHopType NextHopType_MAX = NEXT_HOP_TYPE_OVERLAY;
constexpr int NextHopType_ARRAYSIZE = NextHopType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NextHopType_descriptor();
template<typename T>
inline const std::string& NextHopType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NextHopType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NextHopType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NextHopType_descriptor(), enum_t_value);
}
inline bool NextHopType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NextHopType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NextHopType>(
    NextHopType_descriptor(), name, value);
}
enum NextHopGroupType : int {
  NEXT_HOP_GROUP_TYPE_UNSPECIFIED = 0,
  NEXT_HOP_GROUP_TYPE_OVERLAY_ECMP = 1,
  NEXT_HOP_GROUP_TYPE_UNDERLAY_ECMP = 2,
  NextHopGroupType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NextHopGroupType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NextHopGroupType_IsValid(int value);
constexpr NextHopGroupType NextHopGroupType_MIN = NEXT_HOP_GROUP_TYPE_UNSPECIFIED;
constexpr NextHopGroupType NextHopGroupType_MAX = NEXT_HOP_GROUP_TYPE_UNDERLAY_ECMP;
constexpr int NextHopGroupType_ARRAYSIZE = NextHopGroupType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NextHopGroupType_descriptor();
template<typename T>
inline const std::string& NextHopGroupType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NextHopGroupType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NextHopGroupType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NextHopGroupType_descriptor(), enum_t_value);
}
inline bool NextHopGroupType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NextHopGroupType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NextHopGroupType>(
    NextHopGroupType_descriptor(), name, value);
}
// ===================================================================

class NextHop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.NextHop) */ {
 public:
  inline NextHop() : NextHop(nullptr) {}
  ~NextHop() override;
  explicit constexpr NextHop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NextHop(const NextHop& from);
  NextHop(NextHop&& from) noexcept
    : NextHop() {
    *this = ::std::move(from);
  }

  inline NextHop& operator=(const NextHop& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextHop& operator=(NextHop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextHop& default_instance() {
    return *internal_default_instance();
  }
  static inline const NextHop* internal_default_instance() {
    return reinterpret_cast<const NextHop*>(
               &_NextHop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NextHop& a, NextHop& b) {
    a.Swap(&b);
  }
  inline void Swap(NextHop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextHop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextHop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NextHop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NextHop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NextHop& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextHop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.NextHop";
  }
  protected:
  explicit NextHop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.NextHopSpec spec = 1;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::NextHopSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::NextHopSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::NextHopSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::NextHopSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::NextHopSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::NextHopSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::NextHopSpec* spec);
  ::opi_api::network::cloud::v1alpha1::NextHopSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.NextHopStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::cloud::v1alpha1::NextHopStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::NextHopStatus* release_status();
  ::opi_api::network::cloud::v1alpha1::NextHopStatus* mutable_status();
  void set_allocated_status(::opi_api::network::cloud::v1alpha1::NextHopStatus* status);
  private:
  const ::opi_api::network::cloud::v1alpha1::NextHopStatus& _internal_status() const;
  ::opi_api::network::cloud::v1alpha1::NextHopStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::cloud::v1alpha1::NextHopStatus* status);
  ::opi_api::network::cloud::v1alpha1::NextHopStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.NextHop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::NextHopSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::NextHopStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nexthop_2eproto;
};
// -------------------------------------------------------------------

class NextHopSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.NextHopSpec) */ {
 public:
  inline NextHopSpec() : NextHopSpec(nullptr) {}
  ~NextHopSpec() override;
  explicit constexpr NextHopSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NextHopSpec(const NextHopSpec& from);
  NextHopSpec(NextHopSpec&& from) noexcept
    : NextHopSpec() {
    *this = ::std::move(from);
  }

  inline NextHopSpec& operator=(const NextHopSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextHopSpec& operator=(NextHopSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextHopSpec& default_instance() {
    return *internal_default_instance();
  }
  enum NhinfoCase {
    kOverlayNhInfo = 2,
    kUnderlayNhInfo = 3,
    kIpNhInfo = 4,
    NHINFO_NOT_SET = 0,
  };

  static inline const NextHopSpec* internal_default_instance() {
    return reinterpret_cast<const NextHopSpec*>(
               &_NextHopSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NextHopSpec& a, NextHopSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(NextHopSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextHopSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextHopSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NextHopSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NextHopSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NextHopSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextHopSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.NextHopSpec";
  }
  protected:
  explicit NextHopSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOverlayNhInfoFieldNumber = 2,
    kUnderlayNhInfoFieldNumber = 3,
    kIpNhInfoFieldNumber = 4,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.network.cloud.v1alpha1.OverlayNextHopSpec overlay_nh_info = 2;
  bool has_overlay_nh_info() const;
  private:
  bool _internal_has_overlay_nh_info() const;
  public:
  void clear_overlay_nh_info();
  const ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec& overlay_nh_info() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* release_overlay_nh_info();
  ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* mutable_overlay_nh_info();
  void set_allocated_overlay_nh_info(::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* overlay_nh_info);
  private:
  const ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec& _internal_overlay_nh_info() const;
  ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* _internal_mutable_overlay_nh_info();
  public:
  void unsafe_arena_set_allocated_overlay_nh_info(
      ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* overlay_nh_info);
  ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* unsafe_arena_release_overlay_nh_info();

  // .opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec underlay_nh_info = 3;
  bool has_underlay_nh_info() const;
  private:
  bool _internal_has_underlay_nh_info() const;
  public:
  void clear_underlay_nh_info();
  const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec& underlay_nh_info() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* release_underlay_nh_info();
  ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* mutable_underlay_nh_info();
  void set_allocated_underlay_nh_info(::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* underlay_nh_info);
  private:
  const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec& _internal_underlay_nh_info() const;
  ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* _internal_mutable_underlay_nh_info();
  public:
  void unsafe_arena_set_allocated_underlay_nh_info(
      ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* underlay_nh_info);
  ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* unsafe_arena_release_underlay_nh_info();

  // .opi_api.network.cloud.v1alpha1.IPNextHopSpec ip_nh_info = 4;
  bool has_ip_nh_info() const;
  private:
  bool _internal_has_ip_nh_info() const;
  public:
  void clear_ip_nh_info();
  const ::opi_api::network::cloud::v1alpha1::IPNextHopSpec& ip_nh_info() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::IPNextHopSpec* release_ip_nh_info();
  ::opi_api::network::cloud::v1alpha1::IPNextHopSpec* mutable_ip_nh_info();
  void set_allocated_ip_nh_info(::opi_api::network::cloud::v1alpha1::IPNextHopSpec* ip_nh_info);
  private:
  const ::opi_api::network::cloud::v1alpha1::IPNextHopSpec& _internal_ip_nh_info() const;
  ::opi_api::network::cloud::v1alpha1::IPNextHopSpec* _internal_mutable_ip_nh_info();
  public:
  void unsafe_arena_set_allocated_ip_nh_info(
      ::opi_api::network::cloud::v1alpha1::IPNextHopSpec* ip_nh_info);
  ::opi_api::network::cloud::v1alpha1::IPNextHopSpec* unsafe_arena_release_ip_nh_info();

  void clear_nhinfo();
  NhinfoCase nhinfo_case() const;
  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.NextHopSpec)
 private:
  class _Internal;
  void set_has_overlay_nh_info();
  void set_has_underlay_nh_info();
  void set_has_ip_nh_info();

  inline bool has_nhinfo() const;
  inline void clear_has_nhinfo();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  union NhinfoUnion {
    constexpr NhinfoUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* overlay_nh_info_;
    ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* underlay_nh_info_;
    ::opi_api::network::cloud::v1alpha1::IPNextHopSpec* ip_nh_info_;
  } nhinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_nexthop_2eproto;
};
// -------------------------------------------------------------------

class UnderlayNextHopSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec) */ {
 public:
  inline UnderlayNextHopSpec() : UnderlayNextHopSpec(nullptr) {}
  ~UnderlayNextHopSpec() override;
  explicit constexpr UnderlayNextHopSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnderlayNextHopSpec(const UnderlayNextHopSpec& from);
  UnderlayNextHopSpec(UnderlayNextHopSpec&& from) noexcept
    : UnderlayNextHopSpec() {
    *this = ::std::move(from);
  }

  inline UnderlayNextHopSpec& operator=(const UnderlayNextHopSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnderlayNextHopSpec& operator=(UnderlayNextHopSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnderlayNextHopSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnderlayNextHopSpec* internal_default_instance() {
    return reinterpret_cast<const UnderlayNextHopSpec*>(
               &_UnderlayNextHopSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnderlayNextHopSpec& a, UnderlayNextHopSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(UnderlayNextHopSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnderlayNextHopSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnderlayNextHopSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnderlayNextHopSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnderlayNextHopSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnderlayNextHopSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnderlayNextHopSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec";
  }
  protected:
  explicit UnderlayNextHopSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnderlayNhMacFieldNumber = 2,
    kL3InterfaceIdFieldNumber = 1,
  };
  // bytes underlay_nh_mac = 2;
  void clear_underlay_nh_mac();
  const std::string& underlay_nh_mac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_underlay_nh_mac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_underlay_nh_mac();
  PROTOBUF_NODISCARD std::string* release_underlay_nh_mac();
  void set_allocated_underlay_nh_mac(std::string* underlay_nh_mac);
  private:
  const std::string& _internal_underlay_nh_mac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_underlay_nh_mac(const std::string& value);
  std::string* _internal_mutable_underlay_nh_mac();
  public:

  // .opi_api.common.v1.ObjectKey l3_interface_id = 1;
  bool has_l3_interface_id() const;
  private:
  bool _internal_has_l3_interface_id() const;
  public:
  void clear_l3_interface_id();
  const ::opi_api::common::v1::ObjectKey& l3_interface_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_l3_interface_id();
  ::opi_api::common::v1::ObjectKey* mutable_l3_interface_id();
  void set_allocated_l3_interface_id(::opi_api::common::v1::ObjectKey* l3_interface_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_l3_interface_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_l3_interface_id();
  public:
  void unsafe_arena_set_allocated_l3_interface_id(
      ::opi_api::common::v1::ObjectKey* l3_interface_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_l3_interface_id();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr underlay_nh_mac_;
  ::opi_api::common::v1::ObjectKey* l3_interface_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nexthop_2eproto;
};
// -------------------------------------------------------------------

class OverlayNextHopSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec) */ {
 public:
  inline OverlayNextHopSpec() : OverlayNextHopSpec(nullptr) {}
  ~OverlayNextHopSpec() override;
  explicit constexpr OverlayNextHopSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OverlayNextHopSpec(const OverlayNextHopSpec& from);
  OverlayNextHopSpec(OverlayNextHopSpec&& from) noexcept
    : OverlayNextHopSpec() {
    *this = ::std::move(from);
  }

  inline OverlayNextHopSpec& operator=(const OverlayNextHopSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline OverlayNextHopSpec& operator=(OverlayNextHopSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OverlayNextHopSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const OverlayNextHopSpec* internal_default_instance() {
    return reinterpret_cast<const OverlayNextHopSpec*>(
               &_OverlayNextHopSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OverlayNextHopSpec& a, OverlayNextHopSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(OverlayNextHopSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OverlayNextHopSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OverlayNextHopSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OverlayNextHopSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OverlayNextHopSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OverlayNextHopSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverlayNextHopSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.OverlayNextHopSpec";
  }
  protected:
  explicit OverlayNextHopSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTunnelIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey tunnel_id = 1;
  bool has_tunnel_id() const;
  private:
  bool _internal_has_tunnel_id() const;
  public:
  void clear_tunnel_id();
  const ::opi_api::common::v1::ObjectKey& tunnel_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_tunnel_id();
  ::opi_api::common::v1::ObjectKey* mutable_tunnel_id();
  void set_allocated_tunnel_id(::opi_api::common::v1::ObjectKey* tunnel_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_tunnel_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_tunnel_id();
  public:
  void unsafe_arena_set_allocated_tunnel_id(
      ::opi_api::common::v1::ObjectKey* tunnel_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_tunnel_id();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* tunnel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nexthop_2eproto;
};
// -------------------------------------------------------------------

class IPNextHopSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.IPNextHopSpec) */ {
 public:
  inline IPNextHopSpec() : IPNextHopSpec(nullptr) {}
  ~IPNextHopSpec() override;
  explicit constexpr IPNextHopSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPNextHopSpec(const IPNextHopSpec& from);
  IPNextHopSpec(IPNextHopSpec&& from) noexcept
    : IPNextHopSpec() {
    *this = ::std::move(from);
  }

  inline IPNextHopSpec& operator=(const IPNextHopSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPNextHopSpec& operator=(IPNextHopSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPNextHopSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPNextHopSpec* internal_default_instance() {
    return reinterpret_cast<const IPNextHopSpec*>(
               &_IPNextHopSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IPNextHopSpec& a, IPNextHopSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(IPNextHopSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPNextHopSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPNextHopSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPNextHopSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPNextHopSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPNextHopSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPNextHopSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.IPNextHopSpec";
  }
  protected:
  explicit IPNextHopSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacFieldNumber = 4,
    kVpcIdFieldNumber = 1,
    kIpAddressFieldNumber = 2,
    kVlanFieldNumber = 3,
  };
  // bytes mac = 4;
  void clear_mac();
  const std::string& mac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac();
  PROTOBUF_NODISCARD std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // .opi_api.common.v1.ObjectKey vpc_id = 1;
  bool has_vpc_id() const;
  private:
  bool _internal_has_vpc_id() const;
  public:
  void clear_vpc_id();
  const ::opi_api::common::v1::ObjectKey& vpc_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_vpc_id();
  ::opi_api::common::v1::ObjectKey* mutable_vpc_id();
  void set_allocated_vpc_id(::opi_api::common::v1::ObjectKey* vpc_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_vpc_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_vpc_id();
  public:
  void unsafe_arena_set_allocated_vpc_id(
      ::opi_api::common::v1::ObjectKey* vpc_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_vpc_id();

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 2;
  bool has_ip_address() const;
  private:
  bool _internal_has_ip_address() const;
  public:
  void clear_ip_address();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& ip_address() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_ip_address();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_ip_address();
  void set_allocated_ip_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* ip_address);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_ip_address() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_ip_address();
  public:
  void unsafe_arena_set_allocated_ip_address(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* ip_address);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_ip_address();

  // int32 vlan = 3;
  void clear_vlan();
  int32_t vlan() const;
  void set_vlan(int32_t value);
  private:
  int32_t _internal_vlan() const;
  void _internal_set_vlan(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.IPNextHopSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  ::opi_api::common::v1::ObjectKey* vpc_id_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* ip_address_;
  int32_t vlan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nexthop_2eproto;
};
// -------------------------------------------------------------------

class NextHopStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.NextHopStatus) */ {
 public:
  inline NextHopStatus() : NextHopStatus(nullptr) {}
  ~NextHopStatus() override;
  explicit constexpr NextHopStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NextHopStatus(const NextHopStatus& from);
  NextHopStatus(NextHopStatus&& from) noexcept
    : NextHopStatus() {
    *this = ::std::move(from);
  }

  inline NextHopStatus& operator=(const NextHopStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextHopStatus& operator=(NextHopStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextHopStatus& default_instance() {
    return *internal_default_instance();
  }
  enum NhinfoCase {
    kUnderlayNhInfo = 2,
    kOverlayNhInfo = 3,
    NHINFO_NOT_SET = 0,
  };

  static inline const NextHopStatus* internal_default_instance() {
    return reinterpret_cast<const NextHopStatus*>(
               &_NextHopStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NextHopStatus& a, NextHopStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(NextHopStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextHopStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextHopStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NextHopStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NextHopStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NextHopStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextHopStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.NextHopStatus";
  }
  protected:
  explicit NextHopStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHwHandleFieldNumber = 1,
    kUnderlayNhInfoFieldNumber = 2,
    kOverlayNhInfoFieldNumber = 3,
  };
  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
  bool has_hw_handle() const;
  private:
  bool _internal_has_hw_handle() const;
  public:
  void clear_hw_handle();
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& hw_handle() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::HwHandle* release_hw_handle();
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* mutable_hw_handle();
  void set_allocated_hw_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& _internal_hw_handle() const;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _internal_mutable_hw_handle();
  public:
  void unsafe_arena_set_allocated_hw_handle(
      ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle);
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* unsafe_arena_release_hw_handle();

  // .opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus underlay_nh_info = 2;
  bool has_underlay_nh_info() const;
  private:
  bool _internal_has_underlay_nh_info() const;
  public:
  void clear_underlay_nh_info();
  const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus& underlay_nh_info() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* release_underlay_nh_info();
  ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* mutable_underlay_nh_info();
  void set_allocated_underlay_nh_info(::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* underlay_nh_info);
  private:
  const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus& _internal_underlay_nh_info() const;
  ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* _internal_mutable_underlay_nh_info();
  public:
  void unsafe_arena_set_allocated_underlay_nh_info(
      ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* underlay_nh_info);
  ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* unsafe_arena_release_underlay_nh_info();

  // .opi_api.network.cloud.v1alpha1.OverlayNextHopStatus overlay_nh_info = 3;
  bool has_overlay_nh_info() const;
  private:
  bool _internal_has_overlay_nh_info() const;
  public:
  void clear_overlay_nh_info();
  const ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus& overlay_nh_info() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* release_overlay_nh_info();
  ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* mutable_overlay_nh_info();
  void set_allocated_overlay_nh_info(::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* overlay_nh_info);
  private:
  const ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus& _internal_overlay_nh_info() const;
  ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* _internal_mutable_overlay_nh_info();
  public:
  void unsafe_arena_set_allocated_overlay_nh_info(
      ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* overlay_nh_info);
  ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* unsafe_arena_release_overlay_nh_info();

  void clear_nhinfo();
  NhinfoCase nhinfo_case() const;
  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.NextHopStatus)
 private:
  class _Internal;
  void set_has_underlay_nh_info();
  void set_has_overlay_nh_info();

  inline bool has_nhinfo() const;
  inline void clear_has_nhinfo();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle_;
  union NhinfoUnion {
    constexpr NhinfoUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* underlay_nh_info_;
    ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* overlay_nh_info_;
  } nhinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_nexthop_2eproto;
};
// -------------------------------------------------------------------

class UnderlayNextHopStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus) */ {
 public:
  inline UnderlayNextHopStatus() : UnderlayNextHopStatus(nullptr) {}
  ~UnderlayNextHopStatus() override;
  explicit constexpr UnderlayNextHopStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnderlayNextHopStatus(const UnderlayNextHopStatus& from);
  UnderlayNextHopStatus(UnderlayNextHopStatus&& from) noexcept
    : UnderlayNextHopStatus() {
    *this = ::std::move(from);
  }

  inline UnderlayNextHopStatus& operator=(const UnderlayNextHopStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnderlayNextHopStatus& operator=(UnderlayNextHopStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnderlayNextHopStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnderlayNextHopStatus* internal_default_instance() {
    return reinterpret_cast<const UnderlayNextHopStatus*>(
               &_UnderlayNextHopStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UnderlayNextHopStatus& a, UnderlayNextHopStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(UnderlayNextHopStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnderlayNextHopStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnderlayNextHopStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnderlayNextHopStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnderlayNextHopStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnderlayNextHopStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnderlayNextHopStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus";
  }
  protected:
  explicit UnderlayNextHopStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kVlanFieldNumber = 2,
  };
  // int32 port = 1;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // int32 vlan = 2;
  void clear_vlan();
  int32_t vlan() const;
  void set_vlan(int32_t value);
  private:
  int32_t _internal_vlan() const;
  void _internal_set_vlan(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t port_;
  int32_t vlan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nexthop_2eproto;
};
// -------------------------------------------------------------------

class OverlayNextHopStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus) */ {
 public:
  inline OverlayNextHopStatus() : OverlayNextHopStatus(nullptr) {}
  ~OverlayNextHopStatus() override;
  explicit constexpr OverlayNextHopStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OverlayNextHopStatus(const OverlayNextHopStatus& from);
  OverlayNextHopStatus(OverlayNextHopStatus&& from) noexcept
    : OverlayNextHopStatus() {
    *this = ::std::move(from);
  }

  inline OverlayNextHopStatus& operator=(const OverlayNextHopStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline OverlayNextHopStatus& operator=(OverlayNextHopStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OverlayNextHopStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const OverlayNextHopStatus* internal_default_instance() {
    return reinterpret_cast<const OverlayNextHopStatus*>(
               &_OverlayNextHopStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OverlayNextHopStatus& a, OverlayNextHopStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(OverlayNextHopStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OverlayNextHopStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OverlayNextHopStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OverlayNextHopStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OverlayNextHopStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OverlayNextHopStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverlayNextHopStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.OverlayNextHopStatus";
  }
  protected:
  explicit OverlayNextHopStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTunnelIpFieldNumber = 1,
  };
  // .opi_api.network.opinetcommon.v1alpha1.IPAddress tunnel_ip = 1;
  bool has_tunnel_ip() const;
  private:
  bool _internal_has_tunnel_ip() const;
  public:
  void clear_tunnel_ip();
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& tunnel_ip() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::IPAddress* release_tunnel_ip();
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* mutable_tunnel_ip();
  void set_allocated_tunnel_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* tunnel_ip);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& _internal_tunnel_ip() const;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _internal_mutable_tunnel_ip();
  public:
  void unsafe_arena_set_allocated_tunnel_ip(
      ::opi_api::network::opinetcommon::v1alpha1::IPAddress* tunnel_ip);
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* unsafe_arena_release_tunnel_ip();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* tunnel_ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nexthop_2eproto;
};
// -------------------------------------------------------------------

class NextHopLookup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.NextHopLookup) */ {
 public:
  inline NextHopLookup() : NextHopLookup(nullptr) {}
  ~NextHopLookup() override;
  explicit constexpr NextHopLookup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NextHopLookup(const NextHopLookup& from);
  NextHopLookup(NextHopLookup&& from) noexcept
    : NextHopLookup() {
    *this = ::std::move(from);
  }

  inline NextHopLookup& operator=(const NextHopLookup& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextHopLookup& operator=(NextHopLookup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextHopLookup& default_instance() {
    return *internal_default_instance();
  }
  enum GettypeCase {
    kType = 1,
    kNhId = 2,
    GETTYPE_NOT_SET = 0,
  };

  static inline const NextHopLookup* internal_default_instance() {
    return reinterpret_cast<const NextHopLookup*>(
               &_NextHopLookup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NextHopLookup& a, NextHopLookup& b) {
    a.Swap(&b);
  }
  inline void Swap(NextHopLookup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextHopLookup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextHopLookup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NextHopLookup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NextHopLookup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NextHopLookup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextHopLookup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.NextHopLookup";
  }
  protected:
  explicit NextHopLookup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNhIdFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.NextHopType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::opi_api::network::cloud::v1alpha1::NextHopType type() const;
  void set_type(::opi_api::network::cloud::v1alpha1::NextHopType value);
  private:
  ::opi_api::network::cloud::v1alpha1::NextHopType _internal_type() const;
  void _internal_set_type(::opi_api::network::cloud::v1alpha1::NextHopType value);
  public:

  // .opi_api.common.v1.ObjectKey nh_id = 2;
  bool has_nh_id() const;
  private:
  bool _internal_has_nh_id() const;
  public:
  void clear_nh_id();
  const ::opi_api::common::v1::ObjectKey& nh_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_nh_id();
  ::opi_api::common::v1::ObjectKey* mutable_nh_id();
  void set_allocated_nh_id(::opi_api::common::v1::ObjectKey* nh_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_nh_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_nh_id();
  public:
  void unsafe_arena_set_allocated_nh_id(
      ::opi_api::common::v1::ObjectKey* nh_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_nh_id();

  void clear_gettype();
  GettypeCase gettype_case() const;
  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.NextHopLookup)
 private:
  class _Internal;
  void set_has_type();
  void set_has_nh_id();

  inline bool has_gettype() const;
  inline void clear_has_gettype();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union GettypeUnion {
    constexpr GettypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int type_;
    ::opi_api::common::v1::ObjectKey* nh_id_;
  } gettype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_nexthop_2eproto;
};
// -------------------------------------------------------------------

class NextHopGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.NextHopGroup) */ {
 public:
  inline NextHopGroup() : NextHopGroup(nullptr) {}
  ~NextHopGroup() override;
  explicit constexpr NextHopGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NextHopGroup(const NextHopGroup& from);
  NextHopGroup(NextHopGroup&& from) noexcept
    : NextHopGroup() {
    *this = ::std::move(from);
  }

  inline NextHopGroup& operator=(const NextHopGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextHopGroup& operator=(NextHopGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextHopGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const NextHopGroup* internal_default_instance() {
    return reinterpret_cast<const NextHopGroup*>(
               &_NextHopGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NextHopGroup& a, NextHopGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(NextHopGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextHopGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextHopGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NextHopGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NextHopGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NextHopGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextHopGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.NextHopGroup";
  }
  protected:
  explicit NextHopGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // .opi_api.network.cloud.v1alpha1.NextHopGroupSpec spec = 3;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec& spec() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* release_spec();
  ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* mutable_spec();
  void set_allocated_spec(::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* spec);
  private:
  const ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec& _internal_spec() const;
  ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* spec);
  ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* unsafe_arena_release_spec();

  // .opi_api.network.cloud.v1alpha1.NextHopGroupStatus status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus& status() const;
  PROTOBUF_NODISCARD ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* release_status();
  ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* mutable_status();
  void set_allocated_status(::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* status);
  private:
  const ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus& _internal_status() const;
  ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* status);
  ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.NextHopGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* spec_;
  ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nexthop_2eproto;
};
// -------------------------------------------------------------------

class NextHopGroupSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.NextHopGroupSpec) */ {
 public:
  inline NextHopGroupSpec() : NextHopGroupSpec(nullptr) {}
  ~NextHopGroupSpec() override;
  explicit constexpr NextHopGroupSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NextHopGroupSpec(const NextHopGroupSpec& from);
  NextHopGroupSpec(NextHopGroupSpec&& from) noexcept
    : NextHopGroupSpec() {
    *this = ::std::move(from);
  }

  inline NextHopGroupSpec& operator=(const NextHopGroupSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextHopGroupSpec& operator=(NextHopGroupSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextHopGroupSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const NextHopGroupSpec* internal_default_instance() {
    return reinterpret_cast<const NextHopGroupSpec*>(
               &_NextHopGroupSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NextHopGroupSpec& a, NextHopGroupSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(NextHopGroupSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextHopGroupSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextHopGroupSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NextHopGroupSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NextHopGroupSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NextHopGroupSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextHopGroupSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.NextHopGroupSpec";
  }
  protected:
  explicit NextHopGroupSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 3,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.NextHopSpec members = 3;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::opi_api::network::cloud::v1alpha1::NextHopSpec* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHopSpec >*
      mutable_members();
  private:
  const ::opi_api::network::cloud::v1alpha1::NextHopSpec& _internal_members(int index) const;
  ::opi_api::network::cloud::v1alpha1::NextHopSpec* _internal_add_members();
  public:
  const ::opi_api::network::cloud::v1alpha1::NextHopSpec& members(int index) const;
  ::opi_api::network::cloud::v1alpha1::NextHopSpec* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHopSpec >&
      members() const;

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 2;
  void clear_type();
  ::opi_api::network::cloud::v1alpha1::NextHopGroupType type() const;
  void set_type(::opi_api::network::cloud::v1alpha1::NextHopGroupType value);
  private:
  ::opi_api::network::cloud::v1alpha1::NextHopGroupType _internal_type() const;
  void _internal_set_type(::opi_api::network::cloud::v1alpha1::NextHopGroupType value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.NextHopGroupSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHopSpec > members_;
  ::opi_api::common::v1::ObjectKey* id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nexthop_2eproto;
};
// -------------------------------------------------------------------

class NextHopGroupStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.NextHopGroupStatus) */ {
 public:
  inline NextHopGroupStatus() : NextHopGroupStatus(nullptr) {}
  ~NextHopGroupStatus() override;
  explicit constexpr NextHopGroupStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NextHopGroupStatus(const NextHopGroupStatus& from);
  NextHopGroupStatus(NextHopGroupStatus&& from) noexcept
    : NextHopGroupStatus() {
    *this = ::std::move(from);
  }

  inline NextHopGroupStatus& operator=(const NextHopGroupStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextHopGroupStatus& operator=(NextHopGroupStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextHopGroupStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const NextHopGroupStatus* internal_default_instance() {
    return reinterpret_cast<const NextHopGroupStatus*>(
               &_NextHopGroupStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(NextHopGroupStatus& a, NextHopGroupStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(NextHopGroupStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextHopGroupStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextHopGroupStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NextHopGroupStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NextHopGroupStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NextHopGroupStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextHopGroupStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.NextHopGroupStatus";
  }
  protected:
  explicit NextHopGroupStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
    kHwHandleFieldNumber = 2,
  };
  // repeated .opi_api.network.cloud.v1alpha1.NextHopStatus members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::opi_api::network::cloud::v1alpha1::NextHopStatus* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHopStatus >*
      mutable_members();
  private:
  const ::opi_api::network::cloud::v1alpha1::NextHopStatus& _internal_members(int index) const;
  ::opi_api::network::cloud::v1alpha1::NextHopStatus* _internal_add_members();
  public:
  const ::opi_api::network::cloud::v1alpha1::NextHopStatus& members(int index) const;
  ::opi_api::network::cloud::v1alpha1::NextHopStatus* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHopStatus >&
      members() const;

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 2;
  bool has_hw_handle() const;
  private:
  bool _internal_has_hw_handle() const;
  public:
  void clear_hw_handle();
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& hw_handle() const;
  PROTOBUF_NODISCARD ::opi_api::network::opinetcommon::v1alpha1::HwHandle* release_hw_handle();
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* mutable_hw_handle();
  void set_allocated_hw_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle);
  private:
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& _internal_hw_handle() const;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _internal_mutable_hw_handle();
  public:
  void unsafe_arena_set_allocated_hw_handle(
      ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle);
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* unsafe_arena_release_hw_handle();

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.NextHopGroupStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHopStatus > members_;
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nexthop_2eproto;
};
// -------------------------------------------------------------------

class NextHopGroupLookup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.network.cloud.v1alpha1.NextHopGroupLookup) */ {
 public:
  inline NextHopGroupLookup() : NextHopGroupLookup(nullptr) {}
  ~NextHopGroupLookup() override;
  explicit constexpr NextHopGroupLookup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NextHopGroupLookup(const NextHopGroupLookup& from);
  NextHopGroupLookup(NextHopGroupLookup&& from) noexcept
    : NextHopGroupLookup() {
    *this = ::std::move(from);
  }

  inline NextHopGroupLookup& operator=(const NextHopGroupLookup& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextHopGroupLookup& operator=(NextHopGroupLookup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextHopGroupLookup& default_instance() {
    return *internal_default_instance();
  }
  enum GettypeCase {
    kType = 1,
    kId = 2,
    GETTYPE_NOT_SET = 0,
  };

  static inline const NextHopGroupLookup* internal_default_instance() {
    return reinterpret_cast<const NextHopGroupLookup*>(
               &_NextHopGroupLookup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(NextHopGroupLookup& a, NextHopGroupLookup& b) {
    a.Swap(&b);
  }
  inline void Swap(NextHopGroupLookup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextHopGroupLookup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextHopGroupLookup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NextHopGroupLookup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NextHopGroupLookup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NextHopGroupLookup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextHopGroupLookup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.network.cloud.v1alpha1.NextHopGroupLookup";
  }
  protected:
  explicit NextHopGroupLookup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::opi_api::network::cloud::v1alpha1::NextHopGroupType type() const;
  void set_type(::opi_api::network::cloud::v1alpha1::NextHopGroupType value);
  private:
  ::opi_api::network::cloud::v1alpha1::NextHopGroupType _internal_type() const;
  void _internal_set_type(::opi_api::network::cloud::v1alpha1::NextHopGroupType value);
  public:

  // .opi_api.common.v1.ObjectKey id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  void clear_gettype();
  GettypeCase gettype_case() const;
  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.NextHopGroupLookup)
 private:
  class _Internal;
  void set_has_type();
  void set_has_id();

  inline bool has_gettype() const;
  inline void clear_has_gettype();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union GettypeUnion {
    constexpr GettypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int type_;
    ::opi_api::common::v1::ObjectKey* id_;
  } gettype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_nexthop_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NextHop

// .opi_api.network.cloud.v1alpha1.NextHopSpec spec = 1;
inline bool NextHop::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool NextHop::has_spec() const {
  return _internal_has_spec();
}
inline void NextHop::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopSpec& NextHop::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::NextHopSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::NextHopSpec&>(
      ::opi_api::network::cloud::v1alpha1::_NextHopSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopSpec& NextHop::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHop.spec)
  return _internal_spec();
}
inline void NextHop::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::NextHopSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.NextHop.spec)
}
inline ::opi_api::network::cloud::v1alpha1::NextHopSpec* NextHop::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::NextHopSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopSpec* NextHop::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.NextHop.spec)
  
  ::opi_api::network::cloud::v1alpha1::NextHopSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopSpec* NextHop::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHopSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopSpec* NextHop::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::NextHopSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHop.spec)
  return _msg;
}
inline void NextHop::set_allocated_spec(::opi_api::network::cloud::v1alpha1::NextHopSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::NextHopSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHop.spec)
}

// .opi_api.network.cloud.v1alpha1.NextHopStatus status = 2;
inline bool NextHop::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool NextHop::has_status() const {
  return _internal_has_status();
}
inline void NextHop::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopStatus& NextHop::_internal_status() const {
  const ::opi_api::network::cloud::v1alpha1::NextHopStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::NextHopStatus&>(
      ::opi_api::network::cloud::v1alpha1::_NextHopStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopStatus& NextHop::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHop.status)
  return _internal_status();
}
inline void NextHop::unsafe_arena_set_allocated_status(
    ::opi_api::network::cloud::v1alpha1::NextHopStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.NextHop.status)
}
inline ::opi_api::network::cloud::v1alpha1::NextHopStatus* NextHop::release_status() {
  
  ::opi_api::network::cloud::v1alpha1::NextHopStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopStatus* NextHop::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.NextHop.status)
  
  ::opi_api::network::cloud::v1alpha1::NextHopStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopStatus* NextHop::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHopStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopStatus* NextHop::mutable_status() {
  ::opi_api::network::cloud::v1alpha1::NextHopStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHop.status)
  return _msg;
}
inline void NextHop::set_allocated_status(::opi_api::network::cloud::v1alpha1::NextHopStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::NextHopStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHop.status)
}

// -------------------------------------------------------------------

// NextHopSpec

// .opi_api.common.v1.ObjectKey id = 1;
inline bool NextHopSpec::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool NextHopSpec::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& NextHopSpec::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NextHopSpec::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopSpec.id)
  return _internal_id();
}
inline void NextHopSpec::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.NextHopSpec.id)
}
inline ::opi_api::common::v1::ObjectKey* NextHopSpec::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NextHopSpec::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.NextHopSpec.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NextHopSpec::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* NextHopSpec::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHopSpec.id)
  return _msg;
}
inline void NextHopSpec::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopSpec.id)
}

// .opi_api.network.cloud.v1alpha1.OverlayNextHopSpec overlay_nh_info = 2;
inline bool NextHopSpec::_internal_has_overlay_nh_info() const {
  return nhinfo_case() == kOverlayNhInfo;
}
inline bool NextHopSpec::has_overlay_nh_info() const {
  return _internal_has_overlay_nh_info();
}
inline void NextHopSpec::set_has_overlay_nh_info() {
  _oneof_case_[0] = kOverlayNhInfo;
}
inline void NextHopSpec::clear_overlay_nh_info() {
  if (_internal_has_overlay_nh_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete nhinfo_.overlay_nh_info_;
    }
    clear_has_nhinfo();
  }
}
inline ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* NextHopSpec::release_overlay_nh_info() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.NextHopSpec.overlay_nh_info)
  if (_internal_has_overlay_nh_info()) {
    clear_has_nhinfo();
      ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* temp = nhinfo_.overlay_nh_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    nhinfo_.overlay_nh_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec& NextHopSpec::_internal_overlay_nh_info() const {
  return _internal_has_overlay_nh_info()
      ? *nhinfo_.overlay_nh_info_
      : reinterpret_cast< ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec&>(::opi_api::network::cloud::v1alpha1::_OverlayNextHopSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec& NextHopSpec::overlay_nh_info() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopSpec.overlay_nh_info)
  return _internal_overlay_nh_info();
}
inline ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* NextHopSpec::unsafe_arena_release_overlay_nh_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.NextHopSpec.overlay_nh_info)
  if (_internal_has_overlay_nh_info()) {
    clear_has_nhinfo();
    ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* temp = nhinfo_.overlay_nh_info_;
    nhinfo_.overlay_nh_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NextHopSpec::unsafe_arena_set_allocated_overlay_nh_info(::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* overlay_nh_info) {
  clear_nhinfo();
  if (overlay_nh_info) {
    set_has_overlay_nh_info();
    nhinfo_.overlay_nh_info_ = overlay_nh_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.NextHopSpec.overlay_nh_info)
}
inline ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* NextHopSpec::_internal_mutable_overlay_nh_info() {
  if (!_internal_has_overlay_nh_info()) {
    clear_nhinfo();
    set_has_overlay_nh_info();
    nhinfo_.overlay_nh_info_ = CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec >(GetArenaForAllocation());
  }
  return nhinfo_.overlay_nh_info_;
}
inline ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* NextHopSpec::mutable_overlay_nh_info() {
  ::opi_api::network::cloud::v1alpha1::OverlayNextHopSpec* _msg = _internal_mutable_overlay_nh_info();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHopSpec.overlay_nh_info)
  return _msg;
}

// .opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec underlay_nh_info = 3;
inline bool NextHopSpec::_internal_has_underlay_nh_info() const {
  return nhinfo_case() == kUnderlayNhInfo;
}
inline bool NextHopSpec::has_underlay_nh_info() const {
  return _internal_has_underlay_nh_info();
}
inline void NextHopSpec::set_has_underlay_nh_info() {
  _oneof_case_[0] = kUnderlayNhInfo;
}
inline void NextHopSpec::clear_underlay_nh_info() {
  if (_internal_has_underlay_nh_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete nhinfo_.underlay_nh_info_;
    }
    clear_has_nhinfo();
  }
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* NextHopSpec::release_underlay_nh_info() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.NextHopSpec.underlay_nh_info)
  if (_internal_has_underlay_nh_info()) {
    clear_has_nhinfo();
      ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* temp = nhinfo_.underlay_nh_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    nhinfo_.underlay_nh_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec& NextHopSpec::_internal_underlay_nh_info() const {
  return _internal_has_underlay_nh_info()
      ? *nhinfo_.underlay_nh_info_
      : reinterpret_cast< ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec&>(::opi_api::network::cloud::v1alpha1::_UnderlayNextHopSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec& NextHopSpec::underlay_nh_info() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopSpec.underlay_nh_info)
  return _internal_underlay_nh_info();
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* NextHopSpec::unsafe_arena_release_underlay_nh_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.NextHopSpec.underlay_nh_info)
  if (_internal_has_underlay_nh_info()) {
    clear_has_nhinfo();
    ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* temp = nhinfo_.underlay_nh_info_;
    nhinfo_.underlay_nh_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NextHopSpec::unsafe_arena_set_allocated_underlay_nh_info(::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* underlay_nh_info) {
  clear_nhinfo();
  if (underlay_nh_info) {
    set_has_underlay_nh_info();
    nhinfo_.underlay_nh_info_ = underlay_nh_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.NextHopSpec.underlay_nh_info)
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* NextHopSpec::_internal_mutable_underlay_nh_info() {
  if (!_internal_has_underlay_nh_info()) {
    clear_nhinfo();
    set_has_underlay_nh_info();
    nhinfo_.underlay_nh_info_ = CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec >(GetArenaForAllocation());
  }
  return nhinfo_.underlay_nh_info_;
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* NextHopSpec::mutable_underlay_nh_info() {
  ::opi_api::network::cloud::v1alpha1::UnderlayNextHopSpec* _msg = _internal_mutable_underlay_nh_info();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHopSpec.underlay_nh_info)
  return _msg;
}

// .opi_api.network.cloud.v1alpha1.IPNextHopSpec ip_nh_info = 4;
inline bool NextHopSpec::_internal_has_ip_nh_info() const {
  return nhinfo_case() == kIpNhInfo;
}
inline bool NextHopSpec::has_ip_nh_info() const {
  return _internal_has_ip_nh_info();
}
inline void NextHopSpec::set_has_ip_nh_info() {
  _oneof_case_[0] = kIpNhInfo;
}
inline void NextHopSpec::clear_ip_nh_info() {
  if (_internal_has_ip_nh_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete nhinfo_.ip_nh_info_;
    }
    clear_has_nhinfo();
  }
}
inline ::opi_api::network::cloud::v1alpha1::IPNextHopSpec* NextHopSpec::release_ip_nh_info() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.NextHopSpec.ip_nh_info)
  if (_internal_has_ip_nh_info()) {
    clear_has_nhinfo();
      ::opi_api::network::cloud::v1alpha1::IPNextHopSpec* temp = nhinfo_.ip_nh_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    nhinfo_.ip_nh_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::network::cloud::v1alpha1::IPNextHopSpec& NextHopSpec::_internal_ip_nh_info() const {
  return _internal_has_ip_nh_info()
      ? *nhinfo_.ip_nh_info_
      : reinterpret_cast< ::opi_api::network::cloud::v1alpha1::IPNextHopSpec&>(::opi_api::network::cloud::v1alpha1::_IPNextHopSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::IPNextHopSpec& NextHopSpec::ip_nh_info() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopSpec.ip_nh_info)
  return _internal_ip_nh_info();
}
inline ::opi_api::network::cloud::v1alpha1::IPNextHopSpec* NextHopSpec::unsafe_arena_release_ip_nh_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.NextHopSpec.ip_nh_info)
  if (_internal_has_ip_nh_info()) {
    clear_has_nhinfo();
    ::opi_api::network::cloud::v1alpha1::IPNextHopSpec* temp = nhinfo_.ip_nh_info_;
    nhinfo_.ip_nh_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NextHopSpec::unsafe_arena_set_allocated_ip_nh_info(::opi_api::network::cloud::v1alpha1::IPNextHopSpec* ip_nh_info) {
  clear_nhinfo();
  if (ip_nh_info) {
    set_has_ip_nh_info();
    nhinfo_.ip_nh_info_ = ip_nh_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.NextHopSpec.ip_nh_info)
}
inline ::opi_api::network::cloud::v1alpha1::IPNextHopSpec* NextHopSpec::_internal_mutable_ip_nh_info() {
  if (!_internal_has_ip_nh_info()) {
    clear_nhinfo();
    set_has_ip_nh_info();
    nhinfo_.ip_nh_info_ = CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::IPNextHopSpec >(GetArenaForAllocation());
  }
  return nhinfo_.ip_nh_info_;
}
inline ::opi_api::network::cloud::v1alpha1::IPNextHopSpec* NextHopSpec::mutable_ip_nh_info() {
  ::opi_api::network::cloud::v1alpha1::IPNextHopSpec* _msg = _internal_mutable_ip_nh_info();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHopSpec.ip_nh_info)
  return _msg;
}

inline bool NextHopSpec::has_nhinfo() const {
  return nhinfo_case() != NHINFO_NOT_SET;
}
inline void NextHopSpec::clear_has_nhinfo() {
  _oneof_case_[0] = NHINFO_NOT_SET;
}
inline NextHopSpec::NhinfoCase NextHopSpec::nhinfo_case() const {
  return NextHopSpec::NhinfoCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UnderlayNextHopSpec

// .opi_api.common.v1.ObjectKey l3_interface_id = 1;
inline bool UnderlayNextHopSpec::_internal_has_l3_interface_id() const {
  return this != internal_default_instance() && l3_interface_id_ != nullptr;
}
inline bool UnderlayNextHopSpec::has_l3_interface_id() const {
  return _internal_has_l3_interface_id();
}
inline const ::opi_api::common::v1::ObjectKey& UnderlayNextHopSpec::_internal_l3_interface_id() const {
  const ::opi_api::common::v1::ObjectKey* p = l3_interface_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& UnderlayNextHopSpec::l3_interface_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec.l3_interface_id)
  return _internal_l3_interface_id();
}
inline void UnderlayNextHopSpec::unsafe_arena_set_allocated_l3_interface_id(
    ::opi_api::common::v1::ObjectKey* l3_interface_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(l3_interface_id_);
  }
  l3_interface_id_ = l3_interface_id;
  if (l3_interface_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec.l3_interface_id)
}
inline ::opi_api::common::v1::ObjectKey* UnderlayNextHopSpec::release_l3_interface_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = l3_interface_id_;
  l3_interface_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* UnderlayNextHopSpec::unsafe_arena_release_l3_interface_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec.l3_interface_id)
  
  ::opi_api::common::v1::ObjectKey* temp = l3_interface_id_;
  l3_interface_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* UnderlayNextHopSpec::_internal_mutable_l3_interface_id() {
  
  if (l3_interface_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    l3_interface_id_ = p;
  }
  return l3_interface_id_;
}
inline ::opi_api::common::v1::ObjectKey* UnderlayNextHopSpec::mutable_l3_interface_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_l3_interface_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec.l3_interface_id)
  return _msg;
}
inline void UnderlayNextHopSpec::set_allocated_l3_interface_id(::opi_api::common::v1::ObjectKey* l3_interface_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(l3_interface_id_);
  }
  if (l3_interface_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(l3_interface_id));
    if (message_arena != submessage_arena) {
      l3_interface_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, l3_interface_id, submessage_arena);
    }
    
  } else {
    
  }
  l3_interface_id_ = l3_interface_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec.l3_interface_id)
}

// bytes underlay_nh_mac = 2;
inline void UnderlayNextHopSpec::clear_underlay_nh_mac() {
  underlay_nh_mac_.ClearToEmpty();
}
inline const std::string& UnderlayNextHopSpec::underlay_nh_mac() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec.underlay_nh_mac)
  return _internal_underlay_nh_mac();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnderlayNextHopSpec::set_underlay_nh_mac(ArgT0&& arg0, ArgT... args) {
 
 underlay_nh_mac_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec.underlay_nh_mac)
}
inline std::string* UnderlayNextHopSpec::mutable_underlay_nh_mac() {
  std::string* _s = _internal_mutable_underlay_nh_mac();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec.underlay_nh_mac)
  return _s;
}
inline const std::string& UnderlayNextHopSpec::_internal_underlay_nh_mac() const {
  return underlay_nh_mac_.Get();
}
inline void UnderlayNextHopSpec::_internal_set_underlay_nh_mac(const std::string& value) {
  
  underlay_nh_mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UnderlayNextHopSpec::_internal_mutable_underlay_nh_mac() {
  
  return underlay_nh_mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UnderlayNextHopSpec::release_underlay_nh_mac() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec.underlay_nh_mac)
  return underlay_nh_mac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UnderlayNextHopSpec::set_allocated_underlay_nh_mac(std::string* underlay_nh_mac) {
  if (underlay_nh_mac != nullptr) {
    
  } else {
    
  }
  underlay_nh_mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), underlay_nh_mac,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (underlay_nh_mac_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    underlay_nh_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.UnderlayNextHopSpec.underlay_nh_mac)
}

// -------------------------------------------------------------------

// OverlayNextHopSpec

// .opi_api.common.v1.ObjectKey tunnel_id = 1;
inline bool OverlayNextHopSpec::_internal_has_tunnel_id() const {
  return this != internal_default_instance() && tunnel_id_ != nullptr;
}
inline bool OverlayNextHopSpec::has_tunnel_id() const {
  return _internal_has_tunnel_id();
}
inline const ::opi_api::common::v1::ObjectKey& OverlayNextHopSpec::_internal_tunnel_id() const {
  const ::opi_api::common::v1::ObjectKey* p = tunnel_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& OverlayNextHopSpec::tunnel_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec.tunnel_id)
  return _internal_tunnel_id();
}
inline void OverlayNextHopSpec::unsafe_arena_set_allocated_tunnel_id(
    ::opi_api::common::v1::ObjectKey* tunnel_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_id_);
  }
  tunnel_id_ = tunnel_id;
  if (tunnel_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec.tunnel_id)
}
inline ::opi_api::common::v1::ObjectKey* OverlayNextHopSpec::release_tunnel_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = tunnel_id_;
  tunnel_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* OverlayNextHopSpec::unsafe_arena_release_tunnel_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec.tunnel_id)
  
  ::opi_api::common::v1::ObjectKey* temp = tunnel_id_;
  tunnel_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* OverlayNextHopSpec::_internal_mutable_tunnel_id() {
  
  if (tunnel_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    tunnel_id_ = p;
  }
  return tunnel_id_;
}
inline ::opi_api::common::v1::ObjectKey* OverlayNextHopSpec::mutable_tunnel_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_tunnel_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec.tunnel_id)
  return _msg;
}
inline void OverlayNextHopSpec::set_allocated_tunnel_id(::opi_api::common::v1::ObjectKey* tunnel_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_id_);
  }
  if (tunnel_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_id));
    if (message_arena != submessage_arena) {
      tunnel_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tunnel_id, submessage_arena);
    }
    
  } else {
    
  }
  tunnel_id_ = tunnel_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.OverlayNextHopSpec.tunnel_id)
}

// -------------------------------------------------------------------

// IPNextHopSpec

// .opi_api.common.v1.ObjectKey vpc_id = 1;
inline bool IPNextHopSpec::_internal_has_vpc_id() const {
  return this != internal_default_instance() && vpc_id_ != nullptr;
}
inline bool IPNextHopSpec::has_vpc_id() const {
  return _internal_has_vpc_id();
}
inline const ::opi_api::common::v1::ObjectKey& IPNextHopSpec::_internal_vpc_id() const {
  const ::opi_api::common::v1::ObjectKey* p = vpc_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& IPNextHopSpec::vpc_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.IPNextHopSpec.vpc_id)
  return _internal_vpc_id();
}
inline void IPNextHopSpec::unsafe_arena_set_allocated_vpc_id(
    ::opi_api::common::v1::ObjectKey* vpc_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc_id_);
  }
  vpc_id_ = vpc_id;
  if (vpc_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.IPNextHopSpec.vpc_id)
}
inline ::opi_api::common::v1::ObjectKey* IPNextHopSpec::release_vpc_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = vpc_id_;
  vpc_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* IPNextHopSpec::unsafe_arena_release_vpc_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.IPNextHopSpec.vpc_id)
  
  ::opi_api::common::v1::ObjectKey* temp = vpc_id_;
  vpc_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* IPNextHopSpec::_internal_mutable_vpc_id() {
  
  if (vpc_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    vpc_id_ = p;
  }
  return vpc_id_;
}
inline ::opi_api::common::v1::ObjectKey* IPNextHopSpec::mutable_vpc_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_vpc_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.IPNextHopSpec.vpc_id)
  return _msg;
}
inline void IPNextHopSpec::set_allocated_vpc_id(::opi_api::common::v1::ObjectKey* vpc_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc_id_);
  }
  if (vpc_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc_id));
    if (message_arena != submessage_arena) {
      vpc_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpc_id, submessage_arena);
    }
    
  } else {
    
  }
  vpc_id_ = vpc_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.IPNextHopSpec.vpc_id)
}

// .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 2;
inline bool IPNextHopSpec::_internal_has_ip_address() const {
  return this != internal_default_instance() && ip_address_ != nullptr;
}
inline bool IPNextHopSpec::has_ip_address() const {
  return _internal_has_ip_address();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& IPNextHopSpec::_internal_ip_address() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = ip_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& IPNextHopSpec::ip_address() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.IPNextHopSpec.ip_address)
  return _internal_ip_address();
}
inline void IPNextHopSpec::unsafe_arena_set_allocated_ip_address(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* ip_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_address_);
  }
  ip_address_ = ip_address;
  if (ip_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.IPNextHopSpec.ip_address)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* IPNextHopSpec::release_ip_address() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = ip_address_;
  ip_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* IPNextHopSpec::unsafe_arena_release_ip_address() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.IPNextHopSpec.ip_address)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = ip_address_;
  ip_address_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* IPNextHopSpec::_internal_mutable_ip_address() {
  
  if (ip_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    ip_address_ = p;
  }
  return ip_address_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* IPNextHopSpec::mutable_ip_address() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.IPNextHopSpec.ip_address)
  return _msg;
}
inline void IPNextHopSpec::set_allocated_ip_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* ip_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_address_);
  }
  if (ip_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_address));
    if (message_arena != submessage_arena) {
      ip_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_address, submessage_arena);
    }
    
  } else {
    
  }
  ip_address_ = ip_address;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.IPNextHopSpec.ip_address)
}

// int32 vlan = 3;
inline void IPNextHopSpec::clear_vlan() {
  vlan_ = 0;
}
inline int32_t IPNextHopSpec::_internal_vlan() const {
  return vlan_;
}
inline int32_t IPNextHopSpec::vlan() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.IPNextHopSpec.vlan)
  return _internal_vlan();
}
inline void IPNextHopSpec::_internal_set_vlan(int32_t value) {
  
  vlan_ = value;
}
inline void IPNextHopSpec::set_vlan(int32_t value) {
  _internal_set_vlan(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.IPNextHopSpec.vlan)
}

// bytes mac = 4;
inline void IPNextHopSpec::clear_mac() {
  mac_.ClearToEmpty();
}
inline const std::string& IPNextHopSpec::mac() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.IPNextHopSpec.mac)
  return _internal_mac();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IPNextHopSpec::set_mac(ArgT0&& arg0, ArgT... args) {
 
 mac_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.IPNextHopSpec.mac)
}
inline std::string* IPNextHopSpec::mutable_mac() {
  std::string* _s = _internal_mutable_mac();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.IPNextHopSpec.mac)
  return _s;
}
inline const std::string& IPNextHopSpec::_internal_mac() const {
  return mac_.Get();
}
inline void IPNextHopSpec::_internal_set_mac(const std::string& value) {
  
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IPNextHopSpec::_internal_mutable_mac() {
  
  return mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IPNextHopSpec::release_mac() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.IPNextHopSpec.mac)
  return mac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IPNextHopSpec::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.IPNextHopSpec.mac)
}

// -------------------------------------------------------------------

// NextHopStatus

// .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 1;
inline bool NextHopStatus::_internal_has_hw_handle() const {
  return this != internal_default_instance() && hw_handle_ != nullptr;
}
inline bool NextHopStatus::has_hw_handle() const {
  return _internal_has_hw_handle();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& NextHopStatus::_internal_hw_handle() const {
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle* p = hw_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&>(
      ::opi_api::network::opinetcommon::v1alpha1::_HwHandle_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& NextHopStatus::hw_handle() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopStatus.hw_handle)
  return _internal_hw_handle();
}
inline void NextHopStatus::unsafe_arena_set_allocated_hw_handle(
    ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_handle_);
  }
  hw_handle_ = hw_handle;
  if (hw_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.NextHopStatus.hw_handle)
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* NextHopStatus::release_hw_handle() {
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = hw_handle_;
  hw_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* NextHopStatus::unsafe_arena_release_hw_handle() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.NextHopStatus.hw_handle)
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = hw_handle_;
  hw_handle_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* NextHopStatus::_internal_mutable_hw_handle() {
  
  if (hw_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::HwHandle>(GetArenaForAllocation());
    hw_handle_ = p;
  }
  return hw_handle_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* NextHopStatus::mutable_hw_handle() {
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _msg = _internal_mutable_hw_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHopStatus.hw_handle)
  return _msg;
}
inline void NextHopStatus::set_allocated_hw_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_handle_);
  }
  if (hw_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_handle));
    if (message_arena != submessage_arena) {
      hw_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hw_handle, submessage_arena);
    }
    
  } else {
    
  }
  hw_handle_ = hw_handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopStatus.hw_handle)
}

// .opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus underlay_nh_info = 2;
inline bool NextHopStatus::_internal_has_underlay_nh_info() const {
  return nhinfo_case() == kUnderlayNhInfo;
}
inline bool NextHopStatus::has_underlay_nh_info() const {
  return _internal_has_underlay_nh_info();
}
inline void NextHopStatus::set_has_underlay_nh_info() {
  _oneof_case_[0] = kUnderlayNhInfo;
}
inline void NextHopStatus::clear_underlay_nh_info() {
  if (_internal_has_underlay_nh_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete nhinfo_.underlay_nh_info_;
    }
    clear_has_nhinfo();
  }
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* NextHopStatus::release_underlay_nh_info() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.NextHopStatus.underlay_nh_info)
  if (_internal_has_underlay_nh_info()) {
    clear_has_nhinfo();
      ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* temp = nhinfo_.underlay_nh_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    nhinfo_.underlay_nh_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus& NextHopStatus::_internal_underlay_nh_info() const {
  return _internal_has_underlay_nh_info()
      ? *nhinfo_.underlay_nh_info_
      : reinterpret_cast< ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus&>(::opi_api::network::cloud::v1alpha1::_UnderlayNextHopStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus& NextHopStatus::underlay_nh_info() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopStatus.underlay_nh_info)
  return _internal_underlay_nh_info();
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* NextHopStatus::unsafe_arena_release_underlay_nh_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.NextHopStatus.underlay_nh_info)
  if (_internal_has_underlay_nh_info()) {
    clear_has_nhinfo();
    ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* temp = nhinfo_.underlay_nh_info_;
    nhinfo_.underlay_nh_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NextHopStatus::unsafe_arena_set_allocated_underlay_nh_info(::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* underlay_nh_info) {
  clear_nhinfo();
  if (underlay_nh_info) {
    set_has_underlay_nh_info();
    nhinfo_.underlay_nh_info_ = underlay_nh_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.NextHopStatus.underlay_nh_info)
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* NextHopStatus::_internal_mutable_underlay_nh_info() {
  if (!_internal_has_underlay_nh_info()) {
    clear_nhinfo();
    set_has_underlay_nh_info();
    nhinfo_.underlay_nh_info_ = CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus >(GetArenaForAllocation());
  }
  return nhinfo_.underlay_nh_info_;
}
inline ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* NextHopStatus::mutable_underlay_nh_info() {
  ::opi_api::network::cloud::v1alpha1::UnderlayNextHopStatus* _msg = _internal_mutable_underlay_nh_info();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHopStatus.underlay_nh_info)
  return _msg;
}

// .opi_api.network.cloud.v1alpha1.OverlayNextHopStatus overlay_nh_info = 3;
inline bool NextHopStatus::_internal_has_overlay_nh_info() const {
  return nhinfo_case() == kOverlayNhInfo;
}
inline bool NextHopStatus::has_overlay_nh_info() const {
  return _internal_has_overlay_nh_info();
}
inline void NextHopStatus::set_has_overlay_nh_info() {
  _oneof_case_[0] = kOverlayNhInfo;
}
inline void NextHopStatus::clear_overlay_nh_info() {
  if (_internal_has_overlay_nh_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete nhinfo_.overlay_nh_info_;
    }
    clear_has_nhinfo();
  }
}
inline ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* NextHopStatus::release_overlay_nh_info() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.NextHopStatus.overlay_nh_info)
  if (_internal_has_overlay_nh_info()) {
    clear_has_nhinfo();
      ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* temp = nhinfo_.overlay_nh_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    nhinfo_.overlay_nh_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus& NextHopStatus::_internal_overlay_nh_info() const {
  return _internal_has_overlay_nh_info()
      ? *nhinfo_.overlay_nh_info_
      : reinterpret_cast< ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus&>(::opi_api::network::cloud::v1alpha1::_OverlayNextHopStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus& NextHopStatus::overlay_nh_info() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopStatus.overlay_nh_info)
  return _internal_overlay_nh_info();
}
inline ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* NextHopStatus::unsafe_arena_release_overlay_nh_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.NextHopStatus.overlay_nh_info)
  if (_internal_has_overlay_nh_info()) {
    clear_has_nhinfo();
    ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* temp = nhinfo_.overlay_nh_info_;
    nhinfo_.overlay_nh_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NextHopStatus::unsafe_arena_set_allocated_overlay_nh_info(::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* overlay_nh_info) {
  clear_nhinfo();
  if (overlay_nh_info) {
    set_has_overlay_nh_info();
    nhinfo_.overlay_nh_info_ = overlay_nh_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.NextHopStatus.overlay_nh_info)
}
inline ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* NextHopStatus::_internal_mutable_overlay_nh_info() {
  if (!_internal_has_overlay_nh_info()) {
    clear_nhinfo();
    set_has_overlay_nh_info();
    nhinfo_.overlay_nh_info_ = CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus >(GetArenaForAllocation());
  }
  return nhinfo_.overlay_nh_info_;
}
inline ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* NextHopStatus::mutable_overlay_nh_info() {
  ::opi_api::network::cloud::v1alpha1::OverlayNextHopStatus* _msg = _internal_mutable_overlay_nh_info();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHopStatus.overlay_nh_info)
  return _msg;
}

inline bool NextHopStatus::has_nhinfo() const {
  return nhinfo_case() != NHINFO_NOT_SET;
}
inline void NextHopStatus::clear_has_nhinfo() {
  _oneof_case_[0] = NHINFO_NOT_SET;
}
inline NextHopStatus::NhinfoCase NextHopStatus::nhinfo_case() const {
  return NextHopStatus::NhinfoCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UnderlayNextHopStatus

// int32 port = 1;
inline void UnderlayNextHopStatus::clear_port() {
  port_ = 0;
}
inline int32_t UnderlayNextHopStatus::_internal_port() const {
  return port_;
}
inline int32_t UnderlayNextHopStatus::port() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus.port)
  return _internal_port();
}
inline void UnderlayNextHopStatus::_internal_set_port(int32_t value) {
  
  port_ = value;
}
inline void UnderlayNextHopStatus::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus.port)
}

// int32 vlan = 2;
inline void UnderlayNextHopStatus::clear_vlan() {
  vlan_ = 0;
}
inline int32_t UnderlayNextHopStatus::_internal_vlan() const {
  return vlan_;
}
inline int32_t UnderlayNextHopStatus::vlan() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus.vlan)
  return _internal_vlan();
}
inline void UnderlayNextHopStatus::_internal_set_vlan(int32_t value) {
  
  vlan_ = value;
}
inline void UnderlayNextHopStatus::set_vlan(int32_t value) {
  _internal_set_vlan(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.UnderlayNextHopStatus.vlan)
}

// -------------------------------------------------------------------

// OverlayNextHopStatus

// .opi_api.network.opinetcommon.v1alpha1.IPAddress tunnel_ip = 1;
inline bool OverlayNextHopStatus::_internal_has_tunnel_ip() const {
  return this != internal_default_instance() && tunnel_ip_ != nullptr;
}
inline bool OverlayNextHopStatus::has_tunnel_ip() const {
  return _internal_has_tunnel_ip();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& OverlayNextHopStatus::_internal_tunnel_ip() const {
  const ::opi_api::network::opinetcommon::v1alpha1::IPAddress* p = tunnel_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&>(
      ::opi_api::network::opinetcommon::v1alpha1::_IPAddress_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& OverlayNextHopStatus::tunnel_ip() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus.tunnel_ip)
  return _internal_tunnel_ip();
}
inline void OverlayNextHopStatus::unsafe_arena_set_allocated_tunnel_ip(
    ::opi_api::network::opinetcommon::v1alpha1::IPAddress* tunnel_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_ip_);
  }
  tunnel_ip_ = tunnel_ip;
  if (tunnel_ip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus.tunnel_ip)
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* OverlayNextHopStatus::release_tunnel_ip() {
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = tunnel_ip_;
  tunnel_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* OverlayNextHopStatus::unsafe_arena_release_tunnel_ip() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus.tunnel_ip)
  
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* temp = tunnel_ip_;
  tunnel_ip_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* OverlayNextHopStatus::_internal_mutable_tunnel_ip() {
  
  if (tunnel_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::IPAddress>(GetArenaForAllocation());
    tunnel_ip_ = p;
  }
  return tunnel_ip_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::IPAddress* OverlayNextHopStatus::mutable_tunnel_ip() {
  ::opi_api::network::opinetcommon::v1alpha1::IPAddress* _msg = _internal_mutable_tunnel_ip();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus.tunnel_ip)
  return _msg;
}
inline void OverlayNextHopStatus::set_allocated_tunnel_ip(::opi_api::network::opinetcommon::v1alpha1::IPAddress* tunnel_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_ip_);
  }
  if (tunnel_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_ip));
    if (message_arena != submessage_arena) {
      tunnel_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tunnel_ip, submessage_arena);
    }
    
  } else {
    
  }
  tunnel_ip_ = tunnel_ip;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.OverlayNextHopStatus.tunnel_ip)
}

// -------------------------------------------------------------------

// NextHopLookup

// .opi_api.network.cloud.v1alpha1.NextHopType type = 1;
inline bool NextHopLookup::_internal_has_type() const {
  return gettype_case() == kType;
}
inline bool NextHopLookup::has_type() const {
  return _internal_has_type();
}
inline void NextHopLookup::set_has_type() {
  _oneof_case_[0] = kType;
}
inline void NextHopLookup::clear_type() {
  if (_internal_has_type()) {
    gettype_.type_ = 0;
    clear_has_gettype();
  }
}
inline ::opi_api::network::cloud::v1alpha1::NextHopType NextHopLookup::_internal_type() const {
  if (_internal_has_type()) {
    return static_cast< ::opi_api::network::cloud::v1alpha1::NextHopType >(gettype_.type_);
  }
  return static_cast< ::opi_api::network::cloud::v1alpha1::NextHopType >(0);
}
inline ::opi_api::network::cloud::v1alpha1::NextHopType NextHopLookup::type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopLookup.type)
  return _internal_type();
}
inline void NextHopLookup::_internal_set_type(::opi_api::network::cloud::v1alpha1::NextHopType value) {
  if (!_internal_has_type()) {
    clear_gettype();
    set_has_type();
  }
  gettype_.type_ = value;
}
inline void NextHopLookup::set_type(::opi_api::network::cloud::v1alpha1::NextHopType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.NextHopLookup.type)
}

// .opi_api.common.v1.ObjectKey nh_id = 2;
inline bool NextHopLookup::_internal_has_nh_id() const {
  return gettype_case() == kNhId;
}
inline bool NextHopLookup::has_nh_id() const {
  return _internal_has_nh_id();
}
inline void NextHopLookup::set_has_nh_id() {
  _oneof_case_[0] = kNhId;
}
inline ::opi_api::common::v1::ObjectKey* NextHopLookup::release_nh_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.NextHopLookup.nh_id)
  if (_internal_has_nh_id()) {
    clear_has_gettype();
      ::opi_api::common::v1::ObjectKey* temp = gettype_.nh_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    gettype_.nh_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::common::v1::ObjectKey& NextHopLookup::_internal_nh_id() const {
  return _internal_has_nh_id()
      ? *gettype_.nh_id_
      : reinterpret_cast< ::opi_api::common::v1::ObjectKey&>(::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NextHopLookup::nh_id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopLookup.nh_id)
  return _internal_nh_id();
}
inline ::opi_api::common::v1::ObjectKey* NextHopLookup::unsafe_arena_release_nh_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.NextHopLookup.nh_id)
  if (_internal_has_nh_id()) {
    clear_has_gettype();
    ::opi_api::common::v1::ObjectKey* temp = gettype_.nh_id_;
    gettype_.nh_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NextHopLookup::unsafe_arena_set_allocated_nh_id(::opi_api::common::v1::ObjectKey* nh_id) {
  clear_gettype();
  if (nh_id) {
    set_has_nh_id();
    gettype_.nh_id_ = nh_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.NextHopLookup.nh_id)
}
inline ::opi_api::common::v1::ObjectKey* NextHopLookup::_internal_mutable_nh_id() {
  if (!_internal_has_nh_id()) {
    clear_gettype();
    set_has_nh_id();
    gettype_.nh_id_ = CreateMaybeMessage< ::opi_api::common::v1::ObjectKey >(GetArenaForAllocation());
  }
  return gettype_.nh_id_;
}
inline ::opi_api::common::v1::ObjectKey* NextHopLookup::mutable_nh_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_nh_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHopLookup.nh_id)
  return _msg;
}

inline bool NextHopLookup::has_gettype() const {
  return gettype_case() != GETTYPE_NOT_SET;
}
inline void NextHopLookup::clear_has_gettype() {
  _oneof_case_[0] = GETTYPE_NOT_SET;
}
inline NextHopLookup::GettypeCase NextHopLookup::gettype_case() const {
  return NextHopLookup::GettypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NextHopGroup

// .opi_api.network.cloud.v1alpha1.NextHopGroupSpec spec = 3;
inline bool NextHopGroup::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool NextHopGroup::has_spec() const {
  return _internal_has_spec();
}
inline void NextHopGroup::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec& NextHopGroup::_internal_spec() const {
  const ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec&>(
      ::opi_api::network::cloud::v1alpha1::_NextHopGroupSpec_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec& NextHopGroup::spec() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopGroup.spec)
  return _internal_spec();
}
inline void NextHopGroup::unsafe_arena_set_allocated_spec(
    ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.NextHopGroup.spec)
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* NextHopGroup::release_spec() {
  
  ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* NextHopGroup::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.NextHopGroup.spec)
  
  ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* NextHopGroup::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHopGroupSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* NextHopGroup::mutable_spec() {
  ::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHopGroup.spec)
  return _msg;
}
inline void NextHopGroup::set_allocated_spec(::opi_api::network::cloud::v1alpha1::NextHopGroupSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::NextHopGroupSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopGroup.spec)
}

// .opi_api.network.cloud.v1alpha1.NextHopGroupStatus status = 4;
inline bool NextHopGroup::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool NextHopGroup::has_status() const {
  return _internal_has_status();
}
inline void NextHopGroup::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus& NextHopGroup::_internal_status() const {
  const ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus&>(
      ::opi_api::network::cloud::v1alpha1::_NextHopGroupStatus_default_instance_);
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus& NextHopGroup::status() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopGroup.status)
  return _internal_status();
}
inline void NextHopGroup::unsafe_arena_set_allocated_status(
    ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.NextHopGroup.status)
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* NextHopGroup::release_status() {
  
  ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* NextHopGroup::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.NextHopGroup.status)
  
  ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* NextHopGroup::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::cloud::v1alpha1::NextHopGroupStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* NextHopGroup::mutable_status() {
  ::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHopGroup.status)
  return _msg;
}
inline void NextHopGroup::set_allocated_status(::opi_api::network::cloud::v1alpha1::NextHopGroupStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::NextHopGroupStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopGroup.status)
}

// -------------------------------------------------------------------

// NextHopGroupSpec

// .opi_api.common.v1.ObjectKey id = 1;
inline bool NextHopGroupSpec::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool NextHopGroupSpec::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& NextHopGroupSpec::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NextHopGroupSpec::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopGroupSpec.id)
  return _internal_id();
}
inline void NextHopGroupSpec::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.NextHopGroupSpec.id)
}
inline ::opi_api::common::v1::ObjectKey* NextHopGroupSpec::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NextHopGroupSpec::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.NextHopGroupSpec.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NextHopGroupSpec::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* NextHopGroupSpec::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHopGroupSpec.id)
  return _msg;
}
inline void NextHopGroupSpec::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopGroupSpec.id)
}

// .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 2;
inline void NextHopGroupSpec::clear_type() {
  type_ = 0;
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroupType NextHopGroupSpec::_internal_type() const {
  return static_cast< ::opi_api::network::cloud::v1alpha1::NextHopGroupType >(type_);
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroupType NextHopGroupSpec::type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopGroupSpec.type)
  return _internal_type();
}
inline void NextHopGroupSpec::_internal_set_type(::opi_api::network::cloud::v1alpha1::NextHopGroupType value) {
  
  type_ = value;
}
inline void NextHopGroupSpec::set_type(::opi_api::network::cloud::v1alpha1::NextHopGroupType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.NextHopGroupSpec.type)
}

// repeated .opi_api.network.cloud.v1alpha1.NextHopSpec members = 3;
inline int NextHopGroupSpec::_internal_members_size() const {
  return members_.size();
}
inline int NextHopGroupSpec::members_size() const {
  return _internal_members_size();
}
inline void NextHopGroupSpec::clear_members() {
  members_.Clear();
}
inline ::opi_api::network::cloud::v1alpha1::NextHopSpec* NextHopGroupSpec::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHopGroupSpec.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHopSpec >*
NextHopGroupSpec::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.NextHopGroupSpec.members)
  return &members_;
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopSpec& NextHopGroupSpec::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopSpec& NextHopGroupSpec::members(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopGroupSpec.members)
  return _internal_members(index);
}
inline ::opi_api::network::cloud::v1alpha1::NextHopSpec* NextHopGroupSpec::_internal_add_members() {
  return members_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::NextHopSpec* NextHopGroupSpec::add_members() {
  ::opi_api::network::cloud::v1alpha1::NextHopSpec* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.NextHopGroupSpec.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHopSpec >&
NextHopGroupSpec::members() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.NextHopGroupSpec.members)
  return members_;
}

// -------------------------------------------------------------------

// NextHopGroupStatus

// repeated .opi_api.network.cloud.v1alpha1.NextHopStatus members = 1;
inline int NextHopGroupStatus::_internal_members_size() const {
  return members_.size();
}
inline int NextHopGroupStatus::members_size() const {
  return _internal_members_size();
}
inline void NextHopGroupStatus::clear_members() {
  members_.Clear();
}
inline ::opi_api::network::cloud::v1alpha1::NextHopStatus* NextHopGroupStatus::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHopGroupStatus.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHopStatus >*
NextHopGroupStatus::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.network.cloud.v1alpha1.NextHopGroupStatus.members)
  return &members_;
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopStatus& NextHopGroupStatus::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::opi_api::network::cloud::v1alpha1::NextHopStatus& NextHopGroupStatus::members(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopGroupStatus.members)
  return _internal_members(index);
}
inline ::opi_api::network::cloud::v1alpha1::NextHopStatus* NextHopGroupStatus::_internal_add_members() {
  return members_.Add();
}
inline ::opi_api::network::cloud::v1alpha1::NextHopStatus* NextHopGroupStatus::add_members() {
  ::opi_api::network::cloud::v1alpha1::NextHopStatus* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:opi_api.network.cloud.v1alpha1.NextHopGroupStatus.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::network::cloud::v1alpha1::NextHopStatus >&
NextHopGroupStatus::members() const {
  // @@protoc_insertion_point(field_list:opi_api.network.cloud.v1alpha1.NextHopGroupStatus.members)
  return members_;
}

// .opi_api.network.opinetcommon.v1alpha1.HwHandle hw_handle = 2;
inline bool NextHopGroupStatus::_internal_has_hw_handle() const {
  return this != internal_default_instance() && hw_handle_ != nullptr;
}
inline bool NextHopGroupStatus::has_hw_handle() const {
  return _internal_has_hw_handle();
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& NextHopGroupStatus::_internal_hw_handle() const {
  const ::opi_api::network::opinetcommon::v1alpha1::HwHandle* p = hw_handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&>(
      ::opi_api::network::opinetcommon::v1alpha1::_HwHandle_default_instance_);
}
inline const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& NextHopGroupStatus::hw_handle() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopGroupStatus.hw_handle)
  return _internal_hw_handle();
}
inline void NextHopGroupStatus::unsafe_arena_set_allocated_hw_handle(
    ::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_handle_);
  }
  hw_handle_ = hw_handle;
  if (hw_handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.NextHopGroupStatus.hw_handle)
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* NextHopGroupStatus::release_hw_handle() {
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = hw_handle_;
  hw_handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* NextHopGroupStatus::unsafe_arena_release_hw_handle() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.NextHopGroupStatus.hw_handle)
  
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* temp = hw_handle_;
  hw_handle_ = nullptr;
  return temp;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* NextHopGroupStatus::_internal_mutable_hw_handle() {
  
  if (hw_handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::network::opinetcommon::v1alpha1::HwHandle>(GetArenaForAllocation());
    hw_handle_ = p;
  }
  return hw_handle_;
}
inline ::opi_api::network::opinetcommon::v1alpha1::HwHandle* NextHopGroupStatus::mutable_hw_handle() {
  ::opi_api::network::opinetcommon::v1alpha1::HwHandle* _msg = _internal_mutable_hw_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHopGroupStatus.hw_handle)
  return _msg;
}
inline void NextHopGroupStatus::set_allocated_hw_handle(::opi_api::network::opinetcommon::v1alpha1::HwHandle* hw_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_handle_);
  }
  if (hw_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_handle));
    if (message_arena != submessage_arena) {
      hw_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hw_handle, submessage_arena);
    }
    
  } else {
    
  }
  hw_handle_ = hw_handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.NextHopGroupStatus.hw_handle)
}

// -------------------------------------------------------------------

// NextHopGroupLookup

// .opi_api.network.cloud.v1alpha1.NextHopGroupType type = 1;
inline bool NextHopGroupLookup::_internal_has_type() const {
  return gettype_case() == kType;
}
inline bool NextHopGroupLookup::has_type() const {
  return _internal_has_type();
}
inline void NextHopGroupLookup::set_has_type() {
  _oneof_case_[0] = kType;
}
inline void NextHopGroupLookup::clear_type() {
  if (_internal_has_type()) {
    gettype_.type_ = 0;
    clear_has_gettype();
  }
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroupType NextHopGroupLookup::_internal_type() const {
  if (_internal_has_type()) {
    return static_cast< ::opi_api::network::cloud::v1alpha1::NextHopGroupType >(gettype_.type_);
  }
  return static_cast< ::opi_api::network::cloud::v1alpha1::NextHopGroupType >(0);
}
inline ::opi_api::network::cloud::v1alpha1::NextHopGroupType NextHopGroupLookup::type() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopGroupLookup.type)
  return _internal_type();
}
inline void NextHopGroupLookup::_internal_set_type(::opi_api::network::cloud::v1alpha1::NextHopGroupType value) {
  if (!_internal_has_type()) {
    clear_gettype();
    set_has_type();
  }
  gettype_.type_ = value;
}
inline void NextHopGroupLookup::set_type(::opi_api::network::cloud::v1alpha1::NextHopGroupType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opi_api.network.cloud.v1alpha1.NextHopGroupLookup.type)
}

// .opi_api.common.v1.ObjectKey id = 2;
inline bool NextHopGroupLookup::_internal_has_id() const {
  return gettype_case() == kId;
}
inline bool NextHopGroupLookup::has_id() const {
  return _internal_has_id();
}
inline void NextHopGroupLookup::set_has_id() {
  _oneof_case_[0] = kId;
}
inline ::opi_api::common::v1::ObjectKey* NextHopGroupLookup::release_id() {
  // @@protoc_insertion_point(field_release:opi_api.network.cloud.v1alpha1.NextHopGroupLookup.id)
  if (_internal_has_id()) {
    clear_has_gettype();
      ::opi_api::common::v1::ObjectKey* temp = gettype_.id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    gettype_.id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opi_api::common::v1::ObjectKey& NextHopGroupLookup::_internal_id() const {
  return _internal_has_id()
      ? *gettype_.id_
      : reinterpret_cast< ::opi_api::common::v1::ObjectKey&>(::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NextHopGroupLookup::id() const {
  // @@protoc_insertion_point(field_get:opi_api.network.cloud.v1alpha1.NextHopGroupLookup.id)
  return _internal_id();
}
inline ::opi_api::common::v1::ObjectKey* NextHopGroupLookup::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opi_api.network.cloud.v1alpha1.NextHopGroupLookup.id)
  if (_internal_has_id()) {
    clear_has_gettype();
    ::opi_api::common::v1::ObjectKey* temp = gettype_.id_;
    gettype_.id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NextHopGroupLookup::unsafe_arena_set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  clear_gettype();
  if (id) {
    set_has_id();
    gettype_.id_ = id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.network.cloud.v1alpha1.NextHopGroupLookup.id)
}
inline ::opi_api::common::v1::ObjectKey* NextHopGroupLookup::_internal_mutable_id() {
  if (!_internal_has_id()) {
    clear_gettype();
    set_has_id();
    gettype_.id_ = CreateMaybeMessage< ::opi_api::common::v1::ObjectKey >(GetArenaForAllocation());
  }
  return gettype_.id_;
}
inline ::opi_api::common::v1::ObjectKey* NextHopGroupLookup::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.network.cloud.v1alpha1.NextHopGroupLookup.id)
  return _msg;
}

inline bool NextHopGroupLookup::has_gettype() const {
  return gettype_case() != GETTYPE_NOT_SET;
}
inline void NextHopGroupLookup::clear_has_gettype() {
  _oneof_case_[0] = GETTYPE_NOT_SET;
}
inline NextHopGroupLookup::GettypeCase NextHopGroupLookup::gettype_case() const {
  return NextHopGroupLookup::GettypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::NextHopType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::NextHopType>() {
  return ::opi_api::network::cloud::v1alpha1::NextHopType_descriptor();
}
template <> struct is_proto_enum< ::opi_api::network::cloud::v1alpha1::NextHopGroupType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::network::cloud::v1alpha1::NextHopGroupType>() {
  return ::opi_api::network::cloud::v1alpha1::NextHopGroupType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nexthop_2eproto
