// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route.proto

#include "route.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
constexpr RouteTable::RouteTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , status_(nullptr){}
struct RouteTableDefaultTypeInternal {
  constexpr RouteTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteTableDefaultTypeInternal() {}
  union {
    RouteTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteTableDefaultTypeInternal _RouteTable_default_instance_;
constexpr RouteTableSpec::RouteTableSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routes_()
  , id_(nullptr)
  , af_(0)

  , priority_enable_(false){}
struct RouteTableSpecDefaultTypeInternal {
  constexpr RouteTableSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteTableSpecDefaultTypeInternal() {}
  union {
    RouteTableSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteTableSpecDefaultTypeInternal _RouteTableSpec_default_instance_;
constexpr RouteInfo::RouteInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , attrs_(nullptr){}
struct RouteInfoDefaultTypeInternal {
  constexpr RouteInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteInfoDefaultTypeInternal() {}
  union {
    RouteInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteInfoDefaultTypeInternal _RouteInfo_default_instance_;
constexpr RouteTableStatus::RouteTableStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vpc_count_(0)
  , subnet_count_(0)
  , vnic_count_(0)
  , pool_id_(0)
  , route_table_base_address_(uint64_t{0u})
  , hw_idx_(0)
  , hw_lpm_block_idx_(0)
  , hw_lpm_rewrite_block_idx_(0){}
struct RouteTableStatusDefaultTypeInternal {
  constexpr RouteTableStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteTableStatusDefaultTypeInternal() {}
  union {
    RouteTableStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteTableStatusDefaultTypeInternal _RouteTableStatus_default_instance_;
constexpr RouteAttrs::RouteAttrs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : overlay_mac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prefix_(nullptr)
  , encap_(nullptr)
  , route_class_(0)

  , class_priority_(0)
  , priority_(0)
  , tos_(0)
  , _oneof_case_{}{}
struct RouteAttrsDefaultTypeInternal {
  constexpr RouteAttrsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteAttrsDefaultTypeInternal() {}
  union {
    RouteAttrs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteAttrsDefaultTypeInternal _RouteAttrs_default_instance_;
constexpr VPCPeerNhInfo::VPCPeerNhInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vpc_id_(nullptr)
  , route_table_id_(nullptr){}
struct VPCPeerNhInfoDefaultTypeInternal {
  constexpr VPCPeerNhInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VPCPeerNhInfoDefaultTypeInternal() {}
  union {
    VPCPeerNhInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VPCPeerNhInfoDefaultTypeInternal _VPCPeerNhInfo_default_instance_;
constexpr OverlayNextHopIPInfo::OverlayNextHopIPInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nexthop_ip_()
  , nexthop_mac_()
  , vpc_id_(nullptr){}
struct OverlayNextHopIPInfoDefaultTypeInternal {
  constexpr OverlayNextHopIPInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OverlayNextHopIPInfoDefaultTypeInternal() {}
  union {
    OverlayNextHopIPInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OverlayNextHopIPInfoDefaultTypeInternal _OverlayNextHopIPInfo_default_instance_;
constexpr RouteId::RouteId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , route_table_id_(nullptr){}
struct RouteIdDefaultTypeInternal {
  constexpr RouteIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteIdDefaultTypeInternal() {}
  union {
    RouteId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteIdDefaultTypeInternal _RouteId_default_instance_;
constexpr Route::Route(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , status_(nullptr){}
struct RouteDefaultTypeInternal {
  constexpr RouteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteDefaultTypeInternal() {}
  union {
    Route _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteDefaultTypeInternal _Route_default_instance_;
constexpr RouteSpec::RouteSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , route_table_id_(nullptr)
  , attrs_(nullptr){}
struct RouteSpecDefaultTypeInternal {
  constexpr RouteSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteSpecDefaultTypeInternal() {}
  union {
    RouteSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteSpecDefaultTypeInternal _RouteSpec_default_instance_;
constexpr RouteStatus::RouteStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RouteStatusDefaultTypeInternal {
  constexpr RouteStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteStatusDefaultTypeInternal() {}
  union {
    RouteStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteStatusDefaultTypeInternal _RouteStatus_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_route_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_route_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_route_2eproto = nullptr;

const uint32_t TableStruct_route_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTable, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTable, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableSpec, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableSpec, af_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableSpec, priority_enable_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableSpec, routes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteInfo, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteInfo, attrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, vpc_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, subnet_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, vnic_count_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, pool_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, hw_idx_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, route_table_base_address_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, hw_lpm_block_idx_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteTableStatus, hw_lpm_rewrite_block_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, prefix_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, route_class_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, class_priority_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, priority_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, tos_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, encap_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, overlay_mac_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteAttrs, nh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo, vpc_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo, route_table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo, nexthop_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo, nexthop_mac_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo, vpc_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteId, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteId, route_table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Route, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Route, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteSpec, id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteSpec, route_table_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteSpec, attrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::RouteStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteTable)},
  { 8, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteTableSpec)},
  { 18, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteInfo)},
  { 26, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteTableStatus)},
  { 40, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteAttrs)},
  { 61, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo)},
  { 69, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo)},
  { 78, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteId)},
  { 86, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::Route)},
  { 94, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteSpec)},
  { 103, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::RouteStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_RouteTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_RouteTableSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_RouteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_RouteTableStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_RouteAttrs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_VPCPeerNhInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_OverlayNextHopIPInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_RouteId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_Route_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_RouteSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_RouteStatus_default_instance_),
};

const char descriptor_table_protodef_route_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013route.proto\022\036opi_api.network.cloud.v1a"
  "lpha1\032\020object_key.proto\032\022networktypes.pr"
  "oto\"\214\001\n\nRouteTable\022<\n\004spec\030\003 \001(\0132..opi_a"
  "pi.network.cloud.v1alpha1.RouteTableSpec"
  "\022@\n\006status\030\004 \001(\01320.opi_api.network.cloud"
  ".v1alpha1.RouteTableStatus\"\307\001\n\016RouteTabl"
  "eSpec\022(\n\002id\030\001 \001(\0132\034.opi_api.common.v1.Ob"
  "jectKey\0227\n\002af\030\002 \001(\0162+.opi_api.network.op"
  "inetcommon.v1alpha1.IpAf\022\027\n\017priority_ena"
  "ble\030\003 \001(\010\0229\n\006routes\030\004 \003(\0132).opi_api.netw"
  "ork.cloud.v1alpha1.RouteInfo\"p\n\tRouteInf"
  "o\022(\n\002id\030\001 \001(\0132\034.opi_api.common.v1.Object"
  "Key\0229\n\005attrs\030\002 \001(\0132*.opi_api.network.clo"
  "ud.v1alpha1.RouteAttrs\"\316\001\n\020RouteTableSta"
  "tus\022\021\n\tvpc_count\030\001 \001(\005\022\024\n\014subnet_count\030\002"
  " \001(\005\022\022\n\nvnic_count\030\003 \001(\005\022\017\n\007pool_id\030\004 \001("
  "\005\022\016\n\006hw_idx\030\005 \001(\005\022 \n\030route_table_base_ad"
  "dress\030\006 \001(\004\022\030\n\020hw_lpm_block_idx\030\007 \001(\005\022 \n"
  "\030hw_lpm_rewrite_block_idx\030\010 \001(\005\"\243\005\n\nRout"
  "eAttrs\022\?\n\006prefix\030\001 \001(\0132/.opi_api.network"
  ".opinetcommon.v1alpha1.IPPrefix\022\?\n\013route"
  "_class\030\002 \001(\0162*.opi_api.network.cloud.v1a"
  "lpha1.RouteClass\022\026\n\016class_priority\030\003 \001(\005"
  "\022\020\n\010priority\030\004 \001(\005\022R\n\022overlay_nh_ip_info"
  "\030\005 \001(\01324.opi_api.network.cloud.v1alpha1."
  "OverlayNextHopIPInfoH\000\0222\n\nnexthop_id\030\006 \001"
  "(\0132\034.opi_api.common.v1.ObjectKeyH\000\0223\n\013nh"
  "_group_id\030\007 \001(\0132\034.opi_api.common.v1.Obje"
  "ctKeyH\000\022D\n\013vpc_nh_info\030\010 \001(\0132-.opi_api.n"
  "etwork.cloud.v1alpha1.VPCPeerNhInfoH\000\0221\n"
  "\ttunnel_id\030\t \001(\0132\034.opi_api.common.v1.Obj"
  "ectKeyH\000\0226\n\016route_table_id\030\n \001(\0132\034.opi_a"
  "pi.common.v1.ObjectKeyH\000\022\026\n\014eval_mapping"
  "\030\013 \001(\010H\000\022\013\n\003tos\030\014 \001(\005\022;\n\005encap\030\r \001(\0132,.o"
  "pi_api.network.opinetcommon.v1alpha1.Enc"
  "ap\022\023\n\013overlay_mac\030\016 \001(\014B\004\n\002nh\"s\n\rVPCPeer"
  "NhInfo\022,\n\006vpc_id\030\001 \001(\0132\034.opi_api.common."
  "v1.ObjectKey\0224\n\016route_table_id\030\002 \001(\0132\034.o"
  "pi_api.common.v1.ObjectKey\"\237\001\n\024OverlayNe"
  "xtHopIPInfo\022D\n\nnexthop_ip\030\001 \003(\01320.opi_ap"
  "i.network.opinetcommon.v1alpha1.IPAddres"
  "s\022\023\n\013nexthop_mac\030\002 \003(\014\022,\n\006vpc_id\030\003 \001(\0132\034"
  ".opi_api.common.v1.ObjectKey\"i\n\007RouteId\022"
  "(\n\002id\030\001 \001(\0132\034.opi_api.common.v1.ObjectKe"
  "y\0224\n\016route_table_id\030\002 \001(\0132\034.opi_api.comm"
  "on.v1.ObjectKey\"}\n\005Route\0227\n\004spec\030\003 \001(\0132)"
  ".opi_api.network.cloud.v1alpha1.RouteSpe"
  "c\022;\n\006status\030\004 \001(\0132+.opi_api.network.clou"
  "d.v1alpha1.RouteStatus\"\246\001\n\tRouteSpec\022(\n\002"
  "id\030\001 \001(\0132\034.opi_api.common.v1.ObjectKey\0224"
  "\n\016route_table_id\030\002 \001(\0132\034.opi_api.common."
  "v1.ObjectKey\0229\n\005attrs\030\003 \001(\0132*.opi_api.ne"
  "twork.cloud.v1alpha1.RouteAttrs\"\r\n\013Route"
  "Status*q\n\nRouteClass\022\033\n\027ROUTE_CLASS_UNSP"
  "ECIFIED\020\000\022\030\n\024ROUTE_CLASS_INTERNET\020\001\022\027\n\023R"
  "OUTE_CLASS_SERVICE\020\002\022\023\n\017ROUTE_CLASS_VPC\020"
  "\003Bk\n\036opi_api.network.cloud.v1alpha1B\nRou"
  "teProtoP\001Z;github.com/opiproject/opi-api"
  "/network/cloud/v1alpha1/gen/gob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_route_2eproto_deps[2] = {
  &::descriptor_table_networktypes_2eproto,
  &::descriptor_table_object_5fkey_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_route_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_route_2eproto = {
  false, false, 2358, descriptor_table_protodef_route_2eproto, "route.proto", 
  &descriptor_table_route_2eproto_once, descriptor_table_route_2eproto_deps, 2, 11,
  schemas, file_default_instances, TableStruct_route_2eproto::offsets,
  file_level_metadata_route_2eproto, file_level_enum_descriptors_route_2eproto, file_level_service_descriptors_route_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_route_2eproto_getter() {
  return &descriptor_table_route_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_route_2eproto(&descriptor_table_route_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RouteClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_route_2eproto);
  return file_level_enum_descriptors_route_2eproto[0];
}
bool RouteClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RouteTable::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::RouteTableSpec& spec(const RouteTable* msg);
  static const ::opi_api::network::cloud::v1alpha1::RouteTableStatus& status(const RouteTable* msg);
};

const ::opi_api::network::cloud::v1alpha1::RouteTableSpec&
RouteTable::_Internal::spec(const RouteTable* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::RouteTableStatus&
RouteTable::_Internal::status(const RouteTable* msg) {
  return *msg->status_;
}
RouteTable::RouteTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteTable)
}
RouteTable::RouteTable(const RouteTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::RouteTableSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::cloud::v1alpha1::RouteTableStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteTable)
}

inline void RouteTable::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

RouteTable::~RouteTable() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.RouteTable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void RouteTable::ArenaDtor(void* object) {
  RouteTable* _this = reinterpret_cast< RouteTable* >(object);
  (void)_this;
}
void RouteTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteTable::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.RouteTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.RouteTableSpec spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.RouteTableStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.RouteTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.RouteTableSpec spec = 3;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.RouteTableStatus status = 4;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.RouteTable)
  return target;
}

size_t RouteTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.RouteTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.RouteTableSpec spec = 3;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.RouteTableStatus status = 4;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteTable::GetClassData() const { return &_class_data_; }

void RouteTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RouteTable *>(to)->MergeFrom(
      static_cast<const RouteTable &>(from));
}


void RouteTable::MergeFrom(const RouteTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.RouteTable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::RouteTableSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::cloud::v1alpha1::RouteTableStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteTable::CopyFrom(const RouteTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.RouteTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTable::IsInitialized() const {
  return true;
}

void RouteTable::InternalSwap(RouteTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteTable, status_)
      + sizeof(RouteTable::status_)
      - PROTOBUF_FIELD_OFFSET(RouteTable, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[0]);
}

// ===================================================================

class RouteTableSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const RouteTableSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
RouteTableSpec::_Internal::id(const RouteTableSpec* msg) {
  return *msg->id_;
}
void RouteTableSpec::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
RouteTableSpec::RouteTableSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  routes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteTableSpec)
}
RouteTableSpec::RouteTableSpec(const RouteTableSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&af_, &from.af_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_enable_) -
    reinterpret_cast<char*>(&af_)) + sizeof(priority_enable_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteTableSpec)
}

inline void RouteTableSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&priority_enable_) -
    reinterpret_cast<char*>(&id_)) + sizeof(priority_enable_));
}

RouteTableSpec::~RouteTableSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.RouteTableSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteTableSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void RouteTableSpec::ArenaDtor(void* object) {
  RouteTableSpec* _this = reinterpret_cast< RouteTableSpec* >(object);
  (void)_this;
}
void RouteTableSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteTableSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteTableSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.RouteTableSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&af_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_enable_) -
      reinterpret_cast<char*>(&af_)) + sizeof(priority_enable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTableSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IpAf af = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_af(static_cast<::opi_api::network::opinetcommon::v1alpha1::IpAf>(val));
        } else
          goto handle_unusual;
        continue;
      // bool priority_enable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          priority_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.network.cloud.v1alpha1.RouteInfo routes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteTableSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.RouteTableSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IpAf af = 2;
  if (this->_internal_af() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_af(), target);
  }

  // bool priority_enable = 3;
  if (this->_internal_priority_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_priority_enable(), target);
  }

  // repeated .opi_api.network.cloud.v1alpha1.RouteInfo routes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_routes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.RouteTableSpec)
  return target;
}

size_t RouteTableSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.RouteTableSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.cloud.v1alpha1.RouteInfo routes = 4;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IpAf af = 2;
  if (this->_internal_af() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_af());
  }

  // bool priority_enable = 3;
  if (this->_internal_priority_enable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteTableSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteTableSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteTableSpec::GetClassData() const { return &_class_data_; }

void RouteTableSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RouteTableSpec *>(to)->MergeFrom(
      static_cast<const RouteTableSpec &>(from));
}


void RouteTableSpec::MergeFrom(const RouteTableSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.RouteTableSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_af() != 0) {
    _internal_set_af(from._internal_af());
  }
  if (from._internal_priority_enable() != 0) {
    _internal_set_priority_enable(from._internal_priority_enable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteTableSpec::CopyFrom(const RouteTableSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.RouteTableSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTableSpec::IsInitialized() const {
  return true;
}

void RouteTableSpec::InternalSwap(RouteTableSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  routes_.InternalSwap(&other->routes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteTableSpec, priority_enable_)
      + sizeof(RouteTableSpec::priority_enable_)
      - PROTOBUF_FIELD_OFFSET(RouteTableSpec, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTableSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[1]);
}

// ===================================================================

class RouteInfo::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const RouteInfo* msg);
  static const ::opi_api::network::cloud::v1alpha1::RouteAttrs& attrs(const RouteInfo* msg);
};

const ::opi_api::common::v1::ObjectKey&
RouteInfo::_Internal::id(const RouteInfo* msg) {
  return *msg->id_;
}
const ::opi_api::network::cloud::v1alpha1::RouteAttrs&
RouteInfo::_Internal::attrs(const RouteInfo* msg) {
  return *msg->attrs_;
}
void RouteInfo::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
RouteInfo::RouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteInfo)
}
RouteInfo::RouteInfo(const RouteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_attrs()) {
    attrs_ = new ::opi_api::network::cloud::v1alpha1::RouteAttrs(*from.attrs_);
  } else {
    attrs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteInfo)
}

inline void RouteInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attrs_) -
    reinterpret_cast<char*>(&id_)) + sizeof(attrs_));
}

RouteInfo::~RouteInfo() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.RouteInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete attrs_;
}

void RouteInfo::ArenaDtor(void* object) {
  RouteInfo* _this = reinterpret_cast< RouteInfo* >(object);
  (void)_this;
}
void RouteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.RouteInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attrs_ != nullptr) {
    delete attrs_;
  }
  attrs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.RouteAttrs attrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attrs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.RouteInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.RouteAttrs attrs = 2;
  if (this->_internal_has_attrs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attrs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.RouteInfo)
  return target;
}

size_t RouteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.RouteInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .opi_api.network.cloud.v1alpha1.RouteAttrs attrs = 2;
  if (this->_internal_has_attrs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attrs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteInfo::GetClassData() const { return &_class_data_; }

void RouteInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RouteInfo *>(to)->MergeFrom(
      static_cast<const RouteInfo &>(from));
}


void RouteInfo::MergeFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.RouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_has_attrs()) {
    _internal_mutable_attrs()->::opi_api::network::cloud::v1alpha1::RouteAttrs::MergeFrom(from._internal_attrs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteInfo::CopyFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.RouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInfo::IsInitialized() const {
  return true;
}

void RouteInfo::InternalSwap(RouteInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteInfo, attrs_)
      + sizeof(RouteInfo::attrs_)
      - PROTOBUF_FIELD_OFFSET(RouteInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[2]);
}

// ===================================================================

class RouteTableStatus::_Internal {
 public:
};

RouteTableStatus::RouteTableStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteTableStatus)
}
RouteTableStatus::RouteTableStatus(const RouteTableStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vpc_count_, &from.vpc_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&hw_lpm_rewrite_block_idx_) -
    reinterpret_cast<char*>(&vpc_count_)) + sizeof(hw_lpm_rewrite_block_idx_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteTableStatus)
}

inline void RouteTableStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vpc_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hw_lpm_rewrite_block_idx_) -
    reinterpret_cast<char*>(&vpc_count_)) + sizeof(hw_lpm_rewrite_block_idx_));
}

RouteTableStatus::~RouteTableStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.RouteTableStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteTableStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RouteTableStatus::ArenaDtor(void* object) {
  RouteTableStatus* _this = reinterpret_cast< RouteTableStatus* >(object);
  (void)_this;
}
void RouteTableStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteTableStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteTableStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.RouteTableStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vpc_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hw_lpm_rewrite_block_idx_) -
      reinterpret_cast<char*>(&vpc_count_)) + sizeof(hw_lpm_rewrite_block_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteTableStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vpc_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          vpc_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 subnet_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          subnet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vnic_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          vnic_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pool_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          pool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hw_idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          hw_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 route_table_base_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          route_table_base_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hw_lpm_block_idx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          hw_lpm_block_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hw_lpm_rewrite_block_idx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          hw_lpm_rewrite_block_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteTableStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.RouteTableStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vpc_count = 1;
  if (this->_internal_vpc_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vpc_count(), target);
  }

  // int32 subnet_count = 2;
  if (this->_internal_subnet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_subnet_count(), target);
  }

  // int32 vnic_count = 3;
  if (this->_internal_vnic_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vnic_count(), target);
  }

  // int32 pool_id = 4;
  if (this->_internal_pool_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pool_id(), target);
  }

  // int32 hw_idx = 5;
  if (this->_internal_hw_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_hw_idx(), target);
  }

  // uint64 route_table_base_address = 6;
  if (this->_internal_route_table_base_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_route_table_base_address(), target);
  }

  // int32 hw_lpm_block_idx = 7;
  if (this->_internal_hw_lpm_block_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_hw_lpm_block_idx(), target);
  }

  // int32 hw_lpm_rewrite_block_idx = 8;
  if (this->_internal_hw_lpm_rewrite_block_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_hw_lpm_rewrite_block_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.RouteTableStatus)
  return target;
}

size_t RouteTableStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.RouteTableStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vpc_count = 1;
  if (this->_internal_vpc_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vpc_count());
  }

  // int32 subnet_count = 2;
  if (this->_internal_subnet_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_subnet_count());
  }

  // int32 vnic_count = 3;
  if (this->_internal_vnic_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vnic_count());
  }

  // int32 pool_id = 4;
  if (this->_internal_pool_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pool_id());
  }

  // uint64 route_table_base_address = 6;
  if (this->_internal_route_table_base_address() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_route_table_base_address());
  }

  // int32 hw_idx = 5;
  if (this->_internal_hw_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hw_idx());
  }

  // int32 hw_lpm_block_idx = 7;
  if (this->_internal_hw_lpm_block_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hw_lpm_block_idx());
  }

  // int32 hw_lpm_rewrite_block_idx = 8;
  if (this->_internal_hw_lpm_rewrite_block_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hw_lpm_rewrite_block_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteTableStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteTableStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteTableStatus::GetClassData() const { return &_class_data_; }

void RouteTableStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RouteTableStatus *>(to)->MergeFrom(
      static_cast<const RouteTableStatus &>(from));
}


void RouteTableStatus::MergeFrom(const RouteTableStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.RouteTableStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vpc_count() != 0) {
    _internal_set_vpc_count(from._internal_vpc_count());
  }
  if (from._internal_subnet_count() != 0) {
    _internal_set_subnet_count(from._internal_subnet_count());
  }
  if (from._internal_vnic_count() != 0) {
    _internal_set_vnic_count(from._internal_vnic_count());
  }
  if (from._internal_pool_id() != 0) {
    _internal_set_pool_id(from._internal_pool_id());
  }
  if (from._internal_route_table_base_address() != 0) {
    _internal_set_route_table_base_address(from._internal_route_table_base_address());
  }
  if (from._internal_hw_idx() != 0) {
    _internal_set_hw_idx(from._internal_hw_idx());
  }
  if (from._internal_hw_lpm_block_idx() != 0) {
    _internal_set_hw_lpm_block_idx(from._internal_hw_lpm_block_idx());
  }
  if (from._internal_hw_lpm_rewrite_block_idx() != 0) {
    _internal_set_hw_lpm_rewrite_block_idx(from._internal_hw_lpm_rewrite_block_idx());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteTableStatus::CopyFrom(const RouteTableStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.RouteTableStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTableStatus::IsInitialized() const {
  return true;
}

void RouteTableStatus::InternalSwap(RouteTableStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteTableStatus, hw_lpm_rewrite_block_idx_)
      + sizeof(RouteTableStatus::hw_lpm_rewrite_block_idx_)
      - PROTOBUF_FIELD_OFFSET(RouteTableStatus, vpc_count_)>(
          reinterpret_cast<char*>(&vpc_count_),
          reinterpret_cast<char*>(&other->vpc_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTableStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[3]);
}

// ===================================================================

class RouteAttrs::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix& prefix(const RouteAttrs* msg);
  static const ::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo& overlay_nh_ip_info(const RouteAttrs* msg);
  static const ::opi_api::common::v1::ObjectKey& nexthop_id(const RouteAttrs* msg);
  static const ::opi_api::common::v1::ObjectKey& nh_group_id(const RouteAttrs* msg);
  static const ::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo& vpc_nh_info(const RouteAttrs* msg);
  static const ::opi_api::common::v1::ObjectKey& tunnel_id(const RouteAttrs* msg);
  static const ::opi_api::common::v1::ObjectKey& route_table_id(const RouteAttrs* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::Encap& encap(const RouteAttrs* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::IPPrefix&
RouteAttrs::_Internal::prefix(const RouteAttrs* msg) {
  return *msg->prefix_;
}
const ::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo&
RouteAttrs::_Internal::overlay_nh_ip_info(const RouteAttrs* msg) {
  return *msg->nh_.overlay_nh_ip_info_;
}
const ::opi_api::common::v1::ObjectKey&
RouteAttrs::_Internal::nexthop_id(const RouteAttrs* msg) {
  return *msg->nh_.nexthop_id_;
}
const ::opi_api::common::v1::ObjectKey&
RouteAttrs::_Internal::nh_group_id(const RouteAttrs* msg) {
  return *msg->nh_.nh_group_id_;
}
const ::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo&
RouteAttrs::_Internal::vpc_nh_info(const RouteAttrs* msg) {
  return *msg->nh_.vpc_nh_info_;
}
const ::opi_api::common::v1::ObjectKey&
RouteAttrs::_Internal::tunnel_id(const RouteAttrs* msg) {
  return *msg->nh_.tunnel_id_;
}
const ::opi_api::common::v1::ObjectKey&
RouteAttrs::_Internal::route_table_id(const RouteAttrs* msg) {
  return *msg->nh_.route_table_id_;
}
const ::opi_api::network::opinetcommon::v1alpha1::Encap&
RouteAttrs::_Internal::encap(const RouteAttrs* msg) {
  return *msg->encap_;
}
void RouteAttrs::clear_prefix() {
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
}
void RouteAttrs::set_allocated_overlay_nh_ip_info(::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo* overlay_nh_ip_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nh();
  if (overlay_nh_ip_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo>::GetOwningArena(overlay_nh_ip_info);
    if (message_arena != submessage_arena) {
      overlay_nh_ip_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlay_nh_ip_info, submessage_arena);
    }
    set_has_overlay_nh_ip_info();
    nh_.overlay_nh_ip_info_ = overlay_nh_ip_info;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.RouteAttrs.overlay_nh_ip_info)
}
void RouteAttrs::set_allocated_nexthop_id(::opi_api::common::v1::ObjectKey* nexthop_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nh();
  if (nexthop_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nexthop_id));
    if (message_arena != submessage_arena) {
      nexthop_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nexthop_id, submessage_arena);
    }
    set_has_nexthop_id();
    nh_.nexthop_id_ = nexthop_id;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.RouteAttrs.nexthop_id)
}
void RouteAttrs::clear_nexthop_id() {
  if (_internal_has_nexthop_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete nh_.nexthop_id_;
    }
    clear_has_nh();
  }
}
void RouteAttrs::set_allocated_nh_group_id(::opi_api::common::v1::ObjectKey* nh_group_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nh();
  if (nh_group_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nh_group_id));
    if (message_arena != submessage_arena) {
      nh_group_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nh_group_id, submessage_arena);
    }
    set_has_nh_group_id();
    nh_.nh_group_id_ = nh_group_id;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.RouteAttrs.nh_group_id)
}
void RouteAttrs::clear_nh_group_id() {
  if (_internal_has_nh_group_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete nh_.nh_group_id_;
    }
    clear_has_nh();
  }
}
void RouteAttrs::set_allocated_vpc_nh_info(::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo* vpc_nh_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nh();
  if (vpc_nh_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo>::GetOwningArena(vpc_nh_info);
    if (message_arena != submessage_arena) {
      vpc_nh_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpc_nh_info, submessage_arena);
    }
    set_has_vpc_nh_info();
    nh_.vpc_nh_info_ = vpc_nh_info;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.RouteAttrs.vpc_nh_info)
}
void RouteAttrs::set_allocated_tunnel_id(::opi_api::common::v1::ObjectKey* tunnel_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nh();
  if (tunnel_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_id));
    if (message_arena != submessage_arena) {
      tunnel_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tunnel_id, submessage_arena);
    }
    set_has_tunnel_id();
    nh_.tunnel_id_ = tunnel_id;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.RouteAttrs.tunnel_id)
}
void RouteAttrs::clear_tunnel_id() {
  if (_internal_has_tunnel_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete nh_.tunnel_id_;
    }
    clear_has_nh();
  }
}
void RouteAttrs::set_allocated_route_table_id(::opi_api::common::v1::ObjectKey* route_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_nh();
  if (route_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_table_id));
    if (message_arena != submessage_arena) {
      route_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_table_id, submessage_arena);
    }
    set_has_route_table_id();
    nh_.route_table_id_ = route_table_id;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.RouteAttrs.route_table_id)
}
void RouteAttrs::clear_route_table_id() {
  if (_internal_has_route_table_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete nh_.route_table_id_;
    }
    clear_has_nh();
  }
}
void RouteAttrs::clear_encap() {
  if (GetArenaForAllocation() == nullptr && encap_ != nullptr) {
    delete encap_;
  }
  encap_ = nullptr;
}
RouteAttrs::RouteAttrs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteAttrs)
}
RouteAttrs::RouteAttrs(const RouteAttrs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  overlay_mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    overlay_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_overlay_mac().empty()) {
    overlay_mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_overlay_mac(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_prefix()) {
    prefix_ = new ::opi_api::network::opinetcommon::v1alpha1::IPPrefix(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  if (from._internal_has_encap()) {
    encap_ = new ::opi_api::network::opinetcommon::v1alpha1::Encap(*from.encap_);
  } else {
    encap_ = nullptr;
  }
  ::memcpy(&route_class_, &from.route_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&tos_) -
    reinterpret_cast<char*>(&route_class_)) + sizeof(tos_));
  clear_has_nh();
  switch (from.nh_case()) {
    case kOverlayNhIpInfo: {
      _internal_mutable_overlay_nh_ip_info()->::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo::MergeFrom(from._internal_overlay_nh_ip_info());
      break;
    }
    case kNexthopId: {
      _internal_mutable_nexthop_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_nexthop_id());
      break;
    }
    case kNhGroupId: {
      _internal_mutable_nh_group_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_nh_group_id());
      break;
    }
    case kVpcNhInfo: {
      _internal_mutable_vpc_nh_info()->::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo::MergeFrom(from._internal_vpc_nh_info());
      break;
    }
    case kTunnelId: {
      _internal_mutable_tunnel_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_tunnel_id());
      break;
    }
    case kRouteTableId: {
      _internal_mutable_route_table_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_route_table_id());
      break;
    }
    case kEvalMapping: {
      _internal_set_eval_mapping(from._internal_eval_mapping());
      break;
    }
    case NH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteAttrs)
}

inline void RouteAttrs::SharedCtor() {
overlay_mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  overlay_mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prefix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tos_) -
    reinterpret_cast<char*>(&prefix_)) + sizeof(tos_));
clear_has_nh();
}

RouteAttrs::~RouteAttrs() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.RouteAttrs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteAttrs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  overlay_mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete prefix_;
  if (this != internal_default_instance()) delete encap_;
  if (has_nh()) {
    clear_nh();
  }
}

void RouteAttrs::ArenaDtor(void* object) {
  RouteAttrs* _this = reinterpret_cast< RouteAttrs* >(object);
  (void)_this;
}
void RouteAttrs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteAttrs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteAttrs::clear_nh() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.RouteAttrs)
  switch (nh_case()) {
    case kOverlayNhIpInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete nh_.overlay_nh_ip_info_;
      }
      break;
    }
    case kNexthopId: {
      if (GetArenaForAllocation() == nullptr) {
        delete nh_.nexthop_id_;
      }
      break;
    }
    case kNhGroupId: {
      if (GetArenaForAllocation() == nullptr) {
        delete nh_.nh_group_id_;
      }
      break;
    }
    case kVpcNhInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete nh_.vpc_nh_info_;
      }
      break;
    }
    case kTunnelId: {
      if (GetArenaForAllocation() == nullptr) {
        delete nh_.tunnel_id_;
      }
      break;
    }
    case kRouteTableId: {
      if (GetArenaForAllocation() == nullptr) {
        delete nh_.route_table_id_;
      }
      break;
    }
    case kEvalMapping: {
      // No need to clear
      break;
    }
    case NH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NH_NOT_SET;
}


void RouteAttrs::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.RouteAttrs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overlay_mac_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && encap_ != nullptr) {
    delete encap_;
  }
  encap_ = nullptr;
  ::memset(&route_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tos_) -
      reinterpret_cast<char*>(&route_class_)) + sizeof(tos_));
  clear_nh();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteAttrs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.RouteClass route_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_route_class(static_cast<::opi_api::network::cloud::v1alpha1::RouteClass>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 class_priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          class_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo overlay_nh_ip_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_overlay_nh_ip_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey nexthop_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_nexthop_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey nh_group_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_nh_group_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.VPCPeerNhInfo vpc_nh_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpc_nh_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey tunnel_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tunnel_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey route_table_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool eval_mapping = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _internal_set_eval_mapping(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tos = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          tos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_encap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes overlay_mac = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_overlay_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteAttrs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.RouteAttrs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 1;
  if (this->_internal_has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prefix(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.RouteClass route_class = 2;
  if (this->_internal_route_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_route_class(), target);
  }

  // int32 class_priority = 3;
  if (this->_internal_class_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_class_priority(), target);
  }

  // int32 priority = 4;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_priority(), target);
  }

  // .opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo overlay_nh_ip_info = 5;
  if (_internal_has_overlay_nh_ip_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::overlay_nh_ip_info(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey nexthop_id = 6;
  if (_internal_has_nexthop_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::nexthop_id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey nh_group_id = 7;
  if (_internal_has_nh_group_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::nh_group_id(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.VPCPeerNhInfo vpc_nh_info = 8;
  if (_internal_has_vpc_nh_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::vpc_nh_info(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey tunnel_id = 9;
  if (_internal_has_tunnel_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::tunnel_id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey route_table_id = 10;
  if (_internal_has_route_table_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::route_table_id(this), target, stream);
  }

  // bool eval_mapping = 11;
  if (_internal_has_eval_mapping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_eval_mapping(), target);
  }

  // int32 tos = 12;
  if (this->_internal_tos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_tos(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 13;
  if (this->_internal_has_encap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::encap(this), target, stream);
  }

  // bytes overlay_mac = 14;
  if (!this->_internal_overlay_mac().empty()) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_overlay_mac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.RouteAttrs)
  return target;
}

size_t RouteAttrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.RouteAttrs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes overlay_mac = 14;
  if (!this->_internal_overlay_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_overlay_mac());
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPPrefix prefix = 1;
  if (this->_internal_has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 13;
  if (this->_internal_has_encap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encap_);
  }

  // .opi_api.network.cloud.v1alpha1.RouteClass route_class = 2;
  if (this->_internal_route_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_route_class());
  }

  // int32 class_priority = 3;
  if (this->_internal_class_priority() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_class_priority());
  }

  // int32 priority = 4;
  if (this->_internal_priority() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  // int32 tos = 12;
  if (this->_internal_tos() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tos());
  }

  switch (nh_case()) {
    // .opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo overlay_nh_ip_info = 5;
    case kOverlayNhIpInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nh_.overlay_nh_ip_info_);
      break;
    }
    // .opi_api.common.v1.ObjectKey nexthop_id = 6;
    case kNexthopId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nh_.nexthop_id_);
      break;
    }
    // .opi_api.common.v1.ObjectKey nh_group_id = 7;
    case kNhGroupId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nh_.nh_group_id_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.VPCPeerNhInfo vpc_nh_info = 8;
    case kVpcNhInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nh_.vpc_nh_info_);
      break;
    }
    // .opi_api.common.v1.ObjectKey tunnel_id = 9;
    case kTunnelId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nh_.tunnel_id_);
      break;
    }
    // .opi_api.common.v1.ObjectKey route_table_id = 10;
    case kRouteTableId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nh_.route_table_id_);
      break;
    }
    // bool eval_mapping = 11;
    case kEvalMapping: {
      total_size += 1 + 1;
      break;
    }
    case NH_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteAttrs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteAttrs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteAttrs::GetClassData() const { return &_class_data_; }

void RouteAttrs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RouteAttrs *>(to)->MergeFrom(
      static_cast<const RouteAttrs &>(from));
}


void RouteAttrs::MergeFrom(const RouteAttrs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.RouteAttrs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_overlay_mac().empty()) {
    _internal_set_overlay_mac(from._internal_overlay_mac());
  }
  if (from._internal_has_prefix()) {
    _internal_mutable_prefix()->::opi_api::network::opinetcommon::v1alpha1::IPPrefix::MergeFrom(from._internal_prefix());
  }
  if (from._internal_has_encap()) {
    _internal_mutable_encap()->::opi_api::network::opinetcommon::v1alpha1::Encap::MergeFrom(from._internal_encap());
  }
  if (from._internal_route_class() != 0) {
    _internal_set_route_class(from._internal_route_class());
  }
  if (from._internal_class_priority() != 0) {
    _internal_set_class_priority(from._internal_class_priority());
  }
  if (from._internal_priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from._internal_tos() != 0) {
    _internal_set_tos(from._internal_tos());
  }
  switch (from.nh_case()) {
    case kOverlayNhIpInfo: {
      _internal_mutable_overlay_nh_ip_info()->::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo::MergeFrom(from._internal_overlay_nh_ip_info());
      break;
    }
    case kNexthopId: {
      _internal_mutable_nexthop_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_nexthop_id());
      break;
    }
    case kNhGroupId: {
      _internal_mutable_nh_group_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_nh_group_id());
      break;
    }
    case kVpcNhInfo: {
      _internal_mutable_vpc_nh_info()->::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo::MergeFrom(from._internal_vpc_nh_info());
      break;
    }
    case kTunnelId: {
      _internal_mutable_tunnel_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_tunnel_id());
      break;
    }
    case kRouteTableId: {
      _internal_mutable_route_table_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_route_table_id());
      break;
    }
    case kEvalMapping: {
      _internal_set_eval_mapping(from._internal_eval_mapping());
      break;
    }
    case NH_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteAttrs::CopyFrom(const RouteAttrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.RouteAttrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteAttrs::IsInitialized() const {
  return true;
}

void RouteAttrs::InternalSwap(RouteAttrs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &overlay_mac_, lhs_arena,
      &other->overlay_mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteAttrs, tos_)
      + sizeof(RouteAttrs::tos_)
      - PROTOBUF_FIELD_OFFSET(RouteAttrs, prefix_)>(
          reinterpret_cast<char*>(&prefix_),
          reinterpret_cast<char*>(&other->prefix_));
  swap(nh_, other->nh_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteAttrs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[4]);
}

// ===================================================================

class VPCPeerNhInfo::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& vpc_id(const VPCPeerNhInfo* msg);
  static const ::opi_api::common::v1::ObjectKey& route_table_id(const VPCPeerNhInfo* msg);
};

const ::opi_api::common::v1::ObjectKey&
VPCPeerNhInfo::_Internal::vpc_id(const VPCPeerNhInfo* msg) {
  return *msg->vpc_id_;
}
const ::opi_api::common::v1::ObjectKey&
VPCPeerNhInfo::_Internal::route_table_id(const VPCPeerNhInfo* msg) {
  return *msg->route_table_id_;
}
void VPCPeerNhInfo::clear_vpc_id() {
  if (GetArenaForAllocation() == nullptr && vpc_id_ != nullptr) {
    delete vpc_id_;
  }
  vpc_id_ = nullptr;
}
void VPCPeerNhInfo::clear_route_table_id() {
  if (GetArenaForAllocation() == nullptr && route_table_id_ != nullptr) {
    delete route_table_id_;
  }
  route_table_id_ = nullptr;
}
VPCPeerNhInfo::VPCPeerNhInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
}
VPCPeerNhInfo::VPCPeerNhInfo(const VPCPeerNhInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vpc_id()) {
    vpc_id_ = new ::opi_api::common::v1::ObjectKey(*from.vpc_id_);
  } else {
    vpc_id_ = nullptr;
  }
  if (from._internal_has_route_table_id()) {
    route_table_id_ = new ::opi_api::common::v1::ObjectKey(*from.route_table_id_);
  } else {
    route_table_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
}

inline void VPCPeerNhInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vpc_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&route_table_id_) -
    reinterpret_cast<char*>(&vpc_id_)) + sizeof(route_table_id_));
}

VPCPeerNhInfo::~VPCPeerNhInfo() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VPCPeerNhInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vpc_id_;
  if (this != internal_default_instance()) delete route_table_id_;
}

void VPCPeerNhInfo::ArenaDtor(void* object) {
  VPCPeerNhInfo* _this = reinterpret_cast< VPCPeerNhInfo* >(object);
  (void)_this;
}
void VPCPeerNhInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VPCPeerNhInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VPCPeerNhInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && vpc_id_ != nullptr) {
    delete vpc_id_;
  }
  vpc_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && route_table_id_ != nullptr) {
    delete route_table_id_;
  }
  route_table_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VPCPeerNhInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey vpc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpc_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey route_table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VPCPeerNhInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey vpc_id = 1;
  if (this->_internal_has_vpc_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vpc_id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey route_table_id = 2;
  if (this->_internal_has_route_table_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::route_table_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
  return target;
}

size_t VPCPeerNhInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey vpc_id = 1;
  if (this->_internal_has_vpc_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vpc_id_);
  }

  // .opi_api.common.v1.ObjectKey route_table_id = 2;
  if (this->_internal_has_route_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_table_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VPCPeerNhInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VPCPeerNhInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VPCPeerNhInfo::GetClassData() const { return &_class_data_; }

void VPCPeerNhInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VPCPeerNhInfo *>(to)->MergeFrom(
      static_cast<const VPCPeerNhInfo &>(from));
}


void VPCPeerNhInfo::MergeFrom(const VPCPeerNhInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vpc_id()) {
    _internal_mutable_vpc_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_vpc_id());
  }
  if (from._internal_has_route_table_id()) {
    _internal_mutable_route_table_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_route_table_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VPCPeerNhInfo::CopyFrom(const VPCPeerNhInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.VPCPeerNhInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VPCPeerNhInfo::IsInitialized() const {
  return true;
}

void VPCPeerNhInfo::InternalSwap(VPCPeerNhInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VPCPeerNhInfo, route_table_id_)
      + sizeof(VPCPeerNhInfo::route_table_id_)
      - PROTOBUF_FIELD_OFFSET(VPCPeerNhInfo, vpc_id_)>(
          reinterpret_cast<char*>(&vpc_id_),
          reinterpret_cast<char*>(&other->vpc_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VPCPeerNhInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[5]);
}

// ===================================================================

class OverlayNextHopIPInfo::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& vpc_id(const OverlayNextHopIPInfo* msg);
};

const ::opi_api::common::v1::ObjectKey&
OverlayNextHopIPInfo::_Internal::vpc_id(const OverlayNextHopIPInfo* msg) {
  return *msg->vpc_id_;
}
void OverlayNextHopIPInfo::clear_nexthop_ip() {
  nexthop_ip_.Clear();
}
void OverlayNextHopIPInfo::clear_vpc_id() {
  if (GetArenaForAllocation() == nullptr && vpc_id_ != nullptr) {
    delete vpc_id_;
  }
  vpc_id_ = nullptr;
}
OverlayNextHopIPInfo::OverlayNextHopIPInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nexthop_ip_(arena),
  nexthop_mac_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
}
OverlayNextHopIPInfo::OverlayNextHopIPInfo(const OverlayNextHopIPInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nexthop_ip_(from.nexthop_ip_),
      nexthop_mac_(from.nexthop_mac_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vpc_id()) {
    vpc_id_ = new ::opi_api::common::v1::ObjectKey(*from.vpc_id_);
  } else {
    vpc_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
}

inline void OverlayNextHopIPInfo::SharedCtor() {
vpc_id_ = nullptr;
}

OverlayNextHopIPInfo::~OverlayNextHopIPInfo() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OverlayNextHopIPInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vpc_id_;
}

void OverlayNextHopIPInfo::ArenaDtor(void* object) {
  OverlayNextHopIPInfo* _this = reinterpret_cast< OverlayNextHopIPInfo* >(object);
  (void)_this;
}
void OverlayNextHopIPInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OverlayNextHopIPInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OverlayNextHopIPInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nexthop_ip_.Clear();
  nexthop_mac_.Clear();
  if (GetArenaForAllocation() == nullptr && vpc_id_ != nullptr) {
    delete vpc_id_;
  }
  vpc_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverlayNextHopIPInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.network.opinetcommon.v1alpha1.IPAddress nexthop_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nexthop_ip(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes nexthop_mac = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_nexthop_mac();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey vpc_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpc_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OverlayNextHopIPInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.network.opinetcommon.v1alpha1.IPAddress nexthop_ip = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nexthop_ip_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nexthop_ip(i), target, stream);
  }

  // repeated bytes nexthop_mac = 2;
  for (int i = 0, n = this->_internal_nexthop_mac_size(); i < n; i++) {
    const auto& s = this->_internal_nexthop_mac(i);
    target = stream->WriteBytes(2, s, target);
  }

  // .opi_api.common.v1.ObjectKey vpc_id = 3;
  if (this->_internal_has_vpc_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vpc_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
  return target;
}

size_t OverlayNextHopIPInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.opinetcommon.v1alpha1.IPAddress nexthop_ip = 1;
  total_size += 1UL * this->_internal_nexthop_ip_size();
  for (const auto& msg : this->nexthop_ip_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes nexthop_mac = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(nexthop_mac_.size());
  for (int i = 0, n = nexthop_mac_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      nexthop_mac_.Get(i));
  }

  // .opi_api.common.v1.ObjectKey vpc_id = 3;
  if (this->_internal_has_vpc_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vpc_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OverlayNextHopIPInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OverlayNextHopIPInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OverlayNextHopIPInfo::GetClassData() const { return &_class_data_; }

void OverlayNextHopIPInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OverlayNextHopIPInfo *>(to)->MergeFrom(
      static_cast<const OverlayNextHopIPInfo &>(from));
}


void OverlayNextHopIPInfo::MergeFrom(const OverlayNextHopIPInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nexthop_ip_.MergeFrom(from.nexthop_ip_);
  nexthop_mac_.MergeFrom(from.nexthop_mac_);
  if (from._internal_has_vpc_id()) {
    _internal_mutable_vpc_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_vpc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OverlayNextHopIPInfo::CopyFrom(const OverlayNextHopIPInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.OverlayNextHopIPInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlayNextHopIPInfo::IsInitialized() const {
  return true;
}

void OverlayNextHopIPInfo::InternalSwap(OverlayNextHopIPInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nexthop_ip_.InternalSwap(&other->nexthop_ip_);
  nexthop_mac_.InternalSwap(&other->nexthop_mac_);
  swap(vpc_id_, other->vpc_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverlayNextHopIPInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[6]);
}

// ===================================================================

class RouteId::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const RouteId* msg);
  static const ::opi_api::common::v1::ObjectKey& route_table_id(const RouteId* msg);
};

const ::opi_api::common::v1::ObjectKey&
RouteId::_Internal::id(const RouteId* msg) {
  return *msg->id_;
}
const ::opi_api::common::v1::ObjectKey&
RouteId::_Internal::route_table_id(const RouteId* msg) {
  return *msg->route_table_id_;
}
void RouteId::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void RouteId::clear_route_table_id() {
  if (GetArenaForAllocation() == nullptr && route_table_id_ != nullptr) {
    delete route_table_id_;
  }
  route_table_id_ = nullptr;
}
RouteId::RouteId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteId)
}
RouteId::RouteId(const RouteId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_route_table_id()) {
    route_table_id_ = new ::opi_api::common::v1::ObjectKey(*from.route_table_id_);
  } else {
    route_table_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteId)
}

inline void RouteId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&route_table_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(route_table_id_));
}

RouteId::~RouteId() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.RouteId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete route_table_id_;
}

void RouteId::ArenaDtor(void* object) {
  RouteId* _this = reinterpret_cast< RouteId* >(object);
  (void)_this;
}
void RouteId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteId::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.RouteId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && route_table_id_ != nullptr) {
    delete route_table_id_;
  }
  route_table_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey route_table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.RouteId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey route_table_id = 2;
  if (this->_internal_has_route_table_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::route_table_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.RouteId)
  return target;
}

size_t RouteId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.RouteId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .opi_api.common.v1.ObjectKey route_table_id = 2;
  if (this->_internal_has_route_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_table_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteId::GetClassData() const { return &_class_data_; }

void RouteId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RouteId *>(to)->MergeFrom(
      static_cast<const RouteId &>(from));
}


void RouteId::MergeFrom(const RouteId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.RouteId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_has_route_table_id()) {
    _internal_mutable_route_table_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_route_table_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteId::CopyFrom(const RouteId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.RouteId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteId::IsInitialized() const {
  return true;
}

void RouteId::InternalSwap(RouteId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteId, route_table_id_)
      + sizeof(RouteId::route_table_id_)
      - PROTOBUF_FIELD_OFFSET(RouteId, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[7]);
}

// ===================================================================

class Route::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::RouteSpec& spec(const Route* msg);
  static const ::opi_api::network::cloud::v1alpha1::RouteStatus& status(const Route* msg);
};

const ::opi_api::network::cloud::v1alpha1::RouteSpec&
Route::_Internal::spec(const Route* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::RouteStatus&
Route::_Internal::status(const Route* msg) {
  return *msg->status_;
}
Route::Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.Route)
}
Route::Route(const Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::RouteSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::cloud::v1alpha1::RouteStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.Route)
}

inline void Route::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.Route)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Route::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void Route::ArenaDtor(void* object) {
  Route* _this = reinterpret_cast< Route* >(object);
  (void)_this;
}
void Route::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.Route)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Route::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.RouteSpec spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.RouteStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Route::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.Route)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.RouteSpec spec = 3;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.RouteStatus status = 4;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.Route)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.RouteSpec spec = 3;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.RouteStatus status = 4;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Route::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Route::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Route::GetClassData() const { return &_class_data_; }

void Route::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Route *>(to)->MergeFrom(
      static_cast<const Route &>(from));
}


void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.Route)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::RouteSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::cloud::v1alpha1::RouteStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::InternalSwap(Route* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Route, status_)
      + sizeof(Route::status_)
      - PROTOBUF_FIELD_OFFSET(Route, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Route::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[8]);
}

// ===================================================================

class RouteSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const RouteSpec* msg);
  static const ::opi_api::common::v1::ObjectKey& route_table_id(const RouteSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::RouteAttrs& attrs(const RouteSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
RouteSpec::_Internal::id(const RouteSpec* msg) {
  return *msg->id_;
}
const ::opi_api::common::v1::ObjectKey&
RouteSpec::_Internal::route_table_id(const RouteSpec* msg) {
  return *msg->route_table_id_;
}
const ::opi_api::network::cloud::v1alpha1::RouteAttrs&
RouteSpec::_Internal::attrs(const RouteSpec* msg) {
  return *msg->attrs_;
}
void RouteSpec::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void RouteSpec::clear_route_table_id() {
  if (GetArenaForAllocation() == nullptr && route_table_id_ != nullptr) {
    delete route_table_id_;
  }
  route_table_id_ = nullptr;
}
RouteSpec::RouteSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteSpec)
}
RouteSpec::RouteSpec(const RouteSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_route_table_id()) {
    route_table_id_ = new ::opi_api::common::v1::ObjectKey(*from.route_table_id_);
  } else {
    route_table_id_ = nullptr;
  }
  if (from._internal_has_attrs()) {
    attrs_ = new ::opi_api::network::cloud::v1alpha1::RouteAttrs(*from.attrs_);
  } else {
    attrs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteSpec)
}

inline void RouteSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attrs_) -
    reinterpret_cast<char*>(&id_)) + sizeof(attrs_));
}

RouteSpec::~RouteSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.RouteSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete route_table_id_;
  if (this != internal_default_instance()) delete attrs_;
}

void RouteSpec::ArenaDtor(void* object) {
  RouteSpec* _this = reinterpret_cast< RouteSpec* >(object);
  (void)_this;
}
void RouteSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.RouteSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && route_table_id_ != nullptr) {
    delete route_table_id_;
  }
  route_table_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attrs_ != nullptr) {
    delete attrs_;
  }
  attrs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey route_table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.RouteAttrs attrs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attrs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.RouteSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey route_table_id = 2;
  if (this->_internal_has_route_table_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::route_table_id(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.RouteAttrs attrs = 3;
  if (this->_internal_has_attrs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::attrs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.RouteSpec)
  return target;
}

size_t RouteSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.RouteSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .opi_api.common.v1.ObjectKey route_table_id = 2;
  if (this->_internal_has_route_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_table_id_);
  }

  // .opi_api.network.cloud.v1alpha1.RouteAttrs attrs = 3;
  if (this->_internal_has_attrs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attrs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteSpec::GetClassData() const { return &_class_data_; }

void RouteSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RouteSpec *>(to)->MergeFrom(
      static_cast<const RouteSpec &>(from));
}


void RouteSpec::MergeFrom(const RouteSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.RouteSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_has_route_table_id()) {
    _internal_mutable_route_table_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_route_table_id());
  }
  if (from._internal_has_attrs()) {
    _internal_mutable_attrs()->::opi_api::network::cloud::v1alpha1::RouteAttrs::MergeFrom(from._internal_attrs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteSpec::CopyFrom(const RouteSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.RouteSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteSpec::IsInitialized() const {
  return true;
}

void RouteSpec::InternalSwap(RouteSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteSpec, attrs_)
      + sizeof(RouteSpec::attrs_)
      - PROTOBUF_FIELD_OFFSET(RouteSpec, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[9]);
}

// ===================================================================

class RouteStatus::_Internal {
 public:
};

RouteStatus::RouteStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.RouteStatus)
}
RouteStatus::RouteStatus(const RouteStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.RouteStatus)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteStatus::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RouteStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_route_2eproto_getter, &descriptor_table_route_2eproto_once,
      file_level_metadata_route_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteTable* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteTable >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteTableSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteTableSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteTableSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteInfo* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteTableStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteTableStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteTableStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteAttrs* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteAttrs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteAttrs >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::VPCPeerNhInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::OverlayNextHopIPInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteId* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteId >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::Route* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::Route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::Route >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::RouteStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::RouteStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::RouteStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
