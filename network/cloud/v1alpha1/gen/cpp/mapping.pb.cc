// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mapping.proto

#include "mapping.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
constexpr Mapping::Mapping(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , status_(nullptr){}
struct MappingDefaultTypeInternal {
  constexpr MappingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MappingDefaultTypeInternal() {}
  union {
    Mapping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MappingDefaultTypeInternal _Mapping_default_instance_;
constexpr MappingSpec::MappingSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , _tags_cached_byte_size_(0)
  , mac_addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , subnet_id_(nullptr)
  , encap_(nullptr)
  , public_ip_(nullptr)
  , type_(0)

  , _oneof_case_{}{}
struct MappingSpecDefaultTypeInternal {
  constexpr MappingSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MappingSpecDefaultTypeInternal() {}
  union {
    MappingSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MappingSpecDefaultTypeInternal _MappingSpec_default_instance_;
constexpr MappingStatus::MappingStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tunnel_ip_()
  , svc_port_map_hw_handle_(nullptr)
  , vnf_tunnel_hw_handle_(nullptr)
  , public_nat_index_(0)
  , private_nat_index_(0)
  , rewrite_index_(0){}
struct MappingStatusDefaultTypeInternal {
  constexpr MappingStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MappingStatusDefaultTypeInternal() {}
  union {
    MappingStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MappingStatusDefaultTypeInternal _MappingStatus_default_instance_;
constexpr L3MappingKey::L3MappingKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vpc_id_(nullptr)
  , ip_address_(nullptr){}
struct L3MappingKeyDefaultTypeInternal {
  constexpr L3MappingKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~L3MappingKeyDefaultTypeInternal() {}
  union {
    L3MappingKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT L3MappingKeyDefaultTypeInternal _L3MappingKey_default_instance_;
constexpr L2MappingKey::L2MappingKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mac_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subnet_id_(nullptr){}
struct L2MappingKeyDefaultTypeInternal {
  constexpr L2MappingKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~L2MappingKeyDefaultTypeInternal() {}
  union {
    L2MappingKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT L2MappingKeyDefaultTypeInternal _L2MappingKey_default_instance_;
constexpr MappingLookupFilter::MappingLookupFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : local_(false)
  , key_type_(0)

  , type_(0)

  , _oneof_case_{}{}
struct MappingLookupFilterDefaultTypeInternal {
  constexpr MappingLookupFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MappingLookupFilterDefaultTypeInternal() {}
  union {
    MappingLookupFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MappingLookupFilterDefaultTypeInternal _MappingLookupFilter_default_instance_;
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mapping_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mapping_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mapping_2eproto = nullptr;

const uint32_t TableStruct_mapping_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Mapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Mapping, spec_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::Mapping, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingSpec, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingSpec, id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingSpec, subnet_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingSpec, mac_addr_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingSpec, encap_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingSpec, public_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingSpec, tags_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingSpec, type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingSpec, mac_or_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingSpec, dstinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingStatus, public_nat_index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingStatus, private_nat_index_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingStatus, tunnel_ip_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingStatus, svc_port_map_hw_handle_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingStatus, vnf_tunnel_hw_handle_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingStatus, rewrite_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::L3MappingKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::L3MappingKey, vpc_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::L3MappingKey, ip_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::L2MappingKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::L2MappingKey, subnet_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::L2MappingKey, mac_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingLookupFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingLookupFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingLookupFilter, local_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingLookupFilter, key_type_),
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingLookupFilter, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opi_api::network::cloud::v1alpha1::MappingLookupFilter, ip_or_mac_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::Mapping)},
  { 8, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::MappingSpec)},
  { 28, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::MappingStatus)},
  { 40, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::L3MappingKey)},
  { 48, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::L2MappingKey)},
  { 56, -1, -1, sizeof(::opi_api::network::cloud::v1alpha1::MappingLookupFilter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_Mapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_MappingSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_MappingStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_L3MappingKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_L2MappingKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::network::cloud::v1alpha1::_MappingLookupFilter_default_instance_),
};

const char descriptor_table_protodef_mapping_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmapping.proto\022\036opi_api.network.cloud.v"
  "1alpha1\032\020object_key.proto\032\022networktypes."
  "proto\"\203\001\n\007Mapping\0229\n\004spec\030\001 \001(\0132+.opi_ap"
  "i.network.cloud.v1alpha1.MappingSpec\022=\n\006"
  "status\030\002 \001(\0132-.opi_api.network.cloud.v1a"
  "lpha1.MappingStatus\"\367\004\n\013MappingSpec\022(\n\002i"
  "d\030\001 \001(\0132\034.opi_api.common.v1.ObjectKey\022>\n"
  "\006ip_key\030\002 \001(\0132,.opi_api.network.cloud.v1"
  "alpha1.L3MappingKeyH\000\022\?\n\007mac_key\030\003 \001(\0132,"
  ".opi_api.network.cloud.v1alpha1.L2Mappin"
  "gKeyH\000\022/\n\tsubnet_id\030\004 \001(\0132\034.opi_api.comm"
  "on.v1.ObjectKey\022/\n\007vnic_id\030\005 \001(\0132\034.opi_a"
  "pi.common.v1.ObjectKeyH\001\0221\n\ttunnel_id\030\006 "
  "\001(\0132\034.opi_api.common.v1.ObjectKeyH\001\0223\n\013n"
  "h_group_id\030\007 \001(\0132\034.opi_api.common.v1.Obj"
  "ectKeyH\001\022\020\n\010mac_addr\030\010 \001(\014\022;\n\005encap\030\t \001("
  "\0132,.opi_api.network.opinetcommon.v1alpha"
  "1.Encap\022C\n\tpublic_ip\030\n \001(\01320.opi_api.net"
  "work.opinetcommon.v1alpha1.IPAddress\022\014\n\004"
  "tags\030\013 \003(\r\0229\n\004type\030\014 \001(\0162+.opi_api.netwo"
  "rk.cloud.v1alpha1.MappingTypeB\013\n\tmac_or_"
  "ipB\t\n\007dstinfo\"\300\002\n\rMappingStatus\022\030\n\020publi"
  "c_nat_index\030\001 \001(\005\022\031\n\021private_nat_index\030\002"
  " \001(\005\022C\n\ttunnel_ip\030\003 \003(\01320.opi_api.networ"
  "k.opinetcommon.v1alpha1.IPAddress\022O\n\026svc"
  "_port_map_hw_handle\030\004 \001(\0132/.opi_api.netw"
  "ork.opinetcommon.v1alpha1.HwHandle\022M\n\024vn"
  "f_tunnel_hw_handle\030\005 \001(\0132/.opi_api.netwo"
  "rk.opinetcommon.v1alpha1.HwHandle\022\025\n\rrew"
  "rite_index\030\006 \001(\005\"\202\001\n\014L3MappingKey\022,\n\006vpc"
  "_id\030\001 \001(\0132\034.opi_api.common.v1.ObjectKey\022"
  "D\n\nip_address\030\002 \001(\01320.opi_api.network.op"
  "inetcommon.v1alpha1.IPAddress\"T\n\014L2Mappi"
  "ngKey\022/\n\tsubnet_id\030\001 \001(\0132\034.opi_api.commo"
  "n.v1.ObjectKey\022\023\n\013mac_address\030\002 \001(\014\"\276\003\n\023"
  "MappingLookupFilter\022\r\n\005local\030\001 \001(\010\022@\n\010ke"
  "y_type\030\002 \001(\0162..opi_api.network.cloud.v1a"
  "lpha1.MappingKeyType\0229\n\004type\030\003 \001(\0162+.opi"
  "_api.network.cloud.v1alpha1.MappingType\022"
  ">\n\006ip_key\030\004 \001(\0132,.opi_api.network.cloud."
  "v1alpha1.L3MappingKeyH\000\022\?\n\007mac_key\030\005 \001(\013"
  "2,.opi_api.network.cloud.v1alpha1.L2Mapp"
  "ingKeyH\000\022F\n\nip_address\030\006 \001(\01320.opi_api.n"
  "etwork.opinetcommon.v1alpha1.IPAddressH\000"
  "\022\025\n\013mac_address\030\007 \001(\014H\000\022.\n\006vpc_id\030\010 \001(\0132"
  "\034.opi_api.common.v1.ObjectKeyH\000B\013\n\tip_or"
  "_mac*t\n\013MappingType\022\034\n\030MAPPING_TYPE_UNSP"
  "ECIFIED\020\000\022\024\n\020MAPPING_TYPE_VPC\020\001\022\030\n\024MAPPI"
  "NG_TYPE_SERVICE\020\002\022\027\n\023MAPPING_TYPE_LB_VIP"
  "\020\003*d\n\016MappingKeyType\022 \n\034MAPPING_KEY_TYPE"
  "_UNSPECIFIED\020\000\022\027\n\023MAPPING_KEY_TYPE_L2\020\001\022"
  "\027\n\023MAPPING_KEY_TYPE_L3\020\002Bm\n\036opi_api.netw"
  "ork.cloud.v1alpha1B\014MappingProtoP\001Z;gith"
  "ub.com/opiproject/opi-api/network/cloud/"
  "v1alpha1/gen/gob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mapping_2eproto_deps[2] = {
  &::descriptor_table_networktypes_2eproto,
  &::descriptor_table_object_5fkey_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mapping_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mapping_2eproto = {
  false, false, 2183, descriptor_table_protodef_mapping_2eproto, "mapping.proto", 
  &descriptor_table_mapping_2eproto_once, descriptor_table_mapping_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_mapping_2eproto::offsets,
  file_level_metadata_mapping_2eproto, file_level_enum_descriptors_mapping_2eproto, file_level_service_descriptors_mapping_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mapping_2eproto_getter() {
  return &descriptor_table_mapping_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mapping_2eproto(&descriptor_table_mapping_2eproto);
namespace opi_api {
namespace network {
namespace cloud {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MappingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mapping_2eproto);
  return file_level_enum_descriptors_mapping_2eproto[0];
}
bool MappingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MappingKeyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mapping_2eproto);
  return file_level_enum_descriptors_mapping_2eproto[1];
}
bool MappingKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Mapping::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::MappingSpec& spec(const Mapping* msg);
  static const ::opi_api::network::cloud::v1alpha1::MappingStatus& status(const Mapping* msg);
};

const ::opi_api::network::cloud::v1alpha1::MappingSpec&
Mapping::_Internal::spec(const Mapping* msg) {
  return *msg->spec_;
}
const ::opi_api::network::cloud::v1alpha1::MappingStatus&
Mapping::_Internal::status(const Mapping* msg) {
  return *msg->status_;
}
Mapping::Mapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.Mapping)
}
Mapping::Mapping(const Mapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::opi_api::network::cloud::v1alpha1::MappingSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::opi_api::network::cloud::v1alpha1::MappingStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.Mapping)
}

inline void Mapping::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(status_));
}

Mapping::~Mapping() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.Mapping)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Mapping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void Mapping::ArenaDtor(void* object) {
  Mapping* _this = reinterpret_cast< Mapping* >(object);
  (void)_this;
}
void Mapping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mapping::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.Mapping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.network.cloud.v1alpha1.MappingSpec spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.MappingStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mapping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.Mapping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.MappingSpec spec = 1;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spec(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.MappingStatus status = 2;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.Mapping)
  return target;
}

size_t Mapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.Mapping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.network.cloud.v1alpha1.MappingSpec spec = 1;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .opi_api.network.cloud.v1alpha1.MappingStatus status = 2;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mapping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Mapping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mapping::GetClassData() const { return &_class_data_; }

void Mapping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Mapping *>(to)->MergeFrom(
      static_cast<const Mapping &>(from));
}


void Mapping::MergeFrom(const Mapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.Mapping)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::opi_api::network::cloud::v1alpha1::MappingSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::opi_api::network::cloud::v1alpha1::MappingStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mapping::CopyFrom(const Mapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.Mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mapping::IsInitialized() const {
  return true;
}

void Mapping::InternalSwap(Mapping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mapping, status_)
      + sizeof(Mapping::status_)
      - PROTOBUF_FIELD_OFFSET(Mapping, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mapping::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mapping_2eproto_getter, &descriptor_table_mapping_2eproto_once,
      file_level_metadata_mapping_2eproto[0]);
}

// ===================================================================

class MappingSpec::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& id(const MappingSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::L3MappingKey& ip_key(const MappingSpec* msg);
  static const ::opi_api::network::cloud::v1alpha1::L2MappingKey& mac_key(const MappingSpec* msg);
  static const ::opi_api::common::v1::ObjectKey& subnet_id(const MappingSpec* msg);
  static const ::opi_api::common::v1::ObjectKey& vnic_id(const MappingSpec* msg);
  static const ::opi_api::common::v1::ObjectKey& tunnel_id(const MappingSpec* msg);
  static const ::opi_api::common::v1::ObjectKey& nh_group_id(const MappingSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::Encap& encap(const MappingSpec* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& public_ip(const MappingSpec* msg);
};

const ::opi_api::common::v1::ObjectKey&
MappingSpec::_Internal::id(const MappingSpec* msg) {
  return *msg->id_;
}
const ::opi_api::network::cloud::v1alpha1::L3MappingKey&
MappingSpec::_Internal::ip_key(const MappingSpec* msg) {
  return *msg->mac_or_ip_.ip_key_;
}
const ::opi_api::network::cloud::v1alpha1::L2MappingKey&
MappingSpec::_Internal::mac_key(const MappingSpec* msg) {
  return *msg->mac_or_ip_.mac_key_;
}
const ::opi_api::common::v1::ObjectKey&
MappingSpec::_Internal::subnet_id(const MappingSpec* msg) {
  return *msg->subnet_id_;
}
const ::opi_api::common::v1::ObjectKey&
MappingSpec::_Internal::vnic_id(const MappingSpec* msg) {
  return *msg->dstinfo_.vnic_id_;
}
const ::opi_api::common::v1::ObjectKey&
MappingSpec::_Internal::tunnel_id(const MappingSpec* msg) {
  return *msg->dstinfo_.tunnel_id_;
}
const ::opi_api::common::v1::ObjectKey&
MappingSpec::_Internal::nh_group_id(const MappingSpec* msg) {
  return *msg->dstinfo_.nh_group_id_;
}
const ::opi_api::network::opinetcommon::v1alpha1::Encap&
MappingSpec::_Internal::encap(const MappingSpec* msg) {
  return *msg->encap_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
MappingSpec::_Internal::public_ip(const MappingSpec* msg) {
  return *msg->public_ip_;
}
void MappingSpec::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void MappingSpec::set_allocated_ip_key(::opi_api::network::cloud::v1alpha1::L3MappingKey* ip_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_mac_or_ip();
  if (ip_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::L3MappingKey>::GetOwningArena(ip_key);
    if (message_arena != submessage_arena) {
      ip_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_key, submessage_arena);
    }
    set_has_ip_key();
    mac_or_ip_.ip_key_ = ip_key;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.MappingSpec.ip_key)
}
void MappingSpec::set_allocated_mac_key(::opi_api::network::cloud::v1alpha1::L2MappingKey* mac_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_mac_or_ip();
  if (mac_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::L2MappingKey>::GetOwningArena(mac_key);
    if (message_arena != submessage_arena) {
      mac_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mac_key, submessage_arena);
    }
    set_has_mac_key();
    mac_or_ip_.mac_key_ = mac_key;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.MappingSpec.mac_key)
}
void MappingSpec::clear_subnet_id() {
  if (GetArenaForAllocation() == nullptr && subnet_id_ != nullptr) {
    delete subnet_id_;
  }
  subnet_id_ = nullptr;
}
void MappingSpec::set_allocated_vnic_id(::opi_api::common::v1::ObjectKey* vnic_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_dstinfo();
  if (vnic_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vnic_id));
    if (message_arena != submessage_arena) {
      vnic_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vnic_id, submessage_arena);
    }
    set_has_vnic_id();
    dstinfo_.vnic_id_ = vnic_id;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.MappingSpec.vnic_id)
}
void MappingSpec::clear_vnic_id() {
  if (_internal_has_vnic_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete dstinfo_.vnic_id_;
    }
    clear_has_dstinfo();
  }
}
void MappingSpec::set_allocated_tunnel_id(::opi_api::common::v1::ObjectKey* tunnel_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_dstinfo();
  if (tunnel_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tunnel_id));
    if (message_arena != submessage_arena) {
      tunnel_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tunnel_id, submessage_arena);
    }
    set_has_tunnel_id();
    dstinfo_.tunnel_id_ = tunnel_id;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.MappingSpec.tunnel_id)
}
void MappingSpec::clear_tunnel_id() {
  if (_internal_has_tunnel_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete dstinfo_.tunnel_id_;
    }
    clear_has_dstinfo();
  }
}
void MappingSpec::set_allocated_nh_group_id(::opi_api::common::v1::ObjectKey* nh_group_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_dstinfo();
  if (nh_group_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nh_group_id));
    if (message_arena != submessage_arena) {
      nh_group_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nh_group_id, submessage_arena);
    }
    set_has_nh_group_id();
    dstinfo_.nh_group_id_ = nh_group_id;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.MappingSpec.nh_group_id)
}
void MappingSpec::clear_nh_group_id() {
  if (_internal_has_nh_group_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete dstinfo_.nh_group_id_;
    }
    clear_has_dstinfo();
  }
}
void MappingSpec::clear_encap() {
  if (GetArenaForAllocation() == nullptr && encap_ != nullptr) {
    delete encap_;
  }
  encap_ = nullptr;
}
void MappingSpec::clear_public_ip() {
  if (GetArenaForAllocation() == nullptr && public_ip_ != nullptr) {
    delete public_ip_;
  }
  public_ip_ = nullptr;
}
MappingSpec::MappingSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.MappingSpec)
}
MappingSpec::MappingSpec(const MappingSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mac_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_addr().empty()) {
    mac_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac_addr(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::opi_api::common::v1::ObjectKey(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_subnet_id()) {
    subnet_id_ = new ::opi_api::common::v1::ObjectKey(*from.subnet_id_);
  } else {
    subnet_id_ = nullptr;
  }
  if (from._internal_has_encap()) {
    encap_ = new ::opi_api::network::opinetcommon::v1alpha1::Encap(*from.encap_);
  } else {
    encap_ = nullptr;
  }
  if (from._internal_has_public_ip()) {
    public_ip_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.public_ip_);
  } else {
    public_ip_ = nullptr;
  }
  type_ = from.type_;
  clear_has_mac_or_ip();
  switch (from.mac_or_ip_case()) {
    case kIpKey: {
      _internal_mutable_ip_key()->::opi_api::network::cloud::v1alpha1::L3MappingKey::MergeFrom(from._internal_ip_key());
      break;
    }
    case kMacKey: {
      _internal_mutable_mac_key()->::opi_api::network::cloud::v1alpha1::L2MappingKey::MergeFrom(from._internal_mac_key());
      break;
    }
    case MAC_OR_IP_NOT_SET: {
      break;
    }
  }
  clear_has_dstinfo();
  switch (from.dstinfo_case()) {
    case kVnicId: {
      _internal_mutable_vnic_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_vnic_id());
      break;
    }
    case kTunnelId: {
      _internal_mutable_tunnel_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_tunnel_id());
      break;
    }
    case kNhGroupId: {
      _internal_mutable_nh_group_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_nh_group_id());
      break;
    }
    case DSTINFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.MappingSpec)
}

inline void MappingSpec::SharedCtor() {
mac_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mac_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
clear_has_mac_or_ip();
clear_has_dstinfo();
}

MappingSpec::~MappingSpec() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.MappingSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MappingSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mac_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete subnet_id_;
  if (this != internal_default_instance()) delete encap_;
  if (this != internal_default_instance()) delete public_ip_;
  if (has_mac_or_ip()) {
    clear_mac_or_ip();
  }
  if (has_dstinfo()) {
    clear_dstinfo();
  }
}

void MappingSpec::ArenaDtor(void* object) {
  MappingSpec* _this = reinterpret_cast< MappingSpec* >(object);
  (void)_this;
}
void MappingSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MappingSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MappingSpec::clear_mac_or_ip() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.MappingSpec)
  switch (mac_or_ip_case()) {
    case kIpKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete mac_or_ip_.ip_key_;
      }
      break;
    }
    case kMacKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete mac_or_ip_.mac_key_;
      }
      break;
    }
    case MAC_OR_IP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MAC_OR_IP_NOT_SET;
}

void MappingSpec::clear_dstinfo() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.MappingSpec)
  switch (dstinfo_case()) {
    case kVnicId: {
      if (GetArenaForAllocation() == nullptr) {
        delete dstinfo_.vnic_id_;
      }
      break;
    }
    case kTunnelId: {
      if (GetArenaForAllocation() == nullptr) {
        delete dstinfo_.tunnel_id_;
      }
      break;
    }
    case kNhGroupId: {
      if (GetArenaForAllocation() == nullptr) {
        delete dstinfo_.nh_group_id_;
      }
      break;
    }
    case DSTINFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = DSTINFO_NOT_SET;
}


void MappingSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.MappingSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  mac_addr_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && subnet_id_ != nullptr) {
    delete subnet_id_;
  }
  subnet_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && encap_ != nullptr) {
    delete encap_;
  }
  encap_ = nullptr;
  if (GetArenaForAllocation() == nullptr && public_ip_ != nullptr) {
    delete public_ip_;
  }
  public_ip_ = nullptr;
  type_ = 0;
  clear_mac_or_ip();
  clear_dstinfo();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MappingSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.L3MappingKey ip_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.L2MappingKey mac_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mac_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey subnet_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_subnet_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey vnic_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_vnic_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey tunnel_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tunnel_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey nh_group_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_nh_group_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mac_addr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_mac_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_encap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress public_ip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 tags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_tags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.MappingType type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::cloud::v1alpha1::MappingType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MappingSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.MappingSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.L3MappingKey ip_key = 2;
  if (_internal_has_ip_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ip_key(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.L2MappingKey mac_key = 3;
  if (_internal_has_mac_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mac_key(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey subnet_id = 4;
  if (this->_internal_has_subnet_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::subnet_id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey vnic_id = 5;
  if (_internal_has_vnic_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::vnic_id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey tunnel_id = 6;
  if (_internal_has_tunnel_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tunnel_id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey nh_group_id = 7;
  if (_internal_has_nh_group_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::nh_group_id(this), target, stream);
  }

  // bytes mac_addr = 8;
  if (!this->_internal_mac_addr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_mac_addr(), target);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 9;
  if (this->_internal_has_encap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::encap(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress public_ip = 10;
  if (this->_internal_has_public_ip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::public_ip(this), target, stream);
  }

  // repeated uint32 tags = 11;
  {
    int byte_size = _tags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_tags(), byte_size, target);
    }
  }

  // .opi_api.network.cloud.v1alpha1.MappingType type = 12;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.MappingSpec)
  return target;
}

size_t MappingSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.MappingSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 tags = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tags_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes mac_addr = 8;
  if (!this->_internal_mac_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac_addr());
  }

  // .opi_api.common.v1.ObjectKey id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .opi_api.common.v1.ObjectKey subnet_id = 4;
  if (this->_internal_has_subnet_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subnet_id_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.Encap encap = 9;
  if (this->_internal_has_encap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encap_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress public_ip = 10;
  if (this->_internal_has_public_ip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_ip_);
  }

  // .opi_api.network.cloud.v1alpha1.MappingType type = 12;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (mac_or_ip_case()) {
    // .opi_api.network.cloud.v1alpha1.L3MappingKey ip_key = 2;
    case kIpKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mac_or_ip_.ip_key_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.L2MappingKey mac_key = 3;
    case kMacKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mac_or_ip_.mac_key_);
      break;
    }
    case MAC_OR_IP_NOT_SET: {
      break;
    }
  }
  switch (dstinfo_case()) {
    // .opi_api.common.v1.ObjectKey vnic_id = 5;
    case kVnicId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dstinfo_.vnic_id_);
      break;
    }
    // .opi_api.common.v1.ObjectKey tunnel_id = 6;
    case kTunnelId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dstinfo_.tunnel_id_);
      break;
    }
    // .opi_api.common.v1.ObjectKey nh_group_id = 7;
    case kNhGroupId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dstinfo_.nh_group_id_);
      break;
    }
    case DSTINFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MappingSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MappingSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MappingSpec::GetClassData() const { return &_class_data_; }

void MappingSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MappingSpec *>(to)->MergeFrom(
      static_cast<const MappingSpec &>(from));
}


void MappingSpec::MergeFrom(const MappingSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.MappingSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (!from._internal_mac_addr().empty()) {
    _internal_set_mac_addr(from._internal_mac_addr());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_id());
  }
  if (from._internal_has_subnet_id()) {
    _internal_mutable_subnet_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_subnet_id());
  }
  if (from._internal_has_encap()) {
    _internal_mutable_encap()->::opi_api::network::opinetcommon::v1alpha1::Encap::MergeFrom(from._internal_encap());
  }
  if (from._internal_has_public_ip()) {
    _internal_mutable_public_ip()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_public_ip());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.mac_or_ip_case()) {
    case kIpKey: {
      _internal_mutable_ip_key()->::opi_api::network::cloud::v1alpha1::L3MappingKey::MergeFrom(from._internal_ip_key());
      break;
    }
    case kMacKey: {
      _internal_mutable_mac_key()->::opi_api::network::cloud::v1alpha1::L2MappingKey::MergeFrom(from._internal_mac_key());
      break;
    }
    case MAC_OR_IP_NOT_SET: {
      break;
    }
  }
  switch (from.dstinfo_case()) {
    case kVnicId: {
      _internal_mutable_vnic_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_vnic_id());
      break;
    }
    case kTunnelId: {
      _internal_mutable_tunnel_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_tunnel_id());
      break;
    }
    case kNhGroupId: {
      _internal_mutable_nh_group_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_nh_group_id());
      break;
    }
    case DSTINFO_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MappingSpec::CopyFrom(const MappingSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.MappingSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MappingSpec::IsInitialized() const {
  return true;
}

void MappingSpec::InternalSwap(MappingSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_addr_, lhs_arena,
      &other->mac_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MappingSpec, type_)
      + sizeof(MappingSpec::type_)
      - PROTOBUF_FIELD_OFFSET(MappingSpec, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(mac_or_ip_, other->mac_or_ip_);
  swap(dstinfo_, other->dstinfo_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MappingSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mapping_2eproto_getter, &descriptor_table_mapping_2eproto_once,
      file_level_metadata_mapping_2eproto[1]);
}

// ===================================================================

class MappingStatus::_Internal {
 public:
  static const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& svc_port_map_hw_handle(const MappingStatus* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::HwHandle& vnf_tunnel_hw_handle(const MappingStatus* msg);
};

const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&
MappingStatus::_Internal::svc_port_map_hw_handle(const MappingStatus* msg) {
  return *msg->svc_port_map_hw_handle_;
}
const ::opi_api::network::opinetcommon::v1alpha1::HwHandle&
MappingStatus::_Internal::vnf_tunnel_hw_handle(const MappingStatus* msg) {
  return *msg->vnf_tunnel_hw_handle_;
}
void MappingStatus::clear_tunnel_ip() {
  tunnel_ip_.Clear();
}
void MappingStatus::clear_svc_port_map_hw_handle() {
  if (GetArenaForAllocation() == nullptr && svc_port_map_hw_handle_ != nullptr) {
    delete svc_port_map_hw_handle_;
  }
  svc_port_map_hw_handle_ = nullptr;
}
void MappingStatus::clear_vnf_tunnel_hw_handle() {
  if (GetArenaForAllocation() == nullptr && vnf_tunnel_hw_handle_ != nullptr) {
    delete vnf_tunnel_hw_handle_;
  }
  vnf_tunnel_hw_handle_ = nullptr;
}
MappingStatus::MappingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tunnel_ip_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.MappingStatus)
}
MappingStatus::MappingStatus(const MappingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tunnel_ip_(from.tunnel_ip_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_svc_port_map_hw_handle()) {
    svc_port_map_hw_handle_ = new ::opi_api::network::opinetcommon::v1alpha1::HwHandle(*from.svc_port_map_hw_handle_);
  } else {
    svc_port_map_hw_handle_ = nullptr;
  }
  if (from._internal_has_vnf_tunnel_hw_handle()) {
    vnf_tunnel_hw_handle_ = new ::opi_api::network::opinetcommon::v1alpha1::HwHandle(*from.vnf_tunnel_hw_handle_);
  } else {
    vnf_tunnel_hw_handle_ = nullptr;
  }
  ::memcpy(&public_nat_index_, &from.public_nat_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&rewrite_index_) -
    reinterpret_cast<char*>(&public_nat_index_)) + sizeof(rewrite_index_));
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.MappingStatus)
}

inline void MappingStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&svc_port_map_hw_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rewrite_index_) -
    reinterpret_cast<char*>(&svc_port_map_hw_handle_)) + sizeof(rewrite_index_));
}

MappingStatus::~MappingStatus() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.MappingStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MappingStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete svc_port_map_hw_handle_;
  if (this != internal_default_instance()) delete vnf_tunnel_hw_handle_;
}

void MappingStatus::ArenaDtor(void* object) {
  MappingStatus* _this = reinterpret_cast< MappingStatus* >(object);
  (void)_this;
}
void MappingStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MappingStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MappingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.MappingStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tunnel_ip_.Clear();
  if (GetArenaForAllocation() == nullptr && svc_port_map_hw_handle_ != nullptr) {
    delete svc_port_map_hw_handle_;
  }
  svc_port_map_hw_handle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && vnf_tunnel_hw_handle_ != nullptr) {
    delete vnf_tunnel_hw_handle_;
  }
  vnf_tunnel_hw_handle_ = nullptr;
  ::memset(&public_nat_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rewrite_index_) -
      reinterpret_cast<char*>(&public_nat_index_)) + sizeof(rewrite_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MappingStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 public_nat_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          public_nat_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 private_nat_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          private_nat_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .opi_api.network.opinetcommon.v1alpha1.IPAddress tunnel_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tunnel_ip(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.HwHandle svc_port_map_hw_handle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_svc_port_map_hw_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.HwHandle vnf_tunnel_hw_handle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_vnf_tunnel_hw_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rewrite_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          rewrite_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MappingStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.MappingStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 public_nat_index = 1;
  if (this->_internal_public_nat_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_public_nat_index(), target);
  }

  // int32 private_nat_index = 2;
  if (this->_internal_private_nat_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_private_nat_index(), target);
  }

  // repeated .opi_api.network.opinetcommon.v1alpha1.IPAddress tunnel_ip = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tunnel_ip_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tunnel_ip(i), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle svc_port_map_hw_handle = 4;
  if (this->_internal_has_svc_port_map_hw_handle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::svc_port_map_hw_handle(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle vnf_tunnel_hw_handle = 5;
  if (this->_internal_has_vnf_tunnel_hw_handle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::vnf_tunnel_hw_handle(this), target, stream);
  }

  // int32 rewrite_index = 6;
  if (this->_internal_rewrite_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_rewrite_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.MappingStatus)
  return target;
}

size_t MappingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.MappingStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.network.opinetcommon.v1alpha1.IPAddress tunnel_ip = 3;
  total_size += 1UL * this->_internal_tunnel_ip_size();
  for (const auto& msg : this->tunnel_ip_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle svc_port_map_hw_handle = 4;
  if (this->_internal_has_svc_port_map_hw_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *svc_port_map_hw_handle_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.HwHandle vnf_tunnel_hw_handle = 5;
  if (this->_internal_has_vnf_tunnel_hw_handle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vnf_tunnel_hw_handle_);
  }

  // int32 public_nat_index = 1;
  if (this->_internal_public_nat_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_public_nat_index());
  }

  // int32 private_nat_index = 2;
  if (this->_internal_private_nat_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_private_nat_index());
  }

  // int32 rewrite_index = 6;
  if (this->_internal_rewrite_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_rewrite_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MappingStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MappingStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MappingStatus::GetClassData() const { return &_class_data_; }

void MappingStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MappingStatus *>(to)->MergeFrom(
      static_cast<const MappingStatus &>(from));
}


void MappingStatus::MergeFrom(const MappingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.MappingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tunnel_ip_.MergeFrom(from.tunnel_ip_);
  if (from._internal_has_svc_port_map_hw_handle()) {
    _internal_mutable_svc_port_map_hw_handle()->::opi_api::network::opinetcommon::v1alpha1::HwHandle::MergeFrom(from._internal_svc_port_map_hw_handle());
  }
  if (from._internal_has_vnf_tunnel_hw_handle()) {
    _internal_mutable_vnf_tunnel_hw_handle()->::opi_api::network::opinetcommon::v1alpha1::HwHandle::MergeFrom(from._internal_vnf_tunnel_hw_handle());
  }
  if (from._internal_public_nat_index() != 0) {
    _internal_set_public_nat_index(from._internal_public_nat_index());
  }
  if (from._internal_private_nat_index() != 0) {
    _internal_set_private_nat_index(from._internal_private_nat_index());
  }
  if (from._internal_rewrite_index() != 0) {
    _internal_set_rewrite_index(from._internal_rewrite_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MappingStatus::CopyFrom(const MappingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.MappingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MappingStatus::IsInitialized() const {
  return true;
}

void MappingStatus::InternalSwap(MappingStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tunnel_ip_.InternalSwap(&other->tunnel_ip_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MappingStatus, rewrite_index_)
      + sizeof(MappingStatus::rewrite_index_)
      - PROTOBUF_FIELD_OFFSET(MappingStatus, svc_port_map_hw_handle_)>(
          reinterpret_cast<char*>(&svc_port_map_hw_handle_),
          reinterpret_cast<char*>(&other->svc_port_map_hw_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MappingStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mapping_2eproto_getter, &descriptor_table_mapping_2eproto_once,
      file_level_metadata_mapping_2eproto[2]);
}

// ===================================================================

class L3MappingKey::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& vpc_id(const L3MappingKey* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& ip_address(const L3MappingKey* msg);
};

const ::opi_api::common::v1::ObjectKey&
L3MappingKey::_Internal::vpc_id(const L3MappingKey* msg) {
  return *msg->vpc_id_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
L3MappingKey::_Internal::ip_address(const L3MappingKey* msg) {
  return *msg->ip_address_;
}
void L3MappingKey::clear_vpc_id() {
  if (GetArenaForAllocation() == nullptr && vpc_id_ != nullptr) {
    delete vpc_id_;
  }
  vpc_id_ = nullptr;
}
void L3MappingKey::clear_ip_address() {
  if (GetArenaForAllocation() == nullptr && ip_address_ != nullptr) {
    delete ip_address_;
  }
  ip_address_ = nullptr;
}
L3MappingKey::L3MappingKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.L3MappingKey)
}
L3MappingKey::L3MappingKey(const L3MappingKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vpc_id()) {
    vpc_id_ = new ::opi_api::common::v1::ObjectKey(*from.vpc_id_);
  } else {
    vpc_id_ = nullptr;
  }
  if (from._internal_has_ip_address()) {
    ip_address_ = new ::opi_api::network::opinetcommon::v1alpha1::IPAddress(*from.ip_address_);
  } else {
    ip_address_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.L3MappingKey)
}

inline void L3MappingKey::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vpc_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ip_address_) -
    reinterpret_cast<char*>(&vpc_id_)) + sizeof(ip_address_));
}

L3MappingKey::~L3MappingKey() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.L3MappingKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void L3MappingKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vpc_id_;
  if (this != internal_default_instance()) delete ip_address_;
}

void L3MappingKey::ArenaDtor(void* object) {
  L3MappingKey* _this = reinterpret_cast< L3MappingKey* >(object);
  (void)_this;
}
void L3MappingKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void L3MappingKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void L3MappingKey::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.L3MappingKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && vpc_id_ != nullptr) {
    delete vpc_id_;
  }
  vpc_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ip_address_ != nullptr) {
    delete ip_address_;
  }
  ip_address_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* L3MappingKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey vpc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpc_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* L3MappingKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.L3MappingKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey vpc_id = 1;
  if (this->_internal_has_vpc_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vpc_id(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 2;
  if (this->_internal_has_ip_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ip_address(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.L3MappingKey)
  return target;
}

size_t L3MappingKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.L3MappingKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey vpc_id = 1;
  if (this->_internal_has_vpc_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vpc_id_);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 2;
  if (this->_internal_has_ip_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ip_address_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData L3MappingKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    L3MappingKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*L3MappingKey::GetClassData() const { return &_class_data_; }

void L3MappingKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<L3MappingKey *>(to)->MergeFrom(
      static_cast<const L3MappingKey &>(from));
}


void L3MappingKey::MergeFrom(const L3MappingKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.L3MappingKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vpc_id()) {
    _internal_mutable_vpc_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_vpc_id());
  }
  if (from._internal_has_ip_address()) {
    _internal_mutable_ip_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_ip_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void L3MappingKey::CopyFrom(const L3MappingKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.L3MappingKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L3MappingKey::IsInitialized() const {
  return true;
}

void L3MappingKey::InternalSwap(L3MappingKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(L3MappingKey, ip_address_)
      + sizeof(L3MappingKey::ip_address_)
      - PROTOBUF_FIELD_OFFSET(L3MappingKey, vpc_id_)>(
          reinterpret_cast<char*>(&vpc_id_),
          reinterpret_cast<char*>(&other->vpc_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata L3MappingKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mapping_2eproto_getter, &descriptor_table_mapping_2eproto_once,
      file_level_metadata_mapping_2eproto[3]);
}

// ===================================================================

class L2MappingKey::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& subnet_id(const L2MappingKey* msg);
};

const ::opi_api::common::v1::ObjectKey&
L2MappingKey::_Internal::subnet_id(const L2MappingKey* msg) {
  return *msg->subnet_id_;
}
void L2MappingKey::clear_subnet_id() {
  if (GetArenaForAllocation() == nullptr && subnet_id_ != nullptr) {
    delete subnet_id_;
  }
  subnet_id_ = nullptr;
}
L2MappingKey::L2MappingKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.L2MappingKey)
}
L2MappingKey::L2MappingKey(const L2MappingKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_subnet_id()) {
    subnet_id_ = new ::opi_api::common::v1::ObjectKey(*from.subnet_id_);
  } else {
    subnet_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.L2MappingKey)
}

inline void L2MappingKey::SharedCtor() {
mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
subnet_id_ = nullptr;
}

L2MappingKey::~L2MappingKey() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.L2MappingKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void L2MappingKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete subnet_id_;
}

void L2MappingKey::ArenaDtor(void* object) {
  L2MappingKey* _this = reinterpret_cast< L2MappingKey* >(object);
  (void)_this;
}
void L2MappingKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void L2MappingKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void L2MappingKey::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.L2MappingKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && subnet_id_ != nullptr) {
    delete subnet_id_;
  }
  subnet_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* L2MappingKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey subnet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subnet_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mac_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* L2MappingKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.L2MappingKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey subnet_id = 1;
  if (this->_internal_has_subnet_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::subnet_id(this), target, stream);
  }

  // bytes mac_address = 2;
  if (!this->_internal_mac_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_mac_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.L2MappingKey)
  return target;
}

size_t L2MappingKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.L2MappingKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes mac_address = 2;
  if (!this->_internal_mac_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac_address());
  }

  // .opi_api.common.v1.ObjectKey subnet_id = 1;
  if (this->_internal_has_subnet_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subnet_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData L2MappingKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    L2MappingKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*L2MappingKey::GetClassData() const { return &_class_data_; }

void L2MappingKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<L2MappingKey *>(to)->MergeFrom(
      static_cast<const L2MappingKey &>(from));
}


void L2MappingKey::MergeFrom(const L2MappingKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.L2MappingKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mac_address().empty()) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (from._internal_has_subnet_id()) {
    _internal_mutable_subnet_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_subnet_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void L2MappingKey::CopyFrom(const L2MappingKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.L2MappingKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2MappingKey::IsInitialized() const {
  return true;
}

void L2MappingKey::InternalSwap(L2MappingKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_address_, lhs_arena,
      &other->mac_address_, rhs_arena
  );
  swap(subnet_id_, other->subnet_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata L2MappingKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mapping_2eproto_getter, &descriptor_table_mapping_2eproto_once,
      file_level_metadata_mapping_2eproto[4]);
}

// ===================================================================

class MappingLookupFilter::_Internal {
 public:
  static const ::opi_api::network::cloud::v1alpha1::L3MappingKey& ip_key(const MappingLookupFilter* msg);
  static const ::opi_api::network::cloud::v1alpha1::L2MappingKey& mac_key(const MappingLookupFilter* msg);
  static const ::opi_api::network::opinetcommon::v1alpha1::IPAddress& ip_address(const MappingLookupFilter* msg);
  static const ::opi_api::common::v1::ObjectKey& vpc_id(const MappingLookupFilter* msg);
};

const ::opi_api::network::cloud::v1alpha1::L3MappingKey&
MappingLookupFilter::_Internal::ip_key(const MappingLookupFilter* msg) {
  return *msg->ip_or_mac_.ip_key_;
}
const ::opi_api::network::cloud::v1alpha1::L2MappingKey&
MappingLookupFilter::_Internal::mac_key(const MappingLookupFilter* msg) {
  return *msg->ip_or_mac_.mac_key_;
}
const ::opi_api::network::opinetcommon::v1alpha1::IPAddress&
MappingLookupFilter::_Internal::ip_address(const MappingLookupFilter* msg) {
  return *msg->ip_or_mac_.ip_address_;
}
const ::opi_api::common::v1::ObjectKey&
MappingLookupFilter::_Internal::vpc_id(const MappingLookupFilter* msg) {
  return *msg->ip_or_mac_.vpc_id_;
}
void MappingLookupFilter::set_allocated_ip_key(::opi_api::network::cloud::v1alpha1::L3MappingKey* ip_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ip_or_mac();
  if (ip_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::L3MappingKey>::GetOwningArena(ip_key);
    if (message_arena != submessage_arena) {
      ip_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_key, submessage_arena);
    }
    set_has_ip_key();
    ip_or_mac_.ip_key_ = ip_key;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.MappingLookupFilter.ip_key)
}
void MappingLookupFilter::set_allocated_mac_key(::opi_api::network::cloud::v1alpha1::L2MappingKey* mac_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ip_or_mac();
  if (mac_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::network::cloud::v1alpha1::L2MappingKey>::GetOwningArena(mac_key);
    if (message_arena != submessage_arena) {
      mac_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mac_key, submessage_arena);
    }
    set_has_mac_key();
    ip_or_mac_.mac_key_ = mac_key;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.MappingLookupFilter.mac_key)
}
void MappingLookupFilter::set_allocated_ip_address(::opi_api::network::opinetcommon::v1alpha1::IPAddress* ip_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ip_or_mac();
  if (ip_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_address));
    if (message_arena != submessage_arena) {
      ip_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_address, submessage_arena);
    }
    set_has_ip_address();
    ip_or_mac_.ip_address_ = ip_address;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.MappingLookupFilter.ip_address)
}
void MappingLookupFilter::clear_ip_address() {
  if (_internal_has_ip_address()) {
    if (GetArenaForAllocation() == nullptr) {
      delete ip_or_mac_.ip_address_;
    }
    clear_has_ip_or_mac();
  }
}
void MappingLookupFilter::set_allocated_vpc_id(::opi_api::common::v1::ObjectKey* vpc_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ip_or_mac();
  if (vpc_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpc_id));
    if (message_arena != submessage_arena) {
      vpc_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpc_id, submessage_arena);
    }
    set_has_vpc_id();
    ip_or_mac_.vpc_id_ = vpc_id;
  }
  // @@protoc_insertion_point(field_set_allocated:opi_api.network.cloud.v1alpha1.MappingLookupFilter.vpc_id)
}
void MappingLookupFilter::clear_vpc_id() {
  if (_internal_has_vpc_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete ip_or_mac_.vpc_id_;
    }
    clear_has_ip_or_mac();
  }
}
MappingLookupFilter::MappingLookupFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.network.cloud.v1alpha1.MappingLookupFilter)
}
MappingLookupFilter::MappingLookupFilter(const MappingLookupFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&local_, &from.local_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&local_)) + sizeof(type_));
  clear_has_ip_or_mac();
  switch (from.ip_or_mac_case()) {
    case kIpKey: {
      _internal_mutable_ip_key()->::opi_api::network::cloud::v1alpha1::L3MappingKey::MergeFrom(from._internal_ip_key());
      break;
    }
    case kMacKey: {
      _internal_mutable_mac_key()->::opi_api::network::cloud::v1alpha1::L2MappingKey::MergeFrom(from._internal_mac_key());
      break;
    }
    case kIpAddress: {
      _internal_mutable_ip_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_ip_address());
      break;
    }
    case kMacAddress: {
      _internal_set_mac_address(from._internal_mac_address());
      break;
    }
    case kVpcId: {
      _internal_mutable_vpc_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_vpc_id());
      break;
    }
    case IP_OR_MAC_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.network.cloud.v1alpha1.MappingLookupFilter)
}

inline void MappingLookupFilter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&local_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&local_)) + sizeof(type_));
clear_has_ip_or_mac();
}

MappingLookupFilter::~MappingLookupFilter() {
  // @@protoc_insertion_point(destructor:opi_api.network.cloud.v1alpha1.MappingLookupFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MappingLookupFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_ip_or_mac()) {
    clear_ip_or_mac();
  }
}

void MappingLookupFilter::ArenaDtor(void* object) {
  MappingLookupFilter* _this = reinterpret_cast< MappingLookupFilter* >(object);
  (void)_this;
}
void MappingLookupFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MappingLookupFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MappingLookupFilter::clear_ip_or_mac() {
// @@protoc_insertion_point(one_of_clear_start:opi_api.network.cloud.v1alpha1.MappingLookupFilter)
  switch (ip_or_mac_case()) {
    case kIpKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete ip_or_mac_.ip_key_;
      }
      break;
    }
    case kMacKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete ip_or_mac_.mac_key_;
      }
      break;
    }
    case kIpAddress: {
      if (GetArenaForAllocation() == nullptr) {
        delete ip_or_mac_.ip_address_;
      }
      break;
    }
    case kMacAddress: {
      ip_or_mac_.mac_address_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kVpcId: {
      if (GetArenaForAllocation() == nullptr) {
        delete ip_or_mac_.vpc_id_;
      }
      break;
    }
    case IP_OR_MAC_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IP_OR_MAC_NOT_SET;
}


void MappingLookupFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.network.cloud.v1alpha1.MappingLookupFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&local_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&local_)) + sizeof(type_));
  clear_ip_or_mac();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MappingLookupFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool local = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          local_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.MappingKeyType key_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_key_type(static_cast<::opi_api::network::cloud::v1alpha1::MappingKeyType>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.MappingType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opi_api::network::cloud::v1alpha1::MappingType>(val));
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.L3MappingKey ip_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.cloud.v1alpha1.L2MappingKey mac_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mac_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mac_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey vpc_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpc_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MappingLookupFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.network.cloud.v1alpha1.MappingLookupFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool local = 1;
  if (this->_internal_local() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_local(), target);
  }

  // .opi_api.network.cloud.v1alpha1.MappingKeyType key_type = 2;
  if (this->_internal_key_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_key_type(), target);
  }

  // .opi_api.network.cloud.v1alpha1.MappingType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .opi_api.network.cloud.v1alpha1.L3MappingKey ip_key = 4;
  if (_internal_has_ip_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ip_key(this), target, stream);
  }

  // .opi_api.network.cloud.v1alpha1.L2MappingKey mac_key = 5;
  if (_internal_has_mac_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::mac_key(this), target, stream);
  }

  // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 6;
  if (_internal_has_ip_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ip_address(this), target, stream);
  }

  // bytes mac_address = 7;
  if (_internal_has_mac_address()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_mac_address(), target);
  }

  // .opi_api.common.v1.ObjectKey vpc_id = 8;
  if (_internal_has_vpc_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::vpc_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.network.cloud.v1alpha1.MappingLookupFilter)
  return target;
}

size_t MappingLookupFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.network.cloud.v1alpha1.MappingLookupFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool local = 1;
  if (this->_internal_local() != 0) {
    total_size += 1 + 1;
  }

  // .opi_api.network.cloud.v1alpha1.MappingKeyType key_type = 2;
  if (this->_internal_key_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_key_type());
  }

  // .opi_api.network.cloud.v1alpha1.MappingType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (ip_or_mac_case()) {
    // .opi_api.network.cloud.v1alpha1.L3MappingKey ip_key = 4;
    case kIpKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip_or_mac_.ip_key_);
      break;
    }
    // .opi_api.network.cloud.v1alpha1.L2MappingKey mac_key = 5;
    case kMacKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip_or_mac_.mac_key_);
      break;
    }
    // .opi_api.network.opinetcommon.v1alpha1.IPAddress ip_address = 6;
    case kIpAddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip_or_mac_.ip_address_);
      break;
    }
    // bytes mac_address = 7;
    case kMacAddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mac_address());
      break;
    }
    // .opi_api.common.v1.ObjectKey vpc_id = 8;
    case kVpcId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ip_or_mac_.vpc_id_);
      break;
    }
    case IP_OR_MAC_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MappingLookupFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MappingLookupFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MappingLookupFilter::GetClassData() const { return &_class_data_; }

void MappingLookupFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MappingLookupFilter *>(to)->MergeFrom(
      static_cast<const MappingLookupFilter &>(from));
}


void MappingLookupFilter::MergeFrom(const MappingLookupFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.network.cloud.v1alpha1.MappingLookupFilter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_local() != 0) {
    _internal_set_local(from._internal_local());
  }
  if (from._internal_key_type() != 0) {
    _internal_set_key_type(from._internal_key_type());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.ip_or_mac_case()) {
    case kIpKey: {
      _internal_mutable_ip_key()->::opi_api::network::cloud::v1alpha1::L3MappingKey::MergeFrom(from._internal_ip_key());
      break;
    }
    case kMacKey: {
      _internal_mutable_mac_key()->::opi_api::network::cloud::v1alpha1::L2MappingKey::MergeFrom(from._internal_mac_key());
      break;
    }
    case kIpAddress: {
      _internal_mutable_ip_address()->::opi_api::network::opinetcommon::v1alpha1::IPAddress::MergeFrom(from._internal_ip_address());
      break;
    }
    case kMacAddress: {
      _internal_set_mac_address(from._internal_mac_address());
      break;
    }
    case kVpcId: {
      _internal_mutable_vpc_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_vpc_id());
      break;
    }
    case IP_OR_MAC_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MappingLookupFilter::CopyFrom(const MappingLookupFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.network.cloud.v1alpha1.MappingLookupFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MappingLookupFilter::IsInitialized() const {
  return true;
}

void MappingLookupFilter::InternalSwap(MappingLookupFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MappingLookupFilter, type_)
      + sizeof(MappingLookupFilter::type_)
      - PROTOBUF_FIELD_OFFSET(MappingLookupFilter, local_)>(
          reinterpret_cast<char*>(&local_),
          reinterpret_cast<char*>(&other->local_));
  swap(ip_or_mac_, other->ip_or_mac_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MappingLookupFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mapping_2eproto_getter, &descriptor_table_mapping_2eproto_once,
      file_level_metadata_mapping_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace cloud
}  // namespace network
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::Mapping* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::Mapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::Mapping >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::MappingSpec* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::MappingSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::MappingSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::MappingStatus* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::MappingStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::MappingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::L3MappingKey* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::L3MappingKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::L3MappingKey >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::L2MappingKey* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::L2MappingKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::L2MappingKey >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::network::cloud::v1alpha1::MappingLookupFilter* Arena::CreateMaybeMessage< ::opi_api::network::cloud::v1alpha1::MappingLookupFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::network::cloud::v1alpha1::MappingLookupFilter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
