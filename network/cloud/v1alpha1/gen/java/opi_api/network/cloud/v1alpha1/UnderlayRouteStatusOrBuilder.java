// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: underlayroute.proto

package opi_api.network.cloud.v1alpha1;

public interface UnderlayRouteStatusOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.network.cloud.v1alpha1.UnderlayRouteStatus)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * route table id this route belongs to
   * </pre>
   *
   * <code>int32 route_table_id = 1;</code>
   * @return The routeTableId.
   */
  int getRouteTableId();

  /**
   * <pre>
   * destination address
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;</code>
   * @return Whether the destPrefix field is set.
   */
  boolean hasDestPrefix();
  /**
   * <pre>
   * destination address
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;</code>
   * @return The destPrefix.
   */
  opi_api.network.opinetcommon.v1alpha1.IPPrefix getDestPrefix();
  /**
   * <pre>
   * destination address
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPPrefix dest_prefix = 2;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.IPPrefixOrBuilder getDestPrefixOrBuilder();

  /**
   * <pre>
   * next-hop address
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;</code>
   * @return Whether the nextHopAddress field is set.
   */
  boolean hasNextHopAddress();
  /**
   * <pre>
   * next-hop address
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;</code>
   * @return The nextHopAddress.
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddress getNextHopAddress();
  /**
   * <pre>
   * next-hop address
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress next_hop_address = 3;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddressOrBuilder getNextHopAddressOrBuilder();

  /**
   * <pre>
   * interface index, if the next-hop is an interface
   * </pre>
   *
   * <code>int32 if_index = 5;</code>
   * @return The ifIndex.
   */
  int getIfIndex();

  /**
   * <pre>
   * type of route
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.RouteType type = 6;</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * type of route
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.RouteType type = 6;</code>
   * @return The type.
   */
  opi_api.network.opinetcommon.v1alpha1.RouteType getType();

  /**
   * <pre>
   * protocol via which the route is learned
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 7;</code>
   * @return The enum numeric value on the wire for proto.
   */
  int getProtoValue();
  /**
   * <pre>
   * protocol via which the route is learned
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.RouteProtocol proto = 7;</code>
   * @return The proto.
   */
  opi_api.network.opinetcommon.v1alpha1.RouteProtocol getProto();

  /**
   * <pre>
   * The number of seconds since this route was last updated or otherwise determined to be correct.
   * </pre>
   *
   * <code>int32 age = 8;</code>
   * @return The age.
   */
  int getAge();

  /**
   * <pre>
   * The primary routing metric for this route
   * </pre>
   *
   * <code>int32 metric = 9;</code>
   * @return The metric.
   */
  int getMetric();

  /**
   * <pre>
   * Is this route programmed either to a forwarding table, or to a partner that queries route information
   * </pre>
   *
   * <code>bool fib_route = 10;</code>
   * @return The fibRoute.
   */
  boolean getFibRoute();

  /**
   * <pre>
   * Indicates whether the route destination is directly connected
   * </pre>
   *
   * <code>bool connected = 11;</code>
   * @return The connected.
   */
  boolean getConnected();

  /**
   * <pre>
   * Administrative distance for this route
   * </pre>
   *
   * <code>int32 admin_distance = 12;</code>
   * @return The adminDistance.
   */
  int getAdminDistance();
}
