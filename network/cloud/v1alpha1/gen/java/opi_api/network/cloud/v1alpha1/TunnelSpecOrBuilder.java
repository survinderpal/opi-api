// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tunnel.proto

package opi_api.network.cloud.v1alpha1;

public interface TunnelSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.network.cloud.v1alpha1.TunnelSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * unique tunnel identifier
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   * @return Whether the id field is set.
   */
  boolean hasId();
  /**
   * <pre>
   * unique tunnel identifier
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   * @return The id.
   */
  opi_api.common.v1.ObjectKey getId();
  /**
   * <pre>
   * unique tunnel identifier
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getIdOrBuilder();

  /**
   * <pre>
   * virtual private cloud this is tunnel belongs to
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey vpc_id = 2;</code>
   * @return Whether the vpcId field is set.
   */
  boolean hasVpcId();
  /**
   * <pre>
   * virtual private cloud this is tunnel belongs to
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey vpc_id = 2;</code>
   * @return The vpcId.
   */
  opi_api.common.v1.ObjectKey getVpcId();
  /**
   * <pre>
   * virtual private cloud this is tunnel belongs to
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey vpc_id = 2;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getVpcIdOrBuilder();

  /**
   * <pre>
   * local IP of the tunnel (used as outer SIP in tunneled packets)
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress local_ip = 3;</code>
   * @return Whether the localIp field is set.
   */
  boolean hasLocalIp();
  /**
   * <pre>
   * local IP of the tunnel (used as outer SIP in tunneled packets)
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress local_ip = 3;</code>
   * @return The localIp.
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddress getLocalIp();
  /**
   * <pre>
   * local IP of the tunnel (used as outer SIP in tunneled packets)
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress local_ip = 3;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddressOrBuilder getLocalIpOrBuilder();

  /**
   * <pre>
   * remote IP of the tunnel (used as outer DIP in tunneled packets)
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress remote_ip = 4;</code>
   * @return Whether the remoteIp field is set.
   */
  boolean hasRemoteIp();
  /**
   * <pre>
   * remote IP of the tunnel (used as outer DIP in tunneled packets)
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress remote_ip = 4;</code>
   * @return The remoteIp.
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddress getRemoteIp();
  /**
   * <pre>
   * remote IP of the tunnel (used as outer DIP in tunneled packets)
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress remote_ip = 4;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddressOrBuilder getRemoteIpOrBuilder();

  /**
   * <pre>
   * type of the tunnel
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.TunnelType type = 5;</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * type of the tunnel
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.TunnelType type = 5;</code>
   * @return The type.
   */
  opi_api.network.cloud.v1alpha1.TunnelType getType();

  /**
   * <pre>
   * encap used while sending traffic to this tunnel
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap encap = 6;</code>
   * @return Whether the encap field is set.
   */
  boolean hasEncap();
  /**
   * <pre>
   * encap used while sending traffic to this tunnel
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap encap = 6;</code>
   * @return The encap.
   */
  opi_api.network.opinetcommon.v1alpha1.Encap getEncap();
  /**
   * <pre>
   * encap used while sending traffic to this tunnel
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap encap = 6;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder getEncapOrBuilder();

  /**
   * <pre>
   * underlay nexthop for this tunnel
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey nexthop_id = 8;</code>
   * @return Whether the nexthopId field is set.
   */
  boolean hasNexthopId();
  /**
   * <pre>
   * underlay nexthop for this tunnel
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey nexthop_id = 8;</code>
   * @return The nexthopId.
   */
  opi_api.common.v1.ObjectKey getNexthopId();
  /**
   * <pre>
   * underlay nexthop for this tunnel
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey nexthop_id = 8;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getNexthopIdOrBuilder();

  /**
   * <pre>
   * underlay nexthop group for this tunnel
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey nexthop_group_id = 9;</code>
   * @return Whether the nexthopGroupId field is set.
   */
  boolean hasNexthopGroupId();
  /**
   * <pre>
   * underlay nexthop group for this tunnel
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey nexthop_group_id = 9;</code>
   * @return The nexthopGroupId.
   */
  opi_api.common.v1.ObjectKey getNexthopGroupId();
  /**
   * <pre>
   * underlay nexthop group for this tunnel
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey nexthop_group_id = 9;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getNexthopGroupIdOrBuilder();

  /**
   * <pre>
   * a tunnel can point to another tunnel for double encap
   * - supported combinations of double encap is platform specific
   * - unsupported combination of cascading tunnels would result in configuration failure
   * -  when tunnel points to another IPSEC tunnel, it is similar to IPSEC tunnel mode
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey tunnel_id = 10;</code>
   * @return Whether the tunnelId field is set.
   */
  boolean hasTunnelId();
  /**
   * <pre>
   * a tunnel can point to another tunnel for double encap
   * - supported combinations of double encap is platform specific
   * - unsupported combination of cascading tunnels would result in configuration failure
   * -  when tunnel points to another IPSEC tunnel, it is similar to IPSEC tunnel mode
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey tunnel_id = 10;</code>
   * @return The tunnelId.
   */
  opi_api.common.v1.ObjectKey getTunnelId();
  /**
   * <pre>
   * a tunnel can point to another tunnel for double encap
   * - supported combinations of double encap is platform specific
   * - unsupported combination of cascading tunnels would result in configuration failure
   * -  when tunnel points to another IPSEC tunnel, it is similar to IPSEC tunnel mode
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey tunnel_id = 10;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getTunnelIdOrBuilder();

  /**
   * <pre>
   * DropNexthop is used to explicitly drop traffic destined to this tunnel
   * even when there is reachability, this is administrative override
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.DropNexthop drop_next_hop = 11;</code>
   * @return Whether the dropNextHop field is set.
   */
  boolean hasDropNextHop();
  /**
   * <pre>
   * DropNexthop is used to explicitly drop traffic destined to this tunnel
   * even when there is reachability, this is administrative override
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.DropNexthop drop_next_hop = 11;</code>
   * @return The dropNextHop.
   */
  opi_api.network.cloud.v1alpha1.DropNexthop getDropNextHop();
  /**
   * <pre>
   * DropNexthop is used to explicitly drop traffic destined to this tunnel
   * even when there is reachability, this is administrative override
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.DropNexthop drop_next_hop = 11;</code>
   */
  opi_api.network.cloud.v1alpha1.DropNexthopOrBuilder getDropNextHopOrBuilder();

  /**
   * <pre>
   * MAC address of the remote IP (i.e., remote side of the tunnel)
   * set to zero if dataplane is expected to resolve this
   * </pre>
   *
   * <code>bytes mac_address = 12;</code>
   * @return The macAddress.
   */
  com.google.protobuf.ByteString getMacAddress();

  /**
   * <pre>
   * when ToS is configured on a tunnel object, all traffic destined to the
   * tunnel will carry dscp value as configured.
   * ToS field is 1 byte value that is populated in the DSCP field of IPv4 outer
   * header or in the Traffic Class field of IPv6 outer header, this value, if
   * non-zero, will be used as-is (i.e., not interpreted) during encap time by
   * the dataplane.
   * The ToS value configured on the tunnel will override ToS configuration
   * in vpc and subnet objects
   * </pre>
   *
   * <code>int32 tos = 13;</code>
   * @return The tos.
   */
  int getTos();

  public opi_api.network.cloud.v1alpha1.TunnelSpec.NhCase getNhCase();
}
