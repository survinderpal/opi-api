// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgp.proto

package opi_api.network.cloud.v1alpha1;

/**
 * <pre>
 * bgp address type
 * </pre>
 *
 * Protobuf enum {@code opi_api.network.cloud.v1alpha1.BGPAddrType}
 */
public enum BGPAddrType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * other
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_UNSPECIFIED = 0;</code>
   */
  BGP_ADDR_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   * ipv4
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_IPV4 = 1;</code>
   */
  BGP_ADDR_TYPE_IPV4(1),
  /**
   * <pre>
   * ipv6
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_IPV6 = 2;</code>
   */
  BGP_ADDR_TYPE_IPV6(2),
  /**
   * <pre>
   * nsap
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_NSAP = 3;</code>
   */
  BGP_ADDR_TYPE_NSAP(3),
  /**
   * <pre>
   * hdlc
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_HDLC = 4;</code>
   */
  BGP_ADDR_TYPE_HDLC(4),
  /**
   * <pre>
   * bbn-1822
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_BBN1822 = 5;</code>
   */
  BGP_ADDR_TYPE_BBN1822(5),
  /**
   * <pre>
   * ieee 802
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_IEEE802 = 6;</code>
   */
  BGP_ADDR_TYPE_IEEE802(6),
  /**
   * <pre>
   * e163
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_E163 = 7;</code>
   */
  BGP_ADDR_TYPE_E163(7),
  /**
   * <pre>
   * e164
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_E164 = 8;</code>
   */
  BGP_ADDR_TYPE_E164(8),
  /**
   * <pre>
   * f69
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_F69 = 9;</code>
   */
  BGP_ADDR_TYPE_F69(9),
  /**
   * <pre>
   * x121
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_X121 = 10;</code>
   */
  BGP_ADDR_TYPE_X121(10),
  /**
   * <pre>
   * ipx
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_IPX = 11;</code>
   */
  BGP_ADDR_TYPE_IPX(11),
  /**
   * <pre>
   * apple-talk
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_APPLETALK = 12;</code>
   */
  BGP_ADDR_TYPE_APPLETALK(12),
  /**
   * <pre>
   * dec net
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_DECNETIV = 13;</code>
   */
  BGP_ADDR_TYPE_DECNETIV(13),
  /**
   * <pre>
   * banyan
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_BANYANVIN = 14;</code>
   */
  BGP_ADDR_TYPE_BANYANVIN(14),
  /**
   * <pre>
   * nsap
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_E164_NSAP = 15;</code>
   */
  BGP_ADDR_TYPE_E164_NSAP(15),
  /**
   * <pre>
   * ipv4 tna
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_IPV4_TNA = 16;</code>
   */
  BGP_ADDR_TYPE_IPV4_TNA(16),
  /**
   * <pre>
   * ipv6 tna
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_IPV6_TNA = 17;</code>
   */
  BGP_ADDR_TYPE_IPV6_TNA(17),
  /**
   * <pre>
   * nsap tna
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_NSAP_TNA = 18;</code>
   */
  BGP_ADDR_TYPE_NSAP_TNA(18),
  /**
   * <pre>
   * vpn ipv4
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_VPN_IPV4 = 19;</code>
   */
  BGP_ADDR_TYPE_VPN_IPV4(19),
  /**
   * <pre>
   * vpn ipv6
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_VPN_IPV6 = 20;</code>
   */
  BGP_ADDR_TYPE_VPN_IPV6(20),
  /**
   * <pre>
   * l2vpn
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_L2VPN = 25;</code>
   */
  BGP_ADDR_TYPE_L2VPN(25),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * other
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int BGP_ADDR_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * ipv4
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_IPV4 = 1;</code>
   */
  public static final int BGP_ADDR_TYPE_IPV4_VALUE = 1;
  /**
   * <pre>
   * ipv6
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_IPV6 = 2;</code>
   */
  public static final int BGP_ADDR_TYPE_IPV6_VALUE = 2;
  /**
   * <pre>
   * nsap
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_NSAP = 3;</code>
   */
  public static final int BGP_ADDR_TYPE_NSAP_VALUE = 3;
  /**
   * <pre>
   * hdlc
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_HDLC = 4;</code>
   */
  public static final int BGP_ADDR_TYPE_HDLC_VALUE = 4;
  /**
   * <pre>
   * bbn-1822
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_BBN1822 = 5;</code>
   */
  public static final int BGP_ADDR_TYPE_BBN1822_VALUE = 5;
  /**
   * <pre>
   * ieee 802
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_IEEE802 = 6;</code>
   */
  public static final int BGP_ADDR_TYPE_IEEE802_VALUE = 6;
  /**
   * <pre>
   * e163
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_E163 = 7;</code>
   */
  public static final int BGP_ADDR_TYPE_E163_VALUE = 7;
  /**
   * <pre>
   * e164
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_E164 = 8;</code>
   */
  public static final int BGP_ADDR_TYPE_E164_VALUE = 8;
  /**
   * <pre>
   * f69
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_F69 = 9;</code>
   */
  public static final int BGP_ADDR_TYPE_F69_VALUE = 9;
  /**
   * <pre>
   * x121
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_X121 = 10;</code>
   */
  public static final int BGP_ADDR_TYPE_X121_VALUE = 10;
  /**
   * <pre>
   * ipx
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_IPX = 11;</code>
   */
  public static final int BGP_ADDR_TYPE_IPX_VALUE = 11;
  /**
   * <pre>
   * apple-talk
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_APPLETALK = 12;</code>
   */
  public static final int BGP_ADDR_TYPE_APPLETALK_VALUE = 12;
  /**
   * <pre>
   * dec net
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_DECNETIV = 13;</code>
   */
  public static final int BGP_ADDR_TYPE_DECNETIV_VALUE = 13;
  /**
   * <pre>
   * banyan
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_BANYANVIN = 14;</code>
   */
  public static final int BGP_ADDR_TYPE_BANYANVIN_VALUE = 14;
  /**
   * <pre>
   * nsap
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_E164_NSAP = 15;</code>
   */
  public static final int BGP_ADDR_TYPE_E164_NSAP_VALUE = 15;
  /**
   * <pre>
   * ipv4 tna
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_IPV4_TNA = 16;</code>
   */
  public static final int BGP_ADDR_TYPE_IPV4_TNA_VALUE = 16;
  /**
   * <pre>
   * ipv6 tna
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_IPV6_TNA = 17;</code>
   */
  public static final int BGP_ADDR_TYPE_IPV6_TNA_VALUE = 17;
  /**
   * <pre>
   * nsap tna
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_NSAP_TNA = 18;</code>
   */
  public static final int BGP_ADDR_TYPE_NSAP_TNA_VALUE = 18;
  /**
   * <pre>
   * vpn ipv4
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_VPN_IPV4 = 19;</code>
   */
  public static final int BGP_ADDR_TYPE_VPN_IPV4_VALUE = 19;
  /**
   * <pre>
   * vpn ipv6
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_VPN_IPV6 = 20;</code>
   */
  public static final int BGP_ADDR_TYPE_VPN_IPV6_VALUE = 20;
  /**
   * <pre>
   * l2vpn
   * </pre>
   *
   * <code>BGP_ADDR_TYPE_L2VPN = 25;</code>
   */
  public static final int BGP_ADDR_TYPE_L2VPN_VALUE = 25;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static BGPAddrType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static BGPAddrType forNumber(int value) {
    switch (value) {
      case 0: return BGP_ADDR_TYPE_UNSPECIFIED;
      case 1: return BGP_ADDR_TYPE_IPV4;
      case 2: return BGP_ADDR_TYPE_IPV6;
      case 3: return BGP_ADDR_TYPE_NSAP;
      case 4: return BGP_ADDR_TYPE_HDLC;
      case 5: return BGP_ADDR_TYPE_BBN1822;
      case 6: return BGP_ADDR_TYPE_IEEE802;
      case 7: return BGP_ADDR_TYPE_E163;
      case 8: return BGP_ADDR_TYPE_E164;
      case 9: return BGP_ADDR_TYPE_F69;
      case 10: return BGP_ADDR_TYPE_X121;
      case 11: return BGP_ADDR_TYPE_IPX;
      case 12: return BGP_ADDR_TYPE_APPLETALK;
      case 13: return BGP_ADDR_TYPE_DECNETIV;
      case 14: return BGP_ADDR_TYPE_BANYANVIN;
      case 15: return BGP_ADDR_TYPE_E164_NSAP;
      case 16: return BGP_ADDR_TYPE_IPV4_TNA;
      case 17: return BGP_ADDR_TYPE_IPV6_TNA;
      case 18: return BGP_ADDR_TYPE_NSAP_TNA;
      case 19: return BGP_ADDR_TYPE_VPN_IPV4;
      case 20: return BGP_ADDR_TYPE_VPN_IPV6;
      case 25: return BGP_ADDR_TYPE_L2VPN;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<BGPAddrType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      BGPAddrType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<BGPAddrType>() {
          public BGPAddrType findValueByNumber(int number) {
            return BGPAddrType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return opi_api.network.cloud.v1alpha1.BGPProto.getDescriptor().getEnumTypes().get(5);
  }

  private static final BGPAddrType[] VALUES = values();

  public static BGPAddrType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private BGPAddrType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:opi_api.network.cloud.v1alpha1.BGPAddrType)
}

