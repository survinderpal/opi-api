// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: port.proto

package opi_api.network.cloud.v1alpha1;

/**
 * <pre>
 * port link state
 * </pre>
 *
 * Protobuf enum {@code opi_api.network.cloud.v1alpha1.PortLinkFSM}
 */
public enum PortLinkFSM
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * unspecified1
   * </pre>
   *
   * <code>PORT_LINK_FSM_UNSPECIFIED = 0;</code>
   */
  PORT_LINK_FSM_UNSPECIFIED(0),
  /**
   * <pre>
   * enabled
   * </pre>
   *
   * <code>PORT_LINK_FSM_ENABLED = 1;</code>
   */
  PORT_LINK_FSM_ENABLED(1),
  /**
   * <pre>
   * auto negotiation configured
   * </pre>
   *
   * <code>PORT_LINK_FSM_AN_CFG = 2;</code>
   */
  PORT_LINK_FSM_AN_CFG(2),
  /**
   * <pre>
   * auto negotiation disabled
   * </pre>
   *
   * <code>PORT_LINK_FSM_AN_DISABLED = 3;</code>
   */
  PORT_LINK_FSM_AN_DISABLED(3),
  /**
   * <pre>
   * auto negotiation started
   * </pre>
   *
   * <code>PORT_LINK_FSM_AN_START = 4;</code>
   */
  PORT_LINK_FSM_AN_START(4),
  /**
   * <pre>
   * auto negotiation signal detect
   * </pre>
   *
   * <code>PORT_LINK_FSM_AN_SIGNAL_DETECT = 5;</code>
   */
  PORT_LINK_FSM_AN_SIGNAL_DETECT(5),
  /**
   * <pre>
   * auto negotiation wait HCD
   * </pre>
   *
   * <code>PORT_LINK_FSM_AN_WAIT_HCD = 6;</code>
   */
  PORT_LINK_FSM_AN_WAIT_HCD(6),
  /**
   * <pre>
   * auto negotiation complete
   * </pre>
   *
   * <code>PORT_LINK_FSM_AN_COMPLETE = 7;</code>
   */
  PORT_LINK_FSM_AN_COMPLETE(7),
  /**
   * <pre>
   * seredes configured
   * </pre>
   *
   * <code>PORT_LINK_FSM_SERDES_CFG = 8;</code>
   */
  PORT_LINK_FSM_SERDES_CFG(8),
  /**
   * <pre>
   * serdes ready
   * </pre>
   *
   * <code>PORT_LINK_FSM_WAIT_SERDES_RDY = 9;</code>
   */
  PORT_LINK_FSM_WAIT_SERDES_RDY(9),
  /**
   * <pre>
   * mac configured
   * </pre>
   *
   * <code>PORT_LINK_FSM_MAC_CFG = 10;</code>
   */
  PORT_LINK_FSM_MAC_CFG(10),
  /**
   * <pre>
   * signal detected
   * </pre>
   *
   * <code>PORT_LINK_FSM_SIGNAL_DETECT = 11;</code>
   */
  PORT_LINK_FSM_SIGNAL_DETECT(11),
  /**
   * <pre>
   * auto negotiation dfe tuning
   * </pre>
   *
   * <code>PORT_LINK_FSM_AN_DFE_TUNING = 12;</code>
   */
  PORT_LINK_FSM_AN_DFE_TUNING(12),
  /**
   * <pre>
   * dfe tuning enabled
   * </pre>
   *
   * <code>PORT_LINK_FSM_DFE_TUNING = 13;</code>
   */
  PORT_LINK_FSM_DFE_TUNING(13),
  /**
   * <pre>
   * dfe disabled
   * </pre>
   *
   * <code>PORT_LINK_FSM_DFE_DISABLED = 14;</code>
   */
  PORT_LINK_FSM_DFE_DISABLED(14),
  /**
   * <pre>
   * dfe start ical
   * </pre>
   *
   * <code>PORT_LINK_FSM_DFE_START_ICAL = 15;</code>
   */
  PORT_LINK_FSM_DFE_START_ICAL(15),
  /**
   * <pre>
   * dfe wait ical
   * </pre>
   *
   * <code>PORT_LINK_FSM_DFE_WAIT_ICAL = 16;</code>
   */
  PORT_LINK_FSM_DFE_WAIT_ICAL(16),
  /**
   * <pre>
   * dfe start pcal
   * </pre>
   *
   * <code>PORT_LINK_FSM_DFE_START_PCAL = 17;</code>
   */
  PORT_LINK_FSM_DFE_START_PCAL(17),
  /**
   * <pre>
   * dfe wait pcal
   * </pre>
   *
   * <code>PORT_LINK_FSM_DFE_WAIT_PCAL = 18;</code>
   */
  PORT_LINK_FSM_DFE_WAIT_PCAL(18),
  /**
   * <pre>
   * dfe pcal continuous
   * </pre>
   *
   * <code>PORT_LINK_FSM_DFE_PCAL_CONTINUOUS = 19;</code>
   */
  PORT_LINK_FSM_DFE_PCAL_CONTINUOUS(19),
  /**
   * <pre>
   * clear mac remote faults
   * </pre>
   *
   * <code>PORT_LINK_FSM_CLEAR_MAC_REMOTE_FAULTS = 20;</code>
   */
  PORT_LINK_FSM_CLEAR_MAC_REMOTE_FAULTS(20),
  /**
   * <pre>
   * wait mac sync
   * </pre>
   *
   * <code>PORT_LINK_FSM_WAIT_MAC_SYNC = 21;</code>
   */
  PORT_LINK_FSM_WAIT_MAC_SYNC(21),
  /**
   * <pre>
   * mac faults cleared
   * </pre>
   *
   * <code>PORT_LINK_FSM_WAIT_MAC_FAULTS_CLEAR = 22;</code>
   */
  PORT_LINK_FSM_WAIT_MAC_FAULTS_CLEAR(22),
  /**
   * <pre>
   * wait phy link up
   * </pre>
   *
   * <code>PORT_LINK_FSM_WAIT_PHY_LINK_UP = 23;</code>
   */
  PORT_LINK_FSM_WAIT_PHY_LINK_UP(23),
  /**
   * <pre>
   * link up
   * </pre>
   *
   * <code>PORT_LINK_FSM_UP = 24;</code>
   */
  PORT_LINK_FSM_UP(24),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * unspecified1
   * </pre>
   *
   * <code>PORT_LINK_FSM_UNSPECIFIED = 0;</code>
   */
  public static final int PORT_LINK_FSM_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * enabled
   * </pre>
   *
   * <code>PORT_LINK_FSM_ENABLED = 1;</code>
   */
  public static final int PORT_LINK_FSM_ENABLED_VALUE = 1;
  /**
   * <pre>
   * auto negotiation configured
   * </pre>
   *
   * <code>PORT_LINK_FSM_AN_CFG = 2;</code>
   */
  public static final int PORT_LINK_FSM_AN_CFG_VALUE = 2;
  /**
   * <pre>
   * auto negotiation disabled
   * </pre>
   *
   * <code>PORT_LINK_FSM_AN_DISABLED = 3;</code>
   */
  public static final int PORT_LINK_FSM_AN_DISABLED_VALUE = 3;
  /**
   * <pre>
   * auto negotiation started
   * </pre>
   *
   * <code>PORT_LINK_FSM_AN_START = 4;</code>
   */
  public static final int PORT_LINK_FSM_AN_START_VALUE = 4;
  /**
   * <pre>
   * auto negotiation signal detect
   * </pre>
   *
   * <code>PORT_LINK_FSM_AN_SIGNAL_DETECT = 5;</code>
   */
  public static final int PORT_LINK_FSM_AN_SIGNAL_DETECT_VALUE = 5;
  /**
   * <pre>
   * auto negotiation wait HCD
   * </pre>
   *
   * <code>PORT_LINK_FSM_AN_WAIT_HCD = 6;</code>
   */
  public static final int PORT_LINK_FSM_AN_WAIT_HCD_VALUE = 6;
  /**
   * <pre>
   * auto negotiation complete
   * </pre>
   *
   * <code>PORT_LINK_FSM_AN_COMPLETE = 7;</code>
   */
  public static final int PORT_LINK_FSM_AN_COMPLETE_VALUE = 7;
  /**
   * <pre>
   * seredes configured
   * </pre>
   *
   * <code>PORT_LINK_FSM_SERDES_CFG = 8;</code>
   */
  public static final int PORT_LINK_FSM_SERDES_CFG_VALUE = 8;
  /**
   * <pre>
   * serdes ready
   * </pre>
   *
   * <code>PORT_LINK_FSM_WAIT_SERDES_RDY = 9;</code>
   */
  public static final int PORT_LINK_FSM_WAIT_SERDES_RDY_VALUE = 9;
  /**
   * <pre>
   * mac configured
   * </pre>
   *
   * <code>PORT_LINK_FSM_MAC_CFG = 10;</code>
   */
  public static final int PORT_LINK_FSM_MAC_CFG_VALUE = 10;
  /**
   * <pre>
   * signal detected
   * </pre>
   *
   * <code>PORT_LINK_FSM_SIGNAL_DETECT = 11;</code>
   */
  public static final int PORT_LINK_FSM_SIGNAL_DETECT_VALUE = 11;
  /**
   * <pre>
   * auto negotiation dfe tuning
   * </pre>
   *
   * <code>PORT_LINK_FSM_AN_DFE_TUNING = 12;</code>
   */
  public static final int PORT_LINK_FSM_AN_DFE_TUNING_VALUE = 12;
  /**
   * <pre>
   * dfe tuning enabled
   * </pre>
   *
   * <code>PORT_LINK_FSM_DFE_TUNING = 13;</code>
   */
  public static final int PORT_LINK_FSM_DFE_TUNING_VALUE = 13;
  /**
   * <pre>
   * dfe disabled
   * </pre>
   *
   * <code>PORT_LINK_FSM_DFE_DISABLED = 14;</code>
   */
  public static final int PORT_LINK_FSM_DFE_DISABLED_VALUE = 14;
  /**
   * <pre>
   * dfe start ical
   * </pre>
   *
   * <code>PORT_LINK_FSM_DFE_START_ICAL = 15;</code>
   */
  public static final int PORT_LINK_FSM_DFE_START_ICAL_VALUE = 15;
  /**
   * <pre>
   * dfe wait ical
   * </pre>
   *
   * <code>PORT_LINK_FSM_DFE_WAIT_ICAL = 16;</code>
   */
  public static final int PORT_LINK_FSM_DFE_WAIT_ICAL_VALUE = 16;
  /**
   * <pre>
   * dfe start pcal
   * </pre>
   *
   * <code>PORT_LINK_FSM_DFE_START_PCAL = 17;</code>
   */
  public static final int PORT_LINK_FSM_DFE_START_PCAL_VALUE = 17;
  /**
   * <pre>
   * dfe wait pcal
   * </pre>
   *
   * <code>PORT_LINK_FSM_DFE_WAIT_PCAL = 18;</code>
   */
  public static final int PORT_LINK_FSM_DFE_WAIT_PCAL_VALUE = 18;
  /**
   * <pre>
   * dfe pcal continuous
   * </pre>
   *
   * <code>PORT_LINK_FSM_DFE_PCAL_CONTINUOUS = 19;</code>
   */
  public static final int PORT_LINK_FSM_DFE_PCAL_CONTINUOUS_VALUE = 19;
  /**
   * <pre>
   * clear mac remote faults
   * </pre>
   *
   * <code>PORT_LINK_FSM_CLEAR_MAC_REMOTE_FAULTS = 20;</code>
   */
  public static final int PORT_LINK_FSM_CLEAR_MAC_REMOTE_FAULTS_VALUE = 20;
  /**
   * <pre>
   * wait mac sync
   * </pre>
   *
   * <code>PORT_LINK_FSM_WAIT_MAC_SYNC = 21;</code>
   */
  public static final int PORT_LINK_FSM_WAIT_MAC_SYNC_VALUE = 21;
  /**
   * <pre>
   * mac faults cleared
   * </pre>
   *
   * <code>PORT_LINK_FSM_WAIT_MAC_FAULTS_CLEAR = 22;</code>
   */
  public static final int PORT_LINK_FSM_WAIT_MAC_FAULTS_CLEAR_VALUE = 22;
  /**
   * <pre>
   * wait phy link up
   * </pre>
   *
   * <code>PORT_LINK_FSM_WAIT_PHY_LINK_UP = 23;</code>
   */
  public static final int PORT_LINK_FSM_WAIT_PHY_LINK_UP_VALUE = 23;
  /**
   * <pre>
   * link up
   * </pre>
   *
   * <code>PORT_LINK_FSM_UP = 24;</code>
   */
  public static final int PORT_LINK_FSM_UP_VALUE = 24;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static PortLinkFSM valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static PortLinkFSM forNumber(int value) {
    switch (value) {
      case 0: return PORT_LINK_FSM_UNSPECIFIED;
      case 1: return PORT_LINK_FSM_ENABLED;
      case 2: return PORT_LINK_FSM_AN_CFG;
      case 3: return PORT_LINK_FSM_AN_DISABLED;
      case 4: return PORT_LINK_FSM_AN_START;
      case 5: return PORT_LINK_FSM_AN_SIGNAL_DETECT;
      case 6: return PORT_LINK_FSM_AN_WAIT_HCD;
      case 7: return PORT_LINK_FSM_AN_COMPLETE;
      case 8: return PORT_LINK_FSM_SERDES_CFG;
      case 9: return PORT_LINK_FSM_WAIT_SERDES_RDY;
      case 10: return PORT_LINK_FSM_MAC_CFG;
      case 11: return PORT_LINK_FSM_SIGNAL_DETECT;
      case 12: return PORT_LINK_FSM_AN_DFE_TUNING;
      case 13: return PORT_LINK_FSM_DFE_TUNING;
      case 14: return PORT_LINK_FSM_DFE_DISABLED;
      case 15: return PORT_LINK_FSM_DFE_START_ICAL;
      case 16: return PORT_LINK_FSM_DFE_WAIT_ICAL;
      case 17: return PORT_LINK_FSM_DFE_START_PCAL;
      case 18: return PORT_LINK_FSM_DFE_WAIT_PCAL;
      case 19: return PORT_LINK_FSM_DFE_PCAL_CONTINUOUS;
      case 20: return PORT_LINK_FSM_CLEAR_MAC_REMOTE_FAULTS;
      case 21: return PORT_LINK_FSM_WAIT_MAC_SYNC;
      case 22: return PORT_LINK_FSM_WAIT_MAC_FAULTS_CLEAR;
      case 23: return PORT_LINK_FSM_WAIT_PHY_LINK_UP;
      case 24: return PORT_LINK_FSM_UP;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<PortLinkFSM>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      PortLinkFSM> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<PortLinkFSM>() {
          public PortLinkFSM findValueByNumber(int number) {
            return PortLinkFSM.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return opi_api.network.cloud.v1alpha1.PortProto.getDescriptor().getEnumTypes().get(6);
  }

  private static final PortLinkFSM[] VALUES = values();

  public static PortLinkFSM valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private PortLinkFSM(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:opi_api.network.cloud.v1alpha1.PortLinkFSM)
}

