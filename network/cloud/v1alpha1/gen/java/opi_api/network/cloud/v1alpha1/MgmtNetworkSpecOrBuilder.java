// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto

package opi_api.network.cloud.v1alpha1;

public interface MgmtNetworkSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.network.cloud.v1alpha1.MgmtNetworkSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * LLDPMgmtIP, if configured, will be used to advertise in LLDP's management address TLV
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress lldp_mgmt_ip = 1;</code>
   * @return Whether the lldpMgmtIp field is set.
   */
  boolean hasLldpMgmtIp();
  /**
   * <pre>
   * LLDPMgmtIP, if configured, will be used to advertise in LLDP's management address TLV
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress lldp_mgmt_ip = 1;</code>
   * @return The lldpMgmtIp.
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddress getLldpMgmtIp();
  /**
   * <pre>
   * LLDPMgmtIP, if configured, will be used to advertise in LLDP's management address TLV
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress lldp_mgmt_ip = 1;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddressOrBuilder getLldpMgmtIpOrBuilder();

  /**
   * <pre>
   * MgmtIP is the management IP address of the DSC (also for flow log generation)
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress mgmt_ip = 2;</code>
   * @return Whether the mgmtIp field is set.
   */
  boolean hasMgmtIp();
  /**
   * <pre>
   * MgmtIP is the management IP address of the DSC (also for flow log generation)
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress mgmt_ip = 2;</code>
   * @return The mgmtIp.
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddress getMgmtIp();
  /**
   * <pre>
   * MgmtIP is the management IP address of the DSC (also for flow log generation)
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress mgmt_ip = 2;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddressOrBuilder getMgmtIpOrBuilder();

  /**
   * <pre>
   * Vlan ID (0-4095) is the management network's vlan tag (zero = untagged)
   * </pre>
   *
   * <code>int32 vlan = 3;</code>
   * @return The vlan.
   */
  int getVlan();

  /**
   * <pre>
   * IP address of the default gateway in the management vlan
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 4;</code>
   * @return Whether the gatewayIp field is set.
   */
  boolean hasGatewayIp();
  /**
   * <pre>
   * IP address of the default gateway in the management vlan
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 4;</code>
   * @return The gatewayIp.
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddress getGatewayIp();
  /**
   * <pre>
   * IP address of the default gateway in the management vlan
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress gateway_ip = 4;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddressOrBuilder getGatewayIpOrBuilder();

  /**
   * <pre>
   * MAC address of the default gateway in the management vlan
   * </pre>
   *
   * <code>bytes gateway_mac = 5;</code>
   * @return The gatewayMac.
   */
  com.google.protobuf.ByteString getGatewayMac();
}
