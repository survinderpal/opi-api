// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vnic.proto

package opi_api.network.cloud.v1alpha1;

public interface VnicSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.network.cloud.v1alpha1.VnicSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * unique vnic id
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   * @return Whether the id field is set.
   */
  boolean hasId();
  /**
   * <pre>
   * unique vnic id
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   * @return The id.
   */
  opi_api.common.v1.ObjectKey getId();
  /**
   * <pre>
   * unique vnic id
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getIdOrBuilder();

  /**
   * <pre>
   * id of the subnet this vnic belongs to
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey subnet_id = 2;</code>
   * @return Whether the subnetId field is set.
   */
  boolean hasSubnetId();
  /**
   * <pre>
   * id of the subnet this vnic belongs to
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey subnet_id = 2;</code>
   * @return The subnetId.
   */
  opi_api.common.v1.ObjectKey getSubnetId();
  /**
   * <pre>
   * id of the subnet this vnic belongs to
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey subnet_id = 2;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getSubnetIdOrBuilder();

  /**
   * <pre>
   * vnic encap information to be used while sending packets to this vnic
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap vnic_encap = 3;</code>
   * @return Whether the vnicEncap field is set.
   */
  boolean hasVnicEncap();
  /**
   * <pre>
   * vnic encap information to be used while sending packets to this vnic
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap vnic_encap = 3;</code>
   * @return The vnicEncap.
   */
  opi_api.network.opinetcommon.v1alpha1.Encap getVnicEncap();
  /**
   * <pre>
   * vnic encap information to be used while sending packets to this vnic
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap vnic_encap = 3;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder getVnicEncapOrBuilder();

  /**
   * <pre>
   * overlay MAC of this VNIC
   * </pre>
   *
   * <code>bytes mac_address = 4;</code>
   * @return The macAddress.
   */
  com.google.protobuf.ByteString getMacAddress();

  /**
   * <pre>
   * enable or disable reverse path checks while rx/tx traffic from/to this vnic
   * </pre>
   *
   * <code>bool source_guard_enable = 5;</code>
   * @return The sourceGuardEnable.
   */
  boolean getSourceGuardEnable();

  /**
   * <pre>
   * fabric encap information to be used for traffic originated from this vnic
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 6;</code>
   * @return Whether the fabricEncap field is set.
   */
  boolean hasFabricEncap();
  /**
   * <pre>
   * fabric encap information to be used for traffic originated from this vnic
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 6;</code>
   * @return The fabricEncap.
   */
  opi_api.network.opinetcommon.v1alpha1.Encap getFabricEncap();
  /**
   * <pre>
   * fabric encap information to be used for traffic originated from this vnic
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 6;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder getFabricEncapOrBuilder();

  /**
   * <pre>
   * VNFs (virtual network functions are workloads that implement network
   * features such as firewalls, virtual switches/bridges, security monitoring, etc.
   * since VNFs are devices in the middle, they can rx/tx traffic on behalf of other
   * workloads to allow for source/destination checks, and exceptions that of a mapping
   * </pre>
   *
   * <code>bool vnf = 7;</code>
   * @return The vnf.
   */
  boolean getVnf();

  /**
   * <pre>
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingress_v4_security_policy_id = 8;</code>
   */
  java.util.List<opi_api.common.v1.ObjectKey> 
      getIngressV4SecurityPolicyIdList();
  /**
   * <pre>
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingress_v4_security_policy_id = 8;</code>
   */
  opi_api.common.v1.ObjectKey getIngressV4SecurityPolicyId(int index);
  /**
   * <pre>
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingress_v4_security_policy_id = 8;</code>
   */
  int getIngressV4SecurityPolicyIdCount();
  /**
   * <pre>
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingress_v4_security_policy_id = 8;</code>
   */
  java.util.List<? extends opi_api.common.v1.ObjectKeyOrBuilder> 
      getIngressV4SecurityPolicyIdOrBuilderList();
  /**
   * <pre>
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingress_v4_security_policy_id = 8;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getIngressV4SecurityPolicyIdOrBuilder(
      int index);

  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 9;</code>
   */
  java.util.List<opi_api.common.v1.ObjectKey> 
      getIngressV6SecurityPolicyIdList();
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 9;</code>
   */
  opi_api.common.v1.ObjectKey getIngressV6SecurityPolicyId(int index);
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 9;</code>
   */
  int getIngressV6SecurityPolicyIdCount();
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 9;</code>
   */
  java.util.List<? extends opi_api.common.v1.ObjectKeyOrBuilder> 
      getIngressV6SecurityPolicyIdOrBuilderList();
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 9;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getIngressV6SecurityPolicyIdOrBuilder(
      int index);

  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 10;</code>
   */
  java.util.List<opi_api.common.v1.ObjectKey> 
      getEgressV4SecurityPolicyIdList();
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 10;</code>
   */
  opi_api.common.v1.ObjectKey getEgressV4SecurityPolicyId(int index);
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 10;</code>
   */
  int getEgressV4SecurityPolicyIdCount();
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 10;</code>
   */
  java.util.List<? extends opi_api.common.v1.ObjectKeyOrBuilder> 
      getEgressV4SecurityPolicyIdOrBuilderList();
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 10;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getEgressV4SecurityPolicyIdOrBuilder(
      int index);

  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 11;</code>
   */
  java.util.List<opi_api.common.v1.ObjectKey> 
      getEgressV6SecurityPolicyIdList();
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 11;</code>
   */
  opi_api.common.v1.ObjectKey getEgressV6SecurityPolicyId(int index);
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 11;</code>
   */
  int getEgressV6SecurityPolicyIdCount();
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 11;</code>
   */
  java.util.List<? extends opi_api.common.v1.ObjectKeyOrBuilder> 
      getEgressV6SecurityPolicyIdOrBuilderList();
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 11;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getEgressV6SecurityPolicyIdOrBuilder(
      int index);

  /**
   * <pre>
   * if VNIC Is attahced to a PF/VF, this identifies the corresponding interface object
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey host_if_id = 12;</code>
   * @return Whether the hostIfId field is set.
   */
  boolean hasHostIfId();
  /**
   * <pre>
   * if VNIC Is attahced to a PF/VF, this identifies the corresponding interface object
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey host_if_id = 12;</code>
   * @return The hostIfId.
   */
  opi_api.common.v1.ObjectKey getHostIfId();
  /**
   * <pre>
   * if VNIC Is attahced to a PF/VF, this identifies the corresponding interface object
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey host_if_id = 12;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getHostIfIdOrBuilder();

  /**
   * <pre>
   * when operating in DEVICE_OPER_MODE_SMART_SWITCH, vnic can be behind a
   * tunnel between the host and the DSC
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey tunnel_id = 15;</code>
   * @return Whether the tunnelId field is set.
   */
  boolean hasTunnelId();
  /**
   * <pre>
   * when operating in DEVICE_OPER_MODE_SMART_SWITCH, vnic can be behind a
   * tunnel between the host and the DSC
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey tunnel_id = 15;</code>
   * @return The tunnelId.
   */
  opi_api.common.v1.ObjectKey getTunnelId();
  /**
   * <pre>
   * when operating in DEVICE_OPER_MODE_SMART_SWITCH, vnic can be behind a
   * tunnel between the host and the DSC
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey tunnel_id = 15;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getTunnelIdOrBuilder();

  /**
   * <pre>
   * max_sessions, if set, is total number of active sessions (across all
   * protocols) allowed from/to this vnic; zero means unlimited
   * </pre>
   *
   * <code>int32 max_sessions = 20;</code>
   * @return The maxSessions.
   */
  int getMaxSessions();

  /**
   * <pre>
   * guest workload's MAC in rx/tx direction is rewritten with this mac if non zero
   * </pre>
   *
   * <code>bytes public_mac_address = 25;</code>
   * @return The publicMacAddress.
   */
  com.google.protobuf.ByteString getPublicMacAddress();

  /**
   * <pre>
   * if allow_internet_access is set to false and traffic from the vnic hits a
   * route of class ROUTE_CLASS_INTERNET, then traffic is dropped. To allow
   * Internet connectivity for the vnic, AllowInternetAccess must be set to
   * true
   * </pre>
   *
   * <code>bool allow_internet_access = 28;</code>
   * @return The allowInternetAccess.
   */
  boolean getAllowInternetAccess();

  /**
   * <pre>
   * max_cps, if non-zero, is the maximum no. of connections per second (cps)
   * allowed for this vnic and if cps exceeds this configured limit all
   * new connections will get dropped; zero means unlimited
   * </pre>
   *
   * <code>int32 max_cps = 29;</code>
   * @return The maxCps.
   */
  int getMaxCps();

  /**
   * <pre>
   * CPS burst to be absorbed when CPS exceeds MaxCPS; zero means
   * no burst is allowed
   * </pre>
   *
   * <code>int32 cps_burst = 30;</code>
   * @return The cpsBurst.
   */
  int getCpsBurst();

  /**
   * <pre>
   * multiple vnics can be created with same MAC but only of them can be primary
   * VNIC and all 2nd-ary vnics refer to the primary vnic, both primary and
   * secondary vnic can have one or more local IP mappings behind them
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey primary_vnic_id = 32;</code>
   * @return Whether the primaryVnicId field is set.
   */
  boolean hasPrimaryVnicId();
  /**
   * <pre>
   * multiple vnics can be created with same MAC but only of them can be primary
   * VNIC and all 2nd-ary vnics refer to the primary vnic, both primary and
   * secondary vnic can have one or more local IP mappings behind them
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey primary_vnic_id = 32;</code>
   * @return The primaryVnicId.
   */
  opi_api.common.v1.ObjectKey getPrimaryVnicId();
  /**
   * <pre>
   * multiple vnics can be created with same MAC but only of them can be primary
   * VNIC and all 2nd-ary vnics refer to the primary vnic, both primary and
   * secondary vnic can have one or more local IP mappings behind them
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey primary_vnic_id = 32;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getPrimaryVnicIdOrBuilder();

  /**
   * <pre>
   * identifier of the IPv4 route table to be used
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey v4_route_table_id = 33;</code>
   * @return Whether the v4RouteTableId field is set.
   */
  boolean hasV4RouteTableId();
  /**
   * <pre>
   * identifier of the IPv4 route table to be used
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey v4_route_table_id = 33;</code>
   * @return The v4RouteTableId.
   */
  opi_api.common.v1.ObjectKey getV4RouteTableId();
  /**
   * <pre>
   * identifier of the IPv4 route table to be used
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey v4_route_table_id = 33;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getV4RouteTableIdOrBuilder();

  /**
   * <pre>
   * identifier of the IPv6 route table to be used, if any
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey v6_route_table_id = 34;</code>
   * @return Whether the v6RouteTableId field is set.
   */
  boolean hasV6RouteTableId();
  /**
   * <pre>
   * identifier of the IPv6 route table to be used, if any
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey v6_route_table_id = 34;</code>
   * @return The v6RouteTableId.
   */
  opi_api.common.v1.ObjectKey getV6RouteTableId();
  /**
   * <pre>
   * identifier of the IPv6 route table to be used, if any
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey v6_route_table_id = 34;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getV6RouteTableIdOrBuilder();

  /**
   * <pre>
   * vnic if assigned a VIP in the underlay, can be used as
   * outer encap source IP, if configured, for traffic going to certain vpc
   * private service endpoints
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress service_ip = 36;</code>
   * @return Whether the serviceIp field is set.
   */
  boolean hasServiceIp();
  /**
   * <pre>
   * vnic if assigned a VIP in the underlay, can be used as
   * outer encap source IP, if configured, for traffic going to certain vpc
   * private service endpoints
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress service_ip = 36;</code>
   * @return The serviceIp.
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddress getServiceIp();
  /**
   * <pre>
   * vnic if assigned a VIP in the underlay, can be used as
   * outer encap source IP, if configured, for traffic going to certain vpc
   * private service endpoints
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress service_ip = 36;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddressOrBuilder getServiceIpOrBuilder();

  /**
   * <pre>
   * max_tcp_sessions is the maximum number of TCP sessions allowed from/to this
   * vnic, if it is non-zero; zero implies no limit
   * </pre>
   *
   * <code>int32 max_tcp_sessions = 38;</code>
   * @return The maxTcpSessions.
   */
  int getMaxTcpSessions();

  /**
   * <pre>
   * max_udp_sessions is the maximum number of UDP sessions allowed from/to this
   * vnic, if it is non-zero; zero implies no limit
   * </pre>
   *
   * <code>int32 max_udp_sessions = 39;</code>
   * @return The maxUdpSessions.
   */
  int getMaxUdpSessions();

  /**
   * <pre>
   * max_icmp_sessions is the maximum number of ICMP sessions allowed from/to this
   * vnic, if it is non-zero; zero implies no limit
   * </pre>
   *
   * <code>int32 max_icmp_sessions = 40;</code>
   * @return The maxIcmpSessions.
   */
  int getMaxIcmpSessions();

  /**
   * <pre>
   * max other session is the maximum number of non-TCP/UDP/ICMP sessions allowed
   * from/to this vnic; zero implies no limit
   * </pre>
   *
   * <code>int32 max_other_sessions = 41;</code>
   * @return The maxOtherSessions.
   */
  int getMaxOtherSessions();

  public opi_api.network.cloud.v1alpha1.VnicSpec.IfinfoCase getIfinfoCase();
}
