// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subnet.proto

package opi_api.network.cloud.v1alpha1;

/**
 * <pre>
 * SubnetSpec captures subnet specific configuration
 * </pre>
 *
 * Protobuf type {@code opi_api.network.cloud.v1alpha1.SubnetSpec}
 */
public final class SubnetSpec extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opi_api.network.cloud.v1alpha1.SubnetSpec)
    SubnetSpecOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SubnetSpec.newBuilder() to construct.
  private SubnetSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SubnetSpec() {
    ipv6VirtualRouterIp_ = com.google.protobuf.ByteString.EMPTY;
    virtualRouterMac_ = com.google.protobuf.ByteString.EMPTY;
    ingessV4SecurityPolicyId_ = java.util.Collections.emptyList();
    ingressV6SecurityPolicyId_ = java.util.Collections.emptyList();
    egressV4SecurityPolicyId_ = java.util.Collections.emptyList();
    egressV6SecurityPolicyId_ = java.util.Collections.emptyList();
    hostInterfaceId_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SubnetSpec();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SubnetSpec(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            opi_api.common.v1.ObjectKey.Builder subBuilder = null;
            if (id_ != null) {
              subBuilder = id_.toBuilder();
            }
            id_ = input.readMessage(opi_api.common.v1.ObjectKey.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(id_);
              id_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            opi_api.common.v1.ObjectKey.Builder subBuilder = null;
            if (vpcId_ != null) {
              subBuilder = vpcId_.toBuilder();
            }
            vpcId_ = input.readMessage(opi_api.common.v1.ObjectKey.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(vpcId_);
              vpcId_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.Builder subBuilder = null;
            if (v4Prefix_ != null) {
              subBuilder = v4Prefix_.toBuilder();
            }
            v4Prefix_ = input.readMessage(opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(v4Prefix_);
              v4Prefix_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.Builder subBuilder = null;
            if (v6Prefix_ != null) {
              subBuilder = v6Prefix_.toBuilder();
            }
            v6Prefix_ = input.readMessage(opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(v6Prefix_);
              v6Prefix_ = subBuilder.buildPartial();
            }

            break;
          }
          case 40: {

            ipv4VirtualRouterIp_ = input.readUInt32();
            break;
          }
          case 50: {

            ipv6VirtualRouterIp_ = input.readBytes();
            break;
          }
          case 58: {

            virtualRouterMac_ = input.readBytes();
            break;
          }
          case 66: {
            opi_api.common.v1.ObjectKey.Builder subBuilder = null;
            if (v4RouteTableId_ != null) {
              subBuilder = v4RouteTableId_.toBuilder();
            }
            v4RouteTableId_ = input.readMessage(opi_api.common.v1.ObjectKey.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(v4RouteTableId_);
              v4RouteTableId_ = subBuilder.buildPartial();
            }

            break;
          }
          case 74: {
            opi_api.common.v1.ObjectKey.Builder subBuilder = null;
            if (v6RouterTableId_ != null) {
              subBuilder = v6RouterTableId_.toBuilder();
            }
            v6RouterTableId_ = input.readMessage(opi_api.common.v1.ObjectKey.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(v6RouterTableId_);
              v6RouterTableId_ = subBuilder.buildPartial();
            }

            break;
          }
          case 82: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              ingessV4SecurityPolicyId_ = new java.util.ArrayList<opi_api.common.v1.ObjectKey>();
              mutable_bitField0_ |= 0x00000001;
            }
            ingessV4SecurityPolicyId_.add(
                input.readMessage(opi_api.common.v1.ObjectKey.parser(), extensionRegistry));
            break;
          }
          case 90: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              ingressV6SecurityPolicyId_ = new java.util.ArrayList<opi_api.common.v1.ObjectKey>();
              mutable_bitField0_ |= 0x00000002;
            }
            ingressV6SecurityPolicyId_.add(
                input.readMessage(opi_api.common.v1.ObjectKey.parser(), extensionRegistry));
            break;
          }
          case 98: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              egressV4SecurityPolicyId_ = new java.util.ArrayList<opi_api.common.v1.ObjectKey>();
              mutable_bitField0_ |= 0x00000004;
            }
            egressV4SecurityPolicyId_.add(
                input.readMessage(opi_api.common.v1.ObjectKey.parser(), extensionRegistry));
            break;
          }
          case 106: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              egressV6SecurityPolicyId_ = new java.util.ArrayList<opi_api.common.v1.ObjectKey>();
              mutable_bitField0_ |= 0x00000008;
            }
            egressV6SecurityPolicyId_.add(
                input.readMessage(opi_api.common.v1.ObjectKey.parser(), extensionRegistry));
            break;
          }
          case 114: {
            opi_api.network.opinetcommon.v1alpha1.Encap.Builder subBuilder = null;
            if (accessEncap_ != null) {
              subBuilder = accessEncap_.toBuilder();
            }
            accessEncap_ = input.readMessage(opi_api.network.opinetcommon.v1alpha1.Encap.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(accessEncap_);
              accessEncap_ = subBuilder.buildPartial();
            }

            break;
          }
          case 122: {
            opi_api.network.opinetcommon.v1alpha1.Encap.Builder subBuilder = null;
            if (fabricEncap_ != null) {
              subBuilder = fabricEncap_.toBuilder();
            }
            fabricEncap_ = input.readMessage(opi_api.network.opinetcommon.v1alpha1.Encap.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(fabricEncap_);
              fabricEncap_ = subBuilder.buildPartial();
            }

            break;
          }
          case 130: {
            if (!((mutable_bitField0_ & 0x00000010) != 0)) {
              hostInterfaceId_ = new java.util.ArrayList<opi_api.common.v1.ObjectKey>();
              mutable_bitField0_ |= 0x00000010;
            }
            hostInterfaceId_.add(
                input.readMessage(opi_api.common.v1.ObjectKey.parser(), extensionRegistry));
            break;
          }
          case 144: {

            tos_ = input.readInt32();
            break;
          }
          case 152: {

            connected_ = input.readBool();
            break;
          }
          case 162: {
            opi_api.common.v1.ObjectKey.Builder subBuilder = null;
            if (ingressDefaultSgPolicy_ != null) {
              subBuilder = ingressDefaultSgPolicy_.toBuilder();
            }
            ingressDefaultSgPolicy_ = input.readMessage(opi_api.common.v1.ObjectKey.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(ingressDefaultSgPolicy_);
              ingressDefaultSgPolicy_ = subBuilder.buildPartial();
            }

            break;
          }
          case 170: {
            opi_api.common.v1.ObjectKey.Builder subBuilder = null;
            if (egressDefaultSgPolicy_ != null) {
              subBuilder = egressDefaultSgPolicy_.toBuilder();
            }
            egressDefaultSgPolicy_ = input.readMessage(opi_api.common.v1.ObjectKey.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(egressDefaultSgPolicy_);
              egressDefaultSgPolicy_ = subBuilder.buildPartial();
            }

            break;
          }
          case 176: {

            remoteSubnet_ = input.readBool();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        ingessV4SecurityPolicyId_ = java.util.Collections.unmodifiableList(ingessV4SecurityPolicyId_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        ingressV6SecurityPolicyId_ = java.util.Collections.unmodifiableList(ingressV6SecurityPolicyId_);
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        egressV4SecurityPolicyId_ = java.util.Collections.unmodifiableList(egressV4SecurityPolicyId_);
      }
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        egressV6SecurityPolicyId_ = java.util.Collections.unmodifiableList(egressV6SecurityPolicyId_);
      }
      if (((mutable_bitField0_ & 0x00000010) != 0)) {
        hostInterfaceId_ = java.util.Collections.unmodifiableList(hostInterfaceId_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return opi_api.network.cloud.v1alpha1.SubnetProto.internal_static_opi_api_network_cloud_v1alpha1_SubnetSpec_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return opi_api.network.cloud.v1alpha1.SubnetProto.internal_static_opi_api_network_cloud_v1alpha1_SubnetSpec_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            opi_api.network.cloud.v1alpha1.SubnetSpec.class, opi_api.network.cloud.v1alpha1.SubnetSpec.Builder.class);
  }

  public static final int ID_FIELD_NUMBER = 1;
  private opi_api.common.v1.ObjectKey id_;
  /**
   * <pre>
   * unique identifier of the subnet
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   * @return Whether the id field is set.
   */
  @java.lang.Override
  public boolean hasId() {
    return id_ != null;
  }
  /**
   * <pre>
   * unique identifier of the subnet
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   * @return The id.
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKey getId() {
    return id_ == null ? opi_api.common.v1.ObjectKey.getDefaultInstance() : id_;
  }
  /**
   * <pre>
   * unique identifier of the subnet
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKeyOrBuilder getIdOrBuilder() {
    return getId();
  }

  public static final int VPC_ID_FIELD_NUMBER = 2;
  private opi_api.common.v1.ObjectKey vpcId_;
  /**
   * <pre>
   * virtual private cloud this subnet is belongs to
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey vpc_id = 2;</code>
   * @return Whether the vpcId field is set.
   */
  @java.lang.Override
  public boolean hasVpcId() {
    return vpcId_ != null;
  }
  /**
   * <pre>
   * virtual private cloud this subnet is belongs to
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey vpc_id = 2;</code>
   * @return The vpcId.
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKey getVpcId() {
    return vpcId_ == null ? opi_api.common.v1.ObjectKey.getDefaultInstance() : vpcId_;
  }
  /**
   * <pre>
   * virtual private cloud this subnet is belongs to
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey vpc_id = 2;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKeyOrBuilder getVpcIdOrBuilder() {
    return getVpcId();
  }

  public static final int V4_PREFIX_FIELD_NUMBER = 3;
  private opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4Prefix_;
  /**
   * <pre>
   * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 3;</code>
   * @return Whether the v4Prefix field is set.
   */
  @java.lang.Override
  public boolean hasV4Prefix() {
    return v4Prefix_ != null;
  }
  /**
   * <pre>
   * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 3;</code>
   * @return The v4Prefix.
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.IPv4Prefix getV4Prefix() {
    return v4Prefix_ == null ? opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.getDefaultInstance() : v4Prefix_;
  }
  /**
   * <pre>
   * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 3;</code>
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.IPv4PrefixOrBuilder getV4PrefixOrBuilder() {
    return getV4Prefix();
  }

  public static final int V6_PREFIX_FIELD_NUMBER = 4;
  private opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6Prefix_;
  /**
   * <pre>
   * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 4;</code>
   * @return Whether the v6Prefix field is set.
   */
  @java.lang.Override
  public boolean hasV6Prefix() {
    return v6Prefix_ != null;
  }
  /**
   * <pre>
   * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 4;</code>
   * @return The v6Prefix.
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.IPv6Prefix getV6Prefix() {
    return v6Prefix_ == null ? opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.getDefaultInstance() : v6Prefix_;
  }
  /**
   * <pre>
   * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 4;</code>
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.IPv6PrefixOrBuilder getV6PrefixOrBuilder() {
    return getV6Prefix();
  }

  public static final int IPV4_VIRTUAL_ROUTER_IP_FIELD_NUMBER = 5;
  private int ipv4VirtualRouterIp_;
  /**
   * <pre>
   * IPv4 Virtual Router (VR) IP of this subnet, this IP is owned by the device
   * and packets originated by this device carry this IP as source IP
   * (-- api-linter: core::0141::forbidden-types=disabled
   *     aip.dev/not-precedent: ipv4 address is unsigned. --)
   * </pre>
   *
   * <code>uint32 ipv4_virtual_router_ip = 5;</code>
   * @return The ipv4VirtualRouterIp.
   */
  @java.lang.Override
  public int getIpv4VirtualRouterIp() {
    return ipv4VirtualRouterIp_;
  }

  public static final int IPV6_VIRTUAL_ROUTER_IP_FIELD_NUMBER = 6;
  private com.google.protobuf.ByteString ipv6VirtualRouterIp_;
  /**
   * <pre>
   * Ipv6 Virtual Router (VR) IP of this subnet, this IP is owned by the device
   * and packets originated by this device carry this IP as source IP
   * </pre>
   *
   * <code>bytes ipv6_virtual_router_ip = 6;</code>
   * @return The ipv6VirtualRouterIp.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getIpv6VirtualRouterIp() {
    return ipv6VirtualRouterIp_;
  }

  public static final int VIRTUAL_ROUTER_MAC_FIELD_NUMBER = 7;
  private com.google.protobuf.ByteString virtualRouterMac_;
  /**
   * <pre>
   * Virtual Router (VR) MAC address, any packets originated or routed by
   * the device carry this MAC as source MAC
   * </pre>
   *
   * <code>bytes virtual_router_mac = 7;</code>
   * @return The virtualRouterMac.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getVirtualRouterMac() {
    return virtualRouterMac_;
  }

  public static final int V4_ROUTE_TABLE_ID_FIELD_NUMBER = 8;
  private opi_api.common.v1.ObjectKey v4RouteTableId_;
  /**
   * <pre>
   * identifier of the IPv4 route table to be used
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey v4_route_table_id = 8;</code>
   * @return Whether the v4RouteTableId field is set.
   */
  @java.lang.Override
  public boolean hasV4RouteTableId() {
    return v4RouteTableId_ != null;
  }
  /**
   * <pre>
   * identifier of the IPv4 route table to be used
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey v4_route_table_id = 8;</code>
   * @return The v4RouteTableId.
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKey getV4RouteTableId() {
    return v4RouteTableId_ == null ? opi_api.common.v1.ObjectKey.getDefaultInstance() : v4RouteTableId_;
  }
  /**
   * <pre>
   * identifier of the IPv4 route table to be used
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey v4_route_table_id = 8;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKeyOrBuilder getV4RouteTableIdOrBuilder() {
    return getV4RouteTableId();
  }

  public static final int V6_ROUTER_TABLE_ID_FIELD_NUMBER = 9;
  private opi_api.common.v1.ObjectKey v6RouterTableId_;
  /**
   * <pre>
   * identifier of the IPv6 route table to be used, if any
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey v6_router_table_id = 9;</code>
   * @return Whether the v6RouterTableId field is set.
   */
  @java.lang.Override
  public boolean hasV6RouterTableId() {
    return v6RouterTableId_ != null;
  }
  /**
   * <pre>
   * identifier of the IPv6 route table to be used, if any
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey v6_router_table_id = 9;</code>
   * @return The v6RouterTableId.
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKey getV6RouterTableId() {
    return v6RouterTableId_ == null ? opi_api.common.v1.ObjectKey.getDefaultInstance() : v6RouterTableId_;
  }
  /**
   * <pre>
   * identifier of the IPv6 route table to be used, if any
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey v6_router_table_id = 9;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKeyOrBuilder getV6RouterTableIdOrBuilder() {
    return getV6RouterTableId();
  }

  public static final int INGESS_V4_SECURITY_POLICY_ID_FIELD_NUMBER = 10;
  private java.util.List<opi_api.common.v1.ObjectKey> ingessV4SecurityPolicyId_;
  /**
   * <pre>
   * security policies per subnet:
   * - all vnics in this subnet will inherit the policies configured under subnet
   * - multiple policies per vnic per direction (ingress/egress) can be specified
   * - an implementation may limit the #policies per subnet in each direction
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
   */
  @java.lang.Override
  public java.util.List<opi_api.common.v1.ObjectKey> getIngessV4SecurityPolicyIdList() {
    return ingessV4SecurityPolicyId_;
  }
  /**
   * <pre>
   * security policies per subnet:
   * - all vnics in this subnet will inherit the policies configured under subnet
   * - multiple policies per vnic per direction (ingress/egress) can be specified
   * - an implementation may limit the #policies per subnet in each direction
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
   */
  @java.lang.Override
  public java.util.List<? extends opi_api.common.v1.ObjectKeyOrBuilder> 
      getIngessV4SecurityPolicyIdOrBuilderList() {
    return ingessV4SecurityPolicyId_;
  }
  /**
   * <pre>
   * security policies per subnet:
   * - all vnics in this subnet will inherit the policies configured under subnet
   * - multiple policies per vnic per direction (ingress/egress) can be specified
   * - an implementation may limit the #policies per subnet in each direction
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
   */
  @java.lang.Override
  public int getIngessV4SecurityPolicyIdCount() {
    return ingessV4SecurityPolicyId_.size();
  }
  /**
   * <pre>
   * security policies per subnet:
   * - all vnics in this subnet will inherit the policies configured under subnet
   * - multiple policies per vnic per direction (ingress/egress) can be specified
   * - an implementation may limit the #policies per subnet in each direction
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKey getIngessV4SecurityPolicyId(int index) {
    return ingessV4SecurityPolicyId_.get(index);
  }
  /**
   * <pre>
   * security policies per subnet:
   * - all vnics in this subnet will inherit the policies configured under subnet
   * - multiple policies per vnic per direction (ingress/egress) can be specified
   * - an implementation may limit the #policies per subnet in each direction
   * identifier of ingress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKeyOrBuilder getIngessV4SecurityPolicyIdOrBuilder(
      int index) {
    return ingessV4SecurityPolicyId_.get(index);
  }

  public static final int INGRESS_V6_SECURITY_POLICY_ID_FIELD_NUMBER = 11;
  private java.util.List<opi_api.common.v1.ObjectKey> ingressV6SecurityPolicyId_;
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
   */
  @java.lang.Override
  public java.util.List<opi_api.common.v1.ObjectKey> getIngressV6SecurityPolicyIdList() {
    return ingressV6SecurityPolicyId_;
  }
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
   */
  @java.lang.Override
  public java.util.List<? extends opi_api.common.v1.ObjectKeyOrBuilder> 
      getIngressV6SecurityPolicyIdOrBuilderList() {
    return ingressV6SecurityPolicyId_;
  }
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
   */
  @java.lang.Override
  public int getIngressV6SecurityPolicyIdCount() {
    return ingressV6SecurityPolicyId_.size();
  }
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKey getIngressV6SecurityPolicyId(int index) {
    return ingressV6SecurityPolicyId_.get(index);
  }
  /**
   * <pre>
   * identifier of ingress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKeyOrBuilder getIngressV6SecurityPolicyIdOrBuilder(
      int index) {
    return ingressV6SecurityPolicyId_.get(index);
  }

  public static final int EGRESS_V4_SECURITY_POLICY_ID_FIELD_NUMBER = 12;
  private java.util.List<opi_api.common.v1.ObjectKey> egressV4SecurityPolicyId_;
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
   */
  @java.lang.Override
  public java.util.List<opi_api.common.v1.ObjectKey> getEgressV4SecurityPolicyIdList() {
    return egressV4SecurityPolicyId_;
  }
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
   */
  @java.lang.Override
  public java.util.List<? extends opi_api.common.v1.ObjectKeyOrBuilder> 
      getEgressV4SecurityPolicyIdOrBuilderList() {
    return egressV4SecurityPolicyId_;
  }
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
   */
  @java.lang.Override
  public int getEgressV4SecurityPolicyIdCount() {
    return egressV4SecurityPolicyId_.size();
  }
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKey getEgressV4SecurityPolicyId(int index) {
    return egressV4SecurityPolicyId_.get(index);
  }
  /**
   * <pre>
   * identifier of egress IPv4 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKeyOrBuilder getEgressV4SecurityPolicyIdOrBuilder(
      int index) {
    return egressV4SecurityPolicyId_.get(index);
  }

  public static final int EGRESS_V6_SECURITY_POLICY_ID_FIELD_NUMBER = 13;
  private java.util.List<opi_api.common.v1.ObjectKey> egressV6SecurityPolicyId_;
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
   */
  @java.lang.Override
  public java.util.List<opi_api.common.v1.ObjectKey> getEgressV6SecurityPolicyIdList() {
    return egressV6SecurityPolicyId_;
  }
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
   */
  @java.lang.Override
  public java.util.List<? extends opi_api.common.v1.ObjectKeyOrBuilder> 
      getEgressV6SecurityPolicyIdOrBuilderList() {
    return egressV6SecurityPolicyId_;
  }
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
   */
  @java.lang.Override
  public int getEgressV6SecurityPolicyIdCount() {
    return egressV6SecurityPolicyId_.size();
  }
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKey getEgressV6SecurityPolicyId(int index) {
    return egressV6SecurityPolicyId_.get(index);
  }
  /**
   * <pre>
   * identifier of egress IPv6 security policy to be enforced
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKeyOrBuilder getEgressV6SecurityPolicyIdOrBuilder(
      int index) {
    return egressV6SecurityPolicyId_.get(index);
  }

  public static final int ACCESS_ENCAP_FIELD_NUMBER = 14;
  private opi_api.network.opinetcommon.v1alpha1.Encap accessEncap_;
  /**
   * <pre>
   * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
   * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
   * traffic with same DOT1Q tag, in which case vnics are identified with
   * their MAC or IP based on the datapath in addition to the DOT1Q tag
   * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
   *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
   *   VNIC etc.)
   * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
   *   all traffic from vnics in that subnet is transmitted with this encap
   *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
   *   inherit the subnet's encap)
   * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
   *   certain tag value but some vnic's in that subnet to have different
   *   DOT1Q encap than that of subnet
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 14;</code>
   * @return Whether the accessEncap field is set.
   */
  @java.lang.Override
  public boolean hasAccessEncap() {
    return accessEncap_ != null;
  }
  /**
   * <pre>
   * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
   * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
   * traffic with same DOT1Q tag, in which case vnics are identified with
   * their MAC or IP based on the datapath in addition to the DOT1Q tag
   * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
   *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
   *   VNIC etc.)
   * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
   *   all traffic from vnics in that subnet is transmitted with this encap
   *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
   *   inherit the subnet's encap)
   * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
   *   certain tag value but some vnic's in that subnet to have different
   *   DOT1Q encap than that of subnet
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 14;</code>
   * @return The accessEncap.
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.Encap getAccessEncap() {
    return accessEncap_ == null ? opi_api.network.opinetcommon.v1alpha1.Encap.getDefaultInstance() : accessEncap_;
  }
  /**
   * <pre>
   * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
   * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
   * traffic with same DOT1Q tag, in which case vnics are identified with
   * their MAC or IP based on the datapath in addition to the DOT1Q tag
   * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
   *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
   *   VNIC etc.)
   * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
   *   all traffic from vnics in that subnet is transmitted with this encap
   *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
   *   inherit the subnet's encap)
   * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
   *   certain tag value but some vnic's in that subnet to have different
   *   DOT1Q encap than that of subnet
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 14;</code>
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder getAccessEncapOrBuilder() {
    return getAccessEncap();
  }

  public static final int FABRIC_ENCAP_FIELD_NUMBER = 15;
  private opi_api.network.opinetcommon.v1alpha1.Encap fabricEncap_;
  /**
   * <pre>
   * encapped traffic coming with the specified encap from fabric side will be
   * mapped to this subnet and traffic from workloads in this subnet will carry
   * this encap towards the fabric side
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 15;</code>
   * @return Whether the fabricEncap field is set.
   */
  @java.lang.Override
  public boolean hasFabricEncap() {
    return fabricEncap_ != null;
  }
  /**
   * <pre>
   * encapped traffic coming with the specified encap from fabric side will be
   * mapped to this subnet and traffic from workloads in this subnet will carry
   * this encap towards the fabric side
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 15;</code>
   * @return The fabricEncap.
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.Encap getFabricEncap() {
    return fabricEncap_ == null ? opi_api.network.opinetcommon.v1alpha1.Encap.getDefaultInstance() : fabricEncap_;
  }
  /**
   * <pre>
   * encapped traffic coming with the specified encap from fabric side will be
   * mapped to this subnet and traffic from workloads in this subnet will carry
   * this encap towards the fabric side
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 15;</code>
   */
  @java.lang.Override
  public opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder getFabricEncapOrBuilder() {
    return getFabricEncap();
  }

  public static final int HOST_INTERFACE_ID_FIELD_NUMBER = 16;
  private java.util.List<opi_api.common.v1.ObjectKey> hostInterfaceId_;
  /**
   * <pre>
   * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
   * present, subnet needs to be attached to a PF/VF (aka. host interface),
   * HostIf is list of such VF/PFs
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
   */
  @java.lang.Override
  public java.util.List<opi_api.common.v1.ObjectKey> getHostInterfaceIdList() {
    return hostInterfaceId_;
  }
  /**
   * <pre>
   * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
   * present, subnet needs to be attached to a PF/VF (aka. host interface),
   * HostIf is list of such VF/PFs
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
   */
  @java.lang.Override
  public java.util.List<? extends opi_api.common.v1.ObjectKeyOrBuilder> 
      getHostInterfaceIdOrBuilderList() {
    return hostInterfaceId_;
  }
  /**
   * <pre>
   * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
   * present, subnet needs to be attached to a PF/VF (aka. host interface),
   * HostIf is list of such VF/PFs
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
   */
  @java.lang.Override
  public int getHostInterfaceIdCount() {
    return hostInterfaceId_.size();
  }
  /**
   * <pre>
   * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
   * present, subnet needs to be attached to a PF/VF (aka. host interface),
   * HostIf is list of such VF/PFs
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKey getHostInterfaceId(int index) {
    return hostInterfaceId_.get(index);
  }
  /**
   * <pre>
   * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
   * present, subnet needs to be attached to a PF/VF (aka. host interface),
   * HostIf is list of such VF/PFs
   * </pre>
   *
   * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKeyOrBuilder getHostInterfaceIdOrBuilder(
      int index) {
    return hostInterfaceId_.get(index);
  }

  public static final int TOS_FIELD_NUMBER = 18;
  private int tos_;
  /**
   * <pre>
   * ToS field is 1 byte value that is populated in the DSCP field of IPv4 outer
   * header or in the Traffic Class field of IPv6 outer header, this value, if
   * non-zero, will be used as-is (i.e., not interpreted) during encap time by
   * the dataplane; tunnel objects, if configured with ToS, will override this
   * </pre>
   *
   * <code>int32 tos = 18;</code>
   * @return The tos.
   */
  @java.lang.Override
  public int getTos() {
    return tos_;
  }

  public static final int CONNECTED_FIELD_NUMBER = 19;
  private boolean connected_;
  /**
   * <pre>
   * a subnet is marked connected if vnics in this subnet can communicate with
   * external endpoints via routes with some kind of NAT (e.g. 1:1 NAT, NAPT)
   * </pre>
   *
   * <code>bool connected = 19;</code>
   * @return The connected.
   */
  @java.lang.Override
  public boolean getConnected() {
    return connected_;
  }

  public static final int INGRESS_DEFAULT_SG_POLICY_FIELD_NUMBER = 20;
  private opi_api.common.v1.ObjectKey ingressDefaultSgPolicy_;
  /**
   * <pre>
   * default ingress stateful security policy for this subnet
   * if configured, is the 1st policy evaluated before other security policies on a given vnic
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey ingress_default_sg_policy = 20;</code>
   * @return Whether the ingressDefaultSgPolicy field is set.
   */
  @java.lang.Override
  public boolean hasIngressDefaultSgPolicy() {
    return ingressDefaultSgPolicy_ != null;
  }
  /**
   * <pre>
   * default ingress stateful security policy for this subnet
   * if configured, is the 1st policy evaluated before other security policies on a given vnic
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey ingress_default_sg_policy = 20;</code>
   * @return The ingressDefaultSgPolicy.
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKey getIngressDefaultSgPolicy() {
    return ingressDefaultSgPolicy_ == null ? opi_api.common.v1.ObjectKey.getDefaultInstance() : ingressDefaultSgPolicy_;
  }
  /**
   * <pre>
   * default ingress stateful security policy for this subnet
   * if configured, is the 1st policy evaluated before other security policies on a given vnic
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey ingress_default_sg_policy = 20;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKeyOrBuilder getIngressDefaultSgPolicyOrBuilder() {
    return getIngressDefaultSgPolicy();
  }

  public static final int EGRESS_DEFAULT_SG_POLICY_FIELD_NUMBER = 21;
  private opi_api.common.v1.ObjectKey egressDefaultSgPolicy_;
  /**
   * <pre>
   * default egress stateful security policy for this subnet
   * if configured, is the 1st policy evaluated before other security polices on a given vnic
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey egress_default_sg_policy = 21;</code>
   * @return Whether the egressDefaultSgPolicy field is set.
   */
  @java.lang.Override
  public boolean hasEgressDefaultSgPolicy() {
    return egressDefaultSgPolicy_ != null;
  }
  /**
   * <pre>
   * default egress stateful security policy for this subnet
   * if configured, is the 1st policy evaluated before other security polices on a given vnic
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey egress_default_sg_policy = 21;</code>
   * @return The egressDefaultSgPolicy.
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKey getEgressDefaultSgPolicy() {
    return egressDefaultSgPolicy_ == null ? opi_api.common.v1.ObjectKey.getDefaultInstance() : egressDefaultSgPolicy_;
  }
  /**
   * <pre>
   * default egress stateful security policy for this subnet
   * if configured, is the 1st policy evaluated before other security polices on a given vnic
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey egress_default_sg_policy = 21;</code>
   */
  @java.lang.Override
  public opi_api.common.v1.ObjectKeyOrBuilder getEgressDefaultSgPolicyOrBuilder() {
    return getEgressDefaultSgPolicy();
  }

  public static final int REMOTE_SUBNET_FIELD_NUMBER = 22;
  private boolean remoteSubnet_;
  /**
   * <pre>
   * remote_subnet, if set, indicates that the subnet does not have any IP
   * mappings in local pod and such subnets are used to program all remote
   * pod IP mappings behind it
   * </pre>
   *
   * <code>bool remote_subnet = 22;</code>
   * @return The remoteSubnet.
   */
  @java.lang.Override
  public boolean getRemoteSubnet() {
    return remoteSubnet_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (id_ != null) {
      output.writeMessage(1, getId());
    }
    if (vpcId_ != null) {
      output.writeMessage(2, getVpcId());
    }
    if (v4Prefix_ != null) {
      output.writeMessage(3, getV4Prefix());
    }
    if (v6Prefix_ != null) {
      output.writeMessage(4, getV6Prefix());
    }
    if (ipv4VirtualRouterIp_ != 0) {
      output.writeUInt32(5, ipv4VirtualRouterIp_);
    }
    if (!ipv6VirtualRouterIp_.isEmpty()) {
      output.writeBytes(6, ipv6VirtualRouterIp_);
    }
    if (!virtualRouterMac_.isEmpty()) {
      output.writeBytes(7, virtualRouterMac_);
    }
    if (v4RouteTableId_ != null) {
      output.writeMessage(8, getV4RouteTableId());
    }
    if (v6RouterTableId_ != null) {
      output.writeMessage(9, getV6RouterTableId());
    }
    for (int i = 0; i < ingessV4SecurityPolicyId_.size(); i++) {
      output.writeMessage(10, ingessV4SecurityPolicyId_.get(i));
    }
    for (int i = 0; i < ingressV6SecurityPolicyId_.size(); i++) {
      output.writeMessage(11, ingressV6SecurityPolicyId_.get(i));
    }
    for (int i = 0; i < egressV4SecurityPolicyId_.size(); i++) {
      output.writeMessage(12, egressV4SecurityPolicyId_.get(i));
    }
    for (int i = 0; i < egressV6SecurityPolicyId_.size(); i++) {
      output.writeMessage(13, egressV6SecurityPolicyId_.get(i));
    }
    if (accessEncap_ != null) {
      output.writeMessage(14, getAccessEncap());
    }
    if (fabricEncap_ != null) {
      output.writeMessage(15, getFabricEncap());
    }
    for (int i = 0; i < hostInterfaceId_.size(); i++) {
      output.writeMessage(16, hostInterfaceId_.get(i));
    }
    if (tos_ != 0) {
      output.writeInt32(18, tos_);
    }
    if (connected_ != false) {
      output.writeBool(19, connected_);
    }
    if (ingressDefaultSgPolicy_ != null) {
      output.writeMessage(20, getIngressDefaultSgPolicy());
    }
    if (egressDefaultSgPolicy_ != null) {
      output.writeMessage(21, getEgressDefaultSgPolicy());
    }
    if (remoteSubnet_ != false) {
      output.writeBool(22, remoteSubnet_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (id_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getId());
    }
    if (vpcId_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getVpcId());
    }
    if (v4Prefix_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getV4Prefix());
    }
    if (v6Prefix_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getV6Prefix());
    }
    if (ipv4VirtualRouterIp_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(5, ipv4VirtualRouterIp_);
    }
    if (!ipv6VirtualRouterIp_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(6, ipv6VirtualRouterIp_);
    }
    if (!virtualRouterMac_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(7, virtualRouterMac_);
    }
    if (v4RouteTableId_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getV4RouteTableId());
    }
    if (v6RouterTableId_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getV6RouterTableId());
    }
    for (int i = 0; i < ingessV4SecurityPolicyId_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, ingessV4SecurityPolicyId_.get(i));
    }
    for (int i = 0; i < ingressV6SecurityPolicyId_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, ingressV6SecurityPolicyId_.get(i));
    }
    for (int i = 0; i < egressV4SecurityPolicyId_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, egressV4SecurityPolicyId_.get(i));
    }
    for (int i = 0; i < egressV6SecurityPolicyId_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, egressV6SecurityPolicyId_.get(i));
    }
    if (accessEncap_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, getAccessEncap());
    }
    if (fabricEncap_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, getFabricEncap());
    }
    for (int i = 0; i < hostInterfaceId_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, hostInterfaceId_.get(i));
    }
    if (tos_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(18, tos_);
    }
    if (connected_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(19, connected_);
    }
    if (ingressDefaultSgPolicy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, getIngressDefaultSgPolicy());
    }
    if (egressDefaultSgPolicy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(21, getEgressDefaultSgPolicy());
    }
    if (remoteSubnet_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(22, remoteSubnet_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof opi_api.network.cloud.v1alpha1.SubnetSpec)) {
      return super.equals(obj);
    }
    opi_api.network.cloud.v1alpha1.SubnetSpec other = (opi_api.network.cloud.v1alpha1.SubnetSpec) obj;

    if (hasId() != other.hasId()) return false;
    if (hasId()) {
      if (!getId()
          .equals(other.getId())) return false;
    }
    if (hasVpcId() != other.hasVpcId()) return false;
    if (hasVpcId()) {
      if (!getVpcId()
          .equals(other.getVpcId())) return false;
    }
    if (hasV4Prefix() != other.hasV4Prefix()) return false;
    if (hasV4Prefix()) {
      if (!getV4Prefix()
          .equals(other.getV4Prefix())) return false;
    }
    if (hasV6Prefix() != other.hasV6Prefix()) return false;
    if (hasV6Prefix()) {
      if (!getV6Prefix()
          .equals(other.getV6Prefix())) return false;
    }
    if (getIpv4VirtualRouterIp()
        != other.getIpv4VirtualRouterIp()) return false;
    if (!getIpv6VirtualRouterIp()
        .equals(other.getIpv6VirtualRouterIp())) return false;
    if (!getVirtualRouterMac()
        .equals(other.getVirtualRouterMac())) return false;
    if (hasV4RouteTableId() != other.hasV4RouteTableId()) return false;
    if (hasV4RouteTableId()) {
      if (!getV4RouteTableId()
          .equals(other.getV4RouteTableId())) return false;
    }
    if (hasV6RouterTableId() != other.hasV6RouterTableId()) return false;
    if (hasV6RouterTableId()) {
      if (!getV6RouterTableId()
          .equals(other.getV6RouterTableId())) return false;
    }
    if (!getIngessV4SecurityPolicyIdList()
        .equals(other.getIngessV4SecurityPolicyIdList())) return false;
    if (!getIngressV6SecurityPolicyIdList()
        .equals(other.getIngressV6SecurityPolicyIdList())) return false;
    if (!getEgressV4SecurityPolicyIdList()
        .equals(other.getEgressV4SecurityPolicyIdList())) return false;
    if (!getEgressV6SecurityPolicyIdList()
        .equals(other.getEgressV6SecurityPolicyIdList())) return false;
    if (hasAccessEncap() != other.hasAccessEncap()) return false;
    if (hasAccessEncap()) {
      if (!getAccessEncap()
          .equals(other.getAccessEncap())) return false;
    }
    if (hasFabricEncap() != other.hasFabricEncap()) return false;
    if (hasFabricEncap()) {
      if (!getFabricEncap()
          .equals(other.getFabricEncap())) return false;
    }
    if (!getHostInterfaceIdList()
        .equals(other.getHostInterfaceIdList())) return false;
    if (getTos()
        != other.getTos()) return false;
    if (getConnected()
        != other.getConnected()) return false;
    if (hasIngressDefaultSgPolicy() != other.hasIngressDefaultSgPolicy()) return false;
    if (hasIngressDefaultSgPolicy()) {
      if (!getIngressDefaultSgPolicy()
          .equals(other.getIngressDefaultSgPolicy())) return false;
    }
    if (hasEgressDefaultSgPolicy() != other.hasEgressDefaultSgPolicy()) return false;
    if (hasEgressDefaultSgPolicy()) {
      if (!getEgressDefaultSgPolicy()
          .equals(other.getEgressDefaultSgPolicy())) return false;
    }
    if (getRemoteSubnet()
        != other.getRemoteSubnet()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasId()) {
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
    }
    if (hasVpcId()) {
      hash = (37 * hash) + VPC_ID_FIELD_NUMBER;
      hash = (53 * hash) + getVpcId().hashCode();
    }
    if (hasV4Prefix()) {
      hash = (37 * hash) + V4_PREFIX_FIELD_NUMBER;
      hash = (53 * hash) + getV4Prefix().hashCode();
    }
    if (hasV6Prefix()) {
      hash = (37 * hash) + V6_PREFIX_FIELD_NUMBER;
      hash = (53 * hash) + getV6Prefix().hashCode();
    }
    hash = (37 * hash) + IPV4_VIRTUAL_ROUTER_IP_FIELD_NUMBER;
    hash = (53 * hash) + getIpv4VirtualRouterIp();
    hash = (37 * hash) + IPV6_VIRTUAL_ROUTER_IP_FIELD_NUMBER;
    hash = (53 * hash) + getIpv6VirtualRouterIp().hashCode();
    hash = (37 * hash) + VIRTUAL_ROUTER_MAC_FIELD_NUMBER;
    hash = (53 * hash) + getVirtualRouterMac().hashCode();
    if (hasV4RouteTableId()) {
      hash = (37 * hash) + V4_ROUTE_TABLE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getV4RouteTableId().hashCode();
    }
    if (hasV6RouterTableId()) {
      hash = (37 * hash) + V6_ROUTER_TABLE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getV6RouterTableId().hashCode();
    }
    if (getIngessV4SecurityPolicyIdCount() > 0) {
      hash = (37 * hash) + INGESS_V4_SECURITY_POLICY_ID_FIELD_NUMBER;
      hash = (53 * hash) + getIngessV4SecurityPolicyIdList().hashCode();
    }
    if (getIngressV6SecurityPolicyIdCount() > 0) {
      hash = (37 * hash) + INGRESS_V6_SECURITY_POLICY_ID_FIELD_NUMBER;
      hash = (53 * hash) + getIngressV6SecurityPolicyIdList().hashCode();
    }
    if (getEgressV4SecurityPolicyIdCount() > 0) {
      hash = (37 * hash) + EGRESS_V4_SECURITY_POLICY_ID_FIELD_NUMBER;
      hash = (53 * hash) + getEgressV4SecurityPolicyIdList().hashCode();
    }
    if (getEgressV6SecurityPolicyIdCount() > 0) {
      hash = (37 * hash) + EGRESS_V6_SECURITY_POLICY_ID_FIELD_NUMBER;
      hash = (53 * hash) + getEgressV6SecurityPolicyIdList().hashCode();
    }
    if (hasAccessEncap()) {
      hash = (37 * hash) + ACCESS_ENCAP_FIELD_NUMBER;
      hash = (53 * hash) + getAccessEncap().hashCode();
    }
    if (hasFabricEncap()) {
      hash = (37 * hash) + FABRIC_ENCAP_FIELD_NUMBER;
      hash = (53 * hash) + getFabricEncap().hashCode();
    }
    if (getHostInterfaceIdCount() > 0) {
      hash = (37 * hash) + HOST_INTERFACE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getHostInterfaceIdList().hashCode();
    }
    hash = (37 * hash) + TOS_FIELD_NUMBER;
    hash = (53 * hash) + getTos();
    hash = (37 * hash) + CONNECTED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getConnected());
    if (hasIngressDefaultSgPolicy()) {
      hash = (37 * hash) + INGRESS_DEFAULT_SG_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + getIngressDefaultSgPolicy().hashCode();
    }
    if (hasEgressDefaultSgPolicy()) {
      hash = (37 * hash) + EGRESS_DEFAULT_SG_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + getEgressDefaultSgPolicy().hashCode();
    }
    hash = (37 * hash) + REMOTE_SUBNET_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getRemoteSubnet());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static opi_api.network.cloud.v1alpha1.SubnetSpec parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(opi_api.network.cloud.v1alpha1.SubnetSpec prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * SubnetSpec captures subnet specific configuration
   * </pre>
   *
   * Protobuf type {@code opi_api.network.cloud.v1alpha1.SubnetSpec}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opi_api.network.cloud.v1alpha1.SubnetSpec)
      opi_api.network.cloud.v1alpha1.SubnetSpecOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return opi_api.network.cloud.v1alpha1.SubnetProto.internal_static_opi_api_network_cloud_v1alpha1_SubnetSpec_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return opi_api.network.cloud.v1alpha1.SubnetProto.internal_static_opi_api_network_cloud_v1alpha1_SubnetSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              opi_api.network.cloud.v1alpha1.SubnetSpec.class, opi_api.network.cloud.v1alpha1.SubnetSpec.Builder.class);
    }

    // Construct using opi_api.network.cloud.v1alpha1.SubnetSpec.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getIngessV4SecurityPolicyIdFieldBuilder();
        getIngressV6SecurityPolicyIdFieldBuilder();
        getEgressV4SecurityPolicyIdFieldBuilder();
        getEgressV6SecurityPolicyIdFieldBuilder();
        getHostInterfaceIdFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (idBuilder_ == null) {
        id_ = null;
      } else {
        id_ = null;
        idBuilder_ = null;
      }
      if (vpcIdBuilder_ == null) {
        vpcId_ = null;
      } else {
        vpcId_ = null;
        vpcIdBuilder_ = null;
      }
      if (v4PrefixBuilder_ == null) {
        v4Prefix_ = null;
      } else {
        v4Prefix_ = null;
        v4PrefixBuilder_ = null;
      }
      if (v6PrefixBuilder_ == null) {
        v6Prefix_ = null;
      } else {
        v6Prefix_ = null;
        v6PrefixBuilder_ = null;
      }
      ipv4VirtualRouterIp_ = 0;

      ipv6VirtualRouterIp_ = com.google.protobuf.ByteString.EMPTY;

      virtualRouterMac_ = com.google.protobuf.ByteString.EMPTY;

      if (v4RouteTableIdBuilder_ == null) {
        v4RouteTableId_ = null;
      } else {
        v4RouteTableId_ = null;
        v4RouteTableIdBuilder_ = null;
      }
      if (v6RouterTableIdBuilder_ == null) {
        v6RouterTableId_ = null;
      } else {
        v6RouterTableId_ = null;
        v6RouterTableIdBuilder_ = null;
      }
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        ingessV4SecurityPolicyId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        ingessV4SecurityPolicyIdBuilder_.clear();
      }
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        ingressV6SecurityPolicyId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        ingressV6SecurityPolicyIdBuilder_.clear();
      }
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        egressV4SecurityPolicyId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        egressV4SecurityPolicyIdBuilder_.clear();
      }
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        egressV6SecurityPolicyId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        egressV6SecurityPolicyIdBuilder_.clear();
      }
      if (accessEncapBuilder_ == null) {
        accessEncap_ = null;
      } else {
        accessEncap_ = null;
        accessEncapBuilder_ = null;
      }
      if (fabricEncapBuilder_ == null) {
        fabricEncap_ = null;
      } else {
        fabricEncap_ = null;
        fabricEncapBuilder_ = null;
      }
      if (hostInterfaceIdBuilder_ == null) {
        hostInterfaceId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
      } else {
        hostInterfaceIdBuilder_.clear();
      }
      tos_ = 0;

      connected_ = false;

      if (ingressDefaultSgPolicyBuilder_ == null) {
        ingressDefaultSgPolicy_ = null;
      } else {
        ingressDefaultSgPolicy_ = null;
        ingressDefaultSgPolicyBuilder_ = null;
      }
      if (egressDefaultSgPolicyBuilder_ == null) {
        egressDefaultSgPolicy_ = null;
      } else {
        egressDefaultSgPolicy_ = null;
        egressDefaultSgPolicyBuilder_ = null;
      }
      remoteSubnet_ = false;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return opi_api.network.cloud.v1alpha1.SubnetProto.internal_static_opi_api_network_cloud_v1alpha1_SubnetSpec_descriptor;
    }

    @java.lang.Override
    public opi_api.network.cloud.v1alpha1.SubnetSpec getDefaultInstanceForType() {
      return opi_api.network.cloud.v1alpha1.SubnetSpec.getDefaultInstance();
    }

    @java.lang.Override
    public opi_api.network.cloud.v1alpha1.SubnetSpec build() {
      opi_api.network.cloud.v1alpha1.SubnetSpec result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public opi_api.network.cloud.v1alpha1.SubnetSpec buildPartial() {
      opi_api.network.cloud.v1alpha1.SubnetSpec result = new opi_api.network.cloud.v1alpha1.SubnetSpec(this);
      int from_bitField0_ = bitField0_;
      if (idBuilder_ == null) {
        result.id_ = id_;
      } else {
        result.id_ = idBuilder_.build();
      }
      if (vpcIdBuilder_ == null) {
        result.vpcId_ = vpcId_;
      } else {
        result.vpcId_ = vpcIdBuilder_.build();
      }
      if (v4PrefixBuilder_ == null) {
        result.v4Prefix_ = v4Prefix_;
      } else {
        result.v4Prefix_ = v4PrefixBuilder_.build();
      }
      if (v6PrefixBuilder_ == null) {
        result.v6Prefix_ = v6Prefix_;
      } else {
        result.v6Prefix_ = v6PrefixBuilder_.build();
      }
      result.ipv4VirtualRouterIp_ = ipv4VirtualRouterIp_;
      result.ipv6VirtualRouterIp_ = ipv6VirtualRouterIp_;
      result.virtualRouterMac_ = virtualRouterMac_;
      if (v4RouteTableIdBuilder_ == null) {
        result.v4RouteTableId_ = v4RouteTableId_;
      } else {
        result.v4RouteTableId_ = v4RouteTableIdBuilder_.build();
      }
      if (v6RouterTableIdBuilder_ == null) {
        result.v6RouterTableId_ = v6RouterTableId_;
      } else {
        result.v6RouterTableId_ = v6RouterTableIdBuilder_.build();
      }
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          ingessV4SecurityPolicyId_ = java.util.Collections.unmodifiableList(ingessV4SecurityPolicyId_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.ingessV4SecurityPolicyId_ = ingessV4SecurityPolicyId_;
      } else {
        result.ingessV4SecurityPolicyId_ = ingessV4SecurityPolicyIdBuilder_.build();
      }
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          ingressV6SecurityPolicyId_ = java.util.Collections.unmodifiableList(ingressV6SecurityPolicyId_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.ingressV6SecurityPolicyId_ = ingressV6SecurityPolicyId_;
      } else {
        result.ingressV6SecurityPolicyId_ = ingressV6SecurityPolicyIdBuilder_.build();
      }
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          egressV4SecurityPolicyId_ = java.util.Collections.unmodifiableList(egressV4SecurityPolicyId_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.egressV4SecurityPolicyId_ = egressV4SecurityPolicyId_;
      } else {
        result.egressV4SecurityPolicyId_ = egressV4SecurityPolicyIdBuilder_.build();
      }
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          egressV6SecurityPolicyId_ = java.util.Collections.unmodifiableList(egressV6SecurityPolicyId_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.egressV6SecurityPolicyId_ = egressV6SecurityPolicyId_;
      } else {
        result.egressV6SecurityPolicyId_ = egressV6SecurityPolicyIdBuilder_.build();
      }
      if (accessEncapBuilder_ == null) {
        result.accessEncap_ = accessEncap_;
      } else {
        result.accessEncap_ = accessEncapBuilder_.build();
      }
      if (fabricEncapBuilder_ == null) {
        result.fabricEncap_ = fabricEncap_;
      } else {
        result.fabricEncap_ = fabricEncapBuilder_.build();
      }
      if (hostInterfaceIdBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          hostInterfaceId_ = java.util.Collections.unmodifiableList(hostInterfaceId_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.hostInterfaceId_ = hostInterfaceId_;
      } else {
        result.hostInterfaceId_ = hostInterfaceIdBuilder_.build();
      }
      result.tos_ = tos_;
      result.connected_ = connected_;
      if (ingressDefaultSgPolicyBuilder_ == null) {
        result.ingressDefaultSgPolicy_ = ingressDefaultSgPolicy_;
      } else {
        result.ingressDefaultSgPolicy_ = ingressDefaultSgPolicyBuilder_.build();
      }
      if (egressDefaultSgPolicyBuilder_ == null) {
        result.egressDefaultSgPolicy_ = egressDefaultSgPolicy_;
      } else {
        result.egressDefaultSgPolicy_ = egressDefaultSgPolicyBuilder_.build();
      }
      result.remoteSubnet_ = remoteSubnet_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof opi_api.network.cloud.v1alpha1.SubnetSpec) {
        return mergeFrom((opi_api.network.cloud.v1alpha1.SubnetSpec)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(opi_api.network.cloud.v1alpha1.SubnetSpec other) {
      if (other == opi_api.network.cloud.v1alpha1.SubnetSpec.getDefaultInstance()) return this;
      if (other.hasId()) {
        mergeId(other.getId());
      }
      if (other.hasVpcId()) {
        mergeVpcId(other.getVpcId());
      }
      if (other.hasV4Prefix()) {
        mergeV4Prefix(other.getV4Prefix());
      }
      if (other.hasV6Prefix()) {
        mergeV6Prefix(other.getV6Prefix());
      }
      if (other.getIpv4VirtualRouterIp() != 0) {
        setIpv4VirtualRouterIp(other.getIpv4VirtualRouterIp());
      }
      if (other.getIpv6VirtualRouterIp() != com.google.protobuf.ByteString.EMPTY) {
        setIpv6VirtualRouterIp(other.getIpv6VirtualRouterIp());
      }
      if (other.getVirtualRouterMac() != com.google.protobuf.ByteString.EMPTY) {
        setVirtualRouterMac(other.getVirtualRouterMac());
      }
      if (other.hasV4RouteTableId()) {
        mergeV4RouteTableId(other.getV4RouteTableId());
      }
      if (other.hasV6RouterTableId()) {
        mergeV6RouterTableId(other.getV6RouterTableId());
      }
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        if (!other.ingessV4SecurityPolicyId_.isEmpty()) {
          if (ingessV4SecurityPolicyId_.isEmpty()) {
            ingessV4SecurityPolicyId_ = other.ingessV4SecurityPolicyId_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureIngessV4SecurityPolicyIdIsMutable();
            ingessV4SecurityPolicyId_.addAll(other.ingessV4SecurityPolicyId_);
          }
          onChanged();
        }
      } else {
        if (!other.ingessV4SecurityPolicyId_.isEmpty()) {
          if (ingessV4SecurityPolicyIdBuilder_.isEmpty()) {
            ingessV4SecurityPolicyIdBuilder_.dispose();
            ingessV4SecurityPolicyIdBuilder_ = null;
            ingessV4SecurityPolicyId_ = other.ingessV4SecurityPolicyId_;
            bitField0_ = (bitField0_ & ~0x00000001);
            ingessV4SecurityPolicyIdBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getIngessV4SecurityPolicyIdFieldBuilder() : null;
          } else {
            ingessV4SecurityPolicyIdBuilder_.addAllMessages(other.ingessV4SecurityPolicyId_);
          }
        }
      }
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        if (!other.ingressV6SecurityPolicyId_.isEmpty()) {
          if (ingressV6SecurityPolicyId_.isEmpty()) {
            ingressV6SecurityPolicyId_ = other.ingressV6SecurityPolicyId_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureIngressV6SecurityPolicyIdIsMutable();
            ingressV6SecurityPolicyId_.addAll(other.ingressV6SecurityPolicyId_);
          }
          onChanged();
        }
      } else {
        if (!other.ingressV6SecurityPolicyId_.isEmpty()) {
          if (ingressV6SecurityPolicyIdBuilder_.isEmpty()) {
            ingressV6SecurityPolicyIdBuilder_.dispose();
            ingressV6SecurityPolicyIdBuilder_ = null;
            ingressV6SecurityPolicyId_ = other.ingressV6SecurityPolicyId_;
            bitField0_ = (bitField0_ & ~0x00000002);
            ingressV6SecurityPolicyIdBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getIngressV6SecurityPolicyIdFieldBuilder() : null;
          } else {
            ingressV6SecurityPolicyIdBuilder_.addAllMessages(other.ingressV6SecurityPolicyId_);
          }
        }
      }
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        if (!other.egressV4SecurityPolicyId_.isEmpty()) {
          if (egressV4SecurityPolicyId_.isEmpty()) {
            egressV4SecurityPolicyId_ = other.egressV4SecurityPolicyId_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureEgressV4SecurityPolicyIdIsMutable();
            egressV4SecurityPolicyId_.addAll(other.egressV4SecurityPolicyId_);
          }
          onChanged();
        }
      } else {
        if (!other.egressV4SecurityPolicyId_.isEmpty()) {
          if (egressV4SecurityPolicyIdBuilder_.isEmpty()) {
            egressV4SecurityPolicyIdBuilder_.dispose();
            egressV4SecurityPolicyIdBuilder_ = null;
            egressV4SecurityPolicyId_ = other.egressV4SecurityPolicyId_;
            bitField0_ = (bitField0_ & ~0x00000004);
            egressV4SecurityPolicyIdBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getEgressV4SecurityPolicyIdFieldBuilder() : null;
          } else {
            egressV4SecurityPolicyIdBuilder_.addAllMessages(other.egressV4SecurityPolicyId_);
          }
        }
      }
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        if (!other.egressV6SecurityPolicyId_.isEmpty()) {
          if (egressV6SecurityPolicyId_.isEmpty()) {
            egressV6SecurityPolicyId_ = other.egressV6SecurityPolicyId_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureEgressV6SecurityPolicyIdIsMutable();
            egressV6SecurityPolicyId_.addAll(other.egressV6SecurityPolicyId_);
          }
          onChanged();
        }
      } else {
        if (!other.egressV6SecurityPolicyId_.isEmpty()) {
          if (egressV6SecurityPolicyIdBuilder_.isEmpty()) {
            egressV6SecurityPolicyIdBuilder_.dispose();
            egressV6SecurityPolicyIdBuilder_ = null;
            egressV6SecurityPolicyId_ = other.egressV6SecurityPolicyId_;
            bitField0_ = (bitField0_ & ~0x00000008);
            egressV6SecurityPolicyIdBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getEgressV6SecurityPolicyIdFieldBuilder() : null;
          } else {
            egressV6SecurityPolicyIdBuilder_.addAllMessages(other.egressV6SecurityPolicyId_);
          }
        }
      }
      if (other.hasAccessEncap()) {
        mergeAccessEncap(other.getAccessEncap());
      }
      if (other.hasFabricEncap()) {
        mergeFabricEncap(other.getFabricEncap());
      }
      if (hostInterfaceIdBuilder_ == null) {
        if (!other.hostInterfaceId_.isEmpty()) {
          if (hostInterfaceId_.isEmpty()) {
            hostInterfaceId_ = other.hostInterfaceId_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureHostInterfaceIdIsMutable();
            hostInterfaceId_.addAll(other.hostInterfaceId_);
          }
          onChanged();
        }
      } else {
        if (!other.hostInterfaceId_.isEmpty()) {
          if (hostInterfaceIdBuilder_.isEmpty()) {
            hostInterfaceIdBuilder_.dispose();
            hostInterfaceIdBuilder_ = null;
            hostInterfaceId_ = other.hostInterfaceId_;
            bitField0_ = (bitField0_ & ~0x00000010);
            hostInterfaceIdBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getHostInterfaceIdFieldBuilder() : null;
          } else {
            hostInterfaceIdBuilder_.addAllMessages(other.hostInterfaceId_);
          }
        }
      }
      if (other.getTos() != 0) {
        setTos(other.getTos());
      }
      if (other.getConnected() != false) {
        setConnected(other.getConnected());
      }
      if (other.hasIngressDefaultSgPolicy()) {
        mergeIngressDefaultSgPolicy(other.getIngressDefaultSgPolicy());
      }
      if (other.hasEgressDefaultSgPolicy()) {
        mergeEgressDefaultSgPolicy(other.getEgressDefaultSgPolicy());
      }
      if (other.getRemoteSubnet() != false) {
        setRemoteSubnet(other.getRemoteSubnet());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      opi_api.network.cloud.v1alpha1.SubnetSpec parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (opi_api.network.cloud.v1alpha1.SubnetSpec) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private opi_api.common.v1.ObjectKey id_;
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> idBuilder_;
    /**
     * <pre>
     * unique identifier of the subnet
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
     * @return Whether the id field is set.
     */
    public boolean hasId() {
      return idBuilder_ != null || id_ != null;
    }
    /**
     * <pre>
     * unique identifier of the subnet
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
     * @return The id.
     */
    public opi_api.common.v1.ObjectKey getId() {
      if (idBuilder_ == null) {
        return id_ == null ? opi_api.common.v1.ObjectKey.getDefaultInstance() : id_;
      } else {
        return idBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * unique identifier of the subnet
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
     */
    public Builder setId(opi_api.common.v1.ObjectKey value) {
      if (idBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        id_ = value;
        onChanged();
      } else {
        idBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * unique identifier of the subnet
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
     */
    public Builder setId(
        opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (idBuilder_ == null) {
        id_ = builderForValue.build();
        onChanged();
      } else {
        idBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * unique identifier of the subnet
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
     */
    public Builder mergeId(opi_api.common.v1.ObjectKey value) {
      if (idBuilder_ == null) {
        if (id_ != null) {
          id_ =
            opi_api.common.v1.ObjectKey.newBuilder(id_).mergeFrom(value).buildPartial();
        } else {
          id_ = value;
        }
        onChanged();
      } else {
        idBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * unique identifier of the subnet
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
     */
    public Builder clearId() {
      if (idBuilder_ == null) {
        id_ = null;
        onChanged();
      } else {
        id_ = null;
        idBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * unique identifier of the subnet
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder getIdBuilder() {
      
      onChanged();
      return getIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * unique identifier of the subnet
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
     */
    public opi_api.common.v1.ObjectKeyOrBuilder getIdOrBuilder() {
      if (idBuilder_ != null) {
        return idBuilder_.getMessageOrBuilder();
      } else {
        return id_ == null ?
            opi_api.common.v1.ObjectKey.getDefaultInstance() : id_;
      }
    }
    /**
     * <pre>
     * unique identifier of the subnet
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> 
        getIdFieldBuilder() {
      if (idBuilder_ == null) {
        idBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder>(
                getId(),
                getParentForChildren(),
                isClean());
        id_ = null;
      }
      return idBuilder_;
    }

    private opi_api.common.v1.ObjectKey vpcId_;
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> vpcIdBuilder_;
    /**
     * <pre>
     * virtual private cloud this subnet is belongs to
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey vpc_id = 2;</code>
     * @return Whether the vpcId field is set.
     */
    public boolean hasVpcId() {
      return vpcIdBuilder_ != null || vpcId_ != null;
    }
    /**
     * <pre>
     * virtual private cloud this subnet is belongs to
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey vpc_id = 2;</code>
     * @return The vpcId.
     */
    public opi_api.common.v1.ObjectKey getVpcId() {
      if (vpcIdBuilder_ == null) {
        return vpcId_ == null ? opi_api.common.v1.ObjectKey.getDefaultInstance() : vpcId_;
      } else {
        return vpcIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * virtual private cloud this subnet is belongs to
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey vpc_id = 2;</code>
     */
    public Builder setVpcId(opi_api.common.v1.ObjectKey value) {
      if (vpcIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        vpcId_ = value;
        onChanged();
      } else {
        vpcIdBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * virtual private cloud this subnet is belongs to
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey vpc_id = 2;</code>
     */
    public Builder setVpcId(
        opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (vpcIdBuilder_ == null) {
        vpcId_ = builderForValue.build();
        onChanged();
      } else {
        vpcIdBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * virtual private cloud this subnet is belongs to
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey vpc_id = 2;</code>
     */
    public Builder mergeVpcId(opi_api.common.v1.ObjectKey value) {
      if (vpcIdBuilder_ == null) {
        if (vpcId_ != null) {
          vpcId_ =
            opi_api.common.v1.ObjectKey.newBuilder(vpcId_).mergeFrom(value).buildPartial();
        } else {
          vpcId_ = value;
        }
        onChanged();
      } else {
        vpcIdBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * virtual private cloud this subnet is belongs to
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey vpc_id = 2;</code>
     */
    public Builder clearVpcId() {
      if (vpcIdBuilder_ == null) {
        vpcId_ = null;
        onChanged();
      } else {
        vpcId_ = null;
        vpcIdBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * virtual private cloud this subnet is belongs to
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey vpc_id = 2;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder getVpcIdBuilder() {
      
      onChanged();
      return getVpcIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * virtual private cloud this subnet is belongs to
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey vpc_id = 2;</code>
     */
    public opi_api.common.v1.ObjectKeyOrBuilder getVpcIdOrBuilder() {
      if (vpcIdBuilder_ != null) {
        return vpcIdBuilder_.getMessageOrBuilder();
      } else {
        return vpcId_ == null ?
            opi_api.common.v1.ObjectKey.getDefaultInstance() : vpcId_;
      }
    }
    /**
     * <pre>
     * virtual private cloud this subnet is belongs to
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey vpc_id = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> 
        getVpcIdFieldBuilder() {
      if (vpcIdBuilder_ == null) {
        vpcIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder>(
                getVpcId(),
                getParentForChildren(),
                isClean());
        vpcId_ = null;
      }
      return vpcIdBuilder_;
    }

    private opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4Prefix_;
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.IPv4Prefix, opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.Builder, opi_api.network.opinetcommon.v1alpha1.IPv4PrefixOrBuilder> v4PrefixBuilder_;
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 3;</code>
     * @return Whether the v4Prefix field is set.
     */
    public boolean hasV4Prefix() {
      return v4PrefixBuilder_ != null || v4Prefix_ != null;
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 3;</code>
     * @return The v4Prefix.
     */
    public opi_api.network.opinetcommon.v1alpha1.IPv4Prefix getV4Prefix() {
      if (v4PrefixBuilder_ == null) {
        return v4Prefix_ == null ? opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.getDefaultInstance() : v4Prefix_;
      } else {
        return v4PrefixBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 3;</code>
     */
    public Builder setV4Prefix(opi_api.network.opinetcommon.v1alpha1.IPv4Prefix value) {
      if (v4PrefixBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        v4Prefix_ = value;
        onChanged();
      } else {
        v4PrefixBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 3;</code>
     */
    public Builder setV4Prefix(
        opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.Builder builderForValue) {
      if (v4PrefixBuilder_ == null) {
        v4Prefix_ = builderForValue.build();
        onChanged();
      } else {
        v4PrefixBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 3;</code>
     */
    public Builder mergeV4Prefix(opi_api.network.opinetcommon.v1alpha1.IPv4Prefix value) {
      if (v4PrefixBuilder_ == null) {
        if (v4Prefix_ != null) {
          v4Prefix_ =
            opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.newBuilder(v4Prefix_).mergeFrom(value).buildPartial();
        } else {
          v4Prefix_ = value;
        }
        onChanged();
      } else {
        v4PrefixBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 3;</code>
     */
    public Builder clearV4Prefix() {
      if (v4PrefixBuilder_ == null) {
        v4Prefix_ = null;
        onChanged();
      } else {
        v4Prefix_ = null;
        v4PrefixBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 3;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.Builder getV4PrefixBuilder() {
      
      onChanged();
      return getV4PrefixFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 3;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.IPv4PrefixOrBuilder getV4PrefixOrBuilder() {
      if (v4PrefixBuilder_ != null) {
        return v4PrefixBuilder_.getMessageOrBuilder();
      } else {
        return v4Prefix_ == null ?
            opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.getDefaultInstance() : v4Prefix_;
      }
    }
    /**
     * <pre>
     * IPv4 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv4Prefix v4_prefix = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.IPv4Prefix, opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.Builder, opi_api.network.opinetcommon.v1alpha1.IPv4PrefixOrBuilder> 
        getV4PrefixFieldBuilder() {
      if (v4PrefixBuilder_ == null) {
        v4PrefixBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            opi_api.network.opinetcommon.v1alpha1.IPv4Prefix, opi_api.network.opinetcommon.v1alpha1.IPv4Prefix.Builder, opi_api.network.opinetcommon.v1alpha1.IPv4PrefixOrBuilder>(
                getV4Prefix(),
                getParentForChildren(),
                isClean());
        v4Prefix_ = null;
      }
      return v4PrefixBuilder_;
    }

    private opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6Prefix_;
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.IPv6Prefix, opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.Builder, opi_api.network.opinetcommon.v1alpha1.IPv6PrefixOrBuilder> v6PrefixBuilder_;
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 4;</code>
     * @return Whether the v6Prefix field is set.
     */
    public boolean hasV6Prefix() {
      return v6PrefixBuilder_ != null || v6Prefix_ != null;
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 4;</code>
     * @return The v6Prefix.
     */
    public opi_api.network.opinetcommon.v1alpha1.IPv6Prefix getV6Prefix() {
      if (v6PrefixBuilder_ == null) {
        return v6Prefix_ == null ? opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.getDefaultInstance() : v6Prefix_;
      } else {
        return v6PrefixBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 4;</code>
     */
    public Builder setV6Prefix(opi_api.network.opinetcommon.v1alpha1.IPv6Prefix value) {
      if (v6PrefixBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        v6Prefix_ = value;
        onChanged();
      } else {
        v6PrefixBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 4;</code>
     */
    public Builder setV6Prefix(
        opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.Builder builderForValue) {
      if (v6PrefixBuilder_ == null) {
        v6Prefix_ = builderForValue.build();
        onChanged();
      } else {
        v6PrefixBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 4;</code>
     */
    public Builder mergeV6Prefix(opi_api.network.opinetcommon.v1alpha1.IPv6Prefix value) {
      if (v6PrefixBuilder_ == null) {
        if (v6Prefix_ != null) {
          v6Prefix_ =
            opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.newBuilder(v6Prefix_).mergeFrom(value).buildPartial();
        } else {
          v6Prefix_ = value;
        }
        onChanged();
      } else {
        v6PrefixBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 4;</code>
     */
    public Builder clearV6Prefix() {
      if (v6PrefixBuilder_ == null) {
        v6Prefix_ = null;
        onChanged();
      } else {
        v6Prefix_ = null;
        v6PrefixBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 4;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.Builder getV6PrefixBuilder() {
      
      onChanged();
      return getV6PrefixFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 4;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.IPv6PrefixOrBuilder getV6PrefixOrBuilder() {
      if (v6PrefixBuilder_ != null) {
        return v6PrefixBuilder_.getMessageOrBuilder();
      } else {
        return v6Prefix_ == null ?
            opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.getDefaultInstance() : v6Prefix_;
      }
    }
    /**
     * <pre>
     * IPv6 prefix of this subnet, this must be a sub prefix of VPC's prefix
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.IPv6Prefix v6_prefix = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.IPv6Prefix, opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.Builder, opi_api.network.opinetcommon.v1alpha1.IPv6PrefixOrBuilder> 
        getV6PrefixFieldBuilder() {
      if (v6PrefixBuilder_ == null) {
        v6PrefixBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            opi_api.network.opinetcommon.v1alpha1.IPv6Prefix, opi_api.network.opinetcommon.v1alpha1.IPv6Prefix.Builder, opi_api.network.opinetcommon.v1alpha1.IPv6PrefixOrBuilder>(
                getV6Prefix(),
                getParentForChildren(),
                isClean());
        v6Prefix_ = null;
      }
      return v6PrefixBuilder_;
    }

    private int ipv4VirtualRouterIp_ ;
    /**
     * <pre>
     * IPv4 Virtual Router (VR) IP of this subnet, this IP is owned by the device
     * and packets originated by this device carry this IP as source IP
     * (-- api-linter: core::0141::forbidden-types=disabled
     *     aip.dev/not-precedent: ipv4 address is unsigned. --)
     * </pre>
     *
     * <code>uint32 ipv4_virtual_router_ip = 5;</code>
     * @return The ipv4VirtualRouterIp.
     */
    @java.lang.Override
    public int getIpv4VirtualRouterIp() {
      return ipv4VirtualRouterIp_;
    }
    /**
     * <pre>
     * IPv4 Virtual Router (VR) IP of this subnet, this IP is owned by the device
     * and packets originated by this device carry this IP as source IP
     * (-- api-linter: core::0141::forbidden-types=disabled
     *     aip.dev/not-precedent: ipv4 address is unsigned. --)
     * </pre>
     *
     * <code>uint32 ipv4_virtual_router_ip = 5;</code>
     * @param value The ipv4VirtualRouterIp to set.
     * @return This builder for chaining.
     */
    public Builder setIpv4VirtualRouterIp(int value) {
      
      ipv4VirtualRouterIp_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * IPv4 Virtual Router (VR) IP of this subnet, this IP is owned by the device
     * and packets originated by this device carry this IP as source IP
     * (-- api-linter: core::0141::forbidden-types=disabled
     *     aip.dev/not-precedent: ipv4 address is unsigned. --)
     * </pre>
     *
     * <code>uint32 ipv4_virtual_router_ip = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearIpv4VirtualRouterIp() {
      
      ipv4VirtualRouterIp_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString ipv6VirtualRouterIp_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Ipv6 Virtual Router (VR) IP of this subnet, this IP is owned by the device
     * and packets originated by this device carry this IP as source IP
     * </pre>
     *
     * <code>bytes ipv6_virtual_router_ip = 6;</code>
     * @return The ipv6VirtualRouterIp.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getIpv6VirtualRouterIp() {
      return ipv6VirtualRouterIp_;
    }
    /**
     * <pre>
     * Ipv6 Virtual Router (VR) IP of this subnet, this IP is owned by the device
     * and packets originated by this device carry this IP as source IP
     * </pre>
     *
     * <code>bytes ipv6_virtual_router_ip = 6;</code>
     * @param value The ipv6VirtualRouterIp to set.
     * @return This builder for chaining.
     */
    public Builder setIpv6VirtualRouterIp(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      ipv6VirtualRouterIp_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Ipv6 Virtual Router (VR) IP of this subnet, this IP is owned by the device
     * and packets originated by this device carry this IP as source IP
     * </pre>
     *
     * <code>bytes ipv6_virtual_router_ip = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearIpv6VirtualRouterIp() {
      
      ipv6VirtualRouterIp_ = getDefaultInstance().getIpv6VirtualRouterIp();
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString virtualRouterMac_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Virtual Router (VR) MAC address, any packets originated or routed by
     * the device carry this MAC as source MAC
     * </pre>
     *
     * <code>bytes virtual_router_mac = 7;</code>
     * @return The virtualRouterMac.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getVirtualRouterMac() {
      return virtualRouterMac_;
    }
    /**
     * <pre>
     * Virtual Router (VR) MAC address, any packets originated or routed by
     * the device carry this MAC as source MAC
     * </pre>
     *
     * <code>bytes virtual_router_mac = 7;</code>
     * @param value The virtualRouterMac to set.
     * @return This builder for chaining.
     */
    public Builder setVirtualRouterMac(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      virtualRouterMac_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Virtual Router (VR) MAC address, any packets originated or routed by
     * the device carry this MAC as source MAC
     * </pre>
     *
     * <code>bytes virtual_router_mac = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearVirtualRouterMac() {
      
      virtualRouterMac_ = getDefaultInstance().getVirtualRouterMac();
      onChanged();
      return this;
    }

    private opi_api.common.v1.ObjectKey v4RouteTableId_;
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> v4RouteTableIdBuilder_;
    /**
     * <pre>
     * identifier of the IPv4 route table to be used
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v4_route_table_id = 8;</code>
     * @return Whether the v4RouteTableId field is set.
     */
    public boolean hasV4RouteTableId() {
      return v4RouteTableIdBuilder_ != null || v4RouteTableId_ != null;
    }
    /**
     * <pre>
     * identifier of the IPv4 route table to be used
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v4_route_table_id = 8;</code>
     * @return The v4RouteTableId.
     */
    public opi_api.common.v1.ObjectKey getV4RouteTableId() {
      if (v4RouteTableIdBuilder_ == null) {
        return v4RouteTableId_ == null ? opi_api.common.v1.ObjectKey.getDefaultInstance() : v4RouteTableId_;
      } else {
        return v4RouteTableIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * identifier of the IPv4 route table to be used
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v4_route_table_id = 8;</code>
     */
    public Builder setV4RouteTableId(opi_api.common.v1.ObjectKey value) {
      if (v4RouteTableIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        v4RouteTableId_ = value;
        onChanged();
      } else {
        v4RouteTableIdBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * identifier of the IPv4 route table to be used
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v4_route_table_id = 8;</code>
     */
    public Builder setV4RouteTableId(
        opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (v4RouteTableIdBuilder_ == null) {
        v4RouteTableId_ = builderForValue.build();
        onChanged();
      } else {
        v4RouteTableIdBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * identifier of the IPv4 route table to be used
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v4_route_table_id = 8;</code>
     */
    public Builder mergeV4RouteTableId(opi_api.common.v1.ObjectKey value) {
      if (v4RouteTableIdBuilder_ == null) {
        if (v4RouteTableId_ != null) {
          v4RouteTableId_ =
            opi_api.common.v1.ObjectKey.newBuilder(v4RouteTableId_).mergeFrom(value).buildPartial();
        } else {
          v4RouteTableId_ = value;
        }
        onChanged();
      } else {
        v4RouteTableIdBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * identifier of the IPv4 route table to be used
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v4_route_table_id = 8;</code>
     */
    public Builder clearV4RouteTableId() {
      if (v4RouteTableIdBuilder_ == null) {
        v4RouteTableId_ = null;
        onChanged();
      } else {
        v4RouteTableId_ = null;
        v4RouteTableIdBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * identifier of the IPv4 route table to be used
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v4_route_table_id = 8;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder getV4RouteTableIdBuilder() {
      
      onChanged();
      return getV4RouteTableIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * identifier of the IPv4 route table to be used
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v4_route_table_id = 8;</code>
     */
    public opi_api.common.v1.ObjectKeyOrBuilder getV4RouteTableIdOrBuilder() {
      if (v4RouteTableIdBuilder_ != null) {
        return v4RouteTableIdBuilder_.getMessageOrBuilder();
      } else {
        return v4RouteTableId_ == null ?
            opi_api.common.v1.ObjectKey.getDefaultInstance() : v4RouteTableId_;
      }
    }
    /**
     * <pre>
     * identifier of the IPv4 route table to be used
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v4_route_table_id = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> 
        getV4RouteTableIdFieldBuilder() {
      if (v4RouteTableIdBuilder_ == null) {
        v4RouteTableIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder>(
                getV4RouteTableId(),
                getParentForChildren(),
                isClean());
        v4RouteTableId_ = null;
      }
      return v4RouteTableIdBuilder_;
    }

    private opi_api.common.v1.ObjectKey v6RouterTableId_;
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> v6RouterTableIdBuilder_;
    /**
     * <pre>
     * identifier of the IPv6 route table to be used, if any
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v6_router_table_id = 9;</code>
     * @return Whether the v6RouterTableId field is set.
     */
    public boolean hasV6RouterTableId() {
      return v6RouterTableIdBuilder_ != null || v6RouterTableId_ != null;
    }
    /**
     * <pre>
     * identifier of the IPv6 route table to be used, if any
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v6_router_table_id = 9;</code>
     * @return The v6RouterTableId.
     */
    public opi_api.common.v1.ObjectKey getV6RouterTableId() {
      if (v6RouterTableIdBuilder_ == null) {
        return v6RouterTableId_ == null ? opi_api.common.v1.ObjectKey.getDefaultInstance() : v6RouterTableId_;
      } else {
        return v6RouterTableIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * identifier of the IPv6 route table to be used, if any
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v6_router_table_id = 9;</code>
     */
    public Builder setV6RouterTableId(opi_api.common.v1.ObjectKey value) {
      if (v6RouterTableIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        v6RouterTableId_ = value;
        onChanged();
      } else {
        v6RouterTableIdBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * identifier of the IPv6 route table to be used, if any
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v6_router_table_id = 9;</code>
     */
    public Builder setV6RouterTableId(
        opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (v6RouterTableIdBuilder_ == null) {
        v6RouterTableId_ = builderForValue.build();
        onChanged();
      } else {
        v6RouterTableIdBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * identifier of the IPv6 route table to be used, if any
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v6_router_table_id = 9;</code>
     */
    public Builder mergeV6RouterTableId(opi_api.common.v1.ObjectKey value) {
      if (v6RouterTableIdBuilder_ == null) {
        if (v6RouterTableId_ != null) {
          v6RouterTableId_ =
            opi_api.common.v1.ObjectKey.newBuilder(v6RouterTableId_).mergeFrom(value).buildPartial();
        } else {
          v6RouterTableId_ = value;
        }
        onChanged();
      } else {
        v6RouterTableIdBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * identifier of the IPv6 route table to be used, if any
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v6_router_table_id = 9;</code>
     */
    public Builder clearV6RouterTableId() {
      if (v6RouterTableIdBuilder_ == null) {
        v6RouterTableId_ = null;
        onChanged();
      } else {
        v6RouterTableId_ = null;
        v6RouterTableIdBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * identifier of the IPv6 route table to be used, if any
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v6_router_table_id = 9;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder getV6RouterTableIdBuilder() {
      
      onChanged();
      return getV6RouterTableIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * identifier of the IPv6 route table to be used, if any
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v6_router_table_id = 9;</code>
     */
    public opi_api.common.v1.ObjectKeyOrBuilder getV6RouterTableIdOrBuilder() {
      if (v6RouterTableIdBuilder_ != null) {
        return v6RouterTableIdBuilder_.getMessageOrBuilder();
      } else {
        return v6RouterTableId_ == null ?
            opi_api.common.v1.ObjectKey.getDefaultInstance() : v6RouterTableId_;
      }
    }
    /**
     * <pre>
     * identifier of the IPv6 route table to be used, if any
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey v6_router_table_id = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> 
        getV6RouterTableIdFieldBuilder() {
      if (v6RouterTableIdBuilder_ == null) {
        v6RouterTableIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder>(
                getV6RouterTableId(),
                getParentForChildren(),
                isClean());
        v6RouterTableId_ = null;
      }
      return v6RouterTableIdBuilder_;
    }

    private java.util.List<opi_api.common.v1.ObjectKey> ingessV4SecurityPolicyId_ =
      java.util.Collections.emptyList();
    private void ensureIngessV4SecurityPolicyIdIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        ingessV4SecurityPolicyId_ = new java.util.ArrayList<opi_api.common.v1.ObjectKey>(ingessV4SecurityPolicyId_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> ingessV4SecurityPolicyIdBuilder_;

    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public java.util.List<opi_api.common.v1.ObjectKey> getIngessV4SecurityPolicyIdList() {
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        return java.util.Collections.unmodifiableList(ingessV4SecurityPolicyId_);
      } else {
        return ingessV4SecurityPolicyIdBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public int getIngessV4SecurityPolicyIdCount() {
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        return ingessV4SecurityPolicyId_.size();
      } else {
        return ingessV4SecurityPolicyIdBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public opi_api.common.v1.ObjectKey getIngessV4SecurityPolicyId(int index) {
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        return ingessV4SecurityPolicyId_.get(index);
      } else {
        return ingessV4SecurityPolicyIdBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public Builder setIngessV4SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey value) {
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIngessV4SecurityPolicyIdIsMutable();
        ingessV4SecurityPolicyId_.set(index, value);
        onChanged();
      } else {
        ingessV4SecurityPolicyIdBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public Builder setIngessV4SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        ensureIngessV4SecurityPolicyIdIsMutable();
        ingessV4SecurityPolicyId_.set(index, builderForValue.build());
        onChanged();
      } else {
        ingessV4SecurityPolicyIdBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public Builder addIngessV4SecurityPolicyId(opi_api.common.v1.ObjectKey value) {
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIngessV4SecurityPolicyIdIsMutable();
        ingessV4SecurityPolicyId_.add(value);
        onChanged();
      } else {
        ingessV4SecurityPolicyIdBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public Builder addIngessV4SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey value) {
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIngessV4SecurityPolicyIdIsMutable();
        ingessV4SecurityPolicyId_.add(index, value);
        onChanged();
      } else {
        ingessV4SecurityPolicyIdBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public Builder addIngessV4SecurityPolicyId(
        opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        ensureIngessV4SecurityPolicyIdIsMutable();
        ingessV4SecurityPolicyId_.add(builderForValue.build());
        onChanged();
      } else {
        ingessV4SecurityPolicyIdBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public Builder addIngessV4SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        ensureIngessV4SecurityPolicyIdIsMutable();
        ingessV4SecurityPolicyId_.add(index, builderForValue.build());
        onChanged();
      } else {
        ingessV4SecurityPolicyIdBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public Builder addAllIngessV4SecurityPolicyId(
        java.lang.Iterable<? extends opi_api.common.v1.ObjectKey> values) {
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        ensureIngessV4SecurityPolicyIdIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, ingessV4SecurityPolicyId_);
        onChanged();
      } else {
        ingessV4SecurityPolicyIdBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public Builder clearIngessV4SecurityPolicyId() {
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        ingessV4SecurityPolicyId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        ingessV4SecurityPolicyIdBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public Builder removeIngessV4SecurityPolicyId(int index) {
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        ensureIngessV4SecurityPolicyIdIsMutable();
        ingessV4SecurityPolicyId_.remove(index);
        onChanged();
      } else {
        ingessV4SecurityPolicyIdBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder getIngessV4SecurityPolicyIdBuilder(
        int index) {
      return getIngessV4SecurityPolicyIdFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public opi_api.common.v1.ObjectKeyOrBuilder getIngessV4SecurityPolicyIdOrBuilder(
        int index) {
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        return ingessV4SecurityPolicyId_.get(index);  } else {
        return ingessV4SecurityPolicyIdBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public java.util.List<? extends opi_api.common.v1.ObjectKeyOrBuilder> 
         getIngessV4SecurityPolicyIdOrBuilderList() {
      if (ingessV4SecurityPolicyIdBuilder_ != null) {
        return ingessV4SecurityPolicyIdBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(ingessV4SecurityPolicyId_);
      }
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder addIngessV4SecurityPolicyIdBuilder() {
      return getIngessV4SecurityPolicyIdFieldBuilder().addBuilder(
          opi_api.common.v1.ObjectKey.getDefaultInstance());
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder addIngessV4SecurityPolicyIdBuilder(
        int index) {
      return getIngessV4SecurityPolicyIdFieldBuilder().addBuilder(
          index, opi_api.common.v1.ObjectKey.getDefaultInstance());
    }
    /**
     * <pre>
     * security policies per subnet:
     * - all vnics in this subnet will inherit the policies configured under subnet
     * - multiple policies per vnic per direction (ingress/egress) can be specified
     * - an implementation may limit the #policies per subnet in each direction
     * identifier of ingress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingess_v4_security_policy_id = 10;</code>
     */
    public java.util.List<opi_api.common.v1.ObjectKey.Builder> 
         getIngessV4SecurityPolicyIdBuilderList() {
      return getIngessV4SecurityPolicyIdFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> 
        getIngessV4SecurityPolicyIdFieldBuilder() {
      if (ingessV4SecurityPolicyIdBuilder_ == null) {
        ingessV4SecurityPolicyIdBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder>(
                ingessV4SecurityPolicyId_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        ingessV4SecurityPolicyId_ = null;
      }
      return ingessV4SecurityPolicyIdBuilder_;
    }

    private java.util.List<opi_api.common.v1.ObjectKey> ingressV6SecurityPolicyId_ =
      java.util.Collections.emptyList();
    private void ensureIngressV6SecurityPolicyIdIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        ingressV6SecurityPolicyId_ = new java.util.ArrayList<opi_api.common.v1.ObjectKey>(ingressV6SecurityPolicyId_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> ingressV6SecurityPolicyIdBuilder_;

    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public java.util.List<opi_api.common.v1.ObjectKey> getIngressV6SecurityPolicyIdList() {
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        return java.util.Collections.unmodifiableList(ingressV6SecurityPolicyId_);
      } else {
        return ingressV6SecurityPolicyIdBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public int getIngressV6SecurityPolicyIdCount() {
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        return ingressV6SecurityPolicyId_.size();
      } else {
        return ingressV6SecurityPolicyIdBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public opi_api.common.v1.ObjectKey getIngressV6SecurityPolicyId(int index) {
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        return ingressV6SecurityPolicyId_.get(index);
      } else {
        return ingressV6SecurityPolicyIdBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public Builder setIngressV6SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey value) {
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIngressV6SecurityPolicyIdIsMutable();
        ingressV6SecurityPolicyId_.set(index, value);
        onChanged();
      } else {
        ingressV6SecurityPolicyIdBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public Builder setIngressV6SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        ensureIngressV6SecurityPolicyIdIsMutable();
        ingressV6SecurityPolicyId_.set(index, builderForValue.build());
        onChanged();
      } else {
        ingressV6SecurityPolicyIdBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public Builder addIngressV6SecurityPolicyId(opi_api.common.v1.ObjectKey value) {
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIngressV6SecurityPolicyIdIsMutable();
        ingressV6SecurityPolicyId_.add(value);
        onChanged();
      } else {
        ingressV6SecurityPolicyIdBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public Builder addIngressV6SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey value) {
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIngressV6SecurityPolicyIdIsMutable();
        ingressV6SecurityPolicyId_.add(index, value);
        onChanged();
      } else {
        ingressV6SecurityPolicyIdBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public Builder addIngressV6SecurityPolicyId(
        opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        ensureIngressV6SecurityPolicyIdIsMutable();
        ingressV6SecurityPolicyId_.add(builderForValue.build());
        onChanged();
      } else {
        ingressV6SecurityPolicyIdBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public Builder addIngressV6SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        ensureIngressV6SecurityPolicyIdIsMutable();
        ingressV6SecurityPolicyId_.add(index, builderForValue.build());
        onChanged();
      } else {
        ingressV6SecurityPolicyIdBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public Builder addAllIngressV6SecurityPolicyId(
        java.lang.Iterable<? extends opi_api.common.v1.ObjectKey> values) {
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        ensureIngressV6SecurityPolicyIdIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, ingressV6SecurityPolicyId_);
        onChanged();
      } else {
        ingressV6SecurityPolicyIdBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public Builder clearIngressV6SecurityPolicyId() {
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        ingressV6SecurityPolicyId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        ingressV6SecurityPolicyIdBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public Builder removeIngressV6SecurityPolicyId(int index) {
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        ensureIngressV6SecurityPolicyIdIsMutable();
        ingressV6SecurityPolicyId_.remove(index);
        onChanged();
      } else {
        ingressV6SecurityPolicyIdBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder getIngressV6SecurityPolicyIdBuilder(
        int index) {
      return getIngressV6SecurityPolicyIdFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public opi_api.common.v1.ObjectKeyOrBuilder getIngressV6SecurityPolicyIdOrBuilder(
        int index) {
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        return ingressV6SecurityPolicyId_.get(index);  } else {
        return ingressV6SecurityPolicyIdBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public java.util.List<? extends opi_api.common.v1.ObjectKeyOrBuilder> 
         getIngressV6SecurityPolicyIdOrBuilderList() {
      if (ingressV6SecurityPolicyIdBuilder_ != null) {
        return ingressV6SecurityPolicyIdBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(ingressV6SecurityPolicyId_);
      }
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder addIngressV6SecurityPolicyIdBuilder() {
      return getIngressV6SecurityPolicyIdFieldBuilder().addBuilder(
          opi_api.common.v1.ObjectKey.getDefaultInstance());
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder addIngressV6SecurityPolicyIdBuilder(
        int index) {
      return getIngressV6SecurityPolicyIdFieldBuilder().addBuilder(
          index, opi_api.common.v1.ObjectKey.getDefaultInstance());
    }
    /**
     * <pre>
     * identifier of ingress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey ingress_v6_security_policy_id = 11;</code>
     */
    public java.util.List<opi_api.common.v1.ObjectKey.Builder> 
         getIngressV6SecurityPolicyIdBuilderList() {
      return getIngressV6SecurityPolicyIdFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> 
        getIngressV6SecurityPolicyIdFieldBuilder() {
      if (ingressV6SecurityPolicyIdBuilder_ == null) {
        ingressV6SecurityPolicyIdBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder>(
                ingressV6SecurityPolicyId_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        ingressV6SecurityPolicyId_ = null;
      }
      return ingressV6SecurityPolicyIdBuilder_;
    }

    private java.util.List<opi_api.common.v1.ObjectKey> egressV4SecurityPolicyId_ =
      java.util.Collections.emptyList();
    private void ensureEgressV4SecurityPolicyIdIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        egressV4SecurityPolicyId_ = new java.util.ArrayList<opi_api.common.v1.ObjectKey>(egressV4SecurityPolicyId_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> egressV4SecurityPolicyIdBuilder_;

    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public java.util.List<opi_api.common.v1.ObjectKey> getEgressV4SecurityPolicyIdList() {
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        return java.util.Collections.unmodifiableList(egressV4SecurityPolicyId_);
      } else {
        return egressV4SecurityPolicyIdBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public int getEgressV4SecurityPolicyIdCount() {
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        return egressV4SecurityPolicyId_.size();
      } else {
        return egressV4SecurityPolicyIdBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public opi_api.common.v1.ObjectKey getEgressV4SecurityPolicyId(int index) {
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        return egressV4SecurityPolicyId_.get(index);
      } else {
        return egressV4SecurityPolicyIdBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public Builder setEgressV4SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey value) {
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEgressV4SecurityPolicyIdIsMutable();
        egressV4SecurityPolicyId_.set(index, value);
        onChanged();
      } else {
        egressV4SecurityPolicyIdBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public Builder setEgressV4SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        ensureEgressV4SecurityPolicyIdIsMutable();
        egressV4SecurityPolicyId_.set(index, builderForValue.build());
        onChanged();
      } else {
        egressV4SecurityPolicyIdBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public Builder addEgressV4SecurityPolicyId(opi_api.common.v1.ObjectKey value) {
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEgressV4SecurityPolicyIdIsMutable();
        egressV4SecurityPolicyId_.add(value);
        onChanged();
      } else {
        egressV4SecurityPolicyIdBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public Builder addEgressV4SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey value) {
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEgressV4SecurityPolicyIdIsMutable();
        egressV4SecurityPolicyId_.add(index, value);
        onChanged();
      } else {
        egressV4SecurityPolicyIdBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public Builder addEgressV4SecurityPolicyId(
        opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        ensureEgressV4SecurityPolicyIdIsMutable();
        egressV4SecurityPolicyId_.add(builderForValue.build());
        onChanged();
      } else {
        egressV4SecurityPolicyIdBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public Builder addEgressV4SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        ensureEgressV4SecurityPolicyIdIsMutable();
        egressV4SecurityPolicyId_.add(index, builderForValue.build());
        onChanged();
      } else {
        egressV4SecurityPolicyIdBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public Builder addAllEgressV4SecurityPolicyId(
        java.lang.Iterable<? extends opi_api.common.v1.ObjectKey> values) {
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        ensureEgressV4SecurityPolicyIdIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, egressV4SecurityPolicyId_);
        onChanged();
      } else {
        egressV4SecurityPolicyIdBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public Builder clearEgressV4SecurityPolicyId() {
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        egressV4SecurityPolicyId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        egressV4SecurityPolicyIdBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public Builder removeEgressV4SecurityPolicyId(int index) {
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        ensureEgressV4SecurityPolicyIdIsMutable();
        egressV4SecurityPolicyId_.remove(index);
        onChanged();
      } else {
        egressV4SecurityPolicyIdBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder getEgressV4SecurityPolicyIdBuilder(
        int index) {
      return getEgressV4SecurityPolicyIdFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public opi_api.common.v1.ObjectKeyOrBuilder getEgressV4SecurityPolicyIdOrBuilder(
        int index) {
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        return egressV4SecurityPolicyId_.get(index);  } else {
        return egressV4SecurityPolicyIdBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public java.util.List<? extends opi_api.common.v1.ObjectKeyOrBuilder> 
         getEgressV4SecurityPolicyIdOrBuilderList() {
      if (egressV4SecurityPolicyIdBuilder_ != null) {
        return egressV4SecurityPolicyIdBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(egressV4SecurityPolicyId_);
      }
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder addEgressV4SecurityPolicyIdBuilder() {
      return getEgressV4SecurityPolicyIdFieldBuilder().addBuilder(
          opi_api.common.v1.ObjectKey.getDefaultInstance());
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder addEgressV4SecurityPolicyIdBuilder(
        int index) {
      return getEgressV4SecurityPolicyIdFieldBuilder().addBuilder(
          index, opi_api.common.v1.ObjectKey.getDefaultInstance());
    }
    /**
     * <pre>
     * identifier of egress IPv4 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v4_security_policy_id = 12;</code>
     */
    public java.util.List<opi_api.common.v1.ObjectKey.Builder> 
         getEgressV4SecurityPolicyIdBuilderList() {
      return getEgressV4SecurityPolicyIdFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> 
        getEgressV4SecurityPolicyIdFieldBuilder() {
      if (egressV4SecurityPolicyIdBuilder_ == null) {
        egressV4SecurityPolicyIdBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder>(
                egressV4SecurityPolicyId_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        egressV4SecurityPolicyId_ = null;
      }
      return egressV4SecurityPolicyIdBuilder_;
    }

    private java.util.List<opi_api.common.v1.ObjectKey> egressV6SecurityPolicyId_ =
      java.util.Collections.emptyList();
    private void ensureEgressV6SecurityPolicyIdIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        egressV6SecurityPolicyId_ = new java.util.ArrayList<opi_api.common.v1.ObjectKey>(egressV6SecurityPolicyId_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> egressV6SecurityPolicyIdBuilder_;

    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public java.util.List<opi_api.common.v1.ObjectKey> getEgressV6SecurityPolicyIdList() {
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        return java.util.Collections.unmodifiableList(egressV6SecurityPolicyId_);
      } else {
        return egressV6SecurityPolicyIdBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public int getEgressV6SecurityPolicyIdCount() {
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        return egressV6SecurityPolicyId_.size();
      } else {
        return egressV6SecurityPolicyIdBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public opi_api.common.v1.ObjectKey getEgressV6SecurityPolicyId(int index) {
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        return egressV6SecurityPolicyId_.get(index);
      } else {
        return egressV6SecurityPolicyIdBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public Builder setEgressV6SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey value) {
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEgressV6SecurityPolicyIdIsMutable();
        egressV6SecurityPolicyId_.set(index, value);
        onChanged();
      } else {
        egressV6SecurityPolicyIdBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public Builder setEgressV6SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        ensureEgressV6SecurityPolicyIdIsMutable();
        egressV6SecurityPolicyId_.set(index, builderForValue.build());
        onChanged();
      } else {
        egressV6SecurityPolicyIdBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public Builder addEgressV6SecurityPolicyId(opi_api.common.v1.ObjectKey value) {
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEgressV6SecurityPolicyIdIsMutable();
        egressV6SecurityPolicyId_.add(value);
        onChanged();
      } else {
        egressV6SecurityPolicyIdBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public Builder addEgressV6SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey value) {
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEgressV6SecurityPolicyIdIsMutable();
        egressV6SecurityPolicyId_.add(index, value);
        onChanged();
      } else {
        egressV6SecurityPolicyIdBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public Builder addEgressV6SecurityPolicyId(
        opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        ensureEgressV6SecurityPolicyIdIsMutable();
        egressV6SecurityPolicyId_.add(builderForValue.build());
        onChanged();
      } else {
        egressV6SecurityPolicyIdBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public Builder addEgressV6SecurityPolicyId(
        int index, opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        ensureEgressV6SecurityPolicyIdIsMutable();
        egressV6SecurityPolicyId_.add(index, builderForValue.build());
        onChanged();
      } else {
        egressV6SecurityPolicyIdBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public Builder addAllEgressV6SecurityPolicyId(
        java.lang.Iterable<? extends opi_api.common.v1.ObjectKey> values) {
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        ensureEgressV6SecurityPolicyIdIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, egressV6SecurityPolicyId_);
        onChanged();
      } else {
        egressV6SecurityPolicyIdBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public Builder clearEgressV6SecurityPolicyId() {
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        egressV6SecurityPolicyId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        egressV6SecurityPolicyIdBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public Builder removeEgressV6SecurityPolicyId(int index) {
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        ensureEgressV6SecurityPolicyIdIsMutable();
        egressV6SecurityPolicyId_.remove(index);
        onChanged();
      } else {
        egressV6SecurityPolicyIdBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder getEgressV6SecurityPolicyIdBuilder(
        int index) {
      return getEgressV6SecurityPolicyIdFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public opi_api.common.v1.ObjectKeyOrBuilder getEgressV6SecurityPolicyIdOrBuilder(
        int index) {
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        return egressV6SecurityPolicyId_.get(index);  } else {
        return egressV6SecurityPolicyIdBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public java.util.List<? extends opi_api.common.v1.ObjectKeyOrBuilder> 
         getEgressV6SecurityPolicyIdOrBuilderList() {
      if (egressV6SecurityPolicyIdBuilder_ != null) {
        return egressV6SecurityPolicyIdBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(egressV6SecurityPolicyId_);
      }
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder addEgressV6SecurityPolicyIdBuilder() {
      return getEgressV6SecurityPolicyIdFieldBuilder().addBuilder(
          opi_api.common.v1.ObjectKey.getDefaultInstance());
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder addEgressV6SecurityPolicyIdBuilder(
        int index) {
      return getEgressV6SecurityPolicyIdFieldBuilder().addBuilder(
          index, opi_api.common.v1.ObjectKey.getDefaultInstance());
    }
    /**
     * <pre>
     * identifier of egress IPv6 security policy to be enforced
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey egress_v6_security_policy_id = 13;</code>
     */
    public java.util.List<opi_api.common.v1.ObjectKey.Builder> 
         getEgressV6SecurityPolicyIdBuilderList() {
      return getEgressV6SecurityPolicyIdFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> 
        getEgressV6SecurityPolicyIdFieldBuilder() {
      if (egressV6SecurityPolicyIdBuilder_ == null) {
        egressV6SecurityPolicyIdBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder>(
                egressV6SecurityPolicyId_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        egressV6SecurityPolicyId_ = null;
      }
      return egressV6SecurityPolicyIdBuilder_;
    }

    private opi_api.network.opinetcommon.v1alpha1.Encap accessEncap_;
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.Encap, opi_api.network.opinetcommon.v1alpha1.Encap.Builder, opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder> accessEncapBuilder_;
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 14;</code>
     * @return Whether the accessEncap field is set.
     */
    public boolean hasAccessEncap() {
      return accessEncapBuilder_ != null || accessEncap_ != null;
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 14;</code>
     * @return The accessEncap.
     */
    public opi_api.network.opinetcommon.v1alpha1.Encap getAccessEncap() {
      if (accessEncapBuilder_ == null) {
        return accessEncap_ == null ? opi_api.network.opinetcommon.v1alpha1.Encap.getDefaultInstance() : accessEncap_;
      } else {
        return accessEncapBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 14;</code>
     */
    public Builder setAccessEncap(opi_api.network.opinetcommon.v1alpha1.Encap value) {
      if (accessEncapBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        accessEncap_ = value;
        onChanged();
      } else {
        accessEncapBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 14;</code>
     */
    public Builder setAccessEncap(
        opi_api.network.opinetcommon.v1alpha1.Encap.Builder builderForValue) {
      if (accessEncapBuilder_ == null) {
        accessEncap_ = builderForValue.build();
        onChanged();
      } else {
        accessEncapBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 14;</code>
     */
    public Builder mergeAccessEncap(opi_api.network.opinetcommon.v1alpha1.Encap value) {
      if (accessEncapBuilder_ == null) {
        if (accessEncap_ != null) {
          accessEncap_ =
            opi_api.network.opinetcommon.v1alpha1.Encap.newBuilder(accessEncap_).mergeFrom(value).buildPartial();
        } else {
          accessEncap_ = value;
        }
        onChanged();
      } else {
        accessEncapBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 14;</code>
     */
    public Builder clearAccessEncap() {
      if (accessEncapBuilder_ == null) {
        accessEncap_ = null;
        onChanged();
      } else {
        accessEncap_ = null;
        accessEncapBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 14;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.Encap.Builder getAccessEncapBuilder() {
      
      onChanged();
      return getAccessEncapFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 14;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder getAccessEncapOrBuilder() {
      if (accessEncapBuilder_ != null) {
        return accessEncapBuilder_.getMessageOrBuilder();
      } else {
        return accessEncap_ == null ?
            opi_api.network.opinetcommon.v1alpha1.Encap.getDefaultInstance() : accessEncap_;
      }
    }
    /**
     * <pre>
     * AccessEncap is either ENCAP_TYPE_NONE (untagged) or ENCAP_TYPE_DOT1Q
     * and when AccessEncap is ENCAP_TYPE_DOT1Q, multiple vnics can send
     * traffic with same DOT1Q tag, in which case vnics are identified with
     * their MAC or IP based on the datapath in addition to the DOT1Q tag
     * - when subnet's AccessEncap is ENCAP_TYPE_NONE, vnics can also be
     *   identified by the encap of their own (e.g. VLAN as VNIC or QinQ as
     *   VNIC etc.)
     * - when subnet's AccessEncap is ENCAP_TYPE_DOT1Q, it is expected that
     *   all traffic from vnics in that subnet is transmitted with this encap
     *   (so vnics can be configured with VnicEncap as ENCAP_TYPE_NONE, so they
     *   inherit the subnet's encap)
     * - it is also possible to have subnet encap as ENCAP_TYPE_DOT1Q with
     *   certain tag value but some vnic's in that subnet to have different
     *   DOT1Q encap than that of subnet
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap access_encap = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.Encap, opi_api.network.opinetcommon.v1alpha1.Encap.Builder, opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder> 
        getAccessEncapFieldBuilder() {
      if (accessEncapBuilder_ == null) {
        accessEncapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            opi_api.network.opinetcommon.v1alpha1.Encap, opi_api.network.opinetcommon.v1alpha1.Encap.Builder, opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder>(
                getAccessEncap(),
                getParentForChildren(),
                isClean());
        accessEncap_ = null;
      }
      return accessEncapBuilder_;
    }

    private opi_api.network.opinetcommon.v1alpha1.Encap fabricEncap_;
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.Encap, opi_api.network.opinetcommon.v1alpha1.Encap.Builder, opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder> fabricEncapBuilder_;
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 15;</code>
     * @return Whether the fabricEncap field is set.
     */
    public boolean hasFabricEncap() {
      return fabricEncapBuilder_ != null || fabricEncap_ != null;
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 15;</code>
     * @return The fabricEncap.
     */
    public opi_api.network.opinetcommon.v1alpha1.Encap getFabricEncap() {
      if (fabricEncapBuilder_ == null) {
        return fabricEncap_ == null ? opi_api.network.opinetcommon.v1alpha1.Encap.getDefaultInstance() : fabricEncap_;
      } else {
        return fabricEncapBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 15;</code>
     */
    public Builder setFabricEncap(opi_api.network.opinetcommon.v1alpha1.Encap value) {
      if (fabricEncapBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        fabricEncap_ = value;
        onChanged();
      } else {
        fabricEncapBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 15;</code>
     */
    public Builder setFabricEncap(
        opi_api.network.opinetcommon.v1alpha1.Encap.Builder builderForValue) {
      if (fabricEncapBuilder_ == null) {
        fabricEncap_ = builderForValue.build();
        onChanged();
      } else {
        fabricEncapBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 15;</code>
     */
    public Builder mergeFabricEncap(opi_api.network.opinetcommon.v1alpha1.Encap value) {
      if (fabricEncapBuilder_ == null) {
        if (fabricEncap_ != null) {
          fabricEncap_ =
            opi_api.network.opinetcommon.v1alpha1.Encap.newBuilder(fabricEncap_).mergeFrom(value).buildPartial();
        } else {
          fabricEncap_ = value;
        }
        onChanged();
      } else {
        fabricEncapBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 15;</code>
     */
    public Builder clearFabricEncap() {
      if (fabricEncapBuilder_ == null) {
        fabricEncap_ = null;
        onChanged();
      } else {
        fabricEncap_ = null;
        fabricEncapBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 15;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.Encap.Builder getFabricEncapBuilder() {
      
      onChanged();
      return getFabricEncapFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 15;</code>
     */
    public opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder getFabricEncapOrBuilder() {
      if (fabricEncapBuilder_ != null) {
        return fabricEncapBuilder_.getMessageOrBuilder();
      } else {
        return fabricEncap_ == null ?
            opi_api.network.opinetcommon.v1alpha1.Encap.getDefaultInstance() : fabricEncap_;
      }
    }
    /**
     * <pre>
     * encapped traffic coming with the specified encap from fabric side will be
     * mapped to this subnet and traffic from workloads in this subnet will carry
     * this encap towards the fabric side
     * </pre>
     *
     * <code>.opi_api.network.opinetcommon.v1alpha1.Encap fabric_encap = 15;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.network.opinetcommon.v1alpha1.Encap, opi_api.network.opinetcommon.v1alpha1.Encap.Builder, opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder> 
        getFabricEncapFieldBuilder() {
      if (fabricEncapBuilder_ == null) {
        fabricEncapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            opi_api.network.opinetcommon.v1alpha1.Encap, opi_api.network.opinetcommon.v1alpha1.Encap.Builder, opi_api.network.opinetcommon.v1alpha1.EncapOrBuilder>(
                getFabricEncap(),
                getParentForChildren(),
                isClean());
        fabricEncap_ = null;
      }
      return fabricEncapBuilder_;
    }

    private java.util.List<opi_api.common.v1.ObjectKey> hostInterfaceId_ =
      java.util.Collections.emptyList();
    private void ensureHostInterfaceIdIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        hostInterfaceId_ = new java.util.ArrayList<opi_api.common.v1.ObjectKey>(hostInterfaceId_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> hostInterfaceIdBuilder_;

    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public java.util.List<opi_api.common.v1.ObjectKey> getHostInterfaceIdList() {
      if (hostInterfaceIdBuilder_ == null) {
        return java.util.Collections.unmodifiableList(hostInterfaceId_);
      } else {
        return hostInterfaceIdBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public int getHostInterfaceIdCount() {
      if (hostInterfaceIdBuilder_ == null) {
        return hostInterfaceId_.size();
      } else {
        return hostInterfaceIdBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public opi_api.common.v1.ObjectKey getHostInterfaceId(int index) {
      if (hostInterfaceIdBuilder_ == null) {
        return hostInterfaceId_.get(index);
      } else {
        return hostInterfaceIdBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public Builder setHostInterfaceId(
        int index, opi_api.common.v1.ObjectKey value) {
      if (hostInterfaceIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHostInterfaceIdIsMutable();
        hostInterfaceId_.set(index, value);
        onChanged();
      } else {
        hostInterfaceIdBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public Builder setHostInterfaceId(
        int index, opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (hostInterfaceIdBuilder_ == null) {
        ensureHostInterfaceIdIsMutable();
        hostInterfaceId_.set(index, builderForValue.build());
        onChanged();
      } else {
        hostInterfaceIdBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public Builder addHostInterfaceId(opi_api.common.v1.ObjectKey value) {
      if (hostInterfaceIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHostInterfaceIdIsMutable();
        hostInterfaceId_.add(value);
        onChanged();
      } else {
        hostInterfaceIdBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public Builder addHostInterfaceId(
        int index, opi_api.common.v1.ObjectKey value) {
      if (hostInterfaceIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHostInterfaceIdIsMutable();
        hostInterfaceId_.add(index, value);
        onChanged();
      } else {
        hostInterfaceIdBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public Builder addHostInterfaceId(
        opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (hostInterfaceIdBuilder_ == null) {
        ensureHostInterfaceIdIsMutable();
        hostInterfaceId_.add(builderForValue.build());
        onChanged();
      } else {
        hostInterfaceIdBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public Builder addHostInterfaceId(
        int index, opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (hostInterfaceIdBuilder_ == null) {
        ensureHostInterfaceIdIsMutable();
        hostInterfaceId_.add(index, builderForValue.build());
        onChanged();
      } else {
        hostInterfaceIdBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public Builder addAllHostInterfaceId(
        java.lang.Iterable<? extends opi_api.common.v1.ObjectKey> values) {
      if (hostInterfaceIdBuilder_ == null) {
        ensureHostInterfaceIdIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, hostInterfaceId_);
        onChanged();
      } else {
        hostInterfaceIdBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public Builder clearHostInterfaceId() {
      if (hostInterfaceIdBuilder_ == null) {
        hostInterfaceId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        hostInterfaceIdBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public Builder removeHostInterfaceId(int index) {
      if (hostInterfaceIdBuilder_ == null) {
        ensureHostInterfaceIdIsMutable();
        hostInterfaceId_.remove(index);
        onChanged();
      } else {
        hostInterfaceIdBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder getHostInterfaceIdBuilder(
        int index) {
      return getHostInterfaceIdFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public opi_api.common.v1.ObjectKeyOrBuilder getHostInterfaceIdOrBuilder(
        int index) {
      if (hostInterfaceIdBuilder_ == null) {
        return hostInterfaceId_.get(index);  } else {
        return hostInterfaceIdBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public java.util.List<? extends opi_api.common.v1.ObjectKeyOrBuilder> 
         getHostInterfaceIdOrBuilderList() {
      if (hostInterfaceIdBuilder_ != null) {
        return hostInterfaceIdBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(hostInterfaceId_);
      }
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder addHostInterfaceIdBuilder() {
      return getHostInterfaceIdFieldBuilder().addBuilder(
          opi_api.common.v1.ObjectKey.getDefaultInstance());
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder addHostInterfaceIdBuilder(
        int index) {
      return getHostInterfaceIdFieldBuilder().addBuilder(
          index, opi_api.common.v1.ObjectKey.getDefaultInstance());
    }
    /**
     * <pre>
     * when operating in DEVICE_OPER_MODE_HOST mode with multiple host PFs/VFs
     * present, subnet needs to be attached to a PF/VF (aka. host interface),
     * HostIf is list of such VF/PFs
     * </pre>
     *
     * <code>repeated .opi_api.common.v1.ObjectKey host_interface_id = 16;</code>
     */
    public java.util.List<opi_api.common.v1.ObjectKey.Builder> 
         getHostInterfaceIdBuilderList() {
      return getHostInterfaceIdFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> 
        getHostInterfaceIdFieldBuilder() {
      if (hostInterfaceIdBuilder_ == null) {
        hostInterfaceIdBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder>(
                hostInterfaceId_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        hostInterfaceId_ = null;
      }
      return hostInterfaceIdBuilder_;
    }

    private int tos_ ;
    /**
     * <pre>
     * ToS field is 1 byte value that is populated in the DSCP field of IPv4 outer
     * header or in the Traffic Class field of IPv6 outer header, this value, if
     * non-zero, will be used as-is (i.e., not interpreted) during encap time by
     * the dataplane; tunnel objects, if configured with ToS, will override this
     * </pre>
     *
     * <code>int32 tos = 18;</code>
     * @return The tos.
     */
    @java.lang.Override
    public int getTos() {
      return tos_;
    }
    /**
     * <pre>
     * ToS field is 1 byte value that is populated in the DSCP field of IPv4 outer
     * header or in the Traffic Class field of IPv6 outer header, this value, if
     * non-zero, will be used as-is (i.e., not interpreted) during encap time by
     * the dataplane; tunnel objects, if configured with ToS, will override this
     * </pre>
     *
     * <code>int32 tos = 18;</code>
     * @param value The tos to set.
     * @return This builder for chaining.
     */
    public Builder setTos(int value) {
      
      tos_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ToS field is 1 byte value that is populated in the DSCP field of IPv4 outer
     * header or in the Traffic Class field of IPv6 outer header, this value, if
     * non-zero, will be used as-is (i.e., not interpreted) during encap time by
     * the dataplane; tunnel objects, if configured with ToS, will override this
     * </pre>
     *
     * <code>int32 tos = 18;</code>
     * @return This builder for chaining.
     */
    public Builder clearTos() {
      
      tos_ = 0;
      onChanged();
      return this;
    }

    private boolean connected_ ;
    /**
     * <pre>
     * a subnet is marked connected if vnics in this subnet can communicate with
     * external endpoints via routes with some kind of NAT (e.g. 1:1 NAT, NAPT)
     * </pre>
     *
     * <code>bool connected = 19;</code>
     * @return The connected.
     */
    @java.lang.Override
    public boolean getConnected() {
      return connected_;
    }
    /**
     * <pre>
     * a subnet is marked connected if vnics in this subnet can communicate with
     * external endpoints via routes with some kind of NAT (e.g. 1:1 NAT, NAPT)
     * </pre>
     *
     * <code>bool connected = 19;</code>
     * @param value The connected to set.
     * @return This builder for chaining.
     */
    public Builder setConnected(boolean value) {
      
      connected_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * a subnet is marked connected if vnics in this subnet can communicate with
     * external endpoints via routes with some kind of NAT (e.g. 1:1 NAT, NAPT)
     * </pre>
     *
     * <code>bool connected = 19;</code>
     * @return This builder for chaining.
     */
    public Builder clearConnected() {
      
      connected_ = false;
      onChanged();
      return this;
    }

    private opi_api.common.v1.ObjectKey ingressDefaultSgPolicy_;
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> ingressDefaultSgPolicyBuilder_;
    /**
     * <pre>
     * default ingress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security policies on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey ingress_default_sg_policy = 20;</code>
     * @return Whether the ingressDefaultSgPolicy field is set.
     */
    public boolean hasIngressDefaultSgPolicy() {
      return ingressDefaultSgPolicyBuilder_ != null || ingressDefaultSgPolicy_ != null;
    }
    /**
     * <pre>
     * default ingress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security policies on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey ingress_default_sg_policy = 20;</code>
     * @return The ingressDefaultSgPolicy.
     */
    public opi_api.common.v1.ObjectKey getIngressDefaultSgPolicy() {
      if (ingressDefaultSgPolicyBuilder_ == null) {
        return ingressDefaultSgPolicy_ == null ? opi_api.common.v1.ObjectKey.getDefaultInstance() : ingressDefaultSgPolicy_;
      } else {
        return ingressDefaultSgPolicyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * default ingress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security policies on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey ingress_default_sg_policy = 20;</code>
     */
    public Builder setIngressDefaultSgPolicy(opi_api.common.v1.ObjectKey value) {
      if (ingressDefaultSgPolicyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ingressDefaultSgPolicy_ = value;
        onChanged();
      } else {
        ingressDefaultSgPolicyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * default ingress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security policies on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey ingress_default_sg_policy = 20;</code>
     */
    public Builder setIngressDefaultSgPolicy(
        opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (ingressDefaultSgPolicyBuilder_ == null) {
        ingressDefaultSgPolicy_ = builderForValue.build();
        onChanged();
      } else {
        ingressDefaultSgPolicyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * default ingress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security policies on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey ingress_default_sg_policy = 20;</code>
     */
    public Builder mergeIngressDefaultSgPolicy(opi_api.common.v1.ObjectKey value) {
      if (ingressDefaultSgPolicyBuilder_ == null) {
        if (ingressDefaultSgPolicy_ != null) {
          ingressDefaultSgPolicy_ =
            opi_api.common.v1.ObjectKey.newBuilder(ingressDefaultSgPolicy_).mergeFrom(value).buildPartial();
        } else {
          ingressDefaultSgPolicy_ = value;
        }
        onChanged();
      } else {
        ingressDefaultSgPolicyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * default ingress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security policies on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey ingress_default_sg_policy = 20;</code>
     */
    public Builder clearIngressDefaultSgPolicy() {
      if (ingressDefaultSgPolicyBuilder_ == null) {
        ingressDefaultSgPolicy_ = null;
        onChanged();
      } else {
        ingressDefaultSgPolicy_ = null;
        ingressDefaultSgPolicyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * default ingress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security policies on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey ingress_default_sg_policy = 20;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder getIngressDefaultSgPolicyBuilder() {
      
      onChanged();
      return getIngressDefaultSgPolicyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * default ingress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security policies on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey ingress_default_sg_policy = 20;</code>
     */
    public opi_api.common.v1.ObjectKeyOrBuilder getIngressDefaultSgPolicyOrBuilder() {
      if (ingressDefaultSgPolicyBuilder_ != null) {
        return ingressDefaultSgPolicyBuilder_.getMessageOrBuilder();
      } else {
        return ingressDefaultSgPolicy_ == null ?
            opi_api.common.v1.ObjectKey.getDefaultInstance() : ingressDefaultSgPolicy_;
      }
    }
    /**
     * <pre>
     * default ingress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security policies on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey ingress_default_sg_policy = 20;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> 
        getIngressDefaultSgPolicyFieldBuilder() {
      if (ingressDefaultSgPolicyBuilder_ == null) {
        ingressDefaultSgPolicyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder>(
                getIngressDefaultSgPolicy(),
                getParentForChildren(),
                isClean());
        ingressDefaultSgPolicy_ = null;
      }
      return ingressDefaultSgPolicyBuilder_;
    }

    private opi_api.common.v1.ObjectKey egressDefaultSgPolicy_;
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> egressDefaultSgPolicyBuilder_;
    /**
     * <pre>
     * default egress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security polices on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey egress_default_sg_policy = 21;</code>
     * @return Whether the egressDefaultSgPolicy field is set.
     */
    public boolean hasEgressDefaultSgPolicy() {
      return egressDefaultSgPolicyBuilder_ != null || egressDefaultSgPolicy_ != null;
    }
    /**
     * <pre>
     * default egress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security polices on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey egress_default_sg_policy = 21;</code>
     * @return The egressDefaultSgPolicy.
     */
    public opi_api.common.v1.ObjectKey getEgressDefaultSgPolicy() {
      if (egressDefaultSgPolicyBuilder_ == null) {
        return egressDefaultSgPolicy_ == null ? opi_api.common.v1.ObjectKey.getDefaultInstance() : egressDefaultSgPolicy_;
      } else {
        return egressDefaultSgPolicyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * default egress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security polices on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey egress_default_sg_policy = 21;</code>
     */
    public Builder setEgressDefaultSgPolicy(opi_api.common.v1.ObjectKey value) {
      if (egressDefaultSgPolicyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        egressDefaultSgPolicy_ = value;
        onChanged();
      } else {
        egressDefaultSgPolicyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * default egress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security polices on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey egress_default_sg_policy = 21;</code>
     */
    public Builder setEgressDefaultSgPolicy(
        opi_api.common.v1.ObjectKey.Builder builderForValue) {
      if (egressDefaultSgPolicyBuilder_ == null) {
        egressDefaultSgPolicy_ = builderForValue.build();
        onChanged();
      } else {
        egressDefaultSgPolicyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * default egress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security polices on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey egress_default_sg_policy = 21;</code>
     */
    public Builder mergeEgressDefaultSgPolicy(opi_api.common.v1.ObjectKey value) {
      if (egressDefaultSgPolicyBuilder_ == null) {
        if (egressDefaultSgPolicy_ != null) {
          egressDefaultSgPolicy_ =
            opi_api.common.v1.ObjectKey.newBuilder(egressDefaultSgPolicy_).mergeFrom(value).buildPartial();
        } else {
          egressDefaultSgPolicy_ = value;
        }
        onChanged();
      } else {
        egressDefaultSgPolicyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * default egress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security polices on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey egress_default_sg_policy = 21;</code>
     */
    public Builder clearEgressDefaultSgPolicy() {
      if (egressDefaultSgPolicyBuilder_ == null) {
        egressDefaultSgPolicy_ = null;
        onChanged();
      } else {
        egressDefaultSgPolicy_ = null;
        egressDefaultSgPolicyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * default egress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security polices on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey egress_default_sg_policy = 21;</code>
     */
    public opi_api.common.v1.ObjectKey.Builder getEgressDefaultSgPolicyBuilder() {
      
      onChanged();
      return getEgressDefaultSgPolicyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * default egress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security polices on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey egress_default_sg_policy = 21;</code>
     */
    public opi_api.common.v1.ObjectKeyOrBuilder getEgressDefaultSgPolicyOrBuilder() {
      if (egressDefaultSgPolicyBuilder_ != null) {
        return egressDefaultSgPolicyBuilder_.getMessageOrBuilder();
      } else {
        return egressDefaultSgPolicy_ == null ?
            opi_api.common.v1.ObjectKey.getDefaultInstance() : egressDefaultSgPolicy_;
      }
    }
    /**
     * <pre>
     * default egress stateful security policy for this subnet
     * if configured, is the 1st policy evaluated before other security polices on a given vnic
     * </pre>
     *
     * <code>.opi_api.common.v1.ObjectKey egress_default_sg_policy = 21;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder> 
        getEgressDefaultSgPolicyFieldBuilder() {
      if (egressDefaultSgPolicyBuilder_ == null) {
        egressDefaultSgPolicyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            opi_api.common.v1.ObjectKey, opi_api.common.v1.ObjectKey.Builder, opi_api.common.v1.ObjectKeyOrBuilder>(
                getEgressDefaultSgPolicy(),
                getParentForChildren(),
                isClean());
        egressDefaultSgPolicy_ = null;
      }
      return egressDefaultSgPolicyBuilder_;
    }

    private boolean remoteSubnet_ ;
    /**
     * <pre>
     * remote_subnet, if set, indicates that the subnet does not have any IP
     * mappings in local pod and such subnets are used to program all remote
     * pod IP mappings behind it
     * </pre>
     *
     * <code>bool remote_subnet = 22;</code>
     * @return The remoteSubnet.
     */
    @java.lang.Override
    public boolean getRemoteSubnet() {
      return remoteSubnet_;
    }
    /**
     * <pre>
     * remote_subnet, if set, indicates that the subnet does not have any IP
     * mappings in local pod and such subnets are used to program all remote
     * pod IP mappings behind it
     * </pre>
     *
     * <code>bool remote_subnet = 22;</code>
     * @param value The remoteSubnet to set.
     * @return This builder for chaining.
     */
    public Builder setRemoteSubnet(boolean value) {
      
      remoteSubnet_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * remote_subnet, if set, indicates that the subnet does not have any IP
     * mappings in local pod and such subnets are used to program all remote
     * pod IP mappings behind it
     * </pre>
     *
     * <code>bool remote_subnet = 22;</code>
     * @return This builder for chaining.
     */
    public Builder clearRemoteSubnet() {
      
      remoteSubnet_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opi_api.network.cloud.v1alpha1.SubnetSpec)
  }

  // @@protoc_insertion_point(class_scope:opi_api.network.cloud.v1alpha1.SubnetSpec)
  private static final opi_api.network.cloud.v1alpha1.SubnetSpec DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new opi_api.network.cloud.v1alpha1.SubnetSpec();
  }

  public static opi_api.network.cloud.v1alpha1.SubnetSpec getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SubnetSpec>
      PARSER = new com.google.protobuf.AbstractParser<SubnetSpec>() {
    @java.lang.Override
    public SubnetSpec parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SubnetSpec(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SubnetSpec> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SubnetSpec> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public opi_api.network.cloud.v1alpha1.SubnetSpec getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

