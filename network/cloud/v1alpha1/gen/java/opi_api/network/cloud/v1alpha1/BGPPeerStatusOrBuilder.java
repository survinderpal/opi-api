// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgp.proto

package opi_api.network.cloud.v1alpha1;

public interface BGPPeerStatusOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.network.cloud.v1alpha1.BGPPeerStatus)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * BGP session state
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.BGPPeerSessionState session_state = 1;</code>
   * @return The enum numeric value on the wire for sessionState.
   */
  int getSessionStateValue();
  /**
   * <pre>
   * BGP session state
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.BGPPeerSessionState session_state = 1;</code>
   * @return The sessionState.
   */
  opi_api.network.cloud.v1alpha1.BGPPeerSessionState getSessionState();

  /**
   * <pre>
   * BGP session previous status
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.BGPPeerSessionState prev_session_state = 2;</code>
   * @return The enum numeric value on the wire for prevSessionState.
   */
  int getPrevSessionStateValue();
  /**
   * <pre>
   * BGP session previous status
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.BGPPeerSessionState prev_session_state = 2;</code>
   * @return The prevSessionState.
   */
  opi_api.network.cloud.v1alpha1.BGPPeerSessionState getPrevSessionState();

  /**
   * <pre>
   * last error received
   * </pre>
   *
   * <code>bytes last_error_rcvd = 3;</code>
   * @return The lastErrorRcvd.
   */
  com.google.protobuf.ByteString getLastErrorRcvd();

  /**
   * <pre>
   * Last error sent
   * </pre>
   *
   * <code>bytes last_error_sent = 4;</code>
   * @return The lastErrorSent.
   */
  com.google.protobuf.ByteString getLastErrorSent();

  /**
   * <pre>
   * selected local address of the peer
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 5;</code>
   * @return Whether the localAddr field is set.
   */
  boolean hasLocalAddr();
  /**
   * <pre>
   * selected local address of the peer
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 5;</code>
   * @return The localAddr.
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddress getLocalAddr();
  /**
   * <pre>
   * selected local address of the peer
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 5;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddressOrBuilder getLocalAddrOrBuilder();

  /**
   * <pre>
   * BGP session holdtime in seconds established with peer
   * </pre>
   *
   * <code>int32 holdtime = 6;</code>
   * @return The holdtime.
   */
  int getHoldtime();

  /**
   * <pre>
   * BGP session keepalive in seconds established with peer
   * </pre>
   *
   * <code>int32 keepalive = 7;</code>
   * @return The keepalive.
   */
  int getKeepalive();

  /**
   * <pre>
   * BGP The capabilities announced to the peer on the most recent open message sent to the peer.
   * </pre>
   *
   * <code>int32 caps_sent = 8;</code>
   * @return The capsSent.
   */
  int getCapsSent();

  /**
   * <pre>
   * BGP The capabilities received on the most recent open message received from the peer.
   * </pre>
   *
   * <code>int32 caps_rcvd = 9;</code>
   * @return The capsRcvd.
   */
  int getCapsRcvd();

  /**
   * <pre>
   * BGP The capabilities negotiated for the session with the peer
   * </pre>
   *
   * <code>int32 caps_neg = 10;</code>
   * @return The capsNeg.
   */
  int getCapsNeg();

  /**
   * <pre>
   * BGP The address family of the local address used by the transport connection for the peering session.
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.BGPAddrType sel_local_addr_type = 11;</code>
   * @return The enum numeric value on the wire for selLocalAddrType.
   */
  int getSelLocalAddrTypeValue();
  /**
   * <pre>
   * BGP The address family of the local address used by the transport connection for the peering session.
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.BGPAddrType sel_local_addr_type = 11;</code>
   * @return The selLocalAddrType.
   */
  opi_api.network.cloud.v1alpha1.BGPAddrType getSelLocalAddrType();

  /**
   * <pre>
   * Number of BGP Notifications received for this connection.
   * </pre>
   *
   * <code>int32 incoming_notifications = 12;</code>
   * @return The incomingNotifications.
   */
  int getIncomingNotifications();

  /**
   * <pre>
   * Number of BGP Notifications sent for this connection.
   * </pre>
   *
   * <code>int32 outbound_notifications = 13;</code>
   * @return The outboundNotifications.
   */
  int getOutboundNotifications();

  /**
   * <pre>
   * Number of BGP Updates received for this connection.
   * </pre>
   *
   * <code>int32 incoming_updates = 14;</code>
   * @return The incomingUpdates.
   */
  int getIncomingUpdates();

  /**
   * <pre>
   * Number of BGP Updates received for this connection.
   * </pre>
   *
   * <code>int32 outgoing_updates = 15;</code>
   * @return The outgoingUpdates.
   */
  int getOutgoingUpdates();

  /**
   * <pre>
   * Number of BGP Keepalives received for this connection.
   * </pre>
   *
   * <code>int32 incoming_keepalives = 16;</code>
   * @return The incomingKeepalives.
   */
  int getIncomingKeepalives();

  /**
   * <pre>
   * Number of BGP Opens sent for this connection.
   * </pre>
   *
   * <code>int32 outgoing_keepalives = 17;</code>
   * @return The outgoingKeepalives.
   */
  int getOutgoingKeepalives();

  /**
   * <pre>
   * Number of BGP Route Refreshes received for this connection.
   * </pre>
   *
   * <code>int32 incoming_refreshes = 18;</code>
   * @return The incomingRefreshes.
   */
  int getIncomingRefreshes();

  /**
   * <pre>
   * Number of BGP Route Refreshes sent for this connection.
   * </pre>
   *
   * <code>int32 outgoing_refreshes = 19;</code>
   * @return The outgoingRefreshes.
   */
  int getOutgoingRefreshes();

  /**
   * <pre>
   * Total number of BGP messages received for this connection.
   * </pre>
   *
   * <code>int32 incoming_total_messages = 20;</code>
   * @return The incomingTotalMessages.
   */
  int getIncomingTotalMessages();

  /**
   * <pre>
   * Total number of BGP messages sent for this connection.
   * </pre>
   *
   * <code>int32 outgoing_total_messages = 21;</code>
   * @return The outgoingTotalMessages.
   */
  int getOutgoingTotalMessages();

  /**
   * <pre>
   * Number of times BGP FSM transitioned to established state.
   * </pre>
   *
   * <code>int32 fsm_est_transitions = 22;</code>
   * @return The fsmEstTransitions.
   */
  int getFsmEstTransitions();

  /**
   * <pre>
   * Number of retries after a flap.
   * </pre>
   *
   * <code>int32 connect_retry_count = 23;</code>
   * @return The connectRetryCount.
   */
  int getConnectRetryCount();

  /**
   * <pre>
   * Peer Group ID.
   * </pre>
   *
   * <code>int32 peergr = 24;</code>
   * @return The peergr.
   */
  int getPeergr();

  /**
   * <pre>
   * Number of sec to stale the routes before deleting them.
   * </pre>
   *
   * <code>int32 stale_pathtime = 25;</code>
   * @return The stalePathtime.
   */
  int getStalePathtime();

  /**
   * <pre>
   * Number of ORF entries of all types received from the peer.
   * </pre>
   *
   * <code>int32 orf_entry_count = 26;</code>
   * @return The orfEntryCount.
   */
  int getOrfEntryCount();

  /**
   * <pre>
   * Number of received message elapsed time.
   * </pre>
   *
   * <code>int32 rcvd_msg_elpstime = 27;</code>
   * @return The rcvdMsgElpstime.
   */
  int getRcvdMsgElpstime();

  /**
   * <pre>
   * Number of Route Refreshes sent to the peer.
   * </pre>
   *
   * <code>int32 route_refr_sent = 28;</code>
   * @return The routeRefrSent.
   */
  int getRouteRefrSent();

  /**
   * <pre>
   * Number of Route Refreshes received from the peer.
   * </pre>
   *
   * <code>int32 route_refr_rcvd = 29;</code>
   * @return The routeRefrRcvd.
   */
  int getRouteRefrRcvd();

  /**
   * <pre>
   * Number of prefixes received from the peer.
   * </pre>
   *
   * <code>int32 incoming_prfxes = 30;</code>
   * @return The incomingPrfxes.
   */
  int getIncomingPrfxes();

  /**
   * <pre>
   * Number of prefixes advertised to the peer including withdrawn prefixes.
   * </pre>
   *
   * <code>int32 outgoing_prfxes = 31;</code>
   * @return The outgoingPrfxes.
   */
  int getOutgoingPrfxes();

  /**
   * <pre>
   * Number of prefixes advertised to the peer.
   * </pre>
   *
   * <code>int32 outgoing_prfxes_advertised = 32;</code>
   * @return The outgoingPrfxesAdvertised.
   */
  int getOutgoingPrfxesAdvertised();

  /**
   * <pre>
   * Connection retry time interval.
   * </pre>
   *
   * <code>int32 connect_retry_int = 33;</code>
   * @return The connectRetryInt.
   */
  int getConnectRetryInt();

  /**
   * <pre>
   * Time in sec since last update was sent to the peer.
   * </pre>
   *
   * <code>int32 outgoing_update_elpstime = 34;</code>
   * @return The outgoingUpdateElpstime.
   */
  int getOutgoingUpdateElpstime();

  /**
   * <pre>
   * Number of prefixes failed export policy.
   * </pre>
   *
   * <code>int32 outgoing_prfxes_denied = 35;</code>
   * @return The outgoingPrfxesDenied.
   */
  int getOutgoingPrfxesDenied();

  /**
   * <pre>
   * Number of prefixes for which implicit withdraw has been sent.
   * </pre>
   *
   * <code>int32 outgoing_prfxes_imp_wdr = 36;</code>
   * @return The outgoingPrfxesImpWdr.
   */
  int getOutgoingPrfxesImpWdr();

  /**
   * <pre>
   * Number of prefixes for which explicit withdraw has been sent.
   * </pre>
   *
   * <code>int32 outgoing_prfxes_exp_wdr = 37;</code>
   * @return The outgoingPrfxesExpWdr.
   */
  int getOutgoingPrfxesExpWdr();

  /**
   * <pre>
   * Number of prefixes for which implicit withdraw has been rcvd.
   * </pre>
   *
   * <code>int32 incoming_prfxes_imp_wdr = 38;</code>
   * @return The incomingPrfxesImpWdr.
   */
  int getIncomingPrfxesImpWdr();

  /**
   * <pre>
   * Number of prefixes for which explicit withdraw has been rcvd.
   * </pre>
   *
   * <code>int32 incoming_prfxes_exp_wdr = 39;</code>
   * @return The incomingPrfxesExpWdr.
   */
  int getIncomingPrfxesExpWdr();

  /**
   * <pre>
   * Hold time received in open message.
   * </pre>
   *
   * <code>int32 received_holdtime = 40;</code>
   * @return The receivedHoldtime.
   */
  int getReceivedHoldtime();

  /**
   * <pre>
   * For how long is this peer in established state in sec.
   * </pre>
   *
   * <code>int32 fsm_establishedtime = 41;</code>
   * @return The fsmEstablishedtime.
   */
  int getFsmEstablishedtime();

  /**
   * <pre>
   * Elapsed time in sec since the last BGP message is received.
   * </pre>
   *
   * <code>int32 incoming_updates_elpstime = 42;</code>
   * @return The incomingUpdatesElpstime.
   */
  int getIncomingUpdatesElpstime();

  /**
   * <pre>
   * Number of BGP Opens received for this connection.
   * </pre>
   *
   * <code>int32 incoming_opens = 43;</code>
   * @return The incomingOpens.
   */
  int getIncomingOpens();

  /**
   * <pre>
   * Number of BGP Opens sent for this connection.
   * </pre>
   *
   * <code>int32 outgoing_opens = 44;</code>
   * @return The outgoingOpens.
   */
  int getOutgoingOpens();

  /**
   * <pre>
   * Peer Index
   * </pre>
   *
   * <code>int32 peer_index = 45;</code>
   * @return The peerIndex.
   */
  int getPeerIndex();

  /**
   * <pre>
   * Current TTL value in use
   * (-- api-linter: core::0214::ttl-type=disabled
   *     aip.dev/not-precedent: ttl is not a duration. --)
   * </pre>
   *
   * <code>int32 ttl = 46;</code>
   * @return The ttl.
   */
  int getTtl();

  /**
   * <pre>
   * Operational status of this peer
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.BGPOperState oper_state = 47;</code>
   * @return The enum numeric value on the wire for operState.
   */
  int getOperStateValue();
  /**
   * <pre>
   * Operational status of this peer
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.BGPOperState oper_state = 47;</code>
   * @return The operState.
   */
  opi_api.network.cloud.v1alpha1.BGPOperState getOperState();
}
