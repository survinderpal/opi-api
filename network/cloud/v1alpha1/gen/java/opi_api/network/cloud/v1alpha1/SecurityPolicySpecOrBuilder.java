// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networkpolicy.proto

package opi_api.network.cloud.v1alpha1;

public interface SecurityPolicySpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.network.cloud.v1alpha1.SecurityPolicySpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * unique identifier of security policy
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   * @return Whether the id field is set.
   */
  boolean hasId();
  /**
   * <pre>
   * unique identifier of security policy
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   * @return The id.
   */
  opi_api.common.v1.ObjectKey getId();
  /**
   * <pre>
   * unique identifier of security policy
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getIdOrBuilder();

  /**
   * <pre>
   * SecurityPolicyType is either TENANT or UNDERLAY (aka. infra) policy
   * - only one instance of UNDERLAY policy is allowed (or makes sense)
   * - if Type is not specified, policy type defaults to TENANT policy
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.SecurityPolicyType type = 2;</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * SecurityPolicyType is either TENANT or UNDERLAY (aka. infra) policy
   * - only one instance of UNDERLAY policy is allowed (or makes sense)
   * - if Type is not specified, policy type defaults to TENANT policy
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.SecurityPolicyType type = 2;</code>
   * @return The type.
   */
  opi_api.network.cloud.v1alpha1.SecurityPolicyType getType();

  /**
   * <pre>
   * IPv4 or IPv6 policy
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IpAf address_family = 3;</code>
   * @return The enum numeric value on the wire for addressFamily.
   */
  int getAddressFamilyValue();
  /**
   * <pre>
   * IPv4 or IPv6 policy
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IpAf address_family = 3;</code>
   * @return The addressFamily.
   */
  opi_api.network.opinetcommon.v1alpha1.IpAf getAddressFamily();

  /**
   * <pre>
   * when Stateless attribute is set on a policy, the policy is applied for
   * traffic in both directions before deciding the final action of the flow
   * when Stateless is set to false, the policy behavior is same as Network
   * Security Group (NSG) construct whereas if Stateless is set to true, the
   * behavior is same as ACL construct
   * </pre>
   *
   * <code>bool stateless = 4;</code>
   * @return The stateless.
   */
  boolean getStateless();

  /**
   * <pre>
   * DefaultFWAction is the action taken by the firewall when security policies are
   * configured on vnic but no rule is hit. Similarly, when NACLs are configured
   * on a subnet and no rule is hit, this action is taken by the firewall.
   * if this attribute is not set, it will inherit from security profile and if
   * that is also not set then  default "deny" action is enforced
   * When no policy is configured on subnet and vnic, this knob doesn't
   * apply and traffic is allowed in that case
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction default_security_action = 5;</code>
   * @return The enum numeric value on the wire for defaultSecurityAction.
   */
  int getDefaultSecurityActionValue();
  /**
   * <pre>
   * DefaultFWAction is the action taken by the firewall when security policies are
   * configured on vnic but no rule is hit. Similarly, when NACLs are configured
   * on a subnet and no rule is hit, this action is taken by the firewall.
   * if this attribute is not set, it will inherit from security profile and if
   * that is also not set then  default "deny" action is enforced
   * When no policy is configured on subnet and vnic, this knob doesn't
   * apply and traffic is allowed in that case
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction default_security_action = 5;</code>
   * @return The defaultSecurityAction.
   */
  opi_api.network.opinetcommon.v1alpha1.SecurityRuleAction getDefaultSecurityAction();

  /**
   * <pre>
   * list of security rules
   * </pre>
   *
   * <code>repeated .opi_api.network.cloud.v1alpha1.SecurityRuleInfo rules = 6;</code>
   */
  java.util.List<opi_api.network.cloud.v1alpha1.SecurityRuleInfo> 
      getRulesList();
  /**
   * <pre>
   * list of security rules
   * </pre>
   *
   * <code>repeated .opi_api.network.cloud.v1alpha1.SecurityRuleInfo rules = 6;</code>
   */
  opi_api.network.cloud.v1alpha1.SecurityRuleInfo getRules(int index);
  /**
   * <pre>
   * list of security rules
   * </pre>
   *
   * <code>repeated .opi_api.network.cloud.v1alpha1.SecurityRuleInfo rules = 6;</code>
   */
  int getRulesCount();
  /**
   * <pre>
   * list of security rules
   * </pre>
   *
   * <code>repeated .opi_api.network.cloud.v1alpha1.SecurityRuleInfo rules = 6;</code>
   */
  java.util.List<? extends opi_api.network.cloud.v1alpha1.SecurityRuleInfoOrBuilder> 
      getRulesOrBuilderList();
  /**
   * <pre>
   * list of security rules
   * </pre>
   *
   * <code>repeated .opi_api.network.cloud.v1alpha1.SecurityRuleInfo rules = 6;</code>
   */
  opi_api.network.cloud.v1alpha1.SecurityRuleInfoOrBuilder getRulesOrBuilder(
      int index);

  /**
   * <pre>
   * PolicyRuleFormat indicates whether the policy is set of flattened rules
   * or whether they are aggregated (DPU can be efficient based ont his hint)
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.PolicyRuleFormat rule_format = 7;</code>
   * @return The enum numeric value on the wire for ruleFormat.
   */
  int getRuleFormatValue();
  /**
   * <pre>
   * PolicyRuleFormat indicates whether the policy is set of flattened rules
   * or whether they are aggregated (DPU can be efficient based ont his hint)
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.PolicyRuleFormat rule_format = 7;</code>
   * @return The ruleFormat.
   */
  opi_api.network.cloud.v1alpha1.PolicyRuleFormat getRuleFormat();
}
