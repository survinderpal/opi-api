// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: port.proto

package opi_api.network.cloud.v1alpha1;

/**
 * <pre>
 * transciever product id
 * </pre>
 *
 * Protobuf enum {@code opi_api.network.cloud.v1alpha1.PortXcvrPid}
 */
public enum PortXcvrPid
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * unspecified
   * </pre>
   *
   * <code>PORT_XCVR_PID_UNSPECIFIED = 0;</code>
   */
  PORT_XCVR_PID_UNSPECIFIED(0),
  /**
   * <pre>
   * Copper
   * QSFP 100G CR4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_CR4 = 1;</code>
   */
  PORT_XCVR_PID_QSFP_100G_CR4(1),
  /**
   * <pre>
   * QSFP 40G CR4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_40GBASE_CR4 = 2;</code>
   */
  PORT_XCVR_PID_QSFP_40GBASE_CR4(2),
  /**
   * <pre>
   * 25G CR S
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_CR_S = 3;</code>
   */
  PORT_XCVR_PID_SFP_25GBASE_CR_S(3),
  /**
   * <pre>
   * 25G CR L
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_CR_L = 4;</code>
   */
  PORT_XCVR_PID_SFP_25GBASE_CR_L(4),
  /**
   * <pre>
   * 25G CR N
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_CR_N = 5;</code>
   */
  PORT_XCVR_PID_SFP_25GBASE_CR_N(5),
  /**
   * <pre>
   * 50G CR2 FC
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_50G_CR2_FC = 6;</code>
   */
  PORT_XCVR_PID_QSFP_50G_CR2_FC(6),
  /**
   * <pre>
   * 50G CR2
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_50G_CR2 = 7;</code>
   */
  PORT_XCVR_PID_QSFP_50G_CR2(7),
  /**
   * <pre>
   * 200G CR4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_200G_CR4 = 8;</code>
   */
  PORT_XCVR_PID_QSFP_200G_CR4(8),
  /**
   * <pre>
   * Fiber
   * QSFP 100G AOC
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_AOC = 50;</code>
   */
  PORT_XCVR_PID_QSFP_100G_AOC(50),
  /**
   * <pre>
   * QSFP 100G ACC
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_ACC = 51;</code>
   */
  PORT_XCVR_PID_QSFP_100G_ACC(51),
  /**
   * <pre>
   * QSFP 100G SR4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_SR4 = 52;</code>
   */
  PORT_XCVR_PID_QSFP_100G_SR4(52),
  /**
   * <pre>
   * QSFP 100G LR4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_LR4 = 53;</code>
   */
  PORT_XCVR_PID_QSFP_100G_LR4(53),
  /**
   * <pre>
   * QSFP 100G ER4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_ER4 = 54;</code>
   */
  PORT_XCVR_PID_QSFP_100G_ER4(54),
  /**
   * <pre>
   * QSFP 40G ER4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_40GBASE_ER4 = 55;</code>
   */
  PORT_XCVR_PID_QSFP_40GBASE_ER4(55),
  /**
   * <pre>
   * QSFP 40G SR4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_40GBASE_SR4 = 56;</code>
   */
  PORT_XCVR_PID_QSFP_40GBASE_SR4(56),
  /**
   * <pre>
   * QSFP 40G LR4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_40GBASE_LR4 = 57;</code>
   */
  PORT_XCVR_PID_QSFP_40GBASE_LR4(57),
  /**
   * <pre>
   * QSFP 40G AOC
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_40GBASE_AOC = 58;</code>
   */
  PORT_XCVR_PID_QSFP_40GBASE_AOC(58),
  /**
   * <pre>
   * SFP 25G SR
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_SR = 59;</code>
   */
  PORT_XCVR_PID_SFP_25GBASE_SR(59),
  /**
   * <pre>
   * SFP 25G LR
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_LR = 60;</code>
   */
  PORT_XCVR_PID_SFP_25GBASE_LR(60),
  /**
   * <pre>
   * SFP 25G ER
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_ER = 61;</code>
   */
  PORT_XCVR_PID_SFP_25GBASE_ER(61),
  /**
   * <pre>
   * SFP 25G AOC
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_AOC = 62;</code>
   */
  PORT_XCVR_PID_SFP_25GBASE_AOC(62),
  /**
   * <pre>
   * SFP 10G SR
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_10GBASE_SR = 63;</code>
   */
  PORT_XCVR_PID_SFP_10GBASE_SR(63),
  /**
   * <pre>
   * SFP 10G LR
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_10GBASE_LR = 64;</code>
   */
  PORT_XCVR_PID_SFP_10GBASE_LR(64),
  /**
   * <pre>
   * SFP 10G LRM
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_10GBASE_LRM = 65;</code>
   */
  PORT_XCVR_PID_SFP_10GBASE_LRM(65),
  /**
   * <pre>
   * SFP 10G ER
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_10GBASE_ER = 66;</code>
   */
  PORT_XCVR_PID_SFP_10GBASE_ER(66),
  /**
   * <pre>
   * SFP 10G AOC
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_10GBASE_AOC = 67;</code>
   */
  PORT_XCVR_PID_SFP_10GBASE_AOC(67),
  /**
   * <pre>
   * SFP 10G CU
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_10GBASE_CU = 68;</code>
   */
  PORT_XCVR_PID_SFP_10GBASE_CU(68),
  /**
   * <pre>
   * QSFP 100G CXWDM4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_CWDM4 = 69;</code>
   */
  PORT_XCVR_PID_QSFP_100G_CWDM4(69),
  /**
   * <pre>
   * QSFP 100G PSM4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_PSM4 = 70;</code>
   */
  PORT_XCVR_PID_QSFP_100G_PSM4(70),
  /**
   * <pre>
   * SFP 125G ACC
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_ACC = 71;</code>
   */
  PORT_XCVR_PID_SFP_25GBASE_ACC(71),
  /**
   * <pre>
   * SFP 10G BASE T
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_10GBASE_T = 72;</code>
   */
  PORT_XCVR_PID_SFP_10GBASE_T(72),
  /**
   * <pre>
   * SFP 100G BASE T
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_1000BASE_T = 73;</code>
   */
  PORT_XCVR_PID_SFP_1000BASE_T(73),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * unspecified
   * </pre>
   *
   * <code>PORT_XCVR_PID_UNSPECIFIED = 0;</code>
   */
  public static final int PORT_XCVR_PID_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Copper
   * QSFP 100G CR4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_CR4 = 1;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_100G_CR4_VALUE = 1;
  /**
   * <pre>
   * QSFP 40G CR4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_40GBASE_CR4 = 2;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_40GBASE_CR4_VALUE = 2;
  /**
   * <pre>
   * 25G CR S
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_CR_S = 3;</code>
   */
  public static final int PORT_XCVR_PID_SFP_25GBASE_CR_S_VALUE = 3;
  /**
   * <pre>
   * 25G CR L
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_CR_L = 4;</code>
   */
  public static final int PORT_XCVR_PID_SFP_25GBASE_CR_L_VALUE = 4;
  /**
   * <pre>
   * 25G CR N
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_CR_N = 5;</code>
   */
  public static final int PORT_XCVR_PID_SFP_25GBASE_CR_N_VALUE = 5;
  /**
   * <pre>
   * 50G CR2 FC
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_50G_CR2_FC = 6;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_50G_CR2_FC_VALUE = 6;
  /**
   * <pre>
   * 50G CR2
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_50G_CR2 = 7;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_50G_CR2_VALUE = 7;
  /**
   * <pre>
   * 200G CR4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_200G_CR4 = 8;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_200G_CR4_VALUE = 8;
  /**
   * <pre>
   * Fiber
   * QSFP 100G AOC
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_AOC = 50;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_100G_AOC_VALUE = 50;
  /**
   * <pre>
   * QSFP 100G ACC
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_ACC = 51;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_100G_ACC_VALUE = 51;
  /**
   * <pre>
   * QSFP 100G SR4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_SR4 = 52;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_100G_SR4_VALUE = 52;
  /**
   * <pre>
   * QSFP 100G LR4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_LR4 = 53;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_100G_LR4_VALUE = 53;
  /**
   * <pre>
   * QSFP 100G ER4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_ER4 = 54;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_100G_ER4_VALUE = 54;
  /**
   * <pre>
   * QSFP 40G ER4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_40GBASE_ER4 = 55;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_40GBASE_ER4_VALUE = 55;
  /**
   * <pre>
   * QSFP 40G SR4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_40GBASE_SR4 = 56;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_40GBASE_SR4_VALUE = 56;
  /**
   * <pre>
   * QSFP 40G LR4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_40GBASE_LR4 = 57;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_40GBASE_LR4_VALUE = 57;
  /**
   * <pre>
   * QSFP 40G AOC
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_40GBASE_AOC = 58;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_40GBASE_AOC_VALUE = 58;
  /**
   * <pre>
   * SFP 25G SR
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_SR = 59;</code>
   */
  public static final int PORT_XCVR_PID_SFP_25GBASE_SR_VALUE = 59;
  /**
   * <pre>
   * SFP 25G LR
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_LR = 60;</code>
   */
  public static final int PORT_XCVR_PID_SFP_25GBASE_LR_VALUE = 60;
  /**
   * <pre>
   * SFP 25G ER
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_ER = 61;</code>
   */
  public static final int PORT_XCVR_PID_SFP_25GBASE_ER_VALUE = 61;
  /**
   * <pre>
   * SFP 25G AOC
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_AOC = 62;</code>
   */
  public static final int PORT_XCVR_PID_SFP_25GBASE_AOC_VALUE = 62;
  /**
   * <pre>
   * SFP 10G SR
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_10GBASE_SR = 63;</code>
   */
  public static final int PORT_XCVR_PID_SFP_10GBASE_SR_VALUE = 63;
  /**
   * <pre>
   * SFP 10G LR
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_10GBASE_LR = 64;</code>
   */
  public static final int PORT_XCVR_PID_SFP_10GBASE_LR_VALUE = 64;
  /**
   * <pre>
   * SFP 10G LRM
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_10GBASE_LRM = 65;</code>
   */
  public static final int PORT_XCVR_PID_SFP_10GBASE_LRM_VALUE = 65;
  /**
   * <pre>
   * SFP 10G ER
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_10GBASE_ER = 66;</code>
   */
  public static final int PORT_XCVR_PID_SFP_10GBASE_ER_VALUE = 66;
  /**
   * <pre>
   * SFP 10G AOC
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_10GBASE_AOC = 67;</code>
   */
  public static final int PORT_XCVR_PID_SFP_10GBASE_AOC_VALUE = 67;
  /**
   * <pre>
   * SFP 10G CU
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_10GBASE_CU = 68;</code>
   */
  public static final int PORT_XCVR_PID_SFP_10GBASE_CU_VALUE = 68;
  /**
   * <pre>
   * QSFP 100G CXWDM4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_CWDM4 = 69;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_100G_CWDM4_VALUE = 69;
  /**
   * <pre>
   * QSFP 100G PSM4
   * </pre>
   *
   * <code>PORT_XCVR_PID_QSFP_100G_PSM4 = 70;</code>
   */
  public static final int PORT_XCVR_PID_QSFP_100G_PSM4_VALUE = 70;
  /**
   * <pre>
   * SFP 125G ACC
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_25GBASE_ACC = 71;</code>
   */
  public static final int PORT_XCVR_PID_SFP_25GBASE_ACC_VALUE = 71;
  /**
   * <pre>
   * SFP 10G BASE T
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_10GBASE_T = 72;</code>
   */
  public static final int PORT_XCVR_PID_SFP_10GBASE_T_VALUE = 72;
  /**
   * <pre>
   * SFP 100G BASE T
   * </pre>
   *
   * <code>PORT_XCVR_PID_SFP_1000BASE_T = 73;</code>
   */
  public static final int PORT_XCVR_PID_SFP_1000BASE_T_VALUE = 73;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static PortXcvrPid valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static PortXcvrPid forNumber(int value) {
    switch (value) {
      case 0: return PORT_XCVR_PID_UNSPECIFIED;
      case 1: return PORT_XCVR_PID_QSFP_100G_CR4;
      case 2: return PORT_XCVR_PID_QSFP_40GBASE_CR4;
      case 3: return PORT_XCVR_PID_SFP_25GBASE_CR_S;
      case 4: return PORT_XCVR_PID_SFP_25GBASE_CR_L;
      case 5: return PORT_XCVR_PID_SFP_25GBASE_CR_N;
      case 6: return PORT_XCVR_PID_QSFP_50G_CR2_FC;
      case 7: return PORT_XCVR_PID_QSFP_50G_CR2;
      case 8: return PORT_XCVR_PID_QSFP_200G_CR4;
      case 50: return PORT_XCVR_PID_QSFP_100G_AOC;
      case 51: return PORT_XCVR_PID_QSFP_100G_ACC;
      case 52: return PORT_XCVR_PID_QSFP_100G_SR4;
      case 53: return PORT_XCVR_PID_QSFP_100G_LR4;
      case 54: return PORT_XCVR_PID_QSFP_100G_ER4;
      case 55: return PORT_XCVR_PID_QSFP_40GBASE_ER4;
      case 56: return PORT_XCVR_PID_QSFP_40GBASE_SR4;
      case 57: return PORT_XCVR_PID_QSFP_40GBASE_LR4;
      case 58: return PORT_XCVR_PID_QSFP_40GBASE_AOC;
      case 59: return PORT_XCVR_PID_SFP_25GBASE_SR;
      case 60: return PORT_XCVR_PID_SFP_25GBASE_LR;
      case 61: return PORT_XCVR_PID_SFP_25GBASE_ER;
      case 62: return PORT_XCVR_PID_SFP_25GBASE_AOC;
      case 63: return PORT_XCVR_PID_SFP_10GBASE_SR;
      case 64: return PORT_XCVR_PID_SFP_10GBASE_LR;
      case 65: return PORT_XCVR_PID_SFP_10GBASE_LRM;
      case 66: return PORT_XCVR_PID_SFP_10GBASE_ER;
      case 67: return PORT_XCVR_PID_SFP_10GBASE_AOC;
      case 68: return PORT_XCVR_PID_SFP_10GBASE_CU;
      case 69: return PORT_XCVR_PID_QSFP_100G_CWDM4;
      case 70: return PORT_XCVR_PID_QSFP_100G_PSM4;
      case 71: return PORT_XCVR_PID_SFP_25GBASE_ACC;
      case 72: return PORT_XCVR_PID_SFP_10GBASE_T;
      case 73: return PORT_XCVR_PID_SFP_1000BASE_T;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<PortXcvrPid>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      PortXcvrPid> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<PortXcvrPid>() {
          public PortXcvrPid findValueByNumber(int number) {
            return PortXcvrPid.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return opi_api.network.cloud.v1alpha1.PortProto.getDescriptor().getEnumTypes().get(2);
  }

  private static final PortXcvrPid[] VALUES = values();

  public static PortXcvrPid valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private PortXcvrPid(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:opi_api.network.cloud.v1alpha1.PortXcvrPid)
}

