// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bgp.proto

package opi_api.network.cloud.v1alpha1;

public interface BGPPeerAfSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.network.cloud.v1alpha1.BGPPeerAfSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * unique key/identifier of peer AF config
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   * @return Whether the id field is set.
   */
  boolean hasId();
  /**
   * <pre>
   * unique key/identifier of peer AF config
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   * @return The id.
   */
  opi_api.common.v1.ObjectKey getId();
  /**
   * <pre>
   * unique key/identifier of peer AF config
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getIdOrBuilder();

  /**
   * <pre>
   * BGP local IP address
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 2;</code>
   * @return Whether the localAddr field is set.
   */
  boolean hasLocalAddr();
  /**
   * <pre>
   * BGP local IP address
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 2;</code>
   * @return The localAddr.
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddress getLocalAddr();
  /**
   * <pre>
   * BGP local IP address
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress local_addr = 2;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddressOrBuilder getLocalAddrOrBuilder();

  /**
   * <pre>
   * BGP peer IP address
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 3;</code>
   * @return Whether the peerAddr field is set.
   */
  boolean hasPeerAddr();
  /**
   * <pre>
   * BGP peer IP address
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 3;</code>
   * @return The peerAddr.
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddress getPeerAddr();
  /**
   * <pre>
   * BGP peer IP address
   * </pre>
   *
   * <code>.opi_api.network.opinetcommon.v1alpha1.IPAddress peer_addr = 3;</code>
   */
  opi_api.network.opinetcommon.v1alpha1.IPAddressOrBuilder getPeerAddrOrBuilder();

  /**
   * <pre>
   * BGP address family
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.BGPAfi afi = 4;</code>
   * @return The enum numeric value on the wire for afi.
   */
  int getAfiValue();
  /**
   * <pre>
   * BGP address family
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.BGPAfi afi = 4;</code>
   * @return The afi.
   */
  opi_api.network.cloud.v1alpha1.BGPAfi getAfi();

  /**
   * <pre>
   * BGP sub-address family
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.BGPSafi safi = 5;</code>
   * @return The enum numeric value on the wire for safi.
   */
  int getSafiValue();
  /**
   * <pre>
   * BGP sub-address family
   * </pre>
   *
   * <code>.opi_api.network.cloud.v1alpha1.BGPSafi safi = 5;</code>
   * @return The safi.
   */
  opi_api.network.cloud.v1alpha1.BGPSafi getSafi();

  /**
   * <pre>
   * enforce this router to set self as next-hop for advertised routes
   * </pre>
   *
   * <code>bool nexthop_self = 6;</code>
   * @return The nexthopSelf.
   */
  boolean getNexthopSelf();

  /**
   * <pre>
   * originate a default route to this peer
   * </pre>
   *
   * <code>bool default_orig = 7;</code>
   * @return The defaultOrig.
   */
  boolean getDefaultOrig();

  /**
   * <pre>
   * The local port configured for the peering session
   * </pre>
   *
   * <code>int32 local_port = 8;</code>
   * @return The localPort.
   */
  int getLocalPort();

  /**
   * <pre>
   * The remote port configured for the peering session
   * </pre>
   *
   * <code>int32 remote_port = 9;</code>
   * @return The remotePort.
   */
  int getRemotePort();

  /**
   * <pre>
   * For a peer identified by a link-local IPv6 addresses, this is the scope ID
   * of bgpPeerLocalAddr and bgpPeerRemoteAddr. For a peer identified only by
   * interface (bgpPeerLocalAddr and bgpPeerRemoteAddr are both zero), this is
   * the interface index of the local point-to-point interface through which the
   * peer is reachable
   * </pre>
   *
   * <code>int32 local_addr_scope_id = 10;</code>
   * @return The localAddrScopeId.
   */
  int getLocalAddrScopeId();
}
