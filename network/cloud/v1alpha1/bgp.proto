// Copyright (c) 2023 Pensando, AMD Inc, or its subsidiaries.
// protobuf specification for BGP
//
//    This model supports the following BGP configuration level hierarchy:
//      BGP
//        |
//        +-> [ global BGP configuration ]
//        +-> neighbor
//          +-> [ neighbor config ]
//          +-> AFI / SAFI [ per-AFI overrides ]";
// 

syntax = "proto3";
package opi_api.network.cloud.v1alpha1;

option java_package = "opi_api.network.cloud.v1alpha1";
option java_multiple_files = true;
option java_outer_classname = "BGPProto";

option go_package = "github.com/opiproject/opi-api/network/cloud/v1alpha1/gen/go";

import "object_key.proto";
import "networktypes.proto";

// BGP object
message Bgp {
  // BGP Configuration
  BgpSpec spec = 1;
  // BGP Status
  BgpStatus status = 2;
}

// BGP configuration
message BgpSpec {
  // unique key/identifier of BGP config
  common.v1.ObjectKey id = 1;
  // the local autonomous system number
  // (-- api-linter: core::0141::forbidden-types=disabled
  //     aip.dev/not-precedent: must use uint32 per BGP spec. --)
  uint32  local_asn = 2;
  // router ID for this bgp instance
  // (-- api-linter: core::0141::forbidden-types=disabled
  //     aip.dev/not-precedent: must use fixed32 per BGP spec. --)
  fixed32 router_id = 3;
  // cluster ID of the local router. router ID will be used as cluster ID
  // if cluster ID is not configured or configured to zero
  // (-- api-linter: core::0141::forbidden-types=disabled
  //     aip.dev/not-precedent: must use fixed32 per BGP spec. --)
  fixed32 cluster_id = 4;
  // disable/enable BGP
  bool disable = 5;
  // exclude default route from being used to resolve nexthop reachability in the underlay
  // changing this will deactivate and activate the routing stack RIB
  bool suppress_default_resolution = 6;
}

// operational status of BGP
message BgpStatus {
  // BGP current oper status
  BGPOperState oper_state = 1;
  // The total number of Adj-RIB-Out routes currently allocated
  int32 adj_rib_out_routes_count = 2;
  // The peak number of Adj-RIB-Out routes that have been allocated at any one time
  int32 peak_num_adj_rib_out_routes = 3;
  // The maximum time remaining until route selection takes place following a restart, in hundredths of a second.
  int32 rem_delaytime = 4;
  // The table version number of the Loc-RIB
  int32 table_ver = 5;
}

// BGP peer object
message BGPPeer {
  // bgp peer configuration
  BGPPeerSpec spec = 1;
  // bgp peer status
  BGPPeerStatus status = 2;
}

// BGP peer configurations
message BGPPeerSpec {
  // unique key/identifier of peer
  common.v1.ObjectKey id = 1;
  // peer enable/disable admin state. if peer is not enabled then local router
  // must not initiate connections to the neighbor and must not respond to
  // TCP connections attempts from neighbor
  network.opinetcommon.v1alpha1.AdminState state = 2;
  // BGP local IP address. control plane chooses the local IP address of the
  // session if an all 0 IP address is provided
  network.opinetcommon.v1alpha1.IPAddress  local_address = 3;
  // BGP peer IP address
  network.opinetcommon.v1alpha1.IPAddress  peer_addr = 4;
  // remote 4-byte AS number
  // (-- api-linter: core::0141::forbidden-types=disabled
  //     aip.dev/not-precedent: must use uint32 per BGP spec. --)
  uint32 remote_asn = 5;
  // send regular community attributes to neighbor
  bool send_comm = 6;
  // send extended community attributes to neighbor
  bool send_ext_comm = 7;
  // peer is a route reflector client
  BGPPeerRRClient rr_client = 8;
  // BGP session connect-retry timer in seconds
  int32 connect_retry = 9;
  // BGP session configured holdtime timer in seconds
  int32 holdtime = 10;
  // BGP session configured keepalive timer in seconds
  int32 keep_alive = 11;
  // MD5 authentication
  bytes password = 12;
  // TTL, set 1 to enable fast-external-fallover for directly connected eBGP sessions
  // range:1-255, default 64
  // (-- api-linter: core::0214::ttl-type=disabled
  //     aip.dev/not-precedent: ttl is not a duration. --)
  int32 ttl = 13;
  // IdleHoldTime in seconds, range:1-32767, default 15
  int32 idle_holdtime = 14;
  // The number of instances of the local AS identifier that may be contained in the route's
  // AS-Path without rejecting the route. Changing the value of this object while the peer
  // is active triggers BGP to refresh its routes from the peer
  // range:0-255, default 0
  int32 allow_local_as = 15;
}

// BGP peer status
message BGPPeerStatus {
  // BGP session state
  BGPPeerSessionState session_state = 1;
  // BGP session previous status
  BGPPeerSessionState prev_session_state = 2;
  // last error received
  bytes last_error_rcvd = 3;
  // Last error sent
  bytes last_error_sent = 4;
  // selected local address of the peer
  network.opinetcommon.v1alpha1.IPAddress local_addr = 5;
  // BGP session holdtime in seconds established with peer
  int32 holdtime = 6;
  // BGP session keepalive in seconds established with peer
  int32 keepalive = 7;
  // BGP The capabilities announced to the peer on the most recent open message sent to the peer.
  int32 caps_sent = 8;
  // BGP The capabilities received on the most recent open message received from the peer.
  int32 caps_rcvd = 9;
  // BGP The capabilities negotiated for the session with the peer
  int32 caps_neg = 10;
  // BGP The address family of the local address used by the transport connection for the peering session.
  BGPAddrType sel_local_addr_type = 11;
  // Number of BGP Notifications received for this connection.
  int32 incoming_notifications = 12;
  // Number of BGP Notifications sent for this connection.
  int32 outbound_notifications = 13;
  // Number of BGP Updates received for this connection.
  int32 incoming_updates = 14;
  // Number of BGP Updates received for this connection.
  int32 outgoing_updates = 15;
  // Number of BGP Keepalives received for this connection.
  int32 incoming_keepalives = 16;
  // Number of BGP Opens sent for this connection.
  int32 outgoing_keepalives = 17;
  // Number of BGP Route Refreshes received for this connection.
  int32 incoming_refreshes = 18;
  // Number of BGP Route Refreshes sent for this connection.
  int32 outgoing_refreshes = 19;
  // Total number of BGP messages received for this connection.
  int32 incoming_total_messages = 20;
  // Total number of BGP messages sent for this connection.
  int32 outgoing_total_messages = 21;
  // Number of times BGP FSM transitioned to established state.
  int32 fsm_est_transitions = 22;
  // Number of retries after a flap.
  int32 connect_retry_count = 23;
  // Peer Group ID.
  int32 peergr = 24;
  // Number of sec to stale the routes before deleting them.
  int32 stale_pathtime = 25;
  // Number of ORF entries of all types received from the peer.
  int32 orf_entry_count = 26;
  // Number of received message elapsed time.
  int32 rcvd_msg_elpstime = 27;
  // Number of Route Refreshes sent to the peer.
  int32 route_refr_sent = 28;
  // Number of Route Refreshes received from the peer.
  int32 route_refr_rcvd = 29;
  // Number of prefixes received from the peer.
  int32 incoming_prfxes = 30;
  // Number of prefixes advertised to the peer including withdrawn prefixes.
  int32 outgoing_prfxes = 31;
  // Number of prefixes advertised to the peer.
  int32 outgoing_prfxes_advertised = 32;
  // Connection retry time interval.
  int32 connect_retry_int = 33;
  // Time in sec since last update was sent to the peer.
  int32 outgoing_update_elpstime = 34;
  // Number of prefixes failed export policy.
  int32 outgoing_prfxes_denied = 35;
  // Number of prefixes for which implicit withdraw has been sent.
  int32 outgoing_prfxes_imp_wdr = 36;
  // Number of prefixes for which explicit withdraw has been sent.
  int32 outgoing_prfxes_exp_wdr = 37;
  // Number of prefixes for which implicit withdraw has been rcvd.
  int32 incoming_prfxes_imp_wdr = 38;
  // Number of prefixes for which explicit withdraw has been rcvd.
  int32 incoming_prfxes_exp_wdr = 39;
  // Hold time received in open message.
  int32 received_holdtime = 40;
  // For how long is this peer in established state in sec.
  int32 fsm_establishedtime = 41;
  // Elapsed time in sec since the last BGP message is received.
  int32 incoming_updates_elpstime = 42;
  // Number of BGP Opens received for this connection.
  int32 incoming_opens = 43;
  // Number of BGP Opens sent for this connection.
  int32 outgoing_opens = 44;
  // Peer Index
  int32 peer_index = 45;
  // Current TTL value in use
  // (-- api-linter: core::0214::ttl-type=disabled
  //     aip.dev/not-precedent: ttl is not a duration. --)
  int32 ttl = 46;
  // Operational status of this peer
  BGPOperState oper_state = 47;
}

// BGP peer AF object
message BGPPeerAf {
  // configuration
  BGPPeerAfSpec spec = 1;
  // status
  BGPPeerAfStatus state = 2;
}

// BGP peer AF configurations
message BGPPeerAfSpec {
  // unique key/identifier of peer AF config
  common.v1.ObjectKey id = 1;
  // BGP local IP address
  network.opinetcommon.v1alpha1.IPAddress local_addr = 2;
  // BGP peer IP address
  network.opinetcommon.v1alpha1.IPAddress peer_addr = 3;
  // BGP address family
  BGPAfi afi = 4;
  // BGP sub-address family
  BGPSafi safi = 5;
  // enforce this router to set self as next-hop for advertised routes
  bool nexthop_self = 6;
  // originate a default route to this peer
  bool default_orig = 7;
  // The local port configured for the peering session
  int32 local_port = 8;
  // The remote port configured for the peering session
  int32 remote_port = 9;
  // For a peer identified by a link-local IPv6 addresses, this is the scope ID
  // of bgpPeerLocalAddr and bgpPeerRemoteAddr. For a peer identified only by
  // interface (bgpPeerLocalAddr and bgpPeerRemoteAddr are both zero), this is
  // the interface index of the local point-to-point interface through which the
  // peer is reachable
  int32 local_addr_scope_id = 10;
}

// BGP peer AF status
message BGPPeerAfStatus {
  // BGP The index of the update group that the peer is a member of for this AFI/SAFI
  int32 update_group = 1;
  // For a peer identified by a link-local IPv6 addresses, this is the scope ID
  // of bgpPeerLocalAddr and bgpPeerRemoteAddr.
  int32 local_addr_scope_id = 2;
  // send a Route Refresh request to the peer for this AFI/SAFI.
  bool route_refresh = 3;
  //The BGP additional path capability negotiated with this peer for this AFI/SAFI.
  BgpAddPathCapNegCap add_path_cap_neg = 4;
  // This value indicates whether the given peer is a reflector client of this
  // router for this AFI/SAFI, or not
  BGPPeerRRClient reflector_client = 5;
}

// BGP NLRI prefix object, this object is not conifgured by the user
// rather populated by the BGP automatically, spec is defined for get operations
message BGPNLRIPrefix {
  // configuration
  BGPNLRIPrefixSpec spec = 1;
  // status
  BGPNLRIPrefixStatus state = 2;
}

// BGP NLRI prefix spec object
message BGPNLRIPrefixSpec {
  // BGP address family
  BGPAfi afi = 1;
  // BGP sub-address family
  BGPSafi safi = 2;
  // prefix in NLRI
  bytes prefix = 3;
  // prefix length
  int32 prefix_len = 4;
  // route source (learned from BGP peer or AFM)
  NLRISrc route_source = 5;
  // route source index
  int32 route_source_index = 6;
  // path ID
  int32 path_id = 7;
}

// BGP NLRI prefix table
message BGPNLRIPrefixStatus {
  // BGP address family
  BGPAfi afi = 1;
  // BGP sub-address family
  BGPSafi safi = 2;
  // prefix in NLRI
  bytes prefix = 3;
  // prefix length
  int32 prefix_len = 4;
  // route source (learned from BGP peer or AFM)
  NLRISrc route_source = 5;
  // route source index
  int32 route_source_index = 6;
  // path ID
  int32 path_id = 7;
  // chosen as BGP best route or not
  bool best_route = 8;
  // AS path string
  bytes as_path_str = 9;
  // originator ID
  bytes path_orig_id = 10;
  // next-hop address
  bytes next_hop_addr = 11;
  // Size of each ASN in the AS path string
  BgpAsSize as_size = 12;
  // Is this route part of an ECMP set
  bool ecmp_route = 13;
  // Peer IP
  network.opinetcommon.v1alpha1.IPAddress peer_addr = 14;
  // The number of times this route has flapped since statistics were last cleared.
  int32 flap_stats_flapcnt = 15;
  // Whether or not this route is suppressed.
  bool flap_stats_supprsd = 16;
  // An indication of whether or not this route is installed in the forwarding table
  BgpNlriIsActive is_active = 17;
  // Whether or not this route was last sent by the peer before BGP detected that the peer was restarting.
  bool stale = 18;
  // The value of sysUpTime when this route flapped
  int32 flap_starttime = 19;
  // If bgpNlriPrefixBest is 'true', then this field is set to 'routeIsBest'.
  // Otherwise, it reports the stage in the decision process when the route was determined to be non-best.
  BGPRsnNotBest reason_not_best = 20;
  // The extended community membership associated with the route after import policy has been applied.
  repeated bytes ext_comm = 21;
  // The community list associated with the route after import policy has been applied.
  repeated bytes comm = 22;
  // Calculated local preference
  int32 local_pref = 23;
  // Origin attribute
  BGPOriginAttr origin = 24;
  // Multi-Exit Discriminator present, med value can't be used to indicate this
  bool med_present = 25;
  // med value
  // (-- api-linter: core::0141::forbidden-types=disabled
  //     aip.dev/not-precedent: must use uint32 per BGP spec. --)
  uint32 med = 26;
  // Peer type
  BGPPeerType peer_type = 27;
}

// BGP NLRI prefix filter object, returned in get response for BGP prefixes
message BGPNLRIPrefixFilter {
  // filter based on extended communities
  bytes ext_comm = 1;
  // filter based on l2vni/l3vni
  int32 vnid = 2;
  // filter based on route type
  int32 route_type = 3;
  // filter based on next-hop address
  network.opinetcommon.v1alpha1.IPAddress next_hop = 4;
  // filter based on ip address
  network.opinetcommon.v1alpha1.IPAddress ip_address = 5;
  // filter to include only best routes
  bool best = 6;
}

// BGP AdjRibOut object, is a read only object specifiying BGP RIB adjacencies
// spec is used to query specific adjacencies
message BGPAdjRibOut {
  // filter for get operations
  BGPAdjRibOutSpec spec = 1;
  // adjacency information
  BGPAdjRibOutStatus status = 2;
}

// BGP Adj-RIB-Out spec for get operations
message BGPAdjRibOutSpec {
  // empty for now; add support for more filtered gets in future
}

// BGP Adj-RIB-Out table contains set of routes advertised to all peers
message BGPAdjRibOutStatus {
  // BGP peer IP address
  network.opinetcommon.v1alpha1.IPAddress peer_addr = 1;
  // BGP address family
  BGPAfi afi = 2;
  // BGP sub-address family
  BGPSafi safi = 3;
  // Prefix in NLRI
  bytes prefix = 4;
  // Prefix length
  int32 prefix_len = 5;
  // Advertisement status
  BgpAroAdvertState state = 6;
  // AS size
  BgpAsSize as_size = 7;
  // AS path string
  bytes as_path_str = 8;
  // The community list associated with the route after export policy has been applied
  repeated bytes comm              = 9;
  // The extended community membership associated with the route after export policy has been applied
  repeated bytes ext_comm = 10;
  // BGP Multi-Exit Discriminator value advertised to the peer
  bool med_present = 11;
  // med value 
  // (-- api-linter: core::0141::forbidden-types=disabled
  //     aip.dev/not-precedent: must use uint32 per BGP spec. --)
  uint32 med = 12;
}

// BGP address family identifier
enum BGPAfi {
  // AFI_UNSPECIFIED
  BGP_AFI_UNSPECIFIED = 0;
  // AFI_IPV4
  BGP_AFI_IPV4        = 1;
  // AFI_IPv6
  BGP_AFI_IPV6        = 2;
  // AFI_L2VPN
  BGP_AFI_L2VPN       = 25;
}

// BGP sub-address family identitfier
enum BGPSafi {
  // SAFI_UNSPECIFIED
  BGP_SAFI_UNSPECIFIED = 0;
  // SAFI_UNICAST
  BGP_SAFI_UNICAST     = 1;
  // SAFI_EVPN
  BGP_SAFI_EVPN        = 70;
}

// BGP peer RR client
enum BGPPeerRRClient {
  // RR_UNSPECIFIED
  BGP_PEER_RR_CLIENT_UNSPECIFIED   = 0;
  // RR_CLIENT
  BGP_PEER_RR_CLIENT               = 1;
  // RR_MESHED_CLIENT
  BGP_PEER_RR_MESHED_CLIENT        = 2;
}

// BGP peer session's last_state
enum BGPPeerSessionState {
  // unspecified
  BGP_PEER_SESSION_STATE_UNSPECIFIED = 0;
  // idle
  BGP_PEER_SESSION_STATE_IDLE        = 1;
  // connect
  BGP_PEER_SESSION_STATE_CONNECT     = 2;
  // active
  BGP_PEER_SESSION_STATE_ACTIVE      = 3;
  // open-sent
  BGP_PEER_SESSION_STATE_OPENSENT    = 4;
  // open-confirm
  BGP_PEER_SESSION_STATE_OPENCONFIRM = 5;
  // open-established
  BGP_PEER_SESSION_STATE_ESTABLISHED = 6;
}

// bgp as size
enum BgpAsSize {
  // unspecified
  BGP_AS_SIZE_UNSPECIFIED    = 0;
  // two bytes
  BGP_AS_SIZE_TWO_OCTET      = 1;
  // four bytes
  BGP_AS_SIZE_FOUR_OCTET     = 2;
}

// bgp address type
enum BGPAddrType {
  // other
  BGP_ADDR_TYPE_UNSPECIFIED = 0;
  // ipv4
  BGP_ADDR_TYPE_IPV4        = 1;
  // ipv6
  BGP_ADDR_TYPE_IPV6        = 2;
  // nsap
  BGP_ADDR_TYPE_NSAP        = 3;
  // hdlc
  BGP_ADDR_TYPE_HDLC        = 4;
  // bbn-1822
  BGP_ADDR_TYPE_BBN1822     = 5;
  // ieee 802
  BGP_ADDR_TYPE_IEEE802     = 6;
  // e163
  BGP_ADDR_TYPE_E163        = 7;
  // e164
  BGP_ADDR_TYPE_E164        = 8;
  // f69
  BGP_ADDR_TYPE_F69         = 9;
  // x121
  BGP_ADDR_TYPE_X121        = 10;
  // ipx
  BGP_ADDR_TYPE_IPX         = 11;
  // apple-talk
  BGP_ADDR_TYPE_APPLETALK   = 12;
  // dec net
  BGP_ADDR_TYPE_DECNETIV    = 13;
  // banyan
  BGP_ADDR_TYPE_BANYANVIN   = 14;
  // nsap
  BGP_ADDR_TYPE_E164_NSAP   = 15;
  // ipv4 tna
  BGP_ADDR_TYPE_IPV4_TNA    = 16;
  // ipv6 tna
  BGP_ADDR_TYPE_IPV6_TNA    = 17;
  // nsap tna
  BGP_ADDR_TYPE_NSAP_TNA    = 18;
  // vpn ipv4
  BGP_ADDR_TYPE_VPN_IPV4    = 19;
  // vpn ipv6
  BGP_ADDR_TYPE_VPN_IPV6    = 20;
  // l2vpn
  BGP_ADDR_TYPE_L2VPN       = 25;
}

// bgp operational status
enum BGPOperState {
  // unspecified
  BGP_OPER_STATE_UNSPECIFIED = 0;
  // up
  BGP_OPER_STATE_UP          = 1;
  // down
  BGP_OPER_STATE_DOWN        = 2;
  // going up
  BGP_OPER_STATE_GOING_UP    = 3;
  // going down
  BGP_OPER_STATE_GOING_DOWN  = 4;
  // activation failed
  BGP_OPER_STATE_ACT_FAILED  = 5;
}

// bgp add path capability negotiation
enum BgpAddPathCapNegCap {
  // disabled
  // (-- api-linter: core::0126::unspecified=disabled
  //     aip.dev/not-precedent: zero is disabled, not unspecified. --)
  BGP_ADD_PATH_SR_DISABLE = 0;
  // receive
  BGP_ADD_PATH_SR_RECEIVE = 1;
  // send
  BGP_ADD_PATH_SR_SEND    = 2;
  // both
  BGP_ADD_PATH_SR_BOTH    = 3;
  // inherit
  BGP_ADD_PATH_SR_INHERIT = 4;
  // uknown
  BGP_ADD_PATH_SR_UNKNOWN = 5;
}

// clear route request's options
enum BGPClearRouteOptions {
  // unspecified
  BGP_CLEAR_ROUTE_OPTIONS_UNSPECIFIED  = 0;
  // toggle session
  BGP_CLEAR_ROUTE_OPTIONS_HARD         = 1;
  // request route refresh from peer
  BGP_CLEAR_ROUTE_OPTIONS_REFRESH_IN   = 2;
  // send all routes to peer
  BGP_CLEAR_ROUTE_OPTIONS_REFRESH_OUT  = 3;
  // send all routes to peer and request route refresh from peer
  BGP_CLEAR_ROUTE_OPTIONS_REFRESH_BOTH = 4;
}

// NLRI source
enum NLRISrc {
  // unspecified
  NLRI_SRC_UNSPECIFIED = 0;
  // learned from peer
  NLRI_SRC_PEER        = 1;
  // learned from AFM
  NLRI_SRC_AFM         = 2;
  // created by itself
  NLRI_SRC_SELF        = 3;
}

// NLRI active values
enum BgpNlriIsActive {
  // unspecified
  BGP_NLRI_IS_ACTIVE_UNSPECIFIED = 0;
  // not tracked
  BGP_NLRI_IS_ACTIVE_NOT_TRACKED = 1;
  // inactive
  BGP_NLRI_IS_ACTIVE_INACTIVE    = 2;
  // active
  BGP_NLRI_IS_ACTIVE_ACTIVE      = 3;
}

// BGP Reason for not best route
enum BGPRsnNotBest {
  // not considered
  // (-- api-linter: core::0126::unspecified=disabled
  //     aip.dev/not-precedent: zero is not-considered, not unspecified. --)
  BGP_REASON_NOT_CONSIDERED     = 0;
  // route is best
  BGP_REASON_ROUTE_IS_BEST      = 1;
  // weight based
  BGP_REASON_WEIGHT             = 2;
  // local preference
  BGP_REASON_LOCAL_PREF         = 3;
  // local origin preferred
  BGP_REASON_LCL_ORIG_PRFRRED   = 4;
  // as path lengt
  BGP_REASON_AS_PATH_LEN        = 5;
  // origin based
  BGP_REASON_ORIGIN             = 6;
  // med
  BGP_REASON_MED                = 7;
  // origin tie
  BGP_REASON_LOCAL_ORIG_TIE     = 8;
  // ebpg vs. ibgp peer
  BGP_REASON_EBGP_V_IBGP_PEER   = 9;
  // admin distance
  BGP_REASON_ADMIN_DISTANCE     = 10;
  // path next to cst
  BGP_REASON_PATH_TO_NEXT_CST   = 11;
  // preferenc existing
  BGP_REASON_PREF_EXISTING      = 12;
  // reason identifier
  // (-- api-linter: core::0140::abbreviations=disabled
  //     aip.dev/not-precedent: --)
  BGP_REASON_IDENTIFIER         = 13;
  // cluster length
  BGP_REASON_CLUSTER_LEN        = 14;
  // peer address type
  BGP_REASON_PEER_ADDR_TYPE     = 15;
  // peer address
  BGP_REASON_PEER_ADDR          = 16;
  // peer port
  BGP_REASON_PEER_PORT          = 17;
  // path id
  BGP_REASON_PATH_ID            = 18;
}

// bgp origin attribute
enum BGPOriginAttr {
  // unspecified
  BGP_ORIGIN_ATTR_UNSPECIFIED = 0;
  // igp
  BGP_ORIGIN_ATTR_IGP         = 1;
  // egp
  BGP_ORIGIN_ATTR_EGP         = 2;
  // incomplete
  BGP_ORIGIN_ATTR_INCOMPLETE  = 3;
}

// bgp peer type
enum BGPPeerType {
  // unspecified
  BGP_PEER_TYPE_UNSPECIFIED = 0;
  // none (per protocol)
  BGP_PEER_TYPE_NONE        = 1;
  // ibgp
  BGP_PEER_TYPE_IBGP        = 2;
  // ebgp
  BGP_PEER_TYPE_EBGP        = 3;
}

// BGP ARO Advertisement State
enum BgpAroAdvertState {
  // unspecified
  BGP_ARO_ADVERT_STATE_UNSPECIFIED        = 0;
  // advertised
  BGP_ARO_ADVERT_STATE_ADVERTISED         = 1;
  // suppressed
  BGP_ARO_ADVERT_STATE_SUPPRESSED         = 2;
  // pending withdrawal
  BGP_ARO_ADVERT_STATE_PENDING_WITHDRAWAL = 3;
  // withdrawn
  BGP_ARO_ADVERT_STATE_WITHDRAWN          = 4;
}
