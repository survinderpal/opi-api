// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
// {C} Copyright 2022 Pensando Systems Inc. All rights reserved

syntax = "proto3";
package opi_api.storage.v1;

option java_package = "opi_api.storage.v1";
option java_multiple_files = true;
option java_outer_classname = "FrontendNvmePcieProto";

option go_package = "github.com/opiproject/opi-api/storage/v1alpha1/gen/go";
import "opicommon.proto";
import "object_key.proto";
import "uuid.proto";

import "google/api/client.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";

// Front End (host-facing) APIs. Mostly used for NVMe/PCIe emulation and host presentation.
service FrontendNvmeService {
    rpc CreateNVMeSubsystem (CreateNVMeSubsystemRequest) returns (NVMeSubsystem) {
        option (google.api.http) = {
            post: "/v1/{parent=subsystems}"
            body: "nv_me_subsystem"
        };
        option (google.api.method_signature) = "parent,nv_me_subsystem,nv_me_subsystem_id";
    }
    rpc DeleteNVMeSubsystem (DeleteNVMeSubsystemRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=subsystems}/{subsystem}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc UpdateNVMeSubsystem (UpdateNVMeSubsystemRequest) returns (NVMeSubsystem) {
        option (google.api.http) = {
            patch: "/v1/{nv_me_subsystem.name=subsystems}"
            body: "nv_me_subsystem"
        };
        option (google.api.method_signature) = "nv_me_subsystem,update_mask";
    }
    rpc ListNVMeSubsystems   (ListNVMeSubsystemsRequest)   returns (ListNVMeSubsystemsResponse)   {
        option (google.api.http) = {
            get: "/v1/{parent=subsystems}"
        };
        option (google.api.method_signature) = "parent";
    }
    rpc GetNVMeSubsystem    (GetNVMeSubsystemRequest)    returns (NVMeSubsystem)    {
        option (google.api.http) = {
            get: "/v1/{name=subsystems}/{subsystem}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc NVMeSubsystemStats  (NVMeSubsystemStatsRequest)  returns (NVMeSubsystemStatsResponse)  {}

    rpc CreateNVMeController (CreateNVMeControllerRequest) returns (NVMeController) {
        option (google.api.http) = {
            post: "/v1/{parent=subsystems}"
            body: "nv_me_controller"
        };
        option (google.api.method_signature) = "parent,nv_me_controller,nv_me_controller_id";
    }
    rpc DeleteNVMeController (DeleteNVMeControllerRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=controllers}/{controller}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc UpdateNVMeController (UpdateNVMeControllerRequest) returns (NVMeController) {
        option (google.api.http) = {
            patch: "/v1/{nv_me_controller.name=subsystems}"
            body: "nv_me_controller"
        };
        option (google.api.method_signature) = "nv_me_controller,update_mask";
    }
    rpc ListNVMeControllers   (ListNVMeControllersRequest)   returns (ListNVMeControllersResponse)   {
        option (google.api.http) = {
            get: "/v1/{parent=subsystems}"
        };
        option (google.api.method_signature) = "parent";
    }
    rpc GetNVMeController    (GetNVMeControllerRequest)    returns (NVMeController)    {
        option (google.api.http) = {
            get: "/v1/{name=subsystems}/{controller}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc NVMeControllerStats  (NVMeControllerStatsRequest)  returns (NVMeControllerStatsResponse)  {}

    rpc CreateNVMeNamespace (CreateNVMeNamespaceRequest) returns (NVMeNamespace) {
        option (google.api.http) = {
            post: "/v1/{parent=subsystems}"
            body: "nv_me_namespace"
        };
        option (google.api.method_signature) = "parent,nv_me_namespace,nv_me_namespace_id";
    }
    rpc DeleteNVMeNamespace (DeleteNVMeNamespaceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=namespaces}/{namespace}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc UpdateNVMeNamespace (UpdateNVMeNamespaceRequest) returns (NVMeNamespace) {
        option (google.api.http) = {
            patch: "/v1/{nv_me_namespace.name=subsystems}"
            body: "nv_me_namespace"
        };
        option (google.api.method_signature) = "nv_me_namespace,update_mask";
    }
    rpc ListNVMeNamespaces   (ListNVMeNamespacesRequest)   returns (ListNVMeNamespacesResponse)   {
        option (google.api.http) = {
            get: "/v1/{parent=subsystems}"
        };
        option (google.api.method_signature) = "parent";
    }
    rpc GetNVMeNamespace    (GetNVMeNamespaceRequest)    returns (NVMeNamespace)    {
        option (google.api.http) = {
            get: "/v1/{name=subsystems}/{namespace}"
        };
        option (google.api.method_signature) = "name";
    }
    rpc NVMeNamespaceStats  (NVMeNamespaceStatsRequest)  returns (NVMeNamespaceStatsResponse)  {}
}

message NVMeSubsystem {
  NVMeSubsystemSpec   spec   = 1;
  NVMeSubsystemStatus status = 2;
}

message NVMeSubsystemSpec {
    // object's unique identifier
    common.v1.ObjectKey id = 1;

    // NVMe subsystem NQN to which the controller belongs
    // Refer to the NQN format in the NVMe base specifications, must not
    // exceed 'NSV_NVME_SUBSYSTEM_NQN_LEN' bytes
    string nqn = 2;

    // serial number must not exceed 'NSV_CTRLR_SERIAL_NO_LEN' bytes
    string serial_number = 3;

    // model number, must not exceed 'NSV_CTRLR_MODEL_NO_LEN' bytes
    string model_number = 4;

    // maximum namespaces within a subsystem
    int64 max_namespaces = 5;
}

message NVMeSubsystemStatus {
    // firmware revision, must not exceed 'NSV_CTRLR_FW_REV_LEN'
    string firmware_revision  = 1;

    // FRU identfier, 16bytes opaque identity for the type of unit
    bytes fru_guid = 2;
}

message NVMeController {
  NVMeControllerSpec   spec   = 1;
  NVMeControllerStatus status = 2;
}

message NVMeControllerSpec {
    // object's unique identifier
    common.v1.ObjectKey id = 1;

    // subsystem controller id range: 0 to 65535.
    // must not be reused under the same subsystem
    int32 nvme_controller_id  = 2;

    // subsystem information
    common.v1.ObjectKey subsystem_id = 3;

    // xPU's PCI ID for the controller
    PciEndpoint pcie_id = 4;

    // maximum number of host submission queues allowed.
    // If not set, the xPU will provide a default.
    int32 max_nsq = 5;

    // maximum number of host completion queues allowed.
    // If not set, the xPU will provide a default.
    int32 max_ncq = 6;
  
    // maximum number of submission queue entries per submission queue, as a power of 2.
    // default value as per spec is 6
    int32 sqes = 7;

    // maximum number of completion queue entries per completion queue, as a power of 2.
    // default value as per spec is 4
    int32 cqes = 8;

    // maximum Number of namespaces that will be provisioned under
    // the controller.
    int32 max_namespaces = 9;
}

message NVMeControllerStatus {
    // Device is in use by host nvme driver
    bool   active = 1;
}

message NVMeNamespace {
  NVMeNamespaceSpec   spec   = 1;
  NVMeNamespaceStatus status = 2;
}

message NVMeNamespaceSpec {
    // namespace's unique key
    common.v1.ObjectKey id = 1;

    // subsystem for this namespace
    common.v1.ObjectKey subsystem_id = 2;

    // NSID present to the host by the NVMe PCIe controller.
    // If not provided, then the controller will assign an unused NSID
    // within the max namespace range - auto assigned nsid may not work
    // for live migration
    int32 host_nsid = 4;

    // Globally unique identifier for the namespace
    string nguid = 7;

    // 64bit Extended unique identifier for the namespace
    // mandatory if guid is not specified
    int64 eui64 = 8;

    // Globally unique identifier for the namespace
    common.v1.Uuid uuid = 9;

    // The back/middle-end volume to back this namespace.
    common.v1.ObjectKey volume_id = 10;
}

message NVMeNamespaceStatus {
    // config state of the namespace object, (enabled, disable, deleting)
    NVMeNamespacePciState      pci_state       = 1;

    // Operational state of the namespace object, (connected, disconnected)
    NVMeNamespacePciOperState  pci_oper_state   = 2;
}

message CreateNVMeSubsystemRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NVMeSubsystem"
    ];
    NVMeSubsystem nv_me_subsystem = 2 [(google.api.field_behavior) = REQUIRED];
    string nv_me_subsystem_id = 3;
}

message DeleteNVMeSubsystemRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NVMeSubsystem"
    ];
    // If set to true, and the resource is not found, the request will succeed
    // but no action will be taken on the server
    bool allow_missing = 2;
}

message UpdateNVMeSubsystemRequest {
    NVMeSubsystem nv_me_subsystem = 1;
    // The list of fields to update.
    google.protobuf.FieldMask update_mask = 2;
}

message ListNVMeSubsystemsRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NVMeSubsystem"
    ];
    int32 page_size = 2;
    string page_token = 3;
}

message ListNVMeSubsystemsResponse {
    repeated NVMeSubsystem nv_me_subsystems = 1;
    string next_page_token = 2;
}

message GetNVMeSubsystemRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NVMeSubsystem"
    ];
}

message NVMeSubsystemStatsRequest {
    common.v1.ObjectKey subsystem_id = 1;
}

message NVMeSubsystemStatsResponse {
    VolumeStats stats = 1;
}

message CreateNVMeControllerRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NVMeController"
    ];
    NVMeController nv_me_controller = 2 [(google.api.field_behavior) = REQUIRED];
    string nv_me_controller_id = 3;
}

message DeleteNVMeControllerRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NVMeController"
    ];
    // If set to true, and the resource is not found, the request will succeed
    // but no action will be taken on the server
    bool allow_missing = 2;
}

message UpdateNVMeControllerRequest {
    NVMeController nv_me_controller = 1;
    // The list of fields to update.
    google.protobuf.FieldMask update_mask = 2;
}

message ListNVMeControllersRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NVMeController"
    ];
    int32 page_size = 2;
    string page_token = 3;
}

message ListNVMeControllersResponse {
    repeated NVMeController nv_me_controllers = 1;
    string next_page_token = 2;
}

message GetNVMeControllerRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NVMeController"
    ];
}

message NVMeControllerStatsRequest {
    common.v1.ObjectKey id = 1;
}

message NVMeControllerStatsResponse {
    common.v1.ObjectKey id = 1;
    VolumeStats stats = 2;
}

message CreateNVMeNamespaceRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NVMeNamespace"
    ];
    NVMeNamespace nv_me_namespace = 2 [(google.api.field_behavior) = REQUIRED];
    string nv_me_namespace_id = 3;
}

message DeleteNVMeNamespaceRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NVMeNamespace"
    ];
    // If set to true, and the resource is not found, the request will succeed
    // but no action will be taken on the server
    bool allow_missing = 2;
}

message UpdateNVMeNamespaceRequest {
    NVMeNamespace nv_me_namespace = 1;
    // The list of fields to update.
    google.protobuf.FieldMask update_mask = 2;
}

message ListNVMeNamespacesRequest {
    string parent = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NVMeNamespace"
    ];
    int32 page_size = 2;
    string page_token = 3;
}

message ListNVMeNamespacesResponse {
    repeated NVMeNamespace nv_me_namespaces = 1;
    string next_page_token = 2;
}

message GetNVMeNamespaceRequest {
    string name = 1 [
        (google.api.field_behavior) = REQUIRED,
        (google.api.resource_reference).type = "opi_api.storage.v1/NVMeNamespace"
    ];
}

message NVMeNamespaceStatsRequest {
    common.v1.ObjectKey namespace_id = 1;
}

message NVMeNamespaceStatsResponse {
    common.v1.ObjectKey id = 1;
    VolumeStats stats = 2;
}

// Namespace  Administrative States
enum NVMeNamespacePciState {
    // unspecified
    NV_ME_NAMESPACE_PCI_STATE_UNSPECIFIED = 0;
    // namespace disabled state
    NVME_NAMESPACE_PCI_STATE_DISABLED    = 1;
    // namespace enabled state
    NVME_NAMESPACE_PCI_STATE_ENABLED     = 2;
    // namespace being deleted
    NVME_NAMESPACE_PCI_STATE_DELETING    = 3;
}

// Namespace PCIe operational states
enum NVMeNamespacePciOperState {
    // unspecified
    NV_ME_NAMESPACE_PCI_OPER_STATE_UNSPECIFIED = 0;
    // namespace is online and operational
    NVME_NAMESPACE_PCI_OPER_STATE_ONLINE = 1;
    // namespace is offline
    NVME_NAMESPACE_PCI_OPER_STATE_OFFLINE= 2;
}

