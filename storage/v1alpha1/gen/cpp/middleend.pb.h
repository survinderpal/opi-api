// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: middleend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_middleend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_middleend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "opicommon.pb.h"
#include "object_key.pb.h"
#include "google/api/client.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/annotations.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_middleend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_middleend_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_middleend_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class CreateEncryptedVolumeRequest;
struct CreateEncryptedVolumeRequestDefaultTypeInternal;
extern CreateEncryptedVolumeRequestDefaultTypeInternal _CreateEncryptedVolumeRequest_default_instance_;
class DeleteEncryptedVolumeRequest;
struct DeleteEncryptedVolumeRequestDefaultTypeInternal;
extern DeleteEncryptedVolumeRequestDefaultTypeInternal _DeleteEncryptedVolumeRequest_default_instance_;
class EncryptedVolume;
struct EncryptedVolumeDefaultTypeInternal;
extern EncryptedVolumeDefaultTypeInternal _EncryptedVolume_default_instance_;
class EncryptedVolumeStatsRequest;
struct EncryptedVolumeStatsRequestDefaultTypeInternal;
extern EncryptedVolumeStatsRequestDefaultTypeInternal _EncryptedVolumeStatsRequest_default_instance_;
class EncryptedVolumeStatsResponse;
struct EncryptedVolumeStatsResponseDefaultTypeInternal;
extern EncryptedVolumeStatsResponseDefaultTypeInternal _EncryptedVolumeStatsResponse_default_instance_;
class GetEncryptedVolumeRequest;
struct GetEncryptedVolumeRequestDefaultTypeInternal;
extern GetEncryptedVolumeRequestDefaultTypeInternal _GetEncryptedVolumeRequest_default_instance_;
class ListEncryptedVolumesRequest;
struct ListEncryptedVolumesRequestDefaultTypeInternal;
extern ListEncryptedVolumesRequestDefaultTypeInternal _ListEncryptedVolumesRequest_default_instance_;
class ListEncryptedVolumesResponse;
struct ListEncryptedVolumesResponseDefaultTypeInternal;
extern ListEncryptedVolumesResponseDefaultTypeInternal _ListEncryptedVolumesResponse_default_instance_;
class UpdateEncryptedVolumeRequest;
struct UpdateEncryptedVolumeRequestDefaultTypeInternal;
extern UpdateEncryptedVolumeRequestDefaultTypeInternal _UpdateEncryptedVolumeRequest_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::CreateEncryptedVolumeRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateEncryptedVolumeRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteEncryptedVolumeRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteEncryptedVolumeRequest>(Arena*);
template<> ::opi_api::storage::v1::EncryptedVolume* Arena::CreateMaybeMessage<::opi_api::storage::v1::EncryptedVolume>(Arena*);
template<> ::opi_api::storage::v1::EncryptedVolumeStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::EncryptedVolumeStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::EncryptedVolumeStatsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::EncryptedVolumeStatsResponse>(Arena*);
template<> ::opi_api::storage::v1::GetEncryptedVolumeRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetEncryptedVolumeRequest>(Arena*);
template<> ::opi_api::storage::v1::ListEncryptedVolumesRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListEncryptedVolumesRequest>(Arena*);
template<> ::opi_api::storage::v1::ListEncryptedVolumesResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListEncryptedVolumesResponse>(Arena*);
template<> ::opi_api::storage::v1::UpdateEncryptedVolumeRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateEncryptedVolumeRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class EncryptedVolume final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.EncryptedVolume) */ {
 public:
  inline EncryptedVolume() : EncryptedVolume(nullptr) {}
  ~EncryptedVolume() override;
  explicit constexpr EncryptedVolume(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptedVolume(const EncryptedVolume& from);
  EncryptedVolume(EncryptedVolume&& from) noexcept
    : EncryptedVolume() {
    *this = ::std::move(from);
  }

  inline EncryptedVolume& operator=(const EncryptedVolume& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedVolume& operator=(EncryptedVolume&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncryptedVolume& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptedVolume* internal_default_instance() {
    return reinterpret_cast<const EncryptedVolume*>(
               &_EncryptedVolume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EncryptedVolume& a, EncryptedVolume& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedVolume* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedVolume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptedVolume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptedVolume>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncryptedVolume& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EncryptedVolume& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptedVolume* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.EncryptedVolume";
  }
  protected:
  explicit EncryptedVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kEncryptedVolumeIdFieldNumber = 1,
    kVolumeIdFieldNumber = 2,
    kCipherFieldNumber = 4,
  };
  // bytes key = 3;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
  bool has_encrypted_volume_id() const;
  private:
  bool _internal_has_encrypted_volume_id() const;
  public:
  void clear_encrypted_volume_id();
  const ::opi_api::common::v1::ObjectKey& encrypted_volume_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_encrypted_volume_id();
  ::opi_api::common::v1::ObjectKey* mutable_encrypted_volume_id();
  void set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_encrypted_volume_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_encrypted_volume_id();
  public:
  void unsafe_arena_set_allocated_encrypted_volume_id(
      ::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_encrypted_volume_id();

  // .opi_api.common.v1.ObjectKey volume_id = 2;
  bool has_volume_id() const;
  private:
  bool _internal_has_volume_id() const;
  public:
  void clear_volume_id();
  const ::opi_api::common::v1::ObjectKey& volume_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_volume_id();
  ::opi_api::common::v1::ObjectKey* mutable_volume_id();
  void set_allocated_volume_id(::opi_api::common::v1::ObjectKey* volume_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_volume_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_volume_id();
  public:
  void unsafe_arena_set_allocated_volume_id(
      ::opi_api::common::v1::ObjectKey* volume_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_volume_id();

  // .opi_api.storage.v1.EncryptionType cipher = 4;
  void clear_cipher();
  ::opi_api::storage::v1::EncryptionType cipher() const;
  void set_cipher(::opi_api::storage::v1::EncryptionType value);
  private:
  ::opi_api::storage::v1::EncryptionType _internal_cipher() const;
  void _internal_set_cipher(::opi_api::storage::v1::EncryptionType value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.EncryptedVolume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::opi_api::common::v1::ObjectKey* encrypted_volume_id_;
  ::opi_api::common::v1::ObjectKey* volume_id_;
  int cipher_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class CreateEncryptedVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateEncryptedVolumeRequest) */ {
 public:
  inline CreateEncryptedVolumeRequest() : CreateEncryptedVolumeRequest(nullptr) {}
  ~CreateEncryptedVolumeRequest() override;
  explicit constexpr CreateEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateEncryptedVolumeRequest(const CreateEncryptedVolumeRequest& from);
  CreateEncryptedVolumeRequest(CreateEncryptedVolumeRequest&& from) noexcept
    : CreateEncryptedVolumeRequest() {
    *this = ::std::move(from);
  }

  inline CreateEncryptedVolumeRequest& operator=(const CreateEncryptedVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEncryptedVolumeRequest& operator=(CreateEncryptedVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateEncryptedVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateEncryptedVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateEncryptedVolumeRequest*>(
               &_CreateEncryptedVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateEncryptedVolumeRequest& a, CreateEncryptedVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEncryptedVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateEncryptedVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateEncryptedVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateEncryptedVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateEncryptedVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateEncryptedVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEncryptedVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateEncryptedVolumeRequest";
  }
  protected:
  explicit CreateEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kEncryptedVolumeIdFieldNumber = 3,
    kEncryptedVolumeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string encrypted_volume_id = 3;
  void clear_encrypted_volume_id();
  const std::string& encrypted_volume_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted_volume_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted_volume_id();
  PROTOBUF_NODISCARD std::string* release_encrypted_volume_id();
  void set_allocated_encrypted_volume_id(std::string* encrypted_volume_id);
  private:
  const std::string& _internal_encrypted_volume_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_volume_id(const std::string& value);
  std::string* _internal_mutable_encrypted_volume_id();
  public:

  // .opi_api.storage.v1.EncryptedVolume encrypted_volume = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_encrypted_volume() const;
  private:
  bool _internal_has_encrypted_volume() const;
  public:
  void clear_encrypted_volume();
  const ::opi_api::storage::v1::EncryptedVolume& encrypted_volume() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::EncryptedVolume* release_encrypted_volume();
  ::opi_api::storage::v1::EncryptedVolume* mutable_encrypted_volume();
  void set_allocated_encrypted_volume(::opi_api::storage::v1::EncryptedVolume* encrypted_volume);
  private:
  const ::opi_api::storage::v1::EncryptedVolume& _internal_encrypted_volume() const;
  ::opi_api::storage::v1::EncryptedVolume* _internal_mutable_encrypted_volume();
  public:
  void unsafe_arena_set_allocated_encrypted_volume(
      ::opi_api::storage::v1::EncryptedVolume* encrypted_volume);
  ::opi_api::storage::v1::EncryptedVolume* unsafe_arena_release_encrypted_volume();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateEncryptedVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_volume_id_;
  ::opi_api::storage::v1::EncryptedVolume* encrypted_volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class DeleteEncryptedVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteEncryptedVolumeRequest) */ {
 public:
  inline DeleteEncryptedVolumeRequest() : DeleteEncryptedVolumeRequest(nullptr) {}
  ~DeleteEncryptedVolumeRequest() override;
  explicit constexpr DeleteEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteEncryptedVolumeRequest(const DeleteEncryptedVolumeRequest& from);
  DeleteEncryptedVolumeRequest(DeleteEncryptedVolumeRequest&& from) noexcept
    : DeleteEncryptedVolumeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteEncryptedVolumeRequest& operator=(const DeleteEncryptedVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteEncryptedVolumeRequest& operator=(DeleteEncryptedVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteEncryptedVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteEncryptedVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteEncryptedVolumeRequest*>(
               &_DeleteEncryptedVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteEncryptedVolumeRequest& a, DeleteEncryptedVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteEncryptedVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteEncryptedVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteEncryptedVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteEncryptedVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteEncryptedVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteEncryptedVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteEncryptedVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteEncryptedVolumeRequest";
  }
  protected:
  explicit DeleteEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAllowMissingFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool allow_missing = 2;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool allow_missing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class UpdateEncryptedVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateEncryptedVolumeRequest) */ {
 public:
  inline UpdateEncryptedVolumeRequest() : UpdateEncryptedVolumeRequest(nullptr) {}
  ~UpdateEncryptedVolumeRequest() override;
  explicit constexpr UpdateEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEncryptedVolumeRequest(const UpdateEncryptedVolumeRequest& from);
  UpdateEncryptedVolumeRequest(UpdateEncryptedVolumeRequest&& from) noexcept
    : UpdateEncryptedVolumeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateEncryptedVolumeRequest& operator=(const UpdateEncryptedVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEncryptedVolumeRequest& operator=(UpdateEncryptedVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateEncryptedVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEncryptedVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateEncryptedVolumeRequest*>(
               &_UpdateEncryptedVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateEncryptedVolumeRequest& a, UpdateEncryptedVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEncryptedVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEncryptedVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateEncryptedVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateEncryptedVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateEncryptedVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateEncryptedVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEncryptedVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateEncryptedVolumeRequest";
  }
  protected:
  explicit UpdateEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedVolumeFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.storage.v1.EncryptedVolume encrypted_volume = 1;
  bool has_encrypted_volume() const;
  private:
  bool _internal_has_encrypted_volume() const;
  public:
  void clear_encrypted_volume();
  const ::opi_api::storage::v1::EncryptedVolume& encrypted_volume() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::EncryptedVolume* release_encrypted_volume();
  ::opi_api::storage::v1::EncryptedVolume* mutable_encrypted_volume();
  void set_allocated_encrypted_volume(::opi_api::storage::v1::EncryptedVolume* encrypted_volume);
  private:
  const ::opi_api::storage::v1::EncryptedVolume& _internal_encrypted_volume() const;
  ::opi_api::storage::v1::EncryptedVolume* _internal_mutable_encrypted_volume();
  public:
  void unsafe_arena_set_allocated_encrypted_volume(
      ::opi_api::storage::v1::EncryptedVolume* encrypted_volume);
  ::opi_api::storage::v1::EncryptedVolume* unsafe_arena_release_encrypted_volume();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::EncryptedVolume* encrypted_volume_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class ListEncryptedVolumesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListEncryptedVolumesRequest) */ {
 public:
  inline ListEncryptedVolumesRequest() : ListEncryptedVolumesRequest(nullptr) {}
  ~ListEncryptedVolumesRequest() override;
  explicit constexpr ListEncryptedVolumesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListEncryptedVolumesRequest(const ListEncryptedVolumesRequest& from);
  ListEncryptedVolumesRequest(ListEncryptedVolumesRequest&& from) noexcept
    : ListEncryptedVolumesRequest() {
    *this = ::std::move(from);
  }

  inline ListEncryptedVolumesRequest& operator=(const ListEncryptedVolumesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListEncryptedVolumesRequest& operator=(ListEncryptedVolumesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListEncryptedVolumesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListEncryptedVolumesRequest* internal_default_instance() {
    return reinterpret_cast<const ListEncryptedVolumesRequest*>(
               &_ListEncryptedVolumesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListEncryptedVolumesRequest& a, ListEncryptedVolumesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListEncryptedVolumesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListEncryptedVolumesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListEncryptedVolumesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListEncryptedVolumesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListEncryptedVolumesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListEncryptedVolumesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListEncryptedVolumesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListEncryptedVolumesRequest";
  }
  protected:
  explicit ListEncryptedVolumesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListEncryptedVolumesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class ListEncryptedVolumesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListEncryptedVolumesResponse) */ {
 public:
  inline ListEncryptedVolumesResponse() : ListEncryptedVolumesResponse(nullptr) {}
  ~ListEncryptedVolumesResponse() override;
  explicit constexpr ListEncryptedVolumesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListEncryptedVolumesResponse(const ListEncryptedVolumesResponse& from);
  ListEncryptedVolumesResponse(ListEncryptedVolumesResponse&& from) noexcept
    : ListEncryptedVolumesResponse() {
    *this = ::std::move(from);
  }

  inline ListEncryptedVolumesResponse& operator=(const ListEncryptedVolumesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListEncryptedVolumesResponse& operator=(ListEncryptedVolumesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListEncryptedVolumesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListEncryptedVolumesResponse* internal_default_instance() {
    return reinterpret_cast<const ListEncryptedVolumesResponse*>(
               &_ListEncryptedVolumesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListEncryptedVolumesResponse& a, ListEncryptedVolumesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListEncryptedVolumesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListEncryptedVolumesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListEncryptedVolumesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListEncryptedVolumesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListEncryptedVolumesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListEncryptedVolumesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListEncryptedVolumesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListEncryptedVolumesResponse";
  }
  protected:
  explicit ListEncryptedVolumesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedVolumesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.storage.v1.EncryptedVolume encrypted_volumes = 1;
  int encrypted_volumes_size() const;
  private:
  int _internal_encrypted_volumes_size() const;
  public:
  void clear_encrypted_volumes();
  ::opi_api::storage::v1::EncryptedVolume* mutable_encrypted_volumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::EncryptedVolume >*
      mutable_encrypted_volumes();
  private:
  const ::opi_api::storage::v1::EncryptedVolume& _internal_encrypted_volumes(int index) const;
  ::opi_api::storage::v1::EncryptedVolume* _internal_add_encrypted_volumes();
  public:
  const ::opi_api::storage::v1::EncryptedVolume& encrypted_volumes(int index) const;
  ::opi_api::storage::v1::EncryptedVolume* add_encrypted_volumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::EncryptedVolume >&
      encrypted_volumes() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListEncryptedVolumesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::EncryptedVolume > encrypted_volumes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class GetEncryptedVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetEncryptedVolumeRequest) */ {
 public:
  inline GetEncryptedVolumeRequest() : GetEncryptedVolumeRequest(nullptr) {}
  ~GetEncryptedVolumeRequest() override;
  explicit constexpr GetEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEncryptedVolumeRequest(const GetEncryptedVolumeRequest& from);
  GetEncryptedVolumeRequest(GetEncryptedVolumeRequest&& from) noexcept
    : GetEncryptedVolumeRequest() {
    *this = ::std::move(from);
  }

  inline GetEncryptedVolumeRequest& operator=(const GetEncryptedVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEncryptedVolumeRequest& operator=(GetEncryptedVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEncryptedVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEncryptedVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const GetEncryptedVolumeRequest*>(
               &_GetEncryptedVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetEncryptedVolumeRequest& a, GetEncryptedVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEncryptedVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEncryptedVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEncryptedVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEncryptedVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEncryptedVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetEncryptedVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEncryptedVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetEncryptedVolumeRequest";
  }
  protected:
  explicit GetEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetEncryptedVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class EncryptedVolumeStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.EncryptedVolumeStatsRequest) */ {
 public:
  inline EncryptedVolumeStatsRequest() : EncryptedVolumeStatsRequest(nullptr) {}
  ~EncryptedVolumeStatsRequest() override;
  explicit constexpr EncryptedVolumeStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptedVolumeStatsRequest(const EncryptedVolumeStatsRequest& from);
  EncryptedVolumeStatsRequest(EncryptedVolumeStatsRequest&& from) noexcept
    : EncryptedVolumeStatsRequest() {
    *this = ::std::move(from);
  }

  inline EncryptedVolumeStatsRequest& operator=(const EncryptedVolumeStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedVolumeStatsRequest& operator=(EncryptedVolumeStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncryptedVolumeStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptedVolumeStatsRequest* internal_default_instance() {
    return reinterpret_cast<const EncryptedVolumeStatsRequest*>(
               &_EncryptedVolumeStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EncryptedVolumeStatsRequest& a, EncryptedVolumeStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedVolumeStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedVolumeStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptedVolumeStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptedVolumeStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncryptedVolumeStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EncryptedVolumeStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptedVolumeStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.EncryptedVolumeStatsRequest";
  }
  protected:
  explicit EncryptedVolumeStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedVolumeIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
  bool has_encrypted_volume_id() const;
  private:
  bool _internal_has_encrypted_volume_id() const;
  public:
  void clear_encrypted_volume_id();
  const ::opi_api::common::v1::ObjectKey& encrypted_volume_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_encrypted_volume_id();
  ::opi_api::common::v1::ObjectKey* mutable_encrypted_volume_id();
  void set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_encrypted_volume_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_encrypted_volume_id();
  public:
  void unsafe_arena_set_allocated_encrypted_volume_id(
      ::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_encrypted_volume_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.EncryptedVolumeStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* encrypted_volume_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// -------------------------------------------------------------------

class EncryptedVolumeStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.EncryptedVolumeStatsResponse) */ {
 public:
  inline EncryptedVolumeStatsResponse() : EncryptedVolumeStatsResponse(nullptr) {}
  ~EncryptedVolumeStatsResponse() override;
  explicit constexpr EncryptedVolumeStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptedVolumeStatsResponse(const EncryptedVolumeStatsResponse& from);
  EncryptedVolumeStatsResponse(EncryptedVolumeStatsResponse&& from) noexcept
    : EncryptedVolumeStatsResponse() {
    *this = ::std::move(from);
  }

  inline EncryptedVolumeStatsResponse& operator=(const EncryptedVolumeStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedVolumeStatsResponse& operator=(EncryptedVolumeStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncryptedVolumeStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptedVolumeStatsResponse* internal_default_instance() {
    return reinterpret_cast<const EncryptedVolumeStatsResponse*>(
               &_EncryptedVolumeStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EncryptedVolumeStatsResponse& a, EncryptedVolumeStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedVolumeStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedVolumeStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptedVolumeStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptedVolumeStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncryptedVolumeStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EncryptedVolumeStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptedVolumeStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.EncryptedVolumeStatsResponse";
  }
  protected:
  explicit EncryptedVolumeStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedVolumeIdFieldNumber = 1,
    kStatsFieldNumber = 2,
  };
  // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
  bool has_encrypted_volume_id() const;
  private:
  bool _internal_has_encrypted_volume_id() const;
  public:
  void clear_encrypted_volume_id();
  const ::opi_api::common::v1::ObjectKey& encrypted_volume_id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_encrypted_volume_id();
  ::opi_api::common::v1::ObjectKey* mutable_encrypted_volume_id();
  void set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_encrypted_volume_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_encrypted_volume_id();
  public:
  void unsafe_arena_set_allocated_encrypted_volume_id(
      ::opi_api::common::v1::ObjectKey* encrypted_volume_id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_encrypted_volume_id();

  // .opi_api.storage.v1.VolumeStats stats = 2;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::opi_api::storage::v1::VolumeStats& stats() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VolumeStats* release_stats();
  ::opi_api::storage::v1::VolumeStats* mutable_stats();
  void set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats);
  private:
  const ::opi_api::storage::v1::VolumeStats& _internal_stats() const;
  ::opi_api::storage::v1::VolumeStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::opi_api::storage::v1::VolumeStats* stats);
  ::opi_api::storage::v1::VolumeStats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.EncryptedVolumeStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* encrypted_volume_id_;
  ::opi_api::storage::v1::VolumeStats* stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_middleend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EncryptedVolume

// .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
inline bool EncryptedVolume::_internal_has_encrypted_volume_id() const {
  return this != internal_default_instance() && encrypted_volume_id_ != nullptr;
}
inline bool EncryptedVolume::has_encrypted_volume_id() const {
  return _internal_has_encrypted_volume_id();
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolume::_internal_encrypted_volume_id() const {
  const ::opi_api::common::v1::ObjectKey* p = encrypted_volume_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolume::encrypted_volume_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.EncryptedVolume.encrypted_volume_id)
  return _internal_encrypted_volume_id();
}
inline void EncryptedVolume::unsafe_arena_set_allocated_encrypted_volume_id(
    ::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  encrypted_volume_id_ = encrypted_volume_id;
  if (encrypted_volume_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.EncryptedVolume.encrypted_volume_id)
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::release_encrypted_volume_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::unsafe_arena_release_encrypted_volume_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.EncryptedVolume.encrypted_volume_id)
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::_internal_mutable_encrypted_volume_id() {
  
  if (encrypted_volume_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    encrypted_volume_id_ = p;
  }
  return encrypted_volume_id_;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::mutable_encrypted_volume_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_encrypted_volume_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.EncryptedVolume.encrypted_volume_id)
  return _msg;
}
inline void EncryptedVolume::set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  if (encrypted_volume_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id));
    if (message_arena != submessage_arena) {
      encrypted_volume_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_volume_id, submessage_arena);
    }
    
  } else {
    
  }
  encrypted_volume_id_ = encrypted_volume_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.EncryptedVolume.encrypted_volume_id)
}

// .opi_api.common.v1.ObjectKey volume_id = 2;
inline bool EncryptedVolume::_internal_has_volume_id() const {
  return this != internal_default_instance() && volume_id_ != nullptr;
}
inline bool EncryptedVolume::has_volume_id() const {
  return _internal_has_volume_id();
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolume::_internal_volume_id() const {
  const ::opi_api::common::v1::ObjectKey* p = volume_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolume::volume_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.EncryptedVolume.volume_id)
  return _internal_volume_id();
}
inline void EncryptedVolume::unsafe_arena_set_allocated_volume_id(
    ::opi_api::common::v1::ObjectKey* volume_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_id_);
  }
  volume_id_ = volume_id;
  if (volume_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.EncryptedVolume.volume_id)
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::release_volume_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = volume_id_;
  volume_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::unsafe_arena_release_volume_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.EncryptedVolume.volume_id)
  
  ::opi_api::common::v1::ObjectKey* temp = volume_id_;
  volume_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::_internal_mutable_volume_id() {
  
  if (volume_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    volume_id_ = p;
  }
  return volume_id_;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolume::mutable_volume_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_volume_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.EncryptedVolume.volume_id)
  return _msg;
}
inline void EncryptedVolume::set_allocated_volume_id(::opi_api::common::v1::ObjectKey* volume_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_id_);
  }
  if (volume_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_id));
    if (message_arena != submessage_arena) {
      volume_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume_id, submessage_arena);
    }
    
  } else {
    
  }
  volume_id_ = volume_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.EncryptedVolume.volume_id)
}

// bytes key = 3;
inline void EncryptedVolume::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& EncryptedVolume::key() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.EncryptedVolume.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptedVolume::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.EncryptedVolume.key)
}
inline std::string* EncryptedVolume::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.EncryptedVolume.key)
  return _s;
}
inline const std::string& EncryptedVolume::_internal_key() const {
  return key_.Get();
}
inline void EncryptedVolume::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EncryptedVolume::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EncryptedVolume::release_key() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.EncryptedVolume.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EncryptedVolume::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.EncryptedVolume.key)
}

// .opi_api.storage.v1.EncryptionType cipher = 4;
inline void EncryptedVolume::clear_cipher() {
  cipher_ = 0;
}
inline ::opi_api::storage::v1::EncryptionType EncryptedVolume::_internal_cipher() const {
  return static_cast< ::opi_api::storage::v1::EncryptionType >(cipher_);
}
inline ::opi_api::storage::v1::EncryptionType EncryptedVolume::cipher() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.EncryptedVolume.cipher)
  return _internal_cipher();
}
inline void EncryptedVolume::_internal_set_cipher(::opi_api::storage::v1::EncryptionType value) {
  
  cipher_ = value;
}
inline void EncryptedVolume::set_cipher(::opi_api::storage::v1::EncryptionType value) {
  _internal_set_cipher(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.EncryptedVolume.cipher)
}

// -------------------------------------------------------------------

// CreateEncryptedVolumeRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateEncryptedVolumeRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateEncryptedVolumeRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateEncryptedVolumeRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateEncryptedVolumeRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateEncryptedVolumeRequest.parent)
}
inline std::string* CreateEncryptedVolumeRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateEncryptedVolumeRequest.parent)
  return _s;
}
inline const std::string& CreateEncryptedVolumeRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateEncryptedVolumeRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateEncryptedVolumeRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateEncryptedVolumeRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateEncryptedVolumeRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateEncryptedVolumeRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateEncryptedVolumeRequest.parent)
}

// .opi_api.storage.v1.EncryptedVolume encrypted_volume = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateEncryptedVolumeRequest::_internal_has_encrypted_volume() const {
  return this != internal_default_instance() && encrypted_volume_ != nullptr;
}
inline bool CreateEncryptedVolumeRequest::has_encrypted_volume() const {
  return _internal_has_encrypted_volume();
}
inline void CreateEncryptedVolumeRequest::clear_encrypted_volume() {
  if (GetArenaForAllocation() == nullptr && encrypted_volume_ != nullptr) {
    delete encrypted_volume_;
  }
  encrypted_volume_ = nullptr;
}
inline const ::opi_api::storage::v1::EncryptedVolume& CreateEncryptedVolumeRequest::_internal_encrypted_volume() const {
  const ::opi_api::storage::v1::EncryptedVolume* p = encrypted_volume_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::EncryptedVolume&>(
      ::opi_api::storage::v1::_EncryptedVolume_default_instance_);
}
inline const ::opi_api::storage::v1::EncryptedVolume& CreateEncryptedVolumeRequest::encrypted_volume() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateEncryptedVolumeRequest.encrypted_volume)
  return _internal_encrypted_volume();
}
inline void CreateEncryptedVolumeRequest::unsafe_arena_set_allocated_encrypted_volume(
    ::opi_api::storage::v1::EncryptedVolume* encrypted_volume) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_);
  }
  encrypted_volume_ = encrypted_volume;
  if (encrypted_volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateEncryptedVolumeRequest.encrypted_volume)
}
inline ::opi_api::storage::v1::EncryptedVolume* CreateEncryptedVolumeRequest::release_encrypted_volume() {
  
  ::opi_api::storage::v1::EncryptedVolume* temp = encrypted_volume_;
  encrypted_volume_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::EncryptedVolume* CreateEncryptedVolumeRequest::unsafe_arena_release_encrypted_volume() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateEncryptedVolumeRequest.encrypted_volume)
  
  ::opi_api::storage::v1::EncryptedVolume* temp = encrypted_volume_;
  encrypted_volume_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::EncryptedVolume* CreateEncryptedVolumeRequest::_internal_mutable_encrypted_volume() {
  
  if (encrypted_volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::EncryptedVolume>(GetArenaForAllocation());
    encrypted_volume_ = p;
  }
  return encrypted_volume_;
}
inline ::opi_api::storage::v1::EncryptedVolume* CreateEncryptedVolumeRequest::mutable_encrypted_volume() {
  ::opi_api::storage::v1::EncryptedVolume* _msg = _internal_mutable_encrypted_volume();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateEncryptedVolumeRequest.encrypted_volume)
  return _msg;
}
inline void CreateEncryptedVolumeRequest::set_allocated_encrypted_volume(::opi_api::storage::v1::EncryptedVolume* encrypted_volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete encrypted_volume_;
  }
  if (encrypted_volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::EncryptedVolume>::GetOwningArena(encrypted_volume);
    if (message_arena != submessage_arena) {
      encrypted_volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_volume, submessage_arena);
    }
    
  } else {
    
  }
  encrypted_volume_ = encrypted_volume;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateEncryptedVolumeRequest.encrypted_volume)
}

// string encrypted_volume_id = 3;
inline void CreateEncryptedVolumeRequest::clear_encrypted_volume_id() {
  encrypted_volume_id_.ClearToEmpty();
}
inline const std::string& CreateEncryptedVolumeRequest::encrypted_volume_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateEncryptedVolumeRequest.encrypted_volume_id)
  return _internal_encrypted_volume_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateEncryptedVolumeRequest::set_encrypted_volume_id(ArgT0&& arg0, ArgT... args) {
 
 encrypted_volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateEncryptedVolumeRequest.encrypted_volume_id)
}
inline std::string* CreateEncryptedVolumeRequest::mutable_encrypted_volume_id() {
  std::string* _s = _internal_mutable_encrypted_volume_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateEncryptedVolumeRequest.encrypted_volume_id)
  return _s;
}
inline const std::string& CreateEncryptedVolumeRequest::_internal_encrypted_volume_id() const {
  return encrypted_volume_id_.Get();
}
inline void CreateEncryptedVolumeRequest::_internal_set_encrypted_volume_id(const std::string& value) {
  
  encrypted_volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateEncryptedVolumeRequest::_internal_mutable_encrypted_volume_id() {
  
  return encrypted_volume_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateEncryptedVolumeRequest::release_encrypted_volume_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateEncryptedVolumeRequest.encrypted_volume_id)
  return encrypted_volume_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateEncryptedVolumeRequest::set_allocated_encrypted_volume_id(std::string* encrypted_volume_id) {
  if (encrypted_volume_id != nullptr) {
    
  } else {
    
  }
  encrypted_volume_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_volume_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (encrypted_volume_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    encrypted_volume_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateEncryptedVolumeRequest.encrypted_volume_id)
}

// -------------------------------------------------------------------

// DeleteEncryptedVolumeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteEncryptedVolumeRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteEncryptedVolumeRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteEncryptedVolumeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteEncryptedVolumeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteEncryptedVolumeRequest.name)
}
inline std::string* DeleteEncryptedVolumeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteEncryptedVolumeRequest.name)
  return _s;
}
inline const std::string& DeleteEncryptedVolumeRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteEncryptedVolumeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteEncryptedVolumeRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteEncryptedVolumeRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteEncryptedVolumeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteEncryptedVolumeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteEncryptedVolumeRequest.name)
}

// bool allow_missing = 2;
inline void DeleteEncryptedVolumeRequest::clear_allow_missing() {
  allow_missing_ = false;
}
inline bool DeleteEncryptedVolumeRequest::_internal_allow_missing() const {
  return allow_missing_;
}
inline bool DeleteEncryptedVolumeRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteEncryptedVolumeRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteEncryptedVolumeRequest::_internal_set_allow_missing(bool value) {
  
  allow_missing_ = value;
}
inline void DeleteEncryptedVolumeRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteEncryptedVolumeRequest.allow_missing)
}

// -------------------------------------------------------------------

// UpdateEncryptedVolumeRequest

// .opi_api.storage.v1.EncryptedVolume encrypted_volume = 1;
inline bool UpdateEncryptedVolumeRequest::_internal_has_encrypted_volume() const {
  return this != internal_default_instance() && encrypted_volume_ != nullptr;
}
inline bool UpdateEncryptedVolumeRequest::has_encrypted_volume() const {
  return _internal_has_encrypted_volume();
}
inline void UpdateEncryptedVolumeRequest::clear_encrypted_volume() {
  if (GetArenaForAllocation() == nullptr && encrypted_volume_ != nullptr) {
    delete encrypted_volume_;
  }
  encrypted_volume_ = nullptr;
}
inline const ::opi_api::storage::v1::EncryptedVolume& UpdateEncryptedVolumeRequest::_internal_encrypted_volume() const {
  const ::opi_api::storage::v1::EncryptedVolume* p = encrypted_volume_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::EncryptedVolume&>(
      ::opi_api::storage::v1::_EncryptedVolume_default_instance_);
}
inline const ::opi_api::storage::v1::EncryptedVolume& UpdateEncryptedVolumeRequest::encrypted_volume() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateEncryptedVolumeRequest.encrypted_volume)
  return _internal_encrypted_volume();
}
inline void UpdateEncryptedVolumeRequest::unsafe_arena_set_allocated_encrypted_volume(
    ::opi_api::storage::v1::EncryptedVolume* encrypted_volume) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_);
  }
  encrypted_volume_ = encrypted_volume;
  if (encrypted_volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateEncryptedVolumeRequest.encrypted_volume)
}
inline ::opi_api::storage::v1::EncryptedVolume* UpdateEncryptedVolumeRequest::release_encrypted_volume() {
  
  ::opi_api::storage::v1::EncryptedVolume* temp = encrypted_volume_;
  encrypted_volume_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::EncryptedVolume* UpdateEncryptedVolumeRequest::unsafe_arena_release_encrypted_volume() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateEncryptedVolumeRequest.encrypted_volume)
  
  ::opi_api::storage::v1::EncryptedVolume* temp = encrypted_volume_;
  encrypted_volume_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::EncryptedVolume* UpdateEncryptedVolumeRequest::_internal_mutable_encrypted_volume() {
  
  if (encrypted_volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::EncryptedVolume>(GetArenaForAllocation());
    encrypted_volume_ = p;
  }
  return encrypted_volume_;
}
inline ::opi_api::storage::v1::EncryptedVolume* UpdateEncryptedVolumeRequest::mutable_encrypted_volume() {
  ::opi_api::storage::v1::EncryptedVolume* _msg = _internal_mutable_encrypted_volume();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateEncryptedVolumeRequest.encrypted_volume)
  return _msg;
}
inline void UpdateEncryptedVolumeRequest::set_allocated_encrypted_volume(::opi_api::storage::v1::EncryptedVolume* encrypted_volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete encrypted_volume_;
  }
  if (encrypted_volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::EncryptedVolume>::GetOwningArena(encrypted_volume);
    if (message_arena != submessage_arena) {
      encrypted_volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_volume, submessage_arena);
    }
    
  } else {
    
  }
  encrypted_volume_ = encrypted_volume;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateEncryptedVolumeRequest.encrypted_volume)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateEncryptedVolumeRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateEncryptedVolumeRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateEncryptedVolumeRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateEncryptedVolumeRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateEncryptedVolumeRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateEncryptedVolumeRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateEncryptedVolumeRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateEncryptedVolumeRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateEncryptedVolumeRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateEncryptedVolumeRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateEncryptedVolumeRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateEncryptedVolumeRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateEncryptedVolumeRequest.update_mask)
  return _msg;
}
inline void UpdateEncryptedVolumeRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateEncryptedVolumeRequest.update_mask)
}

// -------------------------------------------------------------------

// ListEncryptedVolumesRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListEncryptedVolumesRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListEncryptedVolumesRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListEncryptedVolumesRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListEncryptedVolumesRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListEncryptedVolumesRequest.parent)
}
inline std::string* ListEncryptedVolumesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListEncryptedVolumesRequest.parent)
  return _s;
}
inline const std::string& ListEncryptedVolumesRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListEncryptedVolumesRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListEncryptedVolumesRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListEncryptedVolumesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListEncryptedVolumesRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListEncryptedVolumesRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListEncryptedVolumesRequest.parent)
}

// int32 page_size = 2;
inline void ListEncryptedVolumesRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListEncryptedVolumesRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListEncryptedVolumesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListEncryptedVolumesRequest.page_size)
  return _internal_page_size();
}
inline void ListEncryptedVolumesRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListEncryptedVolumesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListEncryptedVolumesRequest.page_size)
}

// string page_token = 3;
inline void ListEncryptedVolumesRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListEncryptedVolumesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListEncryptedVolumesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListEncryptedVolumesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListEncryptedVolumesRequest.page_token)
}
inline std::string* ListEncryptedVolumesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListEncryptedVolumesRequest.page_token)
  return _s;
}
inline const std::string& ListEncryptedVolumesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListEncryptedVolumesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListEncryptedVolumesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListEncryptedVolumesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListEncryptedVolumesRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListEncryptedVolumesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListEncryptedVolumesRequest.page_token)
}

// -------------------------------------------------------------------

// ListEncryptedVolumesResponse

// repeated .opi_api.storage.v1.EncryptedVolume encrypted_volumes = 1;
inline int ListEncryptedVolumesResponse::_internal_encrypted_volumes_size() const {
  return encrypted_volumes_.size();
}
inline int ListEncryptedVolumesResponse::encrypted_volumes_size() const {
  return _internal_encrypted_volumes_size();
}
inline void ListEncryptedVolumesResponse::clear_encrypted_volumes() {
  encrypted_volumes_.Clear();
}
inline ::opi_api::storage::v1::EncryptedVolume* ListEncryptedVolumesResponse::mutable_encrypted_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListEncryptedVolumesResponse.encrypted_volumes)
  return encrypted_volumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::EncryptedVolume >*
ListEncryptedVolumesResponse::mutable_encrypted_volumes() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListEncryptedVolumesResponse.encrypted_volumes)
  return &encrypted_volumes_;
}
inline const ::opi_api::storage::v1::EncryptedVolume& ListEncryptedVolumesResponse::_internal_encrypted_volumes(int index) const {
  return encrypted_volumes_.Get(index);
}
inline const ::opi_api::storage::v1::EncryptedVolume& ListEncryptedVolumesResponse::encrypted_volumes(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListEncryptedVolumesResponse.encrypted_volumes)
  return _internal_encrypted_volumes(index);
}
inline ::opi_api::storage::v1::EncryptedVolume* ListEncryptedVolumesResponse::_internal_add_encrypted_volumes() {
  return encrypted_volumes_.Add();
}
inline ::opi_api::storage::v1::EncryptedVolume* ListEncryptedVolumesResponse::add_encrypted_volumes() {
  ::opi_api::storage::v1::EncryptedVolume* _add = _internal_add_encrypted_volumes();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListEncryptedVolumesResponse.encrypted_volumes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::EncryptedVolume >&
ListEncryptedVolumesResponse::encrypted_volumes() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListEncryptedVolumesResponse.encrypted_volumes)
  return encrypted_volumes_;
}

// string next_page_token = 2;
inline void ListEncryptedVolumesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListEncryptedVolumesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListEncryptedVolumesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListEncryptedVolumesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListEncryptedVolumesResponse.next_page_token)
}
inline std::string* ListEncryptedVolumesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListEncryptedVolumesResponse.next_page_token)
  return _s;
}
inline const std::string& ListEncryptedVolumesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListEncryptedVolumesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListEncryptedVolumesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListEncryptedVolumesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListEncryptedVolumesResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListEncryptedVolumesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListEncryptedVolumesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetEncryptedVolumeRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetEncryptedVolumeRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetEncryptedVolumeRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetEncryptedVolumeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEncryptedVolumeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.GetEncryptedVolumeRequest.name)
}
inline std::string* GetEncryptedVolumeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetEncryptedVolumeRequest.name)
  return _s;
}
inline const std::string& GetEncryptedVolumeRequest::_internal_name() const {
  return name_.Get();
}
inline void GetEncryptedVolumeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetEncryptedVolumeRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetEncryptedVolumeRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetEncryptedVolumeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetEncryptedVolumeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetEncryptedVolumeRequest.name)
}

// -------------------------------------------------------------------

// EncryptedVolumeStatsRequest

// .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
inline bool EncryptedVolumeStatsRequest::_internal_has_encrypted_volume_id() const {
  return this != internal_default_instance() && encrypted_volume_id_ != nullptr;
}
inline bool EncryptedVolumeStatsRequest::has_encrypted_volume_id() const {
  return _internal_has_encrypted_volume_id();
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolumeStatsRequest::_internal_encrypted_volume_id() const {
  const ::opi_api::common::v1::ObjectKey* p = encrypted_volume_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolumeStatsRequest::encrypted_volume_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.EncryptedVolumeStatsRequest.encrypted_volume_id)
  return _internal_encrypted_volume_id();
}
inline void EncryptedVolumeStatsRequest::unsafe_arena_set_allocated_encrypted_volume_id(
    ::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  encrypted_volume_id_ = encrypted_volume_id;
  if (encrypted_volume_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.EncryptedVolumeStatsRequest.encrypted_volume_id)
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsRequest::release_encrypted_volume_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsRequest::unsafe_arena_release_encrypted_volume_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.EncryptedVolumeStatsRequest.encrypted_volume_id)
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsRequest::_internal_mutable_encrypted_volume_id() {
  
  if (encrypted_volume_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    encrypted_volume_id_ = p;
  }
  return encrypted_volume_id_;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsRequest::mutable_encrypted_volume_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_encrypted_volume_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.EncryptedVolumeStatsRequest.encrypted_volume_id)
  return _msg;
}
inline void EncryptedVolumeStatsRequest::set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  if (encrypted_volume_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id));
    if (message_arena != submessage_arena) {
      encrypted_volume_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_volume_id, submessage_arena);
    }
    
  } else {
    
  }
  encrypted_volume_id_ = encrypted_volume_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.EncryptedVolumeStatsRequest.encrypted_volume_id)
}

// -------------------------------------------------------------------

// EncryptedVolumeStatsResponse

// .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
inline bool EncryptedVolumeStatsResponse::_internal_has_encrypted_volume_id() const {
  return this != internal_default_instance() && encrypted_volume_id_ != nullptr;
}
inline bool EncryptedVolumeStatsResponse::has_encrypted_volume_id() const {
  return _internal_has_encrypted_volume_id();
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolumeStatsResponse::_internal_encrypted_volume_id() const {
  const ::opi_api::common::v1::ObjectKey* p = encrypted_volume_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& EncryptedVolumeStatsResponse::encrypted_volume_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.EncryptedVolumeStatsResponse.encrypted_volume_id)
  return _internal_encrypted_volume_id();
}
inline void EncryptedVolumeStatsResponse::unsafe_arena_set_allocated_encrypted_volume_id(
    ::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  encrypted_volume_id_ = encrypted_volume_id;
  if (encrypted_volume_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.EncryptedVolumeStatsResponse.encrypted_volume_id)
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsResponse::release_encrypted_volume_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsResponse::unsafe_arena_release_encrypted_volume_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.EncryptedVolumeStatsResponse.encrypted_volume_id)
  
  ::opi_api::common::v1::ObjectKey* temp = encrypted_volume_id_;
  encrypted_volume_id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsResponse::_internal_mutable_encrypted_volume_id() {
  
  if (encrypted_volume_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    encrypted_volume_id_ = p;
  }
  return encrypted_volume_id_;
}
inline ::opi_api::common::v1::ObjectKey* EncryptedVolumeStatsResponse::mutable_encrypted_volume_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_encrypted_volume_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.EncryptedVolumeStatsResponse.encrypted_volume_id)
  return _msg;
}
inline void EncryptedVolumeStatsResponse::set_allocated_encrypted_volume_id(::opi_api::common::v1::ObjectKey* encrypted_volume_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id_);
  }
  if (encrypted_volume_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encrypted_volume_id));
    if (message_arena != submessage_arena) {
      encrypted_volume_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_volume_id, submessage_arena);
    }
    
  } else {
    
  }
  encrypted_volume_id_ = encrypted_volume_id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.EncryptedVolumeStatsResponse.encrypted_volume_id)
}

// .opi_api.storage.v1.VolumeStats stats = 2;
inline bool EncryptedVolumeStatsResponse::_internal_has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline bool EncryptedVolumeStatsResponse::has_stats() const {
  return _internal_has_stats();
}
inline const ::opi_api::storage::v1::VolumeStats& EncryptedVolumeStatsResponse::_internal_stats() const {
  const ::opi_api::storage::v1::VolumeStats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VolumeStats&>(
      ::opi_api::storage::v1::_VolumeStats_default_instance_);
}
inline const ::opi_api::storage::v1::VolumeStats& EncryptedVolumeStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.EncryptedVolumeStatsResponse.stats)
  return _internal_stats();
}
inline void EncryptedVolumeStatsResponse::unsafe_arena_set_allocated_stats(
    ::opi_api::storage::v1::VolumeStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.EncryptedVolumeStatsResponse.stats)
}
inline ::opi_api::storage::v1::VolumeStats* EncryptedVolumeStatsResponse::release_stats() {
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* EncryptedVolumeStatsResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.EncryptedVolumeStatsResponse.stats)
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* EncryptedVolumeStatsResponse::_internal_mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VolumeStats>(GetArenaForAllocation());
    stats_ = p;
  }
  return stats_;
}
inline ::opi_api::storage::v1::VolumeStats* EncryptedVolumeStatsResponse::mutable_stats() {
  ::opi_api::storage::v1::VolumeStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.EncryptedVolumeStatsResponse.stats)
  return _msg;
}
inline void EncryptedVolumeStatsResponse::set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats));
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.EncryptedVolumeStatsResponse.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_middleend_2eproto
