// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: backend_aio.proto
// Original file comments:
// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022 Dell Inc, or its subsidiaries.
//
#ifndef GRPC_backend_5faio_2eproto__INCLUDED
#define GRPC_backend_5faio_2eproto__INCLUDED

#include "backend_aio.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace opi_api {
namespace storage {
namespace v1 {

// Back End (network-facing) APIs. This service is for AIO generic kernel block device.
class AioControllerService final {
 public:
  static constexpr char const* service_full_name() {
    return "opi_api.storage.v1.AioControllerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest& request, ::opi_api::storage::v1::AioController* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>> AsyncCreateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>>(AsyncCreateAioControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>> PrepareAsyncCreateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>>(PrepareAsyncCreateAioControllerRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteAioControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteAioControllerRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest& request, ::opi_api::storage::v1::AioController* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>> AsyncUpdateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>>(AsyncUpdateAioControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>> PrepareAsyncUpdateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>>(PrepareAsyncUpdateAioControllerRaw(context, request, cq));
    }
    virtual ::grpc::Status ListAioControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioControllersRequest& request, ::opi_api::storage::v1::ListAioControllersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListAioControllersResponse>> AsyncListAioControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioControllersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListAioControllersResponse>>(AsyncListAioControllersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListAioControllersResponse>> PrepareAsyncListAioControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioControllersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListAioControllersResponse>>(PrepareAsyncListAioControllersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioControllerRequest& request, ::opi_api::storage::v1::AioController* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>> AsyncGetAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>>(AsyncGetAioControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>> PrepareAsyncGetAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>>(PrepareAsyncGetAioControllerRaw(context, request, cq));
    }
    virtual ::grpc::Status AioControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest& request, ::opi_api::storage::v1::AioControllerStatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioControllerStatsResponse>> AsyncAioControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioControllerStatsResponse>>(AsyncAioControllerStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioControllerStatsResponse>> PrepareAsyncAioControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioControllerStatsResponse>>(PrepareAsyncAioControllerStatsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest* request, ::opi_api::storage::v1::AioController* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest* request, ::opi_api::storage::v1::AioController* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest* request, ::opi_api::storage::v1::AioController* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest* request, ::opi_api::storage::v1::AioController* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListAioControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioControllersRequest* request, ::opi_api::storage::v1::ListAioControllersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAioControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioControllersRequest* request, ::opi_api::storage::v1::ListAioControllersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioControllerRequest* request, ::opi_api::storage::v1::AioController* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioControllerRequest* request, ::opi_api::storage::v1::AioController* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AioControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest* request, ::opi_api::storage::v1::AioControllerStatsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AioControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest* request, ::opi_api::storage::v1::AioControllerStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>* AsyncCreateAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>* PrepareAsyncCreateAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>* AsyncUpdateAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>* PrepareAsyncUpdateAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListAioControllersResponse>* AsyncListAioControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioControllersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::ListAioControllersResponse>* PrepareAsyncListAioControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioControllersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>* AsyncGetAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioController>* PrepareAsyncGetAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioControllerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioControllerStatsResponse>* AsyncAioControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::opi_api::storage::v1::AioControllerStatsResponse>* PrepareAsyncAioControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest& request, ::opi_api::storage::v1::AioController* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>> AsyncCreateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>>(AsyncCreateAioControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>> PrepareAsyncCreateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>>(PrepareAsyncCreateAioControllerRaw(context, request, cq));
    }
    ::grpc::Status DeleteAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteAioControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteAioControllerRaw(context, request, cq));
    }
    ::grpc::Status UpdateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest& request, ::opi_api::storage::v1::AioController* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>> AsyncUpdateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>>(AsyncUpdateAioControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>> PrepareAsyncUpdateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>>(PrepareAsyncUpdateAioControllerRaw(context, request, cq));
    }
    ::grpc::Status ListAioControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioControllersRequest& request, ::opi_api::storage::v1::ListAioControllersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListAioControllersResponse>> AsyncListAioControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioControllersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListAioControllersResponse>>(AsyncListAioControllersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListAioControllersResponse>> PrepareAsyncListAioControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioControllersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListAioControllersResponse>>(PrepareAsyncListAioControllersRaw(context, request, cq));
    }
    ::grpc::Status GetAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioControllerRequest& request, ::opi_api::storage::v1::AioController* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>> AsyncGetAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>>(AsyncGetAioControllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>> PrepareAsyncGetAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioControllerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>>(PrepareAsyncGetAioControllerRaw(context, request, cq));
    }
    ::grpc::Status AioControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest& request, ::opi_api::storage::v1::AioControllerStatsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioControllerStatsResponse>> AsyncAioControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioControllerStatsResponse>>(AsyncAioControllerStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioControllerStatsResponse>> PrepareAsyncAioControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioControllerStatsResponse>>(PrepareAsyncAioControllerStatsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest* request, ::opi_api::storage::v1::AioController* response, std::function<void(::grpc::Status)>) override;
      void CreateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest* request, ::opi_api::storage::v1::AioController* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest* request, ::opi_api::storage::v1::AioController* response, std::function<void(::grpc::Status)>) override;
      void UpdateAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest* request, ::opi_api::storage::v1::AioController* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListAioControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioControllersRequest* request, ::opi_api::storage::v1::ListAioControllersResponse* response, std::function<void(::grpc::Status)>) override;
      void ListAioControllers(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioControllersRequest* request, ::opi_api::storage::v1::ListAioControllersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioControllerRequest* request, ::opi_api::storage::v1::AioController* response, std::function<void(::grpc::Status)>) override;
      void GetAioController(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioControllerRequest* request, ::opi_api::storage::v1::AioController* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AioControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest* request, ::opi_api::storage::v1::AioControllerStatsResponse* response, std::function<void(::grpc::Status)>) override;
      void AioControllerStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest* request, ::opi_api::storage::v1::AioControllerStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>* AsyncCreateAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>* PrepareAsyncCreateAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>* AsyncUpdateAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>* PrepareAsyncUpdateAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListAioControllersResponse>* AsyncListAioControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioControllersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListAioControllersResponse>* PrepareAsyncListAioControllersRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListAioControllersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>* AsyncGetAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioController>* PrepareAsyncGetAioControllerRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetAioControllerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioControllerStatsResponse>* AsyncAioControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::AioControllerStatsResponse>* PrepareAsyncAioControllerStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAioController_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAioController_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateAioController_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAioControllers_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAioController_;
    const ::grpc::internal::RpcMethod rpcmethod_AioControllerStats_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateAioController(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest* request, ::opi_api::storage::v1::AioController* response);
    virtual ::grpc::Status DeleteAioController(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status UpdateAioController(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest* request, ::opi_api::storage::v1::AioController* response);
    virtual ::grpc::Status ListAioControllers(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListAioControllersRequest* request, ::opi_api::storage::v1::ListAioControllersResponse* response);
    virtual ::grpc::Status GetAioController(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetAioControllerRequest* request, ::opi_api::storage::v1::AioController* response);
    virtual ::grpc::Status AioControllerStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest* request, ::opi_api::storage::v1::AioControllerStatsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAioController() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAioController(::grpc::ServerContext* context, ::opi_api::storage::v1::CreateAioControllerRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::AioController>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAioController() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteAioControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAioController(::grpc::ServerContext* context, ::opi_api::storage::v1::DeleteAioControllerRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateAioController() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAioController(::grpc::ServerContext* context, ::opi_api::storage::v1::UpdateAioControllerRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::AioController>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAioControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAioControllers() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListAioControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAioControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListAioControllersRequest* /*request*/, ::opi_api::storage::v1::ListAioControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAioControllers(::grpc::ServerContext* context, ::opi_api::storage::v1::ListAioControllersRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::ListAioControllersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAioController() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAioController(::grpc::ServerContext* context, ::opi_api::storage::v1::GetAioControllerRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::AioController>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AioControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AioControllerStats() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AioControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioControllerStatsRequest* /*request*/, ::opi_api::storage::v1::AioControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAioControllerStats(::grpc::ServerContext* context, ::opi_api::storage::v1::AioControllerStatsRequest* request, ::grpc::ServerAsyncResponseWriter< ::opi_api::storage::v1::AioControllerStatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateAioController<WithAsyncMethod_DeleteAioController<WithAsyncMethod_UpdateAioController<WithAsyncMethod_ListAioControllers<WithAsyncMethod_GetAioController<WithAsyncMethod_AioControllerStats<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateAioController() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::CreateAioControllerRequest, ::opi_api::storage::v1::AioController>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::CreateAioControllerRequest* request, ::opi_api::storage::v1::AioController* response) { return this->CreateAioController(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAioController(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::CreateAioControllerRequest, ::opi_api::storage::v1::AioController>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::CreateAioControllerRequest, ::opi_api::storage::v1::AioController>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAioController(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::CreateAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteAioController() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::DeleteAioControllerRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::DeleteAioControllerRequest* request, ::google::protobuf::Empty* response) { return this->DeleteAioController(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAioController(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::DeleteAioControllerRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::DeleteAioControllerRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteAioControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAioController(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::DeleteAioControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateAioController() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::UpdateAioControllerRequest, ::opi_api::storage::v1::AioController>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::UpdateAioControllerRequest* request, ::opi_api::storage::v1::AioController* response) { return this->UpdateAioController(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateAioController(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::UpdateAioControllerRequest, ::opi_api::storage::v1::AioController>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::UpdateAioControllerRequest, ::opi_api::storage::v1::AioController>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAioController(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::UpdateAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListAioControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListAioControllers() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListAioControllersRequest, ::opi_api::storage::v1::ListAioControllersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::ListAioControllersRequest* request, ::opi_api::storage::v1::ListAioControllersResponse* response) { return this->ListAioControllers(context, request, response); }));}
    void SetMessageAllocatorFor_ListAioControllers(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::ListAioControllersRequest, ::opi_api::storage::v1::ListAioControllersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::ListAioControllersRequest, ::opi_api::storage::v1::ListAioControllersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListAioControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAioControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListAioControllersRequest* /*request*/, ::opi_api::storage::v1::ListAioControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAioControllers(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::ListAioControllersRequest* /*request*/, ::opi_api::storage::v1::ListAioControllersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAioController() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::GetAioControllerRequest, ::opi_api::storage::v1::AioController>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::GetAioControllerRequest* request, ::opi_api::storage::v1::AioController* response) { return this->GetAioController(context, request, response); }));}
    void SetMessageAllocatorFor_GetAioController(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::GetAioControllerRequest, ::opi_api::storage::v1::AioController>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::GetAioControllerRequest, ::opi_api::storage::v1::AioController>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAioController(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::GetAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AioControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AioControllerStats() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::AioControllerStatsRequest, ::opi_api::storage::v1::AioControllerStatsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::opi_api::storage::v1::AioControllerStatsRequest* request, ::opi_api::storage::v1::AioControllerStatsResponse* response) { return this->AioControllerStats(context, request, response); }));}
    void SetMessageAllocatorFor_AioControllerStats(
        ::grpc::MessageAllocator< ::opi_api::storage::v1::AioControllerStatsRequest, ::opi_api::storage::v1::AioControllerStatsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::opi_api::storage::v1::AioControllerStatsRequest, ::opi_api::storage::v1::AioControllerStatsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AioControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioControllerStatsRequest* /*request*/, ::opi_api::storage::v1::AioControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AioControllerStats(
      ::grpc::CallbackServerContext* /*context*/, const ::opi_api::storage::v1::AioControllerStatsRequest* /*request*/, ::opi_api::storage::v1::AioControllerStatsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateAioController<WithCallbackMethod_DeleteAioController<WithCallbackMethod_UpdateAioController<WithCallbackMethod_ListAioControllers<WithCallbackMethod_GetAioController<WithCallbackMethod_AioControllerStats<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAioController() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAioController() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteAioControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateAioController() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAioControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAioControllers() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListAioControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAioControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListAioControllersRequest* /*request*/, ::opi_api::storage::v1::ListAioControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAioController() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AioControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AioControllerStats() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AioControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioControllerStatsRequest* /*request*/, ::opi_api::storage::v1::AioControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAioController() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAioController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAioController() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteAioControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAioController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateAioController() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAioController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAioControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAioControllers() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListAioControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAioControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListAioControllersRequest* /*request*/, ::opi_api::storage::v1::ListAioControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAioControllers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAioController() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAioController(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AioControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AioControllerStats() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AioControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioControllerStatsRequest* /*request*/, ::opi_api::storage::v1::AioControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAioControllerStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateAioController() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAioController(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAioController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteAioController() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAioController(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteAioControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAioController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateAioController() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateAioController(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAioController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListAioControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListAioControllers() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAioControllers(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListAioControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAioControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListAioControllersRequest* /*request*/, ::opi_api::storage::v1::ListAioControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAioControllers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAioController() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAioController(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAioController(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AioControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AioControllerStats() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AioControllerStats(context, request, response); }));
    }
    ~WithRawCallbackMethod_AioControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AioControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioControllerStatsRequest* /*request*/, ::opi_api::storage::v1::AioControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AioControllerStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAioController() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::CreateAioControllerRequest, ::opi_api::storage::v1::AioController>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::CreateAioControllerRequest, ::opi_api::storage::v1::AioController>* streamer) {
                       return this->StreamedCreateAioController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::CreateAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAioController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::CreateAioControllerRequest,::opi_api::storage::v1::AioController>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAioController() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::DeleteAioControllerRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::DeleteAioControllerRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteAioController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::DeleteAioControllerRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAioController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::DeleteAioControllerRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateAioController() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::UpdateAioControllerRequest, ::opi_api::storage::v1::AioController>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::UpdateAioControllerRequest, ::opi_api::storage::v1::AioController>* streamer) {
                       return this->StreamedUpdateAioController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::UpdateAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateAioController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::UpdateAioControllerRequest,::opi_api::storage::v1::AioController>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAioControllers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAioControllers() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::ListAioControllersRequest, ::opi_api::storage::v1::ListAioControllersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::ListAioControllersRequest, ::opi_api::storage::v1::ListAioControllersResponse>* streamer) {
                       return this->StreamedListAioControllers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAioControllers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAioControllers(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::ListAioControllersRequest* /*request*/, ::opi_api::storage::v1::ListAioControllersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAioControllers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::ListAioControllersRequest,::opi_api::storage::v1::ListAioControllersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAioController : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAioController() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::GetAioControllerRequest, ::opi_api::storage::v1::AioController>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::GetAioControllerRequest, ::opi_api::storage::v1::AioController>* streamer) {
                       return this->StreamedGetAioController(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAioController() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAioController(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::GetAioControllerRequest* /*request*/, ::opi_api::storage::v1::AioController* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAioController(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::GetAioControllerRequest,::opi_api::storage::v1::AioController>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AioControllerStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AioControllerStats() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::opi_api::storage::v1::AioControllerStatsRequest, ::opi_api::storage::v1::AioControllerStatsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::opi_api::storage::v1::AioControllerStatsRequest, ::opi_api::storage::v1::AioControllerStatsResponse>* streamer) {
                       return this->StreamedAioControllerStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AioControllerStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AioControllerStats(::grpc::ServerContext* /*context*/, const ::opi_api::storage::v1::AioControllerStatsRequest* /*request*/, ::opi_api::storage::v1::AioControllerStatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAioControllerStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::opi_api::storage::v1::AioControllerStatsRequest,::opi_api::storage::v1::AioControllerStatsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateAioController<WithStreamedUnaryMethod_DeleteAioController<WithStreamedUnaryMethod_UpdateAioController<WithStreamedUnaryMethod_ListAioControllers<WithStreamedUnaryMethod_GetAioController<WithStreamedUnaryMethod_AioControllerStats<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateAioController<WithStreamedUnaryMethod_DeleteAioController<WithStreamedUnaryMethod_UpdateAioController<WithStreamedUnaryMethod_ListAioControllers<WithStreamedUnaryMethod_GetAioController<WithStreamedUnaryMethod_AioControllerStats<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace storage
}  // namespace opi_api


#endif  // GRPC_backend_5faio_2eproto__INCLUDED
