// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend_aio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_backend_5faio_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_backend_5faio_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/client.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/annotations.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include "object_key.pb.h"
#include "opicommon.pb.h"
#include "uuid.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_backend_5faio_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_backend_5faio_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backend_5faio_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class AioController;
struct AioControllerDefaultTypeInternal;
extern AioControllerDefaultTypeInternal _AioController_default_instance_;
class AioControllerStatsRequest;
struct AioControllerStatsRequestDefaultTypeInternal;
extern AioControllerStatsRequestDefaultTypeInternal _AioControllerStatsRequest_default_instance_;
class AioControllerStatsResponse;
struct AioControllerStatsResponseDefaultTypeInternal;
extern AioControllerStatsResponseDefaultTypeInternal _AioControllerStatsResponse_default_instance_;
class CreateAioControllerRequest;
struct CreateAioControllerRequestDefaultTypeInternal;
extern CreateAioControllerRequestDefaultTypeInternal _CreateAioControllerRequest_default_instance_;
class DeleteAioControllerRequest;
struct DeleteAioControllerRequestDefaultTypeInternal;
extern DeleteAioControllerRequestDefaultTypeInternal _DeleteAioControllerRequest_default_instance_;
class GetAioControllerRequest;
struct GetAioControllerRequestDefaultTypeInternal;
extern GetAioControllerRequestDefaultTypeInternal _GetAioControllerRequest_default_instance_;
class ListAioControllersRequest;
struct ListAioControllersRequestDefaultTypeInternal;
extern ListAioControllersRequestDefaultTypeInternal _ListAioControllersRequest_default_instance_;
class ListAioControllersResponse;
struct ListAioControllersResponseDefaultTypeInternal;
extern ListAioControllersResponseDefaultTypeInternal _ListAioControllersResponse_default_instance_;
class UpdateAioControllerRequest;
struct UpdateAioControllerRequestDefaultTypeInternal;
extern UpdateAioControllerRequestDefaultTypeInternal _UpdateAioControllerRequest_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::AioController* Arena::CreateMaybeMessage<::opi_api::storage::v1::AioController>(Arena*);
template<> ::opi_api::storage::v1::AioControllerStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::AioControllerStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::AioControllerStatsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::AioControllerStatsResponse>(Arena*);
template<> ::opi_api::storage::v1::CreateAioControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateAioControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteAioControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteAioControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::GetAioControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetAioControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::ListAioControllersRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListAioControllersRequest>(Arena*);
template<> ::opi_api::storage::v1::ListAioControllersResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListAioControllersResponse>(Arena*);
template<> ::opi_api::storage::v1::UpdateAioControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateAioControllerRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class AioController final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.AioController) */ {
 public:
  inline AioController() : AioController(nullptr) {}
  ~AioController() override;
  explicit constexpr AioController(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AioController(const AioController& from);
  AioController(AioController&& from) noexcept
    : AioController() {
    *this = ::std::move(from);
  }

  inline AioController& operator=(const AioController& from) {
    CopyFrom(from);
    return *this;
  }
  inline AioController& operator=(AioController&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AioController& default_instance() {
    return *internal_default_instance();
  }
  static inline const AioController* internal_default_instance() {
    return reinterpret_cast<const AioController*>(
               &_AioController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AioController& a, AioController& b) {
    a.Swap(&b);
  }
  inline void Swap(AioController* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AioController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AioController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AioController>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AioController& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AioController& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AioController* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.AioController";
  }
  protected:
  explicit AioController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 5,
    kHandleFieldNumber = 1,
    kUuidFieldNumber = 4,
    kBlockSizeFieldNumber = 2,
    kBlocksCountFieldNumber = 3,
  };
  // string filename = 5;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .opi_api.common.v1.ObjectKey handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::opi_api::common::v1::ObjectKey& handle() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_handle();
  ::opi_api::common::v1::ObjectKey* mutable_handle();
  void set_allocated_handle(::opi_api::common::v1::ObjectKey* handle);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_handle() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::opi_api::common::v1::ObjectKey* handle);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_handle();

  // .opi_api.common.v1.Uuid uuid = 4;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::opi_api::common::v1::Uuid& uuid() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::Uuid* release_uuid();
  ::opi_api::common::v1::Uuid* mutable_uuid();
  void set_allocated_uuid(::opi_api::common::v1::Uuid* uuid);
  private:
  const ::opi_api::common::v1::Uuid& _internal_uuid() const;
  ::opi_api::common::v1::Uuid* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::opi_api::common::v1::Uuid* uuid);
  ::opi_api::common::v1::Uuid* unsafe_arena_release_uuid();

  // int64 block_size = 2;
  void clear_block_size();
  int64_t block_size() const;
  void set_block_size(int64_t value);
  private:
  int64_t _internal_block_size() const;
  void _internal_set_block_size(int64_t value);
  public:

  // int64 blocks_count = 3;
  void clear_blocks_count();
  int64_t blocks_count() const;
  void set_blocks_count(int64_t value);
  private:
  int64_t _internal_blocks_count() const;
  void _internal_set_blocks_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.AioController)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::opi_api::common::v1::ObjectKey* handle_;
  ::opi_api::common::v1::Uuid* uuid_;
  int64_t block_size_;
  int64_t blocks_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class CreateAioControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateAioControllerRequest) */ {
 public:
  inline CreateAioControllerRequest() : CreateAioControllerRequest(nullptr) {}
  ~CreateAioControllerRequest() override;
  explicit constexpr CreateAioControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAioControllerRequest(const CreateAioControllerRequest& from);
  CreateAioControllerRequest(CreateAioControllerRequest&& from) noexcept
    : CreateAioControllerRequest() {
    *this = ::std::move(from);
  }

  inline CreateAioControllerRequest& operator=(const CreateAioControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAioControllerRequest& operator=(CreateAioControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAioControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAioControllerRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAioControllerRequest*>(
               &_CreateAioControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateAioControllerRequest& a, CreateAioControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAioControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAioControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAioControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateAioControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAioControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAioControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAioControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateAioControllerRequest";
  }
  protected:
  explicit CreateAioControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kAioControllerIdFieldNumber = 3,
    kAioControllerFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string aio_controller_id = 3;
  void clear_aio_controller_id();
  const std::string& aio_controller_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aio_controller_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aio_controller_id();
  PROTOBUF_NODISCARD std::string* release_aio_controller_id();
  void set_allocated_aio_controller_id(std::string* aio_controller_id);
  private:
  const std::string& _internal_aio_controller_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aio_controller_id(const std::string& value);
  std::string* _internal_mutable_aio_controller_id();
  public:

  // .opi_api.storage.v1.AioController aio_controller = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_aio_controller() const;
  private:
  bool _internal_has_aio_controller() const;
  public:
  void clear_aio_controller();
  const ::opi_api::storage::v1::AioController& aio_controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::AioController* release_aio_controller();
  ::opi_api::storage::v1::AioController* mutable_aio_controller();
  void set_allocated_aio_controller(::opi_api::storage::v1::AioController* aio_controller);
  private:
  const ::opi_api::storage::v1::AioController& _internal_aio_controller() const;
  ::opi_api::storage::v1::AioController* _internal_mutable_aio_controller();
  public:
  void unsafe_arena_set_allocated_aio_controller(
      ::opi_api::storage::v1::AioController* aio_controller);
  ::opi_api::storage::v1::AioController* unsafe_arena_release_aio_controller();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateAioControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aio_controller_id_;
  ::opi_api::storage::v1::AioController* aio_controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class DeleteAioControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteAioControllerRequest) */ {
 public:
  inline DeleteAioControllerRequest() : DeleteAioControllerRequest(nullptr) {}
  ~DeleteAioControllerRequest() override;
  explicit constexpr DeleteAioControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteAioControllerRequest(const DeleteAioControllerRequest& from);
  DeleteAioControllerRequest(DeleteAioControllerRequest&& from) noexcept
    : DeleteAioControllerRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAioControllerRequest& operator=(const DeleteAioControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAioControllerRequest& operator=(DeleteAioControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteAioControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteAioControllerRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAioControllerRequest*>(
               &_DeleteAioControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteAioControllerRequest& a, DeleteAioControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAioControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAioControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteAioControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteAioControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteAioControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteAioControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAioControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteAioControllerRequest";
  }
  protected:
  explicit DeleteAioControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAllowMissingFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool allow_missing = 2;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteAioControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool allow_missing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class UpdateAioControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateAioControllerRequest) */ {
 public:
  inline UpdateAioControllerRequest() : UpdateAioControllerRequest(nullptr) {}
  ~UpdateAioControllerRequest() override;
  explicit constexpr UpdateAioControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateAioControllerRequest(const UpdateAioControllerRequest& from);
  UpdateAioControllerRequest(UpdateAioControllerRequest&& from) noexcept
    : UpdateAioControllerRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAioControllerRequest& operator=(const UpdateAioControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAioControllerRequest& operator=(UpdateAioControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAioControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAioControllerRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAioControllerRequest*>(
               &_UpdateAioControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateAioControllerRequest& a, UpdateAioControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAioControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAioControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateAioControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateAioControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateAioControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateAioControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAioControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateAioControllerRequest";
  }
  protected:
  explicit UpdateAioControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAioControllerFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.storage.v1.AioController aio_controller = 1;
  bool has_aio_controller() const;
  private:
  bool _internal_has_aio_controller() const;
  public:
  void clear_aio_controller();
  const ::opi_api::storage::v1::AioController& aio_controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::AioController* release_aio_controller();
  ::opi_api::storage::v1::AioController* mutable_aio_controller();
  void set_allocated_aio_controller(::opi_api::storage::v1::AioController* aio_controller);
  private:
  const ::opi_api::storage::v1::AioController& _internal_aio_controller() const;
  ::opi_api::storage::v1::AioController* _internal_mutable_aio_controller();
  public:
  void unsafe_arena_set_allocated_aio_controller(
      ::opi_api::storage::v1::AioController* aio_controller);
  ::opi_api::storage::v1::AioController* unsafe_arena_release_aio_controller();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateAioControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::AioController* aio_controller_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class ListAioControllersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListAioControllersRequest) */ {
 public:
  inline ListAioControllersRequest() : ListAioControllersRequest(nullptr) {}
  ~ListAioControllersRequest() override;
  explicit constexpr ListAioControllersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAioControllersRequest(const ListAioControllersRequest& from);
  ListAioControllersRequest(ListAioControllersRequest&& from) noexcept
    : ListAioControllersRequest() {
    *this = ::std::move(from);
  }

  inline ListAioControllersRequest& operator=(const ListAioControllersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAioControllersRequest& operator=(ListAioControllersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAioControllersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAioControllersRequest* internal_default_instance() {
    return reinterpret_cast<const ListAioControllersRequest*>(
               &_ListAioControllersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListAioControllersRequest& a, ListAioControllersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAioControllersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAioControllersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAioControllersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAioControllersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAioControllersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListAioControllersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAioControllersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListAioControllersRequest";
  }
  protected:
  explicit ListAioControllersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListAioControllersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class ListAioControllersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListAioControllersResponse) */ {
 public:
  inline ListAioControllersResponse() : ListAioControllersResponse(nullptr) {}
  ~ListAioControllersResponse() override;
  explicit constexpr ListAioControllersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAioControllersResponse(const ListAioControllersResponse& from);
  ListAioControllersResponse(ListAioControllersResponse&& from) noexcept
    : ListAioControllersResponse() {
    *this = ::std::move(from);
  }

  inline ListAioControllersResponse& operator=(const ListAioControllersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAioControllersResponse& operator=(ListAioControllersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAioControllersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAioControllersResponse* internal_default_instance() {
    return reinterpret_cast<const ListAioControllersResponse*>(
               &_ListAioControllersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListAioControllersResponse& a, ListAioControllersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAioControllersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAioControllersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAioControllersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAioControllersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAioControllersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListAioControllersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAioControllersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListAioControllersResponse";
  }
  protected:
  explicit ListAioControllersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAioControllersFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.storage.v1.AioController aio_controllers = 1;
  int aio_controllers_size() const;
  private:
  int _internal_aio_controllers_size() const;
  public:
  void clear_aio_controllers();
  ::opi_api::storage::v1::AioController* mutable_aio_controllers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::AioController >*
      mutable_aio_controllers();
  private:
  const ::opi_api::storage::v1::AioController& _internal_aio_controllers(int index) const;
  ::opi_api::storage::v1::AioController* _internal_add_aio_controllers();
  public:
  const ::opi_api::storage::v1::AioController& aio_controllers(int index) const;
  ::opi_api::storage::v1::AioController* add_aio_controllers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::AioController >&
      aio_controllers() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListAioControllersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::AioController > aio_controllers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class GetAioControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetAioControllerRequest) */ {
 public:
  inline GetAioControllerRequest() : GetAioControllerRequest(nullptr) {}
  ~GetAioControllerRequest() override;
  explicit constexpr GetAioControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAioControllerRequest(const GetAioControllerRequest& from);
  GetAioControllerRequest(GetAioControllerRequest&& from) noexcept
    : GetAioControllerRequest() {
    *this = ::std::move(from);
  }

  inline GetAioControllerRequest& operator=(const GetAioControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAioControllerRequest& operator=(GetAioControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAioControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAioControllerRequest* internal_default_instance() {
    return reinterpret_cast<const GetAioControllerRequest*>(
               &_GetAioControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetAioControllerRequest& a, GetAioControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAioControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAioControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAioControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAioControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAioControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAioControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAioControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetAioControllerRequest";
  }
  protected:
  explicit GetAioControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetAioControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class AioControllerStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.AioControllerStatsRequest) */ {
 public:
  inline AioControllerStatsRequest() : AioControllerStatsRequest(nullptr) {}
  ~AioControllerStatsRequest() override;
  explicit constexpr AioControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AioControllerStatsRequest(const AioControllerStatsRequest& from);
  AioControllerStatsRequest(AioControllerStatsRequest&& from) noexcept
    : AioControllerStatsRequest() {
    *this = ::std::move(from);
  }

  inline AioControllerStatsRequest& operator=(const AioControllerStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AioControllerStatsRequest& operator=(AioControllerStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AioControllerStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AioControllerStatsRequest* internal_default_instance() {
    return reinterpret_cast<const AioControllerStatsRequest*>(
               &_AioControllerStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AioControllerStatsRequest& a, AioControllerStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AioControllerStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AioControllerStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AioControllerStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AioControllerStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AioControllerStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AioControllerStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AioControllerStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.AioControllerStatsRequest";
  }
  protected:
  explicit AioControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::opi_api::common::v1::ObjectKey& handle() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_handle();
  ::opi_api::common::v1::ObjectKey* mutable_handle();
  void set_allocated_handle(::opi_api::common::v1::ObjectKey* handle);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_handle() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::opi_api::common::v1::ObjectKey* handle);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_handle();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.AioControllerStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// -------------------------------------------------------------------

class AioControllerStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.AioControllerStatsResponse) */ {
 public:
  inline AioControllerStatsResponse() : AioControllerStatsResponse(nullptr) {}
  ~AioControllerStatsResponse() override;
  explicit constexpr AioControllerStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AioControllerStatsResponse(const AioControllerStatsResponse& from);
  AioControllerStatsResponse(AioControllerStatsResponse&& from) noexcept
    : AioControllerStatsResponse() {
    *this = ::std::move(from);
  }

  inline AioControllerStatsResponse& operator=(const AioControllerStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AioControllerStatsResponse& operator=(AioControllerStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AioControllerStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AioControllerStatsResponse* internal_default_instance() {
    return reinterpret_cast<const AioControllerStatsResponse*>(
               &_AioControllerStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AioControllerStatsResponse& a, AioControllerStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AioControllerStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AioControllerStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AioControllerStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AioControllerStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AioControllerStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AioControllerStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AioControllerStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.AioControllerStatsResponse";
  }
  protected:
  explicit AioControllerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kStatsFieldNumber = 2,
  };
  // .opi_api.common.v1.ObjectKey handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::opi_api::common::v1::ObjectKey& handle() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_handle();
  ::opi_api::common::v1::ObjectKey* mutable_handle();
  void set_allocated_handle(::opi_api::common::v1::ObjectKey* handle);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_handle() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::opi_api::common::v1::ObjectKey* handle);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_handle();

  // .opi_api.storage.v1.VolumeStats stats = 2;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::opi_api::storage::v1::VolumeStats& stats() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VolumeStats* release_stats();
  ::opi_api::storage::v1::VolumeStats* mutable_stats();
  void set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats);
  private:
  const ::opi_api::storage::v1::VolumeStats& _internal_stats() const;
  ::opi_api::storage::v1::VolumeStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::opi_api::storage::v1::VolumeStats* stats);
  ::opi_api::storage::v1::VolumeStats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.AioControllerStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* handle_;
  ::opi_api::storage::v1::VolumeStats* stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5faio_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AioController

// .opi_api.common.v1.ObjectKey handle = 1;
inline bool AioController::_internal_has_handle() const {
  return this != internal_default_instance() && handle_ != nullptr;
}
inline bool AioController::has_handle() const {
  return _internal_has_handle();
}
inline const ::opi_api::common::v1::ObjectKey& AioController::_internal_handle() const {
  const ::opi_api::common::v1::ObjectKey* p = handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& AioController::handle() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioController.handle)
  return _internal_handle();
}
inline void AioController::unsafe_arena_set_allocated_handle(
    ::opi_api::common::v1::ObjectKey* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  handle_ = handle;
  if (handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.AioController.handle)
}
inline ::opi_api::common::v1::ObjectKey* AioController::release_handle() {
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioController::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioController.handle)
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioController::_internal_mutable_handle() {
  
  if (handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    handle_ = p;
  }
  return handle_;
}
inline ::opi_api::common::v1::ObjectKey* AioController::mutable_handle() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioController.handle)
  return _msg;
}
inline void AioController::set_allocated_handle(::opi_api::common::v1::ObjectKey* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    
  } else {
    
  }
  handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioController.handle)
}

// int64 block_size = 2;
inline void AioController::clear_block_size() {
  block_size_ = int64_t{0};
}
inline int64_t AioController::_internal_block_size() const {
  return block_size_;
}
inline int64_t AioController::block_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioController.block_size)
  return _internal_block_size();
}
inline void AioController::_internal_set_block_size(int64_t value) {
  
  block_size_ = value;
}
inline void AioController::set_block_size(int64_t value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.AioController.block_size)
}

// int64 blocks_count = 3;
inline void AioController::clear_blocks_count() {
  blocks_count_ = int64_t{0};
}
inline int64_t AioController::_internal_blocks_count() const {
  return blocks_count_;
}
inline int64_t AioController::blocks_count() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioController.blocks_count)
  return _internal_blocks_count();
}
inline void AioController::_internal_set_blocks_count(int64_t value) {
  
  blocks_count_ = value;
}
inline void AioController::set_blocks_count(int64_t value) {
  _internal_set_blocks_count(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.AioController.blocks_count)
}

// .opi_api.common.v1.Uuid uuid = 4;
inline bool AioController::_internal_has_uuid() const {
  return this != internal_default_instance() && uuid_ != nullptr;
}
inline bool AioController::has_uuid() const {
  return _internal_has_uuid();
}
inline const ::opi_api::common::v1::Uuid& AioController::_internal_uuid() const {
  const ::opi_api::common::v1::Uuid* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::Uuid&>(
      ::opi_api::common::v1::_Uuid_default_instance_);
}
inline const ::opi_api::common::v1::Uuid& AioController::uuid() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioController.uuid)
  return _internal_uuid();
}
inline void AioController::unsafe_arena_set_allocated_uuid(
    ::opi_api::common::v1::Uuid* uuid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.AioController.uuid)
}
inline ::opi_api::common::v1::Uuid* AioController::release_uuid() {
  
  ::opi_api::common::v1::Uuid* temp = uuid_;
  uuid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::Uuid* AioController::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioController.uuid)
  
  ::opi_api::common::v1::Uuid* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::Uuid* AioController::_internal_mutable_uuid() {
  
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::Uuid>(GetArenaForAllocation());
    uuid_ = p;
  }
  return uuid_;
}
inline ::opi_api::common::v1::Uuid* AioController::mutable_uuid() {
  ::opi_api::common::v1::Uuid* _msg = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioController.uuid)
  return _msg;
}
inline void AioController::set_allocated_uuid(::opi_api::common::v1::Uuid* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid));
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    
  } else {
    
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioController.uuid)
}

// string filename = 5;
inline void AioController::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& AioController::filename() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioController.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AioController::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.AioController.filename)
}
inline std::string* AioController::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioController.filename)
  return _s;
}
inline const std::string& AioController::_internal_filename() const {
  return filename_.Get();
}
inline void AioController::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AioController::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AioController::release_filename() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioController.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AioController::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioController.filename)
}

// -------------------------------------------------------------------

// CreateAioControllerRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateAioControllerRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateAioControllerRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateAioControllerRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAioControllerRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateAioControllerRequest.parent)
}
inline std::string* CreateAioControllerRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateAioControllerRequest.parent)
  return _s;
}
inline const std::string& CreateAioControllerRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateAioControllerRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAioControllerRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAioControllerRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateAioControllerRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAioControllerRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateAioControllerRequest.parent)
}

// .opi_api.storage.v1.AioController aio_controller = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateAioControllerRequest::_internal_has_aio_controller() const {
  return this != internal_default_instance() && aio_controller_ != nullptr;
}
inline bool CreateAioControllerRequest::has_aio_controller() const {
  return _internal_has_aio_controller();
}
inline void CreateAioControllerRequest::clear_aio_controller() {
  if (GetArenaForAllocation() == nullptr && aio_controller_ != nullptr) {
    delete aio_controller_;
  }
  aio_controller_ = nullptr;
}
inline const ::opi_api::storage::v1::AioController& CreateAioControllerRequest::_internal_aio_controller() const {
  const ::opi_api::storage::v1::AioController* p = aio_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::AioController&>(
      ::opi_api::storage::v1::_AioController_default_instance_);
}
inline const ::opi_api::storage::v1::AioController& CreateAioControllerRequest::aio_controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateAioControllerRequest.aio_controller)
  return _internal_aio_controller();
}
inline void CreateAioControllerRequest::unsafe_arena_set_allocated_aio_controller(
    ::opi_api::storage::v1::AioController* aio_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aio_controller_);
  }
  aio_controller_ = aio_controller;
  if (aio_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateAioControllerRequest.aio_controller)
}
inline ::opi_api::storage::v1::AioController* CreateAioControllerRequest::release_aio_controller() {
  
  ::opi_api::storage::v1::AioController* temp = aio_controller_;
  aio_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::AioController* CreateAioControllerRequest::unsafe_arena_release_aio_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateAioControllerRequest.aio_controller)
  
  ::opi_api::storage::v1::AioController* temp = aio_controller_;
  aio_controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::AioController* CreateAioControllerRequest::_internal_mutable_aio_controller() {
  
  if (aio_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::AioController>(GetArenaForAllocation());
    aio_controller_ = p;
  }
  return aio_controller_;
}
inline ::opi_api::storage::v1::AioController* CreateAioControllerRequest::mutable_aio_controller() {
  ::opi_api::storage::v1::AioController* _msg = _internal_mutable_aio_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateAioControllerRequest.aio_controller)
  return _msg;
}
inline void CreateAioControllerRequest::set_allocated_aio_controller(::opi_api::storage::v1::AioController* aio_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete aio_controller_;
  }
  if (aio_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::AioController>::GetOwningArena(aio_controller);
    if (message_arena != submessage_arena) {
      aio_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aio_controller, submessage_arena);
    }
    
  } else {
    
  }
  aio_controller_ = aio_controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateAioControllerRequest.aio_controller)
}

// string aio_controller_id = 3;
inline void CreateAioControllerRequest::clear_aio_controller_id() {
  aio_controller_id_.ClearToEmpty();
}
inline const std::string& CreateAioControllerRequest::aio_controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateAioControllerRequest.aio_controller_id)
  return _internal_aio_controller_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAioControllerRequest::set_aio_controller_id(ArgT0&& arg0, ArgT... args) {
 
 aio_controller_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateAioControllerRequest.aio_controller_id)
}
inline std::string* CreateAioControllerRequest::mutable_aio_controller_id() {
  std::string* _s = _internal_mutable_aio_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateAioControllerRequest.aio_controller_id)
  return _s;
}
inline const std::string& CreateAioControllerRequest::_internal_aio_controller_id() const {
  return aio_controller_id_.Get();
}
inline void CreateAioControllerRequest::_internal_set_aio_controller_id(const std::string& value) {
  
  aio_controller_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAioControllerRequest::_internal_mutable_aio_controller_id() {
  
  return aio_controller_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAioControllerRequest::release_aio_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateAioControllerRequest.aio_controller_id)
  return aio_controller_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAioControllerRequest::set_allocated_aio_controller_id(std::string* aio_controller_id) {
  if (aio_controller_id != nullptr) {
    
  } else {
    
  }
  aio_controller_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aio_controller_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (aio_controller_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    aio_controller_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateAioControllerRequest.aio_controller_id)
}

// -------------------------------------------------------------------

// DeleteAioControllerRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteAioControllerRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteAioControllerRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteAioControllerRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteAioControllerRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteAioControllerRequest.name)
}
inline std::string* DeleteAioControllerRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteAioControllerRequest.name)
  return _s;
}
inline const std::string& DeleteAioControllerRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteAioControllerRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteAioControllerRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteAioControllerRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteAioControllerRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteAioControllerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteAioControllerRequest.name)
}

// bool allow_missing = 2;
inline void DeleteAioControllerRequest::clear_allow_missing() {
  allow_missing_ = false;
}
inline bool DeleteAioControllerRequest::_internal_allow_missing() const {
  return allow_missing_;
}
inline bool DeleteAioControllerRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteAioControllerRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteAioControllerRequest::_internal_set_allow_missing(bool value) {
  
  allow_missing_ = value;
}
inline void DeleteAioControllerRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteAioControllerRequest.allow_missing)
}

// -------------------------------------------------------------------

// UpdateAioControllerRequest

// .opi_api.storage.v1.AioController aio_controller = 1;
inline bool UpdateAioControllerRequest::_internal_has_aio_controller() const {
  return this != internal_default_instance() && aio_controller_ != nullptr;
}
inline bool UpdateAioControllerRequest::has_aio_controller() const {
  return _internal_has_aio_controller();
}
inline void UpdateAioControllerRequest::clear_aio_controller() {
  if (GetArenaForAllocation() == nullptr && aio_controller_ != nullptr) {
    delete aio_controller_;
  }
  aio_controller_ = nullptr;
}
inline const ::opi_api::storage::v1::AioController& UpdateAioControllerRequest::_internal_aio_controller() const {
  const ::opi_api::storage::v1::AioController* p = aio_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::AioController&>(
      ::opi_api::storage::v1::_AioController_default_instance_);
}
inline const ::opi_api::storage::v1::AioController& UpdateAioControllerRequest::aio_controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateAioControllerRequest.aio_controller)
  return _internal_aio_controller();
}
inline void UpdateAioControllerRequest::unsafe_arena_set_allocated_aio_controller(
    ::opi_api::storage::v1::AioController* aio_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aio_controller_);
  }
  aio_controller_ = aio_controller;
  if (aio_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateAioControllerRequest.aio_controller)
}
inline ::opi_api::storage::v1::AioController* UpdateAioControllerRequest::release_aio_controller() {
  
  ::opi_api::storage::v1::AioController* temp = aio_controller_;
  aio_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::AioController* UpdateAioControllerRequest::unsafe_arena_release_aio_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateAioControllerRequest.aio_controller)
  
  ::opi_api::storage::v1::AioController* temp = aio_controller_;
  aio_controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::AioController* UpdateAioControllerRequest::_internal_mutable_aio_controller() {
  
  if (aio_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::AioController>(GetArenaForAllocation());
    aio_controller_ = p;
  }
  return aio_controller_;
}
inline ::opi_api::storage::v1::AioController* UpdateAioControllerRequest::mutable_aio_controller() {
  ::opi_api::storage::v1::AioController* _msg = _internal_mutable_aio_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateAioControllerRequest.aio_controller)
  return _msg;
}
inline void UpdateAioControllerRequest::set_allocated_aio_controller(::opi_api::storage::v1::AioController* aio_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete aio_controller_;
  }
  if (aio_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::AioController>::GetOwningArena(aio_controller);
    if (message_arena != submessage_arena) {
      aio_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aio_controller, submessage_arena);
    }
    
  } else {
    
  }
  aio_controller_ = aio_controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateAioControllerRequest.aio_controller)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateAioControllerRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateAioControllerRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateAioControllerRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateAioControllerRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateAioControllerRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateAioControllerRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateAioControllerRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAioControllerRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAioControllerRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateAioControllerRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAioControllerRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateAioControllerRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateAioControllerRequest.update_mask)
  return _msg;
}
inline void UpdateAioControllerRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateAioControllerRequest.update_mask)
}

// -------------------------------------------------------------------

// ListAioControllersRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListAioControllersRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListAioControllersRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListAioControllersRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAioControllersRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListAioControllersRequest.parent)
}
inline std::string* ListAioControllersRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListAioControllersRequest.parent)
  return _s;
}
inline const std::string& ListAioControllersRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListAioControllersRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListAioControllersRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListAioControllersRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListAioControllersRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListAioControllersRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListAioControllersRequest.parent)
}

// int32 page_size = 2;
inline void ListAioControllersRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListAioControllersRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListAioControllersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListAioControllersRequest.page_size)
  return _internal_page_size();
}
inline void ListAioControllersRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListAioControllersRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListAioControllersRequest.page_size)
}

// string page_token = 3;
inline void ListAioControllersRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListAioControllersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListAioControllersRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAioControllersRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListAioControllersRequest.page_token)
}
inline std::string* ListAioControllersRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListAioControllersRequest.page_token)
  return _s;
}
inline const std::string& ListAioControllersRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListAioControllersRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListAioControllersRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListAioControllersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListAioControllersRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListAioControllersRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListAioControllersRequest.page_token)
}

// -------------------------------------------------------------------

// ListAioControllersResponse

// repeated .opi_api.storage.v1.AioController aio_controllers = 1;
inline int ListAioControllersResponse::_internal_aio_controllers_size() const {
  return aio_controllers_.size();
}
inline int ListAioControllersResponse::aio_controllers_size() const {
  return _internal_aio_controllers_size();
}
inline void ListAioControllersResponse::clear_aio_controllers() {
  aio_controllers_.Clear();
}
inline ::opi_api::storage::v1::AioController* ListAioControllersResponse::mutable_aio_controllers(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListAioControllersResponse.aio_controllers)
  return aio_controllers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::AioController >*
ListAioControllersResponse::mutable_aio_controllers() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListAioControllersResponse.aio_controllers)
  return &aio_controllers_;
}
inline const ::opi_api::storage::v1::AioController& ListAioControllersResponse::_internal_aio_controllers(int index) const {
  return aio_controllers_.Get(index);
}
inline const ::opi_api::storage::v1::AioController& ListAioControllersResponse::aio_controllers(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListAioControllersResponse.aio_controllers)
  return _internal_aio_controllers(index);
}
inline ::opi_api::storage::v1::AioController* ListAioControllersResponse::_internal_add_aio_controllers() {
  return aio_controllers_.Add();
}
inline ::opi_api::storage::v1::AioController* ListAioControllersResponse::add_aio_controllers() {
  ::opi_api::storage::v1::AioController* _add = _internal_add_aio_controllers();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListAioControllersResponse.aio_controllers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::AioController >&
ListAioControllersResponse::aio_controllers() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListAioControllersResponse.aio_controllers)
  return aio_controllers_;
}

// string next_page_token = 2;
inline void ListAioControllersResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListAioControllersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListAioControllersResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListAioControllersResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListAioControllersResponse.next_page_token)
}
inline std::string* ListAioControllersResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListAioControllersResponse.next_page_token)
  return _s;
}
inline const std::string& ListAioControllersResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListAioControllersResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListAioControllersResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListAioControllersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListAioControllersResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListAioControllersResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListAioControllersResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetAioControllerRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetAioControllerRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetAioControllerRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetAioControllerRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAioControllerRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.GetAioControllerRequest.name)
}
inline std::string* GetAioControllerRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetAioControllerRequest.name)
  return _s;
}
inline const std::string& GetAioControllerRequest::_internal_name() const {
  return name_.Get();
}
inline void GetAioControllerRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetAioControllerRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetAioControllerRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetAioControllerRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetAioControllerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetAioControllerRequest.name)
}

// -------------------------------------------------------------------

// AioControllerStatsRequest

// .opi_api.common.v1.ObjectKey handle = 1;
inline bool AioControllerStatsRequest::_internal_has_handle() const {
  return this != internal_default_instance() && handle_ != nullptr;
}
inline bool AioControllerStatsRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::opi_api::common::v1::ObjectKey& AioControllerStatsRequest::_internal_handle() const {
  const ::opi_api::common::v1::ObjectKey* p = handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& AioControllerStatsRequest::handle() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioControllerStatsRequest.handle)
  return _internal_handle();
}
inline void AioControllerStatsRequest::unsafe_arena_set_allocated_handle(
    ::opi_api::common::v1::ObjectKey* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  handle_ = handle;
  if (handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.AioControllerStatsRequest.handle)
}
inline ::opi_api::common::v1::ObjectKey* AioControllerStatsRequest::release_handle() {
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioControllerStatsRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioControllerStatsRequest.handle)
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioControllerStatsRequest::_internal_mutable_handle() {
  
  if (handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    handle_ = p;
  }
  return handle_;
}
inline ::opi_api::common::v1::ObjectKey* AioControllerStatsRequest::mutable_handle() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioControllerStatsRequest.handle)
  return _msg;
}
inline void AioControllerStatsRequest::set_allocated_handle(::opi_api::common::v1::ObjectKey* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    
  } else {
    
  }
  handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioControllerStatsRequest.handle)
}

// -------------------------------------------------------------------

// AioControllerStatsResponse

// .opi_api.common.v1.ObjectKey handle = 1;
inline bool AioControllerStatsResponse::_internal_has_handle() const {
  return this != internal_default_instance() && handle_ != nullptr;
}
inline bool AioControllerStatsResponse::has_handle() const {
  return _internal_has_handle();
}
inline const ::opi_api::common::v1::ObjectKey& AioControllerStatsResponse::_internal_handle() const {
  const ::opi_api::common::v1::ObjectKey* p = handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& AioControllerStatsResponse::handle() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioControllerStatsResponse.handle)
  return _internal_handle();
}
inline void AioControllerStatsResponse::unsafe_arena_set_allocated_handle(
    ::opi_api::common::v1::ObjectKey* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  handle_ = handle;
  if (handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.AioControllerStatsResponse.handle)
}
inline ::opi_api::common::v1::ObjectKey* AioControllerStatsResponse::release_handle() {
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioControllerStatsResponse::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioControllerStatsResponse.handle)
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* AioControllerStatsResponse::_internal_mutable_handle() {
  
  if (handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    handle_ = p;
  }
  return handle_;
}
inline ::opi_api::common::v1::ObjectKey* AioControllerStatsResponse::mutable_handle() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioControllerStatsResponse.handle)
  return _msg;
}
inline void AioControllerStatsResponse::set_allocated_handle(::opi_api::common::v1::ObjectKey* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    
  } else {
    
  }
  handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioControllerStatsResponse.handle)
}

// .opi_api.storage.v1.VolumeStats stats = 2;
inline bool AioControllerStatsResponse::_internal_has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline bool AioControllerStatsResponse::has_stats() const {
  return _internal_has_stats();
}
inline const ::opi_api::storage::v1::VolumeStats& AioControllerStatsResponse::_internal_stats() const {
  const ::opi_api::storage::v1::VolumeStats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VolumeStats&>(
      ::opi_api::storage::v1::_VolumeStats_default_instance_);
}
inline const ::opi_api::storage::v1::VolumeStats& AioControllerStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.AioControllerStatsResponse.stats)
  return _internal_stats();
}
inline void AioControllerStatsResponse::unsafe_arena_set_allocated_stats(
    ::opi_api::storage::v1::VolumeStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.AioControllerStatsResponse.stats)
}
inline ::opi_api::storage::v1::VolumeStats* AioControllerStatsResponse::release_stats() {
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* AioControllerStatsResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.AioControllerStatsResponse.stats)
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* AioControllerStatsResponse::_internal_mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VolumeStats>(GetArenaForAllocation());
    stats_ = p;
  }
  return stats_;
}
inline ::opi_api::storage::v1::VolumeStats* AioControllerStatsResponse::mutable_stats() {
  ::opi_api::storage::v1::VolumeStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.AioControllerStatsResponse.stats)
  return _msg;
}
inline void AioControllerStatsResponse::set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats));
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.AioControllerStatsResponse.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_backend_5faio_2eproto
