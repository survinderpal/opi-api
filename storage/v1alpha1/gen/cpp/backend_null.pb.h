// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend_null.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_backend_5fnull_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_backend_5fnull_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/client.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/annotations.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include "object_key.pb.h"
#include "opicommon.pb.h"
#include "uuid.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_backend_5fnull_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_backend_5fnull_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backend_5fnull_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class CreateNullDebugRequest;
struct CreateNullDebugRequestDefaultTypeInternal;
extern CreateNullDebugRequestDefaultTypeInternal _CreateNullDebugRequest_default_instance_;
class DeleteNullDebugRequest;
struct DeleteNullDebugRequestDefaultTypeInternal;
extern DeleteNullDebugRequestDefaultTypeInternal _DeleteNullDebugRequest_default_instance_;
class GetNullDebugRequest;
struct GetNullDebugRequestDefaultTypeInternal;
extern GetNullDebugRequestDefaultTypeInternal _GetNullDebugRequest_default_instance_;
class ListNullDebugsRequest;
struct ListNullDebugsRequestDefaultTypeInternal;
extern ListNullDebugsRequestDefaultTypeInternal _ListNullDebugsRequest_default_instance_;
class ListNullDebugsResponse;
struct ListNullDebugsResponseDefaultTypeInternal;
extern ListNullDebugsResponseDefaultTypeInternal _ListNullDebugsResponse_default_instance_;
class NullDebug;
struct NullDebugDefaultTypeInternal;
extern NullDebugDefaultTypeInternal _NullDebug_default_instance_;
class NullDebugStatsRequest;
struct NullDebugStatsRequestDefaultTypeInternal;
extern NullDebugStatsRequestDefaultTypeInternal _NullDebugStatsRequest_default_instance_;
class NullDebugStatsResponse;
struct NullDebugStatsResponseDefaultTypeInternal;
extern NullDebugStatsResponseDefaultTypeInternal _NullDebugStatsResponse_default_instance_;
class UpdateNullDebugRequest;
struct UpdateNullDebugRequestDefaultTypeInternal;
extern UpdateNullDebugRequestDefaultTypeInternal _UpdateNullDebugRequest_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::CreateNullDebugRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateNullDebugRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteNullDebugRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteNullDebugRequest>(Arena*);
template<> ::opi_api::storage::v1::GetNullDebugRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetNullDebugRequest>(Arena*);
template<> ::opi_api::storage::v1::ListNullDebugsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListNullDebugsRequest>(Arena*);
template<> ::opi_api::storage::v1::ListNullDebugsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListNullDebugsResponse>(Arena*);
template<> ::opi_api::storage::v1::NullDebug* Arena::CreateMaybeMessage<::opi_api::storage::v1::NullDebug>(Arena*);
template<> ::opi_api::storage::v1::NullDebugStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::NullDebugStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::NullDebugStatsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::NullDebugStatsResponse>(Arena*);
template<> ::opi_api::storage::v1::UpdateNullDebugRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateNullDebugRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class NullDebug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NullDebug) */ {
 public:
  inline NullDebug() : NullDebug(nullptr) {}
  ~NullDebug() override;
  explicit constexpr NullDebug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NullDebug(const NullDebug& from);
  NullDebug(NullDebug&& from) noexcept
    : NullDebug() {
    *this = ::std::move(from);
  }

  inline NullDebug& operator=(const NullDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline NullDebug& operator=(NullDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NullDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const NullDebug* internal_default_instance() {
    return reinterpret_cast<const NullDebug*>(
               &_NullDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NullDebug& a, NullDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(NullDebug* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NullDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NullDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NullDebug>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NullDebug& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NullDebug& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NullDebug* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NullDebug";
  }
  protected:
  explicit NullDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kUuidFieldNumber = 4,
    kBlockSizeFieldNumber = 2,
    kBlocksCountFieldNumber = 3,
  };
  // .opi_api.common.v1.ObjectKey handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::opi_api::common::v1::ObjectKey& handle() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_handle();
  ::opi_api::common::v1::ObjectKey* mutable_handle();
  void set_allocated_handle(::opi_api::common::v1::ObjectKey* handle);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_handle() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::opi_api::common::v1::ObjectKey* handle);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_handle();

  // .opi_api.common.v1.Uuid uuid = 4;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::opi_api::common::v1::Uuid& uuid() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::Uuid* release_uuid();
  ::opi_api::common::v1::Uuid* mutable_uuid();
  void set_allocated_uuid(::opi_api::common::v1::Uuid* uuid);
  private:
  const ::opi_api::common::v1::Uuid& _internal_uuid() const;
  ::opi_api::common::v1::Uuid* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::opi_api::common::v1::Uuid* uuid);
  ::opi_api::common::v1::Uuid* unsafe_arena_release_uuid();

  // int64 block_size = 2;
  void clear_block_size();
  int64_t block_size() const;
  void set_block_size(int64_t value);
  private:
  int64_t _internal_block_size() const;
  void _internal_set_block_size(int64_t value);
  public:

  // int64 blocks_count = 3;
  void clear_blocks_count();
  int64_t blocks_count() const;
  void set_blocks_count(int64_t value);
  private:
  int64_t _internal_blocks_count() const;
  void _internal_set_blocks_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NullDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* handle_;
  ::opi_api::common::v1::Uuid* uuid_;
  int64_t block_size_;
  int64_t blocks_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class CreateNullDebugRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateNullDebugRequest) */ {
 public:
  inline CreateNullDebugRequest() : CreateNullDebugRequest(nullptr) {}
  ~CreateNullDebugRequest() override;
  explicit constexpr CreateNullDebugRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNullDebugRequest(const CreateNullDebugRequest& from);
  CreateNullDebugRequest(CreateNullDebugRequest&& from) noexcept
    : CreateNullDebugRequest() {
    *this = ::std::move(from);
  }

  inline CreateNullDebugRequest& operator=(const CreateNullDebugRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNullDebugRequest& operator=(CreateNullDebugRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNullDebugRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNullDebugRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNullDebugRequest*>(
               &_CreateNullDebugRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateNullDebugRequest& a, CreateNullDebugRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNullDebugRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNullDebugRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNullDebugRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNullDebugRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNullDebugRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNullDebugRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNullDebugRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateNullDebugRequest";
  }
  protected:
  explicit CreateNullDebugRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kNullDebugIdFieldNumber = 3,
    kNullDebugFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string null_debug_id = 3;
  void clear_null_debug_id();
  const std::string& null_debug_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_null_debug_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_null_debug_id();
  PROTOBUF_NODISCARD std::string* release_null_debug_id();
  void set_allocated_null_debug_id(std::string* null_debug_id);
  private:
  const std::string& _internal_null_debug_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_null_debug_id(const std::string& value);
  std::string* _internal_mutable_null_debug_id();
  public:

  // .opi_api.storage.v1.NullDebug null_debug = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_null_debug() const;
  private:
  bool _internal_has_null_debug() const;
  public:
  void clear_null_debug();
  const ::opi_api::storage::v1::NullDebug& null_debug() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NullDebug* release_null_debug();
  ::opi_api::storage::v1::NullDebug* mutable_null_debug();
  void set_allocated_null_debug(::opi_api::storage::v1::NullDebug* null_debug);
  private:
  const ::opi_api::storage::v1::NullDebug& _internal_null_debug() const;
  ::opi_api::storage::v1::NullDebug* _internal_mutable_null_debug();
  public:
  void unsafe_arena_set_allocated_null_debug(
      ::opi_api::storage::v1::NullDebug* null_debug);
  ::opi_api::storage::v1::NullDebug* unsafe_arena_release_null_debug();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateNullDebugRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr null_debug_id_;
  ::opi_api::storage::v1::NullDebug* null_debug_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class DeleteNullDebugRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteNullDebugRequest) */ {
 public:
  inline DeleteNullDebugRequest() : DeleteNullDebugRequest(nullptr) {}
  ~DeleteNullDebugRequest() override;
  explicit constexpr DeleteNullDebugRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNullDebugRequest(const DeleteNullDebugRequest& from);
  DeleteNullDebugRequest(DeleteNullDebugRequest&& from) noexcept
    : DeleteNullDebugRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNullDebugRequest& operator=(const DeleteNullDebugRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNullDebugRequest& operator=(DeleteNullDebugRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNullDebugRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNullDebugRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNullDebugRequest*>(
               &_DeleteNullDebugRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteNullDebugRequest& a, DeleteNullDebugRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNullDebugRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNullDebugRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNullDebugRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteNullDebugRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNullDebugRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteNullDebugRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNullDebugRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteNullDebugRequest";
  }
  protected:
  explicit DeleteNullDebugRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAllowMissingFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool allow_missing = 2;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteNullDebugRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool allow_missing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class UpdateNullDebugRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateNullDebugRequest) */ {
 public:
  inline UpdateNullDebugRequest() : UpdateNullDebugRequest(nullptr) {}
  ~UpdateNullDebugRequest() override;
  explicit constexpr UpdateNullDebugRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNullDebugRequest(const UpdateNullDebugRequest& from);
  UpdateNullDebugRequest(UpdateNullDebugRequest&& from) noexcept
    : UpdateNullDebugRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNullDebugRequest& operator=(const UpdateNullDebugRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNullDebugRequest& operator=(UpdateNullDebugRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNullDebugRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNullDebugRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNullDebugRequest*>(
               &_UpdateNullDebugRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateNullDebugRequest& a, UpdateNullDebugRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNullDebugRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNullDebugRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNullDebugRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNullDebugRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNullDebugRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateNullDebugRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNullDebugRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateNullDebugRequest";
  }
  protected:
  explicit UpdateNullDebugRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullDebugFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.storage.v1.NullDebug null_debug = 1;
  bool has_null_debug() const;
  private:
  bool _internal_has_null_debug() const;
  public:
  void clear_null_debug();
  const ::opi_api::storage::v1::NullDebug& null_debug() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NullDebug* release_null_debug();
  ::opi_api::storage::v1::NullDebug* mutable_null_debug();
  void set_allocated_null_debug(::opi_api::storage::v1::NullDebug* null_debug);
  private:
  const ::opi_api::storage::v1::NullDebug& _internal_null_debug() const;
  ::opi_api::storage::v1::NullDebug* _internal_mutable_null_debug();
  public:
  void unsafe_arena_set_allocated_null_debug(
      ::opi_api::storage::v1::NullDebug* null_debug);
  ::opi_api::storage::v1::NullDebug* unsafe_arena_release_null_debug();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateNullDebugRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::NullDebug* null_debug_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class ListNullDebugsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListNullDebugsRequest) */ {
 public:
  inline ListNullDebugsRequest() : ListNullDebugsRequest(nullptr) {}
  ~ListNullDebugsRequest() override;
  explicit constexpr ListNullDebugsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNullDebugsRequest(const ListNullDebugsRequest& from);
  ListNullDebugsRequest(ListNullDebugsRequest&& from) noexcept
    : ListNullDebugsRequest() {
    *this = ::std::move(from);
  }

  inline ListNullDebugsRequest& operator=(const ListNullDebugsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNullDebugsRequest& operator=(ListNullDebugsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNullDebugsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNullDebugsRequest* internal_default_instance() {
    return reinterpret_cast<const ListNullDebugsRequest*>(
               &_ListNullDebugsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListNullDebugsRequest& a, ListNullDebugsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNullDebugsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNullDebugsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNullDebugsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNullDebugsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNullDebugsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNullDebugsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNullDebugsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListNullDebugsRequest";
  }
  protected:
  explicit ListNullDebugsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListNullDebugsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class ListNullDebugsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListNullDebugsResponse) */ {
 public:
  inline ListNullDebugsResponse() : ListNullDebugsResponse(nullptr) {}
  ~ListNullDebugsResponse() override;
  explicit constexpr ListNullDebugsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNullDebugsResponse(const ListNullDebugsResponse& from);
  ListNullDebugsResponse(ListNullDebugsResponse&& from) noexcept
    : ListNullDebugsResponse() {
    *this = ::std::move(from);
  }

  inline ListNullDebugsResponse& operator=(const ListNullDebugsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNullDebugsResponse& operator=(ListNullDebugsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNullDebugsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNullDebugsResponse* internal_default_instance() {
    return reinterpret_cast<const ListNullDebugsResponse*>(
               &_ListNullDebugsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListNullDebugsResponse& a, ListNullDebugsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNullDebugsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNullDebugsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNullDebugsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNullDebugsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNullDebugsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNullDebugsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNullDebugsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListNullDebugsResponse";
  }
  protected:
  explicit ListNullDebugsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullDebugsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.storage.v1.NullDebug null_debugs = 1;
  int null_debugs_size() const;
  private:
  int _internal_null_debugs_size() const;
  public:
  void clear_null_debugs();
  ::opi_api::storage::v1::NullDebug* mutable_null_debugs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NullDebug >*
      mutable_null_debugs();
  private:
  const ::opi_api::storage::v1::NullDebug& _internal_null_debugs(int index) const;
  ::opi_api::storage::v1::NullDebug* _internal_add_null_debugs();
  public:
  const ::opi_api::storage::v1::NullDebug& null_debugs(int index) const;
  ::opi_api::storage::v1::NullDebug* add_null_debugs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NullDebug >&
      null_debugs() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListNullDebugsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NullDebug > null_debugs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class GetNullDebugRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetNullDebugRequest) */ {
 public:
  inline GetNullDebugRequest() : GetNullDebugRequest(nullptr) {}
  ~GetNullDebugRequest() override;
  explicit constexpr GetNullDebugRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNullDebugRequest(const GetNullDebugRequest& from);
  GetNullDebugRequest(GetNullDebugRequest&& from) noexcept
    : GetNullDebugRequest() {
    *this = ::std::move(from);
  }

  inline GetNullDebugRequest& operator=(const GetNullDebugRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNullDebugRequest& operator=(GetNullDebugRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNullDebugRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNullDebugRequest* internal_default_instance() {
    return reinterpret_cast<const GetNullDebugRequest*>(
               &_GetNullDebugRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetNullDebugRequest& a, GetNullDebugRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNullDebugRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNullDebugRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNullDebugRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNullDebugRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNullDebugRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNullDebugRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNullDebugRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetNullDebugRequest";
  }
  protected:
  explicit GetNullDebugRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetNullDebugRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class NullDebugStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NullDebugStatsRequest) */ {
 public:
  inline NullDebugStatsRequest() : NullDebugStatsRequest(nullptr) {}
  ~NullDebugStatsRequest() override;
  explicit constexpr NullDebugStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NullDebugStatsRequest(const NullDebugStatsRequest& from);
  NullDebugStatsRequest(NullDebugStatsRequest&& from) noexcept
    : NullDebugStatsRequest() {
    *this = ::std::move(from);
  }

  inline NullDebugStatsRequest& operator=(const NullDebugStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NullDebugStatsRequest& operator=(NullDebugStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NullDebugStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NullDebugStatsRequest* internal_default_instance() {
    return reinterpret_cast<const NullDebugStatsRequest*>(
               &_NullDebugStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NullDebugStatsRequest& a, NullDebugStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NullDebugStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NullDebugStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NullDebugStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NullDebugStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NullDebugStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NullDebugStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NullDebugStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NullDebugStatsRequest";
  }
  protected:
  explicit NullDebugStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::opi_api::common::v1::ObjectKey& handle() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_handle();
  ::opi_api::common::v1::ObjectKey* mutable_handle();
  void set_allocated_handle(::opi_api::common::v1::ObjectKey* handle);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_handle() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::opi_api::common::v1::ObjectKey* handle);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_handle();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NullDebugStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// -------------------------------------------------------------------

class NullDebugStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NullDebugStatsResponse) */ {
 public:
  inline NullDebugStatsResponse() : NullDebugStatsResponse(nullptr) {}
  ~NullDebugStatsResponse() override;
  explicit constexpr NullDebugStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NullDebugStatsResponse(const NullDebugStatsResponse& from);
  NullDebugStatsResponse(NullDebugStatsResponse&& from) noexcept
    : NullDebugStatsResponse() {
    *this = ::std::move(from);
  }

  inline NullDebugStatsResponse& operator=(const NullDebugStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NullDebugStatsResponse& operator=(NullDebugStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NullDebugStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NullDebugStatsResponse* internal_default_instance() {
    return reinterpret_cast<const NullDebugStatsResponse*>(
               &_NullDebugStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NullDebugStatsResponse& a, NullDebugStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NullDebugStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NullDebugStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NullDebugStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NullDebugStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NullDebugStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NullDebugStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NullDebugStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NullDebugStatsResponse";
  }
  protected:
  explicit NullDebugStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kStatsFieldNumber = 2,
  };
  // .opi_api.common.v1.ObjectKey handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::opi_api::common::v1::ObjectKey& handle() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_handle();
  ::opi_api::common::v1::ObjectKey* mutable_handle();
  void set_allocated_handle(::opi_api::common::v1::ObjectKey* handle);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_handle() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::opi_api::common::v1::ObjectKey* handle);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_handle();

  // .opi_api.storage.v1.VolumeStats stats = 2;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::opi_api::storage::v1::VolumeStats& stats() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VolumeStats* release_stats();
  ::opi_api::storage::v1::VolumeStats* mutable_stats();
  void set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats);
  private:
  const ::opi_api::storage::v1::VolumeStats& _internal_stats() const;
  ::opi_api::storage::v1::VolumeStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::opi_api::storage::v1::VolumeStats* stats);
  ::opi_api::storage::v1::VolumeStats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NullDebugStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* handle_;
  ::opi_api::storage::v1::VolumeStats* stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnull_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NullDebug

// .opi_api.common.v1.ObjectKey handle = 1;
inline bool NullDebug::_internal_has_handle() const {
  return this != internal_default_instance() && handle_ != nullptr;
}
inline bool NullDebug::has_handle() const {
  return _internal_has_handle();
}
inline const ::opi_api::common::v1::ObjectKey& NullDebug::_internal_handle() const {
  const ::opi_api::common::v1::ObjectKey* p = handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NullDebug::handle() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NullDebug.handle)
  return _internal_handle();
}
inline void NullDebug::unsafe_arena_set_allocated_handle(
    ::opi_api::common::v1::ObjectKey* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  handle_ = handle;
  if (handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NullDebug.handle)
}
inline ::opi_api::common::v1::ObjectKey* NullDebug::release_handle() {
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NullDebug::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NullDebug.handle)
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NullDebug::_internal_mutable_handle() {
  
  if (handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    handle_ = p;
  }
  return handle_;
}
inline ::opi_api::common::v1::ObjectKey* NullDebug::mutable_handle() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NullDebug.handle)
  return _msg;
}
inline void NullDebug::set_allocated_handle(::opi_api::common::v1::ObjectKey* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    
  } else {
    
  }
  handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NullDebug.handle)
}

// int64 block_size = 2;
inline void NullDebug::clear_block_size() {
  block_size_ = int64_t{0};
}
inline int64_t NullDebug::_internal_block_size() const {
  return block_size_;
}
inline int64_t NullDebug::block_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NullDebug.block_size)
  return _internal_block_size();
}
inline void NullDebug::_internal_set_block_size(int64_t value) {
  
  block_size_ = value;
}
inline void NullDebug::set_block_size(int64_t value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NullDebug.block_size)
}

// int64 blocks_count = 3;
inline void NullDebug::clear_blocks_count() {
  blocks_count_ = int64_t{0};
}
inline int64_t NullDebug::_internal_blocks_count() const {
  return blocks_count_;
}
inline int64_t NullDebug::blocks_count() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NullDebug.blocks_count)
  return _internal_blocks_count();
}
inline void NullDebug::_internal_set_blocks_count(int64_t value) {
  
  blocks_count_ = value;
}
inline void NullDebug::set_blocks_count(int64_t value) {
  _internal_set_blocks_count(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NullDebug.blocks_count)
}

// .opi_api.common.v1.Uuid uuid = 4;
inline bool NullDebug::_internal_has_uuid() const {
  return this != internal_default_instance() && uuid_ != nullptr;
}
inline bool NullDebug::has_uuid() const {
  return _internal_has_uuid();
}
inline const ::opi_api::common::v1::Uuid& NullDebug::_internal_uuid() const {
  const ::opi_api::common::v1::Uuid* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::Uuid&>(
      ::opi_api::common::v1::_Uuid_default_instance_);
}
inline const ::opi_api::common::v1::Uuid& NullDebug::uuid() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NullDebug.uuid)
  return _internal_uuid();
}
inline void NullDebug::unsafe_arena_set_allocated_uuid(
    ::opi_api::common::v1::Uuid* uuid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NullDebug.uuid)
}
inline ::opi_api::common::v1::Uuid* NullDebug::release_uuid() {
  
  ::opi_api::common::v1::Uuid* temp = uuid_;
  uuid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::Uuid* NullDebug::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NullDebug.uuid)
  
  ::opi_api::common::v1::Uuid* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::Uuid* NullDebug::_internal_mutable_uuid() {
  
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::Uuid>(GetArenaForAllocation());
    uuid_ = p;
  }
  return uuid_;
}
inline ::opi_api::common::v1::Uuid* NullDebug::mutable_uuid() {
  ::opi_api::common::v1::Uuid* _msg = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NullDebug.uuid)
  return _msg;
}
inline void NullDebug::set_allocated_uuid(::opi_api::common::v1::Uuid* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid));
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    
  } else {
    
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NullDebug.uuid)
}

// -------------------------------------------------------------------

// CreateNullDebugRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateNullDebugRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateNullDebugRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateNullDebugRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNullDebugRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateNullDebugRequest.parent)
}
inline std::string* CreateNullDebugRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateNullDebugRequest.parent)
  return _s;
}
inline const std::string& CreateNullDebugRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateNullDebugRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNullDebugRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNullDebugRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateNullDebugRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNullDebugRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateNullDebugRequest.parent)
}

// .opi_api.storage.v1.NullDebug null_debug = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateNullDebugRequest::_internal_has_null_debug() const {
  return this != internal_default_instance() && null_debug_ != nullptr;
}
inline bool CreateNullDebugRequest::has_null_debug() const {
  return _internal_has_null_debug();
}
inline void CreateNullDebugRequest::clear_null_debug() {
  if (GetArenaForAllocation() == nullptr && null_debug_ != nullptr) {
    delete null_debug_;
  }
  null_debug_ = nullptr;
}
inline const ::opi_api::storage::v1::NullDebug& CreateNullDebugRequest::_internal_null_debug() const {
  const ::opi_api::storage::v1::NullDebug* p = null_debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NullDebug&>(
      ::opi_api::storage::v1::_NullDebug_default_instance_);
}
inline const ::opi_api::storage::v1::NullDebug& CreateNullDebugRequest::null_debug() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateNullDebugRequest.null_debug)
  return _internal_null_debug();
}
inline void CreateNullDebugRequest::unsafe_arena_set_allocated_null_debug(
    ::opi_api::storage::v1::NullDebug* null_debug) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(null_debug_);
  }
  null_debug_ = null_debug;
  if (null_debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateNullDebugRequest.null_debug)
}
inline ::opi_api::storage::v1::NullDebug* CreateNullDebugRequest::release_null_debug() {
  
  ::opi_api::storage::v1::NullDebug* temp = null_debug_;
  null_debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NullDebug* CreateNullDebugRequest::unsafe_arena_release_null_debug() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateNullDebugRequest.null_debug)
  
  ::opi_api::storage::v1::NullDebug* temp = null_debug_;
  null_debug_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NullDebug* CreateNullDebugRequest::_internal_mutable_null_debug() {
  
  if (null_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NullDebug>(GetArenaForAllocation());
    null_debug_ = p;
  }
  return null_debug_;
}
inline ::opi_api::storage::v1::NullDebug* CreateNullDebugRequest::mutable_null_debug() {
  ::opi_api::storage::v1::NullDebug* _msg = _internal_mutable_null_debug();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateNullDebugRequest.null_debug)
  return _msg;
}
inline void CreateNullDebugRequest::set_allocated_null_debug(::opi_api::storage::v1::NullDebug* null_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete null_debug_;
  }
  if (null_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NullDebug>::GetOwningArena(null_debug);
    if (message_arena != submessage_arena) {
      null_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, null_debug, submessage_arena);
    }
    
  } else {
    
  }
  null_debug_ = null_debug;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateNullDebugRequest.null_debug)
}

// string null_debug_id = 3;
inline void CreateNullDebugRequest::clear_null_debug_id() {
  null_debug_id_.ClearToEmpty();
}
inline const std::string& CreateNullDebugRequest::null_debug_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateNullDebugRequest.null_debug_id)
  return _internal_null_debug_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNullDebugRequest::set_null_debug_id(ArgT0&& arg0, ArgT... args) {
 
 null_debug_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateNullDebugRequest.null_debug_id)
}
inline std::string* CreateNullDebugRequest::mutable_null_debug_id() {
  std::string* _s = _internal_mutable_null_debug_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateNullDebugRequest.null_debug_id)
  return _s;
}
inline const std::string& CreateNullDebugRequest::_internal_null_debug_id() const {
  return null_debug_id_.Get();
}
inline void CreateNullDebugRequest::_internal_set_null_debug_id(const std::string& value) {
  
  null_debug_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNullDebugRequest::_internal_mutable_null_debug_id() {
  
  return null_debug_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNullDebugRequest::release_null_debug_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateNullDebugRequest.null_debug_id)
  return null_debug_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNullDebugRequest::set_allocated_null_debug_id(std::string* null_debug_id) {
  if (null_debug_id != nullptr) {
    
  } else {
    
  }
  null_debug_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), null_debug_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (null_debug_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    null_debug_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateNullDebugRequest.null_debug_id)
}

// -------------------------------------------------------------------

// DeleteNullDebugRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteNullDebugRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteNullDebugRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteNullDebugRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteNullDebugRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteNullDebugRequest.name)
}
inline std::string* DeleteNullDebugRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteNullDebugRequest.name)
  return _s;
}
inline const std::string& DeleteNullDebugRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteNullDebugRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteNullDebugRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteNullDebugRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteNullDebugRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteNullDebugRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteNullDebugRequest.name)
}

// bool allow_missing = 2;
inline void DeleteNullDebugRequest::clear_allow_missing() {
  allow_missing_ = false;
}
inline bool DeleteNullDebugRequest::_internal_allow_missing() const {
  return allow_missing_;
}
inline bool DeleteNullDebugRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteNullDebugRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteNullDebugRequest::_internal_set_allow_missing(bool value) {
  
  allow_missing_ = value;
}
inline void DeleteNullDebugRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteNullDebugRequest.allow_missing)
}

// -------------------------------------------------------------------

// UpdateNullDebugRequest

// .opi_api.storage.v1.NullDebug null_debug = 1;
inline bool UpdateNullDebugRequest::_internal_has_null_debug() const {
  return this != internal_default_instance() && null_debug_ != nullptr;
}
inline bool UpdateNullDebugRequest::has_null_debug() const {
  return _internal_has_null_debug();
}
inline void UpdateNullDebugRequest::clear_null_debug() {
  if (GetArenaForAllocation() == nullptr && null_debug_ != nullptr) {
    delete null_debug_;
  }
  null_debug_ = nullptr;
}
inline const ::opi_api::storage::v1::NullDebug& UpdateNullDebugRequest::_internal_null_debug() const {
  const ::opi_api::storage::v1::NullDebug* p = null_debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NullDebug&>(
      ::opi_api::storage::v1::_NullDebug_default_instance_);
}
inline const ::opi_api::storage::v1::NullDebug& UpdateNullDebugRequest::null_debug() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateNullDebugRequest.null_debug)
  return _internal_null_debug();
}
inline void UpdateNullDebugRequest::unsafe_arena_set_allocated_null_debug(
    ::opi_api::storage::v1::NullDebug* null_debug) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(null_debug_);
  }
  null_debug_ = null_debug;
  if (null_debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateNullDebugRequest.null_debug)
}
inline ::opi_api::storage::v1::NullDebug* UpdateNullDebugRequest::release_null_debug() {
  
  ::opi_api::storage::v1::NullDebug* temp = null_debug_;
  null_debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NullDebug* UpdateNullDebugRequest::unsafe_arena_release_null_debug() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateNullDebugRequest.null_debug)
  
  ::opi_api::storage::v1::NullDebug* temp = null_debug_;
  null_debug_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NullDebug* UpdateNullDebugRequest::_internal_mutable_null_debug() {
  
  if (null_debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NullDebug>(GetArenaForAllocation());
    null_debug_ = p;
  }
  return null_debug_;
}
inline ::opi_api::storage::v1::NullDebug* UpdateNullDebugRequest::mutable_null_debug() {
  ::opi_api::storage::v1::NullDebug* _msg = _internal_mutable_null_debug();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateNullDebugRequest.null_debug)
  return _msg;
}
inline void UpdateNullDebugRequest::set_allocated_null_debug(::opi_api::storage::v1::NullDebug* null_debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete null_debug_;
  }
  if (null_debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NullDebug>::GetOwningArena(null_debug);
    if (message_arena != submessage_arena) {
      null_debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, null_debug, submessage_arena);
    }
    
  } else {
    
  }
  null_debug_ = null_debug;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateNullDebugRequest.null_debug)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateNullDebugRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateNullDebugRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNullDebugRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNullDebugRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateNullDebugRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateNullDebugRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateNullDebugRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNullDebugRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNullDebugRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateNullDebugRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNullDebugRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNullDebugRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateNullDebugRequest.update_mask)
  return _msg;
}
inline void UpdateNullDebugRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateNullDebugRequest.update_mask)
}

// -------------------------------------------------------------------

// ListNullDebugsRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListNullDebugsRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListNullDebugsRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNullDebugsRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNullDebugsRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNullDebugsRequest.parent)
}
inline std::string* ListNullDebugsRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNullDebugsRequest.parent)
  return _s;
}
inline const std::string& ListNullDebugsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListNullDebugsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNullDebugsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNullDebugsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNullDebugsRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNullDebugsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNullDebugsRequest.parent)
}

// int32 page_size = 2;
inline void ListNullDebugsRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListNullDebugsRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListNullDebugsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNullDebugsRequest.page_size)
  return _internal_page_size();
}
inline void ListNullDebugsRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListNullDebugsRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNullDebugsRequest.page_size)
}

// string page_token = 3;
inline void ListNullDebugsRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListNullDebugsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNullDebugsRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNullDebugsRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNullDebugsRequest.page_token)
}
inline std::string* ListNullDebugsRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNullDebugsRequest.page_token)
  return _s;
}
inline const std::string& ListNullDebugsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListNullDebugsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNullDebugsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNullDebugsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNullDebugsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNullDebugsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNullDebugsRequest.page_token)
}

// -------------------------------------------------------------------

// ListNullDebugsResponse

// repeated .opi_api.storage.v1.NullDebug null_debugs = 1;
inline int ListNullDebugsResponse::_internal_null_debugs_size() const {
  return null_debugs_.size();
}
inline int ListNullDebugsResponse::null_debugs_size() const {
  return _internal_null_debugs_size();
}
inline void ListNullDebugsResponse::clear_null_debugs() {
  null_debugs_.Clear();
}
inline ::opi_api::storage::v1::NullDebug* ListNullDebugsResponse::mutable_null_debugs(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNullDebugsResponse.null_debugs)
  return null_debugs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NullDebug >*
ListNullDebugsResponse::mutable_null_debugs() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListNullDebugsResponse.null_debugs)
  return &null_debugs_;
}
inline const ::opi_api::storage::v1::NullDebug& ListNullDebugsResponse::_internal_null_debugs(int index) const {
  return null_debugs_.Get(index);
}
inline const ::opi_api::storage::v1::NullDebug& ListNullDebugsResponse::null_debugs(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNullDebugsResponse.null_debugs)
  return _internal_null_debugs(index);
}
inline ::opi_api::storage::v1::NullDebug* ListNullDebugsResponse::_internal_add_null_debugs() {
  return null_debugs_.Add();
}
inline ::opi_api::storage::v1::NullDebug* ListNullDebugsResponse::add_null_debugs() {
  ::opi_api::storage::v1::NullDebug* _add = _internal_add_null_debugs();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListNullDebugsResponse.null_debugs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NullDebug >&
ListNullDebugsResponse::null_debugs() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListNullDebugsResponse.null_debugs)
  return null_debugs_;
}

// string next_page_token = 2;
inline void ListNullDebugsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListNullDebugsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNullDebugsResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNullDebugsResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNullDebugsResponse.next_page_token)
}
inline std::string* ListNullDebugsResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNullDebugsResponse.next_page_token)
  return _s;
}
inline const std::string& ListNullDebugsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListNullDebugsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNullDebugsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNullDebugsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNullDebugsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNullDebugsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNullDebugsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetNullDebugRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetNullDebugRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetNullDebugRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetNullDebugRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNullDebugRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.GetNullDebugRequest.name)
}
inline std::string* GetNullDebugRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetNullDebugRequest.name)
  return _s;
}
inline const std::string& GetNullDebugRequest::_internal_name() const {
  return name_.Get();
}
inline void GetNullDebugRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetNullDebugRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetNullDebugRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetNullDebugRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetNullDebugRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetNullDebugRequest.name)
}

// -------------------------------------------------------------------

// NullDebugStatsRequest

// .opi_api.common.v1.ObjectKey handle = 1;
inline bool NullDebugStatsRequest::_internal_has_handle() const {
  return this != internal_default_instance() && handle_ != nullptr;
}
inline bool NullDebugStatsRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::opi_api::common::v1::ObjectKey& NullDebugStatsRequest::_internal_handle() const {
  const ::opi_api::common::v1::ObjectKey* p = handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NullDebugStatsRequest::handle() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NullDebugStatsRequest.handle)
  return _internal_handle();
}
inline void NullDebugStatsRequest::unsafe_arena_set_allocated_handle(
    ::opi_api::common::v1::ObjectKey* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  handle_ = handle;
  if (handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NullDebugStatsRequest.handle)
}
inline ::opi_api::common::v1::ObjectKey* NullDebugStatsRequest::release_handle() {
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NullDebugStatsRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NullDebugStatsRequest.handle)
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NullDebugStatsRequest::_internal_mutable_handle() {
  
  if (handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    handle_ = p;
  }
  return handle_;
}
inline ::opi_api::common::v1::ObjectKey* NullDebugStatsRequest::mutable_handle() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NullDebugStatsRequest.handle)
  return _msg;
}
inline void NullDebugStatsRequest::set_allocated_handle(::opi_api::common::v1::ObjectKey* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    
  } else {
    
  }
  handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NullDebugStatsRequest.handle)
}

// -------------------------------------------------------------------

// NullDebugStatsResponse

// .opi_api.common.v1.ObjectKey handle = 1;
inline bool NullDebugStatsResponse::_internal_has_handle() const {
  return this != internal_default_instance() && handle_ != nullptr;
}
inline bool NullDebugStatsResponse::has_handle() const {
  return _internal_has_handle();
}
inline const ::opi_api::common::v1::ObjectKey& NullDebugStatsResponse::_internal_handle() const {
  const ::opi_api::common::v1::ObjectKey* p = handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NullDebugStatsResponse::handle() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NullDebugStatsResponse.handle)
  return _internal_handle();
}
inline void NullDebugStatsResponse::unsafe_arena_set_allocated_handle(
    ::opi_api::common::v1::ObjectKey* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  handle_ = handle;
  if (handle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NullDebugStatsResponse.handle)
}
inline ::opi_api::common::v1::ObjectKey* NullDebugStatsResponse::release_handle() {
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NullDebugStatsResponse::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NullDebugStatsResponse.handle)
  
  ::opi_api::common::v1::ObjectKey* temp = handle_;
  handle_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NullDebugStatsResponse::_internal_mutable_handle() {
  
  if (handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    handle_ = p;
  }
  return handle_;
}
inline ::opi_api::common::v1::ObjectKey* NullDebugStatsResponse::mutable_handle() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NullDebugStatsResponse.handle)
  return _msg;
}
inline void NullDebugStatsResponse::set_allocated_handle(::opi_api::common::v1::ObjectKey* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    
  } else {
    
  }
  handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NullDebugStatsResponse.handle)
}

// .opi_api.storage.v1.VolumeStats stats = 2;
inline bool NullDebugStatsResponse::_internal_has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline bool NullDebugStatsResponse::has_stats() const {
  return _internal_has_stats();
}
inline const ::opi_api::storage::v1::VolumeStats& NullDebugStatsResponse::_internal_stats() const {
  const ::opi_api::storage::v1::VolumeStats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VolumeStats&>(
      ::opi_api::storage::v1::_VolumeStats_default_instance_);
}
inline const ::opi_api::storage::v1::VolumeStats& NullDebugStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NullDebugStatsResponse.stats)
  return _internal_stats();
}
inline void NullDebugStatsResponse::unsafe_arena_set_allocated_stats(
    ::opi_api::storage::v1::VolumeStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NullDebugStatsResponse.stats)
}
inline ::opi_api::storage::v1::VolumeStats* NullDebugStatsResponse::release_stats() {
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* NullDebugStatsResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NullDebugStatsResponse.stats)
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* NullDebugStatsResponse::_internal_mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VolumeStats>(GetArenaForAllocation());
    stats_ = p;
  }
  return stats_;
}
inline ::opi_api::storage::v1::VolumeStats* NullDebugStatsResponse::mutable_stats() {
  ::opi_api::storage::v1::VolumeStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NullDebugStatsResponse.stats)
  return _msg;
}
inline void NullDebugStatsResponse::set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats));
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NullDebugStatsResponse.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_backend_5fnull_2eproto
