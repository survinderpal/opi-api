// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: frontend_virtio_blk.proto

#include "frontend_virtio_blk.pb.h"
#include "frontend_virtio_blk.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace opi_api {
namespace storage {
namespace v1 {

static const char* FrontendVirtioBlkService_method_names[] = {
  "/opi_api.storage.v1.FrontendVirtioBlkService/CreateVirtioBlk",
  "/opi_api.storage.v1.FrontendVirtioBlkService/DeleteVirtioBlk",
  "/opi_api.storage.v1.FrontendVirtioBlkService/UpdateVirtioBlk",
  "/opi_api.storage.v1.FrontendVirtioBlkService/ListVirtioBlks",
  "/opi_api.storage.v1.FrontendVirtioBlkService/GetVirtioBlk",
  "/opi_api.storage.v1.FrontendVirtioBlkService/VirtioBlkStats",
};

std::unique_ptr< FrontendVirtioBlkService::Stub> FrontendVirtioBlkService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FrontendVirtioBlkService::Stub> stub(new FrontendVirtioBlkService::Stub(channel, options));
  return stub;
}

FrontendVirtioBlkService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateVirtioBlk_(FrontendVirtioBlkService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteVirtioBlk_(FrontendVirtioBlkService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateVirtioBlk_(FrontendVirtioBlkService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListVirtioBlks_(FrontendVirtioBlkService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVirtioBlk_(FrontendVirtioBlkService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VirtioBlkStats_(FrontendVirtioBlkService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FrontendVirtioBlkService::Stub::CreateVirtioBlk(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateVirtioBlkRequest& request, ::opi_api::storage::v1::VirtioBlk* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::CreateVirtioBlkRequest, ::opi_api::storage::v1::VirtioBlk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateVirtioBlk_, context, request, response);
}

void FrontendVirtioBlkService::Stub::async::CreateVirtioBlk(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateVirtioBlkRequest* request, ::opi_api::storage::v1::VirtioBlk* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::CreateVirtioBlkRequest, ::opi_api::storage::v1::VirtioBlk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateVirtioBlk_, context, request, response, std::move(f));
}

void FrontendVirtioBlkService::Stub::async::CreateVirtioBlk(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateVirtioBlkRequest* request, ::opi_api::storage::v1::VirtioBlk* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateVirtioBlk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::VirtioBlk>* FrontendVirtioBlkService::Stub::PrepareAsyncCreateVirtioBlkRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateVirtioBlkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::VirtioBlk, ::opi_api::storage::v1::CreateVirtioBlkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateVirtioBlk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::VirtioBlk>* FrontendVirtioBlkService::Stub::AsyncCreateVirtioBlkRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::CreateVirtioBlkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateVirtioBlkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendVirtioBlkService::Stub::DeleteVirtioBlk(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteVirtioBlkRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::DeleteVirtioBlkRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteVirtioBlk_, context, request, response);
}

void FrontendVirtioBlkService::Stub::async::DeleteVirtioBlk(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteVirtioBlkRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::DeleteVirtioBlkRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteVirtioBlk_, context, request, response, std::move(f));
}

void FrontendVirtioBlkService::Stub::async::DeleteVirtioBlk(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteVirtioBlkRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteVirtioBlk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* FrontendVirtioBlkService::Stub::PrepareAsyncDeleteVirtioBlkRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteVirtioBlkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::opi_api::storage::v1::DeleteVirtioBlkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteVirtioBlk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* FrontendVirtioBlkService::Stub::AsyncDeleteVirtioBlkRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::DeleteVirtioBlkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteVirtioBlkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendVirtioBlkService::Stub::UpdateVirtioBlk(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateVirtioBlkRequest& request, ::opi_api::storage::v1::VirtioBlk* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::UpdateVirtioBlkRequest, ::opi_api::storage::v1::VirtioBlk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateVirtioBlk_, context, request, response);
}

void FrontendVirtioBlkService::Stub::async::UpdateVirtioBlk(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateVirtioBlkRequest* request, ::opi_api::storage::v1::VirtioBlk* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::UpdateVirtioBlkRequest, ::opi_api::storage::v1::VirtioBlk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateVirtioBlk_, context, request, response, std::move(f));
}

void FrontendVirtioBlkService::Stub::async::UpdateVirtioBlk(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateVirtioBlkRequest* request, ::opi_api::storage::v1::VirtioBlk* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateVirtioBlk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::VirtioBlk>* FrontendVirtioBlkService::Stub::PrepareAsyncUpdateVirtioBlkRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateVirtioBlkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::VirtioBlk, ::opi_api::storage::v1::UpdateVirtioBlkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateVirtioBlk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::VirtioBlk>* FrontendVirtioBlkService::Stub::AsyncUpdateVirtioBlkRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::UpdateVirtioBlkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateVirtioBlkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendVirtioBlkService::Stub::ListVirtioBlks(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListVirtioBlksRequest& request, ::opi_api::storage::v1::ListVirtioBlksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::ListVirtioBlksRequest, ::opi_api::storage::v1::ListVirtioBlksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListVirtioBlks_, context, request, response);
}

void FrontendVirtioBlkService::Stub::async::ListVirtioBlks(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListVirtioBlksRequest* request, ::opi_api::storage::v1::ListVirtioBlksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::ListVirtioBlksRequest, ::opi_api::storage::v1::ListVirtioBlksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListVirtioBlks_, context, request, response, std::move(f));
}

void FrontendVirtioBlkService::Stub::async::ListVirtioBlks(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListVirtioBlksRequest* request, ::opi_api::storage::v1::ListVirtioBlksResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListVirtioBlks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListVirtioBlksResponse>* FrontendVirtioBlkService::Stub::PrepareAsyncListVirtioBlksRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListVirtioBlksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::ListVirtioBlksResponse, ::opi_api::storage::v1::ListVirtioBlksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListVirtioBlks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::ListVirtioBlksResponse>* FrontendVirtioBlkService::Stub::AsyncListVirtioBlksRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::ListVirtioBlksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListVirtioBlksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendVirtioBlkService::Stub::GetVirtioBlk(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetVirtioBlkRequest& request, ::opi_api::storage::v1::VirtioBlk* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::GetVirtioBlkRequest, ::opi_api::storage::v1::VirtioBlk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVirtioBlk_, context, request, response);
}

void FrontendVirtioBlkService::Stub::async::GetVirtioBlk(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetVirtioBlkRequest* request, ::opi_api::storage::v1::VirtioBlk* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::GetVirtioBlkRequest, ::opi_api::storage::v1::VirtioBlk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVirtioBlk_, context, request, response, std::move(f));
}

void FrontendVirtioBlkService::Stub::async::GetVirtioBlk(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetVirtioBlkRequest* request, ::opi_api::storage::v1::VirtioBlk* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVirtioBlk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::VirtioBlk>* FrontendVirtioBlkService::Stub::PrepareAsyncGetVirtioBlkRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetVirtioBlkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::VirtioBlk, ::opi_api::storage::v1::GetVirtioBlkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVirtioBlk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::VirtioBlk>* FrontendVirtioBlkService::Stub::AsyncGetVirtioBlkRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::GetVirtioBlkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVirtioBlkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FrontendVirtioBlkService::Stub::VirtioBlkStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::VirtioBlkStatsRequest& request, ::opi_api::storage::v1::VirtioBlkStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::opi_api::storage::v1::VirtioBlkStatsRequest, ::opi_api::storage::v1::VirtioBlkStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VirtioBlkStats_, context, request, response);
}

void FrontendVirtioBlkService::Stub::async::VirtioBlkStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::VirtioBlkStatsRequest* request, ::opi_api::storage::v1::VirtioBlkStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::opi_api::storage::v1::VirtioBlkStatsRequest, ::opi_api::storage::v1::VirtioBlkStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VirtioBlkStats_, context, request, response, std::move(f));
}

void FrontendVirtioBlkService::Stub::async::VirtioBlkStats(::grpc::ClientContext* context, const ::opi_api::storage::v1::VirtioBlkStatsRequest* request, ::opi_api::storage::v1::VirtioBlkStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VirtioBlkStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::VirtioBlkStatsResponse>* FrontendVirtioBlkService::Stub::PrepareAsyncVirtioBlkStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::VirtioBlkStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::opi_api::storage::v1::VirtioBlkStatsResponse, ::opi_api::storage::v1::VirtioBlkStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VirtioBlkStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::opi_api::storage::v1::VirtioBlkStatsResponse>* FrontendVirtioBlkService::Stub::AsyncVirtioBlkStatsRaw(::grpc::ClientContext* context, const ::opi_api::storage::v1::VirtioBlkStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVirtioBlkStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

FrontendVirtioBlkService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendVirtioBlkService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendVirtioBlkService::Service, ::opi_api::storage::v1::CreateVirtioBlkRequest, ::opi_api::storage::v1::VirtioBlk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendVirtioBlkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::CreateVirtioBlkRequest* req,
             ::opi_api::storage::v1::VirtioBlk* resp) {
               return service->CreateVirtioBlk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendVirtioBlkService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendVirtioBlkService::Service, ::opi_api::storage::v1::DeleteVirtioBlkRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendVirtioBlkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::DeleteVirtioBlkRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteVirtioBlk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendVirtioBlkService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendVirtioBlkService::Service, ::opi_api::storage::v1::UpdateVirtioBlkRequest, ::opi_api::storage::v1::VirtioBlk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendVirtioBlkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::UpdateVirtioBlkRequest* req,
             ::opi_api::storage::v1::VirtioBlk* resp) {
               return service->UpdateVirtioBlk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendVirtioBlkService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendVirtioBlkService::Service, ::opi_api::storage::v1::ListVirtioBlksRequest, ::opi_api::storage::v1::ListVirtioBlksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendVirtioBlkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::ListVirtioBlksRequest* req,
             ::opi_api::storage::v1::ListVirtioBlksResponse* resp) {
               return service->ListVirtioBlks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendVirtioBlkService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendVirtioBlkService::Service, ::opi_api::storage::v1::GetVirtioBlkRequest, ::opi_api::storage::v1::VirtioBlk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendVirtioBlkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::GetVirtioBlkRequest* req,
             ::opi_api::storage::v1::VirtioBlk* resp) {
               return service->GetVirtioBlk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FrontendVirtioBlkService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FrontendVirtioBlkService::Service, ::opi_api::storage::v1::VirtioBlkStatsRequest, ::opi_api::storage::v1::VirtioBlkStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FrontendVirtioBlkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::opi_api::storage::v1::VirtioBlkStatsRequest* req,
             ::opi_api::storage::v1::VirtioBlkStatsResponse* resp) {
               return service->VirtioBlkStats(ctx, req, resp);
             }, this)));
}

FrontendVirtioBlkService::Service::~Service() {
}

::grpc::Status FrontendVirtioBlkService::Service::CreateVirtioBlk(::grpc::ServerContext* context, const ::opi_api::storage::v1::CreateVirtioBlkRequest* request, ::opi_api::storage::v1::VirtioBlk* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendVirtioBlkService::Service::DeleteVirtioBlk(::grpc::ServerContext* context, const ::opi_api::storage::v1::DeleteVirtioBlkRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendVirtioBlkService::Service::UpdateVirtioBlk(::grpc::ServerContext* context, const ::opi_api::storage::v1::UpdateVirtioBlkRequest* request, ::opi_api::storage::v1::VirtioBlk* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendVirtioBlkService::Service::ListVirtioBlks(::grpc::ServerContext* context, const ::opi_api::storage::v1::ListVirtioBlksRequest* request, ::opi_api::storage::v1::ListVirtioBlksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendVirtioBlkService::Service::GetVirtioBlk(::grpc::ServerContext* context, const ::opi_api::storage::v1::GetVirtioBlkRequest* request, ::opi_api::storage::v1::VirtioBlk* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FrontendVirtioBlkService::Service::VirtioBlkStats(::grpc::ServerContext* context, const ::opi_api::storage::v1::VirtioBlkStatsRequest* request, ::opi_api::storage::v1::VirtioBlkStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace opi_api
}  // namespace storage
}  // namespace v1

