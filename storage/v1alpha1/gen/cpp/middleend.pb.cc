// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: middleend.proto

#include "middleend.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opi_api {
namespace storage {
namespace v1 {
constexpr EncryptedVolume::EncryptedVolume(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encrypted_volume_id_(nullptr)
  , volume_id_(nullptr)
  , cipher_(0)
{}
struct EncryptedVolumeDefaultTypeInternal {
  constexpr EncryptedVolumeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncryptedVolumeDefaultTypeInternal() {}
  union {
    EncryptedVolume _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncryptedVolumeDefaultTypeInternal _EncryptedVolume_default_instance_;
constexpr CreateEncryptedVolumeRequest::CreateEncryptedVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encrypted_volume_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encrypted_volume_(nullptr){}
struct CreateEncryptedVolumeRequestDefaultTypeInternal {
  constexpr CreateEncryptedVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateEncryptedVolumeRequestDefaultTypeInternal() {}
  union {
    CreateEncryptedVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateEncryptedVolumeRequestDefaultTypeInternal _CreateEncryptedVolumeRequest_default_instance_;
constexpr DeleteEncryptedVolumeRequest::DeleteEncryptedVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , allow_missing_(false){}
struct DeleteEncryptedVolumeRequestDefaultTypeInternal {
  constexpr DeleteEncryptedVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteEncryptedVolumeRequestDefaultTypeInternal() {}
  union {
    DeleteEncryptedVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteEncryptedVolumeRequestDefaultTypeInternal _DeleteEncryptedVolumeRequest_default_instance_;
constexpr UpdateEncryptedVolumeRequest::UpdateEncryptedVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encrypted_volume_(nullptr)
  , update_mask_(nullptr){}
struct UpdateEncryptedVolumeRequestDefaultTypeInternal {
  constexpr UpdateEncryptedVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateEncryptedVolumeRequestDefaultTypeInternal() {}
  union {
    UpdateEncryptedVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateEncryptedVolumeRequestDefaultTypeInternal _UpdateEncryptedVolumeRequest_default_instance_;
constexpr ListEncryptedVolumesRequest::ListEncryptedVolumesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_size_(0){}
struct ListEncryptedVolumesRequestDefaultTypeInternal {
  constexpr ListEncryptedVolumesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListEncryptedVolumesRequestDefaultTypeInternal() {}
  union {
    ListEncryptedVolumesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListEncryptedVolumesRequestDefaultTypeInternal _ListEncryptedVolumesRequest_default_instance_;
constexpr ListEncryptedVolumesResponse::ListEncryptedVolumesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encrypted_volumes_()
  , next_page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListEncryptedVolumesResponseDefaultTypeInternal {
  constexpr ListEncryptedVolumesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListEncryptedVolumesResponseDefaultTypeInternal() {}
  union {
    ListEncryptedVolumesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListEncryptedVolumesResponseDefaultTypeInternal _ListEncryptedVolumesResponse_default_instance_;
constexpr GetEncryptedVolumeRequest::GetEncryptedVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetEncryptedVolumeRequestDefaultTypeInternal {
  constexpr GetEncryptedVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetEncryptedVolumeRequestDefaultTypeInternal() {}
  union {
    GetEncryptedVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetEncryptedVolumeRequestDefaultTypeInternal _GetEncryptedVolumeRequest_default_instance_;
constexpr EncryptedVolumeStatsRequest::EncryptedVolumeStatsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encrypted_volume_id_(nullptr){}
struct EncryptedVolumeStatsRequestDefaultTypeInternal {
  constexpr EncryptedVolumeStatsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncryptedVolumeStatsRequestDefaultTypeInternal() {}
  union {
    EncryptedVolumeStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncryptedVolumeStatsRequestDefaultTypeInternal _EncryptedVolumeStatsRequest_default_instance_;
constexpr EncryptedVolumeStatsResponse::EncryptedVolumeStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encrypted_volume_id_(nullptr)
  , stats_(nullptr){}
struct EncryptedVolumeStatsResponseDefaultTypeInternal {
  constexpr EncryptedVolumeStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncryptedVolumeStatsResponseDefaultTypeInternal() {}
  union {
    EncryptedVolumeStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncryptedVolumeStatsResponseDefaultTypeInternal _EncryptedVolumeStatsResponse_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_middleend_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_middleend_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_middleend_2eproto = nullptr;

const uint32_t TableStruct_middleend_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::EncryptedVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::EncryptedVolume, encrypted_volume_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::EncryptedVolume, volume_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::EncryptedVolume, key_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::EncryptedVolume, cipher_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::CreateEncryptedVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::CreateEncryptedVolumeRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::CreateEncryptedVolumeRequest, encrypted_volume_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::CreateEncryptedVolumeRequest, encrypted_volume_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::DeleteEncryptedVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::DeleteEncryptedVolumeRequest, name_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::DeleteEncryptedVolumeRequest, allow_missing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::UpdateEncryptedVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::UpdateEncryptedVolumeRequest, encrypted_volume_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::UpdateEncryptedVolumeRequest, update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListEncryptedVolumesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListEncryptedVolumesRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListEncryptedVolumesRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListEncryptedVolumesRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListEncryptedVolumesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListEncryptedVolumesResponse, encrypted_volumes_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::ListEncryptedVolumesResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::GetEncryptedVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::GetEncryptedVolumeRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::EncryptedVolumeStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::EncryptedVolumeStatsRequest, encrypted_volume_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::EncryptedVolumeStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::EncryptedVolumeStatsResponse, encrypted_volume_id_),
  PROTOBUF_FIELD_OFFSET(::opi_api::storage::v1::EncryptedVolumeStatsResponse, stats_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opi_api::storage::v1::EncryptedVolume)},
  { 10, -1, -1, sizeof(::opi_api::storage::v1::CreateEncryptedVolumeRequest)},
  { 19, -1, -1, sizeof(::opi_api::storage::v1::DeleteEncryptedVolumeRequest)},
  { 27, -1, -1, sizeof(::opi_api::storage::v1::UpdateEncryptedVolumeRequest)},
  { 35, -1, -1, sizeof(::opi_api::storage::v1::ListEncryptedVolumesRequest)},
  { 44, -1, -1, sizeof(::opi_api::storage::v1::ListEncryptedVolumesResponse)},
  { 52, -1, -1, sizeof(::opi_api::storage::v1::GetEncryptedVolumeRequest)},
  { 59, -1, -1, sizeof(::opi_api::storage::v1::EncryptedVolumeStatsRequest)},
  { 66, -1, -1, sizeof(::opi_api::storage::v1::EncryptedVolumeStatsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_EncryptedVolume_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_CreateEncryptedVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_DeleteEncryptedVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_UpdateEncryptedVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_ListEncryptedVolumesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_ListEncryptedVolumesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_GetEncryptedVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_EncryptedVolumeStatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opi_api::storage::v1::_EncryptedVolumeStatsResponse_default_instance_),
};

const char descriptor_table_protodef_middleend_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017middleend.proto\022\022opi_api.storage.v1\032\017o"
  "picommon.proto\032\020object_key.proto\032\027google"
  "/api/client.proto\032\031google/api/resource.p"
  "roto\032\033google/protobuf/empty.proto\032\034googl"
  "e/api/annotations.proto\032\037google/api/fiel"
  "d_behavior.proto\032 google/protobuf/field_"
  "mask.proto\"\276\001\n\017EncryptedVolume\0229\n\023encryp"
  "ted_volume_id\030\001 \001(\0132\034.opi_api.common.v1."
  "ObjectKey\022/\n\tvolume_id\030\002 \001(\0132\034.opi_api.c"
  "ommon.v1.ObjectKey\022\013\n\003key\030\003 \001(\014\0222\n\006ciphe"
  "r\030\004 \001(\0162\".opi_api.storage.v1.EncryptionT"
  "ype\"\273\001\n\034CreateEncryptedVolumeRequest\022:\n\006"
  "parent\030\001 \001(\tB*\340A\002\372A$\n\"opi_api.storage.v1"
  "/EncryptedVolume\022B\n\020encrypted_volume\030\002 \001"
  "(\0132#.opi_api.storage.v1.EncryptedVolumeB"
  "\003\340A\002\022\033\n\023encrypted_volume_id\030\003 \001(\t\"o\n\034Del"
  "eteEncryptedVolumeRequest\0228\n\004name\030\001 \001(\tB"
  "*\340A\002\372A$\n\"opi_api.storage.v1/EncryptedVol"
  "ume\022\025\n\rallow_missing\030\002 \001(\010\"\216\001\n\034UpdateEnc"
  "ryptedVolumeRequest\022=\n\020encrypted_volume\030"
  "\001 \001(\0132#.opi_api.storage.v1.EncryptedVolu"
  "me\022/\n\013update_mask\030\002 \001(\0132\032.google.protobu"
  "f.FieldMask\"\200\001\n\033ListEncryptedVolumesRequ"
  "est\022:\n\006parent\030\001 \001(\tB*\340A\002\372A$\n\"opi_api.sto"
  "rage.v1/EncryptedVolume\022\021\n\tpage_size\030\002 \001"
  "(\005\022\022\n\npage_token\030\003 \001(\t\"w\n\034ListEncryptedV"
  "olumesResponse\022>\n\021encrypted_volumes\030\001 \003("
  "\0132#.opi_api.storage.v1.EncryptedVolume\022\027"
  "\n\017next_page_token\030\002 \001(\t\"U\n\031GetEncryptedV"
  "olumeRequest\0228\n\004name\030\001 \001(\tB*\340A\002\372A$\n\"opi_"
  "api.storage.v1/EncryptedVolume\"X\n\033Encryp"
  "tedVolumeStatsRequest\0229\n\023encrypted_volum"
  "e_id\030\001 \001(\0132\034.opi_api.common.v1.ObjectKey"
  "\"\211\001\n\034EncryptedVolumeStatsResponse\0229\n\023enc"
  "rypted_volume_id\030\001 \001(\0132\034.opi_api.common."
  "v1.ObjectKey\022.\n\005stats\030\002 \001(\0132\037.opi_api.st"
  "orage.v1.VolumeStats2\200\010\n\020MiddleendServic"
  "e\022\317\001\n\025CreateEncryptedVolume\0220.opi_api.st"
  "orage.v1.CreateEncryptedVolumeRequest\032#."
  "opi_api.storage.v1.EncryptedVolume\"_\202\323\344\223"
  "\002+\"\027/v1/{parent=subsystems}:\020encrypted_v"
  "olume\332A+parent,encrypted_volume,encrypte"
  "d_volume_id\022\215\001\n\025DeleteEncryptedVolume\0220."
  "opi_api.storage.v1.DeleteEncryptedVolume"
  "Request\032\026.google.protobuf.Empty\"*\202\323\344\223\002\035*"
  "\033/v1/{name=volumes}/{volume}\332A\004name\022\317\001\n\025"
  "UpdateEncryptedVolume\0220.opi_api.storage."
  "v1.UpdateEncryptedVolumeRequest\032#.opi_ap"
  "i.storage.v1.EncryptedVolume\"_\202\323\344\223\002:2&/v"
  "1/{encrypted_volume.name=subsystems}:\020en"
  "crypted_volume\332A\034encrypted_volume,update"
  "_mask\022\240\001\n\024ListEncryptedVolumes\022/.opi_api"
  ".storage.v1.ListEncryptedVolumesRequest\032"
  "0.opi_api.storage.v1.ListEncryptedVolume"
  "sResponse\"%\202\323\344\223\002\026\022\024/v1/{parent=volumes}\332"
  "A\006parent\022\227\001\n\022GetEncryptedVolume\022-.opi_ap"
  "i.storage.v1.GetEncryptedVolumeRequest\032#"
  ".opi_api.storage.v1.EncryptedVolume\"-\202\323\344"
  "\223\002 \022\036/v1/{name=subsystems}/{volume}\332A\004na"
  "me\022{\n\024EncryptedVolumeStats\022/.opi_api.sto"
  "rage.v1.EncryptedVolumeStatsRequest\0320.op"
  "i_api.storage.v1.EncryptedVolumeStatsRes"
  "ponse\"\000B]\n\022opi_api.storage.v1B\016Middleend"
  "ProtoP\001Z5github.com/opiproject/opi-api/s"
  "torage/v1alpha1/gen/gob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_middleend_2eproto_deps[8] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
  &::descriptor_table_object_5fkey_2eproto,
  &::descriptor_table_opicommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_middleend_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_middleend_2eproto = {
  false, false, 2590, descriptor_table_protodef_middleend_2eproto, "middleend.proto", 
  &descriptor_table_middleend_2eproto_once, descriptor_table_middleend_2eproto_deps, 8, 9,
  schemas, file_default_instances, TableStruct_middleend_2eproto::offsets,
  file_level_metadata_middleend_2eproto, file_level_enum_descriptors_middleend_2eproto, file_level_service_descriptors_middleend_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_middleend_2eproto_getter() {
  return &descriptor_table_middleend_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_middleend_2eproto(&descriptor_table_middleend_2eproto);
namespace opi_api {
namespace storage {
namespace v1 {

// ===================================================================

class EncryptedVolume::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& encrypted_volume_id(const EncryptedVolume* msg);
  static const ::opi_api::common::v1::ObjectKey& volume_id(const EncryptedVolume* msg);
};

const ::opi_api::common::v1::ObjectKey&
EncryptedVolume::_Internal::encrypted_volume_id(const EncryptedVolume* msg) {
  return *msg->encrypted_volume_id_;
}
const ::opi_api::common::v1::ObjectKey&
EncryptedVolume::_Internal::volume_id(const EncryptedVolume* msg) {
  return *msg->volume_id_;
}
void EncryptedVolume::clear_encrypted_volume_id() {
  if (GetArenaForAllocation() == nullptr && encrypted_volume_id_ != nullptr) {
    delete encrypted_volume_id_;
  }
  encrypted_volume_id_ = nullptr;
}
void EncryptedVolume::clear_volume_id() {
  if (GetArenaForAllocation() == nullptr && volume_id_ != nullptr) {
    delete volume_id_;
  }
  volume_id_ = nullptr;
}
EncryptedVolume::EncryptedVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.EncryptedVolume)
}
EncryptedVolume::EncryptedVolume(const EncryptedVolume& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_encrypted_volume_id()) {
    encrypted_volume_id_ = new ::opi_api::common::v1::ObjectKey(*from.encrypted_volume_id_);
  } else {
    encrypted_volume_id_ = nullptr;
  }
  if (from._internal_has_volume_id()) {
    volume_id_ = new ::opi_api::common::v1::ObjectKey(*from.volume_id_);
  } else {
    volume_id_ = nullptr;
  }
  cipher_ = from.cipher_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.EncryptedVolume)
}

inline void EncryptedVolume::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encrypted_volume_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cipher_) -
    reinterpret_cast<char*>(&encrypted_volume_id_)) + sizeof(cipher_));
}

EncryptedVolume::~EncryptedVolume() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.EncryptedVolume)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EncryptedVolume::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encrypted_volume_id_;
  if (this != internal_default_instance()) delete volume_id_;
}

void EncryptedVolume::ArenaDtor(void* object) {
  EncryptedVolume* _this = reinterpret_cast< EncryptedVolume* >(object);
  (void)_this;
}
void EncryptedVolume::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncryptedVolume::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EncryptedVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.EncryptedVolume)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && encrypted_volume_id_ != nullptr) {
    delete encrypted_volume_id_;
  }
  encrypted_volume_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && volume_id_ != nullptr) {
    delete volume_id_;
  }
  volume_id_ = nullptr;
  cipher_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncryptedVolume::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_encrypted_volume_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.common.v1.ObjectKey volume_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.storage.v1.EncryptionType cipher = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cipher(static_cast<::opi_api::storage::v1::EncryptionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptedVolume::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.EncryptedVolume)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
  if (this->_internal_has_encrypted_volume_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::encrypted_volume_id(this), target, stream);
  }

  // .opi_api.common.v1.ObjectKey volume_id = 2;
  if (this->_internal_has_volume_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::volume_id(this), target, stream);
  }

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_key(), target);
  }

  // .opi_api.storage.v1.EncryptionType cipher = 4;
  if (this->_internal_cipher() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_cipher(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.EncryptedVolume)
  return target;
}

size_t EncryptedVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.EncryptedVolume)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
  if (this->_internal_has_encrypted_volume_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encrypted_volume_id_);
  }

  // .opi_api.common.v1.ObjectKey volume_id = 2;
  if (this->_internal_has_volume_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_id_);
  }

  // .opi_api.storage.v1.EncryptionType cipher = 4;
  if (this->_internal_cipher() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cipher());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncryptedVolume::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EncryptedVolume::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncryptedVolume::GetClassData() const { return &_class_data_; }

void EncryptedVolume::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EncryptedVolume *>(to)->MergeFrom(
      static_cast<const EncryptedVolume &>(from));
}


void EncryptedVolume::MergeFrom(const EncryptedVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.EncryptedVolume)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_has_encrypted_volume_id()) {
    _internal_mutable_encrypted_volume_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_encrypted_volume_id());
  }
  if (from._internal_has_volume_id()) {
    _internal_mutable_volume_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_volume_id());
  }
  if (from._internal_cipher() != 0) {
    _internal_set_cipher(from._internal_cipher());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncryptedVolume::CopyFrom(const EncryptedVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.EncryptedVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedVolume::IsInitialized() const {
  return true;
}

void EncryptedVolume::InternalSwap(EncryptedVolume* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncryptedVolume, cipher_)
      + sizeof(EncryptedVolume::cipher_)
      - PROTOBUF_FIELD_OFFSET(EncryptedVolume, encrypted_volume_id_)>(
          reinterpret_cast<char*>(&encrypted_volume_id_),
          reinterpret_cast<char*>(&other->encrypted_volume_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptedVolume::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_middleend_2eproto_getter, &descriptor_table_middleend_2eproto_once,
      file_level_metadata_middleend_2eproto[0]);
}

// ===================================================================

class CreateEncryptedVolumeRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::EncryptedVolume& encrypted_volume(const CreateEncryptedVolumeRequest* msg);
};

const ::opi_api::storage::v1::EncryptedVolume&
CreateEncryptedVolumeRequest::_Internal::encrypted_volume(const CreateEncryptedVolumeRequest* msg) {
  return *msg->encrypted_volume_;
}
CreateEncryptedVolumeRequest::CreateEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.CreateEncryptedVolumeRequest)
}
CreateEncryptedVolumeRequest::CreateEncryptedVolumeRequest(const CreateEncryptedVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent().empty()) {
    parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent(), 
      GetArenaForAllocation());
  }
  encrypted_volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encrypted_volume_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encrypted_volume_id().empty()) {
    encrypted_volume_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encrypted_volume_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_encrypted_volume()) {
    encrypted_volume_ = new ::opi_api::storage::v1::EncryptedVolume(*from.encrypted_volume_);
  } else {
    encrypted_volume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.CreateEncryptedVolumeRequest)
}

inline void CreateEncryptedVolumeRequest::SharedCtor() {
parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
encrypted_volume_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encrypted_volume_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
encrypted_volume_ = nullptr;
}

CreateEncryptedVolumeRequest::~CreateEncryptedVolumeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.CreateEncryptedVolumeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateEncryptedVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_volume_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encrypted_volume_;
}

void CreateEncryptedVolumeRequest::ArenaDtor(void* object) {
  CreateEncryptedVolumeRequest* _this = reinterpret_cast< CreateEncryptedVolumeRequest* >(object);
  (void)_this;
}
void CreateEncryptedVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEncryptedVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateEncryptedVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.CreateEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty();
  encrypted_volume_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && encrypted_volume_ != nullptr) {
    delete encrypted_volume_;
  }
  encrypted_volume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEncryptedVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.CreateEncryptedVolumeRequest.parent"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.storage.v1.EncryptedVolume encrypted_volume = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_encrypted_volume(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string encrypted_volume_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_encrypted_volume_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.CreateEncryptedVolumeRequest.encrypted_volume_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateEncryptedVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.CreateEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.CreateEncryptedVolumeRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // .opi_api.storage.v1.EncryptedVolume encrypted_volume = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_encrypted_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::encrypted_volume(this), target, stream);
  }

  // string encrypted_volume_id = 3;
  if (!this->_internal_encrypted_volume_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encrypted_volume_id().data(), static_cast<int>(this->_internal_encrypted_volume_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.CreateEncryptedVolumeRequest.encrypted_volume_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encrypted_volume_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.CreateEncryptedVolumeRequest)
  return target;
}

size_t CreateEncryptedVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.CreateEncryptedVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // string encrypted_volume_id = 3;
  if (!this->_internal_encrypted_volume_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encrypted_volume_id());
  }

  // .opi_api.storage.v1.EncryptedVolume encrypted_volume = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->_internal_has_encrypted_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encrypted_volume_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateEncryptedVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateEncryptedVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateEncryptedVolumeRequest::GetClassData() const { return &_class_data_; }

void CreateEncryptedVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateEncryptedVolumeRequest *>(to)->MergeFrom(
      static_cast<const CreateEncryptedVolumeRequest &>(from));
}


void CreateEncryptedVolumeRequest::MergeFrom(const CreateEncryptedVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.CreateEncryptedVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent().empty()) {
    _internal_set_parent(from._internal_parent());
  }
  if (!from._internal_encrypted_volume_id().empty()) {
    _internal_set_encrypted_volume_id(from._internal_encrypted_volume_id());
  }
  if (from._internal_has_encrypted_volume()) {
    _internal_mutable_encrypted_volume()->::opi_api::storage::v1::EncryptedVolume::MergeFrom(from._internal_encrypted_volume());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateEncryptedVolumeRequest::CopyFrom(const CreateEncryptedVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.CreateEncryptedVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEncryptedVolumeRequest::IsInitialized() const {
  return true;
}

void CreateEncryptedVolumeRequest::InternalSwap(CreateEncryptedVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parent_, lhs_arena,
      &other->parent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encrypted_volume_id_, lhs_arena,
      &other->encrypted_volume_id_, rhs_arena
  );
  swap(encrypted_volume_, other->encrypted_volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEncryptedVolumeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_middleend_2eproto_getter, &descriptor_table_middleend_2eproto_once,
      file_level_metadata_middleend_2eproto[1]);
}

// ===================================================================

class DeleteEncryptedVolumeRequest::_Internal {
 public:
};

DeleteEncryptedVolumeRequest::DeleteEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
}
DeleteEncryptedVolumeRequest::DeleteEncryptedVolumeRequest(const DeleteEncryptedVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  allow_missing_ = from.allow_missing_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
}

inline void DeleteEncryptedVolumeRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
allow_missing_ = false;
}

DeleteEncryptedVolumeRequest::~DeleteEncryptedVolumeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteEncryptedVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteEncryptedVolumeRequest::ArenaDtor(void* object) {
  DeleteEncryptedVolumeRequest* _this = reinterpret_cast< DeleteEncryptedVolumeRequest* >(object);
  (void)_this;
}
void DeleteEncryptedVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteEncryptedVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteEncryptedVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  allow_missing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteEncryptedVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.DeleteEncryptedVolumeRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_missing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          allow_missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteEncryptedVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.DeleteEncryptedVolumeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool allow_missing = 2;
  if (this->_internal_allow_missing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_allow_missing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
  return target;
}

size_t DeleteEncryptedVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool allow_missing = 2;
  if (this->_internal_allow_missing() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteEncryptedVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteEncryptedVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteEncryptedVolumeRequest::GetClassData() const { return &_class_data_; }

void DeleteEncryptedVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteEncryptedVolumeRequest *>(to)->MergeFrom(
      static_cast<const DeleteEncryptedVolumeRequest &>(from));
}


void DeleteEncryptedVolumeRequest::MergeFrom(const DeleteEncryptedVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_allow_missing() != 0) {
    _internal_set_allow_missing(from._internal_allow_missing());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteEncryptedVolumeRequest::CopyFrom(const DeleteEncryptedVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.DeleteEncryptedVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteEncryptedVolumeRequest::IsInitialized() const {
  return true;
}

void DeleteEncryptedVolumeRequest::InternalSwap(DeleteEncryptedVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(allow_missing_, other->allow_missing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteEncryptedVolumeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_middleend_2eproto_getter, &descriptor_table_middleend_2eproto_once,
      file_level_metadata_middleend_2eproto[2]);
}

// ===================================================================

class UpdateEncryptedVolumeRequest::_Internal {
 public:
  static const ::opi_api::storage::v1::EncryptedVolume& encrypted_volume(const UpdateEncryptedVolumeRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateEncryptedVolumeRequest* msg);
};

const ::opi_api::storage::v1::EncryptedVolume&
UpdateEncryptedVolumeRequest::_Internal::encrypted_volume(const UpdateEncryptedVolumeRequest* msg) {
  return *msg->encrypted_volume_;
}
const ::PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateEncryptedVolumeRequest::_Internal::update_mask(const UpdateEncryptedVolumeRequest* msg) {
  return *msg->update_mask_;
}
void UpdateEncryptedVolumeRequest::clear_update_mask() {
  if (GetArenaForAllocation() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
UpdateEncryptedVolumeRequest::UpdateEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
}
UpdateEncryptedVolumeRequest::UpdateEncryptedVolumeRequest(const UpdateEncryptedVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_encrypted_volume()) {
    encrypted_volume_ = new ::opi_api::storage::v1::EncryptedVolume(*from.encrypted_volume_);
  } else {
    encrypted_volume_ = nullptr;
  }
  if (from._internal_has_update_mask()) {
    update_mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
}

inline void UpdateEncryptedVolumeRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encrypted_volume_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_mask_) -
    reinterpret_cast<char*>(&encrypted_volume_)) + sizeof(update_mask_));
}

UpdateEncryptedVolumeRequest::~UpdateEncryptedVolumeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateEncryptedVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete encrypted_volume_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateEncryptedVolumeRequest::ArenaDtor(void* object) {
  UpdateEncryptedVolumeRequest* _this = reinterpret_cast< UpdateEncryptedVolumeRequest* >(object);
  (void)_this;
}
void UpdateEncryptedVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateEncryptedVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateEncryptedVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && encrypted_volume_ != nullptr) {
    delete encrypted_volume_;
  }
  encrypted_volume_ = nullptr;
  if (GetArenaForAllocation() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateEncryptedVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.storage.v1.EncryptedVolume encrypted_volume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_encrypted_volume(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateEncryptedVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.storage.v1.EncryptedVolume encrypted_volume = 1;
  if (this->_internal_has_encrypted_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::encrypted_volume(this), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::update_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
  return target;
}

size_t UpdateEncryptedVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.storage.v1.EncryptedVolume encrypted_volume = 1;
  if (this->_internal_has_encrypted_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encrypted_volume_);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateEncryptedVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateEncryptedVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateEncryptedVolumeRequest::GetClassData() const { return &_class_data_; }

void UpdateEncryptedVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateEncryptedVolumeRequest *>(to)->MergeFrom(
      static_cast<const UpdateEncryptedVolumeRequest &>(from));
}


void UpdateEncryptedVolumeRequest::MergeFrom(const UpdateEncryptedVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_encrypted_volume()) {
    _internal_mutable_encrypted_volume()->::opi_api::storage::v1::EncryptedVolume::MergeFrom(from._internal_encrypted_volume());
  }
  if (from._internal_has_update_mask()) {
    _internal_mutable_update_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_update_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateEncryptedVolumeRequest::CopyFrom(const UpdateEncryptedVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.UpdateEncryptedVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateEncryptedVolumeRequest::IsInitialized() const {
  return true;
}

void UpdateEncryptedVolumeRequest::InternalSwap(UpdateEncryptedVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateEncryptedVolumeRequest, update_mask_)
      + sizeof(UpdateEncryptedVolumeRequest::update_mask_)
      - PROTOBUF_FIELD_OFFSET(UpdateEncryptedVolumeRequest, encrypted_volume_)>(
          reinterpret_cast<char*>(&encrypted_volume_),
          reinterpret_cast<char*>(&other->encrypted_volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateEncryptedVolumeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_middleend_2eproto_getter, &descriptor_table_middleend_2eproto_once,
      file_level_metadata_middleend_2eproto[3]);
}

// ===================================================================

class ListEncryptedVolumesRequest::_Internal {
 public:
};

ListEncryptedVolumesRequest::ListEncryptedVolumesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.ListEncryptedVolumesRequest)
}
ListEncryptedVolumesRequest::ListEncryptedVolumesRequest(const ListEncryptedVolumesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent().empty()) {
    parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent(), 
      GetArenaForAllocation());
  }
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_token(), 
      GetArenaForAllocation());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.ListEncryptedVolumesRequest)
}

inline void ListEncryptedVolumesRequest::SharedCtor() {
parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_size_ = 0;
}

ListEncryptedVolumesRequest::~ListEncryptedVolumesRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.ListEncryptedVolumesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListEncryptedVolumesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListEncryptedVolumesRequest::ArenaDtor(void* object) {
  ListEncryptedVolumesRequest* _this = reinterpret_cast< ListEncryptedVolumesRequest* >(object);
  (void)_this;
}
void ListEncryptedVolumesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListEncryptedVolumesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListEncryptedVolumesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.ListEncryptedVolumesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty();
  page_token_.ClearToEmpty();
  page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListEncryptedVolumesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.ListEncryptedVolumesRequest.parent"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.ListEncryptedVolumesRequest.page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListEncryptedVolumesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.ListEncryptedVolumesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.ListEncryptedVolumesRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // int32 page_size = 2;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_size(), target);
  }

  // string page_token = 3;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.ListEncryptedVolumesRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.ListEncryptedVolumesRequest)
  return target;
}

size_t ListEncryptedVolumesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.ListEncryptedVolumesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_parent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // string page_token = 3;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 2;
  if (this->_internal_page_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListEncryptedVolumesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListEncryptedVolumesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListEncryptedVolumesRequest::GetClassData() const { return &_class_data_; }

void ListEncryptedVolumesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListEncryptedVolumesRequest *>(to)->MergeFrom(
      static_cast<const ListEncryptedVolumesRequest &>(from));
}


void ListEncryptedVolumesRequest::MergeFrom(const ListEncryptedVolumesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.ListEncryptedVolumesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent().empty()) {
    _internal_set_parent(from._internal_parent());
  }
  if (!from._internal_page_token().empty()) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListEncryptedVolumesRequest::CopyFrom(const ListEncryptedVolumesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.ListEncryptedVolumesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListEncryptedVolumesRequest::IsInitialized() const {
  return true;
}

void ListEncryptedVolumesRequest::InternalSwap(ListEncryptedVolumesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parent_, lhs_arena,
      &other->parent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &page_token_, lhs_arena,
      &other->page_token_, rhs_arena
  );
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListEncryptedVolumesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_middleend_2eproto_getter, &descriptor_table_middleend_2eproto_once,
      file_level_metadata_middleend_2eproto[4]);
}

// ===================================================================

class ListEncryptedVolumesResponse::_Internal {
 public:
};

ListEncryptedVolumesResponse::ListEncryptedVolumesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  encrypted_volumes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.ListEncryptedVolumesResponse)
}
ListEncryptedVolumesResponse::ListEncryptedVolumesResponse(const ListEncryptedVolumesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      encrypted_volumes_(from.encrypted_volumes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.ListEncryptedVolumesResponse)
}

inline void ListEncryptedVolumesResponse::SharedCtor() {
next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListEncryptedVolumesResponse::~ListEncryptedVolumesResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.ListEncryptedVolumesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListEncryptedVolumesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListEncryptedVolumesResponse::ArenaDtor(void* object) {
  ListEncryptedVolumesResponse* _this = reinterpret_cast< ListEncryptedVolumesResponse* >(object);
  (void)_this;
}
void ListEncryptedVolumesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListEncryptedVolumesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListEncryptedVolumesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.ListEncryptedVolumesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encrypted_volumes_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListEncryptedVolumesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opi_api.storage.v1.EncryptedVolume encrypted_volumes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encrypted_volumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.ListEncryptedVolumesResponse.next_page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListEncryptedVolumesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.ListEncryptedVolumesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.EncryptedVolume encrypted_volumes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_encrypted_volumes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_encrypted_volumes(i), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.ListEncryptedVolumesResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.ListEncryptedVolumesResponse)
  return target;
}

size_t ListEncryptedVolumesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.ListEncryptedVolumesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opi_api.storage.v1.EncryptedVolume encrypted_volumes = 1;
  total_size += 1UL * this->_internal_encrypted_volumes_size();
  for (const auto& msg : this->encrypted_volumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListEncryptedVolumesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListEncryptedVolumesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListEncryptedVolumesResponse::GetClassData() const { return &_class_data_; }

void ListEncryptedVolumesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListEncryptedVolumesResponse *>(to)->MergeFrom(
      static_cast<const ListEncryptedVolumesResponse &>(from));
}


void ListEncryptedVolumesResponse::MergeFrom(const ListEncryptedVolumesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.ListEncryptedVolumesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  encrypted_volumes_.MergeFrom(from.encrypted_volumes_);
  if (!from._internal_next_page_token().empty()) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListEncryptedVolumesResponse::CopyFrom(const ListEncryptedVolumesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.ListEncryptedVolumesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListEncryptedVolumesResponse::IsInitialized() const {
  return true;
}

void ListEncryptedVolumesResponse::InternalSwap(ListEncryptedVolumesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  encrypted_volumes_.InternalSwap(&other->encrypted_volumes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListEncryptedVolumesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_middleend_2eproto_getter, &descriptor_table_middleend_2eproto_once,
      file_level_metadata_middleend_2eproto[5]);
}

// ===================================================================

class GetEncryptedVolumeRequest::_Internal {
 public:
};

GetEncryptedVolumeRequest::GetEncryptedVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.GetEncryptedVolumeRequest)
}
GetEncryptedVolumeRequest::GetEncryptedVolumeRequest(const GetEncryptedVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.GetEncryptedVolumeRequest)
}

inline void GetEncryptedVolumeRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetEncryptedVolumeRequest::~GetEncryptedVolumeRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.GetEncryptedVolumeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetEncryptedVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEncryptedVolumeRequest::ArenaDtor(void* object) {
  GetEncryptedVolumeRequest* _this = reinterpret_cast< GetEncryptedVolumeRequest* >(object);
  (void)_this;
}
void GetEncryptedVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEncryptedVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetEncryptedVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.GetEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEncryptedVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opi_api.storage.v1.GetEncryptedVolumeRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetEncryptedVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.GetEncryptedVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opi_api.storage.v1.GetEncryptedVolumeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.GetEncryptedVolumeRequest)
  return target;
}

size_t GetEncryptedVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.GetEncryptedVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEncryptedVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetEncryptedVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEncryptedVolumeRequest::GetClassData() const { return &_class_data_; }

void GetEncryptedVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetEncryptedVolumeRequest *>(to)->MergeFrom(
      static_cast<const GetEncryptedVolumeRequest &>(from));
}


void GetEncryptedVolumeRequest::MergeFrom(const GetEncryptedVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.GetEncryptedVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEncryptedVolumeRequest::CopyFrom(const GetEncryptedVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.GetEncryptedVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEncryptedVolumeRequest::IsInitialized() const {
  return true;
}

void GetEncryptedVolumeRequest::InternalSwap(GetEncryptedVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEncryptedVolumeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_middleend_2eproto_getter, &descriptor_table_middleend_2eproto_once,
      file_level_metadata_middleend_2eproto[6]);
}

// ===================================================================

class EncryptedVolumeStatsRequest::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& encrypted_volume_id(const EncryptedVolumeStatsRequest* msg);
};

const ::opi_api::common::v1::ObjectKey&
EncryptedVolumeStatsRequest::_Internal::encrypted_volume_id(const EncryptedVolumeStatsRequest* msg) {
  return *msg->encrypted_volume_id_;
}
void EncryptedVolumeStatsRequest::clear_encrypted_volume_id() {
  if (GetArenaForAllocation() == nullptr && encrypted_volume_id_ != nullptr) {
    delete encrypted_volume_id_;
  }
  encrypted_volume_id_ = nullptr;
}
EncryptedVolumeStatsRequest::EncryptedVolumeStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.EncryptedVolumeStatsRequest)
}
EncryptedVolumeStatsRequest::EncryptedVolumeStatsRequest(const EncryptedVolumeStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_encrypted_volume_id()) {
    encrypted_volume_id_ = new ::opi_api::common::v1::ObjectKey(*from.encrypted_volume_id_);
  } else {
    encrypted_volume_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.EncryptedVolumeStatsRequest)
}

inline void EncryptedVolumeStatsRequest::SharedCtor() {
encrypted_volume_id_ = nullptr;
}

EncryptedVolumeStatsRequest::~EncryptedVolumeStatsRequest() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.EncryptedVolumeStatsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EncryptedVolumeStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete encrypted_volume_id_;
}

void EncryptedVolumeStatsRequest::ArenaDtor(void* object) {
  EncryptedVolumeStatsRequest* _this = reinterpret_cast< EncryptedVolumeStatsRequest* >(object);
  (void)_this;
}
void EncryptedVolumeStatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncryptedVolumeStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EncryptedVolumeStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.EncryptedVolumeStatsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && encrypted_volume_id_ != nullptr) {
    delete encrypted_volume_id_;
  }
  encrypted_volume_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncryptedVolumeStatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_encrypted_volume_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptedVolumeStatsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.EncryptedVolumeStatsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
  if (this->_internal_has_encrypted_volume_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::encrypted_volume_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.EncryptedVolumeStatsRequest)
  return target;
}

size_t EncryptedVolumeStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.EncryptedVolumeStatsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
  if (this->_internal_has_encrypted_volume_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encrypted_volume_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncryptedVolumeStatsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EncryptedVolumeStatsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncryptedVolumeStatsRequest::GetClassData() const { return &_class_data_; }

void EncryptedVolumeStatsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EncryptedVolumeStatsRequest *>(to)->MergeFrom(
      static_cast<const EncryptedVolumeStatsRequest &>(from));
}


void EncryptedVolumeStatsRequest::MergeFrom(const EncryptedVolumeStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.EncryptedVolumeStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_encrypted_volume_id()) {
    _internal_mutable_encrypted_volume_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_encrypted_volume_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncryptedVolumeStatsRequest::CopyFrom(const EncryptedVolumeStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.EncryptedVolumeStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedVolumeStatsRequest::IsInitialized() const {
  return true;
}

void EncryptedVolumeStatsRequest::InternalSwap(EncryptedVolumeStatsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(encrypted_volume_id_, other->encrypted_volume_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptedVolumeStatsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_middleend_2eproto_getter, &descriptor_table_middleend_2eproto_once,
      file_level_metadata_middleend_2eproto[7]);
}

// ===================================================================

class EncryptedVolumeStatsResponse::_Internal {
 public:
  static const ::opi_api::common::v1::ObjectKey& encrypted_volume_id(const EncryptedVolumeStatsResponse* msg);
  static const ::opi_api::storage::v1::VolumeStats& stats(const EncryptedVolumeStatsResponse* msg);
};

const ::opi_api::common::v1::ObjectKey&
EncryptedVolumeStatsResponse::_Internal::encrypted_volume_id(const EncryptedVolumeStatsResponse* msg) {
  return *msg->encrypted_volume_id_;
}
const ::opi_api::storage::v1::VolumeStats&
EncryptedVolumeStatsResponse::_Internal::stats(const EncryptedVolumeStatsResponse* msg) {
  return *msg->stats_;
}
void EncryptedVolumeStatsResponse::clear_encrypted_volume_id() {
  if (GetArenaForAllocation() == nullptr && encrypted_volume_id_ != nullptr) {
    delete encrypted_volume_id_;
  }
  encrypted_volume_id_ = nullptr;
}
void EncryptedVolumeStatsResponse::clear_stats() {
  if (GetArenaForAllocation() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
}
EncryptedVolumeStatsResponse::EncryptedVolumeStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opi_api.storage.v1.EncryptedVolumeStatsResponse)
}
EncryptedVolumeStatsResponse::EncryptedVolumeStatsResponse(const EncryptedVolumeStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_encrypted_volume_id()) {
    encrypted_volume_id_ = new ::opi_api::common::v1::ObjectKey(*from.encrypted_volume_id_);
  } else {
    encrypted_volume_id_ = nullptr;
  }
  if (from._internal_has_stats()) {
    stats_ = new ::opi_api::storage::v1::VolumeStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opi_api.storage.v1.EncryptedVolumeStatsResponse)
}

inline void EncryptedVolumeStatsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encrypted_volume_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stats_) -
    reinterpret_cast<char*>(&encrypted_volume_id_)) + sizeof(stats_));
}

EncryptedVolumeStatsResponse::~EncryptedVolumeStatsResponse() {
  // @@protoc_insertion_point(destructor:opi_api.storage.v1.EncryptedVolumeStatsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EncryptedVolumeStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete encrypted_volume_id_;
  if (this != internal_default_instance()) delete stats_;
}

void EncryptedVolumeStatsResponse::ArenaDtor(void* object) {
  EncryptedVolumeStatsResponse* _this = reinterpret_cast< EncryptedVolumeStatsResponse* >(object);
  (void)_this;
}
void EncryptedVolumeStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncryptedVolumeStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EncryptedVolumeStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opi_api.storage.v1.EncryptedVolumeStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && encrypted_volume_id_ != nullptr) {
    delete encrypted_volume_id_;
  }
  encrypted_volume_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncryptedVolumeStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_encrypted_volume_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opi_api.storage.v1.VolumeStats stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptedVolumeStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opi_api.storage.v1.EncryptedVolumeStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
  if (this->_internal_has_encrypted_volume_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::encrypted_volume_id(this), target, stream);
  }

  // .opi_api.storage.v1.VolumeStats stats = 2;
  if (this->_internal_has_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opi_api.storage.v1.EncryptedVolumeStatsResponse)
  return target;
}

size_t EncryptedVolumeStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opi_api.storage.v1.EncryptedVolumeStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opi_api.common.v1.ObjectKey encrypted_volume_id = 1;
  if (this->_internal_has_encrypted_volume_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encrypted_volume_id_);
  }

  // .opi_api.storage.v1.VolumeStats stats = 2;
  if (this->_internal_has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncryptedVolumeStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EncryptedVolumeStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncryptedVolumeStatsResponse::GetClassData() const { return &_class_data_; }

void EncryptedVolumeStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EncryptedVolumeStatsResponse *>(to)->MergeFrom(
      static_cast<const EncryptedVolumeStatsResponse &>(from));
}


void EncryptedVolumeStatsResponse::MergeFrom(const EncryptedVolumeStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opi_api.storage.v1.EncryptedVolumeStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_encrypted_volume_id()) {
    _internal_mutable_encrypted_volume_id()->::opi_api::common::v1::ObjectKey::MergeFrom(from._internal_encrypted_volume_id());
  }
  if (from._internal_has_stats()) {
    _internal_mutable_stats()->::opi_api::storage::v1::VolumeStats::MergeFrom(from._internal_stats());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncryptedVolumeStatsResponse::CopyFrom(const EncryptedVolumeStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opi_api.storage.v1.EncryptedVolumeStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedVolumeStatsResponse::IsInitialized() const {
  return true;
}

void EncryptedVolumeStatsResponse::InternalSwap(EncryptedVolumeStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncryptedVolumeStatsResponse, stats_)
      + sizeof(EncryptedVolumeStatsResponse::stats_)
      - PROTOBUF_FIELD_OFFSET(EncryptedVolumeStatsResponse, encrypted_volume_id_)>(
          reinterpret_cast<char*>(&encrypted_volume_id_),
          reinterpret_cast<char*>(&other->encrypted_volume_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptedVolumeStatsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_middleend_2eproto_getter, &descriptor_table_middleend_2eproto_once,
      file_level_metadata_middleend_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::EncryptedVolume* Arena::CreateMaybeMessage< ::opi_api::storage::v1::EncryptedVolume >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::EncryptedVolume >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::CreateEncryptedVolumeRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::CreateEncryptedVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::CreateEncryptedVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::DeleteEncryptedVolumeRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::DeleteEncryptedVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::DeleteEncryptedVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::UpdateEncryptedVolumeRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::UpdateEncryptedVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::UpdateEncryptedVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::ListEncryptedVolumesRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::ListEncryptedVolumesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::ListEncryptedVolumesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::ListEncryptedVolumesResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::ListEncryptedVolumesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::ListEncryptedVolumesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::GetEncryptedVolumeRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::GetEncryptedVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::GetEncryptedVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::EncryptedVolumeStatsRequest* Arena::CreateMaybeMessage< ::opi_api::storage::v1::EncryptedVolumeStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::EncryptedVolumeStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opi_api::storage::v1::EncryptedVolumeStatsResponse* Arena::CreateMaybeMessage< ::opi_api::storage::v1::EncryptedVolumeStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opi_api::storage::v1::EncryptedVolumeStatsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
