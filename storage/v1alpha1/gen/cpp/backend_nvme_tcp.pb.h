// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend_nvme_tcp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_backend_5fnvme_5ftcp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_backend_5fnvme_5ftcp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/client.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include "google/api/annotations.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include "object_key.pb.h"
#include "opicommon.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_backend_5fnvme_5ftcp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_backend_5fnvme_5ftcp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backend_5fnvme_5ftcp_2eproto;
namespace opi_api {
namespace storage {
namespace v1 {
class CreateNVMfRemoteControllerRequest;
struct CreateNVMfRemoteControllerRequestDefaultTypeInternal;
extern CreateNVMfRemoteControllerRequestDefaultTypeInternal _CreateNVMfRemoteControllerRequest_default_instance_;
class DeleteNVMfRemoteControllerRequest;
struct DeleteNVMfRemoteControllerRequestDefaultTypeInternal;
extern DeleteNVMfRemoteControllerRequestDefaultTypeInternal _DeleteNVMfRemoteControllerRequest_default_instance_;
class GetNVMfRemoteControllerRequest;
struct GetNVMfRemoteControllerRequestDefaultTypeInternal;
extern GetNVMfRemoteControllerRequestDefaultTypeInternal _GetNVMfRemoteControllerRequest_default_instance_;
class ListNVMfRemoteControllersRequest;
struct ListNVMfRemoteControllersRequestDefaultTypeInternal;
extern ListNVMfRemoteControllersRequestDefaultTypeInternal _ListNVMfRemoteControllersRequest_default_instance_;
class ListNVMfRemoteControllersResponse;
struct ListNVMfRemoteControllersResponseDefaultTypeInternal;
extern ListNVMfRemoteControllersResponseDefaultTypeInternal _ListNVMfRemoteControllersResponse_default_instance_;
class NVMfRemoteController;
struct NVMfRemoteControllerDefaultTypeInternal;
extern NVMfRemoteControllerDefaultTypeInternal _NVMfRemoteController_default_instance_;
class NVMfRemoteControllerResetRequest;
struct NVMfRemoteControllerResetRequestDefaultTypeInternal;
extern NVMfRemoteControllerResetRequestDefaultTypeInternal _NVMfRemoteControllerResetRequest_default_instance_;
class NVMfRemoteControllerStatsRequest;
struct NVMfRemoteControllerStatsRequestDefaultTypeInternal;
extern NVMfRemoteControllerStatsRequestDefaultTypeInternal _NVMfRemoteControllerStatsRequest_default_instance_;
class NVMfRemoteControllerStatsResponse;
struct NVMfRemoteControllerStatsResponseDefaultTypeInternal;
extern NVMfRemoteControllerStatsResponseDefaultTypeInternal _NVMfRemoteControllerStatsResponse_default_instance_;
class UpdateNVMfRemoteControllerRequest;
struct UpdateNVMfRemoteControllerRequestDefaultTypeInternal;
extern UpdateNVMfRemoteControllerRequestDefaultTypeInternal _UpdateNVMfRemoteControllerRequest_default_instance_;
}  // namespace v1
}  // namespace storage
}  // namespace opi_api
PROTOBUF_NAMESPACE_OPEN
template<> ::opi_api::storage::v1::CreateNVMfRemoteControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::CreateNVMfRemoteControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::DeleteNVMfRemoteControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::DeleteNVMfRemoteControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::GetNVMfRemoteControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::GetNVMfRemoteControllerRequest>(Arena*);
template<> ::opi_api::storage::v1::ListNVMfRemoteControllersRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListNVMfRemoteControllersRequest>(Arena*);
template<> ::opi_api::storage::v1::ListNVMfRemoteControllersResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::ListNVMfRemoteControllersResponse>(Arena*);
template<> ::opi_api::storage::v1::NVMfRemoteController* Arena::CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteController>(Arena*);
template<> ::opi_api::storage::v1::NVMfRemoteControllerResetRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteControllerResetRequest>(Arena*);
template<> ::opi_api::storage::v1::NVMfRemoteControllerStatsRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteControllerStatsRequest>(Arena*);
template<> ::opi_api::storage::v1::NVMfRemoteControllerStatsResponse* Arena::CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteControllerStatsResponse>(Arena*);
template<> ::opi_api::storage::v1::UpdateNVMfRemoteControllerRequest* Arena::CreateMaybeMessage<::opi_api::storage::v1::UpdateNVMfRemoteControllerRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opi_api {
namespace storage {
namespace v1 {

enum NvmeTransportType : int {
  NVME_TRANSPORT_TYPE_UNSPECIFIED = 0,
  NVME_TRANSPORT_FC = 1,
  NVME_TRANSPORT_PCIE = 2,
  NVME_TRANSPORT_RDMA = 3,
  NVME_TRANSPORT_TCP = 4,
  NVME_TRANSPORT_CUSTOM = 5,
  NvmeTransportType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NvmeTransportType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NvmeTransportType_IsValid(int value);
constexpr NvmeTransportType NvmeTransportType_MIN = NVME_TRANSPORT_TYPE_UNSPECIFIED;
constexpr NvmeTransportType NvmeTransportType_MAX = NVME_TRANSPORT_CUSTOM;
constexpr int NvmeTransportType_ARRAYSIZE = NvmeTransportType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvmeTransportType_descriptor();
template<typename T>
inline const std::string& NvmeTransportType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NvmeTransportType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NvmeTransportType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NvmeTransportType_descriptor(), enum_t_value);
}
inline bool NvmeTransportType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NvmeTransportType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NvmeTransportType>(
    NvmeTransportType_descriptor(), name, value);
}
enum NvmeAddressFamily : int {
  NVME_ADDRESS_FAMILY_UNSPECIFIED = 0,
  NVMF_ADRFAM_IPV4 = 1,
  NVMF_ADRFAM_IPV6 = 2,
  NVMF_ADRFAM_IB = 3,
  NVMF_ADRFAM_FC = 4,
  NVMF_ADRFAM_INTRA_HOST = 5,
  NvmeAddressFamily_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NvmeAddressFamily_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NvmeAddressFamily_IsValid(int value);
constexpr NvmeAddressFamily NvmeAddressFamily_MIN = NVME_ADDRESS_FAMILY_UNSPECIFIED;
constexpr NvmeAddressFamily NvmeAddressFamily_MAX = NVMF_ADRFAM_INTRA_HOST;
constexpr int NvmeAddressFamily_ARRAYSIZE = NvmeAddressFamily_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvmeAddressFamily_descriptor();
template<typename T>
inline const std::string& NvmeAddressFamily_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NvmeAddressFamily>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NvmeAddressFamily_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NvmeAddressFamily_descriptor(), enum_t_value);
}
inline bool NvmeAddressFamily_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NvmeAddressFamily* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NvmeAddressFamily>(
    NvmeAddressFamily_descriptor(), name, value);
}
enum NvmeMultipath : int {
  NVME_MULTIPATH_UNSPECIFIED = 0,
  NVME_MULTIPATH_DISABLE = 1,
  NVME_MULTIPATH_FAILOVER = 2,
  NVME_MULTIPATH_MULTIPATH = 3,
  NvmeMultipath_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NvmeMultipath_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NvmeMultipath_IsValid(int value);
constexpr NvmeMultipath NvmeMultipath_MIN = NVME_MULTIPATH_UNSPECIFIED;
constexpr NvmeMultipath NvmeMultipath_MAX = NVME_MULTIPATH_MULTIPATH;
constexpr int NvmeMultipath_ARRAYSIZE = NvmeMultipath_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NvmeMultipath_descriptor();
template<typename T>
inline const std::string& NvmeMultipath_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NvmeMultipath>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NvmeMultipath_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NvmeMultipath_descriptor(), enum_t_value);
}
inline bool NvmeMultipath_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NvmeMultipath* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NvmeMultipath>(
    NvmeMultipath_descriptor(), name, value);
}
// ===================================================================

class NVMfRemoteController final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NVMfRemoteController) */ {
 public:
  inline NVMfRemoteController() : NVMfRemoteController(nullptr) {}
  ~NVMfRemoteController() override;
  explicit constexpr NVMfRemoteController(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NVMfRemoteController(const NVMfRemoteController& from);
  NVMfRemoteController(NVMfRemoteController&& from) noexcept
    : NVMfRemoteController() {
    *this = ::std::move(from);
  }

  inline NVMfRemoteController& operator=(const NVMfRemoteController& from) {
    CopyFrom(from);
    return *this;
  }
  inline NVMfRemoteController& operator=(NVMfRemoteController&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NVMfRemoteController& default_instance() {
    return *internal_default_instance();
  }
  static inline const NVMfRemoteController* internal_default_instance() {
    return reinterpret_cast<const NVMfRemoteController*>(
               &_NVMfRemoteController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NVMfRemoteController& a, NVMfRemoteController& b) {
    a.Swap(&b);
  }
  inline void Swap(NVMfRemoteController* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NVMfRemoteController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NVMfRemoteController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NVMfRemoteController>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NVMfRemoteController& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NVMfRemoteController& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMfRemoteController* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NVMfRemoteController";
  }
  protected:
  explicit NVMfRemoteController(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraddrFieldNumber = 4,
    kSubnqnFieldNumber = 6,
    kHostnqnFieldNumber = 12,
    kIdFieldNumber = 1,
    kTrtypeFieldNumber = 2,
    kAdrfamFieldNumber = 3,
    kTrsvcidFieldNumber = 5,
    kHdgstFieldNumber = 7,
    kDdgstFieldNumber = 8,
    kMultipathFieldNumber = 9,
    kIoQueuesCountFieldNumber = 10,
    kQueueSizeFieldNumber = 11,
  };
  // string traddr = 4;
  void clear_traddr();
  const std::string& traddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_traddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_traddr();
  PROTOBUF_NODISCARD std::string* release_traddr();
  void set_allocated_traddr(std::string* traddr);
  private:
  const std::string& _internal_traddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_traddr(const std::string& value);
  std::string* _internal_mutable_traddr();
  public:

  // string subnqn = 6;
  void clear_subnqn();
  const std::string& subnqn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subnqn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subnqn();
  PROTOBUF_NODISCARD std::string* release_subnqn();
  void set_allocated_subnqn(std::string* subnqn);
  private:
  const std::string& _internal_subnqn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subnqn(const std::string& value);
  std::string* _internal_mutable_subnqn();
  public:

  // string hostnqn = 12;
  void clear_hostnqn();
  const std::string& hostnqn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostnqn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostnqn();
  PROTOBUF_NODISCARD std::string* release_hostnqn();
  void set_allocated_hostnqn(std::string* hostnqn);
  private:
  const std::string& _internal_hostnqn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostnqn(const std::string& value);
  std::string* _internal_mutable_hostnqn();
  public:

  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // .opi_api.storage.v1.NvmeTransportType trtype = 2;
  void clear_trtype();
  ::opi_api::storage::v1::NvmeTransportType trtype() const;
  void set_trtype(::opi_api::storage::v1::NvmeTransportType value);
  private:
  ::opi_api::storage::v1::NvmeTransportType _internal_trtype() const;
  void _internal_set_trtype(::opi_api::storage::v1::NvmeTransportType value);
  public:

  // .opi_api.storage.v1.NvmeAddressFamily adrfam = 3;
  void clear_adrfam();
  ::opi_api::storage::v1::NvmeAddressFamily adrfam() const;
  void set_adrfam(::opi_api::storage::v1::NvmeAddressFamily value);
  private:
  ::opi_api::storage::v1::NvmeAddressFamily _internal_adrfam() const;
  void _internal_set_adrfam(::opi_api::storage::v1::NvmeAddressFamily value);
  public:

  // int64 trsvcid = 5;
  void clear_trsvcid();
  int64_t trsvcid() const;
  void set_trsvcid(int64_t value);
  private:
  int64_t _internal_trsvcid() const;
  void _internal_set_trsvcid(int64_t value);
  public:

  // bool hdgst = 7;
  void clear_hdgst();
  bool hdgst() const;
  void set_hdgst(bool value);
  private:
  bool _internal_hdgst() const;
  void _internal_set_hdgst(bool value);
  public:

  // bool ddgst = 8;
  void clear_ddgst();
  bool ddgst() const;
  void set_ddgst(bool value);
  private:
  bool _internal_ddgst() const;
  void _internal_set_ddgst(bool value);
  public:

  // .opi_api.storage.v1.NvmeMultipath multipath = 9;
  void clear_multipath();
  ::opi_api::storage::v1::NvmeMultipath multipath() const;
  void set_multipath(::opi_api::storage::v1::NvmeMultipath value);
  private:
  ::opi_api::storage::v1::NvmeMultipath _internal_multipath() const;
  void _internal_set_multipath(::opi_api::storage::v1::NvmeMultipath value);
  public:

  // int64 io_queues_count = 10;
  void clear_io_queues_count();
  int64_t io_queues_count() const;
  void set_io_queues_count(int64_t value);
  private:
  int64_t _internal_io_queues_count() const;
  void _internal_set_io_queues_count(int64_t value);
  public:

  // int64 queue_size = 11;
  void clear_queue_size();
  int64_t queue_size() const;
  void set_queue_size(int64_t value);
  private:
  int64_t _internal_queue_size() const;
  void _internal_set_queue_size(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NVMfRemoteController)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr traddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subnqn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostnqn_;
  ::opi_api::common::v1::ObjectKey* id_;
  int trtype_;
  int adrfam_;
  int64_t trsvcid_;
  bool hdgst_;
  bool ddgst_;
  int multipath_;
  int64_t io_queues_count_;
  int64_t queue_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class CreateNVMfRemoteControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.CreateNVMfRemoteControllerRequest) */ {
 public:
  inline CreateNVMfRemoteControllerRequest() : CreateNVMfRemoteControllerRequest(nullptr) {}
  ~CreateNVMfRemoteControllerRequest() override;
  explicit constexpr CreateNVMfRemoteControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNVMfRemoteControllerRequest(const CreateNVMfRemoteControllerRequest& from);
  CreateNVMfRemoteControllerRequest(CreateNVMfRemoteControllerRequest&& from) noexcept
    : CreateNVMfRemoteControllerRequest() {
    *this = ::std::move(from);
  }

  inline CreateNVMfRemoteControllerRequest& operator=(const CreateNVMfRemoteControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNVMfRemoteControllerRequest& operator=(CreateNVMfRemoteControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNVMfRemoteControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNVMfRemoteControllerRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNVMfRemoteControllerRequest*>(
               &_CreateNVMfRemoteControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateNVMfRemoteControllerRequest& a, CreateNVMfRemoteControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNVMfRemoteControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNVMfRemoteControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNVMfRemoteControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNVMfRemoteControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNVMfRemoteControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNVMfRemoteControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNVMfRemoteControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.CreateNVMfRemoteControllerRequest";
  }
  protected:
  explicit CreateNVMfRemoteControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kNvMfRemoteControllerIdFieldNumber = 3,
    kNvMfRemoteControllerFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string nv_mf_remote_controller_id = 3;
  void clear_nv_mf_remote_controller_id();
  const std::string& nv_mf_remote_controller_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nv_mf_remote_controller_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nv_mf_remote_controller_id();
  PROTOBUF_NODISCARD std::string* release_nv_mf_remote_controller_id();
  void set_allocated_nv_mf_remote_controller_id(std::string* nv_mf_remote_controller_id);
  private:
  const std::string& _internal_nv_mf_remote_controller_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nv_mf_remote_controller_id(const std::string& value);
  std::string* _internal_mutable_nv_mf_remote_controller_id();
  public:

  // .opi_api.storage.v1.NVMfRemoteController nv_mf_remote_controller = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_nv_mf_remote_controller() const;
  private:
  bool _internal_has_nv_mf_remote_controller() const;
  public:
  void clear_nv_mf_remote_controller();
  const ::opi_api::storage::v1::NVMfRemoteController& nv_mf_remote_controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NVMfRemoteController* release_nv_mf_remote_controller();
  ::opi_api::storage::v1::NVMfRemoteController* mutable_nv_mf_remote_controller();
  void set_allocated_nv_mf_remote_controller(::opi_api::storage::v1::NVMfRemoteController* nv_mf_remote_controller);
  private:
  const ::opi_api::storage::v1::NVMfRemoteController& _internal_nv_mf_remote_controller() const;
  ::opi_api::storage::v1::NVMfRemoteController* _internal_mutable_nv_mf_remote_controller();
  public:
  void unsafe_arena_set_allocated_nv_mf_remote_controller(
      ::opi_api::storage::v1::NVMfRemoteController* nv_mf_remote_controller);
  ::opi_api::storage::v1::NVMfRemoteController* unsafe_arena_release_nv_mf_remote_controller();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.CreateNVMfRemoteControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nv_mf_remote_controller_id_;
  ::opi_api::storage::v1::NVMfRemoteController* nv_mf_remote_controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class DeleteNVMfRemoteControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.DeleteNVMfRemoteControllerRequest) */ {
 public:
  inline DeleteNVMfRemoteControllerRequest() : DeleteNVMfRemoteControllerRequest(nullptr) {}
  ~DeleteNVMfRemoteControllerRequest() override;
  explicit constexpr DeleteNVMfRemoteControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNVMfRemoteControllerRequest(const DeleteNVMfRemoteControllerRequest& from);
  DeleteNVMfRemoteControllerRequest(DeleteNVMfRemoteControllerRequest&& from) noexcept
    : DeleteNVMfRemoteControllerRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNVMfRemoteControllerRequest& operator=(const DeleteNVMfRemoteControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNVMfRemoteControllerRequest& operator=(DeleteNVMfRemoteControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNVMfRemoteControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNVMfRemoteControllerRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNVMfRemoteControllerRequest*>(
               &_DeleteNVMfRemoteControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteNVMfRemoteControllerRequest& a, DeleteNVMfRemoteControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNVMfRemoteControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNVMfRemoteControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNVMfRemoteControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteNVMfRemoteControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNVMfRemoteControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteNVMfRemoteControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNVMfRemoteControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.DeleteNVMfRemoteControllerRequest";
  }
  protected:
  explicit DeleteNVMfRemoteControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAllowMissingFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool allow_missing = 2;
  void clear_allow_missing();
  bool allow_missing() const;
  void set_allow_missing(bool value);
  private:
  bool _internal_allow_missing() const;
  void _internal_set_allow_missing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.DeleteNVMfRemoteControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool allow_missing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class UpdateNVMfRemoteControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.UpdateNVMfRemoteControllerRequest) */ {
 public:
  inline UpdateNVMfRemoteControllerRequest() : UpdateNVMfRemoteControllerRequest(nullptr) {}
  ~UpdateNVMfRemoteControllerRequest() override;
  explicit constexpr UpdateNVMfRemoteControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNVMfRemoteControllerRequest(const UpdateNVMfRemoteControllerRequest& from);
  UpdateNVMfRemoteControllerRequest(UpdateNVMfRemoteControllerRequest&& from) noexcept
    : UpdateNVMfRemoteControllerRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNVMfRemoteControllerRequest& operator=(const UpdateNVMfRemoteControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNVMfRemoteControllerRequest& operator=(UpdateNVMfRemoteControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNVMfRemoteControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNVMfRemoteControllerRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNVMfRemoteControllerRequest*>(
               &_UpdateNVMfRemoteControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateNVMfRemoteControllerRequest& a, UpdateNVMfRemoteControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNVMfRemoteControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNVMfRemoteControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNVMfRemoteControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNVMfRemoteControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNVMfRemoteControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateNVMfRemoteControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNVMfRemoteControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.UpdateNVMfRemoteControllerRequest";
  }
  protected:
  explicit UpdateNVMfRemoteControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNvMfRemoteControllerFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .opi_api.storage.v1.NVMfRemoteController nv_mf_remote_controller = 1;
  bool has_nv_mf_remote_controller() const;
  private:
  bool _internal_has_nv_mf_remote_controller() const;
  public:
  void clear_nv_mf_remote_controller();
  const ::opi_api::storage::v1::NVMfRemoteController& nv_mf_remote_controller() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::NVMfRemoteController* release_nv_mf_remote_controller();
  ::opi_api::storage::v1::NVMfRemoteController* mutable_nv_mf_remote_controller();
  void set_allocated_nv_mf_remote_controller(::opi_api::storage::v1::NVMfRemoteController* nv_mf_remote_controller);
  private:
  const ::opi_api::storage::v1::NVMfRemoteController& _internal_nv_mf_remote_controller() const;
  ::opi_api::storage::v1::NVMfRemoteController* _internal_mutable_nv_mf_remote_controller();
  public:
  void unsafe_arena_set_allocated_nv_mf_remote_controller(
      ::opi_api::storage::v1::NVMfRemoteController* nv_mf_remote_controller);
  ::opi_api::storage::v1::NVMfRemoteController* unsafe_arena_release_nv_mf_remote_controller();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.UpdateNVMfRemoteControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::NVMfRemoteController* nv_mf_remote_controller_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class ListNVMfRemoteControllersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListNVMfRemoteControllersRequest) */ {
 public:
  inline ListNVMfRemoteControllersRequest() : ListNVMfRemoteControllersRequest(nullptr) {}
  ~ListNVMfRemoteControllersRequest() override;
  explicit constexpr ListNVMfRemoteControllersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNVMfRemoteControllersRequest(const ListNVMfRemoteControllersRequest& from);
  ListNVMfRemoteControllersRequest(ListNVMfRemoteControllersRequest&& from) noexcept
    : ListNVMfRemoteControllersRequest() {
    *this = ::std::move(from);
  }

  inline ListNVMfRemoteControllersRequest& operator=(const ListNVMfRemoteControllersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNVMfRemoteControllersRequest& operator=(ListNVMfRemoteControllersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNVMfRemoteControllersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNVMfRemoteControllersRequest* internal_default_instance() {
    return reinterpret_cast<const ListNVMfRemoteControllersRequest*>(
               &_ListNVMfRemoteControllersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListNVMfRemoteControllersRequest& a, ListNVMfRemoteControllersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNVMfRemoteControllersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNVMfRemoteControllersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNVMfRemoteControllersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNVMfRemoteControllersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNVMfRemoteControllersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNVMfRemoteControllersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNVMfRemoteControllersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListNVMfRemoteControllersRequest";
  }
  protected:
  explicit ListNVMfRemoteControllersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListNVMfRemoteControllersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class ListNVMfRemoteControllersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.ListNVMfRemoteControllersResponse) */ {
 public:
  inline ListNVMfRemoteControllersResponse() : ListNVMfRemoteControllersResponse(nullptr) {}
  ~ListNVMfRemoteControllersResponse() override;
  explicit constexpr ListNVMfRemoteControllersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNVMfRemoteControllersResponse(const ListNVMfRemoteControllersResponse& from);
  ListNVMfRemoteControllersResponse(ListNVMfRemoteControllersResponse&& from) noexcept
    : ListNVMfRemoteControllersResponse() {
    *this = ::std::move(from);
  }

  inline ListNVMfRemoteControllersResponse& operator=(const ListNVMfRemoteControllersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNVMfRemoteControllersResponse& operator=(ListNVMfRemoteControllersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNVMfRemoteControllersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNVMfRemoteControllersResponse* internal_default_instance() {
    return reinterpret_cast<const ListNVMfRemoteControllersResponse*>(
               &_ListNVMfRemoteControllersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListNVMfRemoteControllersResponse& a, ListNVMfRemoteControllersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNVMfRemoteControllersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNVMfRemoteControllersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNVMfRemoteControllersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNVMfRemoteControllersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNVMfRemoteControllersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNVMfRemoteControllersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNVMfRemoteControllersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.ListNVMfRemoteControllersResponse";
  }
  protected:
  explicit ListNVMfRemoteControllersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNvMfRemoteControllersFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .opi_api.storage.v1.NVMfRemoteController nv_mf_remote_controllers = 1;
  int nv_mf_remote_controllers_size() const;
  private:
  int _internal_nv_mf_remote_controllers_size() const;
  public:
  void clear_nv_mf_remote_controllers();
  ::opi_api::storage::v1::NVMfRemoteController* mutable_nv_mf_remote_controllers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NVMfRemoteController >*
      mutable_nv_mf_remote_controllers();
  private:
  const ::opi_api::storage::v1::NVMfRemoteController& _internal_nv_mf_remote_controllers(int index) const;
  ::opi_api::storage::v1::NVMfRemoteController* _internal_add_nv_mf_remote_controllers();
  public:
  const ::opi_api::storage::v1::NVMfRemoteController& nv_mf_remote_controllers(int index) const;
  ::opi_api::storage::v1::NVMfRemoteController* add_nv_mf_remote_controllers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NVMfRemoteController >&
      nv_mf_remote_controllers() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.ListNVMfRemoteControllersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NVMfRemoteController > nv_mf_remote_controllers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class GetNVMfRemoteControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.GetNVMfRemoteControllerRequest) */ {
 public:
  inline GetNVMfRemoteControllerRequest() : GetNVMfRemoteControllerRequest(nullptr) {}
  ~GetNVMfRemoteControllerRequest() override;
  explicit constexpr GetNVMfRemoteControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNVMfRemoteControllerRequest(const GetNVMfRemoteControllerRequest& from);
  GetNVMfRemoteControllerRequest(GetNVMfRemoteControllerRequest&& from) noexcept
    : GetNVMfRemoteControllerRequest() {
    *this = ::std::move(from);
  }

  inline GetNVMfRemoteControllerRequest& operator=(const GetNVMfRemoteControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNVMfRemoteControllerRequest& operator=(GetNVMfRemoteControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNVMfRemoteControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNVMfRemoteControllerRequest* internal_default_instance() {
    return reinterpret_cast<const GetNVMfRemoteControllerRequest*>(
               &_GetNVMfRemoteControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetNVMfRemoteControllerRequest& a, GetNVMfRemoteControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNVMfRemoteControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNVMfRemoteControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNVMfRemoteControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNVMfRemoteControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNVMfRemoteControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNVMfRemoteControllerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNVMfRemoteControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.GetNVMfRemoteControllerRequest";
  }
  protected:
  explicit GetNVMfRemoteControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.GetNVMfRemoteControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class NVMfRemoteControllerResetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NVMfRemoteControllerResetRequest) */ {
 public:
  inline NVMfRemoteControllerResetRequest() : NVMfRemoteControllerResetRequest(nullptr) {}
  ~NVMfRemoteControllerResetRequest() override;
  explicit constexpr NVMfRemoteControllerResetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NVMfRemoteControllerResetRequest(const NVMfRemoteControllerResetRequest& from);
  NVMfRemoteControllerResetRequest(NVMfRemoteControllerResetRequest&& from) noexcept
    : NVMfRemoteControllerResetRequest() {
    *this = ::std::move(from);
  }

  inline NVMfRemoteControllerResetRequest& operator=(const NVMfRemoteControllerResetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NVMfRemoteControllerResetRequest& operator=(NVMfRemoteControllerResetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NVMfRemoteControllerResetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NVMfRemoteControllerResetRequest* internal_default_instance() {
    return reinterpret_cast<const NVMfRemoteControllerResetRequest*>(
               &_NVMfRemoteControllerResetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NVMfRemoteControllerResetRequest& a, NVMfRemoteControllerResetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NVMfRemoteControllerResetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NVMfRemoteControllerResetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NVMfRemoteControllerResetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NVMfRemoteControllerResetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NVMfRemoteControllerResetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NVMfRemoteControllerResetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMfRemoteControllerResetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NVMfRemoteControllerResetRequest";
  }
  protected:
  explicit NVMfRemoteControllerResetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NVMfRemoteControllerResetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class NVMfRemoteControllerStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NVMfRemoteControllerStatsRequest) */ {
 public:
  inline NVMfRemoteControllerStatsRequest() : NVMfRemoteControllerStatsRequest(nullptr) {}
  ~NVMfRemoteControllerStatsRequest() override;
  explicit constexpr NVMfRemoteControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NVMfRemoteControllerStatsRequest(const NVMfRemoteControllerStatsRequest& from);
  NVMfRemoteControllerStatsRequest(NVMfRemoteControllerStatsRequest&& from) noexcept
    : NVMfRemoteControllerStatsRequest() {
    *this = ::std::move(from);
  }

  inline NVMfRemoteControllerStatsRequest& operator=(const NVMfRemoteControllerStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NVMfRemoteControllerStatsRequest& operator=(NVMfRemoteControllerStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NVMfRemoteControllerStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NVMfRemoteControllerStatsRequest* internal_default_instance() {
    return reinterpret_cast<const NVMfRemoteControllerStatsRequest*>(
               &_NVMfRemoteControllerStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NVMfRemoteControllerStatsRequest& a, NVMfRemoteControllerStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NVMfRemoteControllerStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NVMfRemoteControllerStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NVMfRemoteControllerStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NVMfRemoteControllerStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NVMfRemoteControllerStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NVMfRemoteControllerStatsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMfRemoteControllerStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NVMfRemoteControllerStatsRequest";
  }
  protected:
  explicit NVMfRemoteControllerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .opi_api.common.v1.ObjectKey id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::opi_api::common::v1::ObjectKey& id() const;
  PROTOBUF_NODISCARD ::opi_api::common::v1::ObjectKey* release_id();
  ::opi_api::common::v1::ObjectKey* mutable_id();
  void set_allocated_id(::opi_api::common::v1::ObjectKey* id);
  private:
  const ::opi_api::common::v1::ObjectKey& _internal_id() const;
  ::opi_api::common::v1::ObjectKey* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::opi_api::common::v1::ObjectKey* id);
  ::opi_api::common::v1::ObjectKey* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NVMfRemoteControllerStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::common::v1::ObjectKey* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// -------------------------------------------------------------------

class NVMfRemoteControllerStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opi_api.storage.v1.NVMfRemoteControllerStatsResponse) */ {
 public:
  inline NVMfRemoteControllerStatsResponse() : NVMfRemoteControllerStatsResponse(nullptr) {}
  ~NVMfRemoteControllerStatsResponse() override;
  explicit constexpr NVMfRemoteControllerStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NVMfRemoteControllerStatsResponse(const NVMfRemoteControllerStatsResponse& from);
  NVMfRemoteControllerStatsResponse(NVMfRemoteControllerStatsResponse&& from) noexcept
    : NVMfRemoteControllerStatsResponse() {
    *this = ::std::move(from);
  }

  inline NVMfRemoteControllerStatsResponse& operator=(const NVMfRemoteControllerStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NVMfRemoteControllerStatsResponse& operator=(NVMfRemoteControllerStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NVMfRemoteControllerStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NVMfRemoteControllerStatsResponse* internal_default_instance() {
    return reinterpret_cast<const NVMfRemoteControllerStatsResponse*>(
               &_NVMfRemoteControllerStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NVMfRemoteControllerStatsResponse& a, NVMfRemoteControllerStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NVMfRemoteControllerStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NVMfRemoteControllerStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NVMfRemoteControllerStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NVMfRemoteControllerStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NVMfRemoteControllerStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NVMfRemoteControllerStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVMfRemoteControllerStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opi_api.storage.v1.NVMfRemoteControllerStatsResponse";
  }
  protected:
  explicit NVMfRemoteControllerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // .opi_api.storage.v1.VolumeStats stats = 1;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::opi_api::storage::v1::VolumeStats& stats() const;
  PROTOBUF_NODISCARD ::opi_api::storage::v1::VolumeStats* release_stats();
  ::opi_api::storage::v1::VolumeStats* mutable_stats();
  void set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats);
  private:
  const ::opi_api::storage::v1::VolumeStats& _internal_stats() const;
  ::opi_api::storage::v1::VolumeStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::opi_api::storage::v1::VolumeStats* stats);
  ::opi_api::storage::v1::VolumeStats* unsafe_arena_release_stats();

  // @@protoc_insertion_point(class_scope:opi_api.storage.v1.NVMfRemoteControllerStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::opi_api::storage::v1::VolumeStats* stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fnvme_5ftcp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NVMfRemoteController

// .opi_api.common.v1.ObjectKey id = 1;
inline bool NVMfRemoteController::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool NVMfRemoteController::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteController::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteController::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.id)
  return _internal_id();
}
inline void NVMfRemoteController::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NVMfRemoteController.id)
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteController::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteController::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteController.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteController::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteController::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteController.id)
  return _msg;
}
inline void NVMfRemoteController::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteController.id)
}

// .opi_api.storage.v1.NvmeTransportType trtype = 2;
inline void NVMfRemoteController::clear_trtype() {
  trtype_ = 0;
}
inline ::opi_api::storage::v1::NvmeTransportType NVMfRemoteController::_internal_trtype() const {
  return static_cast< ::opi_api::storage::v1::NvmeTransportType >(trtype_);
}
inline ::opi_api::storage::v1::NvmeTransportType NVMfRemoteController::trtype() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.trtype)
  return _internal_trtype();
}
inline void NVMfRemoteController::_internal_set_trtype(::opi_api::storage::v1::NvmeTransportType value) {
  
  trtype_ = value;
}
inline void NVMfRemoteController::set_trtype(::opi_api::storage::v1::NvmeTransportType value) {
  _internal_set_trtype(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.trtype)
}

// .opi_api.storage.v1.NvmeAddressFamily adrfam = 3;
inline void NVMfRemoteController::clear_adrfam() {
  adrfam_ = 0;
}
inline ::opi_api::storage::v1::NvmeAddressFamily NVMfRemoteController::_internal_adrfam() const {
  return static_cast< ::opi_api::storage::v1::NvmeAddressFamily >(adrfam_);
}
inline ::opi_api::storage::v1::NvmeAddressFamily NVMfRemoteController::adrfam() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.adrfam)
  return _internal_adrfam();
}
inline void NVMfRemoteController::_internal_set_adrfam(::opi_api::storage::v1::NvmeAddressFamily value) {
  
  adrfam_ = value;
}
inline void NVMfRemoteController::set_adrfam(::opi_api::storage::v1::NvmeAddressFamily value) {
  _internal_set_adrfam(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.adrfam)
}

// string traddr = 4;
inline void NVMfRemoteController::clear_traddr() {
  traddr_.ClearToEmpty();
}
inline const std::string& NVMfRemoteController::traddr() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.traddr)
  return _internal_traddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NVMfRemoteController::set_traddr(ArgT0&& arg0, ArgT... args) {
 
 traddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.traddr)
}
inline std::string* NVMfRemoteController::mutable_traddr() {
  std::string* _s = _internal_mutable_traddr();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteController.traddr)
  return _s;
}
inline const std::string& NVMfRemoteController::_internal_traddr() const {
  return traddr_.Get();
}
inline void NVMfRemoteController::_internal_set_traddr(const std::string& value) {
  
  traddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NVMfRemoteController::_internal_mutable_traddr() {
  
  return traddr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NVMfRemoteController::release_traddr() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteController.traddr)
  return traddr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NVMfRemoteController::set_allocated_traddr(std::string* traddr) {
  if (traddr != nullptr) {
    
  } else {
    
  }
  traddr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), traddr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (traddr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    traddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteController.traddr)
}

// int64 trsvcid = 5;
inline void NVMfRemoteController::clear_trsvcid() {
  trsvcid_ = int64_t{0};
}
inline int64_t NVMfRemoteController::_internal_trsvcid() const {
  return trsvcid_;
}
inline int64_t NVMfRemoteController::trsvcid() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.trsvcid)
  return _internal_trsvcid();
}
inline void NVMfRemoteController::_internal_set_trsvcid(int64_t value) {
  
  trsvcid_ = value;
}
inline void NVMfRemoteController::set_trsvcid(int64_t value) {
  _internal_set_trsvcid(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.trsvcid)
}

// string subnqn = 6;
inline void NVMfRemoteController::clear_subnqn() {
  subnqn_.ClearToEmpty();
}
inline const std::string& NVMfRemoteController::subnqn() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.subnqn)
  return _internal_subnqn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NVMfRemoteController::set_subnqn(ArgT0&& arg0, ArgT... args) {
 
 subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.subnqn)
}
inline std::string* NVMfRemoteController::mutable_subnqn() {
  std::string* _s = _internal_mutable_subnqn();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteController.subnqn)
  return _s;
}
inline const std::string& NVMfRemoteController::_internal_subnqn() const {
  return subnqn_.Get();
}
inline void NVMfRemoteController::_internal_set_subnqn(const std::string& value) {
  
  subnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NVMfRemoteController::_internal_mutable_subnqn() {
  
  return subnqn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NVMfRemoteController::release_subnqn() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteController.subnqn)
  return subnqn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NVMfRemoteController::set_allocated_subnqn(std::string* subnqn) {
  if (subnqn != nullptr) {
    
  } else {
    
  }
  subnqn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subnqn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subnqn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subnqn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteController.subnqn)
}

// bool hdgst = 7;
inline void NVMfRemoteController::clear_hdgst() {
  hdgst_ = false;
}
inline bool NVMfRemoteController::_internal_hdgst() const {
  return hdgst_;
}
inline bool NVMfRemoteController::hdgst() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.hdgst)
  return _internal_hdgst();
}
inline void NVMfRemoteController::_internal_set_hdgst(bool value) {
  
  hdgst_ = value;
}
inline void NVMfRemoteController::set_hdgst(bool value) {
  _internal_set_hdgst(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.hdgst)
}

// bool ddgst = 8;
inline void NVMfRemoteController::clear_ddgst() {
  ddgst_ = false;
}
inline bool NVMfRemoteController::_internal_ddgst() const {
  return ddgst_;
}
inline bool NVMfRemoteController::ddgst() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.ddgst)
  return _internal_ddgst();
}
inline void NVMfRemoteController::_internal_set_ddgst(bool value) {
  
  ddgst_ = value;
}
inline void NVMfRemoteController::set_ddgst(bool value) {
  _internal_set_ddgst(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.ddgst)
}

// .opi_api.storage.v1.NvmeMultipath multipath = 9;
inline void NVMfRemoteController::clear_multipath() {
  multipath_ = 0;
}
inline ::opi_api::storage::v1::NvmeMultipath NVMfRemoteController::_internal_multipath() const {
  return static_cast< ::opi_api::storage::v1::NvmeMultipath >(multipath_);
}
inline ::opi_api::storage::v1::NvmeMultipath NVMfRemoteController::multipath() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.multipath)
  return _internal_multipath();
}
inline void NVMfRemoteController::_internal_set_multipath(::opi_api::storage::v1::NvmeMultipath value) {
  
  multipath_ = value;
}
inline void NVMfRemoteController::set_multipath(::opi_api::storage::v1::NvmeMultipath value) {
  _internal_set_multipath(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.multipath)
}

// int64 io_queues_count = 10;
inline void NVMfRemoteController::clear_io_queues_count() {
  io_queues_count_ = int64_t{0};
}
inline int64_t NVMfRemoteController::_internal_io_queues_count() const {
  return io_queues_count_;
}
inline int64_t NVMfRemoteController::io_queues_count() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.io_queues_count)
  return _internal_io_queues_count();
}
inline void NVMfRemoteController::_internal_set_io_queues_count(int64_t value) {
  
  io_queues_count_ = value;
}
inline void NVMfRemoteController::set_io_queues_count(int64_t value) {
  _internal_set_io_queues_count(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.io_queues_count)
}

// int64 queue_size = 11;
inline void NVMfRemoteController::clear_queue_size() {
  queue_size_ = int64_t{0};
}
inline int64_t NVMfRemoteController::_internal_queue_size() const {
  return queue_size_;
}
inline int64_t NVMfRemoteController::queue_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.queue_size)
  return _internal_queue_size();
}
inline void NVMfRemoteController::_internal_set_queue_size(int64_t value) {
  
  queue_size_ = value;
}
inline void NVMfRemoteController::set_queue_size(int64_t value) {
  _internal_set_queue_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.queue_size)
}

// string hostnqn = 12;
inline void NVMfRemoteController::clear_hostnqn() {
  hostnqn_.ClearToEmpty();
}
inline const std::string& NVMfRemoteController::hostnqn() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteController.hostnqn)
  return _internal_hostnqn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NVMfRemoteController::set_hostnqn(ArgT0&& arg0, ArgT... args) {
 
 hostnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.NVMfRemoteController.hostnqn)
}
inline std::string* NVMfRemoteController::mutable_hostnqn() {
  std::string* _s = _internal_mutable_hostnqn();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteController.hostnqn)
  return _s;
}
inline const std::string& NVMfRemoteController::_internal_hostnqn() const {
  return hostnqn_.Get();
}
inline void NVMfRemoteController::_internal_set_hostnqn(const std::string& value) {
  
  hostnqn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NVMfRemoteController::_internal_mutable_hostnqn() {
  
  return hostnqn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NVMfRemoteController::release_hostnqn() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteController.hostnqn)
  return hostnqn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NVMfRemoteController::set_allocated_hostnqn(std::string* hostnqn) {
  if (hostnqn != nullptr) {
    
  } else {
    
  }
  hostnqn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostnqn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostnqn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hostnqn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteController.hostnqn)
}

// -------------------------------------------------------------------

// CreateNVMfRemoteControllerRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateNVMfRemoteControllerRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateNVMfRemoteControllerRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateNVMfRemoteControllerRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNVMfRemoteControllerRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateNVMfRemoteControllerRequest.parent)
}
inline std::string* CreateNVMfRemoteControllerRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateNVMfRemoteControllerRequest.parent)
  return _s;
}
inline const std::string& CreateNVMfRemoteControllerRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateNVMfRemoteControllerRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNVMfRemoteControllerRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNVMfRemoteControllerRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateNVMfRemoteControllerRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNVMfRemoteControllerRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateNVMfRemoteControllerRequest.parent)
}

// .opi_api.storage.v1.NVMfRemoteController nv_mf_remote_controller = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateNVMfRemoteControllerRequest::_internal_has_nv_mf_remote_controller() const {
  return this != internal_default_instance() && nv_mf_remote_controller_ != nullptr;
}
inline bool CreateNVMfRemoteControllerRequest::has_nv_mf_remote_controller() const {
  return _internal_has_nv_mf_remote_controller();
}
inline void CreateNVMfRemoteControllerRequest::clear_nv_mf_remote_controller() {
  if (GetArenaForAllocation() == nullptr && nv_mf_remote_controller_ != nullptr) {
    delete nv_mf_remote_controller_;
  }
  nv_mf_remote_controller_ = nullptr;
}
inline const ::opi_api::storage::v1::NVMfRemoteController& CreateNVMfRemoteControllerRequest::_internal_nv_mf_remote_controller() const {
  const ::opi_api::storage::v1::NVMfRemoteController* p = nv_mf_remote_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NVMfRemoteController&>(
      ::opi_api::storage::v1::_NVMfRemoteController_default_instance_);
}
inline const ::opi_api::storage::v1::NVMfRemoteController& CreateNVMfRemoteControllerRequest::nv_mf_remote_controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateNVMfRemoteControllerRequest.nv_mf_remote_controller)
  return _internal_nv_mf_remote_controller();
}
inline void CreateNVMfRemoteControllerRequest::unsafe_arena_set_allocated_nv_mf_remote_controller(
    ::opi_api::storage::v1::NVMfRemoteController* nv_mf_remote_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nv_mf_remote_controller_);
  }
  nv_mf_remote_controller_ = nv_mf_remote_controller;
  if (nv_mf_remote_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.CreateNVMfRemoteControllerRequest.nv_mf_remote_controller)
}
inline ::opi_api::storage::v1::NVMfRemoteController* CreateNVMfRemoteControllerRequest::release_nv_mf_remote_controller() {
  
  ::opi_api::storage::v1::NVMfRemoteController* temp = nv_mf_remote_controller_;
  nv_mf_remote_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NVMfRemoteController* CreateNVMfRemoteControllerRequest::unsafe_arena_release_nv_mf_remote_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateNVMfRemoteControllerRequest.nv_mf_remote_controller)
  
  ::opi_api::storage::v1::NVMfRemoteController* temp = nv_mf_remote_controller_;
  nv_mf_remote_controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NVMfRemoteController* CreateNVMfRemoteControllerRequest::_internal_mutable_nv_mf_remote_controller() {
  
  if (nv_mf_remote_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteController>(GetArenaForAllocation());
    nv_mf_remote_controller_ = p;
  }
  return nv_mf_remote_controller_;
}
inline ::opi_api::storage::v1::NVMfRemoteController* CreateNVMfRemoteControllerRequest::mutable_nv_mf_remote_controller() {
  ::opi_api::storage::v1::NVMfRemoteController* _msg = _internal_mutable_nv_mf_remote_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateNVMfRemoteControllerRequest.nv_mf_remote_controller)
  return _msg;
}
inline void CreateNVMfRemoteControllerRequest::set_allocated_nv_mf_remote_controller(::opi_api::storage::v1::NVMfRemoteController* nv_mf_remote_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nv_mf_remote_controller_;
  }
  if (nv_mf_remote_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NVMfRemoteController>::GetOwningArena(nv_mf_remote_controller);
    if (message_arena != submessage_arena) {
      nv_mf_remote_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nv_mf_remote_controller, submessage_arena);
    }
    
  } else {
    
  }
  nv_mf_remote_controller_ = nv_mf_remote_controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateNVMfRemoteControllerRequest.nv_mf_remote_controller)
}

// string nv_mf_remote_controller_id = 3;
inline void CreateNVMfRemoteControllerRequest::clear_nv_mf_remote_controller_id() {
  nv_mf_remote_controller_id_.ClearToEmpty();
}
inline const std::string& CreateNVMfRemoteControllerRequest::nv_mf_remote_controller_id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.CreateNVMfRemoteControllerRequest.nv_mf_remote_controller_id)
  return _internal_nv_mf_remote_controller_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateNVMfRemoteControllerRequest::set_nv_mf_remote_controller_id(ArgT0&& arg0, ArgT... args) {
 
 nv_mf_remote_controller_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.CreateNVMfRemoteControllerRequest.nv_mf_remote_controller_id)
}
inline std::string* CreateNVMfRemoteControllerRequest::mutable_nv_mf_remote_controller_id() {
  std::string* _s = _internal_mutable_nv_mf_remote_controller_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.CreateNVMfRemoteControllerRequest.nv_mf_remote_controller_id)
  return _s;
}
inline const std::string& CreateNVMfRemoteControllerRequest::_internal_nv_mf_remote_controller_id() const {
  return nv_mf_remote_controller_id_.Get();
}
inline void CreateNVMfRemoteControllerRequest::_internal_set_nv_mf_remote_controller_id(const std::string& value) {
  
  nv_mf_remote_controller_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateNVMfRemoteControllerRequest::_internal_mutable_nv_mf_remote_controller_id() {
  
  return nv_mf_remote_controller_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateNVMfRemoteControllerRequest::release_nv_mf_remote_controller_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.CreateNVMfRemoteControllerRequest.nv_mf_remote_controller_id)
  return nv_mf_remote_controller_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateNVMfRemoteControllerRequest::set_allocated_nv_mf_remote_controller_id(std::string* nv_mf_remote_controller_id) {
  if (nv_mf_remote_controller_id != nullptr) {
    
  } else {
    
  }
  nv_mf_remote_controller_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nv_mf_remote_controller_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nv_mf_remote_controller_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nv_mf_remote_controller_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.CreateNVMfRemoteControllerRequest.nv_mf_remote_controller_id)
}

// -------------------------------------------------------------------

// DeleteNVMfRemoteControllerRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteNVMfRemoteControllerRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteNVMfRemoteControllerRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteNVMfRemoteControllerRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteNVMfRemoteControllerRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteNVMfRemoteControllerRequest.name)
}
inline std::string* DeleteNVMfRemoteControllerRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.DeleteNVMfRemoteControllerRequest.name)
  return _s;
}
inline const std::string& DeleteNVMfRemoteControllerRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteNVMfRemoteControllerRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteNVMfRemoteControllerRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteNVMfRemoteControllerRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.DeleteNVMfRemoteControllerRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteNVMfRemoteControllerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.DeleteNVMfRemoteControllerRequest.name)
}

// bool allow_missing = 2;
inline void DeleteNVMfRemoteControllerRequest::clear_allow_missing() {
  allow_missing_ = false;
}
inline bool DeleteNVMfRemoteControllerRequest::_internal_allow_missing() const {
  return allow_missing_;
}
inline bool DeleteNVMfRemoteControllerRequest::allow_missing() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.DeleteNVMfRemoteControllerRequest.allow_missing)
  return _internal_allow_missing();
}
inline void DeleteNVMfRemoteControllerRequest::_internal_set_allow_missing(bool value) {
  
  allow_missing_ = value;
}
inline void DeleteNVMfRemoteControllerRequest::set_allow_missing(bool value) {
  _internal_set_allow_missing(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.DeleteNVMfRemoteControllerRequest.allow_missing)
}

// -------------------------------------------------------------------

// UpdateNVMfRemoteControllerRequest

// .opi_api.storage.v1.NVMfRemoteController nv_mf_remote_controller = 1;
inline bool UpdateNVMfRemoteControllerRequest::_internal_has_nv_mf_remote_controller() const {
  return this != internal_default_instance() && nv_mf_remote_controller_ != nullptr;
}
inline bool UpdateNVMfRemoteControllerRequest::has_nv_mf_remote_controller() const {
  return _internal_has_nv_mf_remote_controller();
}
inline void UpdateNVMfRemoteControllerRequest::clear_nv_mf_remote_controller() {
  if (GetArenaForAllocation() == nullptr && nv_mf_remote_controller_ != nullptr) {
    delete nv_mf_remote_controller_;
  }
  nv_mf_remote_controller_ = nullptr;
}
inline const ::opi_api::storage::v1::NVMfRemoteController& UpdateNVMfRemoteControllerRequest::_internal_nv_mf_remote_controller() const {
  const ::opi_api::storage::v1::NVMfRemoteController* p = nv_mf_remote_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::NVMfRemoteController&>(
      ::opi_api::storage::v1::_NVMfRemoteController_default_instance_);
}
inline const ::opi_api::storage::v1::NVMfRemoteController& UpdateNVMfRemoteControllerRequest::nv_mf_remote_controller() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateNVMfRemoteControllerRequest.nv_mf_remote_controller)
  return _internal_nv_mf_remote_controller();
}
inline void UpdateNVMfRemoteControllerRequest::unsafe_arena_set_allocated_nv_mf_remote_controller(
    ::opi_api::storage::v1::NVMfRemoteController* nv_mf_remote_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nv_mf_remote_controller_);
  }
  nv_mf_remote_controller_ = nv_mf_remote_controller;
  if (nv_mf_remote_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateNVMfRemoteControllerRequest.nv_mf_remote_controller)
}
inline ::opi_api::storage::v1::NVMfRemoteController* UpdateNVMfRemoteControllerRequest::release_nv_mf_remote_controller() {
  
  ::opi_api::storage::v1::NVMfRemoteController* temp = nv_mf_remote_controller_;
  nv_mf_remote_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::NVMfRemoteController* UpdateNVMfRemoteControllerRequest::unsafe_arena_release_nv_mf_remote_controller() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateNVMfRemoteControllerRequest.nv_mf_remote_controller)
  
  ::opi_api::storage::v1::NVMfRemoteController* temp = nv_mf_remote_controller_;
  nv_mf_remote_controller_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::NVMfRemoteController* UpdateNVMfRemoteControllerRequest::_internal_mutable_nv_mf_remote_controller() {
  
  if (nv_mf_remote_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::NVMfRemoteController>(GetArenaForAllocation());
    nv_mf_remote_controller_ = p;
  }
  return nv_mf_remote_controller_;
}
inline ::opi_api::storage::v1::NVMfRemoteController* UpdateNVMfRemoteControllerRequest::mutable_nv_mf_remote_controller() {
  ::opi_api::storage::v1::NVMfRemoteController* _msg = _internal_mutable_nv_mf_remote_controller();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateNVMfRemoteControllerRequest.nv_mf_remote_controller)
  return _msg;
}
inline void UpdateNVMfRemoteControllerRequest::set_allocated_nv_mf_remote_controller(::opi_api::storage::v1::NVMfRemoteController* nv_mf_remote_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nv_mf_remote_controller_;
  }
  if (nv_mf_remote_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opi_api::storage::v1::NVMfRemoteController>::GetOwningArena(nv_mf_remote_controller);
    if (message_arena != submessage_arena) {
      nv_mf_remote_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nv_mf_remote_controller, submessage_arena);
    }
    
  } else {
    
  }
  nv_mf_remote_controller_ = nv_mf_remote_controller;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateNVMfRemoteControllerRequest.nv_mf_remote_controller)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateNVMfRemoteControllerRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateNVMfRemoteControllerRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNVMfRemoteControllerRequest::_internal_update_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& UpdateNVMfRemoteControllerRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.UpdateNVMfRemoteControllerRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateNVMfRemoteControllerRequest::unsafe_arena_set_allocated_update_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.UpdateNVMfRemoteControllerRequest.update_mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNVMfRemoteControllerRequest::release_update_mask() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNVMfRemoteControllerRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.UpdateNVMfRemoteControllerRequest.update_mask)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNVMfRemoteControllerRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    update_mask_ = p;
  }
  return update_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* UpdateNVMfRemoteControllerRequest::mutable_update_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.UpdateNVMfRemoteControllerRequest.update_mask)
  return _msg;
}
inline void UpdateNVMfRemoteControllerRequest::set_allocated_update_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.UpdateNVMfRemoteControllerRequest.update_mask)
}

// -------------------------------------------------------------------

// ListNVMfRemoteControllersRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListNVMfRemoteControllersRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListNVMfRemoteControllersRequest::parent() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNVMfRemoteControllersRequest.parent)
  return _internal_parent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNVMfRemoteControllersRequest::set_parent(ArgT0&& arg0, ArgT... args) {
 
 parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNVMfRemoteControllersRequest.parent)
}
inline std::string* ListNVMfRemoteControllersRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNVMfRemoteControllersRequest.parent)
  return _s;
}
inline const std::string& ListNVMfRemoteControllersRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListNVMfRemoteControllersRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNVMfRemoteControllersRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNVMfRemoteControllersRequest::release_parent() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNVMfRemoteControllersRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNVMfRemoteControllersRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNVMfRemoteControllersRequest.parent)
}

// int32 page_size = 2;
inline void ListNVMfRemoteControllersRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListNVMfRemoteControllersRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListNVMfRemoteControllersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNVMfRemoteControllersRequest.page_size)
  return _internal_page_size();
}
inline void ListNVMfRemoteControllersRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListNVMfRemoteControllersRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNVMfRemoteControllersRequest.page_size)
}

// string page_token = 3;
inline void ListNVMfRemoteControllersRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListNVMfRemoteControllersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNVMfRemoteControllersRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNVMfRemoteControllersRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNVMfRemoteControllersRequest.page_token)
}
inline std::string* ListNVMfRemoteControllersRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNVMfRemoteControllersRequest.page_token)
  return _s;
}
inline const std::string& ListNVMfRemoteControllersRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListNVMfRemoteControllersRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNVMfRemoteControllersRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNVMfRemoteControllersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNVMfRemoteControllersRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNVMfRemoteControllersRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNVMfRemoteControllersRequest.page_token)
}

// -------------------------------------------------------------------

// ListNVMfRemoteControllersResponse

// repeated .opi_api.storage.v1.NVMfRemoteController nv_mf_remote_controllers = 1;
inline int ListNVMfRemoteControllersResponse::_internal_nv_mf_remote_controllers_size() const {
  return nv_mf_remote_controllers_.size();
}
inline int ListNVMfRemoteControllersResponse::nv_mf_remote_controllers_size() const {
  return _internal_nv_mf_remote_controllers_size();
}
inline void ListNVMfRemoteControllersResponse::clear_nv_mf_remote_controllers() {
  nv_mf_remote_controllers_.Clear();
}
inline ::opi_api::storage::v1::NVMfRemoteController* ListNVMfRemoteControllersResponse::mutable_nv_mf_remote_controllers(int index) {
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNVMfRemoteControllersResponse.nv_mf_remote_controllers)
  return nv_mf_remote_controllers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NVMfRemoteController >*
ListNVMfRemoteControllersResponse::mutable_nv_mf_remote_controllers() {
  // @@protoc_insertion_point(field_mutable_list:opi_api.storage.v1.ListNVMfRemoteControllersResponse.nv_mf_remote_controllers)
  return &nv_mf_remote_controllers_;
}
inline const ::opi_api::storage::v1::NVMfRemoteController& ListNVMfRemoteControllersResponse::_internal_nv_mf_remote_controllers(int index) const {
  return nv_mf_remote_controllers_.Get(index);
}
inline const ::opi_api::storage::v1::NVMfRemoteController& ListNVMfRemoteControllersResponse::nv_mf_remote_controllers(int index) const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNVMfRemoteControllersResponse.nv_mf_remote_controllers)
  return _internal_nv_mf_remote_controllers(index);
}
inline ::opi_api::storage::v1::NVMfRemoteController* ListNVMfRemoteControllersResponse::_internal_add_nv_mf_remote_controllers() {
  return nv_mf_remote_controllers_.Add();
}
inline ::opi_api::storage::v1::NVMfRemoteController* ListNVMfRemoteControllersResponse::add_nv_mf_remote_controllers() {
  ::opi_api::storage::v1::NVMfRemoteController* _add = _internal_add_nv_mf_remote_controllers();
  // @@protoc_insertion_point(field_add:opi_api.storage.v1.ListNVMfRemoteControllersResponse.nv_mf_remote_controllers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opi_api::storage::v1::NVMfRemoteController >&
ListNVMfRemoteControllersResponse::nv_mf_remote_controllers() const {
  // @@protoc_insertion_point(field_list:opi_api.storage.v1.ListNVMfRemoteControllersResponse.nv_mf_remote_controllers)
  return nv_mf_remote_controllers_;
}

// string next_page_token = 2;
inline void ListNVMfRemoteControllersResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListNVMfRemoteControllersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.ListNVMfRemoteControllersResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListNVMfRemoteControllersResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.ListNVMfRemoteControllersResponse.next_page_token)
}
inline std::string* ListNVMfRemoteControllersResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.ListNVMfRemoteControllersResponse.next_page_token)
  return _s;
}
inline const std::string& ListNVMfRemoteControllersResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListNVMfRemoteControllersResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListNVMfRemoteControllersResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListNVMfRemoteControllersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.ListNVMfRemoteControllersResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListNVMfRemoteControllersResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (next_page_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.ListNVMfRemoteControllersResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetNVMfRemoteControllerRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetNVMfRemoteControllerRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetNVMfRemoteControllerRequest::name() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.GetNVMfRemoteControllerRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNVMfRemoteControllerRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:opi_api.storage.v1.GetNVMfRemoteControllerRequest.name)
}
inline std::string* GetNVMfRemoteControllerRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.GetNVMfRemoteControllerRequest.name)
  return _s;
}
inline const std::string& GetNVMfRemoteControllerRequest::_internal_name() const {
  return name_.Get();
}
inline void GetNVMfRemoteControllerRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetNVMfRemoteControllerRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetNVMfRemoteControllerRequest::release_name() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.GetNVMfRemoteControllerRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetNVMfRemoteControllerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.GetNVMfRemoteControllerRequest.name)
}

// -------------------------------------------------------------------

// NVMfRemoteControllerResetRequest

// .opi_api.common.v1.ObjectKey id = 1;
inline bool NVMfRemoteControllerResetRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool NVMfRemoteControllerResetRequest::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteControllerResetRequest::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteControllerResetRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteControllerResetRequest.id)
  return _internal_id();
}
inline void NVMfRemoteControllerResetRequest::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NVMfRemoteControllerResetRequest.id)
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerResetRequest::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerResetRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteControllerResetRequest.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerResetRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerResetRequest::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteControllerResetRequest.id)
  return _msg;
}
inline void NVMfRemoteControllerResetRequest::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteControllerResetRequest.id)
}

// -------------------------------------------------------------------

// NVMfRemoteControllerStatsRequest

// .opi_api.common.v1.ObjectKey id = 1;
inline bool NVMfRemoteControllerStatsRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool NVMfRemoteControllerStatsRequest::has_id() const {
  return _internal_has_id();
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteControllerStatsRequest::_internal_id() const {
  const ::opi_api::common::v1::ObjectKey* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::common::v1::ObjectKey&>(
      ::opi_api::common::v1::_ObjectKey_default_instance_);
}
inline const ::opi_api::common::v1::ObjectKey& NVMfRemoteControllerStatsRequest::id() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteControllerStatsRequest.id)
  return _internal_id();
}
inline void NVMfRemoteControllerStatsRequest::unsafe_arena_set_allocated_id(
    ::opi_api::common::v1::ObjectKey* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NVMfRemoteControllerStatsRequest.id)
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerStatsRequest::release_id() {
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerStatsRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteControllerStatsRequest.id)
  
  ::opi_api::common::v1::ObjectKey* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerStatsRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::common::v1::ObjectKey>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::opi_api::common::v1::ObjectKey* NVMfRemoteControllerStatsRequest::mutable_id() {
  ::opi_api::common::v1::ObjectKey* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteControllerStatsRequest.id)
  return _msg;
}
inline void NVMfRemoteControllerStatsRequest::set_allocated_id(::opi_api::common::v1::ObjectKey* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteControllerStatsRequest.id)
}

// -------------------------------------------------------------------

// NVMfRemoteControllerStatsResponse

// .opi_api.storage.v1.VolumeStats stats = 1;
inline bool NVMfRemoteControllerStatsResponse::_internal_has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline bool NVMfRemoteControllerStatsResponse::has_stats() const {
  return _internal_has_stats();
}
inline const ::opi_api::storage::v1::VolumeStats& NVMfRemoteControllerStatsResponse::_internal_stats() const {
  const ::opi_api::storage::v1::VolumeStats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::opi_api::storage::v1::VolumeStats&>(
      ::opi_api::storage::v1::_VolumeStats_default_instance_);
}
inline const ::opi_api::storage::v1::VolumeStats& NVMfRemoteControllerStatsResponse::stats() const {
  // @@protoc_insertion_point(field_get:opi_api.storage.v1.NVMfRemoteControllerStatsResponse.stats)
  return _internal_stats();
}
inline void NVMfRemoteControllerStatsResponse::unsafe_arena_set_allocated_stats(
    ::opi_api::storage::v1::VolumeStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opi_api.storage.v1.NVMfRemoteControllerStatsResponse.stats)
}
inline ::opi_api::storage::v1::VolumeStats* NVMfRemoteControllerStatsResponse::release_stats() {
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* NVMfRemoteControllerStatsResponse::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:opi_api.storage.v1.NVMfRemoteControllerStatsResponse.stats)
  
  ::opi_api::storage::v1::VolumeStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::opi_api::storage::v1::VolumeStats* NVMfRemoteControllerStatsResponse::_internal_mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::opi_api::storage::v1::VolumeStats>(GetArenaForAllocation());
    stats_ = p;
  }
  return stats_;
}
inline ::opi_api::storage::v1::VolumeStats* NVMfRemoteControllerStatsResponse::mutable_stats() {
  ::opi_api::storage::v1::VolumeStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:opi_api.storage.v1.NVMfRemoteControllerStatsResponse.stats)
  return _msg;
}
inline void NVMfRemoteControllerStatsResponse::set_allocated_stats(::opi_api::storage::v1::VolumeStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats));
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:opi_api.storage.v1.NVMfRemoteControllerStatsResponse.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace storage
}  // namespace opi_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opi_api::storage::v1::NvmeTransportType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::storage::v1::NvmeTransportType>() {
  return ::opi_api::storage::v1::NvmeTransportType_descriptor();
}
template <> struct is_proto_enum< ::opi_api::storage::v1::NvmeAddressFamily> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::storage::v1::NvmeAddressFamily>() {
  return ::opi_api::storage::v1::NvmeAddressFamily_descriptor();
}
template <> struct is_proto_enum< ::opi_api::storage::v1::NvmeMultipath> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opi_api::storage::v1::NvmeMultipath>() {
  return ::opi_api::storage::v1::NvmeMultipath_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_backend_5fnvme_5ftcp_2eproto
